Fragment(uuid='4e9671a8-019f-4b08-b761-b005f443c722',
         path='/.gitignore',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='/*__pycache__/\n*.pyc\n*.DS_Store\n')

Fragment(uuid='66c866a1-54be-4080-8087-2f2553b44b1b',
         path='/.gitignore',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /.gitignore\n')

Fragment(uuid='251a63df-6d9d-449f-824d-70320885a981',
         path='/LICENSE',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='MIT License\n')

Fragment(uuid='c990234e-22b2-4563-a218-b8797f4527bf',
         path='/LICENSE',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /LICENSE\n')

Fragment(uuid='c6529120-ca01-4d77-839e-a74efe9d6e05',
         path='/LICENSE',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\nCopyright (c) 2023 Shunyu Yao\n')

Fragment(uuid='a71542b5-2f86-4cb7-b752-345ec45033c6',
         path='/LICENSE',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'Permission is hereby granted, free of charge, to any person '
              'obtaining a copy\n'
              'of this software and associated documentation files (the '
              '"Software"), to deal\n'
              'in the Software without restriction, including without '
              'limitation the rights\n'
              'to use, copy, modify, merge, publish, distribute, sublicense, '
              'and/or sell\n'
              'copies of the Software, and to permit persons to whom the '
              'Software is\n'
              'furnished to do so, subject to the following conditions:\n')

Fragment(uuid='9fff7e70-c6d6-44d3-9e3a-0b528e0e3154',
         path='/LICENSE',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'The above copyright notice and this permission notice shall be '
              'included in all\n'
              'copies or substantial portions of the Software.\n')

Fragment(uuid='362692b5-da5a-42fc-878e-1d8bc386fdfb',
         path='/LICENSE',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, '
              'EXPRESS OR\n'
              'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF '
              'MERCHANTABILITY,\n'
              'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO '
              'EVENT SHALL THE\n'
              'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES '
              'OR OTHER\n'
              'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, '
              'ARISING FROM,\n'
              'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER '
              'DEALINGS IN THE\n'
              'SOFTWARE.\n')

Fragment(uuid='e561ba48-a36f-4d0e-bcdb-1923be8610e7',
         path='/data/24/24.csv',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /data/24/24.csv\n')

Fragment(uuid='526a1d0b-7566-4622-856f-ed720944827f',
         path='/data/crosswords/mini0505.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /data/crosswords/mini0505.json\n')

Fragment(uuid='4e584630-de25-471e-95ab-8c140363b630',
         path='/data/crosswords/mini0505_0_100_5.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /data/crosswords/mini0505_0_100_5.json\n')

Fragment(uuid='f6d99563-47ea-4a9f-b7fb-e8689419fdee',
         path='/data/text/data_100_random_text.txt',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text="It isn't difficult to do a handstand if you just stand on your "
              'hands. It caught him off guard that space smelled of seared '
              'steak. When she didn’t like a guy who was trying to pick her '
              'up, she started using sign language. Each person who knows you '
              'has a different perception of who you are.')

Fragment(uuid='60063bcf-f317-4be1-87e4-956a8d4a8bd1',
         path='/data/text/data_100_random_text.txt',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The hawk didn’t understand why the ground squirrels didn’t want '
              'to be his friend. If I don’t like something, I’ll stay away '
              'from it. People keep telling me "orange" but I still prefer '
              '"pink". He dreamed of leaving his law firm to open a portable '
              'dog wash.')

Fragment(uuid='1c848972-2652-4032-8068-b2a5a00f96c0',
         path='/data/text/data_100_random_text.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /data/text/data_100_random_text.txt\n')

Fragment(uuid='0affe3f3-db39-4a64-b03e-0936d9710f45',
         path='/data/text/data_100_random_text.txt',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'My biggest joy is roasting almonds while stalking prey. You '
              "realize you're not alone as you sit in your bedroom massaging "
              'your calves after a long day of playing tug-of-war with Grandpa '
              'Joe in the hospital. The ants enjoyed the barbecue more than '
              'the family. The hawk didn’t understand why the ground squirrels '
              'didn’t want to be his friend.')

Fragment(uuid='15865b36-dc63-4084-82b1-70a025e9b50c',
         path='/data/text/data_100_random_text.txt',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'The overpass went under the highway and into a secret world. He '
              'found his art never progressed when he literally used his sweat '
              'and tears. It was always dangerous to drive with him since he '
              'insisted the safety cones were a slalom course.')

Fragment(uuid='53299c55-3696-424b-ae92-5688b9e65041',
         path='/data/text/data_100_random_text.txt',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              "You realize you're not alone as you sit in your bedroom "
              'massaging your calves after a long day of playing tug-of-war '
              'with Grandpa Joe in the hospital. I was starting to worry that '
              "my pet turtle could tell what I was thinking. He's in a boy "
              "band which doesn't make much sense for a snake.")

Fragment(uuid='bf77062e-9025-44be-8957-5591cef3ec3a',
         path='/data/text/data_100_random_text.txt',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He was surprised that his immense laziness was inspirational to '
              "others. Instead of a bachelorette party You realize you're not "
              'alone as you sit in your bedroom massaging your calves after a '
              'long day of playing tug-of-war with Grandpa Joe in the '
              'hospital. If I don’t like something, I’ll stay away from it.')

Fragment(uuid='166b5553-8179-4a83-96ce-b42c22859d38',
         path='/data/text/data_100_random_text.txt',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "For some unfathomable reason, the response team didn't consider "
              'a lack of milk for my cereal as a proper emergency. You realize '
              "you're not alone as you sit in your bedroom massaging your "
              'calves after a long day of playing tug-of-war with Grandpa Joe '
              'in the hospital. He poured rocks in the dungeon of his mind. '
              'I’m a living furnace.')

Fragment(uuid='08a75de1-f7fb-47b1-bfdf-cb75e3b5855b',
         path='/data/text/data_100_random_text.txt',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "You realize you're not alone as you sit in your bedroom "
              'massaging your calves after a long day of playing tug-of-war '
              'with Grandpa Joe in the hospital. Today arrived with a crash of '
              'my car through the garage door. I had a friend in high school '
              'named Rick Shaw, but he was fairly useless as a mode of '
              'transport. It was always dangerous to drive with him since he '
              'insisted the safety cones were a slalom course.')

Fragment(uuid='6d97adac-64b2-4834-8e9d-49d13f2e9153',
         path='/data/text/data_100_random_text.txt',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He decided to fake his disappearance to avoid jail. He was all '
              'business when he wore his clown suit. We have a lot of rain in '
              'June. The snow-covered path was no help in finding his way out '
              'of the back-country.')

Fragment(uuid='c0225180-f690-40aa-aaa7-29d86aa3d270',
         path='/data/text/data_100_random_text.txt',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The fence was confused about whether it was supposed to keep '
              'things in or keep things out. He quietly entered the museum as '
              'the super bowl started. When confronted with a rotary dial '
              'phone the teenager was perplexed. She discovered van life is '
              'difficult with 2 cats and a dog.')

Fragment(uuid='15a0bcd9-bd01-47c8-8a38-11b81ec44827',
         path='/data/text/data_100_random_text.txt',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He dreamed of eating green apples with worms. Homesickness '
              "became contagious in the young campers' cabin. She couldn't "
              'understand why nobody else could see that the sky is full of '
              'cotton candy. There was no ice cream in the freezer, nor did '
              'they have money to go to the store.')

Fragment(uuid='0fe4a7d9-9e9f-4912-aef8-c3fda53ed62b',
         path='/data/text/data_100_random_text.txt',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "A glittering gem is not enough. It's much more difficult to "
              'play tennis with a bowling ball than it is to bowl with a '
              'tennis ball. When confronted with a rotary dial phone the '
              'teenager was perplexed. There should have been a time and a '
              "place, but this wasn't it.")

Fragment(uuid='5d823f57-739a-4f33-8a7d-8c35fc244a57',
         path='/data/text/data_100_random_text.txt',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The blue parrot drove by the hitchhiking mongoose. The ants '
              'enjoyed the barbecue more than the family. The Great Dane '
              'looked more like a horse than a dog. Various sea birds are '
              'elegant, but nothing is as elegant as a gliding pelican.')

Fragment(uuid='cc95e08e-5b00-4853-a1a2-4e4f0d2f412d',
         path='/data/text/data_100_random_text.txt',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The murder hornet was disappointed by the preconceived ideas '
              'people had of him. She wondered what his eyes were saying '
              'beneath his mirrored sunglasses. The fox in the tophat '
              "whispered into the ear of the rabbit. He's in a boy band which "
              "doesn't make much sense for a snake.")

Fragment(uuid='8dbec7b5-b0fb-487c-94e2-f30c1e18343c',
         path='/data/text/data_100_random_text.txt',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "There's probably enough glass in my cupboard to build an "
              'undersea aquarium. He was disappointed when he found the beach '
              'to be so sandy and the sun so sunny. She looked into the mirror '
              'and saw another person. The sudden rainstorm washed crocodiles '
              'into the ocean.')

Fragment(uuid='87a3a971-b21a-4472-9aab-3c52253a9322',
         path='/data/text/data_100_random_text.txt',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It caught him off guard that space smelled of seared steak. The '
              'busker hoped that the people passing by would throw money, but '
              'they threw tomatoes instead, so he exchanged his hat for a '
              "juicer. Honestly, I didn't care much for the first season, so I "
              "didn't bother with the second. Today arrived with a crash of my "
              'car through the garage door.')

Fragment(uuid='69d82d47-4f1f-4d47-99e3-fa9240eaff16',
         path='/data/text/data_100_random_text.txt',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'There was no ice cream in the freezer, nor did they have money '
              'to go to the store. The waves were crashing on the shore; it '
              'was a lovely sight. He knew it was going to be a bad day when '
              "he saw mountain lions roaming the streets. It's much more "
              'difficult to play tennis with a bowling ball than it is to bowl '
              'with a tennis ball.')

Fragment(uuid='9c050d7d-8b80-403c-b295-102be12a934d',
         path='/data/text/data_100_random_text.txt',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              'I’m a living furnace. The near-death experience brought new '
              'ideas to light. I was starting to worry that my pet turtle '
              'could tell what I was thinking.')

Fragment(uuid='a439a09e-7d72-443d-b87e-bf7a1df22f31',
         path='/data/text/data_100_random_text.txt',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Written warnings in instruction manuals are worthless since '
              "rabbits can't read. You're unsure whether or not to trust him, "
              'but very thankful that you wore a turtle neck. You realize '
              "you're not alone as you sit in your bedroom massaging your "
              'calves after a long day of playing tug-of-war with Grandpa Joe '
              "in the hospital. Strawberries must be the one food that doesn't "
              'go well with this brand of paint.')

Fragment(uuid='0aafc96c-d85e-40bd-aa82-b8b192b51826',
         path='/data/text/data_100_random_text.txt',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Strawberries must be the one food that doesn't go well with "
              'this brand of paint. Joe discovered that traffic cones make '
              "excellent megaphones. There's a reason that roses have thorns. "
              'She traveled because it cost the same as therapy and was a lot '
              'more enjoyable.')

Fragment(uuid='e695b582-a95d-4efe-9b33-25c67539d94b',
         path='/data/text/data_100_random_text.txt',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Her hair was windswept as she rode in the black convertible. '
              'She traveled because it cost the same as therapy and was a lot '
              "more enjoyable. It's always a good idea to seek shelter from "
              'the evil gaze of the sun. He turned in the research paper on '
              'Friday; otherwise, he would have not passed the class.')

Fragment(uuid='be7c4591-771a-4b62-b905-bb8a55a4bf5d',
         path='/data/text/data_100_random_text.txt',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Today arrived with a crash of my car through the garage door. '
              "It's never comforting to know that your fate depends on "
              'something as unpredictable as the popping of corn. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny. Courage and stupidity were all he had.')

Fragment(uuid='19b6c9d2-071a-449a-b39d-c428a7145f67',
         path='/data/text/data_100_random_text.txt',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She had some amazing news to share but nobody to share it with. '
              "She couldn't understand why nobody else could see that the sky "
              'is full of cotton candy. Each person who knows you has a '
              'different perception of who you are. He decided that the time '
              "had come to be stronger than any of the excuses he'd used until "
              'then.')

Fragment(uuid='ea5edd8e-4524-41be-9a27-42e6cb4019c1',
         path='/data/text/data_100_random_text.txt',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The blue parrot drove by the hitchhiking mongoose. His get rich '
              'quick scheme was to grow a cactus farm. For some unfathomable '
              "reason, the response team didn't consider a lack of milk for my "
              'cereal as a proper emergency. He picked up trash in his spare '
              "time to dump in his neighbor's yard.")

Fragment(uuid='068887df-7831-4314-ab9a-8c49c982f541',
         path='/data/text/data_100_random_text.txt',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Her hair was windswept as she rode in the black convertible. '
              'The ants enjoyed the barbecue more than the family. '
              "Homesickness became contagious in the young campers' cabin. The "
              'busker hoped that the people passing by would throw money, but '
              'they threw tomatoes instead, so he exchanged his hat for a '
              'juicer.')

Fragment(uuid='107994b3-7b6d-498c-8606-04db2a456953',
         path='/data/text/data_100_random_text.txt',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'I’m a living furnace. The near-death experience brought new '
              'ideas to light. He was surprised that his immense laziness was '
              'inspirational to others. There was no ice cream in the freezer, '
              'nor did they have money to go to the store.')

Fragment(uuid='e68d751a-14a6-49c8-8bf8-f6821679a438',
         path='/data/text/data_100_random_text.txt',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "It isn't difficult to do a handstand if you just stand on your "
              "hands. I'd rather be a bird than a fish. Homesickness became "
              "contagious in the young campers' cabin. He picked up trash in "
              "his spare time to dump in his neighbor's yard.")

Fragment(uuid='6ba372a9-d812-453c-a03d-408c82c6b6d3',
         path='/data/text/data_100_random_text.txt',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "He poured rocks in the dungeon of his mind. It isn't difficult "
              "to do a handstand if you just stand on your hands. It's never "
              'comforting to know that your fate depends on something as '
              "unpredictable as the popping of corn. He's in a boy band which "
              "doesn't make much sense for a snake.")

Fragment(uuid='75cbd81a-934c-4498-a2a1-286c85c84919',
         path='/data/text/data_100_random_text.txt',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. The heat He picked up trash '
              "in his spare time to dump in his neighbor's yard. The anaconda "
              'was the greatest criminal mastermind in this part of the '
              'neighborhood.')

Fragment(uuid='75cca0f9-e26d-4798-b319-299a000cd0ef',
         path='/data/text/data_100_random_text.txt',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'I’m a living furnace. The book is in front of the table. He '
              'walked into the basement with the horror movie from the night '
              'before playing in his head. He turned in the research paper on '
              'Friday; otherwise, he would have not passed the class.')

Fragment(uuid='7cfa05d4-be93-4ddf-b82c-3457806a17b2',
         path='/data/text/data_100_random_text.txt',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "For some unfathomable reason, the response team didn't consider "
              'a lack of milk for my cereal as a proper emergency. He turned '
              'in the research paper on Friday; otherwise, he would have not '
              'passed the class. Her hair was windswept as she rode in the '
              'black convertible. Karen realized the only way she was getting '
              'into heaven was to cheat.')

Fragment(uuid='52444dbb-4eaa-4be1-8bca-d4f91a4fb1c3',
         path='/data/text/data_100_random_text.txt',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. I covered my friend in baby '
              'oil. Today arrived with a crash of my car through the garage '
              "door. She couldn't understand why nobody else could see that "
              'the sky is full of cotton candy.')

Fragment(uuid='756b5f6e-4c9f-4904-b5dc-8ff8015c7be2',
         path='/data/text/data_100_random_text.txt',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The book is in front of the table. There should have been a '
              "time and a place, but this wasn't it. I'd rather be a bird than "
              'a fish. The blue parrot drove by the hitchhiking mongoose.')

Fragment(uuid='e44bf07d-85ac-494e-883c-676880d2458a',
         path='/data/text/data_100_random_text.txt',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Karen realized the only way she was getting into heaven was to '
              'cheat. Two seats were vacant. Just because the water is red '
              "doesn't mean you can't drink it. She wondered what his eyes "
              'were saying beneath his mirrored sunglasses.')

Fragment(uuid='d8568218-06ce-40f1-b117-874efef6a73d',
         path='/data/text/data_100_random_text.txt',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Strawberries must be the one food that doesn't go well with "
              'this brand of paint. It caught him off guard that space smelled '
              'of seared steak. The book is in front of the table. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny.')

Fragment(uuid='e239b34f-381d-4bcb-8c14-c7755a9c3131',
         path='/data/text/data_100_random_text.txt',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The team members were hard to tell apart since they all wore '
              'their hair in a ponytail. He found his art never progressed '
              'when he literally used his sweat and tears. There was no ice '
              'cream in the freezer, nor did they have money to go to the '
              "store. You're unsure whether or not to trust him, but very "
              'thankful that you wore a turtle neck.')

Fragment(uuid='c5b5bb8d-8e73-4d9b-9c64-20773274ba74',
         path='/data/text/data_100_random_text.txt',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The team members were hard to tell apart since they all wore '
              'their hair in a ponytail. It was the scarcity that fueled his '
              'creativity. He turned in the research paper on Friday; '
              'otherwise, he would have not passed the class. The busker hoped '
              'that the people passing by would throw money, but they threw '
              'tomatoes instead, so he exchanged his hat for a juicer.')

Fragment(uuid='05123027-28eb-40f1-b9eb-c6a0c2cbe9b9',
         path='/data/text/data_100_random_text.txt',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Each person who knows you has a different perception of who you '
              'are. The team members were hard to tell apart since they all '
              'wore their hair in a ponytail. Just because the water is red '
              "doesn't mean you can't drink it. We have a lot of rain in June.")

Fragment(uuid='6a5c27d4-854f-4c19-a430-ff23e43b3b31',
         path='/data/text/data_100_random_text.txt',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He found his art never progressed when he literally used his '
              'sweat and tears. Karen realized the only way she was getting '
              'into heaven was to cheat. The green tea and avocado smoothie '
              'turned out exactly as would be expected. It caught him off '
              'guard that space smelled of seared steak.')

Fragment(uuid='c779cf9b-50ba-4a27-a6e0-de395579584c',
         path='/data/text/data_100_random_text.txt',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She looked into the mirror and saw another person. The team '
              'members were hard to tell apart since they all wore their hair '
              'in a ponytail. There should have been a time and a place, but '
              "this wasn't it. Just because the water is red doesn't mean you "
              "can't drink it.")

Fragment(uuid='f0fb5e38-3060-4c15-8453-2e20f530ac54',
         path='/data/text/data_100_random_text.txt',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She finally understood that grief was her love with no place '
              'for it to go. The ants enjoyed the barbecue more than the '
              'family. The snow-covered path was no help in finding his way '
              "out of the back-country. It's never comforting to know that "
              'your fate depends on something as unpredictable as the popping '
              'of corn.')

Fragment(uuid='fc5ea5ae-7729-43ad-80e8-5e4014652b9f',
         path='/data/text/data_100_random_text.txt',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She traveled because it cost the same as therapy and was a lot '
              'more enjoyable. He decided to fake his disappearance to avoid '
              'jail. The green tea and avocado smoothie turned out exactly as '
              'would be expected. He knew it was going to be a bad day when he '
              'saw mountain lions roaming the streets.')

Fragment(uuid='73ee2b12-5213-4ac2-964d-8d7787cd2022',
         path='/data/text/data_100_random_text.txt',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The sudden rainstorm washed crocodiles into the ocean. She '
              'wondered what his eyes were saying beneath his mirrored '
              'sunglasses. If eating three-egg omelets causes weight-gain, '
              'budgie eggs are a good substitute. He knew it was going to be a '
              'bad day when he saw mountain lions roaming the streets.')

Fragment(uuid='74570892-ca04-4e91-83e4-131315da11a7',
         path='/data/text/data_100_random_text.txt',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The blue parrot drove by the hitchhiking mongoose. He dreamed '
              'of eating green apples with worms. He was all business when he '
              'wore his clown suit. The snow-covered path was no help in '
              'finding his way out of the back-country.')

Fragment(uuid='6cef3d36-31ab-474d-be85-a9de8e487747',
         path='/data/text/data_100_random_text.txt',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Just go ahead and press that button. Karen realized the only '
              'way she was getting into heaven was to cheat. My biggest joy is '
              'roasting almonds while stalking prey. The waves were crashing '
              'on the shore; it was a lovely sight.')

Fragment(uuid='6a87e7db-1a8d-44ac-ab5f-b5f2fd906782',
         path='/data/text/data_100_random_text.txt',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Gwen had her best sleep ever on her new bed of nails. He '
              'learned the important lesson that a picnic at the beach on a '
              'windy day is a bad idea. It caught him off guard that space '
              'smelled of seared steak. My biggest joy is roasting almonds '
              'while stalking prey.')

Fragment(uuid='f46d19dd-9217-46c6-814f-1e75f62d7f38',
         path='/data/text/data_100_random_text.txt',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              'Written warnings in instruction manuals are worthless since '
              "rabbits can't read. If I don’t like something, I’ll stay away "
              'from it. He used to get confused between soldiers and '
              'shoulders, but as a military man, he now soldiers '
              'responsibility.')

Fragment(uuid='f2990a9e-7573-45d5-ad76-0983e9462442',
         path='/data/text/data_100_random_text.txt',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He learned the important lesson that a picnic at the beach on a '
              'windy day is a bad idea. The Great Dane looked more like a '
              'horse than a dog. Written warnings in instruction manuals are '
              "worthless since rabbits can't read. He decided that the time "
              "had come to be stronger than any of the excuses he'd used until "
              'then.')

Fragment(uuid='ab6632ed-fce2-4017-873d-edd0424694d5',
         path='/data/text/data_100_random_text.txt',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'My biggest joy is roasting almonds while stalking prey. When '
              'confronted with a rotary dial phone the teenager was perplexed. '
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'The near-death experience brought new ideas to light.')

Fragment(uuid='d0c6ed2b-ddf2-4b7c-9c5a-1c79f865a380',
         path='/data/text/data_100_random_text.txt',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'My secretary is the only person who truly understands my '
              'stamp-collecting obsession. Instead of a bachelorette party '
              'Just go ahead and press that button. The ants enjoyed the '
              'barbecue more than the family.')

Fragment(uuid='b840a6ea-faef-402e-b1a3-258935cea38a',
         path='/data/text/data_100_random_text.txt',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It caught him off guard that space smelled of seared steak. The '
              'Great Dane looked more like a horse than a dog. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny. There should have been a time and a place, but this '
              "wasn't it.")

Fragment(uuid='8584c1af-a4f8-4ce9-b2bb-235b7f7fd507',
         path='/data/text/data_100_random_text.txt',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He turned in the research paper on Friday; otherwise, he would '
              'have not passed the class. Tomatoes make great weapons when '
              'water balloons aren’t available. He picked up trash in his '
              "spare time to dump in his neighbor's yard. It caught him off "
              'guard that space smelled of seared steak.')

Fragment(uuid='8688b356-0ce7-4d3b-abd9-99e3d6d2d6ab',
         path='/data/text/data_100_random_text.txt',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'He dreamed of leaving his law firm to open a portable dog wash. '
              'When confronted with a rotary dial phone the teenager was '
              "perplexed. There's probably enough glass in my cupboard to "
              'build an undersea aquarium.')

Fragment(uuid='01bfa3f6-7ef4-4ac4-9772-4a2d74d79bba',
         path='/data/text/data_100_random_text.txt',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "He's in a boy band which doesn't make much sense for a snake. I "
              'was starting to worry that my pet turtle could tell what I was '
              "thinking. You realize you're not alone as you sit in your "
              'bedroom massaging your calves after a long day of playing '
              'tug-of-war with Grandpa Joe in the hospital. He picked up trash '
              "in his spare time to dump in his neighbor's yard.")

Fragment(uuid='ee5d7b05-e7b2-4b14-8375-09acf24c514e',
         path='/data/text/data_100_random_text.txt',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'A glittering gem is not enough. The green tea and avocado '
              'smoothie turned out exactly as would be expected. The '
              'near-death experience brought new ideas to light. Today arrived '
              'with a crash of my car through the garage door.')

Fragment(uuid='6d8f03fa-ded4-467c-9e43-1a5ffda36fbe',
         path='/data/text/data_100_random_text.txt',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Her hair was windswept as she rode in the black convertible. '
              'His get rich quick scheme was to grow a cactus farm. He quietly '
              'entered the museum as the super bowl started. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny.')

Fragment(uuid='a55843cd-50d9-447c-ad72-aff82007d138',
         path='/data/text/data_100_random_text.txt',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "He's in a boy band which doesn't make much sense for a snake. "
              'He was all business when he wore his clown suit. The hawk '
              'didn’t understand why the ground squirrels didn’t want to be '
              'his friend. When confronted with a rotary dial phone the '
              'teenager was perplexed.')

Fragment(uuid='36e6622b-63c3-4c59-886c-548d2a31becc',
         path='/data/text/data_100_random_text.txt',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It was the scarcity that fueled his creativity. Strawberries '
              "must be the one food that doesn't go well with this brand of "
              'paint. He was all business when he wore his clown suit. The '
              'overpass went under the highway and into a secret world.')

Fragment(uuid='d3dc176d-025a-46ce-b57a-8b2214e483e3',
         path='/data/text/data_100_random_text.txt',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Various sea birds are elegant, but nothing is as elegant as a '
              "gliding pelican. Courage and stupidity were all he had. There's "
              'a reason that roses have thorns. He was surprised that his '
              'immense laziness was inspirational to others.')

Fragment(uuid='c408d375-3c3e-4789-8941-6b232194d64b',
         path='/data/text/data_100_random_text.txt',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Instead of a bachelorette party The hawk didn’t understand why '
              'the ground squirrels didn’t want to be his friend. My secretary '
              'is the only person who truly understands my stamp-collecting '
              'obsession. It was the scarcity that fueled his creativity.')

Fragment(uuid='b8950e8a-944f-43fb-87e2-f308d25705b2',
         path='/data/text/data_100_random_text.txt',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'For the 216th time, he said he would quit drinking soda after '
              'this last Coke. Today arrived with a crash of my car through '
              'the garage door. It was the scarcity that fueled his '
              'creativity. When she didn’t like a guy who was trying to pick '
              'her up, she started using sign language.')

Fragment(uuid='bb8cda2b-f948-435b-8d1f-ff479b9af230',
         path='/data/text/data_100_random_text.txt',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'If eating three-egg omelets causes weight-gain, budgie eggs are '
              'a good substitute. Just go ahead and press that button. Written '
              'warnings in instruction manuals are worthless since rabbits '
              "can't read. I covered my friend in baby oil.")

Fragment(uuid='e212c84e-6d2f-410b-a182-925938662051',
         path='/data/text/data_100_random_text.txt',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'A glittering gem is not enough. Gwen had her best sleep ever on '
              'her new bed of nails. The near-death experience brought new '
              'ideas to light. She finally understood that grief was her love '
              'with no place for it to go.')

Fragment(uuid='f91df973-72cd-40d4-8536-4b2ed89aac0b',
         path='/data/text/data_100_random_text.txt',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'The anaconda was the greatest criminal mastermind in this part '
              'of the neighborhood. The sudden rainstorm washed crocodiles '
              'into the ocean. For some unfathomable reason, the response team '
              "didn't consider a lack of milk for my cereal as a proper "
              'emergency.')

Fragment(uuid='a693ccad-3286-477d-95a8-45b84ba9ccb1',
         path='/data/text/data_100_random_text.txt',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He walked into the basement with the horror movie from the '
              'night before playing in his head. There should have been a time '
              "and a place, but this wasn't it. It caught him off guard that "
              'space smelled of seared steak. He poured rocks in the dungeon '
              'of his mind.')

Fragment(uuid='70020e40-a133-4956-86aa-ddb344137656',
         path='/data/text/data_100_random_text.txt',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "You're unsure whether or not to trust him, but very thankful "
              'that you wore a turtle neck. The book is in front of the table. '
              'It caught him off guard that space smelled of seared steak. It '
              "isn't difficult to do a handstand if you just stand on your "
              'hands.')

Fragment(uuid='e96aa8da-a0c5-4526-be11-c4b095aac7f1',
         path='/data/text/data_100_random_text.txt',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "She couldn't understand why nobody else could see that the sky "
              'is full of cotton candy. The sudden rainstorm washed crocodiles '
              'into the ocean. Various sea birds are elegant, but nothing is '
              'as elegant as a gliding pelican. Homesickness became contagious '
              "in the young campers' cabin.")

Fragment(uuid='e99bdd17-09b5-49e4-bda7-e61695136d9a',
         path='/data/text/data_100_random_text.txt',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The sudden rainstorm washed crocodiles into the ocean. '
              "Strawberries must be the one food that doesn't go well with "
              'this brand of paint. The ants enjoyed the barbecue more than '
              'the family. Gwen had her best sleep ever on her new bed of '
              'nails.')

Fragment(uuid='cc7334e3-9384-4535-ba55-a51464cfa6f1',
         path='/data/text/data_100_random_text.txt',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The Great Dane looked more like a horse than a dog. The '
              'anaconda was the greatest criminal mastermind in this part of '
              'the neighborhood. Courage and stupidity were all he had. For '
              'the 216th time, he said he would quit drinking soda after this '
              'last Coke.')

Fragment(uuid='5b726e6f-a43d-45c9-ae4c-cd64f1d105f1',
         path='/data/text/data_100_random_text.txt',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Honestly, I didn't care much for the first season, so I didn't "
              'bother with the second. My biggest joy is roasting almonds '
              'while stalking prey. It caught him off guard that space smelled '
              'of seared steak. The team members were hard to tell apart since '
              'they all wore their hair in a ponytail.')

Fragment(uuid='d1386bda-3b25-43f7-ba72-93fe72093efe',
         path='/data/text/data_100_random_text.txt',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He dreamed of leaving his law firm to open a portable dog wash. '
              'I’m a living furnace. He dreamed of eating green apples with '
              "worms. It's never comforting to know that your fate depends on "
              'something as unpredictable as the popping of corn.')

Fragment(uuid='b7908c3e-4412-408c-8182-aed2e9aa99a0',
         path='/data/text/data_100_random_text.txt',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. Gwen had her best sleep ever '
              'on her new bed of nails. He poured rocks in the dungeon of his '
              'mind. It was the scarcity that fueled his creativity.')

Fragment(uuid='c49f39bc-01a2-4c2b-9a99-b82e07045a74',
         path='/data/text/data_100_random_text.txt',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He poured rocks in the dungeon of his mind. Tomatoes make great '
              'weapons when water balloons aren’t available. He learned the '
              'important lesson that a picnic at the beach on a windy day is a '
              'bad idea. The team members were hard to tell apart since they '
              'all wore their hair in a ponytail.')

Fragment(uuid='801a9dc7-5c86-47d7-b12d-d2b8297bdd30',
         path='/data/text/data_100_random_text.txt',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'My secretary is the only person who truly understands my '
              'stamp-collecting obsession. She discovered van life is '
              "difficult with 2 cats and a dog. It isn't difficult to do a "
              'handstand if you just stand on your hands. The snow-covered '
              'path was no help in finding his way out of the back-country.')

Fragment(uuid='2ece5baa-ccfc-4845-9ceb-88b81f12158b',
         path='/data/text/data_100_random_text.txt',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'His thought process was on so many levels that he gave himself '
              'a phobia of heights. When confronted with a rotary dial phone '
              'the teenager was perplexed. The fence was confused about '
              'whether it was supposed to keep things in or keep things out. '
              'There can never be too many cherries on an ice cream sundae.')

Fragment(uuid='7cb58d0f-f8fc-4312-8703-f663bf30dd5d',
         path='/data/text/data_100_random_text.txt',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He was disappointed when he found the beach to be so sandy and '
              'the sun so sunny. Just go ahead and press that button. It '
              'caught him off guard that space smelled of seared steak. '
              'Various sea birds are elegant, but nothing is as elegant as a '
              'gliding pelican.')

Fragment(uuid='666953df-2081-40e0-bb65-161cc1ecd510',
         path='/data/text/data_100_random_text.txt',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'His thought process was on so many levels that he gave himself '
              'a phobia of heights. I had a friend in high school named Rick '
              'Shaw, but he was fairly useless as a mode of transport. He '
              'decided that the time had come to be stronger than any of the '
              "excuses he'd used until then. The fence was confused about "
              'whether it was supposed to keep things in or keep things out.')

Fragment(uuid='deca5757-67b7-4346-bf1b-a252dd400494',
         path='/data/text/data_100_random_text.txt',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He was disappointed when he found the beach to be so sandy and '
              'the sun so sunny. He decided to fake his disappearance to avoid '
              'jail. Courage and stupidity were all he had. Each person who '
              'knows you has a different perception of who you are.')

Fragment(uuid='7ad2dabc-fdc8-4189-9ab0-8ae64c000240',
         path='/data/text/data_100_random_text.txt',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Strawberries must be the one food that doesn't go well with "
              "this brand of paint. She couldn't understand why nobody else "
              'could see that the sky is full of cotton candy. The overpass '
              'went under the highway and into a secret world. It was always '
              'dangerous to drive with him since he insisted the safety cones '
              'were a slalom course.')

Fragment(uuid='d4dbc1e5-a72d-427e-9b53-4607bc7588f6',
         path='/data/text/data_100_random_text.txt',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She wondered what his eyes were saying beneath his mirrored '
              "sunglasses. You're unsure whether or not to trust him, but very "
              'thankful that you wore a turtle neck. Two seats were vacant. '
              'Tomatoes make great weapons when water balloons aren’t '
              'available.')

Fragment(uuid='82877ea3-45e0-4e52-9937-97e1c154a259',
         path='/data/text/data_100_random_text.txt',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The near-death experience brought new ideas to light. His '
              'thought process was on so many levels that he gave himself a '
              "phobia of heights. I'd rather be a bird than a fish. Her hair "
              'was windswept as she rode in the black convertible.')

Fragment(uuid='2912ec2a-5348-44ae-9e8c-4e1b49007ee6',
         path='/data/text/data_100_random_text.txt',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The ants enjoyed the barbecue more than the family. Written '
              'warnings in instruction manuals are worthless since rabbits '
              "can't read. Instead of a bachelorette party There was no ice "
              'cream in the freezer, nor did they have money to go to the '
              'store.')

Fragment(uuid='57856cd1-c61e-4a09-b54a-b702ae5bc81d',
         path='/data/text/data_100_random_text.txt',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He found his art never progressed when he literally used his '
              'sweat and tears. She finally understood that grief was her love '
              'with no place for it to go. He was surprised that his immense '
              'laziness was inspirational to others. Written warnings in '
              "instruction manuals are worthless since rabbits can't read.")

Fragment(uuid='fafdb220-17c2-4e48-a999-d80f4008db6e',
         path='/data/text/data_100_random_text.txt',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The blue parrot drove by the hitchhiking mongoose. Joe '
              'discovered that traffic cones make excellent megaphones. '
              'Tomatoes make great weapons when water balloons aren’t '
              'available. When confronted with a rotary dial phone the '
              'teenager was perplexed.')

Fragment(uuid='deb7efbd-9f63-4fab-bd51-d633bb06de9b',
         path='/data/text/data_100_random_text.txt',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He was disappointed when he found the beach to be so sandy and '
              'the sun so sunny. Two seats were vacant. Homesickness became '
              "contagious in the young campers' cabin. The overpass went under "
              'the highway and into a secret world.')

Fragment(uuid='33d0993b-3720-4a95-89ca-8aa9c5d93b92',
         path='/data/text/data_100_random_text.txt',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She had some amazing news to share but nobody to share it with. '
              "He picked up trash in his spare time to dump in his neighbor's "
              'yard. There can never be too many cherries on an ice cream '
              'sundae. The team members were hard to tell apart since they all '
              'wore their hair in a ponytail.')

Fragment(uuid='e4446aa9-003f-4d0d-b5b1-65d4409179b7',
         path='/data/text/data_100_random_text.txt',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'When she didn’t like a guy who was trying to pick her up, she '
              'started using sign language. He turned in the research paper on '
              'Friday; otherwise, he would have not passed the class. If I '
              'don’t like something, I’ll stay away from it. Various sea birds '
              'are elegant, but nothing is as elegant as a gliding pelican.')

Fragment(uuid='3d59eadf-2752-451c-8948-cbc064d81e68',
         path='/data/text/data_100_random_text.txt',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'I covered my friend in baby oil. Written warnings in '
              "instruction manuals are worthless since rabbits can't read. "
              'There was coal in his stocking and he was thrilled. He had '
              'unknowingly taken up sleepwalking as a nighttime hobby.')

Fragment(uuid='8151e4aa-e8b8-4aea-8db3-f959fe9560e6',
         path='/data/text/data_100_random_text.txt',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'I was starting to worry that my pet turtle could tell what I '
              'was thinking. He learned the important lesson that a picnic at '
              'the beach on a windy day is a bad idea. The small white buoys '
              'marked the location of hundreds of crab pots. He was all '
              'business when he wore his clown suit.')

Fragment(uuid='d97a95a3-08fb-4f82-b367-3f26c400de63',
         path='/data/text/data_100_random_text.txt',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Just because the water is red doesn't mean you can't drink it. "
              'The book is in front of the table. The near-death experience '
              'brought new ideas to light. He was disappointed when he found '
              'the beach to be so sandy and the sun so sunny.')

Fragment(uuid='550dffbe-0ede-419e-bd63-82c90f777a54',
         path='/data/text/data_100_random_text.txt',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'If eating three-egg omelets causes weight-gain, budgie eggs are '
              'a good substitute. She wondered what his eyes were saying '
              'beneath his mirrored sunglasses. She looked into the mirror and '
              'saw another person. There was no ice cream in the freezer, nor '
              'did they have money to go to the store.')

Fragment(uuid='ab3926c0-3778-4780-8a8d-d4df4ec441ec',
         path='/data/text/data_100_random_text.txt',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The hawk didn’t understand why the ground squirrels didn’t want '
              'to be his friend. He turned in the research paper on Friday; '
              'otherwise, he would have not passed the class. The blue parrot '
              'drove by the hitchhiking mongoose. My biggest joy is roasting '
              'almonds while stalking prey.')

Fragment(uuid='cfc71316-6903-452f-b9c1-13faf3eb2e7c',
         path='/data/text/data_100_random_text.txt',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              "Honestly, I didn't care much for the first season, so I didn't "
              "bother with the second. You realize you're not alone as you sit "
              'in your bedroom massaging your calves after a long day of '
              "playing tug-of-war with Grandpa Joe in the hospital. I'd rather "
              'be a bird than a fish.')

Fragment(uuid='27c0c371-9044-4f1f-904a-a70cb46e3e03',
         path='/data/text/data_100_random_text.txt',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "A glittering gem is not enough. Honestly, I didn't care much "
              "for the first season, so I didn't bother with the second. He "
              'decided that the time had come to be stronger than any of the '
              "excuses he'd used until then. She couldn't understand why "
              'nobody else could see that the sky is full of cotton candy.')

Fragment(uuid='0fdcecec-3f67-4b26-b4dc-8ee6be2abc33',
         path='/data/text/data_100_random_text.txt',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Honestly, I didn't care much for the first season, so I didn't "
              'bother with the second. Her hair was windswept as she rode in '
              'the black convertible. She wondered what his eyes were saying '
              'beneath his mirrored sunglasses. If I don’t like something, '
              'I’ll stay away from it.')

Fragment(uuid='e8339511-6b1f-46af-8e19-d99af2b4a24a',
         path='/data/text/data_100_random_text.txt',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. He is no James Bond; his '
              'name is Roger Moore. Courage and stupidity were all he had. '
              "He's in a boy band which doesn't make much sense for a snake.")

Fragment(uuid='60cb0615-ad75-484a-990b-4390f1201fb9',
         path='/data/text/data_100_random_text.txt',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Today arrived with a crash of my car through the garage door. '
              'The busker hoped that the people passing by would throw money, '
              'but they threw tomatoes instead, so he exchanged his hat for a '
              "juicer. For some unfathomable reason, the response team didn't "
              'consider a lack of milk for my cereal as a proper emergency. We '
              'have a lot of rain in June.')

Fragment(uuid='8e13df82-1b02-48f8-b129-a3b83661a3dd',
         path='/data/text/data_100_random_text.txt',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He turned in the research paper on Friday; otherwise, he would '
              "have not passed the class. It's never comforting to know that "
              'your fate depends on something as unpredictable as the popping '
              'of corn. The book is in front of the table. The waves were '
              'crashing on the shore; it was a lovely sight.')

Fragment(uuid='7fe036cc-2010-45ff-ba27-79d1a1c5eaff',
         path='/data/text/data_100_random_text.txt',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'I was starting to worry that my pet turtle could tell what I '
              "was thinking. Just because the water is red doesn't mean you "
              "can't drink it. It isn't difficult to do a handstand if you "
              'just stand on your hands. She traveled because it cost the same '
              'as therapy and was a lot more enjoyable.')

Fragment(uuid='9b90f73c-1738-4f28-ba1c-ef8acc44ff54',
         path='/data/text/data_100_random_text.txt',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "I’m a living furnace. There's a reason that roses have thorns. "
              'He is no James Bond; his name is Roger Moore. Her hair was '
              'windswept as she rode in the black convertible.')

Fragment(uuid='4edb3d1d-9ecd-4c63-b6ad-7b39121f7479',
         path='/logs/crosswords/env_cache.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /logs/crosswords/env_cache.json\n')

Fragment(uuid='51903022-b375-4ed2-a2ac-43e2eb1773dc',
         path='/logs/crosswords/env_prompt_status_cache.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /logs/crosswords/env_prompt_status_cache.json\n')

Fragment(uuid='3a79cc92-6e5f-4592-8e35-a8c9bde1e756',
         path='/logs/crosswords/gpt-4_0.7_naive_cot_sample_10_start0_end20.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/crosswords/gpt-4_0.7_naive_cot_sample_10_start0_end20.json\n')

Fragment(uuid='47d02b79-a4aa-410f-adde-11b6572d3b83',
         path='/logs/crosswords/gpt-4_0.7_naive_standard_sample_10_start0_end20.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/crosswords/gpt-4_0.7_naive_standard_sample_10_start0_end20.json\n')

Fragment(uuid='b2fc33c6-0237-4a89-ac0e-a159d90599de',
         path='/logs/crosswords/infoss_dfs_no_prune.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /logs/crosswords/infoss_dfs_no_prune.json\n')

Fragment(uuid='1a57dc78-7a7d-4911-a095-bb430ac82d5e',
         path='/logs/crosswords/infoss_dfs_prune.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /logs/crosswords/infoss_dfs_prune.json\n')

Fragment(uuid='9624f728-8b6f-4dc6-abe7-2a7c33012764',
         path='/logs/game24/gpt-4_0.7_naive_cot_sample_100_start900_end1000.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/game24/gpt-4_0.7_naive_cot_sample_100_start900_end1000.json\n')

Fragment(uuid='4bed8c8d-783b-4b0b-bb4c-6e11116f6004',
         path='/logs/game24/gpt-4_0.7_naive_standard_sample_100_start900_end1000.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/game24/gpt-4_0.7_naive_standard_sample_100_start900_end1000.json\n')

Fragment(uuid='143f86eb-2666-4b32-b02f-ebd5b82b74d5',
         path='/logs/game24/gpt-4_0.7_propose1_value3_greedy5_start900_end1000.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/game24/gpt-4_0.7_propose1_value3_greedy5_start900_end1000.json\n')

Fragment(uuid='aba03fef-c3e8-46ce-9cd3-1cc6b4dbeb4e',
         path='/logs/text/gpt-4_1.0_generate_sample_select_greedy_sample5_start0_end100.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/text/gpt-4_1.0_generate_sample_select_greedy_sample5_start0_end100.json\n')

Fragment(uuid='658633f4-7ed7-421d-aed4-e01c1f241d9d',
         path='/logs/text/gpt-4_1.0_naive_cot_sample_10_start0_end100.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/text/gpt-4_1.0_naive_cot_sample_10_start0_end100.json\n')

Fragment(uuid='9157eb99-7b0c-469b-8fa3-80d335f3cd15',
         path='/logs/text/gpt-4_1.0_naive_standard_sample_10_start0_end100.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/text/gpt-4_1.0_naive_standard_sample_10_start0_end100.json\n')

Fragment(uuid='8a4ecb3d-a830-48a3-bfe4-406d33a3bd55',
         path='/models.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import os\n'
              'import openai\n'
              'import backoff \n'
              '\n'
              'completion_tokens = prompt_tokens = 0\n'
              '\n'
              'api_key = os.getenv("OPENAI_API_KEY", "")\n'
              'if api_key != "":\n'
              '    openai.api_key = api_key\n'
              'else:\n'
              '    print("Warning: OPENAI_API_KEY is not set")\n'
              '    \n'
              'api_base = os.getenv("OPENAI_API_BASE", "")\n'
              'if api_base != "":\n'
              '    print("Warning: OPENAI_API_BASE is set to '
              '{}".format(api_base))\n'
              '    openai.api_base = api_base\n'
              '\n'
              '@backoff.on_exception(backoff.expo, openai.error.OpenAIError)\n'
              'def completions_with_backoff(**kwargs):\n'
              '    return openai.ChatCompletion.create(**kwargs)\n')

Fragment(uuid='fa5d08e8-7e0f-48c3-a7a9-6f7864e0aff9',
         path='/models.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='8872469f-9ac8-4bcc-80f7-9ed2ba861594',
         path='/models.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /models.py\n'
              '  Functions: chatgpt gpt gpt_usage\n'
              '  Methods: completions_with_backoff\n'
              '  Variables: api_base api_key cnt completion_tokens cost '
              'messages openai.api_base openai.api_key outputs res\n'
              '  Usages: ChatCompletion OpenAIError backend backoff choice '
              'create error expo extend format getenv kwargs list max_tokens '
              'min model on_exception openai print prompt prompt_tokens stop '
              'temperature\n')

Fragment(uuid='a7defb76-59f0-4324-813b-908cca533f81',
         path='/models.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import openai')

Fragment(uuid='ce4a8cfa-e18b-4b47-be97-b26d95694a9a',
         path='/models.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='import backoff')

Fragment(uuid='cdb33a8e-abb3-4feb-b4b4-38877a0edd76',
         path='/models.py',
         lineno=5,
         depth=0,
         type='variable',
         name='completion_tokens',
         text='completion_tokens = prompt_tokens = 0')

Fragment(uuid='1e5c99b9-87da-4c10-975f-b80485702d6b',
         path='/models.py',
         lineno=7,
         depth=0,
         type='variable',
         name='api_key',
         text='api_key = os.getenv("OPENAI_API_KEY", "")')

Fragment(uuid='8a11cdb7-6594-4079-a06f-22b7f4e5c263',
         path='/models.py',
         lineno=9,
         depth=2,
         type='variable',
         name='openai.api_key',
         text='openai.api_key = api_key')

Fragment(uuid='f3d6ab3b-acc7-4baf-9d73-b546145f40db',
         path='/models.py',
         lineno=13,
         depth=0,
         type='variable',
         name='api_base',
         text='api_base = os.getenv("OPENAI_API_BASE", "")')

Fragment(uuid='c0798bad-1ce5-42a1-a237-7f0805a87a1d',
         path='/models.py',
         lineno=16,
         depth=2,
         type='variable',
         name='openai.api_base',
         text='openai.api_base = api_base')

Fragment(uuid='171445ef-6588-4d47-9dda-8d75d3ba7b8e',
         path='/models.py',
         lineno=19,
         depth=1,
         type='function',
         name='completions_with_backoff',
         text='def completions_with_backoff(**kwargs):\n'
              '    return openai.ChatCompletion.create(**kwargs)')

Fragment(uuid='d48913e5-d1cc-43ad-9894-f7b0f68acc6b',
         path='/models.py',
         lineno=21,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def gpt(prompt, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    messages = [{"role": "user", "content": prompt}]\n'
              '    return chatgpt(messages, model=model, '
              'temperature=temperature, max_tokens=max_tokens, n=n, '
              'stop=stop)\n')

Fragment(uuid='f175a10f-e816-490e-8385-9edf0d18d187',
         path='/models.py',
         lineno=22,
         depth=0,
         type='function',
         name='gpt',
         text='def gpt(prompt, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    messages = [{"role": "user", "content": prompt}]\n'
              '    return chatgpt(messages, model=model, '
              'temperature=temperature, max_tokens=max_tokens, n=n, stop=stop)')

Fragment(uuid='34339d00-bc45-4d22-988b-e80a7f2a9ab9',
         path='/models.py',
         lineno=23,
         depth=2,
         type='variable',
         name='messages',
         text='messages = [{"role": "user", "content": prompt}]')

Fragment(uuid='3ce4f2be-c26a-4418-a95f-12eb3675c6a0',
         path='/models.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text='    \n'
              'def chatgpt(messages, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    global completion_tokens, prompt_tokens\n'
              '    outputs = []\n')

Fragment(uuid='27660094-3cdf-4ab7-9c2f-907c1157cfc3',
         path='/models.py',
         lineno=26,
         depth=0,
         type='function',
         name='chatgpt',
         text='def chatgpt(messages, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    global completion_tokens, prompt_tokens\n'
              '    outputs = []\n'
              '    while n > 0:\n'
              '        cnt = min(n, 20)\n'
              '        n -= cnt\n'
              '        res = completions_with_backoff(model=model, '
              'messages=messages, temperature=temperature, '
              'max_tokens=max_tokens, n=cnt, stop=stop)\n'
              '        outputs.extend([choice["message"]["content"] for choice '
              'in res["choices"]])\n'
              '        # log completion tokens\n'
              '        completion_tokens += res["usage"]["completion_tokens"]\n'
              '        prompt_tokens += res["usage"]["prompt_tokens"]\n'
              '    return outputs')

Fragment(uuid='ae2a7be2-1e44-4eb1-a7b1-a1cf70b0503b',
         path='/models.py',
         lineno=28,
         depth=2,
         type='variable',
         name='outputs',
         text='outputs = []')

Fragment(uuid='79661407-fcd2-4882-97c4-6302edc79ee4',
         path='/models.py',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text='    while n > 0:\n'
              '        cnt = min(n, 20)\n'
              '        n -= cnt\n'
              '        res = completions_with_backoff(model=model, '
              'messages=messages, temperature=temperature, '
              'max_tokens=max_tokens, n=cnt, stop=stop)\n'
              '        outputs.extend([choice["message"]["content"] for choice '
              'in res["choices"]])\n'
              '        # log completion tokens\n'
              '        completion_tokens += res["usage"]["completion_tokens"]\n'
              '        prompt_tokens += res["usage"]["prompt_tokens"]\n'
              '    return outputs\n')

Fragment(uuid='58749bc6-d105-46e7-b76e-753d62a535fc',
         path='/models.py',
         lineno=30,
         depth=4,
         type='variable',
         name='cnt',
         text='cnt = min(n, 20)')

Fragment(uuid='f0dfe16f-9a0c-430a-8386-101d4baa4990',
         path='/models.py',
         lineno=32,
         depth=4,
         type='variable',
         name='res',
         text='res = completions_with_backoff(model=model, messages=messages, '
              'temperature=temperature, max_tokens=max_tokens, n=cnt, '
              'stop=stop)')

Fragment(uuid='f4161891-fdb0-4bcd-9784-aabac005a9b0',
         path='/models.py',
         lineno=38,
         depth=0,
         type='module',
         name='',
         text='    \n'
              'def gpt_usage(backend="gpt-4"):\n'
              '    global completion_tokens, prompt_tokens\n'
              '    if backend == "gpt-4":\n'
              '        cost = completion_tokens / 1000 * 0.06 + prompt_tokens '
              '/ 1000 * 0.03\n'
              '    elif backend == "gpt-3.5-turbo":\n'
              '        cost = (completion_tokens + prompt_tokens) / 1000 * '
              '0.0002\n'
              '    return {"completion_tokens": completion_tokens, '
              '"prompt_tokens": prompt_tokens, "cost": cost}')

Fragment(uuid='e34e26a9-ea9a-4e47-9a8b-b807be9d0335',
         path='/models.py',
         lineno=39,
         depth=0,
         type='function',
         name='gpt_usage',
         text='def gpt_usage(backend="gpt-4"):\n'
              '    global completion_tokens, prompt_tokens\n'
              '    if backend == "gpt-4":\n'
              '        cost = completion_tokens / 1000 * 0.06 + prompt_tokens '
              '/ 1000 * 0.03\n'
              '    elif backend == "gpt-3.5-turbo":\n'
              '        cost = (completion_tokens + prompt_tokens) / 1000 * '
              '0.0002\n'
              '    return {"completion_tokens": completion_tokens, '
              '"prompt_tokens": prompt_tokens, "cost": cost}')

Fragment(uuid='ae94a2f7-d683-4006-906b-877168c07e96',
         path='/models.py',
         lineno=42,
         depth=4,
         type='variable',
         name='cost',
         text='cost = completion_tokens / 1000 * 0.06 + prompt_tokens / 1000 * '
              '0.03')

Fragment(uuid='d581698b-826f-490a-b71d-0ca91da67032',
         path='/models.py',
         lineno=44,
         depth=5,
         type='variable',
         name='cost',
         text='cost = (completion_tokens + prompt_tokens) / 1000 * 0.0002')

Fragment(uuid='c24f6257-3616-48aa-a4b2-1523cd5e7169',
         path='/prompts/crosswords.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# 5 shot\n'
              "standard_prompt = '''\n"
              'Solve 5x5 mini crosswords. Given an input of 5 horizontal clues '
              'and 5 vertical clues, generate an output of 5 rows, where each '
              'row is 5 letter separated by space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To entice\n'
              'h4. To lo')

Fragment(uuid='24176cea-79b6-450e-a2d5-b8b8c6320962',
         path='/prompts/crosswords.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /prompts/crosswords.py\n'
              '  Variables: cot_prompt propose_prompt standard_prompt '
              'value_prompt\n')

Fragment(uuid='a5f462c7-2ba7-4f8a-b8e5-ce7db5473380',
         path='/prompts/crosswords.py',
         lineno=2,
         depth=0,
         type='variable',
         name='standard_prompt',
         text="standard_prompt = '''\n"
              'Solve 5x5 mini crosswords. Given an input of 5 horizontal clues '
              'and 5 vertical clues, generate an output of 5 rows, where each '
              'row is 5 letter separated by space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To en')

Fragment(uuid='10949e82-134a-4123-a68f-fc5389ed4b68',
         path='/prompts/crosswords.py',
         lineno=8,
         depth=0,
         type='variable',
         name='standard_prompt',
         text='tice\n'
              'h4. To lower; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a European lake\n'
              'v4. To lisp\n'
              'v5. To come in\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n')

Fragment(uuid='d6a53212-382d-4c20-8bb3-5b5ee42d43fd',
         path='/prompts/crosswords.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='wer; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a European lake\n'
              'v4. To lisp\n'
              'v5. To come in\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n'
              '\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus')

Fragment(uuid='ac8e9d78-a3ab-4fd9-8e86-529cdcc3907c',
         path='/prompts/crosswords.py',
         lineno=23,
         depth=0,
         type='variable',
         name='standard_prompt',
         text='\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the ear\n'
              'v1. To swell; to increase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; r')

Fragment(uuid='fd8c92ba-07b3-4420-8a7f-4327bc367716',
         path='/prompts/crosswords.py',
         lineno=26,
         depth=0,
         type='module',
         name='',
         text=' genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the ear\n'
              'v1. To swell; to increase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; roscid\n'
              '\n'
              'Output:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R')

Fragment(uuid='b4c6fa2c-e7fd-46f2-8ca9-280691ac03ef',
         path='/prompts/crosswords.py',
         lineno=34,
         depth=0,
         type='variable',
         name='standard_prompt',
         text='oscid\n'
              '\n'
              'Output:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permission")

Fragment(uuid='76315ae8-0ead-41a0-aaf8-4bce06e9c6be',
         path='/prompts/crosswords.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text=' A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permission for a priest to leave a diocese\n"
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primi')

Fragment(uuid='4eeb4319-3d72-4708-93d2-9cf0eda251d4',
         path='/prompts/crosswords.py',
         lineno=48,
         depth=0,
         type='variable',
         name='standard_prompt',
         text=' for a priest to leave a diocese\n'
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primitive three-sided grass)\n'
              'v3. Grape jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E')

Fragment(uuid='b104700a-b412-47da-9cba-59d0deb8b604',
         path='/prompts/crosswords.py',
         lineno=50,
         depth=0,
         type='module',
         name='',
         text='tive three-sided grass)\n'
              'v3. Grape jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E T I T\n'
              'E X E A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result')

Fragment(uuid='583651f4-861b-40b7-a8f6-c021f2db5dbc',
         path='/prompts/crosswords.py',
         lineno=59,
         depth=0,
         type='variable',
         name='standard_prompt',
         text=' T I T\n'
              'E X E A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v4. To indite; to scrib')

Fragment(uuid='90d89f43-462e-40f5-b797-ff72f344dd12',
         path='/prompts/crosswords.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text='\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v4. To indite; to scribble\n'
              'v5. An insecticide\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard')

Fragment(uuid='3dbfef77-7eb5-452f-8b9b-63b904aaf0e6',
         path='/prompts/crosswords.py',
         lineno=71,
         depth=0,
         type='variable',
         name='standard_prompt',
         text='ble\n'
              'v5. An insecticide\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard\n'
              'h2. H2O; to irrigate\n'
              'h3. The companion to an "intro", a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5')

Fragment(uuid='9ffa1dfa-d9d4-4fea-8f0e-5615015a1bb9',
         path='/prompts/crosswords.py',
         lineno=82,
         depth=0,
         type='module',
         name='',
         text='\n'
              'h2. H2O; to irrigate\n'
              'h3. The companion to an "intro", a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; humming\n'
              '\n')

Fragment(uuid='6e980e0d-e051-4d90-ab71-67d8f3c916d5',
         path='/prompts/crosswords.py',
         lineno=86,
         depth=0,
         type='variable',
         name='standard_prompt',
         text='. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; humming\n'
              '\n'
              'Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              '\n'
              'Output:\n'
              "'''")

Fragment(uuid='0c92a1b7-3b1a-47ec-bbfe-af58a11b7d13',
         path='/prompts/crosswords.py',
         lineno=93,
         depth=0,
         type='module',
         name='',
         text='Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              '\n'
              'Output:\n'
              "'''\n"
              '\n'
              '\n'
              '\n'
              "cot_prompt = '''Solve 5x5 mini crosswords. Given an input of 5 "
              'horizontal clues and 5 vertical clues, generate thoughts about '
              'which 5-letter word fits each clue, then an o')

Fragment(uuid='2afccafb-d232-4f35-b7e4-3c28793dc603',
         path='/prompts/crosswords.py',
         lineno=108,
         depth=0,
         type='module',
         name='',
         text='utput of 5 rows, where each row is 5 letter separated by '
              'space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To entice\n'
              'h4. To lower; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a Europe')

Fragment(uuid='0018da55-7639-4481-a424-a0c69ae61d45',
         path='/prompts/crosswords.py',
         lineno=108,
         depth=0,
         type='variable',
         name='cot_prompt',
         text="cot_prompt = '''Solve 5x5 mini crosswords. Given an input of 5 "
              'horizontal clues and 5 vertical clues, generate thoughts about '
              'which 5-letter word fits each clue, then an output of 5 rows, '
              'where each row is 5 letter separated by space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To entice\n'
              'h4. To lower; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a European lake\n'
              'v4. To lisp\n'
              'v5. To come ')

Fragment(uuid='8dc9fdf8-289a-4a1a-ad89-b316235781c6',
         path='/prompts/crosswords.py',
         lineno=118,
         depth=0,
         type='module',
         name='',
         text='an lake\n'
              'v4. To lisp\n'
              'v5. To come in\n'
              '\n'
              'Thoughts:\n'
              'h1. A lunar valley: RILLE\n'
              'h2. A fatty oil: OLEIN\n'
              'h3. To entice: TEMPT\n'
              'h4. To lower; to reduce: ABASE\n'
              'h5. A solitary person: LONER\n'
              'v1. According to the roster: ROTAL\n'
              'v2. Another name for Port-Francqui: ILEBO\n'
              'v3. An i')

Fragment(uuid='87b382a2-6867-440f-8758-181557f0c985',
         path='/prompts/crosswords.py',
         lineno=120,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='in\n'
              '\n'
              'Thoughts:\n'
              'h1. A lunar valley: RILLE\n'
              'h2. A fatty oil: OLEIN\n'
              'h3. To entice: TEMPT\n'
              'h4. To lower; to reduce: ABASE\n'
              'h5. A solitary person: LONER\n'
              'v1. According to the roster: ROTAL\n'
              'v2. Another name for Port-Francqui: ILEBO\n'
              'v3. An ill')

Fragment(uuid='72809d0e-297f-438d-9f84-1ec7de626d9f',
         path='/prompts/crosswords.py',
         lineno=130,
         depth=0,
         type='module',
         name='',
         text='llicit lover; a European lake: LEMAN\n'
              'v4. To lisp: LIPSE\n'
              'v5. To come in: ENTER\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n'
              '\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the ear\n'
              'v1. To swell; to incre')

Fragment(uuid='899edde4-f053-4a18-9651-4322311cec54',
         path='/prompts/crosswords.py',
         lineno=130,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='icit lover; a European lake: LEMAN\n'
              'v4. To lisp: LIPSE\n'
              'v5. To come in: ENTER\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n'
              '\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the')

Fragment(uuid='bc049c9a-911a-4676-84ff-8d8ef2c750ed',
         path='/prompts/crosswords.py',
         lineno=146,
         depth=0,
         type='variable',
         name='cot_prompt',
         text=' ear\n'
              'v1. To swell; to increase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; roscid\n'
              '\n'
              'Thoughts:\n'
              'h1. One who saws: SAWER\n'
              'h2. A fungus genus: UREDO\n'
              'h3. An assessor: RATER\n')

Fragment(uuid='9e7491c6-2bbd-41f3-b37a-3e98e237e86d',
         path='/prompts/crosswords.py',
         lineno=147,
         depth=0,
         type='module',
         name='',
         text='ase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; roscid\n'
              '\n'
              'Thoughts:\n'
              'h1. One who saws: SAWER\n'
              'h2. A fungus genus: UREDO\n'
              'h3. An assessor: RATER\n'
              'h4. Pasture land: GRAMA\n'
              'h5. Receiving by the ear: EARAL\n'
              'v')

Fragment(uuid='3fe18807-74f7-40ee-958f-e516cb571fa3',
         path='/prompts/crosswords.py',
         lineno=157,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='h4. Pasture land: GRAMA\n'
              'h5. Receiving by the ear: EARAL\n'
              'v1. To swell; to increase: SURGE\n'
              'v2. The Brazilian macaw; an Australian bird: ARARA\n'
              'v3. A Timorese island: WETAR\n'
              'v4. Excessive fluid accumulation: EDEMA\n'
              'v5. Dewy; roscid: RORAL')

Fragment(uuid='f820c5c5-4273-4919-b58e-e89ce2792086',
         path='/prompts/crosswords.py',
         lineno=159,
         depth=0,
         type='module',
         name='',
         text='1. To swell; to increase: SURGE\n'
              'v2. The Brazilian macaw; an Australian bird: ARARA\n'
              'v3. A Timorese island: WETAR\n'
              'v4. Excessive fluid accumulation: EDEMA\n'
              'v5. Dewy; roscid: RORAL\n'
              '\n'
              'Output:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum')

Fragment(uuid='b614a846-80d9-4b34-99c5-b4c228fd7c52',
         path='/prompts/crosswords.py',
         lineno=163,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='\n'
              '\n'
              'Output:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permissi")

Fragment(uuid='aa0d9d0b-be8a-4105-ace5-6617d84af8a0',
         path='/prompts/crosswords.py',
         lineno=173,
         depth=0,
         type='module',
         name='',
         text='; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permission for a priest to leave a diocese\n"
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primitive three-sided grass)\n'
              'v3. Gra')

Fragment(uuid='8aeb012e-056c-487b-a712-5efa219eb311',
         path='/prompts/crosswords.py',
         lineno=177,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='on for a priest to leave a diocese\n'
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primitive three-sided grass)\n'
              'v3. Grape jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Thoughts:\n'
              'h1. Dandruff; scum; the')

Fragment(uuid='77bc0849-2682-42e1-92d2-7e5db01d8310',
         path='/prompts/crosswords.py',
         lineno=180,
         depth=0,
         type='module',
         name='',
         text='pe jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Thoughts:\n'
              'h1. Dandruff; scum; the bull-trout: SCURF\n'
              'h2. One who greets; to vacillate; a British river: WAVER\n'
              'h3. A Turkish written decree: IRADE\n'
              'h4. Mignon; petty; little: PETIT\n')

Fragment(uuid='b7b7617e-05de-4057-8d92-68737517d7f1',
         path='/prompts/crosswords.py',
         lineno=185,
         depth=0,
         type='variable',
         name='cot_prompt',
         text=' bull-trout: SCURF\n'
              'h2. One who greets; to vacillate; a British river: WAVER\n'
              'h3. A Turkish written decree: IRADE\n'
              'h4. Mignon; petty; little: PETIT\n'
              "h5. A bishop's permission for a priest to leave a diocese: "
              'EXEAT\n'
              'v1. To steal; to brus')

Fragment(uuid='775c3207-7bb3-4c7a-94df-08df03f3659b',
         path='/prompts/crosswords.py',
         lineno=189,
         depth=0,
         type='module',
         name='',
         text="h5. A bishop's permission for a priest to leave a diocese: "
              'EXEAT\n'
              'v1. To steal; to brush across: SWIPE\n'
              'v2. A sedge (a primitive three-sided grass): CAREX\n'
              'v3. Grape jam: UVATE\n'
              'v4. A flatworm larva: REDIA\n'
              'v5. Ore refuse; to prepare material for glass by heat: FRET')

Fragment(uuid='925adc05-17fd-4c94-81e9-bba11e410164',
         path='/prompts/crosswords.py',
         lineno=190,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='h across: SWIPE\n'
              'v2. A sedge (a primitive three-sided grass): CAREX\n'
              'v3. Grape jam: UVATE\n'
              'v4. A flatworm larva: REDIA\n'
              'v5. Ore refuse; to prepare material for glass by heat: FRETT\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E T I T\n'
              'E X E ')

Fragment(uuid='905a537e-e518-496c-a90c-f8298e2bcad5',
         path='/prompts/crosswords.py',
         lineno=194,
         depth=0,
         type='module',
         name='',
         text='T\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E T I T\n'
              'E X E A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v')

Fragment(uuid='fd4cccde-52ec-4280-972d-053a1c33a06b',
         path='/prompts/crosswords.py',
         lineno=201,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v4. To indite; to scribble\n'
              'v5')

Fragment(uuid='f445016c-5634-4db2-a50e-ec44ec16da31',
         path='/prompts/crosswords.py',
         lineno=212,
         depth=0,
         type='module',
         name='',
         text='4. To indite; to scribble\n'
              'v5. An insecticide\n'
              '\n'
              'Thoughts:\n'
              'h1. Presented; revealed: SHOWN\n'
              'h2. An interjection expressing sorrow: WIRRA\n'
              'h3. Benefit; result: AVAIL\n'
              'h4. A cigarette: RETTE\n'
              'h5. Chased up a tree: TREED\n'
              'v1. Swarthy; tawny: SWART\n'
              'v2. An apiarist or bee ke')

Fragment(uuid='a3d69753-6e95-4e81-b6c7-47593e4777c7',
         path='/prompts/crosswords.py',
         lineno=213,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='. An insecticide\n'
              '\n'
              'Thoughts:\n'
              'h1. Presented; revealed: SHOWN\n'
              'h2. An interjection expressing sorrow: WIRRA\n'
              'h3. Benefit; result: AVAIL\n'
              'h4. A cigarette: RETTE\n'
              'h5. Chased up a tree: TREED\n'
              'v1. Swarthy; tawny: SWART\n'
              'v2. An apiarist or bee k')

Fragment(uuid='f6aa9a6f-4a9a-4b76-af25-2e5a2e03f3a6',
         path='/prompts/crosswords.py',
         lineno=222,
         depth=0,
         type='module',
         name='',
         text='eper: HIVER\n'
              'v3. To speak formally: ORATE\n'
              'v4. To indite; to scribble: WRITE\n'
              'v5. An insecticide: NALED\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard\n'
              'h2. H2O; to irrigate\n'
              'h3. The companion to an "intro",')

Fragment(uuid='0816f584-838a-4379-a84b-28ee23cc39d4',
         path='/prompts/crosswords.py',
         lineno=222,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='eeper: HIVER\n'
              'v3. To speak formally: ORATE\n'
              'v4. To indite; to scribble: WRITE\n'
              'v5. An insecticide: NALED\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard\n'
              'h2. H2O; to irrigate\n'
              'h')

Fragment(uuid='e59aef3b-5928-4bf2-9302-22ff0cee69c7',
         path='/prompts/crosswords.py',
         lineno=237,
         depth=0,
         type='module',
         name='',
         text=' a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; humming\n'
              '\n'
              'Thoughts:\n'
              'h1. Scald; an ancient Scandinavian bard: SKA')

Fragment(uuid='e20e127c-7b25-4a2e-affd-edc21a6a9501',
         path='/prompts/crosswords.py',
         lineno=237,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='3. The companion to an "intro", a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; hum')

Fragment(uuid='a965d59e-c494-4e1e-a75f-72ae2c695573',
         path='/prompts/crosswords.py',
         lineno=244,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='ming\n'
              '\n'
              'Thoughts:\n'
              'h1. Scald; an ancient Scandinavian bard: SKALD\n'
              'h2. H2O; to irrigate: WATER\n'
              'h3. The companion to an "intro", a postscript or exit piece: '
              'OUTRO\n'
              'h4. An artificial fabric: ORLON\n'
              'h5. Deep religious feeling: PIETY\n'
              'v1. To ')

Fragment(uuid='d0c15b6f-ddba-4cf2-86ed-f2f0500e4758',
         path='/prompts/crosswords.py',
         lineno=247,
         depth=0,
         type='module',
         name='',
         text='LD\n'
              'h2. H2O; to irrigate: WATER\n'
              'h3. The companion to an "intro", a postscript or exit piece: '
              'OUTRO\n'
              'h4. An artificial fabric: ORLON\n'
              'h5. Deep religious feeling: PIETY\n'
              'v1. To rush; to stoop; a descent: SWOOP\n'
              'v2. A New Zealand fir tree: KAURI\n'
              'v3. Mine refuse: ATTLE\n')

Fragment(uuid='d1c26c48-c8b2-4896-a92b-2fd9a11a2368',
         path='/prompts/crosswords.py',
         lineno=252,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='rush; to stoop; a descent: SWOOP\n'
              'v2. A New Zealand fir tree: KAURI\n'
              'v3. Mine refuse: ATTLE\n'
              'v4. The garden dormouse: LEROT\n'
              'v5. Like a drone; humming: DRONY\n'
              '\n'
              'Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              "'''")

Fragment(uuid='47c52b3f-3240-4dd3-8689-e73a910b57ee',
         path='/prompts/crosswords.py',
         lineno=255,
         depth=0,
         type='module',
         name='',
         text='v4. The garden dormouse: LEROT\n'
              'v5. Like a drone; humming: DRONY\n'
              '\n'
              'Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              "'''\n"
              '\n'
              '\n'
              "propose_prompt = '''Let's play a 5 x 5 mini crossword, where "
              'each word should have exactly 5 letters.\n'
              '\n'
              '{input}\n'
              '\n'
              'Give')

Fragment(uuid='883db072-985d-4781-aa61-24613bbcc9e9',
         path='/prompts/crosswords.py',
         lineno=270,
         depth=0,
         type='variable',
         name='propose_prompt',
         text="propose_prompt = '''Let's play a 5 x 5 mini crossword, where "
              'each word should have exactly 5 letters.\n'
              '\n'
              '{input}\n'
              '\n'
              'Given the current status, list all possible answers for '
              'unfilled or changed words, and your confidence levels '
              '(certain/high/medium/low), using the format "h1. apple '
              '(medium)". Use "certain" cautiously and only when you are 100% '
              'sure this is the correct word. You can list more then one '
              'possible answer for each word.\n'
              "'''")

Fragment(uuid='64af9c91-2b94-4696-a0ee-53407989650f',
         path='/prompts/crosswords.py',
         lineno=274,
         depth=0,
         type='module',
         name='',
         text='n the current status, list all possible answers for unfilled or '
              'changed words, and your confidence levels '
              '(certain/high/medium/low), using the format "h1. apple '
              '(medium)". Use "certain" cautiously and only when you are 100% '
              'sure this is the correct word. You can list more then one '
              'possible answer for each word.\n'
              "'''\n"
              '\n'
              '\n'
              "value_prompt = '''Evaluate if there exists a five letter word "
              'of some meaning that fit some letter constraints '
              '(sure/maybe/impossible).\n'
              '\n'
              'Incorrect; to injure: w _ o _ g\n'
              'The letter constraint is: 5 letter')

Fragment(uuid='13509408-dec6-4771-9a7b-1b305e501295',
         path='/prompts/crosswords.py',
         lineno=278,
         depth=0,
         type='variable',
         name='value_prompt',
         text="value_prompt = '''Evaluate if there exists a five letter word "
              'of some meaning that fit some letter constraints '
              '(sure/maybe/impossible).\n'
              '\n'
              'Incorrect; to injure: w _ o _ g\n'
              'The letter constraint is: 5 letters, letter 1 is w, letter 3 is '
              'o, letter 5 is g.\n'
              'Some possible words that mean "Inco')

Fragment(uuid='25768182-69c9-4e19-882d-4d9a2f9fccd5',
         path='/prompts/crosswords.py',
         lineno=281,
         depth=0,
         type='module',
         name='',
         text='s, letter 1 is w, letter 3 is o, letter 5 is g.\n'
              'Some possible words that mean "Incorrect; to injure":\n'
              'wrong (w r o n g): 5 letters, letter 1 is w, letter 3 is o, '
              'letter 5 is g. fit!\n'
              'sure\n'
              '\n'
              'A person with an all-consuming enthusiasm, such as for '
              'computers or anim')

Fragment(uuid='4420d759-d5f1-4854-872d-0bdc20bd8b3d',
         path='/prompts/crosswords.py',
         lineno=282,
         depth=0,
         type='variable',
         name='value_prompt',
         text='rrect; to injure":\n'
              'wrong (w r o n g): 5 letters, letter 1 is w, letter 3 is o, '
              'letter 5 is g. fit!\n'
              'sure\n'
              '\n'
              'A person with an all-consuming enthusiasm, such as for '
              'computers or anime: _ _ _ _ u\n'
              'The letter constraint is: 5 letters, letter 5 is u.\n'
              'Some possible words that mean "A person with')

Fragment(uuid='1ac06b92-3bbb-4fb2-ac8f-9bb559afff33',
         path='/prompts/crosswords.py',
         lineno=286,
         depth=0,
         type='module',
         name='',
         text='e: _ _ _ _ u\n'
              'The letter constraint is: 5 letters, letter 5 is u.\n'
              'Some possible words that mean "A person with an all-consuming '
              'enthusiasm, such as for computers or anime":\n'
              'geek (g e e k): 4 letters, not 5\n'
              'otaku (o t a k u): 5 letters, letter 5 is u\n'
              'sure\n'
              '\n'
              'Dewy; ')

Fragment(uuid='d19ee1d8-0d19-4155-9b9e-5ef4e3ed48f6',
         path='/prompts/crosswords.py',
         lineno=288,
         depth=0,
         type='variable',
         name='value_prompt',
         text=' an all-consuming enthusiasm, such as for computers or anime":\n'
              'geek (g e e k): 4 letters, not 5\n'
              'otaku (o t a k u): 5 letters, letter 5 is u\n'
              'sure\n'
              '\n'
              'Dewy; roscid: r _ _ _ l\n'
              'The letter constraint is: 5 letters, letter 1 is r, letter 5 is '
              'l.\n'
              'Some possible words that mean "Dewy; roscid":\n'
              'moi')

Fragment(uuid='3024459c-46a7-41c2-aa37-7c08c022020e',
         path='/prompts/crosswords.py',
         lineno=293,
         depth=0,
         type='module',
         name='',
         text='roscid: r _ _ _ l\n'
              'The letter constraint is: 5 letters, letter 1 is r, letter 5 is '
              'l.\n'
              'Some possible words that mean "Dewy; roscid":\n'
              'moist (m o i s t): 5 letters, letter 1 is m, not r\n'
              'humid (h u m i d): 5 letters, letter 1 is h, not r\n'
              'I cannot think of any words ')

Fragment(uuid='a6afd6a5-9bef-4482-9cb1-de64367c2f29',
         path='/prompts/crosswords.py',
         lineno=296,
         depth=0,
         type='variable',
         name='value_prompt',
         text='st (m o i s t): 5 letters, letter 1 is m, not r\n'
              'humid (h u m i d): 5 letters, letter 1 is h, not r\n'
              'I cannot think of any words now. Only 2 letters are '
              'constrained, it is still likely\n'
              'maybe\n'
              '\n'
              'A woodland: _ l _ d e\n'
              'The letter constraint is: 5 letters, letter 2 is l, letter 4 is '
              'd, letter 5')

Fragment(uuid='57a950c3-67a3-4f55-aac8-7067965fdb66',
         path='/prompts/crosswords.py',
         lineno=298,
         depth=0,
         type='module',
         name='',
         text='now. Only 2 letters are constrained, it is still likely\n'
              'maybe\n'
              '\n'
              'A woodland: _ l _ d e\n'
              'The letter constraint is: 5 letters, letter 2 is l, letter 4 is '
              'd, letter 5 is e.\n'
              'Some possible words that mean "A woodland":\n'
              'forest (f o r e s t): 6 letters, not 5\n'
              'woods (w o ')

Fragment(uuid='2407f153-d3ff-462a-b103-e0c9caea50ec',
         path='/prompts/crosswords.py',
         lineno=302,
         depth=0,
         type='variable',
         name='value_prompt',
         text=' is e.\n'
              'Some possible words that mean "A woodland":\n'
              'forest (f o r e s t): 6 letters, not 5\n'
              'woods (w o o d s): 5 letters, letter 2 is o, not l\n'
              'grove (g r o v e): 5 letters, letter 2 is r, not l\n'
              'I cannot think of any words now. 3 letters are constrained, and '
              '_ l _ d e seems a common patte')

Fragment(uuid='6c4dd3a5-c3ab-4064-82ec-f09886d1a530',
         path='/prompts/crosswords.py',
         lineno=305,
         depth=0,
         type='module',
         name='',
         text='o d s): 5 letters, letter 2 is o, not l\n'
              'grove (g r o v e): 5 letters, letter 2 is r, not l\n'
              'I cannot think of any words now. 3 letters are constrained, and '
              '_ l _ d e seems a common pattern\n'
              'maybe\n'
              '\n'
              'An inn: _ d _ w f\n'
              'The letter constraint is: 5 letters, letter 2 is')

Fragment(uuid='1b7c0b60-6481-49ee-899a-e6366ee707f9',
         path='/prompts/crosswords.py',
         lineno=307,
         depth=0,
         type='variable',
         name='value_prompt',
         text='rn\n'
              'maybe\n'
              '\n'
              'An inn: _ d _ w f\n'
              'The letter constraint is: 5 letters, letter 2 is d, letter 4 is '
              'w, letter 5 is f.\n'
              'Some possible words that mean "An inn":\n'
              'hotel (h o t e l): 5 letters, letter 2 is o, not d\n'
              'lodge (l o d g e): 5 letters, letter 2 is o, not d\n'
              'I cannot think of any words now. 3')

Fragment(uuid='94b5667f-60ba-4eb5-a653-68605ff6b2ca',
         path='/prompts/crosswords.py',
         lineno=311,
         depth=0,
         type='module',
         name='',
         text=' d, letter 4 is w, letter 5 is f.\n'
              'Some possible words that mean "An inn":\n'
              'hotel (h o t e l): 5 letters, letter 2 is o, not d\n'
              'lodge (l o d g e): 5 letters, letter 2 is o, not d\n'
              'I cannot think of any words now. 3 letters are constrained, and '
              'it is extremely unlik')

Fragment(uuid='f0d69fa4-8a86-45a5-82e1-b8e21ba1eeb0',
         path='/prompts/crosswords.py',
         lineno=315,
         depth=0,
         type='module',
         name='',
         text='ely to have a word with pattern _ d _ w f to mean "An inn"\n'
              'impossible\n'
              '\n'
              'Chance; a parasitic worm; a fish: w r a k _\n'
              'The letter constraint is: 5 letters, letter 1 is w, letter 2 is '
              'r, letter 3 is a, letter 4 is k.\n'
              'Some possible words that mean "Chance; a parasiti')

Fragment(uuid='45974e8d-f0c4-48d5-9aa1-859159a59d58',
         path='/prompts/crosswords.py',
         lineno=315,
         depth=0,
         type='variable',
         name='value_prompt',
         text=' letters are constrained, and it is extremely unlikely to have '
              'a word with pattern _ d _ w f to mean "An inn"\n'
              'impossible\n'
              '\n'
              'Chance; a parasitic worm; a fish: w r a k _\n'
              'The letter constraint is: 5 letters, letter 1 is w, letter 2 is '
              'r, letter 3 is a, letter 4 is k.\n'
              'Some possible words tha')

Fragment(uuid='00e09dd3-d714-4b4c-9b86-1eabccc18bc8',
         path='/prompts/crosswords.py',
         lineno=320,
         depth=0,
         type='module',
         name='',
         text='c worm; a fish":\n'
              'fluke (f l u k e): 5 letters, letter 1 is f, not w\n'
              'I cannot think of any words now. 4 letters are constrained, and '
              'it is extremely unlikely to have a word with pattern w r a k _ '
              'to mean "Chance; a parasitic worm; a fish"\n'
              'impossible\n'
              '\n'
              '{input}\n'
              "'''")

Fragment(uuid='c3a5ca35-50f9-44b9-be25-3d66ab9ae2c3',
         path='/prompts/crosswords.py',
         lineno=320,
         depth=0,
         type='variable',
         name='value_prompt',
         text='t mean "Chance; a parasitic worm; a fish":\n'
              'fluke (f l u k e): 5 letters, letter 1 is f, not w\n'
              'I cannot think of any words now. 4 letters are constrained, and '
              'it is extremely unlikely to have a word with pattern w r a k _ '
              'to mean "Chance; a parasitic worm; a fish"\n'
              'impossible\n'
              '\n'
              '{input}\n'
              "'''")

Fragment(uuid='548d412d-a5a5-4b26-a8bd-bd285ad570f2',
         path='/prompts/game24.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# 5-shot\n'
              "standard_prompt = '''Use numbers and basic arithmetic "
              'operations (+ - * /) to obtain 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Input: 2 9 10 12\n'
              'Answer: 2 * 12 * (10')

Fragment(uuid='7dbd068a-18dc-498a-af24-8b29fcd6c1d0',
         path='/prompts/game24.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /prompts/game24.py\n'
              '  Variables: cot_prompt propose_prompt standard_prompt '
              'value_last_step_prompt value_prompt\n')

Fragment(uuid='f6309651-1ffe-4a66-a5f9-18ec05944615',
         path='/prompts/game24.py',
         lineno=2,
         depth=0,
         type='variable',
         name='standard_prompt',
         text="standard_prompt = '''Use numbers and basic arithmetic "
              'operations (+ - * /) to obtain 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Input: 2 9 10 12\n'
              'Answer: 2 * 12 *')

Fragment(uuid='941845c4-548f-4cfd-ad59-bfb566edb2bd',
         path='/prompts/game24.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text=' - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Input: 1 4 8 8\n'
              'Answer: (8 / 4 + 1) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Answer: 5 + 5 + 5 + 9 = 24\n'
              'Input: {input}\n'
              "'''\n"
              '\n'
              '# 5-shot\n'
              'cot_p')

Fragment(uuid='238a4296-1e3f-45c7-99a0-fbf0dcd26c16',
         path='/prompts/game24.py',
         lineno=6,
         depth=0,
         type='variable',
         name='standard_prompt',
         text=' (10 - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Input: 1 4 8 8\n'
              'Answer: (8 / 4 + 1) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Answer: 5 + 5 + 5 + 9 = 24\n'
              'Input: {input}\n'
              "'''")

Fragment(uuid='b4f04e83-8c95-4f56-8f1e-b270a94ac1b2',
         path='/prompts/game24.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text="rompt = '''Use numbers and basic arithmetic operations (+ - * "
              '/) to obtain 24. Each step, you are only allowed to choose two '
              'of the remaining numbers to obtain a new number.\n'
              'Input: ')

Fragment(uuid='3ea55dba-e10c-4225-b99f-99dae22e63b2',
         path='/prompts/game24.py',
         lineno=17,
         depth=0,
         type='variable',
         name='cot_prompt',
         text="cot_prompt = '''Use numbers and basic arithmetic operations (+ "
              '- * /) to obtain 24. Each step, you are only allowed to choose '
              'two of the remaining numbers to obtain a new number.\n'
              'Input: 4 4 6 8\n'
              'Steps:\n'
              '4 + 8')

Fragment(uuid='4da62546-33d2-4d0e-a5cf-da1ccec7bdf6',
         path='/prompts/game24.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text='4 4 6 8\n'
              'Steps:\n'
              '4 + 8 = 12 (left: 4 6 12)\n'
              '6 - 4 = 2 (left: 2 12)\n'
              '2 * 12 = 24 (left: 24)\n'
              'Answer: (6 - 4) * (4 + 8) = 24\n'
              'Input: 2 9 10 12\n'
              'Steps:\n'
              '12 * 2 = 24 (left: 9 10 24)\n'
              '10 - 9 = 1 (')

Fragment(uuid='60a9329d-50c1-4c1c-a60a-a7420cf5a507',
         path='/prompts/game24.py',
         lineno=20,
         depth=0,
         type='variable',
         name='cot_prompt',
         text=' = 12 (left: 4 6 12)\n'
              '6 - 4 = 2 (left: 2 12)\n'
              '2 * 12 = 24 (left: 24)\n'
              'Answer: (6 - 4) * (4 + 8) = 24\n'
              'Input: 2 9 10 12\n'
              'Steps:\n'
              '12 * 2 = 24 (left: 9 10 24)\n'
              '10 - 9 = 1 (left: 1 24)\n'
              '24 * 1 = 24 (left: 24)\n'
              'Answer: (1')

Fragment(uuid='79ad1c68-37cf-40d5-a835-ee818d82578e',
         path='/prompts/game24.py',
         lineno=27,
         depth=0,
         type='module',
         name='',
         text='left: 1 24)\n'
              '24 * 1 = 24 (left: 24)\n'
              'Answer: (12 * 2) * (10 - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Steps:\n'
              '13 - 10 = 3 (left: 3 4 9)\n'
              '9 - 3 = 6 (left: 4 6)\n'
              '4 * 6 = 24 (left: 24)\n'
              'Answer: 4 * (9 - (1')

Fragment(uuid='347691f4-2d37-4a1c-9bb9-590f98b523f1',
         path='/prompts/game24.py',
         lineno=29,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='2 * 2) * (10 - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Steps:\n'
              '13 - 10 = 3 (left: 3 4 9)\n'
              '9 - 3 = 6 (left: 4 6)\n'
              '4 * 6 = 24 (left: 24)\n'
              'Answer: 4 * (9 - (13 - 10)) = 24\n'
              'Input: 1 4 8 8\n'
              'Steps:\n'
              '8 / 4 = 2 (left: 1 2 8)\n'
              '1 + 2 = 3 (')

Fragment(uuid='10ba33e7-386a-468f-8fc4-39f1cf0cee37',
         path='/prompts/game24.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='3 - 10)) = 24\n'
              'Input: 1 4 8 8\n'
              'Steps:\n'
              '8 / 4 = 2 (left: 1 2 8)\n'
              '1 + 2 = 3 (left: 3 8)\n'
              '3 * 8 = 24 (left: 24)\n'
              'Answer: (1 + 8 / 4) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Steps:\n'
              '5 + 5 = 10 (left: 5 9 10)\n'
              '1')

Fragment(uuid='a7e6ad49-48f7-441c-a246-ea00763fba27',
         path='/prompts/game24.py',
         lineno=39,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='left: 3 8)\n'
              '3 * 8 = 24 (left: 24)\n'
              'Answer: (1 + 8 / 4) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Steps:\n'
              '5 + 5 = 10 (left: 5 9 10)\n'
              '10 + 5 = 15 (left: 9 15)\n'
              '15 + 9 = 24 (left: 24)\n'
              'Answer: ((5 + 5) + 5) + 9 = 24\n'
              'Input: {input}\n'
              "'''")

Fragment(uuid='18c0e90e-4c64-43c9-adb7-f034b09ba4ce',
         path='/prompts/game24.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='0 + 5 = 15 (left: 9 15)\n'
              '15 + 9 = 24 (left: 24)\n'
              'Answer: ((5 + 5) + 5) + 9 = 24\n'
              'Input: {input}\n'
              "'''\n"
              '\n'
              '# 1-shot\n'
              "propose_prompt = '''Input: 2 8 8 14\n"
              'Possible next steps:\n'
              '2 + 8 = 10 (left:')

Fragment(uuid='723ba4e5-cdd2-426f-95b6-f9ca1befd6af',
         path='/prompts/game24.py',
         lineno=52,
         depth=0,
         type='variable',
         name='propose_prompt',
         text="propose_prompt = '''Input: 2 8 8 14\n"
              'Possible next steps:\n'
              '2 + 8 = 10 (left: 8 10 14)\n'
              '8 / 2 = 4 (left: 4 8 14)\n'
              '14 + 2 = 16 (left: 8 8 16)\n'
              '2 * 8 = 16 (left')

Fragment(uuid='7c14f014-c516-4eee-8af4-ccb81a1f0cc9',
         path='/prompts/game24.py',
         lineno=54,
         depth=0,
         type='module',
         name='',
         text=' 8 10 14)\n'
              '8 / 2 = 4 (left: 4 8 14)\n'
              '14 + 2 = 16 (left: 8 8 16)\n'
              '2 * 8 = 16 (left: 8 14 16)\n'
              '8 - 2 = 6 (left: 6 8 14)\n'
              '14 - 8 = 6 (left: 2 6 8)\n'
              '14 /  2 = 7 (left: 7 8 8)\n'
              '14 - 2 = 12 (left')

Fragment(uuid='6a9841ec-ab14-4d15-a6ec-9b3836feec6f',
         path='/prompts/game24.py',
         lineno=57,
         depth=0,
         type='variable',
         name='propose_prompt',
         text=': 8 14 16)\n'
              '8 - 2 = 6 (left: 6 8 14)\n'
              '14 - 8 = 6 (left: 2 6 8)\n'
              '14 /  2 = 7 (left: 7 8 8)\n'
              '14 - 2 = 12 (left: 8 8 12)\n'
              'Input: {input}\n'
              'Possible next steps:\n'
              "'''")

Fragment(uuid='e07e36f7-b914-406e-83c1-a60d4dbe5534',
         path='/prompts/game24.py',
         lineno=61,
         depth=0,
         type='module',
         name='',
         text=': 8 8 12)\n'
              'Input: {input}\n'
              'Possible next steps:\n'
              "'''\n"
              '\n'
              "value_prompt = '''Evaluate if given numbers can reach 24 "
              '(sure/likely/impossible)\n'
              '10 14\n'
              '10 + 14 = 24\n'
              'sure\n'
              '11 12\n'
              '11 + 12 = 23\n'
              '12 - ')

Fragment(uuid='8ac787e1-8f9f-474e-a74b-ee73583954c9',
         path='/prompts/game24.py',
         lineno=66,
         depth=0,
         type='variable',
         name='value_prompt',
         text="value_prompt = '''Evaluate if given numbers can reach 24 "
              '(sure/likely/impossible)\n'
              '10 14\n'
              '10 + 14 = 24\n'
              'sure\n'
              '11 12\n'
              '11 + 12 = 23\n'
              '12 - 11 = 1\n'
              '11 * 12 = 132\n'
              '11 / 12 = 0.91\n'
              'impossible\n'
              '4')

Fragment(uuid='9d356220-ecf7-41fb-9303-a43e82cff194',
         path='/prompts/game24.py',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='11 = 1\n'
              '11 * 12 = 132\n'
              '11 / 12 = 0.91\n'
              'impossible\n'
              '4 4 10\n'
              '4 + 4 + 10 = 8 + 10 = 18\n'
              '4 * 10 - 4 = 40 - 4 = 36\n'
              '(10 - 4) * 4 = 6 * 4 = 24\n'
              'sure\n'
              '4 9 11\n'
              '9 + 11 + 4 = 20 + 4 = 24\n'
              'sure\n'
              '5 7 8\n'
              '5 + ')

Fragment(uuid='633b3404-e99e-46fe-9fdb-e12c48952d35',
         path='/prompts/game24.py',
         lineno=76,
         depth=0,
         type='variable',
         name='value_prompt',
         text=' 4 10\n'
              '4 + 4 + 10 = 8 + 10 = 18\n'
              '4 * 10 - 4 = 40 - 4 = 36\n'
              '(10 - 4) * 4 = 6 * 4 = 24\n'
              'sure\n'
              '4 9 11\n'
              '9 + 11 + 4 = 20 + 4 = 24\n'
              'sure\n'
              '5 7 8\n'
              '5 + 7 + 8 = 12 + 8 = 20\n'
              '(8 - 5) * 7 = 3 * 7 = 21\n')

Fragment(uuid='9ee037c1-ce4f-474d-80cb-59f6f4458633',
         path='/prompts/game24.py',
         lineno=85,
         depth=0,
         type='module',
         name='',
         text='7 + 8 = 12 + 8 = 20\n'
              '(8 - 5) * 7 = 3 * 7 = 21\n'
              'I cannot obtain 24 now, but numbers are within a reasonable '
              'range\n'
              'likely\n'
              '5 6 6\n'
              '5 + 6 + 6 = 17\n'
              '(6 - 5) * 6 = 1 * 6 = 6\n'
              'I cannot obtain 24')

Fragment(uuid='cec854e3-a2c6-45de-8410-ba41f8c8b523',
         path='/prompts/game24.py',
         lineno=87,
         depth=0,
         type='variable',
         name='value_prompt',
         text='I cannot obtain 24 now, but numbers are within a reasonable '
              'range\n'
              'likely\n'
              '5 6 6\n'
              '5 + 6 + 6 = 17\n'
              '(6 - 5) * 6 = 1 * 6 = 6\n'
              'I cannot obtain 24 now, but numbers are within a reasonable ')

Fragment(uuid='19d3a577-dac6-4d6c-ae63-82ca3e3bf76a',
         path='/prompts/game24.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text=' now, but numbers are within a reasonable range\n'
              'likely\n'
              '10 10 11\n'
              '10 + 10 + 11 = 31\n'
              '(11 - 10) * 10 = 10\n'
              '10 10 10 are all too big\n'
              'impossible\n'
              '1 3 3\n'
              '1 * 3 * 3 = 9\n'
              '(1 + 3) * 3 = 12\n'
              '1 3 3 a')

Fragment(uuid='bb583b10-5661-4f84-b7e8-1710db7293ee',
         path='/prompts/game24.py',
         lineno=92,
         depth=0,
         type='variable',
         name='value_prompt',
         text='range\n'
              'likely\n'
              '10 10 11\n'
              '10 + 10 + 11 = 31\n'
              '(11 - 10) * 10 = 10\n'
              '10 10 10 are all too big\n'
              'impossible\n'
              '1 3 3\n'
              '1 * 3 * 3 = 9\n'
              '(1 + 3) * 3 = 12\n'
              '1 3 3 are all too small\n'
              'impossible\n'
              '{input}\n'
              "'''")

Fragment(uuid='ef1e37d2-8a4d-4076-a81b-02e5ae1cfc32',
         path='/prompts/game24.py',
         lineno=102,
         depth=0,
         type='module',
         name='',
         text='re all too small\n'
              'impossible\n'
              '{input}\n'
              "'''\n"
              '\n'
              "value_last_step_prompt = '''Use numbers and basic arithmetic "
              'operations (+ - * /) to obtain 24. Given an input and an '
              'answer, give a judgement (sure/impossible) if the answer is '
              'correct, i.e. it uses each input exactly once and no other '
              'numbers, and reach 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Inp')

Fragment(uuid='3434ad2b-8be3-454b-b8ad-b7c1a37a8c9d',
         path='/prompts/game24.py',
         lineno=107,
         depth=0,
         type='variable',
         name='value_last_step_prompt',
         text="value_last_step_prompt = '''Use numbers and basic arithmetic "
              'operations (+ - * /) to obtain 24. Given an input and an '
              'answer, give a judgement (sure/impossible) if the answer is '
              'correct, i.e. it uses each input exactly once and no other '
              'numbers, and reach 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 2 9 10 12\n'
              'Answer')

Fragment(uuid='1ef7da98-ad1b-4f41-a8d7-3dc066f7ace5',
         path='/prompts/game24.py',
         lineno=112,
         depth=0,
         type='module',
         name='',
         text='ut: 2 9 10 12\n'
              'Answer: 2 * 12 * (10 - 9) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) + 1 = 25\n'
              'Judge: \n'
              'im')

Fragment(uuid='fdab4a4c-342a-43a2-92f1-c6af173eed8f',
         path='/prompts/game24.py',
         lineno=113,
         depth=0,
         type='variable',
         name='value_last_step_prompt',
         text=': 2 * 12 * (10 - 9) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) + 1 = 25\n'
              'Judge: \n'
              'impossible\n'
              'I')

Fragment(uuid='8a600748-93da-460d-b7f3-e44696c4faad',
         path='/prompts/game24.py',
         lineno=123,
         depth=0,
         type='module',
         name='',
         text='possible\n'
              'Input: 2 9 10 12\n'
              'Answer: 2 * (12 - 10) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 4) * (10 - 9) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: {input}\n'
              'Answer: {answer}\n'
              "Judge:'''")

Fragment(uuid='59c257c2-ec61-487d-9b63-020750947801',
         path='/prompts/game24.py',
         lineno=124,
         depth=0,
         type='variable',
         name='value_last_step_prompt',
         text='nput: 2 9 10 12\n'
              'Answer: 2 * (12 - 10) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 4) * (10 - 9) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: {input}\n'
              'Answer: {answer}\n'
              "Judge:'''")

Fragment(uuid='ab240bd3-c0e5-4e0d-8edf-e630a7863916',
         path='/prompts/text.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text="standard_prompt = '''\n"
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              "'''\n"
              '\n'
              "cot_prompt = '''\n"
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              '\n'
              'Make a plan then write. Your output should be of the following '
              'format:\n'
              '\n'
              'Plan:\n'
              'Your plan here.\n'
              '\n'
              'Passage:\n'
              'Your passage here.\n'
              "'''\n"
              '\n'
              '\n'
              "vote_prompt = '''Given an instruction and several choices, "
              'decide which choice is most promising. Analyze each choice')

Fragment(uuid='dcf905da-dc75-499e-ae44-9c1a3e690920',
         path='/prompts/text.py',
         lineno=1,
         depth=0,
         type='variable',
         name='standard_prompt',
         text="standard_prompt = '''\n"
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              "'''")

Fragment(uuid='12affec5-2ef8-4da4-803d-45895e520146',
         path='/prompts/text.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /prompts/text.py\n'
              '  Variables: compare_prompt cot_prompt score_prompt '
              'standard_prompt vote_prompt\n')

Fragment(uuid='f1b7927d-fdce-4402-9773-338ff0afe0d0',
         path='/prompts/text.py',
         lineno=5,
         depth=0,
         type='variable',
         name='cot_prompt',
         text="cot_prompt = '''\n"
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              '\n'
              'Make a plan then write. Your output should be of the following '
              'format:\n'
              '\n'
              'Plan:\n'
              'Your plan here.\n'
              '\n'
              'Passage:\n'
              'Your passage here.\n'
              "'''")

Fragment(uuid='c0172529-9155-4362-b81b-a46e5f28778c',
         path='/prompts/text.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text=' in detail, then conclude in the last line "The best choice is '
              '{s}", where s the integer id of the choice.\n'
              "'''\n"
              '\n'
              "compare_prompt = '''Briefly analyze the coherency of the "
              'following two passages. Conclude in the last line "The more '
              'coherent passage is 1", "The more coherent passage is 2", or '
              '"The two passages are similarly coherent".\n'
              "'''\n"
              '\n'
              "score_prompt = '''Analyze the following passage, then at the "
              'last line conclude "Thus the coherency score is {s}", where s '
              'is an integer from 1 to 10.\n'
              "'''")

Fragment(uuid='ea426933-a854-4cbb-a71e-3516707163ec',
         path='/prompts/text.py',
         lineno=18,
         depth=0,
         type='variable',
         name='vote_prompt',
         text="vote_prompt = '''Given an instruction and several choices, "
              'decide which choice is most promising. Analyze each choice in '
              'detail, then conclude in the last line "The best choice is '
              '{s}", where s the integer id of the choice.\n'
              "'''")

Fragment(uuid='505dd5da-0653-4d03-9846-8ce1d9790709',
         path='/prompts/text.py',
         lineno=21,
         depth=0,
         type='variable',
         name='compare_prompt',
         text="compare_prompt = '''Briefly analyze the coherency of the "
              'following two passages. Conclude in the last line "The more '
              'coherent passage is 1", "The more coherent passage is 2", or '
              '"The two passages are similarly coherent".\n'
              "'''")

Fragment(uuid='370c7601-cad7-4e88-8aba-e73378793152',
         path='/prompts/text.py',
         lineno=24,
         depth=0,
         type='variable',
         name='score_prompt',
         text="score_prompt = '''Analyze the following passage, then at the "
              'last line conclude "Thus the coherency score is {s}", where s '
              'is an integer from 1 to 10.\n'
              "'''")

Fragment(uuid='1a3e9aa1-b9ae-401a-844d-87eaceb5033f',
         path='/readme.md',
         lineno=1,
         depth=10,
         type='documentation',
         name='',
         text='# Offical Repo of Tree of Thoughts (ToT)\n')

Fragment(uuid='f727f6ac-5a2e-4c0c-8d50-e5846e323f07',
         path='/readme.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Offical Repo of Tree of Thoughts (ToT)\n'
              '## Setup\n'
              '## Experiments\n'
              '## Trajectories\n'
              '## Questions\n')

Fragment(uuid='a95dbf34-d2dd-42d7-b975-b4938409760f',
         path='/readme.md',
         lineno=2,
         depth=10,
         type='documentation',
         name='',
         text='\n![teaser](teaser.png)\n')

Fragment(uuid='0090c22c-cba0-4d10-bbd1-d467c08f4c18',
         path='/readme.md',
         lineno=4,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Offical implementation for paper [Tree of Thoughts: Deliberate '
              'Problem Solving with Large Language '
              'Models](https://arxiv.org/abs/2305.10601) with code, prompts, '
              'model outputs.\n'
              'Also check [its tweet '
              'thread](https://twitter.com/ShunyuYao12/status/1659357547474681857) '
              'in 1min.\n')

Fragment(uuid='53ba14f4-aeb9-424f-9e35-8b49ab0e7ad6',
         path='/readme.md',
         lineno=7,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '**Note: https://github.com/kyegomez/tree-of-thoughts is not the '
              'offical/correct implementation for the results in the paper. '
              'Please check '
              'https://github.com/ysymyth/tree-of-thought-llm/issues/17**\n')

Fragment(uuid='9ac97e68-9f95-4635-b9ca-d5bac58fde04',
         path='/readme.md',
         lineno=9,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Please cite the paper and star this repo if you use ToT and '
              'find it interesting/useful. Thanks!\n')

Fragment(uuid='6c6e2a88-1cef-4c50-9a5a-33feee7e0eb8',
         path='/readme.md',
         lineno=11,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '```bibtex\n'
              '@misc{yao2023tree,\n'
              '      title={{Tree of Thoughts}: Deliberate Problem Solving '
              'with Large Language Models}, \n'
              '      author={Shunyu Yao and Dian Yu and Jeffrey Zhao and Izhak '
              'Shafran and Thomas L. Griffiths and Yuan Cao and Karthik '
              'Narasimhan},\n'
              '      year={2023},\n'
              '      eprint={2305.10601},\n'
              '      archivePrefix={arXiv},\n'
              '      primaryClass={cs.CL}\n'
              '}\n'
              '```\n'
              '\n'
              '\n')

Fragment(uuid='1b6c851b-14ce-47a4-ba5e-5964afcbbbb7',
         path='/readme.md',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='## Setup\n'
              'You need to first have an OpenAI API key and store it in the '
              'environment variable ``OPENAI_API_KEY`` (see '
              '[here](https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety)). '
              'If you use custom base url, set it by environment variable '
              '``OPENAI_API_BASE`` (e.g. https://api.openai.com/v1).\n'
              '\n'
              'Package requirement: ``pip install openai backoff sympy '
              'numpy``\n'
              '\n'
              '\n')

Fragment(uuid='ea3c3948-905f-44e2-8dff-b808d6a8fa2b',
         path='/readme.md',
         lineno=30,
         depth=10,
         type='documentation',
         name='',
         text='## Experiments\n')

Fragment(uuid='45e11622-2c1c-43ed-a09b-87b487cc58b4',
         path='/readme.md',
         lineno=31,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Run experiments via ``sh scripts/{game24, text, '
              'crosswords}/{standard_sampling, cot_sampling, bfs}.sh``, except '
              'in crosswords we use a DFS algorithm for ToT, which can be run '
              'via ``scripts/crosswords/search_crosswords-dfs.ipynb``.\n')

Fragment(uuid='e99e755b-2afb-4de6-896d-edc66e53bfc1',
         path='/readme.md',
         lineno=33,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'The very simple ``run.py`` implements the ToT + BFS algorithm, '
              'as well as the naive IO/CoT sampling. Some key arguments:\n')

Fragment(uuid='fbf5c1d2-23df-4609-938f-0aceb8346a3f',
         path='/readme.md',
         lineno=35,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--naive_run``: if True, run naive IO/CoT sampling instead '
              'of ToT + BFS.')

Fragment(uuid='50a0c9fb-98e9-4364-8bcc-2ab126b4ee81',
         path='/readme.md',
         lineno=36,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '-  ``--prompt_sample`` (choices=[``standard``, ``cot``]): '
              'sampling prompt')

Fragment(uuid='1031b857-1347-4e80-964d-a252b1f03db6',
         path='/readme.md',
         lineno=37,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--method_generate`` (choices=[``sample``, ``propose``]): '
              'thought generator, whether to sample independent thoughts (used '
              'in Creative Writing) or propose sequential thoughts (used in '
              'Game of 24)')

Fragment(uuid='b9d1ee90-cad0-4b8c-a01a-13044fe36521',
         path='/readme.md',
         lineno=38,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--method_evaluate`` (choices=[``value``, ``vote``]): state '
              'evaluator, whether to use the value states independently (used '
              'in Game of 24) or vote on states together (used in Creative '
              'Writing)')

Fragment(uuid='f8d8a634-c2d1-46c1-9e74-7c57cb603c8b',
         path='/readme.md',
         lineno=39,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--n_generate_sample``: number of times to prompt for '
              'thought generation')

Fragment(uuid='8500dc4a-25e3-4206-838f-2bbf7bedb4f7',
         path='/readme.md',
         lineno=40,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--n_evaluate_sample``: number of times to prompt for state '
              'evaluation')

Fragment(uuid='ef48866b-92ba-4e44-bc1d-ab82c460f3b4',
         path='/readme.md',
         lineno=41,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--n_select_sample``: number of states to keep from each '
              "step (i.e. ``b`` in the paper's ToT + BFS algorithm)")

Fragment(uuid='72d0c1a5-da63-4ece-afb4-285e740d8165',
         path='/readme.md',
         lineno=42,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='080fcffe-157d-49c3-afcf-ade43886a820',
         path='/readme.md',
         lineno=43,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='ccb720bb-8642-44bd-b2f5-bbdb6b89e56d',
         path='/readme.md',
         lineno=44,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='b7fca810-19bc-4e64-95ca-6328251cb4cd',
         path='/readme.md',
         lineno=45,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='1ab8e631-c85c-4a28-af83-a0111543efe6',
         path='/readme.md',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='## Trajectories\n'
              "``logs/`` contains all the trajectories from the paper's "
              'experiments, except for '
              '``logs/game24/gpt-4_0.7_propose1_value3_greedy5_start900_end1000.json`` '
              'which was reproduced after the paper (as the original '
              'experiment was done in a notebook) and achieved a 69\\% score '
              'instead of the original 74\\% score due to randomness in GPT '
              'decoding. We hope to aggregate multiple runs in the future to '
              'account for sampling randomness and update the paper, but this '
              "shouldn't affect the main conclusions of the paper.\n"
              '\n'
              '\n'
              '\n')

Fragment(uuid='ddc2e6be-b719-4520-a755-198da31bdc61',
         path='/readme.md',
         lineno=51,
         depth=1,
         type='documentation',
         name='',
         text='## Questions\n'
              'Feel free to contact shunyuyao.cs@gmail.com or open an issue if '
              'you have any questions.\n'
              '\n'
              '\n'
              '\n')

Fragment(uuid='62ba77a1-22a1-44c1-9862-ca4b5335166f',
         path='/run.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import os\n'
              'import json\n'
              'import itertools\n'
              'import argparse\n'
              'import numpy as np\n'
              'from functools import partial\n'
              'from models import gpt, gpt_usage\n'
              'from tasks import get_task\n')

Fragment(uuid='8fa1a03a-d273-47f1-8d65-76d5f51de167',
         path='/run.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='e9714134-0a2f-4ebc-b3e1-e7d4bd45bc6d',
         path='/run.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /run.py\n'
              '  Functions: get_proposals get_samples get_value get_values '
              'get_votes naive_solve parse_args run solve\n'
              '  Variables: accs args file gpt ids infos local_value_cache '
              'local_value_cache[y] logs, new_ys prompt proposals '
              'propose_prompt samples select_ids select_new_ys sorted_new_ys, '
              'task task.value_cache[value_prompt] value value_outputs '
              'value_prompt values vote_outputs vote_prompt ys,\n'
              '  Usages: ArgumentParser ValueError __name__ action '
              'add_argument any append argparse array backend cache_value '
              'chain choice choices cnt_any cnt_avg cot_prompt_wrap default '
              'dirname dump exist_ok float functools get_input get_task '
              'gpt_usage idx indent info int itertools json key len list logs '
              'makedirs method_evaluate method_generate method_select model '
              'models n_evaluate_sample n_generate_sample n_select_sample '
              'naive_run numpy open partial path print prompt_sample '
              'propose_prompt_wrap random range required reverse select_id '
              'size sorted sorted_new_ys sorted_values split '
              'standard_prompt_wrap step steps stop stops str sum '
              'task_end_index task_file_path task_start_index tasks '
              'temperature test_output to_print tolist type update value_cache '
              'value_outputs_unwrap value_prompt_wrap vote_outputs_unwrap '
              'vote_prompt_wrap zip\n')

Fragment(uuid='f694be6a-01be-4ce4-8e80-69b44d1bbedd',
         path='/run.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import json')

Fragment(uuid='f63ed7d1-4b2e-4027-959a-560ab086ff1d',
         path='/run.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='import itertools')

Fragment(uuid='e36c259d-1d6e-47c4-9f43-24d51c957201',
         path='/run.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import argparse')

Fragment(uuid='6d862f3c-f1cd-455b-81fb-04dec848367a',
         path='/run.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='import numpy as np')

Fragment(uuid='d4e8f7c0-d043-4857-a4d0-6e550c7ea1c2',
         path='/run.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from functools import partial')

Fragment(uuid='1abce0b2-74b9-427d-9001-937d31bd0950',
         path='/run.py',
         lineno=7,
         depth=0,
         type='dependency',
         name='',
         text='from models import gpt, gpt_usage')

Fragment(uuid='0072052e-9c79-4833-bc24-3584dd0a9205',
         path='/run.py',
         lineno=8,
         depth=0,
         type='dependency',
         name='',
         text='from tasks import get_task')

Fragment(uuid='8bb7a940-1a1a-459e-9837-a6ccdb6fe105',
         path='/run.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_value(task, x, y, n_evaluate_sample, '
              'cache_value=True):\n'
              '    value_prompt = task.value_prompt_wrap(x, y)\n'
              '    if cache_value and value_prompt in task.value_cache:\n'
              '        return task.value_cache[value_prompt]\n'
              '    value_outputs = gpt(value_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    value = task.value_outputs_unwrap(x, y, value_outputs)\n'
              '    if cache_value:\n'
              '        task.value_cache[value_prompt] = value\n'
              '    return value\n')

Fragment(uuid='d036360e-8f17-41ef-a420-242b49fbb614',
         path='/run.py',
         lineno=10,
         depth=0,
         type='function',
         name='get_value',
         text='def get_value(task, x, y, n_evaluate_sample, '
              'cache_value=True):\n'
              '    value_prompt = task.value_prompt_wrap(x, y)\n'
              '    if cache_value and value_prompt in task.value_cache:\n'
              '        return task.value_cache[value_prompt]\n'
              '    value_outputs = gpt(value_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    value = task.value_outputs_unwrap(x, y, value_outputs)\n'
              '    if cache_value:\n'
              '        task.value_cache[value_prompt] = value\n'
              '    return value')

Fragment(uuid='8d2ed48f-9d85-4098-8c03-023cd18e1c47',
         path='/run.py',
         lineno=11,
         depth=2,
         type='variable',
         name='value_prompt',
         text='value_prompt = task.value_prompt_wrap(x, y)')

Fragment(uuid='4827d544-cced-49d7-8f4a-04060a27a1ad',
         path='/run.py',
         lineno=14,
         depth=2,
         type='variable',
         name='value_outputs',
         text='value_outputs = gpt(value_prompt, n=n_evaluate_sample, '
              'stop=None)')

Fragment(uuid='c98f24a3-e9e2-46b5-8c2a-f0c691ad341a',
         path='/run.py',
         lineno=15,
         depth=2,
         type='variable',
         name='value',
         text='value = task.value_outputs_unwrap(x, y, value_outputs)')

Fragment(uuid='56813089-636b-4d6a-bfb5-5811542e4bc7',
         path='/run.py',
         lineno=17,
         depth=4,
         type='variable',
         name='task.value_cache[value_prompt]',
         text='task.value_cache[value_prompt] = value')

Fragment(uuid='210ea912-3e50-4d75-82b2-594c4fe0bc25',
         path='/run.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_values(task, x, ys, n_evaluate_sample, '
              'cache_value=True):\n'
              '    values = []\n'
              '    local_value_cache = {}\n'
              '    for y in ys:  # each partial output\n'
              '        if y in local_value_cache:  # avoid duplicate '
              'candidates\n'
              '            value = 0\n'
              '        else:    \n'
              '            value = get_value(task, x, y, n_evaluate_sample, '
              'cache_value=cache_value)\n'
              '            local_value_cache[y] = value\n'
              '        values.append(value)\n'
              '    return values\n')

Fragment(uuid='09624587-7420-497f-8390-70a97260e351',
         path='/run.py',
         lineno=20,
         depth=0,
         type='function',
         name='get_values',
         text='def get_values(task, x, ys, n_evaluate_sample, '
              'cache_value=True):\n'
              '    values = []\n'
              '    local_value_cache = {}\n'
              '    for y in ys:  # each partial output\n'
              '        if y in local_value_cache:  # avoid duplicate '
              'candidates\n'
              '            value = 0\n'
              '        else:    \n'
              '            value = get_value(task, x, y, n_evaluate_sample, '
              'cache_value=cache_value)\n'
              '            local_value_cache[y] = value\n'
              '        values.append(value)\n'
              '    return values')

Fragment(uuid='59f06011-774b-46c1-8c66-41df6972b7fe',
         path='/run.py',
         lineno=21,
         depth=2,
         type='variable',
         name='values',
         text='values = []')

Fragment(uuid='c3bcdaff-71c7-4706-947e-1b6cc064c5c2',
         path='/run.py',
         lineno=22,
         depth=2,
         type='variable',
         name='local_value_cache',
         text='local_value_cache = {}')

Fragment(uuid='6913402c-1b8d-470c-9dc0-96a4570b5ec3',
         path='/run.py',
         lineno=25,
         depth=6,
         type='variable',
         name='value',
         text='value = 0')

Fragment(uuid='1ea098d2-54d6-4b1a-9564-9a0a44b8146b',
         path='/run.py',
         lineno=27,
         depth=7,
         type='variable',
         name='value',
         text='value = get_value(task, x, y, n_evaluate_sample, '
              'cache_value=cache_value)')

Fragment(uuid='1e3301be-d09e-4616-9198-360066ce033b',
         path='/run.py',
         lineno=28,
         depth=7,
         type='variable',
         name='local_value_cache[y]',
         text='local_value_cache[y] = value')

Fragment(uuid='eb22199a-a135-4d8e-8bc9-ecd448e547d1',
         path='/run.py',
         lineno=31,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_votes(task, x, ys, n_evaluate_sample):\n'
              '    vote_prompt = task.vote_prompt_wrap(x, ys)\n'
              '    vote_outputs = gpt(vote_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    values = task.vote_outputs_unwrap(vote_outputs, len(ys))\n'
              '    return values\n')

Fragment(uuid='37e17635-0176-4301-a39b-98f489011c38',
         path='/run.py',
         lineno=32,
         depth=0,
         type='function',
         name='get_votes',
         text='def get_votes(task, x, ys, n_evaluate_sample):\n'
              '    vote_prompt = task.vote_prompt_wrap(x, ys)\n'
              '    vote_outputs = gpt(vote_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    values = task.vote_outputs_unwrap(vote_outputs, len(ys))\n'
              '    return values')

Fragment(uuid='e1f110a8-874a-4905-81d5-de8cc0ca13ae',
         path='/run.py',
         lineno=33,
         depth=2,
         type='variable',
         name='vote_prompt',
         text='vote_prompt = task.vote_prompt_wrap(x, ys)')

Fragment(uuid='e67b3bc9-4ed1-4f33-8575-f61ae1e2478e',
         path='/run.py',
         lineno=34,
         depth=2,
         type='variable',
         name='vote_outputs',
         text='vote_outputs = gpt(vote_prompt, n=n_evaluate_sample, stop=None)')

Fragment(uuid='25de3fd6-00e3-4ddd-b55e-a641e41c2572',
         path='/run.py',
         lineno=35,
         depth=2,
         type='variable',
         name='values',
         text='values = task.vote_outputs_unwrap(vote_outputs, len(ys))')

Fragment(uuid='8b992bcf-e929-4d1e-b3ca-8d65987c8147',
         path='/run.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_proposals(task, x, y): \n'
              '    propose_prompt = task.propose_prompt_wrap(x, y)\n'
              '    proposals = gpt(propose_prompt, n=1, '
              "stop=None)[0].split('\\n')\n"
              "    return [y + _ + '\\n' for _ in proposals]\n")

Fragment(uuid='e9dec16f-c043-4012-a5ff-80abd38a1226',
         path='/run.py',
         lineno=38,
         depth=0,
         type='function',
         name='get_proposals',
         text='def get_proposals(task, x, y): \n'
              '    propose_prompt = task.propose_prompt_wrap(x, y)\n'
              '    proposals = gpt(propose_prompt, n=1, '
              "stop=None)[0].split('\\n')\n"
              "    return [y + _ + '\\n' for _ in proposals]")

Fragment(uuid='31432fb3-1505-458c-87b8-a08f2ace7e0b',
         path='/run.py',
         lineno=39,
         depth=2,
         type='variable',
         name='propose_prompt',
         text='propose_prompt = task.propose_prompt_wrap(x, y)')

Fragment(uuid='a89cf363-84bc-408e-a934-5baa0807440b',
         path='/run.py',
         lineno=40,
         depth=2,
         type='variable',
         name='proposals',
         text="proposals = gpt(propose_prompt, n=1, stop=None)[0].split('\\n')")

Fragment(uuid='7e001133-3d69-47c2-8719-2c93a4f45290',
         path='/run.py',
         lineno=42,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_samples(task, x, y, n_generate_sample, prompt_sample, '
              'stop):\n'
              "    if prompt_sample == 'standard':\n"
              '        prompt = task.standard_prompt_wrap(x, y)\n'
              "    elif prompt_sample == 'cot':\n"
              '        prompt = task.cot_prompt_wrap(x, y)\n'
              '    else:\n'
              "        raise ValueError(f'prompt_sample {prompt_sample} not "
              "recognized')\n"
              '    samples = gpt(prompt, n=n_generate_sample, stop=stop)\n'
              '    return [y + _ for _ in samples]\n')

Fragment(uuid='fdb409d1-e1db-4d01-8fb0-8105b677ab39',
         path='/run.py',
         lineno=43,
         depth=0,
         type='function',
         name='get_samples',
         text='def get_samples(task, x, y, n_generate_sample, prompt_sample, '
              'stop):\n'
              "    if prompt_sample == 'standard':\n"
              '        prompt = task.standard_prompt_wrap(x, y)\n'
              "    elif prompt_sample == 'cot':\n"
              '        prompt = task.cot_prompt_wrap(x, y)\n'
              '    else:\n'
              "        raise ValueError(f'prompt_sample {prompt_sample} not "
              "recognized')\n"
              '    samples = gpt(prompt, n=n_generate_sample, stop=stop)\n'
              '    return [y + _ for _ in samples]')

Fragment(uuid='6c012c76-1c4a-40b0-a5e9-3b943ed73313',
         path='/run.py',
         lineno=45,
         depth=4,
         type='variable',
         name='prompt',
         text='prompt = task.standard_prompt_wrap(x, y)')

Fragment(uuid='e09e9f95-a59b-4a91-97c5-2b30e34daca5',
         path='/run.py',
         lineno=47,
         depth=5,
         type='variable',
         name='prompt',
         text='prompt = task.cot_prompt_wrap(x, y)')

Fragment(uuid='f9382368-9c0a-47c7-9856-8c88820e0285',
         path='/run.py',
         lineno=50,
         depth=2,
         type='variable',
         name='samples',
         text='samples = gpt(prompt, n=n_generate_sample, stop=stop)')

Fragment(uuid='c0be0e7d-5625-488e-8dec-23dd51310afc',
         path='/run.py',
         lineno=52,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def solve(args, task, idx, to_print=True):\n'
              '    print(gpt)\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = ['']  # current output candidates\n"
              '    infos = []\n')

Fragment(uuid='e742778a-5c39-46aa-bd3e-a7be36ea3459',
         path='/run.py',
         lineno=53,
         depth=0,
         type='function',
         name='solve',
         text='def solve(args, task, idx, to_print=True):\n'
              '    print(gpt)\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = ['']  # current output candidates\n"
              '    infos = []\n')

Fragment(uuid='f492fff7-22da-4303-84b3-e8d4f96a0974',
         path='/run.py',
         lineno=55,
         depth=2,
         type='variable',
         name='x',
         text='x = task.get_input(idx)')

Fragment(uuid='59e68bd3-6057-45f0-ac11-bf3d857615ea',
         path='/run.py',
         lineno=56,
         depth=2,
         type='variable',
         name='ys',
         text="ys = ['']")

Fragment(uuid='a21b3a7f-6ed9-4693-a900-44247189d58d',
         path='/run.py',
         lineno=57,
         depth=2,
         type='variable',
         name='infos',
         text='infos = []')

Fragment(uuid='74138b28-0bcb-42cb-af49-ddc53595df6c',
         path='/run.py',
         lineno=58,
         depth=0,
         type='module',
         name='',
         text='    for step in range(task.steps):\n        # generation\n')

Fragment(uuid='3b1acafe-ea00-4da7-b2b5-cf315028c2ee',
         path='/run.py',
         lineno=58,
         depth=0,
         type='function',
         name='solve',
         text='    for step in range(task.steps):\n        # generation\n')

Fragment(uuid='9959fd86-cc87-4258-bd70-f142d21c53ce',
         path='/run.py',
         lineno=60,
         depth=0,
         type='module',
         name='',
         text="        if args.method_generate == 'sample':\n"
              '            new_ys = [get_samples(task, x, y, '
              'args.n_generate_sample, prompt_sample=args.prompt_sample, '
              'stop=task.stops[step]) for y in ys]\n'
              "        elif args.method_generate == 'propose':\n"
              '            new_ys = [get_proposals(task, x, y) for y in ys]\n'
              '        new_ys = list(itertools.chain(*new_ys))\n'
              '        ids = list(range(len(new_ys)))\n'
              '        # evaluation\n')

Fragment(uuid='df0a8aaa-0fe5-4f85-9149-cd7f9350e60a',
         path='/run.py',
         lineno=60,
         depth=0,
         type='function',
         name='solve',
         text="        if args.method_generate == 'sample':\n"
              '            new_ys = [get_samples(task, x, y, '
              'args.n_generate_sample, prompt_sample=args.prompt_sample, '
              'stop=task.stops[step]) for y in ys]\n'
              "        elif args.method_generate == 'propose':\n"
              '            new_ys = [get_proposals(task, x, y) for y in ys]\n'
              '        new_ys = list(itertools.chain(*new_ys))\n'
              '        ids = list(range(len(new_ys)))\n'
              '        # evaluation\n')

Fragment(uuid='a3bdb01d-fd9f-4763-87c8-f7f8e91e8e49',
         path='/run.py',
         lineno=61,
         depth=6,
         type='variable',
         name='new_ys',
         text='new_ys = [get_samples(task, x, y, args.n_generate_sample, '
              'prompt_sample=args.prompt_sample, stop=task.stops[step]) for y '
              'in ys]')

Fragment(uuid='09aa0841-591e-4bf8-8c73-495c42cf8691',
         path='/run.py',
         lineno=63,
         depth=7,
         type='variable',
         name='new_ys',
         text='new_ys = [get_proposals(task, x, y) for y in ys]')

Fragment(uuid='df321f62-18d3-479f-8f91-160fc37800a1',
         path='/run.py',
         lineno=64,
         depth=4,
         type='variable',
         name='new_ys',
         text='new_ys = list(itertools.chain(*new_ys))')

Fragment(uuid='e194dc69-4b82-4096-8db0-ef4172505c47',
         path='/run.py',
         lineno=65,
         depth=4,
         type='variable',
         name='ids',
         text='ids = list(range(len(new_ys)))')

Fragment(uuid='f14c80b1-6b6b-45c1-8d0a-5f531aa77afc',
         path='/run.py',
         lineno=67,
         depth=0,
         type='module',
         name='',
         text="        if args.method_evaluate == 'vote':\n"
              '            values = get_votes(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              "        elif args.method_evaluate == 'value':\n"
              '            values = get_values(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              '\n'
              '        # selection\n')

Fragment(uuid='e4fbbca8-0a5a-48d4-8f8e-f9dcad5edd80',
         path='/run.py',
         lineno=67,
         depth=0,
         type='function',
         name='solve',
         text="        if args.method_evaluate == 'vote':\n"
              '            values = get_votes(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              "        elif args.method_evaluate == 'value':\n"
              '            values = get_values(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              '\n'
              '        # selection\n')

Fragment(uuid='4995f6d2-834a-4f28-9ba9-2096f64f66a8',
         path='/run.py',
         lineno=68,
         depth=6,
         type='variable',
         name='values',
         text='values = get_votes(task, x, new_ys, args.n_evaluate_sample)')

Fragment(uuid='6f666933-cd40-47d7-9ee9-64b896668674',
         path='/run.py',
         lineno=70,
         depth=7,
         type='variable',
         name='values',
         text='values = get_values(task, x, new_ys, args.n_evaluate_sample)')

Fragment(uuid='f064fc5b-6965-400a-b23b-8f768ef1ab80',
         path='/run.py',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text="        if args.method_select == 'sample':\n"
              '            ps = np.array(values) / sum(values)\n'
              '            select_ids = np.random.choice(ids, '
              'size=args.n_select_sample, p=ps).tolist()\n'
              "        elif args.method_select == 'greedy':\n"
              '            select_ids = sorted(ids, key=lambda x: values[x], '
              'reverse=True)[:args.n_select_sample]\n'
              '        select_new_ys = [new_ys[select_id] for select_id in '
              'select_ids]\n'
              '\n'
              '        # log\n')

Fragment(uuid='089b78cb-5769-4b6d-bc46-f69123f191ee',
         path='/run.py',
         lineno=73,
         depth=0,
         type='function',
         name='solve',
         text="        if args.method_select == 'sample':\n"
              '            ps = np.array(values) / sum(values)\n'
              '            select_ids = np.random.choice(ids, '
              'size=args.n_select_sample, p=ps).tolist()\n'
              "        elif args.method_select == 'greedy':\n"
              '            select_ids = sorted(ids, key=lambda x: values[x], '
              'reverse=True)[:args.n_select_sample]\n'
              '        select_new_ys = [new_ys[select_id] for select_id in '
              'select_ids]\n'
              '\n'
              '        # log\n')

Fragment(uuid='5da655c5-58b3-427a-9481-7b1a01df1102',
         path='/run.py',
         lineno=74,
         depth=6,
         type='variable',
         name='ps',
         text='ps = np.array(values) / sum(values)')

Fragment(uuid='771124f4-67d0-4e1e-ac8f-f937da6046ea',
         path='/run.py',
         lineno=75,
         depth=6,
         type='variable',
         name='select_ids',
         text='select_ids = np.random.choice(ids, size=args.n_select_sample, '
              'p=ps).tolist()')

Fragment(uuid='7bf7d92f-d479-4764-a489-86ee4406b34c',
         path='/run.py',
         lineno=77,
         depth=7,
         type='variable',
         name='select_ids',
         text='select_ids = sorted(ids, key=lambda x: values[x], '
              'reverse=True)[:args.n_select_sample]')

Fragment(uuid='94c00a19-5ff5-4c99-94c0-1cbe7524f121',
         path='/run.py',
         lineno=78,
         depth=4,
         type='variable',
         name='select_new_ys',
         text='select_new_ys = [new_ys[select_id] for select_id in select_ids]')

Fragment(uuid='ca6311ef-47d0-429c-ba33-0aabe6176cb1',
         path='/run.py',
         lineno=81,
         depth=0,
         type='module',
         name='',
         text='        if to_print: \n'
              '            sorted_new_ys, sorted_values = '
              'zip(*sorted(zip(new_ys, values), key=lambda x: x[1], '
              'reverse=True))\n'
              "            print(f'-- new_ys --: {sorted_new_ys}\\n-- sol "
              'values --: {sorted_values}\\n-- choices --: '
              "{select_new_ys}\\n')\n"
              '        \n'
              "        infos.append({'step': step, 'x': x, 'ys': ys, 'new_ys': "
              "new_ys, 'values': values, 'select_new_ys': select_new_ys})\n"
              '        ys = select_new_ys\n')

Fragment(uuid='a86b3d21-5a3b-4576-8186-f6555b8d2e10',
         path='/run.py',
         lineno=81,
         depth=0,
         type='function',
         name='solve',
         text='        if to_print: \n'
              '            sorted_new_ys, sorted_values = '
              'zip(*sorted(zip(new_ys, values), key=lambda x: x[1], '
              'reverse=True))\n'
              "            print(f'-- new_ys --: {sorted_new_ys}\\n-- sol "
              'values --: {sorted_values}\\n-- choices --: '
              "{select_new_ys}\\n')\n"
              '        \n'
              "        infos.append({'step': step, 'x': x, 'ys': ys, 'new_ys': "
              "new_ys, 'values': values, 'select_new_ys': select_new_ys})\n"
              '        ys = select_new_ys\n')

Fragment(uuid='e9a4cae1-868a-477e-b9c0-0e750eded30d',
         path='/run.py',
         lineno=82,
         depth=6,
         type='variable',
         name='sorted_new_ys,',
         text='sorted_new_ys, sorted_values = zip(*sorted(zip(new_ys, values), '
              'key=lambda x: x[1], reverse=True))')

Fragment(uuid='2f8e2101-3804-4912-8852-b82c8eee1bfa',
         path='/run.py',
         lineno=86,
         depth=4,
         type='variable',
         name='ys',
         text='ys = select_new_ys')

Fragment(uuid='59112e7f-ef9a-4c27-8e1c-4b7173b017b8',
         path='/run.py',
         lineno=87,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    if to_print: \n'
              '        print(ys)\n'
              "    return ys, {'steps': infos}\n")

Fragment(uuid='a109614f-524e-454c-b506-9428a5ce983e',
         path='/run.py',
         lineno=87,
         depth=0,
         type='function',
         name='solve',
         text='    \n'
              '    if to_print: \n'
              '        print(ys)\n'
              "    return ys, {'steps': infos}")

Fragment(uuid='c50e996e-8b49-407b-b522-7d52db6f731a',
         path='/run.py',
         lineno=91,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def naive_solve(args, task, idx, to_print=True):\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = get_samples(task, x, '', args.n_generate_sample, "
              'args.prompt_sample, stop=None)\n'
              '    return ys, {}\n')

Fragment(uuid='c2b8a152-0501-479b-ac55-401ebc646e63',
         path='/run.py',
         lineno=92,
         depth=0,
         type='function',
         name='naive_solve',
         text='def naive_solve(args, task, idx, to_print=True):\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = get_samples(task, x, '', args.n_generate_sample, "
              'args.prompt_sample, stop=None)\n'
              '    return ys, {}')

Fragment(uuid='43c5ff6d-ad3b-4d24-8743-296e1a520c76',
         path='/run.py',
         lineno=93,
         depth=2,
         type='variable',
         name='x',
         text='x = task.get_input(idx)')

Fragment(uuid='7de2613b-07aa-4d85-b234-eb5bdff32cae',
         path='/run.py',
         lineno=94,
         depth=2,
         type='variable',
         name='ys',
         text="ys = get_samples(task, x, '', args.n_generate_sample, "
              'args.prompt_sample, stop=None)')

Fragment(uuid='f7dd4ab7-6f32-4d58-bed3-f45b8c77812e',
         path='/run.py',
         lineno=96,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def run(args):\n'
              '    task = get_task(args.task, args.task_file_path)\n'
              '    logs, cnt_avg, cnt_any = [], 0, 0\n'
              '    global gpt\n'
              '    gpt = partial(gpt, model=args.backend, '
              'temperature=args.temperature)\n')

Fragment(uuid='813009c4-b580-45ed-bf60-13fc73766e49',
         path='/run.py',
         lineno=97,
         depth=0,
         type='function',
         name='run',
         text='def run(args):\n'
              '    task = get_task(args.task, args.task_file_path)\n'
              '    logs, cnt_avg, cnt_any = [], 0, 0\n'
              '    global gpt\n'
              '    gpt = partial(gpt, model=args.backend, '
              'temperature=args.temperature)\n')

Fragment(uuid='75bda6ee-f2b8-4572-8c53-244361ccec71',
         path='/run.py',
         lineno=98,
         depth=2,
         type='variable',
         name='task',
         text='task = get_task(args.task, args.task_file_path)')

Fragment(uuid='f3ce34ba-4bdf-4311-8681-6d8197274f9f',
         path='/run.py',
         lineno=99,
         depth=2,
         type='variable',
         name='logs,',
         text='logs, cnt_avg, cnt_any = [], 0, 0')

Fragment(uuid='9d8009db-7b8d-4861-8434-d371eb188763',
         path='/run.py',
         lineno=101,
         depth=2,
         type='variable',
         name='gpt',
         text='gpt = partial(gpt, model=args.backend, '
              'temperature=args.temperature)')

Fragment(uuid='0058d487-f746-4c64-87ec-26f4721e52e6',
         path='/run.py',
         lineno=102,
         depth=0,
         type='module',
         name='',
         text='    if args.naive_run:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_naive_{args.prompt_sample}_sample_{args.n_generate_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    else:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_{args.method_generate}{args.n_generate_sample}_{args.method_evaluate}{args.n_evaluate_sample}_{args.method_select}{args.n_select_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    os.makedirs(os.path.dirname(file), exist_ok=True)\n')

Fragment(uuid='8d7e1a01-41f5-4f24-bfd2-10ac42319718',
         path='/run.py',
         lineno=102,
         depth=0,
         type='function',
         name='run',
         text='    if args.naive_run:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_naive_{args.prompt_sample}_sample_{args.n_generate_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    else:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_{args.method_generate}{args.n_generate_sample}_{args.method_evaluate}{args.n_evaluate_sample}_{args.method_select}{args.n_select_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    os.makedirs(os.path.dirname(file), exist_ok=True)\n')

Fragment(uuid='df4ee618-30ee-4d3c-af70-4376184117e8',
         path='/run.py',
         lineno=103,
         depth=4,
         type='variable',
         name='file',
         text='file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_naive_{args.prompt_sample}_sample_{args.n_generate_sample}_start{args.task_start_index}_end{args.task_end_index}.json'")

Fragment(uuid='233f9760-6951-4987-8f11-4c896157d4d1',
         path='/run.py',
         lineno=105,
         depth=5,
         type='variable',
         name='file',
         text='file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_{args.method_generate}{args.n_generate_sample}_{args.method_evaluate}{args.n_evaluate_sample}_{args.method_select}{args.n_select_sample}_start{args.task_start_index}_end{args.task_end_index}.json'")

Fragment(uuid='dc9a5cb2-4921-402e-af96-f654e5ba4122',
         path='/run.py',
         lineno=107,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    for i in range(args.task_start_index, '
              'args.task_end_index):\n'
              '        # solve\n'
              '        if args.naive_run:\n'
              '            ys, info = naive_solve(args, task, i) \n'
              '        else:\n'
              '            ys, info = solve(args, task, i)\n'
              '\n'
              '        # log\n'
              '        infos = [task.test_output(i, y) for y in ys]\n'
              "        info.update({'idx': i, 'ys': ys, 'infos': infos, "
              "'usage_so_far': gpt_usage(args.backend)})\n"
              '        logs.append(info)\n')

Fragment(uuid='205d9e57-cd8f-4d89-9f46-77a63aaa6dfc',
         path='/run.py',
         lineno=107,
         depth=0,
         type='function',
         name='run',
         text='\n'
              '    for i in range(args.task_start_index, '
              'args.task_end_index):\n'
              '        # solve\n'
              '        if args.naive_run:\n'
              '            ys, info = naive_solve(args, task, i) \n'
              '        else:\n'
              '            ys, info = solve(args, task, i)\n'
              '\n'
              '        # log\n'
              '        infos = [task.test_output(i, y) for y in ys]\n'
              "        info.update({'idx': i, 'ys': ys, 'infos': infos, "
              "'usage_so_far': gpt_usage(args.backend)})\n"
              '        logs.append(info)\n')

Fragment(uuid='e99a4a92-032b-4264-a8df-b5c19beee36e',
         path='/run.py',
         lineno=111,
         depth=6,
         type='variable',
         name='ys,',
         text='ys, info = naive_solve(args, task, i)')

Fragment(uuid='244ebc82-2455-4d6b-9434-69f505f387dd',
         path='/run.py',
         lineno=113,
         depth=7,
         type='variable',
         name='ys,',
         text='ys, info = solve(args, task, i)')

Fragment(uuid='a10da4f5-71a8-4bad-acc6-843e1d1ae0b9',
         path='/run.py',
         lineno=116,
         depth=4,
         type='variable',
         name='infos',
         text='infos = [task.test_output(i, y) for y in ys]')

Fragment(uuid='217ef466-f88d-4cd7-9bc7-0f421b3a62ca',
         path='/run.py',
         lineno=119,
         depth=0,
         type='module',
         name='',
         text="        with open(file, 'w') as f:\n"
              '            json.dump(logs, f, indent=4)\n'
              '        \n'
              '        # log main metric\n'
              "        accs = [info['r'] for info in infos]\n"
              '        cnt_avg += sum(accs) / len(accs)\n'
              '        cnt_any += any(accs)\n'
              "        print(i, 'sum(accs)', sum(accs), 'cnt_avg', cnt_avg, "
              "'cnt_any', cnt_any, '\\n')\n"
              '    \n'
              '    n = args.task_end_index - args.task_start_index\n'
              '    print(cnt_avg / n, cnt_any / n)\n'
              "    print('usage_so_far', gpt_usage(args.backend))\n")

Fragment(uuid='6a2550d7-c21b-401d-adf4-be5cbb5781e4',
         path='/run.py',
         lineno=119,
         depth=0,
         type='function',
         name='run',
         text="        with open(file, 'w') as f:\n"
              '            json.dump(logs, f, indent=4)\n'
              '        \n'
              '        # log main metric\n'
              "        accs = [info['r'] for info in infos]\n"
              '        cnt_avg += sum(accs) / len(accs)\n'
              '        cnt_any += any(accs)\n'
              "        print(i, 'sum(accs)', sum(accs), 'cnt_avg', cnt_avg, "
              "'cnt_any', cnt_any, '\\n')\n"
              '    \n'
              '    n = args.task_end_index - args.task_start_index\n'
              '    print(cnt_avg / n, cnt_any / n)\n'
              "    print('usage_so_far', gpt_usage(args.backend))")

Fragment(uuid='925294ef-29bf-4d45-a2d5-250d2113e795',
         path='/run.py',
         lineno=123,
         depth=4,
         type='variable',
         name='accs',
         text="accs = [info['r'] for info in infos]")

Fragment(uuid='f9314520-485b-4fa3-bd3f-8584f23ac0ac',
         path='/run.py',
         lineno=128,
         depth=2,
         type='variable',
         name='n',
         text='n = args.task_end_index - args.task_start_index')

Fragment(uuid='a4aeef5a-5125-4965-ae16-0a7ff7f7a9c3',
         path='/run.py',
         lineno=131,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def parse_args():\n'
              '    args = argparse.ArgumentParser()\n'
              "    args.add_argument('--backend', type=str, choices=['gpt-4', "
              "'gpt-3.5-turbo'], default='gpt-4')\n"
              "    args.add_argument('--temperature', type=float, "
              'default=0.7)\n'
              '\n'
              "    args.add_argument('--task', type=str, required=True, "
              "choices=['game24', 'text', 'cros")

Fragment(uuid='0f3f25b4-59d4-4f0b-acf8-68bb6aecf529',
         path='/run.py',
         lineno=133,
         depth=0,
         type='function',
         name='parse_args',
         text='def parse_args():\n'
              '    args = argparse.ArgumentParser()\n'
              "    args.add_argument('--backend', type=str, choices=['gpt-4', "
              "'gpt-3.5-turbo'], default='gpt-4')\n"
              "    args.add_argument('--temperature', type=float, "
              'default=0.7)\n'
              '\n'
              "    args.add_argument('--task', type=str, required=True, "
              "choices=['game24', 'text', 'cross")

Fragment(uuid='577cbd41-15bd-4c59-9ce5-1e8850252092',
         path='/run.py',
         lineno=134,
         depth=2,
         type='variable',
         name='args',
         text='args = argparse.ArgumentParser()')

Fragment(uuid='c2b3a89d-0e86-4cd2-afec-247af72d4bc8',
         path='/run.py',
         lineno=138,
         depth=0,
         type='module',
         name='',
         text="swords'])\n"
              "    args.add_argument('--task_file_path', type=str, "
              'required=True)\n'
              "    args.add_argument('--task_start_index', type=int, "
              'default=900)\n'
              "    args.add_argument('--task_end_index', type=int, "
              'default=1000)\n'
              '\n'
              "    args.add_argument('--naive_run', action='store_true')\n"
              "    args.add_argument('--prompt_sample',")

Fragment(uuid='73c7f39d-3c5c-43ff-9a14-03be1c4fb109',
         path='/run.py',
         lineno=138,
         depth=0,
         type='function',
         name='parse_args',
         text="words'])\n"
              "    args.add_argument('--task_file_path', type=str, "
              'required=True)\n'
              "    args.add_argument('--task_start_index', type=int, "
              'default=900)\n'
              "    args.add_argument('--task_end_index', type=int, "
              'default=1000)\n'
              '\n'
              "    args.add_argument('--naive_run', action='store_true')\n"
              "    args.add_argument('--prompt_sample', ")

Fragment(uuid='dd58208f-dd0b-4bae-91f6-a748d9b59795',
         path='/run.py',
         lineno=144,
         depth=0,
         type='module',
         name='',
         text=" type=str, choices=['standard', 'cot'])  # only used when "
              'method_generate = sample, or naive_run\n'
              '\n'
              "    args.add_argument('--method_generate', type=str, "
              "choices=['sample', 'propose'])\n"
              "    args.add_argument('--method_evaluate', type=str, "
              "choices=['value', 'vote'])\n"
              "    args.add_argument('--method_select', type=str, "
              "choices=['sample', 'greedy'])\n"
              "    args.add_argument('--n_generate_sample', type=int, "
              'default=1)  # only thing needed if naive_run\n'
              "    args.add_argument('--n_evaluate_sample', type=int, "
              'default=1)\n'
              "    args.add_argument('--n_select_sample', type=int, "
              'default=1)\n'
              '\n'
              '    args = args.parse_args()\n'
              '    return args\n')

Fragment(uuid='ac4ec4fc-57e0-45a6-b2c4-ab29bb824893',
         path='/run.py',
         lineno=144,
         depth=0,
         type='function',
         name='parse_args',
         text="type=str, choices=['standard', 'cot'])  # only used when "
              'method_generate = sample, or naive_run\n'
              '\n'
              "    args.add_argument('--method_generate', type=str, "
              "choices=['sample', 'propose'])\n"
              "    args.add_argument('--method_evaluate', type=str, "
              "choices=['value', 'vote'])\n"
              "    args.add_argument('--method_select', type=str, "
              "choices=['sample', 'greedy'])\n"
              "    args.add_argument('--n_generate_sample', type=int, "
              'default=1)  # only thing needed if naive_run\n'
              "    args.add_argument('--n_evaluate_sample', type=int, "
              'default=1)\n'
              "    args.add_argument('--n_select_sample', type=int, "
              'default=1)\n'
              '\n'
              '    args = args.parse_args()\n'
              '    return args')

Fragment(uuid='e646bd80-2a7a-4570-854e-c1beec6a2c58',
         path='/run.py',
         lineno=153,
         depth=2,
         type='variable',
         name='args',
         text='args = args.parse_args()')

Fragment(uuid='7bbd52c0-bf97-43a1-966c-4200f7c13662',
         path='/run.py',
         lineno=155,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              "if __name__ == '__main__':\n"
              '    args = parse_args()\n'
              '    print(args)\n'
              '    run(args)')

Fragment(uuid='b37f0341-54c0-4c5c-97f2-fdf6e22b3f44',
         path='/run.py',
         lineno=158,
         depth=2,
         type='variable',
         name='args',
         text='args = parse_args()')

Fragment(uuid='ea799885-98bc-4f1e-b676-570ca47da04c',
         path='/scripts/crosswords/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task crosswords \\\n'
              '    --task_file_path mini0505_0_100_5.json \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 20 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample cot \\\n'
              '    --n_generate_sample 10 ')

Fragment(uuid='98e1e01f-e184-4858-9986-76c6ed2256a1',
         path='/scripts/crosswords/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/crosswords/cot_sampling.sh\n')

Fragment(uuid='29e6d6cf-ca5d-464d-890b-78a79af8485b',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=1,
         depth=0,
         type='notebook',
         name='',
         text='{\n'
              ' "cells": [\n'
              '  {\n'
              '   "attachments": {},\n'
              '   "cell_type": "markdown",\n'
              '   "metadata": {},\n'
              '   "source": [\n'
              '    "# Env"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": [\n'
              '    "cd ../.."\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "')

Fragment(uuid='08a1d7f6-72d1-49d1-b3e6-6787b9affbdc',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=1,
         depth=0,
         type='notebook_code',
         name='',
         text='cd ../..\n'
              '\n'
              'import json\n'
              'from prompts.crosswords import propose_prompt, value_prompt\n'
              'from models import gpt\n'
              'from tasks.crosswords import MiniCrosswordsEnv\n'
              '\n'
              'env = MiniCrosswordsEnv()\n')

Fragment(uuid='440351c3-9ea7-4f05-8979-d9aff4cb4f10',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=1,
         depth=0,
         type='notebook_markdown',
         name='',
         text='# Env\n\n# Prompt\n\n# DFS')

Fragment(uuid='34186398-011e-4dfb-83ed-be066f6496a7',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='PythonNotebook: '
              '/scripts/crosswords/search_crosswords-dfs.ipynb\n'
              '  Functions: dfs get_candidates_to_scores parse_line '
              'parse_response prompt_wrap propose_score\n'
              '  Variables: actions best board, candidates '
              'candidates_to_scores candidates_to_scores[candidate] '
              'cnt_per_state confidence_to_value count done env env.cache[obs] '
              'env_ info infos infoss lines match obs obs, parsed_lines '
              'parsed_response parts pattern responses\n'
              '  Usages: MiniCrosswordsEnv action any append board cache '
              'candidate copy crosswords deepcopy dump format fout get gpt '
              'group idx import input input_str items json key len line lower '
              'max max_per_state model models open pop print prompt_status '
              'prompts propose_prompt prune range render render_board reset '
              'response reverse score sorted split status step steps tasks '
              'time_limit value_prompt\n')

Fragment(uuid='51c03ac5-6a08-4a81-9e10-08a99a38f4df',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from prompts.crosswords import propose_prompt, value_prompt')

Fragment(uuid='1cb85299-29f5-481b-95d2-d76a1d7a64a3',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='from models import gpt')

Fragment(uuid='cc4e6008-cad4-4f34-a787-99b83d7521e2',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from tasks.crosswords import MiniCrosswordsEnv')

Fragment(uuid='e436b840-a4ef-49f7-b4f0-7b95e25fe795',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=8,
         depth=0,
         type='variable',
         name='env',
         text='env = MiniCrosswordsEnv()')

Fragment(uuid='b3cfcd4a-e583-4d21-a14a-bad673fbbefa',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=9,
         depth=0,
         type='notebook_code',
         name='',
         text='\n'
              'def prompt_wrap(obs):\n'
              '    return propose_prompt.format(input=obs)\n'
              '\n'
              'print(prompt_wrap(env.reset(0)))\n'
              "# print('---------')\n"
              "# print(prompt_wrap(env.step('h2. value')[0]))\n"
              '\n'
              'import re\n'
              'import copy\n'
              'from models import gpt\n')

Fragment(uuid='ce3fd7ad-a95e-44be-a59b-1716e2a8de22',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=10,
         depth=0,
         type='function',
         name='prompt_wrap',
         text='def prompt_wrap(obs):\n'
              '    return propose_prompt.format(input=obs)')

Fragment(uuid='0018d807-ef90-414c-999c-d1f3969f22d4',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=17,
         depth=0,
         type='dependency',
         name='',
         text='import re')

Fragment(uuid='ba5ec0f9-cb28-44a6-b50e-bcb6a443e933',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=18,
         depth=0,
         type='dependency',
         name='',
         text='import copy')

Fragment(uuid='2a26ca24-b56a-421e-90f1-83cb78323124',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=19,
         depth=0,
         type='dependency',
         name='',
         text='from models import gpt')

Fragment(uuid='07323995-a4e8-48d1-9d03-d3807c346622',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=20,
         depth=0,
         type='notebook_code',
         name='',
         text='\n'
              'def parse_line(input_str):\n'
              '    # regular expression pattern to match the input string '
              'format\n'
              "    pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n"
              '\n'
              '    # use regex to extract the parts of the input string\n'
              '    match = re.match(pattern, input_str)\n')

Fragment(uuid='04a0f7af-6fe3-4e8f-a66e-7e843ff812fc',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=21,
         depth=0,
         type='notebook',
         name='',
         text='cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": [\n'
              '    "import json\\n",\n'
              '    "from prompts.crosswords import propose_prompt, '
              'value_prompt\\n",\n'
              '    "from models import gpt\\n",\n'
              '    "from tasks.crosswords import MiniCrossw')

Fragment(uuid='73c05cf0-f022-46ad-bfa8-4c83ed18289a',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=21,
         depth=0,
         type='function',
         name='parse_line',
         text='def parse_line(input_str):\n'
              '    # regular expression pattern to match the input string '
              'format\n'
              "    pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n"
              '\n'
              '    # use regex to extract the parts of the input string\n'
              '    match = re.match(pattern, input_str)\n'
              '\n'
              '    if match:\n'
              '        # extract the matched groups\n'
              '        parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              '        return parts\n'
              '    else:\n'
              '        return None')

Fragment(uuid='b1d25bdc-2a8a-4afe-bcfd-8a61d1021dc5',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=23,
         depth=2,
         type='variable',
         name='pattern',
         text="pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'")

Fragment(uuid='148f26b2-0760-4e7f-bd0b-6043f2c389ea',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=26,
         depth=2,
         type='variable',
         name='match',
         text='match = re.match(pattern, input_str)')

Fragment(uuid='78600a65-d0ff-4e2c-808d-f9bb2102e62d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=27,
         depth=0,
         type='notebook_code',
         name='',
         text='\n'
              '    if match:\n'
              '        # extract the matched groups\n'
              '        parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              '        return parts\n'
              '    else:\n'
              '        return None\n'
              '\n'
              "confidence_to_value = {'certain': 1, 'high': 0.5, 'medium': "
              "0.2, 'low': 0.1}  # TODO: ad hoc\n")

Fragment(uuid='9da61417-b6be-4c34-af90-6422654e3498',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=29,
         depth=0,
         type='notebook',
         name='',
         text='ordsEnv\\n",\n'
              '    "\\n",\n'
              '    "env = MiniCrosswordsEnv()"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "attachments": {},\n'
              '   "cell_type": "markdown",\n'
              '   "metadata": {},\n'
              '   "source": [\n'
              '    "# Prompt"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": ')

Fragment(uuid='5b0452b8-e018-4c5c-b7a0-d8c63fbf8e22',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=30,
         depth=4,
         type='variable',
         name='parts',
         text='parts = [match.group(1), match.group(2), match.group(3)]')

Fragment(uuid='4c621597-c0d8-4230-8c05-9ad0a8c248ea',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=35,
         depth=0,
         type='variable',
         name='confidence_to_value',
         text="confidence_to_value = {'certain': 1, 'high': 0.5, 'medium': "
              "0.2, 'low': 0.1}")

Fragment(uuid='e9b1aabf-18fa-4736-b411-351faf012369',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=36,
         depth=0,
         type='notebook_code',
         name='',
         text='\n'
              'def parse_response(response):\n'
              '    # split the response into lines\n'
              "    lines = response.split('\\n')\n"
              '\n'
              '    # parse each line\n'
              '    parsed_lines = [parse_line(line) for line in lines]\n'
              '\n'
              "    # filter out the lines that didn't match the format\n"
              "    parsed_lines = [(line[0].lower() + '. ' + line[1].lower(), "
              'confidence_to_value.get(line[2], 0)) for line in parsed_lines '
              'if line is not None]\n'
              '\n'
              '    return parsed_lines if len(parsed_lines) >= 1 else None\n')

Fragment(uuid='2342422a-d286-4c94-a2d7-6177a74db3c3',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=37,
         depth=0,
         type='function',
         name='parse_response',
         text='def parse_response(response):\n'
              '    # split the response into lines\n'
              "    lines = response.split('\\n')\n"
              '\n'
              '    # parse each line\n'
              '    parsed_lines = [parse_line(line) for line in lines]\n'
              '\n'
              "    # filter out the lines that didn't match the format\n"
              "    parsed_lines = [(line[0].lower() + '. ' + line[1].lower(), "
              'confidence_to_value.get(line[2], 0)) for line in parsed_lines '
              'if line is not None]\n'
              '\n'
              '    return parsed_lines if len(parsed_lines) >= 1 else None')

Fragment(uuid='3fa9c0ff-33c9-4e34-8fe8-d3cd63c7e9fb',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=39,
         depth=2,
         type='variable',
         name='lines',
         text="lines = response.split('\\n')")

Fragment(uuid='117383a6-96a9-427c-a768-fec63a09fbed',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=42,
         depth=2,
         type='variable',
         name='parsed_lines',
         text='parsed_lines = [parse_line(line) for line in lines]')

Fragment(uuid='0dbf5f49-d7ff-4466-ba33-5e0288a63d3b',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=45,
         depth=2,
         type='variable',
         name='parsed_lines',
         text="parsed_lines = [(line[0].lower() + '. ' + line[1].lower(), "
              'confidence_to_value.get(line[2], 0)) for line in parsed_lines '
              'if line is not None]')

Fragment(uuid='07cfd7c7-5d3a-452a-972b-7c98bd518a89',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=46,
         depth=0,
         type='notebook',
         name='',
         text='[],\n'
              '   "source": [\n'
              '    "def prompt_wrap(obs):\\n",\n'
              '    "    return propose_prompt.format(input=obs)\\n",\n'
              '    "\\n",\n'
              '    "print(prompt_wrap(env.reset(0)))\\n",\n'
              '    "# print(\'---------\')\\n",\n'
              '    "# print(prompt_wrap(env.step(\'h2. value\')[0]))"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type"')

Fragment(uuid='64fda0bb-dcdd-4f11-a6d8-beaf9d4ace28',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=48,
         depth=0,
         type='notebook_code',
         name='',
         text='\n'
              '\n'
              'def get_candidates_to_scores(env):\n'
              '    obs = env.render()\n'
              '    if obs in env.cache: \n'
              "        print('cache hit')\n"
              '        return env.cache[obs]\n'
              "    print('call gpt')\n"
              "    responses = gpt(prompt_wrap(obs), model='gpt-4', n=8)\n"
              '    candidates_to_scores = {}\n')

Fragment(uuid='e0c1633a-2329-48df-bacc-b63dec77984b',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=50,
         depth=0,
         type='function',
         name='get_candidates_to_scores',
         text='def get_candidates_to_scores(env):\n'
              '    obs = env.render()\n'
              '    if obs in env.cache: \n'
              "        print('cache hit')\n"
              '        return env.cache[obs]\n'
              "    print('call gpt')\n"
              "    responses = gpt(prompt_wrap(obs), model='gpt-4', n=8)\n"
              '    candidates_to_scores = {}\n')

Fragment(uuid='f975d012-3fe7-423f-8089-5a031907887d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=51,
         depth=2,
         type='variable',
         name='obs',
         text='obs = env.render()')

Fragment(uuid='1e3eeb52-0b6b-4fd1-9529-0bf4753ed183',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=56,
         depth=2,
         type='variable',
         name='responses',
         text="responses = gpt(prompt_wrap(obs), model='gpt-4', n=8)")

Fragment(uuid='e7e9d0bb-810f-45bb-b714-96652393295e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=57,
         depth=0,
         type='notebook',
         name='',
         text=': "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": [\n'
              '    "import re\\n",\n'
              '    "import copy\\n",\n'
              '    "from models import gpt\\n",\n'
              '    "\\n",\n'
              '    "def parse_line(input_str):\\n",\n'
              '    "    # regular expression pattern to match the input ')

Fragment(uuid='2c1e09d8-bd6d-479a-8c84-9b4c92863fba',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=57,
         depth=2,
         type='variable',
         name='candidates_to_scores',
         text='candidates_to_scores = {}')

Fragment(uuid='c521cf1d-f5b9-46bf-8cd1-9873e494f82a',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=58,
         depth=0,
         type='notebook_code',
         name='',
         text='    for response in responses:\n'
              '        parsed_response = parse_response(response)\n'
              '        if parsed_response:\n')

Fragment(uuid='e9ca6b15-cbd7-4317-b003-cb3b3c31bdce',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=58,
         depth=0,
         type='function',
         name='get_candidates_to_scores',
         text='    for response in responses:\n'
              '        parsed_response = parse_response(response)\n'
              '        if parsed_response:\n')

Fragment(uuid='6a282588-2e7a-4ea2-87b4-889cea7dfd0b',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=59,
         depth=4,
         type='variable',
         name='parsed_response',
         text='parsed_response = parse_response(response)')

Fragment(uuid='ec2002c8-ef3b-42df-9ff4-a663dd523dd5',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=61,
         depth=0,
         type='notebook_code',
         name='',
         text='            for candidate, score in parsed_response:\n'
              '                candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '    # print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '    env.cache[obs] = candidates_to_scores\n'
              '    return candidates_to_scores\n')

Fragment(uuid='ab3ef7b6-c4e4-48f7-ae12-e74c7f5b5813',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=61,
         depth=0,
         type='function',
         name='get_candidates_to_scores',
         text='            for candidate, score in parsed_response:\n'
              '                candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '    # print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '    env.cache[obs] = candidates_to_scores\n'
              '    return candidates_to_scores')

Fragment(uuid='28bb7c98-695f-46c3-a352-4057060b505b',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=62,
         depth=8,
         type='variable',
         name='candidates_to_scores[candidate]',
         text='candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score')

Fragment(uuid='e15911ce-6ed8-4b38-87ed-555941088667',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=65,
         depth=2,
         type='variable',
         name='env.cache[obs]',
         text='env.cache[obs] = candidates_to_scores')

Fragment(uuid='3f1417a2-3742-423e-a968-0e69cafd9884',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=67,
         depth=0,
         type='notebook',
         name='',
         text='string format\\n",\n'
              '    "    pattern = r\'^([hv][1-5])\\\\. ([a-zA-Z]{5,5}) '
              '\\\\((certain|high|medium|low)\\\\).*$\'\\n",\n'
              '    "\\n",\n'
              '    "    # use regex to extract the parts of the input '
              'string\\n",\n'
              '    "    match = re.match(pattern, input_str)\\n",\n'
              '    "\\n",\n'
              '    "    if match:\\')

Fragment(uuid='50da5c24-aeb5-4f29-a171-8ae1342aa192',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=67,
         depth=0,
         type='notebook_code',
         name='',
         text='\n'
              'def propose_score(env, idx):\n'
              '    obs = env.reset(idx)\n'
              '    done = False\n'
              '    infos = []\n')

Fragment(uuid='6d794c2c-4456-4d26-b105-3972894ad04d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=68,
         depth=0,
         type='function',
         name='propose_score',
         text='def propose_score(env, idx):\n'
              '    obs = env.reset(idx)\n'
              '    done = False\n'
              '    infos = []\n')

Fragment(uuid='4862adbb-6773-4f89-aaf6-a3a238004a42',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=69,
         depth=2,
         type='variable',
         name='obs',
         text='obs = env.reset(idx)')

Fragment(uuid='1a905739-7678-4374-ab07-7127c0aff8ef',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=70,
         depth=2,
         type='variable',
         name='done',
         text='done = False')

Fragment(uuid='57ef2470-3226-49a6-b7a2-bca2997baabe',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=71,
         depth=2,
         type='variable',
         name='infos',
         text='infos = []')

Fragment(uuid='94073c6d-085e-4e24-85f0-de37427cea82',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=72,
         depth=0,
         type='notebook_code',
         name='',
         text='    while not done:\n'
              "        responses = gpt(prompt_wrap(obs), model='gpt-4', n=5)\n"
              '        candidates_to_scores = {}\n')

Fragment(uuid='fdd5299c-7932-435d-80ca-2e272e84f83d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=72,
         depth=0,
         type='function',
         name='propose_score',
         text='    while not done:\n'
              "        responses = gpt(prompt_wrap(obs), model='gpt-4', n=5)\n"
              '        candidates_to_scores = {}\n')

Fragment(uuid='92bed7a0-f344-4ec8-b2b3-9917a9bcc5ea',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=73,
         depth=0,
         type='notebook',
         name='',
         text='n",\n'
              '    "        # extract the matched groups\\n",\n'
              '    "        parts = [match.group(1), match.group(2), '
              'match.group(3)]\\n",\n'
              '    "        return parts\\n",\n'
              '    "    else:\\n",\n'
              '    "        return None\\n",\n'
              '    "\\n",\n'
              '    "confidence_to_value = {\'certain\': 1, \'high\': 0.5,')

Fragment(uuid='11c563cc-78ef-4562-a3ac-f282812536f1',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=73,
         depth=4,
         type='variable',
         name='responses',
         text="responses = gpt(prompt_wrap(obs), model='gpt-4', n=5)")

Fragment(uuid='67c8b68c-7e6c-40e3-9b9e-88c76969b8a6',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=74,
         depth=4,
         type='variable',
         name='candidates_to_scores',
         text='candidates_to_scores = {}')

Fragment(uuid='c38505fd-368c-443f-8e6f-84af7d067a0a',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=75,
         depth=0,
         type='notebook_code',
         name='',
         text='        for response in responses:\n'
              '            parsed_response = parse_response(response)\n'
              '            if parsed_response:\n')

Fragment(uuid='f2321651-ca9d-4e67-9c9b-521ee9d5e06c',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=75,
         depth=0,
         type='function',
         name='propose_score',
         text='        for response in responses:\n'
              '            parsed_response = parse_response(response)\n'
              '            if parsed_response:\n')

Fragment(uuid='72216665-b83a-4be8-914a-dd4de544abf4',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=76,
         depth=6,
         type='variable',
         name='parsed_response',
         text='parsed_response = parse_response(response)')

Fragment(uuid='5c7116f3-693d-42dc-91eb-7642a470af98',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=78,
         depth=0,
         type='notebook_code',
         name='',
         text='                for candidate, score in parsed_response:\n'
              '                    candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '        print(sorted(candidates_to_scores.items(), key=lambda '
              'x: x[1], reverse=True))\n'
              '        if len(candidates_to_scores) == 0:\n'
              '            break\n'
              '        candidates =  sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True)\n')

Fragment(uuid='1750e699-44ce-47a8-aa96-2149f1fed151',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=78,
         depth=0,
         type='function',
         name='propose_score',
         text='                for candidate, score in parsed_response:\n'
              '                    candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '        print(sorted(candidates_to_scores.items(), key=lambda '
              'x: x[1], reverse=True))\n'
              '        if len(candidates_to_scores) == 0:\n'
              '            break\n'
              '        candidates =  sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True)\n')

Fragment(uuid='9cec78f0-2f82-4d4e-aa9d-b563c9773ed8',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=79,
         depth=10,
         type='variable',
         name='candidates_to_scores[candidate]',
         text='candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score')

Fragment(uuid='ae0b9d88-eb01-4892-b13a-d805522a80d0',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=80,
         depth=0,
         type='notebook',
         name='',
         text=' \'medium\': 0.2, \'low\': 0.1}  # TODO: ad hoc\\n",\n'
              '    "\\n",\n'
              '    "def parse_response(response):\\n",\n'
              '    "    # split the response into lines\\n",\n'
              '    "    lines = response.split(\'\\\\n\')\\n",\n'
              '    "\\n",\n'
              '    "    # parse each line\\n",\n'
              '    "    parsed_lines = [parse_line(line')

Fragment(uuid='b32357ad-f7ac-4477-8a7d-a778bde27a5c',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=84,
         depth=4,
         type='variable',
         name='candidates',
         text='candidates =  sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True)')

Fragment(uuid='8d0220c8-ebcb-4d03-8d3a-7d4838358fd2',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=85,
         depth=0,
         type='notebook_code',
         name='',
         text='        for candidate in candidates:\n'
              '            env_ = copy.deepcopy(env)\n'
              '            env_.step(candidate)\n'
              '            if not any(_ == 2 for _ in env_.status):\n'
              '                break\n'
              '        print(candidate)\n'
              '        # candidate = input()\n'
              '        obs, r, done, info = env.step(candidate)\n'
              '        print(obs)\n'
              '        print(env.steps, info)\n'
              "        print('-------------------\\n\\n\\n')\n"
              '        infos.append(info)\n'
              '    return infos\n')

Fragment(uuid='7d0de298-bc4b-4e41-b132-a0021c3209ed',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=85,
         depth=0,
         type='function',
         name='propose_score',
         text='        for candidate in candidates:\n'
              '            env_ = copy.deepcopy(env)\n'
              '            env_.step(candidate)\n'
              '            if not any(_ == 2 for _ in env_.status):\n'
              '                break\n'
              '        print(candidate)\n'
              '        # candidate = input()\n'
              '        obs, r, done, info = env.step(candidate)\n'
              '        print(obs)\n'
              '        print(env.steps, info)\n'
              "        print('-------------------\\n\\n\\n')\n"
              '        infos.append(info)\n'
              '    return infos')

Fragment(uuid='c717e330-1367-4744-a0df-6da4bafa91dc',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=86,
         depth=6,
         type='variable',
         name='env_',
         text='env_ = copy.deepcopy(env)')

Fragment(uuid='9091f74c-479a-4f6f-b39a-19fd771671e4',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=87,
         depth=0,
         type='notebook',
         name='',
         text=') for line in lines]\\n",\n'
              '    "\\n",\n'
              '    "    # filter out the lines that didn\'t match the '
              'format\\n",\n'
              '    "    parsed_lines = [(line[0].lower() + \'. \' + '
              'line[1].lower(), confidence_to_value.get(line[2], 0)) for line '
              'in parsed_lines if line is not None]\\n",\n'
              '    "\\n",\n')

Fragment(uuid='26cb4dae-6895-4994-a83f-605e5446096e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=92,
         depth=0,
         type='notebook',
         name='',
         text='    "    return parsed_lines if len(parsed_lines) >= 1 else '
              'None\\n",\n'
              '    "\\n",\n'
              '    "\\n",\n'
              '    "def get_candidates_to_scores(env):\\n",\n'
              '    "    obs = env.render()\\n",\n'
              '    "    if obs in env.cache: \\n",\n'
              '    "        print(\'cache hit\')\\n",\n'
              '    "        return env.cache[')

Fragment(uuid='a1e938ab-a742-471d-b5e3-d54d12e157b1',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=92,
         depth=4,
         type='variable',
         name='obs,',
         text='obs, r, done, info = env.step(candidate)')

Fragment(uuid='b1688914-0c59-4ba3-a5ab-2d5bb7b2a8a4',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=98,
         depth=0,
         type='notebook_code',
         name='',
         text='\n'
              'def dfs(env, actions, infos, time_limit, prune, '
              'max_per_state):\n'
              '    # get candidate thoughts\n'
              '    candidates_to_scores = get_candidates_to_scores(env)\n'
              '    if len(candidates_to_scores) == 0: return 0, [], []\n'
              '    print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '\n'
              '    # back up current state\n'
              '    board, status, steps = env.board.copy(), env.status.copy(), '
              'env.steps\n'
              '\n'
              '    # try each candidate\n'
              '    cnt_per_state = 0\n')

Fragment(uuid='37fb6fe5-ae83-411d-a6a2-b68c7e18d49d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=99,
         depth=0,
         type='notebook',
         name='',
         text='obs]\\n",\n'
              '    "    print(\'call gpt\')\\n",\n'
              '    "    responses = gpt(prompt_wrap(obs), model=\'gpt-4\', '
              'n=8)\\n",\n'
              '    "    candidates_to_scores = {}\\n",\n'
              '    "    for response in responses:\\n",\n'
              '    "        parsed_response = parse_response(response)\\n",\n'
              '    "        if parsed_response:\\n",\n'
              '    "            for candidate, score in parsed_response:\\n",\n'
              '    "                candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\\n",\n'
              '    "        # choose candiate with highest score\\n",\n'
              '    "    # print(sorted(can')

Fragment(uuid='f4d158bb-c327-4ae8-b60c-54a7c96fac95',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=99,
         depth=0,
         type='function',
         name='dfs',
         text='def dfs(env, actions, infos, time_limit, prune, '
              'max_per_state):\n'
              '    # get candidate thoughts\n'
              '    candidates_to_scores = get_candidates_to_scores(env)\n'
              '    if len(candidates_to_scores) == 0: return 0, [], []\n'
              '    print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '\n'
              '    # back up current state\n'
              '    board, status, steps = env.board.copy(), env.status.copy(), '
              'env.steps\n'
              '\n'
              '    # try each candidate\n'
              '    cnt_per_state = 0\n')

Fragment(uuid='3bed3249-34f0-4789-8ddd-a18674c272c9',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=101,
         depth=2,
         type='variable',
         name='candidates_to_scores',
         text='candidates_to_scores = get_candidates_to_scores(env)')

Fragment(uuid='cdea905c-0057-40e8-a8cd-d452127b1f4d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=106,
         depth=2,
         type='variable',
         name='board,',
         text='board, status, steps = env.board.copy(), env.status.copy(), '
              'env.steps')

Fragment(uuid='a0edc576-7958-427f-bbc3-61635a68a63c',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=109,
         depth=0,
         type='notebook',
         name='',
         text='didates_to_scores.items(), key=lambda x: x[1], '
              'reverse=True))\\n",\n'
              '    "    env.cache[obs] = candidates_to_scores\\n",\n'
              '    "    return candidates_to_scores\\n",\n'
              '    "\\n",\n'
              '    "def propose_score(env, idx):\\n",\n'
              '    "    obs = env.reset(idx)\\n",\n'
              '    "    done = False\\n",\n'
              '    "    infos = []\\n",\n'
              '    "    while not done:\\n",\n'
              '    "        responses = gpt(prompt_wrap(obs), model=\'gpt-4\', '
              'n=5)\\n",\n'
              '    "        candidates_to_scores = {}\\n",\n'
              '    "        for response in responses:\\n",\n'
              '    "            parsed_response = parse_response(resp')

Fragment(uuid='d66e0a6f-eb6d-4046-82fc-cb869b847056',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=109,
         depth=2,
         type='variable',
         name='cnt_per_state',
         text='cnt_per_state = 0')

Fragment(uuid='7c57dbf7-a8a3-47cf-82e5-594f0ecec9cc',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=110,
         depth=0,
         type='notebook_code',
         name='',
         text='    for action in sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True):\n'
              '        obs, r, done, info = env.step(action)\n'
              "        r = info['r_word']\n")

Fragment(uuid='7d3512cb-0c9b-4752-97a7-d0d67dde7aa5',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=110,
         depth=0,
         type='function',
         name='dfs',
         text='    for action in sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True):\n'
              '        obs, r, done, info = env.step(action)\n'
              "        r = info['r_word']\n")

Fragment(uuid='1f73c58e-00ac-4507-9a9e-d144b5769750',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=111,
         depth=4,
         type='variable',
         name='obs,',
         text='obs, r, done, info = env.step(action)')

Fragment(uuid='ce287c3d-d0a0-4f9a-aeb9-47f2f95ca7e8',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=112,
         depth=4,
         type='variable',
         name='r',
         text="r = info['r_word']")

Fragment(uuid='79cff283-a35f-4fed-9824-d978f7e9e523',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=113,
         depth=0,
         type='notebook_code',
         name='',
         text='        if len(infos) < time_limit and env.steps < 10 and not '
              'any(_ == 2 for _ in env.status):  # not violating any existing '
              'constraints\n'
              '            cnt_per_state += 1\n')

Fragment(uuid='948b12b8-4637-4b47-94f4-c9f9228aa0f5',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=113,
         depth=0,
         type='function',
         name='dfs',
         text='        if len(infos) < time_limit and env.steps < 10 and not '
              'any(_ == 2 for _ in env.status):  # not violating any existing '
              'constraints\n'
              '            cnt_per_state += 1\n')

Fragment(uuid='56694196-2ffa-49fd-8ce9-457811254466',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=115,
         depth=0,
         type='notebook_code',
         name='',
         text='            if cnt_per_state > max_per_state: break\n'
              '            count = env.prompt_status()       \n'
              '            actions.append(action)  \n'
              '\n'
              '            print(len(infos))\n'
              '            print(actions)\n'
              '            print(env.render_board())\n'
              '            print(info)\n'
              '            print(count)\n')

Fragment(uuid='b2366572-d594-4135-8f78-af3010ca030a',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=115,
         depth=0,
         type='function',
         name='dfs',
         text='            if cnt_per_state > max_per_state: break\n'
              '            count = env.prompt_status()       \n'
              '            actions.append(action)  \n'
              '\n'
              '            print(len(infos))\n'
              '            print(actions)\n'
              '            print(env.render_board())\n'
              '            print(info)\n'
              '            print(count)\n')

Fragment(uuid='58913a45-3c43-4a79-b050-02e525a0d164',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=116,
         depth=6,
         type='variable',
         name='count',
         text='count = env.prompt_status()')

Fragment(uuid='3af67644-93fb-4e28-a80b-71f8a8244054',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=121,
         depth=0,
         type='notebook',
         name='',
         text='onse)\\n",\n'
              '    "            if parsed_response:\\n",\n'
              '    "                for candidate, score in '
              'parsed_response:\\n",\n'
              '    "                    candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\\n",\n'
              '    "        # choose candiate with highest score\\n",\n'
              '    "        print(sorted(candidates_to_scores.items(), '
              'key=lambda x: x[1], reverse=True))\\n",\n'
              '    "        if len(candidates_to_scores) == 0:\\n",\n'
              '    "            break\\n",\n'
              '    "        candidates =  sorted(candidates_to_scores, '
              'key=candidates_to_sco')

Fragment(uuid='f463107c-ee92-44dd-88aa-5428d9d52cf7',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=124,
         depth=0,
         type='notebook_code',
         name='',
         text='            if infos:\n'
              '                best = max(infos, key=lambda x: '
              "x['info']['r_word'])\n"
              "                print('best', best)\n"
              "            print('--------------')\n"
              '            print()\n'
              '\n'
              "            info = {'total_step': len(infos), 'env_step': "
              "env.steps, 'actions': actions.copy(), 'info': info, 'count': "
              'count}\n'
              '            infos.append(info)\n')

Fragment(uuid='d3541fb8-7c89-48f6-8587-332a9486f4b7',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=124,
         depth=0,
         type='function',
         name='dfs',
         text='            if infos:\n'
              '                best = max(infos, key=lambda x: '
              "x['info']['r_word'])\n"
              "                print('best', best)\n"
              "            print('--------------')\n"
              '            print()\n'
              '\n'
              "            info = {'total_step': len(infos), 'env_step': "
              "env.steps, 'actions': actions.copy(), 'info': info, 'count': "
              'count}\n'
              '            infos.append(info)\n')

Fragment(uuid='89a98ba9-449f-49ce-96c7-7499dc83f744',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=125,
         depth=8,
         type='variable',
         name='best',
         text="best = max(infos, key=lambda x: x['info']['r_word'])")

Fragment(uuid='6533f2c6-8087-43ae-9542-3fdb82513c9e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=129,
         depth=0,
         type='notebook',
         name='',
         text='res.get, reverse=True)\\n",\n'
              '    "        for candidate in candidates:\\n",\n'
              '    "            env_ = copy.deepcopy(env)\\n",\n'
              '    "            env_.step(candidate)\\n",\n'
              '    "            if not any(_ == 2 for _ in env_.status):\\n",\n'
              '    "                break\\n",\n'
              '    "        print(candidate)\\n",\n'
              '    "        # candidate = input()\\n",\n'
              '    "        obs, r, done, info = env.step(candidate)\\n",\n'
              '    "        print(obs)\\n",\n'
              '    "        print(env.steps, info)\\n",\n'
              '    "        '
              'print(\'-------------------\\\\n\\\\n\\\\n\')\\n",\n'
              '    "        infos.app')

Fragment(uuid='22d18e2b-a9e7-487d-a0aa-eba97a8c0b43',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=130,
         depth=6,
         type='variable',
         name='info',
         text="info = {'total_step': len(infos), 'env_step': env.steps, "
              "'actions': actions.copy(), 'info': info, 'count': count}")

Fragment(uuid='cf0b493b-9573-4d1a-bd67-fe66a7308f5c',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=132,
         depth=0,
         type='notebook_code',
         name='',
         text="            if not prune or count['impossible'] < 1:  # only "
              'continue if the current status is possible\n'
              '                dfs(env, actions, infos, time_limit, prune, '
              'max_per_state)\n'
              '            actions.pop()\n'
              '        env.reset(env.idx, board=board.copy(), '
              'status=status.copy(), steps=steps)\n'
              '\n'
              '# dfs with pruning\n'
              'infoss = []\n'
              'for i in range(0, 100, 5):\n'
              '    env.reset(i)\n'
              '    infos = []\n'
              '    actions = []\n'
              '    dfs(env, actions, infos, 100, prune=True, max_per_state=3)\n'
              '    infoss.append(infos)\n')

Fragment(uuid='e60f1632-007e-4ed6-851c-afb2b0e6324e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=132,
         depth=0,
         type='function',
         name='dfs',
         text="            if not prune or count['impossible'] < 1:  # only "
              'continue if the current status is possible\n'
              '                dfs(env, actions, infos, time_limit, prune, '
              'max_per_state)\n'
              '            actions.pop()\n'
              '        env.reset(env.idx, board=board.copy(), '
              'status=status.copy(), steps=steps)')

Fragment(uuid='ff90662d-df2c-4b38-8677-81311971cac8',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=138,
         depth=0,
         type='variable',
         name='infoss',
         text='infoss = []')

Fragment(uuid='d3969086-74dc-45b7-bc7b-e6621cbf4289',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=141,
         depth=0,
         type='notebook',
         name='',
         text='end(info)\\n",\n'
              '    "    return infos"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "attachments": {},\n'
              '   "cell_type": "markdown",\n'
              '   "metadata": {},\n'
              '   "source": [\n'
              '    "# DFS"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": [\n'
              ' ')

Fragment(uuid='b941e890-60e3-4880-9982-bb01fff1506f',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=141,
         depth=2,
         type='variable',
         name='infos',
         text='infos = []')

Fragment(uuid='52f1f059-5a35-4485-9d2d-9c8f3623a591',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=142,
         depth=2,
         type='variable',
         name='actions',
         text='actions = []')

Fragment(uuid='1fcdd0c1-150a-4469-b603-df5225b311da',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=145,
         depth=0,
         type='notebook_code',
         name='',
         text="    with open('logs/crosswords/infoss_dfs_prune.json', 'w') as "
              'fout:\n'
              '        json.dump(infoss, fout)\n'
              '\n'
              '# dfs without pruning\n'
              'infoss = []\n'
              'for i in range(0, 100, 5):\n'
              '    env.reset(i)\n'
              '    infos = []\n'
              '    actions = []\n'
              '    dfs(env, actions, infos, 100, prune=False, '
              'max_per_state=3)\n'
              '    infoss.append(infos)\n')

Fragment(uuid='08924a8a-dc0c-469f-be37-4099eef28fa4',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=149,
         depth=0,
         type='variable',
         name='infoss',
         text='infoss = []')

Fragment(uuid='004d053f-d264-43d1-9ec8-23b3bd17fe5e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=152,
         depth=2,
         type='variable',
         name='infos',
         text='infos = []')

Fragment(uuid='9777704d-2454-4512-bb0d-125fa528d08d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=153,
         depth=2,
         type='variable',
         name='actions',
         text='actions = []')

Fragment(uuid='0c3dbb6f-8f3b-4b34-b6ed-742bcf89c1dc',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=156,
         depth=0,
         type='notebook_code',
         name='',
         text="    with open('logs/crosswords/infoss_dfs_no_prune.json', 'w') "
              'as fout:\n'
              '        json.dump(infoss, fout)')

Fragment(uuid='1f6256e2-78de-4ba4-8a39-00a1b521ab15',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=159,
         depth=0,
         type='notebook',
         name='',
         text='   "def dfs(env, actions, infos, time_limit, prune, '
              'max_per_state):\\n",\n'
              '    "    # get candidate thoughts\\n",\n'
              '    "    candidates_to_scores = '
              'get_candidates_to_scores(env)\\n",\n'
              '    "    if len(candidates_to_scores) == 0: return 0, [], '
              '[]\\n",\n'
              '    "    print(sorted(can')

Fragment(uuid='c608f12c-6dcd-4a60-9684-709b72ed8e44',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=163,
         depth=0,
         type='notebook',
         name='',
         text='didates_to_scores.items(), key=lambda x: x[1], '
              'reverse=True))\\n",\n'
              '    "\\n",\n'
              '    "    # back up current state\\n",\n'
              '    "    board, status, steps = env.board.copy(), '
              'env.status.copy(), env.steps\\n",\n'
              '    "\\n",\n'
              '    "    # try each candidate\\n",\n'
              '    "    cnt_per_state = ')

Fragment(uuid='01880f60-e086-4862-81da-c6f11baaf750',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=169,
         depth=0,
         type='notebook',
         name='',
         text='0\\n",\n'
              '    "    for action in sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True):\\n",\n'
              '    "        obs, r, done, info = env.step(action)\\n",\n'
              '    "        r = info[\'r_word\']\\n",\n'
              '    "        if len(infos) < time_limit and env.steps < 10 and '
              'not a')

Fragment(uuid='3615dd98-fca7-4ad6-b451-f1e97fdfc981',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=173,
         depth=0,
         type='notebook',
         name='',
         text='ny(_ == 2 for _ in env.status):  # not violating any existing '
              'constraints\\n",\n'
              '    "            cnt_per_state += 1\\n",\n'
              '    "            if cnt_per_state > max_per_state: break\\n",\n'
              '    "            count = env.prompt_status()       \\n",\n'
              '    "            actions.append(action)  \\n",\n'
              '    "\\n",\n'
              '    "            print(len(infos))\\n",\n'
              '    "            print(actions)\\n",\n'
              '    "            print(env.render_board())\\n",\n'
              '    "            print(info)\\n",\n'
              '    "            print(count)\\n",\n'
              '    "            if infos:\\n",\n'
              '    "                ')

Fragment(uuid='98870be2-624b-4867-a9ad-90249b45d42a',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=185,
         depth=0,
         type='notebook',
         name='',
         text='best = max(infos, key=lambda x: x[\'info\'][\'r_word\'])\\n",\n'
              '    "                print(\'best\', best)\\n",\n'
              '    "            print(\'--------------\')\\n",\n'
              '    "            print()\\n",\n'
              '    "\\n",\n'
              '    "            info = {\'total_step\': len(infos), '
              "'env_step': env.steps, 'actions': actions.copy(), 'info': info, "
              '\'count\': count}\\n",\n'
              '    "            infos.append(info)\\n",\n'
              '    "            if not prune or count[\'impossible\'] < 1:  # '
              'only continue if the current status is possible\\n",\n'
              '    "                dfs(env, actions, infos, time_limit,')

Fragment(uuid='8a947f3e-e30e-4466-a349-742a617e8a03',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=193,
         depth=0,
         type='notebook',
         name='',
         text=' prune, max_per_state)\\n",\n'
              '    "            actions.pop()\\n",\n'
              '    "        env.reset(env.idx, board=board.copy(), '
              'status=status.copy(), steps=steps)"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": ')

Fragment(uuid='fd1fc382-a8b4-4108-b8ef-59dbbd3c5404',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=203,
         depth=0,
         type='notebook',
         name='',
         text='[\n'
              '    "# dfs with pruning\\n",\n'
              '    "infoss = []\\n",\n'
              '    "for i in range(0, 100, 5):\\n",\n'
              '    "    env.reset(i)\\n",\n'
              '    "    infos = []\\n",\n'
              '    "    actions = []\\n",\n'
              '    "    dfs(env, actions, infos, 100, prune=True, '
              'max_per_state=3)\\n",\n'
              '    "    infoss.append(infos)\\n')

Fragment(uuid='10491a5c-4778-4641-b4cf-169cbab33649',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=211,
         depth=0,
         type='notebook',
         name='',
         text='",\n'
              '    "    with open(\'logs/crosswords/infoss_dfs_prune.json\', '
              '\'w\') as fout:\\n",\n'
              '    "        json.dump(infoss, fout)"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": [\n'
              '    "# dfs without pruning\\n')

Fragment(uuid='7bdda290-e36d-4b82-a575-9b32393de6b9',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=222,
         depth=0,
         type='notebook',
         name='',
         text='",\n'
              '    "infoss = []\\n",\n'
              '    "for i in range(0, 100, 5):\\n",\n'
              '    "    env.reset(i)\\n",\n'
              '    "    infos = []\\n",\n'
              '    "    actions = []\\n",\n'
              '    "    dfs(env, actions, infos, 100, prune=False, '
              'max_per_state=3)\\n",\n'
              '    "    infoss.append(infos)\\n",\n'
              '    "    with open(\'log')

Fragment(uuid='10238b1f-ef62-488f-a676-01da188eab3f',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=230,
         depth=0,
         type='notebook',
         name='',
         text='s/crosswords/infoss_dfs_no_prune.json\', \'w\') as fout:\\n",\n'
              '    "        json.dump(infoss, fout)"\n'
              '   ]\n'
              '  }\n'
              ' ],\n'
              ' "metadata": {\n'
              '  "kernelspec": {\n'
              '   "display_name": "Python 3",\n'
              '   "language": "python",\n'
              '   "name": "python3"\n'
              '  },\n'
              '  "language_info": {\n'
              '   "codemirror_mode":')

Fragment(uuid='31a2e381-6506-4852-b371-69654a3d41ee',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=242,
         depth=0,
         type='notebook',
         name='',
         text=' {\n'
              '    "name": "ipython",\n'
              '    "version": 3\n'
              '   },\n'
              '   "file_extension": ".py",\n'
              '   "mimetype": "text/x-python",\n'
              '   "name": "python",\n'
              '   "nbconvert_exporter": "python",\n'
              '   "pygments_lexer": "ipython3",\n'
              '   "version": "3.7.4"\n'
              '  }\n'
              ' },\n'
              ' "nbformat": 4,\n'
              ' "nbformat_minor": 2\n'
              '}')

Fragment(uuid='37c71f36-1815-45d2-a932-e122e8cf7d6d',
         path='/scripts/crosswords/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task crosswords \\\n'
              '    --task_file_path mini0505_0_100_5.json \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 20 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample standard \\\n'
              '    --n_generate_sample 10 ')

Fragment(uuid='c65923cf-be08-408c-a5d3-5b9af507e1e1',
         path='/scripts/crosswords/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/crosswords/standard_sampling.sh\n')

Fragment(uuid='18d6283f-28c5-40d1-bdff-0655c02c8a74',
         path='/scripts/game24/bfs.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task game24 \\\n'
              '    --task_file_path 24.csv \\\n'
              '    --task_start_index 900 \\\n'
              '    --task_end_index 1000 \\\n'
              '    --method_generate propose \\\n'
              '    --method_evaluate value \\\n'
              '    --method_select greedy \\\n'
              '    --n_evaluate_sample 3 \\\n'
              '    --n_select_sample 5 \\\n'
              '    ${@}\n')

Fragment(uuid='6c9dbe59-fd23-40f6-8b96-f09967aa38ad',
         path='/scripts/game24/bfs.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/game24/bfs.sh\n')

Fragment(uuid='6a7f4418-266b-40b9-a419-478db9f1984c',
         path='/scripts/game24/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task game24 \\\n'
              '    --task_file_path 24.csv \\\n'
              '    --task_start_index 900 \\\n'
              '    --task_end_index 1000 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample cot \\\n'
              '    --n_generate_sample 100 \\\n'
              '    ${@}')

Fragment(uuid='804b7b0a-6e7f-4cbc-a01a-d2db59041b15',
         path='/scripts/game24/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/game24/cot_sampling.sh\n')

Fragment(uuid='f8c6d97b-4316-4a0d-a215-d41197934c21',
         path='/scripts/game24/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task game24 \\\n'
              '    --task_file_path 24.csv \\\n'
              '    --task_start_index 900 \\\n'
              '    --task_end_index 1000 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample standard \\\n'
              '    --n_generate_sample 100 \\\n'
              '    ${@}')

Fragment(uuid='2f5db949-cf62-48cf-b939-00126e5b1227',
         path='/scripts/game24/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/game24/standard_sampling.sh\n')

Fragment(uuid='700b1612-c859-4ef4-b903-1ffcc3016f72',
         path='/scripts/text/bfs.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task text \\\n'
              '    --task_file_path data_100_random_text.txt \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 1 \\\n'
              '    --method_generate sample \\\n'
              '    --method_evaluate vote \\\n'
              '    --method_select greedy \\\n'
              '    --n_generate_sample 5 \\\n'
              '    --n_evaluate_sample 5 \\\n'
              '    --n_select_sample 1 \\\n'
              '    --prompt_sample cot \\\n'
              '    --temperature 1.0 \\\n'
              '    ${@}\n'
              '\n'
              '\n'
              '# 0.3 dollars per line ->  30 dollars for 100 lines')

Fragment(uuid='d09d75cd-e025-4f05-ab42-8be312e57749',
         path='/scripts/text/bfs.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/text/bfs.sh\n')

Fragment(uuid='d3e72b32-d01f-46b6-b1ac-550fe3d0eb95',
         path='/scripts/text/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task text \\\n'
              '    --task_file_path data_100_random_text.txt \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 1 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample cot \\\n'
              '    --n_generate_sample 10 \\\n'
              '    --temperature 1.0 \\\n'
              '    ${@}\n'
              '\n'
              '# 0.03 dollars per line ->  3 dollars for 100 lines?')

Fragment(uuid='31a22003-4e56-4d95-9a47-f98676a518f0',
         path='/scripts/text/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/text/cot_sampling.sh\n')

Fragment(uuid='f127f532-e0eb-4981-8540-050c568af34e',
         path='/scripts/text/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task text \\\n'
              '    --task_file_path data_100_random_text.txt \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 1 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample standard \\\n'
              '    --n_generate_sample 10 \\\n'
              '    --temperature 1.0 \\\n'
              '    ${@}\n'
              '\n'
              '\n'
              '# 0.03 dollars per line ->  3 dollars for 100 lines?')

Fragment(uuid='f5137714-2c5b-43e4-b55d-bcb1dcaa4f8c',
         path='/scripts/text/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/text/standard_sampling.sh\n')

Fragment(uuid='cf3f5514-8529-495c-8ef6-46b1aa8b918d',
         path='/tasks/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='def get_task(name, file=None):\n'
              "    if name == 'game24':\n"
              '        from .game24 import Game24Task\n'
              '        return Game24Task(file)\n'
              "    elif name == 'text':\n"
              '        from .text import TextTask\n'
              '        return TextTask(file)\n'
              "    elif name == 'crosswords':\n"
              '        from .crosswords import MiniCrosswordsTask\n'
              '        return MiniCrosswordsTask(file)\n'
              '    else:\n'
              '        raise NotImplementedError')

Fragment(uuid='71366002-0d3a-4156-aaa2-b24a5bafb1be',
         path='/tasks/__init__.py',
         lineno=1,
         depth=0,
         type='function',
         name='get_task',
         text='def get_task(name, file=None):\n'
              "    if name == 'game24':\n"
              '        from .game24 import Game24Task\n'
              '        return Game24Task(file)\n'
              "    elif name == 'text':\n"
              '        from .text import TextTask\n'
              '        return TextTask(file)\n'
              "    elif name == 'crosswords':\n"
              '        from .crosswords import MiniCrosswordsTask\n'
              '        return MiniCrosswordsTask(file)\n'
              '    else:\n'
              '        raise NotImplementedError')

Fragment(uuid='69148e76-07fe-46c5-8f07-a345991ab340',
         path='/tasks/__init__.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tasks/__init__.py\n'
              '  Functions: get_task\n'
              '  Usages: Game24Task MiniCrosswordsTask NotImplementedError '
              'TextTask crosswords file game24 name text\n')

Fragment(uuid='24d1c5f4-de33-48c9-a9e2-2e9bad131003',
         path='/tasks/__init__.py',
         lineno=3,
         depth=4,
         type='dependency',
         name='',
         text='from .game24 import Game24Task')

Fragment(uuid='b2d66ccd-c2e9-4dd9-9556-d829ae9d26bc',
         path='/tasks/__init__.py',
         lineno=6,
         depth=5,
         type='dependency',
         name='',
         text='from .text import TextTask')

Fragment(uuid='f32e1a5d-ab7e-40c0-9b04-65fa5149cd96',
         path='/tasks/__init__.py',
         lineno=9,
         depth=5,
         type='dependency',
         name='',
         text='from .crosswords import MiniCrosswordsTask')

Fragment(uuid='df4ec097-c666-44b0-971b-6b417d26faef',
         path='/tasks/base.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text="DATA_PATH = './data'\n"
              '\n'
              'class Task:\n'
              '    def __init__(self):\n'
              '        pass\n'
              '\n'
              '    def __len__(self) -> int:\n'
              '        pass\n'
              '\n'
              '    def get_input(self, idx: int) -> str:\n'
              '        pass\n'
              '\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        pass')

Fragment(uuid='11ec8c42-38c2-4881-8af7-399c9381fea1',
         path='/tasks/base.py',
         lineno=1,
         depth=0,
         type='variable',
         name='DATA_PATH',
         text="DATA_PATH = './data'")

Fragment(uuid='bf7df185-b39e-4537-9f8b-f96b51c97a10',
         path='/tasks/base.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tasks/base.py\n'
              '  Classes: Task\n'
              '  Methods: __init__ __len__ get_input test_output\n'
              '  Variables: DATA_PATH\n'
              '  Usages: idx int output self str\n')

Fragment(uuid='a9c0be7a-53a0-4881-8fb5-d31e7ac2918e',
         path='/tasks/base.py',
         lineno=3,
         depth=0,
         type='class',
         name='Task',
         text='class Task:\n'
              '    def __init__(self):\n'
              '        pass\n'
              '\n'
              '    def __len__(self) -> int:\n'
              '        pass\n'
              '\n'
              '    def get_input(self, idx: int) -> str:\n'
              '        pass\n'
              '\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        pass')

Fragment(uuid='e7ccf79e-bcd0-4747-8e39-6a4542c6aad4',
         path='/tasks/base.py',
         lineno=4,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self):\n        pass')

Fragment(uuid='1a9c5c6e-e6fd-4e3c-a7d0-c48106e68607',
         path='/tasks/base.py',
         lineno=7,
         depth=2,
         type='function',
         name='__len__',
         text='def __len__(self) -> int:\n        pass')

Fragment(uuid='d87c9cb9-c1c6-498f-a2ee-1e661cd67ba6',
         path='/tasks/base.py',
         lineno=10,
         depth=2,
         type='function',
         name='get_input',
         text='def get_input(self, idx: int) -> str:\n        pass')

Fragment(uuid='33468c51-09ec-49f9-a3af-8b352485d185',
         path='/tasks/base.py',
         lineno=13,
         depth=2,
         type='function',
         name='test_output',
         text='def test_output(self, idx: int, output: str):\n        pass')

Fragment(uuid='e96ab1b1-2055-4e23-95d5-f59e7d7e67de',
         path='/tasks/crosswords.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import re\n'
              'import json\n'
              'import os\n'
              'from tasks.base import Task, DATA_PATH\n'
              'from prompts.crosswords import * \n'
              'from models import gpt\n')

Fragment(uuid='f120fa91-3b44-4f40-b0e6-1bddadf4cf7e',
         path='/tasks/crosswords.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import re')

Fragment(uuid='6a49541a-fbdb-4390-8057-3628069e530c',
         path='/tasks/crosswords.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tasks/crosswords.py\n'
              '  Classes: MiniCrosswordsEnv MiniCrosswordsTask\n'
              '  Methods: __init__ __len__ cot_prompt_wrap evaluate get_ans '
              'get_input prompt_status propose_outputs_unwrap '
              'propose_prompt_wrap render render_ans render_board render_clues '
              'render_gt_ans render_gt_board reset set_status '
              'standard_prompt_wrap step test_output\n'
              '  Variables: action ans ans[i+5] ans[i] confidence_to_value '
              "count idx info info['r'] letters line lines match output parts "
              'pattern pos, prompt proposal proposals proposals_to_scores '
              'proposals_to_scores[proposal] r_all r_letter r_word res score '
              'self.ans self.ans_gt self.board self.board[idx*5:(idx+1)*5] '
              'self.board[idx::5] self.cache self.cache_proposals '
              'self.cache_proposals[(x, self.data, self.env self.file self.idx '
              'self.n self.new_ans self.prompt_status_cache '
              'self.prompt_status_cache[prompt] self.status self.status[idx] '
              'self.steps self.times self.xs word\n'
              '  Usages: DATA_PATH Task ans_gt any append base board board_gt '
              'cache cache_proposals cot_prompt crosswords data enumerate env '
              'file format get gpt group index input int items join json key '
              'len letter list load lower models n_evaluate_sample '
              'n_max_propose new_ans new_letter open outputs pos print '
              'prompt_status_cache prompts propose_prompt range reverse self '
              'sorted split standard_prompt startswith staticmethod status '
              'steps str strip sum super tasks times upper value_prompt zip\n')

Fragment(uuid='59eb897c-89a3-4b9f-9456-9171f8ca819e',
         path='/tasks/crosswords.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import json')

Fragment(uuid='b411366d-afe8-4885-b768-2f520c3412a8',
         path='/tasks/crosswords.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='e1c667f8-010b-4576-81c2-50f696ad04e3',
         path='/tasks/crosswords.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from tasks.base import Task, DATA_PATH')

Fragment(uuid='8a6f911d-a440-4fe1-9beb-d4617e562bf5',
         path='/tasks/crosswords.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='from prompts.crosswords import *')

Fragment(uuid='e6f10db3-2db1-46c2-8a3e-6d612b880923',
         path='/tasks/crosswords.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from models import gpt')

Fragment(uuid='64e98567-9d55-4e88-ad46-bee41faec831',
         path='/tasks/crosswords.py',
         lineno=7,
         depth=0,
         type='module',
         name='',
         text='\nclass MiniCrosswordsEnv:\n')

Fragment(uuid='688782de-e798-447f-8725-d8d520533fca',
         path='/tasks/crosswords.py',
         lineno=8,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='class MiniCrosswordsEnv:\n')

Fragment(uuid='e7f82b72-023c-46c3-9a3e-fe0d0e055685',
         path='/tasks/crosswords.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text="    def __init__(self, file='mini0505.json'):\n"
              "        self.file = f'data/crosswords/{file}'\n"
              '        self.file = json.load(open(self.file))\n'
              '        self.n = len(self.file)\n'
              '        self.cache = {}\n'
              '        self.idx = None\n'
              '        self.times = 0\n'
              '        self.prompt_status_cache = {}\n')

Fragment(uuid='4be8114d-75e5-4e5a-aadb-0cec28cb18af',
         path='/tasks/crosswords.py',
         lineno=9,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text="    def __init__(self, file='mini0505.json'):\n"
              "        self.file = f'data/crosswords/{file}'\n"
              '        self.file = json.load(open(self.file))\n'
              '        self.n = len(self.file)\n'
              '        self.cache = {}\n'
              '        self.idx = None\n'
              '        self.times = 0\n'
              '        self.prompt_status_cache = {}\n')

Fragment(uuid='90b87ded-2575-4d67-b562-da1a1534f85b',
         path='/tasks/crosswords.py',
         lineno=9,
         depth=2,
         type='function',
         name='__init__',
         text="def __init__(self, file='mini0505.json'):\n"
              "        self.file = f'data/crosswords/{file}'\n"
              '        self.file = json.load(open(self.file))\n'
              '        self.n = len(self.file)\n'
              '        self.cache = {}\n'
              '        self.idx = None\n'
              '        self.times = 0\n'
              '        self.prompt_status_cache = {}')

Fragment(uuid='00bbd38b-0c11-4ba7-88c9-9f6d9f7a8e63',
         path='/tasks/crosswords.py',
         lineno=10,
         depth=4,
         type='variable',
         name='self.file',
         text="self.file = f'data/crosswords/{file}'")

Fragment(uuid='c3b1abc4-abc4-4361-b0c4-87001d4d0ab4',
         path='/tasks/crosswords.py',
         lineno=11,
         depth=4,
         type='variable',
         name='self.file',
         text='self.file = json.load(open(self.file))')

Fragment(uuid='4755f7b5-6591-4238-bb05-2f2a3bc9dd95',
         path='/tasks/crosswords.py',
         lineno=12,
         depth=4,
         type='variable',
         name='self.n',
         text='self.n = len(self.file)')

Fragment(uuid='ba2c0b21-0f21-4910-9fc9-4c870f451d00',
         path='/tasks/crosswords.py',
         lineno=13,
         depth=4,
         type='variable',
         name='self.cache',
         text='self.cache = {}')

Fragment(uuid='7d456ec7-4cc7-4f7b-8e04-d9338bb6fcab',
         path='/tasks/crosswords.py',
         lineno=14,
         depth=4,
         type='variable',
         name='self.idx',
         text='self.idx = None')

Fragment(uuid='01616c23-d983-433f-8127-93567e208801',
         path='/tasks/crosswords.py',
         lineno=15,
         depth=4,
         type='variable',
         name='self.times',
         text='self.times = 0')

Fragment(uuid='999c4bfb-a492-44c0-bd23-42665564dc59',
         path='/tasks/crosswords.py',
         lineno=16,
         depth=4,
         type='variable',
         name='self.prompt_status_cache',
         text='self.prompt_status_cache = {}')

Fragment(uuid='90eafe3b-5dd1-4ded-ade0-99480928b4c5',
         path='/tasks/crosswords.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='\n    def __len__(self):\n        return self.n\n')

Fragment(uuid='834ea333-cca0-4243-8295-27c3aba15674',
         path='/tasks/crosswords.py',
         lineno=17,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='\n    def __len__(self):\n        return self.n\n')

Fragment(uuid='01a6850a-a4da-4ac9-80a9-97bdcf780c35',
         path='/tasks/crosswords.py',
         lineno=18,
         depth=2,
         type='function',
         name='__len__',
         text='def __len__(self):\n        return self.n')

Fragment(uuid='4c6e3a4c-5b91-4266-b7ea-cd4b24b51cf1',
         path='/tasks/crosswords.py',
         lineno=20,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def reset(self, idx, board=None, status=None, steps=None):\n'
              '        self.idx = idx\n'
              '        self.data, self.board_gt = self.file[idx]\n'
              "        self.board = ['_'] * 25\n"
              "        self.ans = ['_____'] * 10\n"
              '        self.ans_gt = self.get_ans(self.board_gt)\n'
              '        self.steps = 0\n'
              '        self.status = [0] * 10  # 0: unfilled; 1: filled; 2: '
              'filled then changed\n')

Fragment(uuid='ce02f604-c5a0-41aa-a280-53592134eca2',
         path='/tasks/crosswords.py',
         lineno=20,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def reset(self, idx, board=None, status=None, steps=None):\n'
              '        self.idx = idx\n'
              '        self.data, self.board_gt = self.file[idx]\n'
              "        self.board = ['_'] * 25\n"
              "        self.ans = ['_____'] * 10\n"
              '        self.ans_gt = self.get_ans(self.board_gt)\n'
              '        self.steps = 0\n'
              '        self.status = [0] * 10  # 0: unfilled; 1: filled; 2: '
              'filled then changed\n')

Fragment(uuid='e32947ba-5a4c-4d79-859a-0baffacf9845',
         path='/tasks/crosswords.py',
         lineno=21,
         depth=2,
         type='function',
         name='reset',
         text='def reset(self, idx, board=None, status=None, steps=None):\n'
              '        self.idx = idx\n'
              '        self.data, self.board_gt = self.file[idx]\n'
              "        self.board = ['_'] * 25\n"
              "        self.ans = ['_____'] * 10\n"
              '        self.ans_gt = self.get_ans(self.board_gt)\n'
              '        self.steps = 0\n'
              '        self.status = [0] * 10  # 0: unfilled; 1: filled; 2: '
              'filled then changed\n')

Fragment(uuid='1b0d0f1f-e8fe-4ae4-9e95-399c34dc81c8',
         path='/tasks/crosswords.py',
         lineno=22,
         depth=4,
         type='variable',
         name='self.idx',
         text='self.idx = idx')

Fragment(uuid='e730a089-13c5-43af-bde5-997b635ec85e',
         path='/tasks/crosswords.py',
         lineno=23,
         depth=4,
         type='variable',
         name='self.data,',
         text='self.data, self.board_gt = self.file[idx]')

Fragment(uuid='3f2dd49f-3726-45a6-983e-7b428c58e444',
         path='/tasks/crosswords.py',
         lineno=24,
         depth=4,
         type='variable',
         name='self.board',
         text="self.board = ['_'] * 25")

Fragment(uuid='4be90f69-87b1-404c-ba25-a098c3ed4ac0',
         path='/tasks/crosswords.py',
         lineno=25,
         depth=4,
         type='variable',
         name='self.ans',
         text="self.ans = ['_____'] * 10")

Fragment(uuid='e2d2e684-421d-4fcf-9ade-8f91a669cc1d',
         path='/tasks/crosswords.py',
         lineno=26,
         depth=4,
         type='variable',
         name='self.ans_gt',
         text='self.ans_gt = self.get_ans(self.board_gt)')

Fragment(uuid='46313eb6-a3a3-4313-a7a0-aad4313ecf95',
         path='/tasks/crosswords.py',
         lineno=27,
         depth=4,
         type='variable',
         name='self.steps',
         text='self.steps = 0')

Fragment(uuid='9fa39d90-1486-4309-ab74-c27073bc7402',
         path='/tasks/crosswords.py',
         lineno=28,
         depth=4,
         type='variable',
         name='self.status',
         text='self.status = [0] * 10')

Fragment(uuid='90e58eef-c69b-4ee3-ac78-ab46f6309e27',
         path='/tasks/crosswords.py',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text='        if board is not None:\n'
              '            self.board = board\n'
              '            self.ans = self.get_ans(self.board)\n')

Fragment(uuid='3ac65f69-389c-4dc8-86c0-4a229a2bc8fc',
         path='/tasks/crosswords.py',
         lineno=29,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        if board is not None:\n'
              '            self.board = board\n'
              '            self.ans = self.get_ans(self.board)\n')

Fragment(uuid='447b3cb3-c291-4698-8826-f02f0bdec6cb',
         path='/tasks/crosswords.py',
         lineno=29,
         depth=2,
         type='function',
         name='reset',
         text='        if board is not None:\n'
              '            self.board = board\n'
              '            self.ans = self.get_ans(self.board)\n')

Fragment(uuid='31970346-4180-4a8c-8a56-6e8d8fe120e5',
         path='/tasks/crosswords.py',
         lineno=30,
         depth=6,
         type='variable',
         name='self.board',
         text='self.board = board')

Fragment(uuid='28cfbb5a-0370-4476-82af-a4671ede47cb',
         path='/tasks/crosswords.py',
         lineno=31,
         depth=6,
         type='variable',
         name='self.ans',
         text='self.ans = self.get_ans(self.board)')

Fragment(uuid='0a9d0b16-a653-4af8-a3a4-0546aa9dfbff',
         path='/tasks/crosswords.py',
         lineno=32,
         depth=0,
         type='module',
         name='',
         text='        if status is not None:\n'
              '            self.status = status\n')

Fragment(uuid='d9776bbd-915e-47d0-84bb-e6ba58cdeccb',
         path='/tasks/crosswords.py',
         lineno=32,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        if status is not None:\n'
              '            self.status = status\n')

Fragment(uuid='3a56d9e3-c047-4a6d-b4d7-26ab5d34f50c',
         path='/tasks/crosswords.py',
         lineno=32,
         depth=2,
         type='function',
         name='reset',
         text='        if status is not None:\n'
              '            self.status = status\n')

Fragment(uuid='f181c2b6-8574-4ec8-aeda-386011728f58',
         path='/tasks/crosswords.py',
         lineno=33,
         depth=6,
         type='variable',
         name='self.status',
         text='self.status = status')

Fragment(uuid='45fca96c-221e-4e5d-90d7-fde0bc077ac7',
         path='/tasks/crosswords.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='        if steps is not None:\n'
              '            self.steps = steps\n'
              '        return self.render()\n')

Fragment(uuid='4168d085-681e-4d72-ad50-abdef7becd97',
         path='/tasks/crosswords.py',
         lineno=34,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        if steps is not None:\n'
              '            self.steps = steps\n'
              '        return self.render()\n')

Fragment(uuid='c552c844-646b-4777-abf3-d3420f9e426d',
         path='/tasks/crosswords.py',
         lineno=34,
         depth=2,
         type='function',
         name='reset',
         text='        if steps is not None:\n'
              '            self.steps = steps\n'
              '        return self.render()')

Fragment(uuid='25598e1e-a869-43a1-9c85-ca88696f246c',
         path='/tasks/crosswords.py',
         lineno=35,
         depth=6,
         type='variable',
         name='self.steps',
         text='self.steps = steps')

Fragment(uuid='34a90466-e028-4a74-8a2c-f83728c0841a',
         path='/tasks/crosswords.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '\n'
              '    def prompt_status(self):\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='23c45091-febc-481c-b08f-47f3bb74d71c',
         path='/tasks/crosswords.py',
         lineno=37,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '\n'
              '    def prompt_status(self):\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='5c95c941-18bc-47e0-98eb-09c9ee1c1a29',
         path='/tasks/crosswords.py',
         lineno=39,
         depth=2,
         type='function',
         name='prompt_status',
         text='def prompt_status(self):\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='e587d680-8d05-4d57-8402-69901279e552',
         path='/tasks/crosswords.py',
         lineno=40,
         depth=4,
         type='variable',
         name='count',
         text="count = {'sure': 0, 'maybe': 0, 'impossible': 0}")

Fragment(uuid='dfeee75c-9317-468b-9800-f573d8ca1e59',
         path='/tasks/crosswords.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='        for ans, data, status in zip(self.ans, self.data, '
              'self.status):\n'
              '            # if status != 0: continue\n')

Fragment(uuid='818034ad-8324-4c06-90ee-badddf205c36',
         path='/tasks/crosswords.py',
         lineno=41,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        for ans, data, status in zip(self.ans, self.data, '
              'self.status):\n'
              '            # if status != 0: continue\n')

Fragment(uuid='32865e38-fa75-4ccc-8a81-85d9a833e0ab',
         path='/tasks/crosswords.py',
         lineno=41,
         depth=2,
         type='function',
         name='prompt_status',
         text='        for ans, data, status in zip(self.ans, self.data, '
              'self.status):\n'
              '            # if status != 0: continue\n')

Fragment(uuid='60732e10-19e9-4989-b833-2628295f7769',
         path='/tasks/crosswords.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text="            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n')

Fragment(uuid='da80f114-09ba-4e75-b5b6-96690260fa09',
         path='/tasks/crosswords.py',
         lineno=43,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text="            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n')

Fragment(uuid='ca9ac366-daf6-44f6-85c6-abc18a593129',
         path='/tasks/crosswords.py',
         lineno=43,
         depth=2,
         type='function',
         name='prompt_status',
         text="            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n')

Fragment(uuid='cad8f586-4d08-4e30-bcb6-459f471a9ba6',
         path='/tasks/crosswords.py',
         lineno=44,
         depth=6,
         type='variable',
         name='ans',
         text="ans = ' '.join(ans.lower())")

Fragment(uuid='347d502b-e162-4edd-906c-bad96ebf4153',
         path='/tasks/crosswords.py',
         lineno=45,
         depth=6,
         type='variable',
         name='line',
         text="line = f'{data}: {ans}'")

Fragment(uuid='1acdaeec-4471-45be-9239-931bcedd184d',
         path='/tasks/crosswords.py',
         lineno=46,
         depth=6,
         type='variable',
         name='prompt',
         text='prompt = value_prompt.format(input=line)')

Fragment(uuid='81aa289b-2507-4313-bee8-3c97a82cdffb',
         path='/tasks/crosswords.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='            if prompt in self.prompt_status_cache:\n'
              '                res = self.prompt_status_cache[prompt]\n'
              '            else:\n'
              '                res = gpt(prompt)[0]\n'
              '                self.prompt_status_cache[prompt] = res\n'
              '            # print(line)\n'
              '            # print(res)\n'
              '            # print()\n'
              "            res = res.split('\\n')[-1].strip()\n")

Fragment(uuid='bdac53a1-0559-4400-b054-abff7dcdae04',
         path='/tasks/crosswords.py',
         lineno=47,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='            if prompt in self.prompt_status_cache:\n'
              '                res = self.prompt_status_cache[prompt]\n'
              '            else:\n'
              '                res = gpt(prompt)[0]\n'
              '                self.prompt_status_cache[prompt] = res\n'
              '            # print(line)\n'
              '            # print(res)\n'
              '            # print()\n'
              "            res = res.split('\\n')[-1].strip()\n")

Fragment(uuid='85203453-74b1-4936-95e6-4886cff402f0',
         path='/tasks/crosswords.py',
         lineno=47,
         depth=2,
         type='function',
         name='prompt_status',
         text='            if prompt in self.prompt_status_cache:\n'
              '                res = self.prompt_status_cache[prompt]\n'
              '            else:\n'
              '                res = gpt(prompt)[0]\n'
              '                self.prompt_status_cache[prompt] = res\n'
              '            # print(line)\n'
              '            # print(res)\n'
              '            # print()\n'
              "            res = res.split('\\n')[-1].strip()\n")

Fragment(uuid='ab1660b0-46ea-436d-81b6-978096bfeb0b',
         path='/tasks/crosswords.py',
         lineno=48,
         depth=8,
         type='variable',
         name='res',
         text='res = self.prompt_status_cache[prompt]')

Fragment(uuid='4cf90b4b-84b2-4f79-be38-73073636a74b',
         path='/tasks/crosswords.py',
         lineno=50,
         depth=9,
         type='variable',
         name='res',
         text='res = gpt(prompt)[0]')

Fragment(uuid='c81660bc-716b-4867-8eb7-5022353528dd',
         path='/tasks/crosswords.py',
         lineno=51,
         depth=9,
         type='variable',
         name='self.prompt_status_cache[prompt]',
         text='self.prompt_status_cache[prompt] = res')

Fragment(uuid='c389f70b-8ea3-4c04-9ae7-22877ff1157c',
         path='/tasks/crosswords.py',
         lineno=55,
         depth=6,
         type='variable',
         name='res',
         text="res = res.split('\\n')[-1].strip()")

Fragment(uuid='25a7ed5a-4c31-4a2b-9309-7fba7bc97f07',
         path='/tasks/crosswords.py',
         lineno=56,
         depth=0,
         type='module',
         name='',
         text='            if res in count: count[res] += 1\n'
              '        # print(count)\n'
              '        return count\n')

Fragment(uuid='b91be75c-c278-429a-8b47-3dc8dba81d90',
         path='/tasks/crosswords.py',
         lineno=56,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='            if res in count: count[res] += 1\n'
              '        # print(count)\n'
              '        return count\n')

Fragment(uuid='4edcb4ab-403a-4c3e-b48e-5599bdedf375',
         path='/tasks/crosswords.py',
         lineno=56,
         depth=2,
         type='function',
         name='prompt_status',
         text='            if res in count: count[res] += 1\n'
              '        # print(count)\n'
              '        return count')

Fragment(uuid='e3c65948-cea9-4099-999b-a061f47bf03c',
         path='/tasks/crosswords.py',
         lineno=59,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def render_gt_board(self):\n'
              '        s = "GT Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ' '.join(self.board_gt[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(uuid='3056b7a4-19e3-4e6f-8a33-53f7def4d4bb',
         path='/tasks/crosswords.py',
         lineno=59,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def render_gt_board(self):\n'
              '        s = "GT Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ' '.join(self.board_gt[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(uuid='676ac6eb-8e6d-4a80-af30-46dbc1a295d6',
         path='/tasks/crosswords.py',
         lineno=60,
         depth=2,
         type='function',
         name='render_gt_board',
         text='def render_gt_board(self):\n'
              '        s = "GT Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ' '.join(self.board_gt[i*5:(i+1)*5]) + '\\n'\n"
              '        return s')

Fragment(uuid='63b6ea28-6f8e-4ca3-8e10-e5828bb4c0b2',
         path='/tasks/crosswords.py',
         lineno=61,
         depth=4,
         type='variable',
         name='s',
         text='s = "GT Board:\\n"')

Fragment(uuid='92733496-406b-478e-a5c6-6dfe34014cb4',
         path='/tasks/crosswords.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def render_board(self):\n'
              '        s = "Current Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ''.join(self.board[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(uuid='a36f2c92-8426-4293-856a-1edfeab544ad',
         path='/tasks/crosswords.py',
         lineno=65,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def render_board(self):\n'
              '        s = "Current Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ''.join(self.board[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(uuid='cbd2f677-a6fc-4afb-8edf-43158a8530f8',
         path='/tasks/crosswords.py',
         lineno=66,
         depth=2,
         type='function',
         name='render_board',
         text='def render_board(self):\n'
              '        s = "Current Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ''.join(self.board[i*5:(i+1)*5]) + '\\n'\n"
              '        return s')

Fragment(uuid='e8e99018-29cb-470c-8626-d1a6f6aa2f27',
         path='/tasks/crosswords.py',
         lineno=67,
         depth=4,
         type='variable',
         name='s',
         text='s = "Current Board:\\n"')

Fragment(uuid='1e2adc9e-0b36-440d-ad25-2048b46729df',
         path='/tasks/crosswords.py',
         lineno=71,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def render_clues(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        return s\n')

Fragment(uuid='bdf4fc33-d9de-4c51-ae8b-2e96d2622708',
         path='/tasks/crosswords.py',
         lineno=71,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='\n'
              '    def render_clues(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        return s\n')

Fragment(uuid='c47ff0bf-7981-48b3-9790-b4eaa602cd76',
         path='/tasks/crosswords.py',
         lineno=72,
         depth=2,
         type='function',
         name='render_clues',
         text='def render_clues(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        return s')

Fragment(uuid='9ef4939b-5ac3-4b20-b1a0-b4f5e8b0da27',
         path='/tasks/crosswords.py',
         lineno=73,
         depth=4,
         type='variable',
         name='s',
         text='s = ""')

Fragment(uuid='57579904-a5af-4167-ab7a-bd48d75c6a29',
         path='/tasks/crosswords.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def render_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans[i] + '\\n'\n"
              '        return s\n')

Fragment(uuid='6791ac48-eda5-4cb6-9e81-05fabec7ded2',
         path='/tasks/crosswords.py',
         lineno=83,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def render_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans[i] + '\\n'\n"
              '        return s\n')

Fragment(uuid='a91b16e3-9174-48c9-bc71-f52f711a9ff5',
         path='/tasks/crosswords.py',
         lineno=84,
         depth=2,
         type='function',
         name='render_ans',
         text='def render_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans[i] + '\\n'\n"
              '        return s')

Fragment(uuid='0fdfcfe2-e81e-4dde-a683-5c169af1a4c9',
         path='/tasks/crosswords.py',
         lineno=85,
         depth=4,
         type='variable',
         name='s',
         text='s = ""')

Fragment(uuid='75fc8590-e4db-4c79-97b0-bec8a7d3e14e',
         path='/tasks/crosswords.py',
         lineno=95,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def render_gt_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n')

Fragment(uuid='7199b33c-2df0-4b28-aafe-7fb128f1cf8c',
         path='/tasks/crosswords.py',
         lineno=95,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def render_gt_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n')

Fragment(uuid='f5a9e3df-647c-4b29-a8aa-d816572dc2f0',
         path='/tasks/crosswords.py',
         lineno=96,
         depth=2,
         type='function',
         name='render_gt_ans',
         text='def render_gt_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans_gt[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans_gt[i] + '\\n'\n"
              '        return s')

Fragment(uuid='0a4ab66f-6c3e-467f-859d-5580bbeadce7',
         path='/tasks/crosswords.py',
         lineno=97,
         depth=4,
         type='variable',
         name='s',
         text='s = ""')

Fragment(uuid='5c680651-5cc7-4282-b668-69bea6086268',
         path='/tasks/crosswords.py',
         lineno=99,
         depth=0,
         type='module',
         name='',
         text='        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans_gt[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n')

Fragment(uuid='7d24cf26-1f11-474b-9f33-dfcdcd0c9b1e',
         path='/tasks/crosswords.py',
         lineno=99,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans_gt[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n')

Fragment(uuid='0796f40d-a61a-4a26-97f0-c139f187c7f6',
         path='/tasks/crosswords.py',
         lineno=103,
         depth=0,
         type='module',
         name='',
         text='        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans_gt[i] + '\\n'\n"
              '        return s\n')

Fragment(uuid='43cd4382-e5cb-4e60-b0cc-41fb6337ff71',
         path='/tasks/crosswords.py',
         lineno=103,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans_gt[i] + '\\n'\n"
              '        return s\n')

Fragment(uuid='da65f474-a41e-47e7-9315-3f7c68759c38',
         path='/tasks/crosswords.py',
         lineno=107,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def render(self, status=True):\n'
              '        if status:\n'
              "            return self.render_board() + '\\nUnfilled:\\n' + "
              "self.render_ans(status=0) + '\\nFilled:\\n' + "
              "self.render_ans(status=1) + '\\nChanged:\\n' + "
              'self.render_ans(status=2)\n'
              '        else:\n'
              "            return self.render_board() + '\\n' + "
              'self.render_ans()\n')

Fragment(uuid='b7783323-72e3-42ee-9785-2e8cb8bdcdf6',
         path='/tasks/crosswords.py',
         lineno=107,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='\n'
              '    def render(self, status=True):\n'
              '        if status:\n'
              "            return self.render_board() + '\\nUnfilled:\\n' + "
              "self.render_ans(status=0) + '\\nFilled:\\n' + "
              "self.render_ans(status=1) + '\\nChanged:\\n' + "
              'self.render_ans(status=2)\n'
              '        else:\n'
              "            return self.render_board() + '\\n' + "
              'self.render_ans()\n')

Fragment(uuid='3345186a-0d88-4c8a-aadb-c54bfa45bd39',
         path='/tasks/crosswords.py',
         lineno=108,
         depth=2,
         type='function',
         name='render',
         text='def render(self, status=True):\n'
              '        if status:\n'
              "            return self.render_board() + '\\nUnfilled:\\n' + "
              "self.render_ans(status=0) + '\\nFilled:\\n' + "
              "self.render_ans(status=1) + '\\nChanged:\\n' + "
              'self.render_ans(status=2)\n'
              '        else:\n'
              "            return self.render_board() + '\\n' + "
              'self.render_ans()')

Fragment(uuid='080e1ca9-3ad2-47e8-9283-1e5972653793',
         path='/tasks/crosswords.py',
         lineno=113,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def get_ans(self, board):\n'
              "        ans = [''] * 10\n"
              '        for i in range(5):\n'
              "            ans[i] = ''.join(board[i*5:(i+1)*5])\n"
              '        for i in range(5):\n'
              "            ans[i+5] = ''.join(board[i::5])\n"
              '        return ans\n')

Fragment(uuid='d05b04cd-b7ce-4b77-a274-b03a0a1e9fe0',
         path='/tasks/crosswords.py',
         lineno=113,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def get_ans(self, board):\n'
              "        ans = [''] * 10\n"
              '        for i in range(5):\n'
              "            ans[i] = ''.join(board[i*5:(i+1)*5])\n"
              '        for i in range(5):\n'
              "            ans[i+5] = ''.join(board[i::5])\n"
              '        return ans\n')

Fragment(uuid='3e1eb32c-b270-46cf-87d7-154a944135dd',
         path='/tasks/crosswords.py',
         lineno=114,
         depth=2,
         type='function',
         name='get_ans',
         text='def get_ans(self, board):\n'
              "        ans = [''] * 10\n"
              '        for i in range(5):\n'
              "            ans[i] = ''.join(board[i*5:(i+1)*5])\n"
              '        for i in range(5):\n'
              "            ans[i+5] = ''.join(board[i::5])\n"
              '        return ans')

Fragment(uuid='6183c4b0-ac13-4ef9-a782-ee9f7e632530',
         path='/tasks/crosswords.py',
         lineno=115,
         depth=4,
         type='variable',
         name='ans',
         text="ans = [''] * 10")

Fragment(uuid='dc3cccca-c374-4d70-9631-645cbda16e88',
         path='/tasks/crosswords.py',
         lineno=117,
         depth=6,
         type='variable',
         name='ans[i]',
         text="ans[i] = ''.join(board[i*5:(i+1)*5])")

Fragment(uuid='33c9f564-4ad5-47ae-9027-449139572dde',
         path='/tasks/crosswords.py',
         lineno=119,
         depth=6,
         type='variable',
         name='ans[i+5]',
         text="ans[i+5] = ''.join(board[i::5])")

Fragment(uuid='e851982a-2fb4-455d-9812-be2208e81f7f',
         path='/tasks/crosswords.py',
         lineno=121,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def step(self, action):\n'
              '        self.steps += 1\n'
              "        action = action.split('\\n')[-1]\n"
              "        action = action.split('. ')\n")

Fragment(uuid='2ff4b073-f6d3-4e6d-ac1b-d6e283eb78c4',
         path='/tasks/crosswords.py',
         lineno=121,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def step(self, action):\n'
              '        self.steps += 1\n'
              "        action = action.split('\\n')[-1]\n"
              "        action = action.split('. ')\n")

Fragment(uuid='e313eb88-d655-459a-9702-733ec93133d9',
         path='/tasks/crosswords.py',
         lineno=122,
         depth=2,
         type='function',
         name='step',
         text='def step(self, action):\n'
              '        self.steps += 1\n'
              "        action = action.split('\\n')[-1]\n"
              "        action = action.split('. ')\n")

Fragment(uuid='6b7f159a-80bd-4966-99e3-37686e5a1131',
         path='/tasks/crosswords.py',
         lineno=124,
         depth=4,
         type='variable',
         name='action',
         text="action = action.split('\\n')[-1]")

Fragment(uuid='fda6c09a-003e-4164-9535-17f34ae6bbff',
         path='/tasks/crosswords.py',
         lineno=125,
         depth=4,
         type='variable',
         name='action',
         text="action = action.split('. ')")

Fragment(uuid='c641aff8-023a-41d4-b6f3-017941117630',
         path='/tasks/crosswords.py',
         lineno=126,
         depth=0,
         type='module',
         name='',
         text='        if len(action) != 2:\n'
              '            return \'Invalid! Format should be like "h1. '
              'apple"\', 0, False, {}\n'
              '        pos, word = action\n')

Fragment(uuid='bfc5d736-7fc4-40d8-928d-bd634e08dc61',
         path='/tasks/crosswords.py',
         lineno=126,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        if len(action) != 2:\n'
              '            return \'Invalid! Format should be like "h1. '
              'apple"\', 0, False, {}\n'
              '        pos, word = action\n')

Fragment(uuid='97315e5b-56e0-4598-8f24-0f85bd91f296',
         path='/tasks/crosswords.py',
         lineno=126,
         depth=2,
         type='function',
         name='step',
         text='        if len(action) != 2:\n'
              '            return \'Invalid! Format should be like "h1. '
              'apple"\', 0, False, {}\n'
              '        pos, word = action\n')

Fragment(uuid='488b1287-8302-4427-a753-79da4fe07a62',
         path='/tasks/crosswords.py',
         lineno=128,
         depth=4,
         type='variable',
         name='pos,',
         text='pos, word = action')

Fragment(uuid='8de37bd4-e1ca-4f57-81ca-ef96d9030cc7',
         path='/tasks/crosswords.py',
         lineno=129,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        if len(word) != 5:\n'
              "            return 'Invalid! Word should have 5 letters.', 0, "
              'False, {}\n')

Fragment(uuid='6a96be87-6aba-42a1-9006-aa29838ec082',
         path='/tasks/crosswords.py',
         lineno=129,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='\n'
              '        if len(word) != 5:\n'
              "            return 'Invalid! Word should have 5 letters.', 0, "
              'False, {}\n')

Fragment(uuid='df6328db-5d33-4b14-b3da-8c9bfcd9a8de',
         path='/tasks/crosswords.py',
         lineno=129,
         depth=2,
         type='function',
         name='step',
         text='\n'
              '        if len(word) != 5:\n'
              "            return 'Invalid! Word should have 5 letters.', 0, "
              'False, {}\n')

Fragment(uuid='73f04c77-f11d-464b-9311-e67f0b4be2b3',
         path='/tasks/crosswords.py',
         lineno=132,
         depth=0,
         type='module',
         name='',
         text="        if pos.startswith('h'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx*5:(idx+1)*5] = list(word.upper())\n')

Fragment(uuid='a8998892-1dff-44c9-8b45-86083b83d507',
         path='/tasks/crosswords.py',
         lineno=132,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text="        if pos.startswith('h'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx*5:(idx+1)*5] = list(word.upper())\n')

Fragment(uuid='056c2df1-9347-4b82-84b9-fe90671a52b6',
         path='/tasks/crosswords.py',
         lineno=132,
         depth=2,
         type='function',
         name='step',
         text="        if pos.startswith('h'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx*5:(idx+1)*5] = list(word.upper())\n')

Fragment(uuid='f07be3cd-6643-4580-94fd-dc7ef3dde3cf',
         path='/tasks/crosswords.py',
         lineno=133,
         depth=6,
         type='variable',
         name='idx',
         text='idx = int(pos[1:]) - 1')

Fragment(uuid='78c721da-3914-4d05-ab73-87d7f5adf185',
         path='/tasks/crosswords.py',
         lineno=134,
         depth=6,
         type='variable',
         name='self.board[idx*5:(idx+1)*5]',
         text='self.board[idx*5:(idx+1)*5] = list(word.upper())')

Fragment(uuid='c69a55d9-8964-47ef-b08e-c64de37257a1',
         path='/tasks/crosswords.py',
         lineno=135,
         depth=0,
         type='module',
         name='',
         text="        elif pos.startswith('v'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx::5] = list(word.upper())\n'
              '            idx += 5  # for later status update\n'
              '        else:\n'
              "            return 'Invalid! Position should be h1-h5 or "
              "v1-v5', 0, False, {}\n"
              '        \n'
              '        self.new_ans = self.get_ans(self.board)\n'
              '        # self.status = [2 if (status == 1 and ans != new_ans) '
              'else status for status, ans, new_ans in zip(self.status, '
              'self.ans, self.new_ans)]\n'
              '        self.status = [2 if any(letter != new_letter and le')

Fragment(uuid='a4a53aef-60c3-433a-9c8d-4ec88d0f1e15',
         path='/tasks/crosswords.py',
         lineno=135,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text="        elif pos.startswith('v'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx::5] = list(word.upper())\n'
              '            idx += 5  # for later status update\n'
              '        else:\n'
              "            return 'Invalid! Position should be h1-h5 or "
              "v1-v5', 0, False, {}\n"
              '        \n'
              '        self.new_ans = self.get_ans(self.board)\n'
              '        # self.status = [2 if (status == 1 and ans != new_ans) '
              'else status for status, ans, new_ans in zip(self.status, '
              'self.ans, self.new_ans)]\n'
              '        self.status = [2 if any(letter != new_letter and l')

Fragment(uuid='f1dc7215-98bc-4c72-bd03-a8ed0ad3eace',
         path='/tasks/crosswords.py',
         lineno=135,
         depth=2,
         type='function',
         name='step',
         text="        elif pos.startswith('v'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx::5] = list(word.upper())\n'
              '            idx += 5  # for later status update\n'
              '        else:\n'
              "            return 'Invalid! Position should be h1-h5 or "
              "v1-v5', 0, False, {}\n"
              '        \n'
              '        self.new_ans = self.get_ans(self.board)\n'
              '        # self.status = [2 if (status == 1 and ans != new_ans) '
              'else status for status, ans, new_ans in zip(self.status, '
              'self.ans, self.new_ans)]\n'
              '        self.status = [2 if any(letter != new_letter and l')

Fragment(uuid='86697205-cf73-49ec-b043-fafc9ee3b7c9',
         path='/tasks/crosswords.py',
         lineno=136,
         depth=7,
         type='variable',
         name='idx',
         text='idx = int(pos[1:]) - 1')

Fragment(uuid='d7205eb8-fb52-422f-a812-903b9c7bc1ab',
         path='/tasks/crosswords.py',
         lineno=137,
         depth=7,
         type='variable',
         name='self.board[idx::5]',
         text='self.board[idx::5] = list(word.upper())')

Fragment(uuid='c0fe5087-b94b-4e92-91f2-33728b124a03',
         path='/tasks/crosswords.py',
         lineno=142,
         depth=4,
         type='variable',
         name='self.new_ans',
         text='self.new_ans = self.get_ans(self.board)')

Fragment(uuid='68fc8f66-3e97-46ad-8a0b-a51ce1cbfb9e',
         path='/tasks/crosswords.py',
         lineno=144,
         depth=0,
         type='module',
         name='',
         text="tter != '_' for letter, new_letter in zip(ans, new_ans)) else "
              'status for status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]\n'
              '        self.status[idx] = 1\n'
              '        self.ans = self.new_ans\n'
              '        r_all = (self.board == self.board_gt)\n'
              '        r_lette')

Fragment(uuid='b6b7f865-631e-44e3-b6d1-efc4735fa565',
         path='/tasks/crosswords.py',
         lineno=144,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text="etter != '_' for letter, new_letter in zip(ans, new_ans)) else "
              'status for status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]\n'
              '        self.status[idx] = 1\n'
              '        self.ans = self.new_ans\n'
              '        r_all = (self.board == self.board_gt)\n'
              '        r_lett')

Fragment(uuid='5253154b-0a3a-49fe-9186-3209bcd47385',
         path='/tasks/crosswords.py',
         lineno=144,
         depth=2,
         type='function',
         name='step',
         text="etter != '_' for letter, new_letter in zip(ans, new_ans)) else "
              'status for status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]\n'
              '        self.status[idx] = 1\n'
              '        self.ans = self.new_ans\n'
              '        r_all = (self.board == self.board_gt)\n'
              '        r_lett')

Fragment(uuid='46ffa200-d0e6-4bcd-9ba7-18bc9eca0100',
         path='/tasks/crosswords.py',
         lineno=144,
         depth=4,
         type='variable',
         name='self.status',
         text="self.status = [2 if any(letter != new_letter and letter != '_' "
              'for letter, new_letter in zip(ans, new_ans)) else status for '
              'status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]')

Fragment(uuid='21348229-26b9-4322-94ca-dc4f4bb80100',
         path='/tasks/crosswords.py',
         lineno=145,
         depth=4,
         type='variable',
         name='self.status[idx]',
         text='self.status[idx] = 1')

Fragment(uuid='c1170e62-6ecc-4323-b369-887fbf0c5731',
         path='/tasks/crosswords.py',
         lineno=146,
         depth=4,
         type='variable',
         name='self.ans',
         text='self.ans = self.new_ans')

Fragment(uuid='be22672a-4eb3-4afa-8a63-44bc685014d9',
         path='/tasks/crosswords.py',
         lineno=147,
         depth=4,
         type='variable',
         name='r_all',
         text='r_all = (self.board == self.board_gt)')

Fragment(uuid='9be21318-36d5-4d2d-92e8-c4cee5ccd3b0',
         path='/tasks/crosswords.py',
         lineno=148,
         depth=0,
         type='module',
         name='',
         text='r = sum(a == b for a, b in zip(self.board, self.board_gt)) / '
              '25\n'
              '        r_word = sum(a == b for a, b in zip(self.ans, '
              'self.ans_gt)) / 10\n'
              '        return self.render(), r_all, (r_all or self.steps >= '
              "20), {'r_letter': r_letter, 'r_word': r_word, 'r_game': r_all}\n")

Fragment(uuid='21b36f2e-2d57-4f60-934a-aa91fbd339ad',
         path='/tasks/crosswords.py',
         lineno=148,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='er = sum(a == b for a, b in zip(self.board, self.board_gt)) / '
              '25\n'
              '        r_word = sum(a == b for a, b in zip(self.ans, '
              'self.ans_gt)) / 10\n'
              '        return self.render(), r_all, (r_all or self.steps >= '
              "20), {'r_letter': r_letter, 'r_word': r_word, 'r_game': r_all}")

Fragment(uuid='005ef61c-7105-4b03-acd6-31a9ea50b869',
         path='/tasks/crosswords.py',
         lineno=148,
         depth=2,
         type='function',
         name='step',
         text='er = sum(a == b for a, b in zip(self.board, self.board_gt)) / '
              '25\n'
              '        r_word = sum(a == b for a, b in zip(self.ans, '
              'self.ans_gt)) / 10\n'
              '        return self.render(), r_all, (r_all or self.steps >= '
              "20), {'r_letter': r_letter, 'r_word': r_word, 'r_game': r_all}")

Fragment(uuid='cf603873-66f6-4646-8424-f010969804eb',
         path='/tasks/crosswords.py',
         lineno=148,
         depth=4,
         type='variable',
         name='r_letter',
         text='r_letter = sum(a == b for a, b in zip(self.board, '
              'self.board_gt)) / 25')

Fragment(uuid='6448f150-da7b-4ab8-9fba-fd41942532ad',
         path='/tasks/crosswords.py',
         lineno=149,
         depth=4,
         type='variable',
         name='r_word',
         text='r_word = sum(a == b for a, b in zip(self.ans, self.ans_gt)) / 10')

Fragment(uuid='8295cf49-f903-4da0-91af-1c2c73331d2f',
         path='/tasks/crosswords.py',
         lineno=151,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class MiniCrosswordsTask(Task):\n'
              '    """\n'
              '    Input (x)   : Decription of a 5x5 mini crossword\n'
              '    Output (y)  : List of 10 words to fill in the crossword\n'
              '    Reward (r)  : word level and game level\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(uuid='8ae126bb-5c3a-4c45-94f5-eb5e79027f89',
         path='/tasks/crosswords.py',
         lineno=153,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='class MiniCrosswordsTask(Task):\n'
              '    """\n'
              '    Input (x)   : Decription of a 5x5 mini crossword\n'
              '    Output (y)  : List of 10 words to fill in the crossword\n'
              '    Reward (r)  : word level and game level\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(uuid='40fd8844-cf51-41be-bfae-70b12128733d',
         path='/tasks/crosswords.py',
         lineno=161,
         depth=0,
         type='module',
         name='',
         text='    def __init__(self, file):\n'
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              '        self.env = MiniCrosswordsEnv(file)  # use it as a '
              'stateless tool\n'
              '        self.xs = []\n'
              '        for idx in range(len(self.env)):\n'
              '            self.env.reset(idx)\n'
              '            self.xs.append(self.env.render_clues())\n'
              '        self.steps = 10  # TODO: variable steps??\n'
              '        self.cache_proposals = {}\n')

Fragment(uuid='8672c926-3f7d-4494-aa40-ebf69b7158e1',
         path='/tasks/crosswords.py',
         lineno=161,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    def __init__(self, file):\n'
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              '        self.env = MiniCrosswordsEnv(file)  # use it as a '
              'stateless tool\n'
              '        self.xs = []\n'
              '        for idx in range(len(self.env)):\n'
              '            self.env.reset(idx)\n'
              '            self.xs.append(self.env.render_clues())\n'
              '        self.steps = 10  # TODO: variable steps??\n'
              '        self.cache_proposals = {}\n')

Fragment(uuid='0660e257-6758-43c5-b367-9157d2ab715e',
         path='/tasks/crosswords.py',
         lineno=161,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, file):\n'
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              '        self.env = MiniCrosswordsEnv(file)  # use it as a '
              'stateless tool\n'
              '        self.xs = []\n'
              '        for idx in range(len(self.env)):\n'
              '            self.env.reset(idx)\n'
              '            self.xs.append(self.env.render_clues())\n'
              '        self.steps = 10  # TODO: variable steps??\n'
              '        self.cache_proposals = {}')

Fragment(uuid='509073e7-f7ed-4b01-b16b-3e05a114e946',
         path='/tasks/crosswords.py',
         lineno=166,
         depth=4,
         type='variable',
         name='self.env',
         text='self.env = MiniCrosswordsEnv(file)')

Fragment(uuid='4995053a-c2fb-4a07-bc42-e91e00dbdd21',
         path='/tasks/crosswords.py',
         lineno=167,
         depth=4,
         type='variable',
         name='self.xs',
         text='self.xs = []')

Fragment(uuid='2cf0e448-8451-488e-931c-fff7d5e3bfcc',
         path='/tasks/crosswords.py',
         lineno=171,
         depth=4,
         type='variable',
         name='self.steps',
         text='self.steps = 10')

Fragment(uuid='953aad8e-3c36-4384-94bc-491adebc99be',
         path='/tasks/crosswords.py',
         lineno=172,
         depth=4,
         type='variable',
         name='self.cache_proposals',
         text='self.cache_proposals = {}')

Fragment(uuid='6a1fcfb6-045d-4e39-850d-8e423007a3e0',
         path='/tasks/crosswords.py',
         lineno=173,
         depth=0,
         type='module',
         name='',
         text='\n    def __len__(self) -> int:\n        return len(self.env)\n')

Fragment(uuid='8c84c674-82fc-488c-8787-b9c0515764dc',
         path='/tasks/crosswords.py',
         lineno=173,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='\n    def __len__(self) -> int:\n        return len(self.env)\n')

Fragment(uuid='a626f32b-8d81-4707-a703-66afc035705a',
         path='/tasks/crosswords.py',
         lineno=174,
         depth=2,
         type='function',
         name='__len__',
         text='def __len__(self) -> int:\n        return len(self.env)')

Fragment(uuid='e2da8fc6-c027-4a2d-a36c-0595aa0826b9',
         path='/tasks/crosswords.py',
         lineno=176,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        self.env.reset(idx)\n'
              '        return self.env.render_clues()\n'
              '    \n'
              '    # def test_output(self, idx: int, output: str):  # TODO: '
              'r_word for now\n'
              '    #     self.env.reset(idx)\n'
              "    #     info = {'r_word': 0}\n"
              "    #     for line in output.split('\\n'):\n"
              "    #         if line.startswith('h') or line.startswith('v'):\n"
              '    #             _, _, _, info = self.env.step(line)\n'
              "    #     return info['r_word']\n")

Fragment(uuid='34f7e91a-a453-4dde-90fb-0401269feb29',
         path='/tasks/crosswords.py',
         lineno=176,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        self.env.reset(idx)\n'
              '        return self.env.render_clues()\n'
              '    \n'
              '    # def test_output(self, idx: int, output: str):  # TODO: '
              'r_word for now\n'
              '    #     self.env.reset(idx)\n'
              "    #     info = {'r_word': 0}\n"
              "    #     for line in output.split('\\n'):\n"
              "    #         if line.startswith('h') or line.startswith('v'):\n"
              '    #             _, _, _, info = self.env.step(line)\n'
              "    #     return info['r_word']\n")

Fragment(uuid='3e4d7b6c-e2d9-4d29-9e03-b4fff2c772c7',
         path='/tasks/crosswords.py',
         lineno=177,
         depth=2,
         type='function',
         name='get_input',
         text='def get_input(self, idx: int) -> str:\n'
              '        self.env.reset(idx)\n'
              '        return self.env.render_clues()')

Fragment(uuid='ce4d5f70-7409-4ace-b568-82c47ef4f15f',
         path='/tasks/crosswords.py',
         lineno=188,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              '        self.env.reset(idx)\n'
              "        output = output.split('Output:\\n')[-1]\n"
              "        info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}\n"
              '        for i, line in '
              "enumerate(output.strip().split('\\n')[-5:], 1):\n"
              "            letters = line.split(' ')[:5]\n"
              "            word = ''.join(letters)\n"
              "            word = word + '_' * (5 - len(word))\n"
              "            action = f'h{i}. {word}'\n"
              '            # print(action)\n'
              '            _, _, _, info = self.env.step(action)\n'
              "        info['r'] = info['r_word']\n"
              '        return info\n')

Fragment(uuid='58f46577-dc97-4817-86cc-ab717991839c',
         path='/tasks/crosswords.py',
         lineno=188,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              '        self.env.reset(idx)\n'
              "        output = output.split('Output:\\n')[-1]\n"
              "        info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}\n"
              '        for i, line in '
              "enumerate(output.strip().split('\\n')[-5:], 1):\n"
              "            letters = line.split(' ')[:5]\n"
              "            word = ''.join(letters)\n"
              "            word = word + '_' * (5 - len(word))\n"
              "            action = f'h{i}. {word}'\n"
              '            # print(action)\n'
              '            _, _, _, info = self.env.step(action)\n'
              "        info['r'] = info['r_word']\n"
              '        return info\n')

Fragment(uuid='24cb1d66-d701-44dd-8e95-220c22de1908',
         path='/tasks/crosswords.py',
         lineno=189,
         depth=2,
         type='function',
         name='test_output',
         text='def test_output(self, idx: int, output: str):\n'
              '        self.env.reset(idx)\n'
              "        output = output.split('Output:\\n')[-1]\n"
              "        info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}\n"
              '        for i, line in '
              "enumerate(output.strip().split('\\n')[-5:], 1):\n"
              "            letters = line.split(' ')[:5]\n"
              "            word = ''.join(letters)\n"
              "            word = word + '_' * (5 - len(word))\n"
              "            action = f'h{i}. {word}'\n"
              '            # print(action)\n'
              '            _, _, _, info = self.env.step(action)\n'
              "        info['r'] = info['r_word']\n"
              '        return info')

Fragment(uuid='0596b8ea-d286-4992-8f16-b0865d467913',
         path='/tasks/crosswords.py',
         lineno=191,
         depth=4,
         type='variable',
         name='output',
         text="output = output.split('Output:\\n')[-1]")

Fragment(uuid='0daf1912-5c45-4d9e-9d33-9556d7a03397',
         path='/tasks/crosswords.py',
         lineno=192,
         depth=4,
         type='variable',
         name='info',
         text="info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}")

Fragment(uuid='47f52d34-d17e-48ed-850a-fb61c59633b2',
         path='/tasks/crosswords.py',
         lineno=194,
         depth=6,
         type='variable',
         name='letters',
         text="letters = line.split(' ')[:5]")

Fragment(uuid='f0b0ac1b-394f-4e63-b425-0bf602a4b35b',
         path='/tasks/crosswords.py',
         lineno=195,
         depth=6,
         type='variable',
         name='word',
         text="word = ''.join(letters)")

Fragment(uuid='d3311d51-db1e-419f-a147-9736a662c4fe',
         path='/tasks/crosswords.py',
         lineno=196,
         depth=6,
         type='variable',
         name='word',
         text="word = word + '_' * (5 - len(word))")

Fragment(uuid='c4da2681-a1e6-44e8-a709-2c4d310f6a28',
         path='/tasks/crosswords.py',
         lineno=197,
         depth=6,
         type='variable',
         name='action',
         text="action = f'h{i}. {word}'")

Fragment(uuid='589ef5f8-1603-41b6-a834-0a6d71897f29',
         path='/tasks/crosswords.py',
         lineno=199,
         depth=6,
         type='variable',
         name='_,',
         text='_, _, _, info = self.env.step(action)')

Fragment(uuid='6a6b40cb-4d5f-47a6-9a54-548a4fcc2c44',
         path='/tasks/crosswords.py',
         lineno=200,
         depth=4,
         type='variable',
         name="info['r']",
         text="info['r'] = info['r_word']")

Fragment(uuid='ccca456e-5cdc-4a2d-a2ba-c5c87f108bf5',
         path='/tasks/crosswords.py',
         lineno=202,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def set_status(self, x: str, y: str):\n'
              '        idx = self.xs.index(x)\n'
              '        self.test_output(idx, y)  # update self.env\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='ece198ff-23f5-47ee-960b-4c7771783ba8',
         path='/tasks/crosswords.py',
         lineno=202,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='\n'
              '    def set_status(self, x: str, y: str):\n'
              '        idx = self.xs.index(x)\n'
              '        self.test_output(idx, y)  # update self.env\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='06c7abd6-799d-4d69-891d-bdac525b0a6c',
         path='/tasks/crosswords.py',
         lineno=203,
         depth=2,
         type='function',
         name='set_status',
         text='def set_status(self, x: str, y: str):\n'
              '        idx = self.xs.index(x)\n'
              '        self.test_output(idx, y)')

Fragment(uuid='ada0fea1-2f6c-4ec3-bcd6-bd8f61ad33e6',
         path='/tasks/crosswords.py',
         lineno=204,
         depth=4,
         type='variable',
         name='idx',
         text='idx = self.xs.index(x)')

Fragment(uuid='5c3658ef-955d-4b3c-848d-1b14d43afbf4',
         path='/tasks/crosswords.py',
         lineno=208,
         depth=0,
         type='module',
         name='',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='4db4bd40-f911-4936-b3f1-4bc0f173949d',
         path='/tasks/crosswords.py',
         lineno=208,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='1574a183-20ce-4196-b9d9-ee4f772f6823',
         path='/tasks/crosswords.py',
         lineno=208,
         depth=3,
         type='function',
         name='standard_prompt_wrap',
         text="def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y')

Fragment(uuid='d0b4d7fd-ba59-48ec-999f-4015c1bca3a5',
         path='/tasks/crosswords.py',
         lineno=212,
         depth=0,
         type='module',
         name='',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n')

Fragment(uuid='2d0aac5c-fd53-4b63-92c5-c480b6d67ff7',
         path='/tasks/crosswords.py',
         lineno=212,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n')

Fragment(uuid='560f7f5c-6e10-4494-a240-337d18a84863',
         path='/tasks/crosswords.py',
         lineno=212,
         depth=3,
         type='function',
         name='cot_prompt_wrap',
         text="def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y')

Fragment(uuid='23ea77e6-a5fb-4fc1-8479-d4f03594a29a',
         path='/tasks/crosswords.py',
         lineno=214,
         depth=0,
         type='module',
         name='',
         text='    \n'
              "    def propose_prompt_wrap(self, x: str, y: str='') -> str:\n"
              '        self.set_status(x, y)\n'
              '        return propose_prompt.format(input=self.env.render())\n')

Fragment(uuid='84516075-ba88-47dd-a471-cd028c817a6b',
         path='/tasks/crosswords.py',
         lineno=214,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    \n'
              "    def propose_prompt_wrap(self, x: str, y: str='') -> str:\n"
              '        self.set_status(x, y)\n'
              '        return propose_prompt.format(input=self.env.render())\n')

Fragment(uuid='5f95ec74-ec85-40a1-aedd-80026aa57156',
         path='/tasks/crosswords.py',
         lineno=215,
         depth=2,
         type='function',
         name='propose_prompt_wrap',
         text="def propose_prompt_wrap(self, x: str, y: str='') -> str:\n"
              '        self.set_status(x, y)\n'
              '        return propose_prompt.format(input=self.env.render())')

Fragment(uuid='09d68d0d-ff41-4321-bb77-1bf4a92874ed',
         path='/tasks/crosswords.py',
         lineno=218,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def propose_outputs_unwrap(self, x: str, y: str, outputs: '
              'list, n_max_propose: int) -> list:\n'
              "        confidence_to_value = {'certain': 1, 'high': 0.5, "
              "'medium': 0.2, 'low': 0.1}  # TODO: ad hoc\n"
              '        proposals_to_scores = {}\n')

Fragment(uuid='8f28d20d-89bf-4e8a-893c-e2a0fc7d1a7a',
         path='/tasks/crosswords.py',
         lineno=218,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    \n'
              '    def propose_outputs_unwrap(self, x: str, y: str, outputs: '
              'list, n_max_propose: int) -> list:\n'
              "        confidence_to_value = {'certain': 1, 'high': 0.5, "
              "'medium': 0.2, 'low': 0.1}  # TODO: ad hoc\n"
              '        proposals_to_scores = {}\n')

Fragment(uuid='68b90118-5929-4669-be8a-e3d10c329235',
         path='/tasks/crosswords.py',
         lineno=219,
         depth=2,
         type='function',
         name='propose_outputs_unwrap',
         text='def propose_outputs_unwrap(self, x: str, y: str, outputs: list, '
              'n_max_propose: int) -> list:\n'
              "        confidence_to_value = {'certain': 1, 'high': 0.5, "
              "'medium': 0.2, 'low': 0.1}  # TODO: ad hoc\n"
              '        proposals_to_scores = {}\n')

Fragment(uuid='59ccaa74-b69c-4527-8629-6915da6a1f65',
         path='/tasks/crosswords.py',
         lineno=220,
         depth=4,
         type='variable',
         name='confidence_to_value',
         text="confidence_to_value = {'certain': 1, 'high': 0.5, 'medium': "
              "0.2, 'low': 0.1}")

Fragment(uuid='e1df23e2-ac06-4f61-8a28-291dbfc9ce4e',
         path='/tasks/crosswords.py',
         lineno=221,
         depth=4,
         type='variable',
         name='proposals_to_scores',
         text='proposals_to_scores = {}')

Fragment(uuid='c45eb5b2-7a19-4c9d-855b-36e0aa02b901',
         path='/tasks/crosswords.py',
         lineno=222,
         depth=0,
         type='module',
         name='',
         text='        for output in outputs:\n'
              "            lines = output.split('\\n')\n"
              "            pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n")

Fragment(uuid='31ec7926-638e-4c34-aaa2-4b54467a1e49',
         path='/tasks/crosswords.py',
         lineno=222,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='        for output in outputs:\n'
              "            lines = output.split('\\n')\n"
              "            pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n")

Fragment(uuid='db3ff058-3e8c-44ab-91ab-aea71f3020a0',
         path='/tasks/crosswords.py',
         lineno=222,
         depth=2,
         type='function',
         name='propose_outputs_unwrap',
         text='        for output in outputs:\n'
              "            lines = output.split('\\n')\n"
              "            pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n")

Fragment(uuid='36ccae10-0136-463d-b000-20f8c816b750',
         path='/tasks/crosswords.py',
         lineno=223,
         depth=6,
         type='variable',
         name='lines',
         text="lines = output.split('\\n')")

Fragment(uuid='6ed02378-3254-49c0-b274-ff44317e9969',
         path='/tasks/crosswords.py',
         lineno=224,
         depth=6,
         type='variable',
         name='pattern',
         text="pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'")

Fragment(uuid='f85bcc04-33a8-4bd5-9cb6-0b8dd6d4c853',
         path='/tasks/crosswords.py',
         lineno=225,
         depth=0,
         type='module',
         name='',
         text='            for line in lines:\n'
              '                match = re.match(pattern, line)\n')

Fragment(uuid='a9ba0f1c-dbef-4676-8787-d6bace5a4af3',
         path='/tasks/crosswords.py',
         lineno=225,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='            for line in lines:\n'
              '                match = re.match(pattern, line)\n')

Fragment(uuid='3c8434ef-7806-4269-acaf-22de402d5a45',
         path='/tasks/crosswords.py',
         lineno=225,
         depth=2,
         type='function',
         name='propose_outputs_unwrap',
         text='            for line in lines:\n'
              '                match = re.match(pattern, line)\n')

Fragment(uuid='9d1415ae-f2bc-4f42-9da6-2406d8d61532',
         path='/tasks/crosswords.py',
         lineno=226,
         depth=8,
         type='variable',
         name='match',
         text='match = re.match(pattern, line)')

Fragment(uuid='39ca75ac-45e3-4b9f-b9ab-472d2ea0e143',
         path='/tasks/crosswords.py',
         lineno=227,
         depth=0,
         type='module',
         name='',
         text='                if match:\n'
              '                    parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              "                    proposal = parts[0].lower() + '. ' + "
              'parts[1].lower()\n'
              '                    score = confidence_to_value.get(parts[2], '
              '0)\n'
              '                    proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score\n'
              '        \n'
              '        proposals = sorted(proposals_to_scores.items(), '
              'key=lambda x: x[1], reverse=True)\n')

Fragment(uuid='bd831695-181f-4966-8cd8-75882b5e5845',
         path='/tasks/crosswords.py',
         lineno=227,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='                if match:\n'
              '                    parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              "                    proposal = parts[0].lower() + '. ' + "
              'parts[1].lower()\n'
              '                    score = confidence_to_value.get(parts[2], '
              '0)\n'
              '                    proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score\n'
              '        \n'
              '        proposals = sorted(proposals_to_scores.items(), '
              'key=lambda x: x[1], reverse=True)\n')

Fragment(uuid='b74c5d65-b7f2-4d5a-8c60-41d46edc7d1e',
         path='/tasks/crosswords.py',
         lineno=227,
         depth=2,
         type='function',
         name='propose_outputs_unwrap',
         text='                if match:\n'
              '                    parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              "                    proposal = parts[0].lower() + '. ' + "
              'parts[1].lower()\n'
              '                    score = confidence_to_value.get(parts[2], '
              '0)\n'
              '                    proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score\n'
              '        \n'
              '        proposals = sorted(proposals_to_scores.items(), '
              'key=lambda x: x[1], reverse=True)\n')

Fragment(uuid='c418a81d-5f8e-4884-acdf-066a8e7d0b7b',
         path='/tasks/crosswords.py',
         lineno=228,
         depth=10,
         type='variable',
         name='parts',
         text='parts = [match.group(1), match.group(2), match.group(3)]')

Fragment(uuid='2623c30e-b683-4eac-b9f4-1113814cb84d',
         path='/tasks/crosswords.py',
         lineno=229,
         depth=10,
         type='variable',
         name='proposal',
         text="proposal = parts[0].lower() + '. ' + parts[1].lower()")

Fragment(uuid='bb997e62-a9df-49f6-a3a4-cd728d92e06e',
         path='/tasks/crosswords.py',
         lineno=230,
         depth=10,
         type='variable',
         name='score',
         text='score = confidence_to_value.get(parts[2], 0)')

Fragment(uuid='4406cfc0-d309-450c-93a6-cffd24cf5b6b',
         path='/tasks/crosswords.py',
         lineno=231,
         depth=10,
         type='variable',
         name='proposals_to_scores[proposal]',
         text='proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score')

Fragment(uuid='d206f756-6230-4602-8454-0806f5c91771',
         path='/tasks/crosswords.py',
         lineno=233,
         depth=4,
         type='variable',
         name='proposals',
         text='proposals = sorted(proposals_to_scores.items(), key=lambda x: '
              'x[1], reverse=True)')

Fragment(uuid='e99127d2-a91d-4b25-b42c-c6a8ea4e33ba',
         path='/tasks/crosswords.py',
         lineno=234,
         depth=0,
         type='module',
         name='',
         text='        if n_max_propose != -1:\n'
              '            proposals = proposals[:n_max_propose]\n'
              "        proposals = [y + proposal[0] + '\\n' for proposal in "
              'proposals]\n'
              '        self.cache_proposals[(x, y, n_max_propose)] = '
              'proposals\n'
              '        return proposals\n')

Fragment(uuid='7faa1323-0a52-4898-9ad5-2841e69ae836',
         path='/tasks/crosswords.py',
         lineno=234,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='        if n_max_propose != -1:\n'
              '            proposals = proposals[:n_max_propose]\n'
              "        proposals = [y + proposal[0] + '\\n' for proposal in "
              'proposals]\n'
              '        self.cache_proposals[(x, y, n_max_propose)] = '
              'proposals\n'
              '        return proposals\n')

Fragment(uuid='a0e49ea3-e6d9-454d-bacb-f60bb79f987e',
         path='/tasks/crosswords.py',
         lineno=234,
         depth=2,
         type='function',
         name='propose_outputs_unwrap',
         text='        if n_max_propose != -1:\n'
              '            proposals = proposals[:n_max_propose]\n'
              "        proposals = [y + proposal[0] + '\\n' for proposal in "
              'proposals]\n'
              '        self.cache_proposals[(x, y, n_max_propose)] = '
              'proposals\n'
              '        return proposals')

Fragment(uuid='7bf230a9-acfa-4de7-9673-b3fdf34cec6f',
         path='/tasks/crosswords.py',
         lineno=235,
         depth=6,
         type='variable',
         name='proposals',
         text='proposals = proposals[:n_max_propose]')

Fragment(uuid='58b92fbf-ed85-46bd-a45e-d9fc4f209a98',
         path='/tasks/crosswords.py',
         lineno=236,
         depth=4,
         type='variable',
         name='proposals',
         text="proposals = [y + proposal[0] + '\\n' for proposal in proposals]")

Fragment(uuid='3092a377-ffce-4873-82f8-ef521ea69f19',
         path='/tasks/crosswords.py',
         lineno=237,
         depth=4,
         type='variable',
         name='self.cache_proposals[(x,',
         text='self.cache_proposals[(x, y, n_max_propose)] = proposals')

Fragment(uuid='8460d497-387c-4f17-808c-2083654a9076',
         path='/tasks/crosswords.py',
         lineno=239,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def evaluate(self, x: str, y: str, n_evaluate_sample: int) '
              '-> int:\n'
              '        self.set_status(x, y)\n'
              '        assert n_evaluate_sample == 1 # TODO: ad hoc\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='9cf9a7ab-dc98-4801-a1f5-bc9ffffaa24b',
         path='/tasks/crosswords.py',
         lineno=239,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    \n'
              '    def evaluate(self, x: str, y: str, n_evaluate_sample: int) '
              '-> int:\n'
              '        self.set_status(x, y)\n'
              '        assert n_evaluate_sample == 1 # TODO: ad hoc\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='cacafdbd-9217-4d88-b414-a6ae4f37ba2d',
         path='/tasks/crosswords.py',
         lineno=240,
         depth=2,
         type='function',
         name='evaluate',
         text='def evaluate(self, x: str, y: str, n_evaluate_sample: int) -> '
              'int:\n'
              '        self.set_status(x, y)\n'
              '        assert n_evaluate_sample == 1 # TODO: ad hoc\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='10f29cc6-2585-44f7-bb47-acabcf091ac6',
         path='/tasks/crosswords.py',
         lineno=243,
         depth=4,
         type='variable',
         name='count',
         text="count = {'sure': 0, 'maybe': 0, 'impossible': 0}")

Fragment(uuid='7cb241b8-f3af-438a-8242-5ea20cd8e239',
         path='/tasks/crosswords.py',
         lineno=244,
         depth=0,
         type='module',
         name='',
         text='        for ans, data, status in zip(self.env.ans, '
              'self.env.data, self.env.status):\n'
              "            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n'
              '            res = gpt(prompt)[0]\n'
              '            print(line)\n'
              '            print(res)\n'
              '            print()\n'
              "            res = res.split('\\n')[-1].strip()\n"
              '            if res in count: count[res] += 1\n'
              '        print(count)\n'
              '        return count')

Fragment(uuid='77682695-aef3-469b-9c12-afeea1f9fd01',
         path='/tasks/crosswords.py',
         lineno=244,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='        for ans, data, status in zip(self.env.ans, '
              'self.env.data, self.env.status):\n'
              "            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n'
              '            res = gpt(prompt)[0]\n'
              '            print(line)\n'
              '            print(res)\n'
              '            print()\n'
              "            res = res.split('\\n')[-1].strip()\n"
              '            if res in count: count[res] += 1\n'
              '        print(count)\n'
              '        return count')

Fragment(uuid='48eff7c8-026f-4410-8699-e1ede2744708',
         path='/tasks/crosswords.py',
         lineno=244,
         depth=2,
         type='function',
         name='evaluate',
         text='        for ans, data, status in zip(self.env.ans, '
              'self.env.data, self.env.status):\n'
              "            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n'
              '            res = gpt(prompt)[0]\n'
              '            print(line)\n'
              '            print(res)\n'
              '            print()\n'
              "            res = res.split('\\n')[-1].strip()\n"
              '            if res in count: count[res] += 1\n'
              '        print(count)\n'
              '        return count')

Fragment(uuid='b1134947-6028-4038-a887-2e0a3c061cda',
         path='/tasks/crosswords.py',
         lineno=246,
         depth=6,
         type='variable',
         name='ans',
         text="ans = ' '.join(ans.lower())")

Fragment(uuid='8562772f-1f06-46c5-983a-f723ff74d8e7',
         path='/tasks/crosswords.py',
         lineno=247,
         depth=6,
         type='variable',
         name='line',
         text="line = f'{data}: {ans}'")

Fragment(uuid='b048139b-ea31-40a0-b8bc-33670a114b83',
         path='/tasks/crosswords.py',
         lineno=248,
         depth=6,
         type='variable',
         name='prompt',
         text='prompt = value_prompt.format(input=line)')

Fragment(uuid='7a491fa0-50bb-48bd-893c-f7a821726c2b',
         path='/tasks/crosswords.py',
         lineno=249,
         depth=6,
         type='variable',
         name='res',
         text='res = gpt(prompt)[0]')

Fragment(uuid='8eae7877-7c89-4287-bdd0-5f75c3a57d45',
         path='/tasks/crosswords.py',
         lineno=253,
         depth=6,
         type='variable',
         name='res',
         text="res = res.split('\\n')[-1].strip()")

Fragment(uuid='cc9fdc6b-d52b-417a-8768-7ddf1a0fc9b6',
         path='/tasks/game24.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import re\n'
              'import os\n'
              'import sympy\n'
              'import pandas as pd\n'
              'from tasks.base import Task, DATA_PATH\n'
              'from prompts.game24 import * \n'
              '\n'
              '\n'
              'def get_current_numbers(y: str) -> str:\n'
              "    last_line = y.strip().split('\\n')[-1]\n"
              "    return last_line.split('left: ')[-1].split(')')[0]\n")

Fragment(uuid='6be37bf0-7574-4406-ad9f-70ab17db3584',
         path='/tasks/game24.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import re')

Fragment(uuid='62a59205-0cdd-4b87-9c33-39e366e63ed3',
         path='/tasks/game24.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tasks/game24.py\n'
              '  Functions: get_current_numbers\n'
              '  Classes: Game24Task\n'
              '  Methods: __init__ __len__ cot_prompt_wrap get_input '
              'propose_prompt_wrap standard_prompt_wrap test_output '
              'value_outputs_unwrap value_prompt_wrap\n'
              '  Variables: ans current_numbers expression last_line numbers '
              'path problem_numbers prompt self.data self.steps self.stops '
              'self.value_cache value value_map value_names\n'
              '  Usages: DATA_PATH Exception Task answer base cot_prompt count '
              'data file findall float format game24 idx input int items join '
              'len list lower name output pandas prompts propose_prompt '
              'read_csv replace self simplify sorted split standard_prompt '
              'staticmethod steps stops str strip sum super sympy tasks '
              'value_cache value_last_step_prompt value_outputs value_prompt\n')

Fragment(uuid='b64544be-37ff-40b3-95b8-b36d290617fb',
         path='/tasks/game24.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='f2bfa8c0-82f1-4e1f-9be1-f9aff2e8fba3',
         path='/tasks/game24.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='import sympy')

Fragment(uuid='652959bd-24ec-4d4f-8c39-c11bb346fc88',
         path='/tasks/game24.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import pandas as pd')

Fragment(uuid='70346fb3-b98a-4502-8a0d-81610fa9d620',
         path='/tasks/game24.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='from tasks.base import Task, DATA_PATH')

Fragment(uuid='e5a34ee4-dbd8-4aa3-88ae-b036f2d221ed',
         path='/tasks/game24.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from prompts.game24 import *')

Fragment(uuid='5c019ade-8a3a-42fb-834b-f397d09617ba',
         path='/tasks/game24.py',
         lineno=9,
         depth=0,
         type='function',
         name='get_current_numbers',
         text='def get_current_numbers(y: str) -> str:\n'
              "    last_line = y.strip().split('\\n')[-1]\n"
              "    return last_line.split('left: ')[-1].split(')')[0]")

Fragment(uuid='92038a2b-c678-409d-9643-55f2ac77a537',
         path='/tasks/game24.py',
         lineno=10,
         depth=2,
         type='variable',
         name='last_line',
         text="last_line = y.strip().split('\\n')[-1]")

Fragment(uuid='bfb4b743-07d0-480b-b80f-24410a3e81fa',
         path='/tasks/game24.py',
         lineno=12,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Game24Task(Task):\n'
              '    """\n'
              '    Input (x)   : a string of 4 numbers\n'
              '    Output (y)  : a trajectory of 3 steps to reach 24\n'
              '    Reward (r)  : 0 or 1, depending on whether the trajectory '
              'is ')

Fragment(uuid='c6bcf66a-8fa3-40f8-a031-61f2680ee09f',
         path='/tasks/game24.py',
         lineno=14,
         depth=0,
         type='class',
         name='Game24Task',
         text='class Game24Task(Task):\n'
              '    """\n'
              '    Input (x)   : a string of 4 numbers\n'
              '    Output (y)  : a trajectory of 3 steps to reach 24\n'
              '    Reward (r)  : 0 or 1, depending on whether the trajectory '
              'is c')

Fragment(uuid='416b3c27-ee4e-4966-8749-6f88ae509c62',
         path='/tasks/game24.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text='correct\n'
              '    Input Example: \n'
              '        1 2 3 4\n'
              '    Output Example: \n'
              '        1 + 2 = 3 (left: 3 3 4)\n'
              '        3 + 3 = 6 (left: 4 6)\n'
              '        6 * 4 = 24 (left: 24)\n'
              '        (1 + 2 + 3) * 4 = 24\n'
              '    """\n')

Fragment(uuid='9c21a272-c0cd-4c68-aa4d-b1111625b6ac',
         path='/tasks/game24.py',
         lineno=18,
         depth=0,
         type='class',
         name='Game24Task',
         text='orrect\n'
              '    Input Example: \n'
              '        1 2 3 4\n'
              '    Output Example: \n'
              '        1 + 2 = 3 (left: 3 3 4)\n'
              '        3 + 3 = 6 (left: 4 6)\n'
              '        6 * 4 = 24 (left: 24)\n'
              '        (1 + 2 + 3) * 4 = 24\n'
              '    """\n')

Fragment(uuid='c14ba125-4844-46f8-84f1-82125ae2160b',
         path='/tasks/game24.py',
         lineno=27,
         depth=0,
         type='module',
         name='',
         text="    def __init__(self, file='24.csv'):\n"
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, '24', file)\n"
              "        self.data = list(pd.read_csv(path)['Puzzles'])\n"
              '        self.value_cache = {}\n'
              '        self.steps = 4\n'
              "        self.stops = ['\\n'] * 4\n")

Fragment(uuid='759727ab-5a4f-4787-8eaa-db25d99423a4',
         path='/tasks/game24.py',
         lineno=27,
         depth=0,
         type='class',
         name='Game24Task',
         text="    def __init__(self, file='24.csv'):\n"
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, '24', file)\n"
              "        self.data = list(pd.read_csv(path)['Puzzles'])\n"
              '        self.value_cache = {}\n'
              '        self.steps = 4\n'
              "        self.stops = ['\\n'] * 4\n")

Fragment(uuid='c6835ed8-39a8-42a7-8dfa-ca39bee6d67f',
         path='/tasks/game24.py',
         lineno=27,
         depth=2,
         type='function',
         name='__init__',
         text="def __init__(self, file='24.csv'):\n"
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, '24', file)\n"
              "        self.data = list(pd.read_csv(path)['Puzzles'])\n"
              '        self.value_cache = {}\n'
              '        self.steps = 4\n'
              "        self.stops = ['\\n'] * 4")

Fragment(uuid='91bbf01a-30be-4b62-bc32-0bbbab3c1c28',
         path='/tasks/game24.py',
         lineno=32,
         depth=4,
         type='variable',
         name='path',
         text="path = os.path.join(DATA_PATH, '24', file)")

Fragment(uuid='03a6ac29-988b-4fe2-9218-4429d45076f4',
         path='/tasks/game24.py',
         lineno=33,
         depth=4,
         type='variable',
         name='self.data',
         text="self.data = list(pd.read_csv(path)['Puzzles'])")

Fragment(uuid='7e5f52fa-c252-4be3-b601-ddc4d0302cd6',
         path='/tasks/game24.py',
         lineno=34,
         depth=4,
         type='variable',
         name='self.value_cache',
         text='self.value_cache = {}')

Fragment(uuid='3569ac70-6980-49cf-8e20-1ecdb663b7e7',
         path='/tasks/game24.py',
         lineno=35,
         depth=4,
         type='variable',
         name='self.steps',
         text='self.steps = 4')

Fragment(uuid='4fd01973-86ab-45b9-8afb-eeeeb5adae57',
         path='/tasks/game24.py',
         lineno=36,
         depth=4,
         type='variable',
         name='self.stops',
         text="self.stops = ['\\n'] * 4")

Fragment(uuid='54d54dc2-5118-4914-8ff6-b17d7860991a',
         path='/tasks/game24.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(uuid='9e29aeaa-5952-42fa-8b06-3064973fc587',
         path='/tasks/game24.py',
         lineno=37,
         depth=0,
         type='class',
         name='Game24Task',
         text='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(uuid='e1fbc2b7-a6e7-4815-9192-74bea0780be0',
         path='/tasks/game24.py',
         lineno=38,
         depth=2,
         type='function',
         name='__len__',
         text='def __len__(self) -> int:\n        return len(self.data)')

Fragment(uuid='72702c57-c498-4661-9d00-9e3ac357ec69',
         path='/tasks/game24.py',
         lineno=40,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(uuid='52fc504e-682b-48fb-b41e-5cfd790b37e5',
         path='/tasks/game24.py',
         lineno=40,
         depth=0,
         type='class',
         name='Game24Task',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(uuid='9e068bfe-c758-4fb0-b6be-e0a5b758e343',
         path='/tasks/game24.py',
         lineno=41,
         depth=2,
         type='function',
         name='get_input',
         text='def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]')

Fragment(uuid='3ad070ca-8583-4f01-aa34-53abcb65e565',
         path='/tasks/game24.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]\n"
              "        numbers = re.findall(r'\\d+', expression)\n"
              "        problem_numbers = re.findall(r'\\d+', self.data[idx])\n"
              '        if sorted(numbers) != sorted(problem_numbers):\n'
              "            return {'r': 0}\n"
              '        try:\n'
              '            # print(sympy.simplify(expression))\n'
              "            return {'r': int(sympy.simplify(expression) == "
              '24)}\n'
              '        except Exception as e:\n'
              '            # print(e)\n'
              "            return {'r': 0}\n"
              '            \n'
              '    @staticmethod\n')

Fragment(uuid='f8b891d9-f037-4d85-96e7-e2ce708d9ee6',
         path='/tasks/game24.py',
         lineno=43,
         depth=0,
         type='class',
         name='Game24Task',
         text='\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]\n"
              "        numbers = re.findall(r'\\d+', expression)\n"
              "        problem_numbers = re.findall(r'\\d+', self.data[idx])\n"
              '        if sorted(numbers) != sorted(problem_numbers):\n'
              "            return {'r': 0}\n"
              '        try:\n'
              '            # print(sympy.simplify(expression))\n'
              "            return {'r': int(sympy.simplify(expression) == "
              '24)}\n'
              '        except Exception as e:\n'
              '            # print(e)\n'
              "            return {'r': 0}\n"
              '            \n'
              '    @staticmethod\n')

Fragment(uuid='8a949c20-bb53-4c93-b331-1f6f38097b4d',
         path='/tasks/game24.py',
         lineno=44,
         depth=2,
         type='function',
         name='test_output',
         text='def test_output(self, idx: int, output: str):\n'
              '        expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]\n"
              "        numbers = re.findall(r'\\d+', expression)\n"
              "        problem_numbers = re.findall(r'\\d+', self.data[idx])\n"
              '        if sorted(numbers) != sorted(problem_numbers):\n'
              "            return {'r': 0}\n"
              '        try:\n'
              '            # print(sympy.simplify(expression))\n'
              "            return {'r': int(sympy.simplify(expression) == "
              '24)}\n'
              '        except Exception as e:\n'
              '            # print(e)\n'
              "            return {'r': 0}")

Fragment(uuid='7e30aa1d-1c06-4892-a30f-e55aec311438',
         path='/tasks/game24.py',
         lineno=45,
         depth=4,
         type='variable',
         name='expression',
         text='expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]")

Fragment(uuid='7ab1e989-4c65-44d0-9fab-e944a27a4add',
         path='/tasks/game24.py',
         lineno=46,
         depth=4,
         type='variable',
         name='numbers',
         text="numbers = re.findall(r'\\d+', expression)")

Fragment(uuid='2a0073dd-87d2-4b88-9974-d3f093781895',
         path='/tasks/game24.py',
         lineno=47,
         depth=4,
         type='variable',
         name='problem_numbers',
         text="problem_numbers = re.findall(r'\\d+', self.data[idx])")

Fragment(uuid='2e9d4651-efe7-418f-ad12-22dd585f6c3e',
         path='/tasks/game24.py',
         lineno=58,
         depth=0,
         type='module',
         name='',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='63990082-67f7-4165-b721-ac93337596ad',
         path='/tasks/game24.py',
         lineno=58,
         depth=0,
         type='class',
         name='Game24Task',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='57cacbf3-e0d0-460b-bcbe-08320f89476b',
         path='/tasks/game24.py',
         lineno=58,
         depth=3,
         type='function',
         name='standard_prompt_wrap',
         text="def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y')

Fragment(uuid='e8ab2dcb-90be-4cc1-adf9-d17ca0f660b9',
         path='/tasks/game24.py',
         lineno=62,
         depth=0,
         type='module',
         name='',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='3f13d260-978d-4ba8-9d68-88bfd34ea839',
         path='/tasks/game24.py',
         lineno=62,
         depth=0,
         type='class',
         name='Game24Task',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='e3925a70-8353-4ac4-a59a-bedda23a2047',
         path='/tasks/game24.py',
         lineno=62,
         depth=3,
         type='function',
         name='cot_prompt_wrap',
         text="def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y')

Fragment(uuid='e60c7d8c-14fe-4558-a895-632c1753d361',
         path='/tasks/game24.py',
         lineno=66,
         depth=0,
         type='module',
         name='',
         text="    def propose_prompt_wrap(x: str, y: str='') -> str:\n"
              '        current_numbers = get_current_numbers(y if y else x)\n'
              "        if current_numbers == '24':\n"
              "            prompt = cot_prompt.format(input=x) + 'Steps:' + y\n"
              '            # print([prompt])\n'
              '        else:\n'
              '            prompt = '
              'propose_prompt.format(input=current_numbers)\n'
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='ec815f82-3233-44a5-83f2-a8ef6101df2a',
         path='/tasks/game24.py',
         lineno=66,
         depth=0,
         type='class',
         name='Game24Task',
         text="    def propose_prompt_wrap(x: str, y: str='') -> str:\n"
              '        current_numbers = get_current_numbers(y if y else x)\n'
              "        if current_numbers == '24':\n"
              "            prompt = cot_prompt.format(input=x) + 'Steps:' + y\n"
              '            # print([prompt])\n'
              '        else:\n'
              '            prompt = '
              'propose_prompt.format(input=current_numbers)\n'
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='6394068b-2054-4fa3-a1e1-8944c10154bc',
         path='/tasks/game24.py',
         lineno=66,
         depth=3,
         type='function',
         name='propose_prompt_wrap',
         text="def propose_prompt_wrap(x: str, y: str='') -> str:\n"
              '        current_numbers = get_current_numbers(y if y else x)\n'
              "        if current_numbers == '24':\n"
              "            prompt = cot_prompt.format(input=x) + 'Steps:' + y\n"
              '            # print([prompt])\n'
              '        else:\n'
              '            prompt = '
              'propose_prompt.format(input=current_numbers)\n'
              '        return prompt')

Fragment(uuid='5bfc8ab4-0cd4-4e18-aa0f-b17bc31270b8',
         path='/tasks/game24.py',
         lineno=67,
         depth=5,
         type='variable',
         name='current_numbers',
         text='current_numbers = get_current_numbers(y if y else x)')

Fragment(uuid='f2826d05-978d-4733-bc6b-97c3476bedc5',
         path='/tasks/game24.py',
         lineno=69,
         depth=7,
         type='variable',
         name='prompt',
         text="prompt = cot_prompt.format(input=x) + 'Steps:' + y")

Fragment(uuid='b6f4933d-bedf-46be-a5bc-474818df04fa',
         path='/tasks/game24.py',
         lineno=72,
         depth=8,
         type='variable',
         name='prompt',
         text='prompt = propose_prompt.format(input=current_numbers)')

Fragment(uuid='a7c96a82-374b-47e5-a80d-2bf75fb89dae',
         path='/tasks/game24.py',
         lineno=76,
         depth=0,
         type='module',
         name='',
         text='    def value_prompt_wrap(x: str, y: str) -> str:\n'
              "        last_line = y.strip().split('\\n')[-1]\n"
              "        if 'left: ' not in last_line:  # last step\n"
              "            ans = last_line.lower().replace('answer: ', '')\n"
              '            # print([value_last_step_prompt.format(input=x, '
              'answer=ans)])\n'
              '            return value_last_step_prompt.format(input=x, '
              'answer=ans)\n'
              '        current_numbers = get_current_numbers(y)\n'
              '        return value_prompt.format(input=current_numbers)\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='5297325d-b438-4bf9-971e-42b4d9733e64',
         path='/tasks/game24.py',
         lineno=76,
         depth=0,
         type='class',
         name='Game24Task',
         text='    def value_prompt_wrap(x: str, y: str) -> str:\n'
              "        last_line = y.strip().split('\\n')[-1]\n"
              "        if 'left: ' not in last_line:  # last step\n"
              "            ans = last_line.lower().replace('answer: ', '')\n"
              '            # print([value_last_step_prompt.format(input=x, '
              'answer=ans)])\n'
              '            return value_last_step_prompt.format(input=x, '
              'answer=ans)\n'
              '        current_numbers = get_current_numbers(y)\n'
              '        return value_prompt.format(input=current_numbers)\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='e0e17bcf-ba47-4108-8d58-56396a3c8f2f',
         path='/tasks/game24.py',
         lineno=76,
         depth=3,
         type='function',
         name='value_prompt_wrap',
         text='def value_prompt_wrap(x: str, y: str) -> str:\n'
              "        last_line = y.strip().split('\\n')[-1]\n"
              "        if 'left: ' not in last_line:  # last step\n"
              "            ans = last_line.lower().replace('answer: ', '')\n"
              '            # print([value_last_step_prompt.format(input=x, '
              'answer=ans)])\n'
              '            return value_last_step_prompt.format(input=x, '
              'answer=ans)\n'
              '        current_numbers = get_current_numbers(y)\n'
              '        return value_prompt.format(input=current_numbers)')

Fragment(uuid='92712102-6ed7-4e8e-a120-e94d5f5642bd',
         path='/tasks/game24.py',
         lineno=77,
         depth=5,
         type='variable',
         name='last_line',
         text="last_line = y.strip().split('\\n')[-1]")

Fragment(uuid='33fc61eb-597a-425b-83a5-6a9280e49dae',
         path='/tasks/game24.py',
         lineno=79,
         depth=7,
         type='variable',
         name='ans',
         text="ans = last_line.lower().replace('answer: ', '')")

Fragment(uuid='22a4cda3-9329-42f3-8405-c6923f400ec0',
         path='/tasks/game24.py',
         lineno=82,
         depth=5,
         type='variable',
         name='current_numbers',
         text='current_numbers = get_current_numbers(y)')

Fragment(uuid='11505b74-d96f-48e7-9727-7645291ed4a2',
         path='/tasks/game24.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='    def value_outputs_unwrap(x: str, y: str, value_outputs: '
              'list) -> float:\n'
              "        if len(y.strip().split('\\n')) == 4 and 'answer' not in "
              'y.lower():\n'
              '            return 0\n'
              "        value_names = [_.split('\\n')[-1] for _ in "
              'value_outputs]\n'
              "        value_map = {'impossible': 0.001, 'likely': 1, 'sure': "
              '20}  # TODO: ad hoc\n'
              '        value = sum(value * value_names.count(name) for name, '
              'value in value_map.items())\n'
              '        return value')

Fragment(uuid='f2e40202-d485-4784-93d4-05c279ea2b34',
         path='/tasks/game24.py',
         lineno=86,
         depth=0,
         type='class',
         name='Game24Task',
         text='    def value_outputs_unwrap(x: str, y: str, value_outputs: '
              'list) -> float:\n'
              "        if len(y.strip().split('\\n')) == 4 and 'answer' not in "
              'y.lower():\n'
              '            return 0\n'
              "        value_names = [_.split('\\n')[-1] for _ in "
              'value_outputs]\n'
              "        value_map = {'impossible': 0.001, 'likely': 1, 'sure': "
              '20}  # TODO: ad hoc\n'
              '        value = sum(value * value_names.count(name) for name, '
              'value in value_map.items())\n'
              '        return value')

Fragment(uuid='ad43fc2e-2a25-43d0-8a68-44ed19caae03',
         path='/tasks/game24.py',
         lineno=86,
         depth=3,
         type='function',
         name='value_outputs_unwrap',
         text='def value_outputs_unwrap(x: str, y: str, value_outputs: list) '
              '-> float:\n'
              "        if len(y.strip().split('\\n')) == 4 and 'answer' not in "
              'y.lower():\n'
              '            return 0\n'
              "        value_names = [_.split('\\n')[-1] for _ in "
              'value_outputs]\n'
              "        value_map = {'impossible': 0.001, 'likely': 1, 'sure': "
              '20}  # TODO: ad hoc\n'
              '        value = sum(value * value_names.count(name) for name, '
              'value in value_map.items())\n'
              '        return value')

Fragment(uuid='048d1139-1aef-4b29-aba6-70d4ed6393cb',
         path='/tasks/game24.py',
         lineno=89,
         depth=5,
         type='variable',
         name='value_names',
         text="value_names = [_.split('\\n')[-1] for _ in value_outputs]")

Fragment(uuid='9f3ba427-623f-42df-bb0d-1e29c74837a9',
         path='/tasks/game24.py',
         lineno=90,
         depth=5,
         type='variable',
         name='value_map',
         text="value_map = {'impossible': 0.001, 'likely': 1, 'sure': 20}")

Fragment(uuid='6e1b9596-3af3-42b1-9fb3-aac8c337c879',
         path='/tasks/game24.py',
         lineno=91,
         depth=5,
         type='variable',
         name='value',
         text='value = sum(value * value_names.count(name) for name, value in '
              'value_map.items())')

Fragment(uuid='c69b8ab9-3b75-4abd-9f57-ebe96753cf76',
         path='/tasks/text.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import os\n'
              'import re\n'
              'from tasks.base import Task, DATA_PATH\n'
              'from prompts.text import *\n'
              'from models import gpt\n')

Fragment(uuid='ecec8978-ee09-434d-bb0c-0e2488e6b8c3',
         path='/tasks/text.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='387e23a4-3a6e-41e5-87e5-6cb845056117',
         path='/tasks/text.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tasks/text.py\n'
              '  Classes: TextTask\n'
              '  Methods: __init__ __len__ compare_output_unwrap '
              'compare_prompt_wrap cot_prompt_wrap get_input '
              'standard_prompt_wrap test_output vote_outputs_unwrap '
              'vote_prompt_wrap\n'
              '  Variables: info match output path pattern prompt score '
              'score_outputs scores self.data self.steps self.stops vote '
              'vote_results\n'
              '  Usages: DATA_PATH DOTALL Task append base compare_output '
              'compare_prompt cot_prompt data enumerate file format gpt groups '
              'idx input int join len list model models n_candidates open '
              'print prompts range readlines score_output score_prompt self '
              'split standard_prompt staticmethod steps stops str sum super '
              'tasks text vote_output vote_outputs vote_prompt\n')

Fragment(uuid='0baca50b-816c-4820-a5a3-5b5680c2873e',
         path='/tasks/text.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import re')

Fragment(uuid='da066f05-f23a-459a-94b8-c59790b911ba',
         path='/tasks/text.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='from tasks.base import Task, DATA_PATH')

Fragment(uuid='0a73568c-10cc-4c5e-86b4-b991134ce638',
         path='/tasks/text.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from prompts.text import *')

Fragment(uuid='3de3f112-2d3a-4e07-bad1-198b7bd90058',
         path='/tasks/text.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='from models import gpt')

Fragment(uuid='9ae7d082-b0eb-41dc-bfdd-5ee6c43b8caa',
         path='/tasks/text.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class TextTask(Task):\n'
              '    """\n'
              '    Input (x)   : a text instruction\n'
              '    Output (y)  : a text generation\n'
              '    Reward (r)  : # TODO\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(uuid='0666c91b-f31b-43b6-b570-2bfa053b6f79',
         path='/tasks/text.py',
         lineno=8,
         depth=0,
         type='class',
         name='TextTask',
         text='class TextTask(Task):\n'
              '    """\n'
              '    Input (x)   : a text instruction\n'
              '    Output (y)  : a text generation\n'
              '    Reward (r)  : # TODO\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(uuid='88b8d788-f07c-4f60-bd5d-eb53aa5f773d',
         path='/tasks/text.py',
         lineno=16,
         depth=0,
         type='module',
         name='',
         text="    def __init__(self, file='data_100_random_text.txt'):\n"
              '        """\n'
              '        file: a text file, each line is some sentences\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, 'text', file)\n"
              '        self.data = open(path).readlines()\n'
              '        self.steps = 2\n'
              "        self.stops = ['\\nPassage:\\n', None]\n")

Fragment(uuid='89ee2f33-772d-497d-b6d7-4776d0ad4ca9',
         path='/tasks/text.py',
         lineno=16,
         depth=0,
         type='class',
         name='TextTask',
         text="    def __init__(self, file='data_100_random_text.txt'):\n"
              '        """\n'
              '        file: a text file, each line is some sentences\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, 'text', file)\n"
              '        self.data = open(path).readlines()\n'
              '        self.steps = 2\n'
              "        self.stops = ['\\nPassage:\\n', None]\n")

Fragment(uuid='4a42767a-484d-48c9-8daa-b93df90e0024',
         path='/tasks/text.py',
         lineno=16,
         depth=2,
         type='function',
         name='__init__',
         text="def __init__(self, file='data_100_random_text.txt'):\n"
              '        """\n'
              '        file: a text file, each line is some sentences\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, 'text', file)\n"
              '        self.data = open(path).readlines()\n'
              '        self.steps = 2\n'
              "        self.stops = ['\\nPassage:\\n', None]")

Fragment(uuid='5a0937c8-0ab6-48b6-93fe-548f52219c86',
         path='/tasks/text.py',
         lineno=21,
         depth=4,
         type='variable',
         name='path',
         text="path = os.path.join(DATA_PATH, 'text', file)")

Fragment(uuid='5f9e0c30-f108-41ee-82d0-4719cdf18f72',
         path='/tasks/text.py',
         lineno=22,
         depth=4,
         type='variable',
         name='self.data',
         text='self.data = open(path).readlines()')

Fragment(uuid='d8470ece-dabb-4ee7-8433-6bfbb859abab',
         path='/tasks/text.py',
         lineno=23,
         depth=4,
         type='variable',
         name='self.steps',
         text='self.steps = 2')

Fragment(uuid='de2e030e-ef66-4eef-b8cb-2bbea6d92ee5',
         path='/tasks/text.py',
         lineno=24,
         depth=4,
         type='variable',
         name='self.stops',
         text="self.stops = ['\\nPassage:\\n', None]")

Fragment(uuid='7cfba644-3696-411c-8614-c65504e1d304',
         path='/tasks/text.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(uuid='1e429467-442b-4860-ae63-20f1fd8c22b4',
         path='/tasks/text.py',
         lineno=25,
         depth=0,
         type='class',
         name='TextTask',
         text='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(uuid='386844c4-733e-4413-8f71-f4c0175e3928',
         path='/tasks/text.py',
         lineno=26,
         depth=2,
         type='function',
         name='__len__',
         text='def __len__(self) -> int:\n        return len(self.data)')

Fragment(uuid='a3eca9ab-cf7c-47ac-812a-a3d33ec0e3d5',
         path='/tasks/text.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(uuid='28a2a92f-c471-4436-b001-5c845fa18c0e',
         path='/tasks/text.py',
         lineno=28,
         depth=0,
         type='class',
         name='TextTask',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(uuid='e4fade29-cd3e-43f7-9390-d8cb8a154c37',
         path='/tasks/text.py',
         lineno=29,
         depth=2,
         type='function',
         name='get_input',
         text='def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]')

Fragment(uuid='31577d84-4a63-4569-b7bd-3dfc46592ab6',
         path='/tasks/text.py',
         lineno=31,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              "        output = output.split('Passage:\\n')[-1]\n"
              '        prompt = score_prompt + output\n'
              "        score_outputs = gpt(prompt, n=5, model='gpt-4')\n"
              '        scores = []\n')

Fragment(uuid='608c24a7-7761-41db-ac45-4fb2b087885e',
         path='/tasks/text.py',
         lineno=31,
         depth=0,
         type='class',
         name='TextTask',
         text='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              "        output = output.split('Passage:\\n')[-1]\n"
              '        prompt = score_prompt + output\n'
              "        score_outputs = gpt(prompt, n=5, model='gpt-4')\n"
              '        scores = []\n')

Fragment(uuid='63f7f127-b0b7-4ee4-95ae-4a70101be2de',
         path='/tasks/text.py',
         lineno=32,
         depth=2,
         type='function',
         name='test_output',
         text='def test_output(self, idx: int, output: str):\n'
              "        output = output.split('Passage:\\n')[-1]\n"
              '        prompt = score_prompt + output\n'
              "        score_outputs = gpt(prompt, n=5, model='gpt-4')\n"
              '        scores = []\n')

Fragment(uuid='9d6ec136-ac41-4bdb-b659-eb2a0a59e0f6',
         path='/tasks/text.py',
         lineno=33,
         depth=4,
         type='variable',
         name='output',
         text="output = output.split('Passage:\\n')[-1]")

Fragment(uuid='13b601b8-adb9-4217-a287-80402a44e018',
         path='/tasks/text.py',
         lineno=34,
         depth=4,
         type='variable',
         name='prompt',
         text='prompt = score_prompt + output')

Fragment(uuid='ce5c65e2-21a1-44f3-93e9-02c955607716',
         path='/tasks/text.py',
         lineno=35,
         depth=4,
         type='variable',
         name='score_outputs',
         text="score_outputs = gpt(prompt, n=5, model='gpt-4')")

Fragment(uuid='043a1538-45bf-4a2f-9db7-c5883a19fa74',
         path='/tasks/text.py',
         lineno=36,
         depth=4,
         type='variable',
         name='scores',
         text='scores = []')

Fragment(uuid='a6de6069-ee57-431f-86b2-798ab70e7c6f',
         path='/tasks/text.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='        for score_output in score_outputs:\n'
              '            # print(score_output)\n'
              '            pattern = r".*coherency score is (\\d+).*"\n'
              '            match = re.match(pattern, score_output, re.DOTALL)\n'
              '            if match:\n'
              '                score = int(match.groups()[0])\n'
              '                scores.append(score)\n'
              '            else:\n'
              "                print(f'------------------score no match: "
              "{[score_output]}')\n"
              '        print(scores)\n'
              "        # print('------------')\n"
              "        info = {'rs': scores, 'r': sum(scores) / len(scores) if "
              'scores else 0}\n'
              '        return info\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='eee4f4d0-c980-4538-89b1-446d58d56ad8',
         path='/tasks/text.py',
         lineno=37,
         depth=0,
         type='class',
         name='TextTask',
         text='        for score_output in score_outputs:\n'
              '            # print(score_output)\n'
              '            pattern = r".*coherency score is (\\d+).*"\n'
              '            match = re.match(pattern, score_output, re.DOTALL)\n'
              '            if match:\n'
              '                score = int(match.groups()[0])\n'
              '                scores.append(score)\n'
              '            else:\n'
              "                print(f'------------------score no match: "
              "{[score_output]}')\n"
              '        print(scores)\n'
              "        # print('------------')\n"
              "        info = {'rs': scores, 'r': sum(scores) / len(scores) if "
              'scores else 0}\n'
              '        return info\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='252489a3-63aa-4fb7-ac3a-2e2169bdaac9',
         path='/tasks/text.py',
         lineno=37,
         depth=2,
         type='function',
         name='test_output',
         text='        for score_output in score_outputs:\n'
              '            # print(score_output)\n'
              '            pattern = r".*coherency score is (\\d+).*"\n'
              '            match = re.match(pattern, score_output, re.DOTALL)\n'
              '            if match:\n'
              '                score = int(match.groups()[0])\n'
              '                scores.append(score)\n'
              '            else:\n'
              "                print(f'------------------score no match: "
              "{[score_output]}')\n"
              '        print(scores)\n'
              "        # print('------------')\n"
              "        info = {'rs': scores, 'r': sum(scores) / len(scores) if "
              'scores else 0}\n'
              '        return info')

Fragment(uuid='b420a540-bb12-40f7-828b-ed871c5e579f',
         path='/tasks/text.py',
         lineno=39,
         depth=6,
         type='variable',
         name='pattern',
         text='pattern = r".*coherency score is (\\d+).*"')

Fragment(uuid='0e161f3e-9c89-4ed3-902f-490c40370724',
         path='/tasks/text.py',
         lineno=40,
         depth=6,
         type='variable',
         name='match',
         text='match = re.match(pattern, score_output, re.DOTALL)')

Fragment(uuid='4379b503-743f-4d39-9b13-074aac69280c',
         path='/tasks/text.py',
         lineno=42,
         depth=8,
         type='variable',
         name='score',
         text='score = int(match.groups()[0])')

Fragment(uuid='33835da8-40bf-4705-aa1e-fb3b4b7f0301',
         path='/tasks/text.py',
         lineno=48,
         depth=4,
         type='variable',
         name='info',
         text="info = {'rs': scores, 'r': sum(scores) / len(scores) if scores "
              'else 0}')

Fragment(uuid='de06e728-e701-4655-a5f7-cf65cfd29b28',
         path='/tasks/text.py',
         lineno=52,
         depth=0,
         type='module',
         name='',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='0469ffb5-958b-4893-83a0-135bd120dbf8',
         path='/tasks/text.py',
         lineno=52,
         depth=0,
         type='class',
         name='TextTask',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='96a54925-a432-451e-b011-d56a3f397cc1',
         path='/tasks/text.py',
         lineno=52,
         depth=3,
         type='function',
         name='standard_prompt_wrap',
         text="def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y')

Fragment(uuid='ad936a5f-043f-4c4c-b21b-ba0be4a9fc61',
         path='/tasks/text.py',
         lineno=56,
         depth=0,
         type='module',
         name='',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='b98a9d6a-5236-413c-978c-b51c5afb8251',
         path='/tasks/text.py',
         lineno=56,
         depth=0,
         type='class',
         name='TextTask',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='b386ec66-eed5-4dbf-9695-46d0614afdd8',
         path='/tasks/text.py',
         lineno=56,
         depth=3,
         type='function',
         name='cot_prompt_wrap',
         text="def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y')

Fragment(uuid='d136d166-adec-4377-8f08-1dd749fb9282',
         path='/tasks/text.py',
         lineno=60,
         depth=0,
         type='module',
         name='',
         text='    def vote_prompt_wrap(x: str, ys: list) -> str:\n'
              '        prompt = vote_prompt\n'
              '        for i, y in enumerate(ys, 1):\n'
              "            # y = y.replace('Plan:\\n', '')\n"
              '            # TODO: truncate the plan part?\n'
              "            prompt += f'Choice {i}:\\n{y}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='a369e225-418c-4702-ad30-c512f54e5778',
         path='/tasks/text.py',
         lineno=60,
         depth=0,
         type='class',
         name='TextTask',
         text='    def vote_prompt_wrap(x: str, ys: list) -> str:\n'
              '        prompt = vote_prompt\n'
              '        for i, y in enumerate(ys, 1):\n'
              "            # y = y.replace('Plan:\\n', '')\n"
              '            # TODO: truncate the plan part?\n'
              "            prompt += f'Choice {i}:\\n{y}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='22823fff-0979-4082-bb48-9089626520ee',
         path='/tasks/text.py',
         lineno=60,
         depth=3,
         type='function',
         name='vote_prompt_wrap',
         text='def vote_prompt_wrap(x: str, ys: list) -> str:\n'
              '        prompt = vote_prompt\n'
              '        for i, y in enumerate(ys, 1):\n'
              "            # y = y.replace('Plan:\\n', '')\n"
              '            # TODO: truncate the plan part?\n'
              "            prompt += f'Choice {i}:\\n{y}\\n'\n"
              '        return prompt')

Fragment(uuid='9c5d9302-d172-4095-907e-8e44cfb567c6',
         path='/tasks/text.py',
         lineno=61,
         depth=5,
         type='variable',
         name='prompt',
         text='prompt = vote_prompt')

Fragment(uuid='c241567c-d814-4b3d-9784-5cde1d9952f3',
         path='/tasks/text.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='    def vote_outputs_unwrap(vote_outputs: list, n_candidates: '
              'int) -> list:\n'
              '        vote_results = [0] * n_candidates\n'
              '        for vote_output in vote_outputs:\n'
              '            pattern = r".*best choice is .*(\\d+).*"\n'
              '            match = re.match(pattern, vote_output, re.DOTALL)\n'
              '            if match:\n'
              '                vote = int(match.groups()[0]) - 1\n'
              '                if vote in range(n_candidates):\n'
              '                    vote_results[vote] += 1\n'
              '            else:\n'
              "                print(f'vote no match: {[vote_output]}')\n"
              '        return vote_results\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='b6470041-1a1f-4ae2-a89c-a9426e98251b',
         path='/tasks/text.py',
         lineno=69,
         depth=0,
         type='class',
         name='TextTask',
         text='    def vote_outputs_unwrap(vote_outputs: list, n_candidates: '
              'int) -> list:\n'
              '        vote_results = [0] * n_candidates\n'
              '        for vote_output in vote_outputs:\n'
              '            pattern = r".*best choice is .*(\\d+).*"\n'
              '            match = re.match(pattern, vote_output, re.DOTALL)\n'
              '            if match:\n'
              '                vote = int(match.groups()[0]) - 1\n'
              '                if vote in range(n_candidates):\n'
              '                    vote_results[vote] += 1\n'
              '            else:\n'
              "                print(f'vote no match: {[vote_output]}')\n"
              '        return vote_results\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='58709759-6e93-4591-aa2c-4461885f45f2',
         path='/tasks/text.py',
         lineno=69,
         depth=3,
         type='function',
         name='vote_outputs_unwrap',
         text='def vote_outputs_unwrap(vote_outputs: list, n_candidates: int) '
              '-> list:\n'
              '        vote_results = [0] * n_candidates\n'
              '        for vote_output in vote_outputs:\n'
              '            pattern = r".*best choice is .*(\\d+).*"\n'
              '            match = re.match(pattern, vote_output, re.DOTALL)\n'
              '            if match:\n'
              '                vote = int(match.groups()[0]) - 1\n'
              '                if vote in range(n_candidates):\n'
              '                    vote_results[vote] += 1\n'
              '            else:\n'
              "                print(f'vote no match: {[vote_output]}')\n"
              '        return vote_results')

Fragment(uuid='681aa1aa-437c-4b0c-9740-3150252b6586',
         path='/tasks/text.py',
         lineno=70,
         depth=5,
         type='variable',
         name='vote_results',
         text='vote_results = [0] * n_candidates')

Fragment(uuid='8df9c9e4-ff0b-452e-9418-094d8a6cbee5',
         path='/tasks/text.py',
         lineno=72,
         depth=7,
         type='variable',
         name='pattern',
         text='pattern = r".*best choice is .*(\\d+).*"')

Fragment(uuid='2863519d-f5da-446c-9a31-8be1bbed9bcd',
         path='/tasks/text.py',
         lineno=73,
         depth=7,
         type='variable',
         name='match',
         text='match = re.match(pattern, vote_output, re.DOTALL)')

Fragment(uuid='f3365461-64af-40e2-9674-e75a96258c63',
         path='/tasks/text.py',
         lineno=75,
         depth=9,
         type='variable',
         name='vote',
         text='vote = int(match.groups()[0]) - 1')

Fragment(uuid='2a13ce17-ad2f-4ba8-a73e-7afa34b1e05f',
         path='/tasks/text.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='    def compare_prompt_wrap(x: str, ys: list) -> str:\n'
              "        assert len(ys) == 2, 'compare prompt only supports 2 "
              "candidates'\n"
              "        ys = [y.split('Passage:\\n')[-1] for y in ys]\n"
              "        prompt = compare_prompt + f'Passage "
              "1:\\n{ys[0]}\\n\\nPassage 2:\\n{ys[1]}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='62d91c10-1ee5-44f0-8ebc-ac0c8c65b462',
         path='/tasks/text.py',
         lineno=83,
         depth=0,
         type='class',
         name='TextTask',
         text='    def compare_prompt_wrap(x: str, ys: list) -> str:\n'
              "        assert len(ys) == 2, 'compare prompt only supports 2 "
              "candidates'\n"
              "        ys = [y.split('Passage:\\n')[-1] for y in ys]\n"
              "        prompt = compare_prompt + f'Passage "
              "1:\\n{ys[0]}\\n\\nPassage 2:\\n{ys[1]}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='430c613f-44f7-422f-998d-6805956c83bf',
         path='/tasks/text.py',
         lineno=83,
         depth=3,
         type='function',
         name='compare_prompt_wrap',
         text='def compare_prompt_wrap(x: str, ys: list) -> str:\n'
              "        assert len(ys) == 2, 'compare prompt only supports 2 "
              "candidates'\n"
              "        ys = [y.split('Passage:\\n')[-1] for y in ys]\n"
              "        prompt = compare_prompt + f'Passage "
              "1:\\n{ys[0]}\\n\\nPassage 2:\\n{ys[1]}\\n'\n"
              '        return prompt')

Fragment(uuid='b17f4b3d-add8-47a8-9226-6093d2c8b987',
         path='/tasks/text.py',
         lineno=85,
         depth=5,
         type='variable',
         name='ys',
         text="ys = [y.split('Passage:\\n')[-1] for y in ys]")

Fragment(uuid='6996f010-9d64-4ad5-8e2e-b78639ee8273',
         path='/tasks/text.py',
         lineno=86,
         depth=5,
         type='variable',
         name='prompt',
         text="prompt = compare_prompt + f'Passage 1:\\n{ys[0]}\\n\\nPassage "
              "2:\\n{ys[1]}\\n'")

Fragment(uuid='f7599cef-36b0-4e3f-85dd-5fd8f5587ebc',
         path='/tasks/text.py',
         lineno=90,
         depth=0,
         type='module',
         name='',
         text='    def compare_output_unwrap(compare_output: str):\n'
              "        if 'more coherent passage is 1' in compare_output:\n"
              '            return 0\n'
              "        elif 'more coherent passage is 2' in compare_output:\n"
              '            return 1\n'
              "        elif 'two passages are similarly coherent' in "
              'compare_output:\n'
              '            return 0.5\n'
              '        else:\n'
              "            print(f'-----------------compare no match: "
              "{[compare_output]}')\n"
              '            return -1')

Fragment(uuid='e741390b-6f34-4063-b99a-5d6bda0f9b5a',
         path='/tasks/text.py',
         lineno=90,
         depth=0,
         type='class',
         name='TextTask',
         text='    def compare_output_unwrap(compare_output: str):\n'
              "        if 'more coherent passage is 1' in compare_output:\n"
              '            return 0\n'
              "        elif 'more coherent passage is 2' in compare_output:\n"
              '            return 1\n'
              "        elif 'two passages are similarly coherent' in "
              'compare_output:\n'
              '            return 0.5\n'
              '        else:\n'
              "            print(f'-----------------compare no match: "
              "{[compare_output]}')\n"
              '            return -1')

Fragment(uuid='a467416a-9022-4510-a95b-795ccb856c1c',
         path='/tasks/text.py',
         lineno=90,
         depth=3,
         type='function',
         name='compare_output_unwrap',
         text='def compare_output_unwrap(compare_output: str):\n'
              "        if 'more coherent passage is 1' in compare_output:\n"
              '            return 0\n'
              "        elif 'more coherent passage is 2' in compare_output:\n"
              '            return 1\n'
              "        elif 'two passages are similarly coherent' in "
              'compare_output:\n'
              '            return 0.5\n'
              '        else:\n'
              "            print(f'-----------------compare no match: "
              "{[compare_output]}')\n"
              '            return -1')