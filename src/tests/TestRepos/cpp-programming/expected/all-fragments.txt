Fragment(uuid='NORMALIZED-000000',
         path='/Bank management system/Header.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Bank management system/Header.h\n'
              '  Functions: Borrow, CheckBalance, Deposit, MainMenu, Menu, '
              'Return, inputNewData, inputUpgradeData, outData\n'
              '  Structs: accounts\n'
              '  Variable declarations: accountNum, available, balance, '
              'borrow, increaments, namespace\n')

Fragment(uuid='NORMALIZED-000001',
         path='/Bank management system/Header.h',
         lineno=11,
         depth=2,
         type='var_decl',
         name='namespace',
         text='')

Fragment(uuid='NORMALIZED-000002',
         path='/Bank management system/Header.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='accountNum',
         text='')

Fragment(uuid='NORMALIZED-000003',
         path='/Bank management system/Header.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='increaments',
         text='')

Fragment(uuid='NORMALIZED-000004',
         path='/Bank management system/Header.h',
         lineno=13,
         depth=2,
         type='var_decl',
         name='balance',
         text='long double balance = 0;\n')

Fragment(uuid='NORMALIZED-000005',
         path='/Bank management system/Header.h',
         lineno=14,
         depth=2,
         type='var_decl',
         name='available',
         text='')

Fragment(uuid='NORMALIZED-000006',
         path='/Bank management system/Header.h',
         lineno=15,
         depth=2,
         type='var_decl',
         name='borrow',
         text='long double borrow = 0;\n')

Fragment(uuid='NORMALIZED-000007',
         path='/Bank management system/Header.h',
         lineno=16,
         depth=2,
         type='struct_decl',
         name='accounts',
         text='struct accounts {\n'
              '\n'
              '\tstring name;\n'
              '\tstring password;\n'
              '\tdouble balance;\n'
              '\tdouble borrowed;\n'
              '};\n')

Fragment(uuid='NORMALIZED-000008',
         path='/Bank management system/Header.h',
         lineno=24,
         depth=2,
         type='function_decl',
         name='CheckBalance',
         text='')

Fragment(uuid='NORMALIZED-000009',
         path='/Bank management system/Header.h',
         lineno=25,
         depth=2,
         type='function_decl',
         name='Borrow',
         text='')

Fragment(uuid='NORMALIZED-000010',
         path='/Bank management system/Header.h',
         lineno=26,
         depth=2,
         type='function_decl',
         name='Deposit',
         text='')

Fragment(uuid='NORMALIZED-000011',
         path='/Bank management system/Header.h',
         lineno=27,
         depth=2,
         type='function_decl',
         name='Return',
         text='')

Fragment(uuid='NORMALIZED-000012',
         path='/Bank management system/Header.h',
         lineno=28,
         depth=2,
         type='function_decl',
         name='Menu',
         text='')

Fragment(uuid='NORMALIZED-000013',
         path='/Bank management system/Header.h',
         lineno=29,
         depth=2,
         type='function_decl',
         name='MainMenu',
         text='')

Fragment(uuid='NORMALIZED-000014',
         path='/Bank management system/Header.h',
         lineno=30,
         depth=2,
         type='function_decl',
         name='outData',
         text='')

Fragment(uuid='NORMALIZED-000015',
         path='/Bank management system/Header.h',
         lineno=31,
         depth=2,
         type='function_decl',
         name='inputNewData',
         text='')

Fragment(uuid='NORMALIZED-000016',
         path='/Bank management system/Header.h',
         lineno=32,
         depth=2,
         type='function_decl',
         name='inputUpgradeData',
         text='')

Fragment(uuid='NORMALIZED-000017',
         path='/Bank management system/Header.h',
         lineno=35,
         depth=2,
         type='function_decl',
         name='Menu',
         text='void Menu(accounts oldData[]) {\n'
              "\tchar num = '1';\n"
              "\twhile (num != '0')\n"
              '\t{\n'
              '\t\tsystem("CLS");\n'
              '\t\tcout << "\\n          1.Deposit" << endl;\n'
              '\t\tcout << "\\n          2.Borrow money from bank" << endl;\n'
              '\t\tcout << "\\n          3.Return money to bank" << endl << '
              'endl;\n'
              '\t\tcout << "\\n          If you want to quit from this section '
              'please press 0" << endl << endl;\n'
              '\t\tnum = _getch();\n'
              '\t\tswitch (num) {\n'
              '\t\tcase 49:\n'
              '\t\t\tsystem("CLS");\n'
              '\t\t\tDeposit();\n'
              '\t\t\toldData[accountNum].balance = ::balance;\n'
              '\t\t\tinputUpgradeData(oldData);\n'
              '\t\t\tbreak;\n'
              '\t\tcase 50:\n'
              '\t\t\tsystem("CLS");\n'
              '\t\t\tBorrow();\n'
              '\t\t\toldData[accountNum].balance = ::balance;\n'
              '\t\t\toldData[accountNum].borrowed = ::borrow;\n'
              '\t\t\tinputUpgradeData(oldData);\n'
              '\t\t\tbreak;\n'
              '\t\tcase 51:\n'
              '\t\t\tsystem("CLS");\n'
              '\t\t\tReturn();\n'
              '\t\t\toldData[accountNum].balance = ::balance;\n'
              '\t\t\toldData[accountNum].borrowed = ::borrow;\n'
              '\t\t\tinputUpgradeData(oldData);\n'
              '\t\t\tbreak;\n'
              '\t\t}\n'
              '\t}\n'
              '\tcout << "\\n          ";\n'
              '}\n')

Fragment(uuid='NORMALIZED-000018',
         path='/Bank management system/Header.h',
         lineno=71,
         depth=2,
         type='function_decl',
         name='CheckBalance',
         text='void CheckBalance() {\n'
              '\tsystem("CLS");\n'
              '\tcout << "\\n          You balance: " << ::balance << "$" << '
              'endl << endl;\n'
              '\tcout << "\\n          ";\n'
              '\tsystem("pause");\n'
              '}\n')

Fragment(uuid='NORMALIZED-000019',
         path='/Bank management system/Header.h',
         lineno=78,
         depth=2,
         type='function_decl',
         name='Deposit',
         text='void Deposit()\n'
              '{\n'
              '\tdouble money;\n'
              '\tcout << "\\n          Please enter amount of money - ";\n'
              '\tcin >> money;\n'
              '\tif (money == 0)\n'
              '\t{\n'
              '\t\tcout << "\\n          You entered 0 value so now you are '
              'redirected to the menu" << endl;\n'
              '\t\tSleep(2000);\n'
              '\t}\n'
              '\telse if (money > 0)\n'
              '\t{\n'
              '\t\t::balance = ::balance + money;\n'
              '\t\t\n'
              '\t\tcout << "\\n          Please wait for a while, while we are '
              'transfering money to your account" << endl;\n'
              '\t\tSleep(2000);\n'
              '\t\tcout << "\\n          ";\n'
              '\t\tcout << money << "$ amount of money was added to your '
              'balance" << endl << endl;\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << "\\n          Error!" << endl;\n'
              '\t\tcout << "\\n          Please enter valid amount of money!" '
              '<< endl << endl;\n'
              '\t}\n'
              '\tcout << "\\n          ";\n'
              '\tsystem("pause");\n'
              '}\n')

Fragment(uuid='NORMALIZED-000020',
         path='/Bank management system/Header.h',
         lineno=106,
         depth=2,
         type='function_decl',
         name='Borrow',
         text='void Borrow()\n'
              '{\n'
              '\tlong double borrow;\n'
              '\tcout << "\\n          In during time in our bank we have " << '
              '::available << "$" << endl;\n'
              '\tcout << "\\n          How much do you want to borrow?" << '
              'endl;\n'
              '\tcout << "\\n          ";\n'
              '\tcin >> borrow;\n'
              '\tif (borrow == 0)\n'
              '\t{\n'
              '\t\tcout << "\\n          You entered 0 value so now you are '
              'redirected to the menu" << endl << endl;\n'
              '\t\tSleep(2000);\n'
              '\t}\n'
              '\telse if (borrow <= ::available && borrow > 0)\n'
              '\t{\n'
              '\t\tcout << "\\n          We can give you such amount of '
              'money." << endl;\n'
              '\t\tcout << "\\n          Please wait for a while, while we are '
              'transfering money to your account" << endl;\n'
              '\t\tSleep(3000);\n'
              '\t\t::available = ::available - borrow;\n'
              '\t\t::balance = ::balance + borrow;\n'
              '\t\t::borrow = ::borrow + borrow;\n'
              '\t\tcout << "\\n          Money is successfully transfered to '
              'your account." << endl << endl;\n'
              '\t}\n'
              '\telse if (::borrow < 0)\n'
              '\t{\n'
              '\t\tcout << "\\n          Error!" << endl;\n'
              '\t\tcout << "\\n          Please enter valid amount of money!" '
              '<< endl << endl;\n'
              '\t}\n'
              '\telse {\n'
              '\t\tcout << "\\n          We are sorry but we cant give you '
              'such amount of money" << endl << endl;\n'
              '\t}\n'
              '\tcout << "\\n          ";\n'
              '\tsystem("pause");\n'
              '}\n')

Fragment(uuid='NORMALIZED-000021',
         path='/Bank management system/Header.h',
         lineno=140,
         depth=2,
         type='function_decl',
         name='Return',
         text='void Return()\n'
              '{\n'
              '\tchar choise;\n'
              '\tlong double retr;\n'
              '\tif (::borrow > 0) {\n'
              '\t\tcout << "\\n          You have borrowed - " << ::borrow << '
              '"$" << '
              'endln'
              '\t\tcout << "\\n          If you want to return some amount of '
              'money please press SPACE or press anything to go back to menu." '
              '<< endl;\n'
              '\t\tchoise = _getch();\n'
              '\t\tif (choise == 32) {\n'
              '\t\t\tcout << "\\n          How much do you want to return?" << '
              'endl;\n'
              '\t\t\tcout << "\\n          ";\n'
              '\t\t\tcin >> retr;\n'
              '\t\t\tif (retr == 0)\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << "\\n          You entered 0 value so now you '
              'are redirected to the menu" << endl;\n'
              '\t\t\t\tSleep(2000);\n'
              '\t\t\t}\n'
              '\t\t\telse if (retr > 0 && retr <= ::borrow) {\n'
              '\t\t\t\tcout << "\\n          Please wait while we are taking '
              'from your account money back." << endl;\n'
              '\t\t\t\t::borrow = ::borrow - retr;\n'
              '\t\t\t\t::balance = ::balance - retr;\n'
              '\t\t\t\t::available = ::available + retr;\n'
              '\t\t\t\tSleep(3000);\n'
              '\t\t\t\tcout << "\\n          Money is successfully taken from '
              'your account." << endl << endl;\n'
              '\t\t\t}\n'
              '\t\t\telse\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << "\\n          Error!" << endl;\n'
              '\t\t\t\tcout << "\\n          Please enter valid amount of '
              'money!" << endl << endl;\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t}\n'
              '\telse {\n'
              '\t\tcout << "\\n          You haven\'t borrowed any money from '
              'us." << endl << endl;\n'
              '\t}\n'
              '\tcout << "\\n          ";\n'
              '\tsystem("pause");\n'
              '}\n')

Fragment(uuid='NORMALIZED-000022',
         path='/Bank management system/Header.h',
         lineno=179,
         depth=2,
         type='function_decl',
         name='outData',
         text='void outData(accounts oldData[]) {\n'
              '\tifstream file;\n'
              '\tfile.open("data.txt");\n'
              '\tif (!file.is_open()) {\n'
              '\t\tcout << "Error\\n";\n'
              '\n'
              '\t}\n'
              '\telse {\n'
              '\t\t//cout << "file is opened\\n";\n'
              '\t\tstring str = "";\n'
              '\t\tint i = 0, j = 0;\n'
              '\t\tstring strArr[4];\n'
              '\t\tdo {\n'
              "\t\t\tgetline(file, str, '|');\n"
              '\t\t\tif (j < 4) {\n'
              '\t\t\t\tstrArr[j] = str;\n'
              '\t\t\t\tj++;\n'
              '\t\t\t}\n'
              '\t\t\telse {\n'
              '\t\t\t\toldData[i].name = strArr[0];\n'
              '\t\t\t\toldData[i].password = strArr[1];\n'
              '\t\t\t\toldData[i].balance = stoi(strArr[2]);\n'
              '\t\t\t\toldData[i].borrowed = stoi(strArr[3]);\n'
              '\t\t\t\t::increaments++;\n'
              '\t\t\t\tj = 0;\n'
              '\t\t\t\tstrArr[j] = str;\n'
              '\t\t\t\tj++;\n'
              '\t\t\t\ti++;\n'
              '\t\t\t}\n'
              '\n'
              '\n'
              '\n'
              '\t\t\t//cout<<str<<"|";\n'
              '\t\t}while (!file.eof());\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-000023',
         path='/Bank management system/Header.h',
         lineno=215,
         depth=2,
         type='function_decl',
         name='inputNewData',
         text='void inputNewData(accounts data) {\n'
              '\tofstream file;\n'
              '\tfile.open("data.txt", ofstream::app);\n'
              '\tfile << data.name;\n'
              '\tfile << "|";\n'
              '\tfile << data.password;\n'
              '\tfile << "|";\n'
              '\tfile << data.balance;\n'
              '\tfile << "|";\n'
              '\tfile << data.borrowed;\n'
              '\tfile << "|";\n'
              '\n'
              '\n'
              '\n'
              '\n'
              '\tfile.close();\n'
              '}\n')

Fragment(uuid='NORMALIZED-000024',
         path='/Bank management system/Header.h',
         lineno=232,
         depth=2,
         type='function_decl',
         name='inputUpgradeData',
         text='void inputUpgradeData(accounts data[]) {\n'
              '\tofstream file;\n'
              '\tfile.open("data.txt");\n'
              '\tfor (int i = 0; i <::increaments; i++) {\n'
              '\t\t\n'
              '\t\tfile << data[i].name;\n'
              '\t\tfile << "|";\n'
              '\t\tfile << data[i].password;\n'
              '\t\tfile << "|";\n'
              '\t\tfile << data[i].balance;\n'
              '\t\tfile << "|";\n'
              '\t\tfile << data[i].borrowed;\n'
              '\t\tfile << "|";\n'
              '\t\t\n'
              '\t}\n'
              '\n'
              '\tfile.close();\n'
              '}\n')

Fragment(uuid='NORMALIZED-000025',
         path='/Bank management system/main.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Bank management system/main.cpp\n'
              '  Functions: MainMenu, main\n')

Fragment(uuid='NORMALIZED-000026',
         path='/Bank management system/main.cpp',
         lineno=3,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tsrand(time(0));\n'
              '\t::available = rand() % 200000;\n'
              '\tMainMenu();\n'
              '\n'
              '\tsystem("color 9E");\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000027',
         path='/Bank management system/main.cpp',
         lineno=14,
         depth=2,
         type='function_decl',
         name='MainMenu',
         text='void MainMenu()\n'
              '{\n'
              '\tsystem("color 9E");\n'
              '\tchar num;\n'
              '\tchar choice;\n'
              '\tdo\n'
              '\t{\n'
              '\n'
              '\t\tbool checked = false;\n'
              '\t\tstring checkName, checkPassword;\n'
              '\t\taccounts data;\n'
              '\t\taccounts oldData[50];\n'
              '\t\tcout << "\\n          Choose what you want:";\n'
              '\t\tcout << "\\n          1.Sign in";\n'
              '\t\tcout << "\\n          2.Registration";\n'
              '\t\tcout << "\\n          3.Exit";\n'
              '\t\tcout << "\\n          ";\n'
              '\t\tchoice = _getch();\n'
              '\t\tswitch (choice)\n'
              '\t\t{\n'
              '\t\tcase 49:\n'
              '\t\t\toutData(oldData);\n'
              '\t\t\tsystem("CLS");\n'
              '\t\t\tcout << "\\n          Please enter your name:";\n'
              '\t\t\tcout << "\\n          ";\n'
              '\t\t\tcin >> checkName;\n'
              '\t\t\tcout << "\\n          Please enter your password:";\n'
              '\t\t\tcout << "\\n          ";\n'
              '\t\t\tcin >> checkPassword;\n'
              '\t\t\tfor (int i = 0; i < ::increaments; i++)\n'
              '\t\t\t{\n'
              '\n'
              '\t\t\t\tif (oldData[i].name == checkName && oldData[i].password '
              '== checkPassword)\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\t::accountNum = i;\n'
              '\t\t\t\t\t::balance = oldData[i].balance;\n'
              '\t\t\t\t\t::borrow = oldData[i].borrowed;\n'
              '\t\t\t\t\tchecked = true;\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tif (checked)\n'
              '\t\t\t{\n'
              '\t\t\t\tdo\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tsystem("CLS");\n'
              '\t\t\t\t\tcout << "\\n          Hello " << '
              'oldData[::accountNum].name << endl;\n'
              '\t\t\t\t\tcout << "\\n          What would you like to do?" << '
              'endl;\n'
              '\t\t\t\t\tcout << "\\n          1.Actions with card" << endl;\n'
              '\t\t\t\t\tcout << "\\n          2.Check balance" << endl;\n'
              '\t\t\t\t\tcout << "\\n          0.Exit" << endl;\n'
              '\t\t\t\t\tnum = _getch();\n'
              '\t\t\t\t\tswitch (num)\n'
              '\t\t\t\t\t{\n'
              '\t\t\t\t\tcase 48:\n'
              '\t\t\t\t\t\tbreak;\n'
              '\t\t\t\t\tcase 49:\n'
              '\t\t\t\t\t\tMenu(oldData);\n'
              '\t\t\t\t\t\tbreak;\n'
              '\t\t\t\t\tcase 50:\n'
              '\t\t\t\t\t\tCheckBalance();\n'
              '\t\t\t\t\t\tbreak;\n'
              '\t\t\t\t\tdefault:\n'
              '\t\t\t\t\t\tcout << "\\n          Error! Section not found. '
              'Please try one more time." << endl\n'
              '\t\t\t\t\t\t\t << endl;\n'
              '\t\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t\t\tbreak;\n'
              '\t\t\t\t\t}\n'
              '\n'
              "\t\t\t\t} while (num != '0');\n"
              '\t\t\t}\n'
              '\t\t\telse\n'
              '\t\t\t\tcout << "\\n          Wrong name or password\\n";\n'
              '\t\t\tbreak;\n'
              '\t\tcase 50:\n'
              '\t\t\tsystem("CLS");\n'
              '\t\t\tcout << "\\n          Input your name without space";\n'
              '\t\t\tcout << "\\n          ";\n'
              '\t\t\tcin >> data.name;\n'
              '\t\t\tcout << "\\n          Input your password without '
              'space";\n'
              '\t\t\tcout << "\\n          ";\n'
              '\t\t\tcin >> data.password;\n'
              '\t\t\tdata.balance = 0;\n'
              '\t\t\tdata.borrowed = 0;\n'
              '\t\t\tinputNewData(data);\n'
              '\t\t\tbreak;\n'
              '\t\tcase 51:\n'
              '\t\t\tbreak;\n'
              '\t\tdefault:\n'
              '\t\t\tcout << "\\n          There is no such section";\n'
              '\t\t\tcout << "\\n          Please try one more time";\n'
              '\t\t\tbreak;\n'
              '\t\t}\n'
              '\t} while (choice != 51);\n'
              '\n'
              '\tcout << "\\n          ";\n'
              '}\n')

Fragment(uuid='NORMALIZED-000028',
         path='/E-Commerce App V1.0/BreadBakery.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V1.0/BreadBakery.h\n'
              '  Variable declarations: Product_BreadBakery\n')

Fragment(uuid='NORMALIZED-000029',
         path='/E-Commerce App V1.0/BreadBakery.h',
         lineno=11,
         depth=2,
         type='var_decl',
         name='Product_BreadBakery',
         text='')

Fragment(uuid='NORMALIZED-000030',
         path='/E-Commerce App V1.0/BreadBakery.h',
         lineno=126,
         depth=2,
         type='var_decl',
         name='Product_BreadBakery',
         text='')

Fragment(uuid='NORMALIZED-000031',
         path='/E-Commerce App V1.0/Header.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V1.0/Header.h\n'
              '  Variable declarations: Login_Sign, Name_Memory, Num_Lower, '
              'Num_Number, Num_Upper, Security, Validation, namespace\n')

Fragment(uuid='NORMALIZED-000032',
         path='/E-Commerce App V1.0/Header.h',
         lineno=8,
         depth=2,
         type='var_decl',
         name='namespace',
         text='')

Fragment(uuid='NORMALIZED-000033',
         path='/E-Commerce App V1.0/Header.h',
         lineno=11,
         depth=2,
         type='var_decl',
         name='Num_Upper',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000034',
         path='/E-Commerce App V1.0/Header.h',
         lineno=11,
         depth=2,
         type='var_decl',
         name='Num_Lower',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000035',
         path='/E-Commerce App V1.0/Header.h',
         lineno=11,
         depth=2,
         type='var_decl',
         name='Num_Number',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000036',
         path='/E-Commerce App V1.0/Header.h',
         lineno=11,
         depth=2,
         type='var_decl',
         name='Validation',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000037',
         path='/E-Commerce App V1.0/Header.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='Login_Sign',
         text='')

Fragment(uuid='NORMALIZED-000038',
         path='/E-Commerce App V1.0/Header.h',
         lineno=14,
         depth=2,
         type='var_decl',
         name='Name_Memory',
         text='')

Fragment(uuid='NORMALIZED-000039',
         path='/E-Commerce App V1.0/Header.h',
         lineno=16,
         depth=2,
         type='var_decl',
         name='Security',
         text='')

Fragment(uuid='NORMALIZED-000040',
         path='/E-Commerce App V1.0/Loading.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V1.0/Loading.h\n'
              '  Functions: F_Loading, gotoXY\n')

Fragment(uuid='NORMALIZED-000041',
         path='/E-Commerce App V1.0/Loading.h',
         lineno=6,
         depth=2,
         type='function_decl',
         name='gotoXY',
         text='void gotoXY(int x, int y) {\n'
              "\t//'COORD' is a built in function for positioning the objects\n"
              '\tCOORD d;\n'
              '\td.X = x;\n'
              '\td.Y = y;\n'
              '\tSetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), '
              'd);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000042',
         path='/E-Commerce App V1.0/Loading.h',
         lineno=14,
         depth=2,
         type='function_decl',
         name='F_Loading',
         text='void F_Loading() {\n'
              '\tcout << "\\n\\n\\n\\n\\n\\n";\n'
              '\tcout << "\\t\\t\\t       '
              '-------------------------------------  \\n";\n'
              '\tcout << "\\t\\t\\t         E I G H T S O F T  A C A D E M '
              'Y      \\n";\n'
              '\tcout << "\\t\\t\\t       '
              '-------------------------------------  \\n";\n'
              '\tcout << "\\t\\t\\t                   A L I B A Z A '
              'R             \\n";\n'
              '\tcout << "\\t\\t\\t       '
              '_____________________________________  \\n";\n'
              '\n'
              '\tchar a = 219;\n'
              '\tgotoXY(45, 14);\n'
              '\n'
              '\tcout << "LOADING... " << endl;\n'
              '\n'
              '\tgotoXY(37, 16);\n'
              '\tfor (int r = 1; r <= 26; r++)\n'
              '\t{\n'
              '\t\t//for speed\n'
              '\t\tfor (int speed = 0; speed <= 110000000; speed++);\n'
              '\t\tcout << a;\n'
              '\t}\n'
              '\tcout << endl;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000043',
         path='/E-Commerce App V1.0/Vegetables.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V1.0/Vegetables.h\n'
              '  Variable declarations: Product_VegetablesFruits\n')

Fragment(uuid='NORMALIZED-000044',
         path='/E-Commerce App V1.0/Vegetables.h',
         lineno=11,
         depth=2,
         type='var_decl',
         name='Product_VegetablesFruits',
         text='')

Fragment(uuid='NORMALIZED-000045',
         path='/E-Commerce App V1.0/Vegetables.h',
         lineno=126,
         depth=2,
         type='var_decl',
         name='Product_VegetablesFruits',
         text='')

Fragment(uuid='NORMALIZED-000046',
         path='/E-Commerce App V1.0/Water.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V1.0/Water.h\n'
              '  Variable declarations: Product_WaterBeverages\n')

Fragment(uuid='NORMALIZED-000047',
         path='/E-Commerce App V1.0/Water.h',
         lineno=11,
         depth=2,
         type='var_decl',
         name='Product_WaterBeverages',
         text='')

Fragment(uuid='NORMALIZED-000048',
         path='/E-Commerce App V1.0/Water.h',
         lineno=126,
         depth=2,
         type='var_decl',
         name='Product_WaterBeverages',
         text='')

Fragment(uuid='NORMALIZED-000049',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V1.0/main.cpp\n'
              '  Functions: F_Bread_Bakery_Menu, F_Cart_Check, F_Developers, '
              'F_General_Menu, F_Logo, F_Logo_Owner, F_Owner_Customers_List, '
              'F_Owner_Main_Menu, F_Owner_Products_Stotage, F_Sign_in, '
              'F_Table_For_Increasing_And_Decreasing, F_User_Main_Menu, '
              'F_Vegetables_Fruits_Menu, F_Water_Beverages_Menu, main\n'
              '  Variable declarations: Overall_Sum, Owner_Login_Sign, '
              'Owner_Parol_Sign, Test, Test1, Test2, User_1, price, quantity\n')

Fragment(uuid='NORMALIZED-000050',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=17,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-000051',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=20,
         depth=2,
         type='var_decl',
         name='price',
         text='int price;\n')

Fragment(uuid='NORMALIZED-000052',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=21,
         depth=2,
         type='var_decl',
         name='quantity',
         text='int quantity;\n')

Fragment(uuid='NORMALIZED-000053',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=22,
         depth=2,
         type='var_decl',
         name='Overall_Sum',
         text='int Overall_Sum; // Calculating Overall sum "���"\n')

Fragment(uuid='NORMALIZED-000054',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=25,
         depth=2,
         type='var_decl',
         name='Owner_Login_Sign',
         text='string Owner_Login_Sign = "Rustam202";\n')

Fragment(uuid='NORMALIZED-000055',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=26,
         depth=2,
         type='var_decl',
         name='Owner_Parol_Sign',
         text='string Owner_Parol_Sign = "Rustam202";\n')

Fragment(uuid='NORMALIZED-000056',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=32,
         depth=2,
         type='var_decl',
         name='User_1',
         text='Security User_1;\n')

Fragment(uuid='NORMALIZED-000057',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=33,
         depth=2,
         type='var_decl',
         name='Test',
         text='Product_VegetablesFruits Test;\n')

Fragment(uuid='NORMALIZED-000058',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=34,
         depth=2,
         type='var_decl',
         name='Test1',
         text='Product_WaterBeverages Test1;\n')

Fragment(uuid='NORMALIZED-000059',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=35,
         depth=2,
         type='var_decl',
         name='Test2',
         text='Product_BreadBakery Test2;\n')

Fragment(uuid='NORMALIZED-000060',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=38,
         depth=2,
         type='function_decl',
         name='F_General_Menu',
         text='')

Fragment(uuid='NORMALIZED-000061',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=39,
         depth=2,
         type='function_decl',
         name='F_Sign_in',
         text='')

Fragment(uuid='NORMALIZED-000062',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=40,
         depth=2,
         type='function_decl',
         name='F_Developers',
         text='')

Fragment(uuid='NORMALIZED-000063',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=41,
         depth=2,
         type='function_decl',
         name='F_Logo',
         text='')

Fragment(uuid='NORMALIZED-000064',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=42,
         depth=2,
         type='function_decl',
         name='F_Logo_Owner',
         text='')

Fragment(uuid='NORMALIZED-000065',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=44,
         depth=2,
         type='function_decl',
         name='F_Owner_Main_Menu',
         text='')

Fragment(uuid='NORMALIZED-000066',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=45,
         depth=2,
         type='function_decl',
         name='F_Owner_Products_Stotage',
         text='')

Fragment(uuid='NORMALIZED-000067',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=46,
         depth=2,
         type='function_decl',
         name='F_Owner_Customers_List',
         text='')

Fragment(uuid='NORMALIZED-000068',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=48,
         depth=2,
         type='function_decl',
         name='F_User_Main_Menu',
         text='')

Fragment(uuid='NORMALIZED-000069',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=49,
         depth=2,
         type='function_decl',
         name='F_Table_For_Increasing_And_Decreasing',
         text='')

Fragment(uuid='NORMALIZED-000070',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=50,
         depth=2,
         type='function_decl',
         name='F_Vegetables_Fruits_Menu',
         text='')

Fragment(uuid='NORMALIZED-000071',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=51,
         depth=2,
         type='function_decl',
         name='F_Water_Beverages_Menu',
         text='')

Fragment(uuid='NORMALIZED-000072',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=52,
         depth=2,
         type='function_decl',
         name='F_Bread_Bakery_Menu',
         text='')

Fragment(uuid='NORMALIZED-000073',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=53,
         depth=2,
         type='function_decl',
         name='F_Cart_Check',
         text='')

Fragment(uuid='NORMALIZED-000074',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=56,
         depth=2,
         type='function_decl',
         name='main',
         text='int main() {\n'
              '\t// Loading Time\n'
              '    F_Loading();\n'
              '\tF_General_Menu();\n'
              '\t\n'
              '\tcout << "\\n\\n\\t\\t\\t\\t   Thank you for '
              'Attention!!!\\n\\n" << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000075',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=66,
         depth=2,
         type='function_decl',
         name='F_General_Menu',
         text='void F_General_Menu() {\n'
              '\t// Main Authentication Menu \n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\tcout << "        A L I B A Z A '
              'R                                             A U T H E N T I C '
              'A T I O N     \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << "\\t\\t\\t\\t\\t  Authentication \\n" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   1. Sign in" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   2. Sign up" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   3. About" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   0. Exit" << endl << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t  Your Choice: ";\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: // Sign in\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_Sign_in();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t    break;\n'
              '\n'
              "\t\tcase 50: {   // Register ('sign up')   // Set details with "
              'validation    \n'
              '\t\t\tfor (int i = 0; i != 1;) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << "        A L I B A Z A '
              'R                                             R E G I S T R A T '
              'I O N         \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t       Example of Registration: " '
              '<< endl ;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        ______________________" << '
              'endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        User Name  : Abdullokh " '
              '<< endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        Telephone  : 974006102 " '
              '<< endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        Login      : Alimov_8 " << '
              'endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        Password   : Alimov808 " '
              '<< endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        ______________________" << '
              'endl << endl;\n'
              '\t\t\t\tUser_1.SetUser();   \n'
              '\t\t\t\tValidationParol(User_1);\n'
              '\t\t\t\tValidationName(User_1);\n'
              '\t\t\t\tValidationTellNum(User_1);\n'
              '\t\t\t\tif (Validation == 3) {\n'
              '\t\t\t\t\t//////   File Handling For User Info\n'
              '\t\t\t\t\tofstream User_1_Info;\n'
              '\t\t\t\t\tUser_1_Info.open("User_Info.txt");  // Opening File\n'
              '\t\t\t\t\t// Setting User Info to Memory\n'
              '\t\t\t\t\tUser_1_Info << Name_Memory << endl;\n'
              '\t\t\t\t\tUser_1_Info << TellNum_Memory << endl;\n'
              '\t\t\t\t\tUser_1_Info << Login_Memory << endl;\n'
              '\t\t\t\t\tUser_1_Info << Parol_Memory << endl;\n'
              '\t\t\t\t\tUser_1_Info.close();\n'
              '\t\t\t\t\t///////// End of the File Handling\n'
              '\t\t\t\t\tcout << "\\t\\t              '
              '__________________________________" << endl;\n'
              '\t\t\t\t\tcout << "\\t\\t                      Correct '
              'Validation" << endl;\n'
              '\t\t\t\t\ti++; \n'
              '\t\t\t\t\tcout << "                          Please press any '
              'keyboard to continue program" << endl << endl; '
              'system("Pause");\n'
              '\t\t\t\t\tValidation = 0;\n'
              '\t\t\t\t}\n'
              '\t\t\t\telse {\n'
              '\t\t\t\t\tcout << "\\t\\t              '
              '__________________________________" << endl;\n'
              '\t\t\t\t\tcout << "\\t\\t                      Invalid '
              'Validation" << endl;\n'
              '\t\t\t\t\tcout << "                          Please press any '
              'keyboard to rewrite details" << endl << endl;\n'
              '\t\t\t\t\tsystem("Pause"); system("cls");\n'
              '\t\t\t\t\tValidation = 0;\n'
              '\t\t\t\t} // switch case ends\n'
              '\t\t\t} // for loop ends\n'
              '\t\t}break;\n'
              '\n'
              '\t\tcase 51:   // Developers\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_Developers();\n'
              '\t        break;\n'
              '\t\tcase 48:\n'
              '\t\t\t//i = 1000;\n'
              '\t\t\tsystem("exit");\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\tdefault:  cout << "\\n\\n\\t\\t\\t       Your choice is not '
              'available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\t\n'
              '\t\t} // switch case ends\n'
              '\t} // for loop ends\n'
              '}\n')

Fragment(uuid='NORMALIZED-000076',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=148,
         depth=2,
         type='function_decl',
         name='F_Sign_in',
         text='void F_Sign_in() {\n'
              '\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\tcout << "        A L I B A Z A '
              'R                                                       S I G '
              'N  I N          \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << "\\t\\t\\t\\t\\t     Sign in\\n\\n";\n'
              '\t\tcout << "\\t\\t\\t\\t\\t1. Sign in as Owner" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t2. Sign in as User" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t0. Back" << endl << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   Your Choice: ";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: {  // Sign in as Owner\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                          O W '
              'N E R          \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t         Owner '
              'Authentication\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t  Login    : "; cin >> '
              'Login_Sign;\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t  Password : "; cin >> '
              'Parol_Sign;\n'
              '\t\t\tif (Login_Sign == Owner_Login_Sign && Parol_Sign == '
              'Owner_Parol_Sign) {\n'
              "\t\t\t\t// Owner's Menu\n"
              '\t\t\t\tF_Owner_Main_Menu();\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t}\n'
              "\t\t\telse {  // If Login hasn't Registered\n"
              '\t\t\t\tcout << "\\n\\n\\t\\t\\t        Your Login and Password '
              'are Invalid." << endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t     Please press any key back to '
              '\'Sign in\' Menu.\\n\\n" << endl;\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t\tF_Sign_in();\n'
              '\t\t\t} // else ends\n'
              '\t\t}break;\n'
              '\n'
              '\t\tcase 50: {   // Sign in as User\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\t//////   File Handling For User Info\n'
              '\t\t\tifstream User_1_Info;\n'
              '\t\t\tUser_1_Info.open("User_Info.txt");\n'
              '\t\t\tUser_1_Info >> Name_Memory;\n'
              '\t\t\tUser_1_Info >> TellNum_Memory;\n'
              '\t\t\tUser_1_Info >> Login_Memory;\n'
              '\t\t\tUser_1_Info >> Parol_Memory;\n'
              '\t\t\tUser_1_Info.close();\n'
              '\t\t\t///////// End of the File Handling\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                     C U S T O '
              'M E R         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t         Customer '
              'Authentication\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t  Login    : "; cin >> '
              'Login_Sign;\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t  Password : "; cin >> '
              'Parol_Sign;\n'
              '\t\t\tif (Login_Sign == Login_Memory && Parol_Sign == '
              'Parol_Memory) {\n'
              '\t\t\t\t/////// User Menu\n'
              '\t\t\t\tF_User_Main_Menu();\n'
              '\t\t\t\t///////\n'
              '\t\t\t}\n'
              '\t\t\telse {  // If Login didnt Register\n'
              '\t\t\t\tcout << "\\n\\n\\t\\t\\t        Your Login and Password '
              'are Invalid." << endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t     Please press any key back to '
              '\'Sign in\' Menu.\\n\\n" << endl;\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t\tF_Sign_in();\n'
              '\t\t\t} // else ends\n'
              '\t\t}break;\n'
              '\n'
              '\t\tcase 48: {   // Back\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\ti = 1000;\n'
              '\t\t\tF_General_Menu();\n'
              '\t\t}break;\n'
              '\n'
              '\t\tdefault: \n'
              '\t\t\tcout << "\\n\\n\\t\\t\\t       Your choice is not '
              'available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\n'
              '\t\t} // switch\n'
              '\t} // for\n'
              '}\n')

Fragment(uuid='NORMALIZED-000077',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=228,
         depth=2,
         type='function_decl',
         name='F_Developers',
         text='void F_Developers() {\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "        A L I B A Z A '
              'R                                                           A B '
              'O U T        \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\tcout << "\\n\\t\\t\\t\\t\'AliBazar\' Online Shopping '
              'Aplication " << endl << endl;\n'
              '\tcout << "\\t\\t\\t  Team Name: EightSoft " << endl;\n'
              '\tcout << "\\t\\t\\t  Team Section: OOP2 - '
              '004                         " << endl;\n'
              '\tcout << "\\t\\t\\t  Team Members: " << endl;\n'
              '\tcout << "                             '
              '-----------------------------------------------\\n";\n'
              '\tcout << "\\t\\t\\t\\t      Alimov Abdullokh  '
              '[U1910060]\\n\\t\\t\\t\\t      Zokirov Rustam [U1910049] " << '
              'endl;\n'
              '\tcout << "                             '
              '-----------------------------------------------\\n";\n'
              '\n'
              '\tcout << "\\n\\n\\t\\t           Press any keyboard for back '
              'to Menu \\n\\n" << endl;\n'
              '\tsystem("pause");\n'
              '\tF_General_Menu();\n'
              '}\n')

Fragment(uuid='NORMALIZED-000078',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=245,
         depth=2,
         type='function_decl',
         name='F_Logo',
         text='void F_Logo() {\n'
              '\tsystem("cls");\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "        A L I B A Z A '
              'R                                                    8. Account '
              'Info         \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '}\n')

Fragment(uuid='NORMALIZED-000079',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=252,
         depth=2,
         type='function_decl',
         name='F_Logo_Owner',
         text='void F_Logo_Owner() {\n'
              '\tsystem("cls");\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "        A L I B A Z A '
              'R                                                  O W N E R  M '
              'E N U         \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '}\n')

Fragment(uuid='NORMALIZED-000080',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=260,
         depth=2,
         type='function_decl',
         name='F_Owner_Main_Menu',
         text='void F_Owner_Main_Menu() {\n'
              '\t// Entering as a Owner of shop\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo_Owner();\n'
              '\t\tcout << "      Main Menu\\n\\n";\n'
              '\t\tcout << "      1. Products in stock \\n\\n";\n'
              '\t\tcout << "      2. Customers list \\n\\n";\n'
              '\t\tcout << "      0. Back\\n\\n";\n'
              '\t\tcout << "      Your choice: ";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: {\n'
              '\t\t\t  F_Owner_Products_Stotage();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 50: {\n'
              '\t\t\t/*F_Owner_Customers_List();*/\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                           C U S T O M E R S  '
              'L I S T        \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\n\\t\\t\\t   Customers list :" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      User Name  : " << Name_Memory << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      Telephone  : " << TellNum_Memory << '
              'endl << endl << endl;\n'
              '\t\t\t\n'
              '\t\t\tsystem("pause");\n'
              '\t\t} break;\n'
              '\n'
              '\t\t\n'
              '\t\tcase 48: {  // Back to Menu\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tk = 1000;\n'
              '\t\t\tF_Sign_in();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch \n'
              '\t} // for loop \n'
              '}\n')

Fragment(uuid='NORMALIZED-000081',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=303,
         depth=2,
         type='function_decl',
         name='F_Owner_Products_Stotage',
         text='void F_Owner_Products_Stotage(){\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tF_Logo_Owner();\n'
              '\t\tcout << "  Products List                                '
              'Category                    Price          In Stock\\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\tcout << " 1. Potatoes, Weight                          '
              'Vegetables & Fruits          " << '
              'Test.get_price_potatoes()                << "\\t\\t  " << '
              'Test.get_storage_quantity_potatoes()               << endl;\n'
              '\t\tcout << " 2. Yellow Carrot, Weight                     '
              'Vegetables & Fruits          " << '
              'Test.get_price_carrot()                  << "\\t\\t  " << '
              'Test.get_storage_quantity_carrot()                 << endl;\n'
              '\t\tcout << " 3. Onion, Weight                             '
              'Vegetables & Fruits          " << '
              'Test.get_price_onion()                   << "\\t\\t  " << '
              'Test.get_storage_quantity_onion()                  << endl;\n'
              '\t\tcout << " 4. Water, Hydrolife without gas 750ml        '
              'Water & Beverages            " << '
              'Test1.get_price_water_hydrolife_750ml()  << "\\t\\t  " << '
              'Test1.get_storage_quantity_water_hydrolife_750ml() << endl;\n'
              '\t\tcout << " 5. Drink, Aloe Original 500ml                '
              'Water & Beverages            " << '
              'Test1.get_price_drink_aloe_500ml()       << "\\t\\t  " << '
              'Test1.get_storage_quantity_drink_aloe_500ml()      << endl;\n'
              '\t\tcout << " 6. Nectar, Zet Apple 125ml                   '
              'Water & Beverages            " << '
              'Test1.get_price_nectar_zet_125ml()       << "\\t\\t  " << '
              'Test1.get_storage_quantity_nectar_zet_125ml()      << endl;\n'
              '\t\tcout << " 7. Bun Smart Food                            '
              'Bread & Bakery Products      " << '
              'Test2.get_price_bun_smart_food()         << "\\t\\t  " << '
              'Test2.get_storage_quantity_bun_smart_food()        << endl;\n'
              '\t\tcout << " 8. Cracker Tuc cheese 100g                   '
              'Bread & Bakery Products      " << '
              'Test2.get_price_cracker_tuc_cheese_100g() << "\\t\\t  " << '
              'Test2.get_storage_quantity_cracker_tuc_cheese_100g() << endl;\n'
              '\t\tcout << " 9. Bread Of SAMARKAND                        '
              'Bread & Bakery Products      " << '
              'Test2.get_price_bread_samarkand()         << "\\t\\t  " << '
              'Test2.get_storage_quantity_bread_samarkand() << endl;\n'
              '\t\tcout << " \\n 0. Back\\n";\n'
              '\t\tcout << " Make changes in: ";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase '1': \t\t\t\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Potatoes, Weight                          '
              'Vegetables & Fruits             " << Test.get_price_potatoes() '
              '<< "\\t\\t " << '
              'Test.get_storage_quantity_potatoes()+Test.get_storage_quantity_potatoes() '
              '<< endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or "
              '\'0\'\\n\\n";\n'
              '\t\t\t\t\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << " Enter a new price: ";\n'
              '\t\t\t\t\tcin >> price;\n'
              '\t\t\t\t\tif (price >= 0) {\n'
              '\t\t\t\t\t\tTest.set_price_potatoes(price);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << " Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> quantity;\n'
              '\t\t\t\t\tif (quantity > 0) {\n'
              '\t\t\t\t\t\tTest.set_storage_quantity_potatoes(quantity);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\t\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '2':\t\t\t\n"
              '\t\t    for (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Yellow Carrot, Weight                     '
              'Vegetables & Fruits             " << Test.get_price_carrot() << '
              '"\\t\\t " << Test.get_storage_quantity_carrot() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 3. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> price;\n'
              '\t\t\t\t\tif (price >= 0) {\n'
              '\t\t\t\t\t\tTest.set_price_carrot(price);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> quantity;\n'
              '\n'
              '\t\t\t\t\tif (quantity > 0) {\n'
              '\t\t\t\t\t\tTest.set_storage_quantity_carrot(quantity);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '3': \t\t\t\n"
              '\t\t    for (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Onion, Weight                             '
              'Vegetables & Fruits             " << Test.get_price_onion() << '
              '"\\t\\t " << Test.get_storage_quantity_onion() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> price;\n'
              '\t\t\t\t\tif (price >= 0) {\n'
              '\t\t\t\t\t\tTest.set_price_onion(price);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> quantity;\n'
              '\t\t\t\t\tif (quantity > 0) {\n'
              '\t\t\t\t\t\tTest.set_storage_quantity_onion(quantity);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '4':\t\t\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Water, Hydrolife without gas 750ml        '
              'Water & Beverages               " << '
              'Test1.get_price_water_hydrolife_750ml() << "\\t\\t " << '
              'Test1.get_storage_quantity_water_hydrolife_750ml() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> price;\n'
              '\t\t\t\t\t\n'
              '\t\t\t\t\tif (price >= 0) {\n'
              '\t\t\t\t\t\tTest1.set_price_water_hydrolife_750ml(price);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> quantity;\t\t\t\t\t\n'
              '\t\t\t\t\tif (quantity > 0) {\n'
              '\t\t\t\t\t\t'
              'Test1.set_storage_quantity_water_hydrolife_750ml(quantity);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '5': \t\t\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Drink, Aloe Original 500ml                '
              'Water & Beverages               " << '
              'Test1.get_price_drink_aloe_500ml() << "\\t\\t " << '
              'Test1.get_storage_quantity_drink_aloe_500ml() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> price;\n'
              '\n'
              '\t\t\t\t\tif (price >= 0) {\n'
              '\t\t\t\t\t\tTest1.set_price_drink_aloe_500ml(price);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> quantity;\n'
              '\t\t\t\t\t\n'
              '\t\t\t\t\tif (quantity > 0) {\n'
              '\t\t\t\t\t\t'
              'Test1.set_storage_quantity_drink_aloe_500ml(quantity);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '6':\t\t\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Nectar, Zet Apple 125ml                   '
              'Water & Beverages               " << '
              'Test1.get_price_nectar_zet_125ml() << "\\t\\t " << '
              'Test1.get_storage_quantity_nectar_zet_125ml() << endl;\n'
              '\t\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the '
              "quantity in storage\\n 0. Go back \\n Press '1' or '2' or "
              '\'0\'\\n\\n ";\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> price;\t\n'
              '\t\t\t\t\tif (price >= 0) {\n'
              '\t\t\t\t\t\tTest1.set_price_nectar_zet_125ml(price);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> quantity;\n'
              '\t\t\t\t\tif (quantity > 0) {\n'
              '\t\t\t\t\t\t'
              'Test1.set_storage_quantity_nectar_zet_125ml(quantity);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '7':\t\t\t\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Bun Smart Food                            '
              'Bread & Bakery Products         " << '
              'Test2.get_price_bun_smart_food() << "\\t\\t " << '
              'Test2.get_storage_quantity_bun_smart_food() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> price;\t\n'
              '\t\t\t\t\tif (price >= 0) {\n'
              '\t\t\t\t\t\tTest2.set_price_bun_smart_food(price);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> quantity;\n'
              '\t\t\t\t\tif (quantity > 0) {\n'
              '\t\t\t\t\t\t'
              'Test2.set_storage_quantity_bun_smart_food(quantity);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '8':\t\t\t\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Cracker Tuc cheese 100g                   '
              'Bread & Bakery Products         " << '
              'Test2.get_price_cracker_tuc_cheese_100g() << "\\t\\t " << '
              'Test2.get_storage_quantity_cracker_tuc_cheese_100g() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> price;\n'
              '\t\t\t\t\tif (price >= 0) {\n'
              '\t\t\t\t\t\tTest2.set_price_cracker_tuc_cheese_100g(price);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> quantity;\t\t\t\t\n'
              '\t\t\t\t\tif (quantity > 0) {\n'
              '\t\t\t\t\t\t'
              'Test2.set_storage_quantity_cracker_tuc_cheese_100g(quantity);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '9':\t\t\t\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Bread Of SAMARKAND                        '
              'Bread & Bakery Products         " << '
              'Test2.get_price_bread_samarkand() << "\\t\\t " << '
              'Test2.get_storage_quantity_bread_samarkand() << endl;\n'
              '\t \t\t    cout << "\\n 1. Change price \\n 2. Change the '
              "quantity in storage\\n 0. Go back \\n Press '1' or '2' or "
              '\'0\'\\n\\n ";\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> price;\n'
              '\t\t\t\t\t\n'
              '\t\t\t\t\tif (price >= 0) {\n'
              '\t\t\t\t\t\tTest2.set_price_bread_samarkand(price);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> quantity;\t\t\t\t\t\n'
              '\t\t\t\t\tif (quantity > 0) {\n'
              '\t\t\t\t\t\t'
              'Test2.set_storage_quantity_bread_samarkand(quantity);\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '0': {  // Back to Menu\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\ti = 1000;\n'
              '\t\t\tF_Sign_in();\n'
              '\t\t} break;\n'
              '\n'
              "\t\tcase 'i' || 'I': { // User info   \n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\n\\t\\t\\t   User Information:" << endl;;\n'
              '\t\t\tcout << "\\t\\t    _______________________________" << '
              'endl << endl;;\n'
              '\t\t\tcout << "\\t\\t      User Name  : " << Name_Memory << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      Telephone  : " << TellNum_Memory << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      Login      : " << Login_Memory << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      Password   : " << Parol_Memory << '
              'endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t\n'
              '\t\tdefault: { cout << "\\n\\t\\t      Your choice is not '
              'available in Menu" << endl;\n'
              '\t\t\tcout << "\\t\\tPlease press any keyboard to continue '
              'program\\n" << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} \n'
              '\t\t\n'
              '\t} // for loop for products in stock  \n'
              '}\n')

Fragment(uuid='NORMALIZED-000082',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=719,
         depth=2,
         type='function_decl',
         name='F_Owner_Customers_List',
         text='void F_Owner_Customers_List(){\n'
              '\tsystem("cls");\n'
              '\tofstream User_1_Info;\n'
              '\tUser_1_Info.open("User_Info.txt");  // Opening File\n'
              '\t// Setting User Info to Memory\n'
              '\tUser_1_Info << Name_Memory << endl;\n'
              '\tUser_1_Info << TellNum_Memory << endl;\n'
              '\t//User_1_Info.close();\n'
              '\tcout << "\\n\\t\\t\\t   Customers list :" << endl;;\n'
              '\tcout << "\\t\\t    _______________________________" << endl '
              '<< endl;;\n'
              '\tcout << "\\t\\t      User Name  : " << Name_Memory << endl;\n'
              '\tcout << "\\t\\t      Telephone  : " << TellNum_Memory << endl '
              '<< endl << endl;\n'
              '\tsystem("pause");\n'
              '}\n')

Fragment(uuid='NORMALIZED-000083',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=735,
         depth=2,
         type='function_decl',
         name='F_User_Main_Menu',
         text='void F_User_Main_Menu() {\n'
              '\t// Entering as a Guest\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tF_Logo();\n'
              '\t\tcout << "      Categories\\n\\n";\n'
              '\t\tcout << "      1. Vegetables & Fruits\\n\\n";\n'
              '\t\tcout << "      2. Water & Beverages\\n\\n";\n'
              '\t\tcout << "      3. Bread & Bakery Products\\n\\n";\n'
              '\t\tcout << "      4. Cart and Overall Sums\\n\\n";\n'
              '\t\tcout << "      0. Go Back\\n\\n";\n'
              '\t\tcout << "      Your choice: ";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: {\n'
              '\t\t\tF_Vegetables_Fruits_Menu();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 50: {\n'
              '\t\t\tF_Water_Beverages_Menu();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 51: {\n'
              '\t\t\tF_Bread_Bakery_Menu();\n'
              '\t\t}\n'
              '\t\tcase 52:\n'
              '\t\t{\n'
              '\t\t\tF_Cart_Check();\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 48: {  // Back to Menu\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\ti = 1000;\n'
              '\t\t\tF_Sign_in();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t    User Information:" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch \n'
              '\t} // for loop \n'
              '}\n')

Fragment(uuid='NORMALIZED-000084',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=792,
         depth=2,
         type='function_decl',
         name='F_Table_For_Increasing_And_Decreasing',
         text='void F_Table_For_Increasing_And_Decreasing() {\n'
              '\n'
              '\tcout << "     (+)   \'Press 1\'                        \\n";\n'
              '\tcout << "     (-)   \'Press 2\'                        \\n";\n'
              '\tcout << "     (0)   \'Back\'                           \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\tcout << "     Add to Cart:  \\n";\n'
              '\t//cin >> VariableForIncreasingAndDecreasing;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000085',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=802,
         depth=2,
         type='function_decl',
         name='F_Vegetables_Fruits_Menu',
         text='void F_Vegetables_Fruits_Menu() {\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo();\n'
              '\t\tcout << "      Categories -> Vegetables & Fruits \\t\\t '
              'Cart \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << " 1. Potatoes, Weight \\t\\t\\t\\t\\t"; cout << '
              'Test.get_quantity_potatoes() << " (kg)" << endl;\n'
              '\t\tcout << "    " << Test.get_price_potatoes() << " UZS for 1 '
              'kg\\n\\n";\n'
              '\t\tcout << " 2. Yellow Carrot, Weight \\t\\t\\t\\t"; cout << '
              'Test.get_quantity_carrot() << " (kg)" << endl;\n'
              '\t\tcout << "    " << Test.get_price_carrot() << " UZS for 1 '
              'kg\\n\\n";\n'
              '\t\tcout << " 3. Onion, Weight \\t\\t\\t\\t\\t"; cout << '
              'Test.get_quantity_onion() << " (kg)" << endl;\n'
              '\t\tcout << "    " << Test.get_price_onion() << " UZS for 1 '
              'kg\\n\\n";\n'
              '\t\tcout << " 0. Back\\n\\n";\n'
              '\t\tcout << " Your choice: ";\n'
              '\t\tswitch (_getch()) {\n'
              '\t\t\t// for potatoes\n'
              '\t\tcase 49: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Vegetables & Fruits \\t\\t '
              'Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Potatoes, Weight \\t\\t\\t\\t\\t"; cout '
              '<< Test.get_quantity_potatoes() << " (kg)" << endl;\n'
              '\t\t\t\tcout << "     " << Test.get_price_potatoes() << " UZS '
              'for 1 kg\\n\\n";\n'
              '\t\t\t\t//\n'
              '\t\t\t\t\n'
              '\t            F_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\t\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Test.get_storage_quantity_potatoes() > 0) { // '
              'checking for storage and user needs\n'
              '\t\t\t\t\t\tTest.set_quantity_potatoes_incrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Potatoes (kg): " << '
              'Test.get_quantity_potatoes() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (Test.get_quantity_potatoes() > 0) { // Check for '
              '(-1 kg)\n'
              '\t\t\t\t\t\tTest.set_quantity_potatoes_decrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Potatoes (kg): " << '
              'Test.get_quantity_potatoes() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for potato\n"
              "\t\t\t}// 'for' loop for potato\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // case 2 - for carrot\n'
              '\t\tcase 50: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\t// Rustam have changed\n'
              '\t\t\t\tcout << "      Categories -> Vegetables & Fruits \\t\\t '
              'Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Yellow Carrot, Weight \\t\\t\\t\\t"; cout '
              '<< Test.get_quantity_carrot() << " (kg)" << endl;\n'
              '\t\t\t\tcout << "     " << Test.get_price_carrot() << " UZS for '
              '1 kg\\n\\n";\n'
              '\t\t\t\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\n'
              '\t\t\t\t\t//\n'
              '\t\t\t\t\tif (Test.get_storage_quantity_carrot() > 0) { // '
              'checking for storage and user needs\n'
              '\t\t\t\t\t\tTest.set_quantity_carrot_incrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Carrot (kg): " << '
              'Test.get_quantity_carrot() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\t//\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (Test.get_quantity_carrot() > 0) { // Check for '
              '(-1 kg)\n'
              '\t\t\t\t\t\tTest.set_quantity_carrot_decrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Carrot (kg): " << '
              'Test.get_quantity_carrot() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg) cannot  decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for carrot\n"
              "\t\t\t}// 'for' loop for carrot\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // case 3 - for onion\n'
              '\t\tcase 51: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\t// Rustam have changed\n'
              '\t\t\t\tcout << "      Categories -> Vegetables & Fruits \\t\\t '
              'Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Onion, Weight \\t\\t\\t\\t\\t"; cout << '
              'Test.get_quantity_onion() << " (kg)" << endl;\n'
              '\t\t\t\tcout << "     " << Test.get_price_onion() << " UZS for '
              '1 kg\\n\\n";\n'
              '\t\t\t\t//\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\t\t\t\t\n'
              '\t\t\t\t\tif (Test.get_storage_quantity_onion() > 0) { // '
              'checking for storage and user needs\n'
              '\t\t\t\t\t\tTest.set_quantity_onion_incrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Onion (kg): " << '
              'Test.get_quantity_onion() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t       \t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (Test.get_quantity_onion() > 0) { // Check for (-1 '
              'kg)\n'
              '\t\t\t\t\t\tTest.set_quantity_onion_decrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Onion (kg): " << '
              'Test.get_quantity_onion() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg) cannot  decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for onion\n"
              "\t\t\t}// 'for' loop for onion\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // Back to F_User menu \n'
              '\t\tcase 48: {   k = 1000;\n'
              '\t\t\tF_User_Main_Menu(); }\n'
              '\t\t\t   break;\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t    User Information:" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\t\n'
              '\t\t} // switch ends\n'
              '\t} // loop ends\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000086',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=968,
         depth=2,
         type='function_decl',
         name='F_Water_Beverages_Menu',
         text='void F_Water_Beverages_Menu() {\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo();\n'
              '\t\tcout << "      Categories -> Water & Beverages \\t\\t\\t '
              'Cart \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << " 1. Water, Hydrolife without gas 750ml \\t\\t\\t"; '
              'cout << Test1.get_quantity_water_hydrolife_750ml() << " (pc)" '
              '<< endl;\n'
              '\t\tcout << "    " << Test1.get_price_water_hydrolife_750ml() '
              '<< " UZS for 1 pc\\n\\n";\n'
              '\t\tcout << " 2. Drink, Aloe Original 500ml \\t\\t\\t\\t"; cout '
              '<< Test1.get_quantity_drink_aloe_500ml() << " (pc)" << endl;\n'
              '\t\tcout << "    " << Test1.get_price_drink_aloe_500ml() << " '
              'UZS for 1 pc\\n\\n";\n'
              '\t\tcout << " 3. Nectar, Zet Apple 125ml \\t\\t\\t\\t"; cout << '
              'Test1.get_quantity_nectar_zet_125ml() << " (pc)" << endl;\n'
              '\t\tcout << "    " << Test1.get_price_nectar_zet_125ml() << " '
              'UZS for 1 pc\\n\\n";\n'
              '\t\tcout << " 0. Back\\n\\n";\n'
              '\t\tcout << " Your choice: ";\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Water & Beverages '
              '\\t\\t\\t Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Water, Hydrolife without gas 750ml '
              '\\t\\t  "; cout << Test1.get_quantity_water_hydrolife_750ml() '
              '<< " (pc)" << endl;\n'
              '\t\t\t\tcout << "     " << '
              'Test1.get_price_water_hydrolife_750ml() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif '
              '(Test1.get_storage_quantity_water_hydrolife_750ml() > 0) { // '
              'checking for storage and user needs\n'
              '\t\t\t\t\t\t'
              'Test1.set_quantity_water_hydrolife_750ml_incrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Bottles (pc): " << '
              'Test1.get_quantity_water_hydrolife_750ml() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (Test1.get_quantity_water_hydrolife_750ml() > 0) { '
              '// Check for (-1 kg)\n'
              '\t\t\t\t\t\t'
              'Test1.set_quantity_water_hydrolife_750ml_decrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Bottles (pc): " << '
              'Test1.get_quantity_water_hydrolife_750ml() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for water\n"
              "\t\t\t}// 'for' loop for water\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // case 2 - for drink_aloe_500ml\n'
              '\t\tcase 50: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\t// Rustam have changed\n'
              '\t\t\t\tcout << "      Categories -> Water & Beverages '
              '\\t\\t\\t Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Drink, Aloe Original 500ml \\t\\t\\t  "; '
              'cout << Test1.get_quantity_drink_aloe_500ml() << " (pc)" << '
              'endl;\n'
              '\t\t\t\tcout << "     " << Test1.get_price_drink_aloe_500ml() '
              '<< " UZS for 1 pc\\n\\n";\n'
              '\t\t\t\t//\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Test1.get_storage_quantity_drink_aloe_500ml() > '
              '0) { // checking for storage and user needs\n'
              '\t\t\t\t\t\t'
              'Test1.set_quantity_drink_aloe_500ml_incrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Bottles (pc): " << '
              'Test1.get_quantity_drink_aloe_500ml() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (Test1.get_quantity_drink_aloe_500ml() > 0) { // '
              'Check for (-1 kg)\n'
              '\t\t\t\t\t\t'
              'Test1.set_quantity_drink_aloe_500ml_decrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Bottles (pc): " << '
              'Test1.get_quantity_drink_aloe_500ml() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) cannot  decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for aloe drink\n"
              "\t\t\t}// 'for' loop for aloe drink\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // case 3 - for nectar_zet_125ml\n'
              '\t\tcase 51: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\t// Rustam have changed\n'
              '\t\t\t\tcout << "      Categories -> Water & Beverages '
              '\\t\\t\\t Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Nectar, Zet Apple 125ml \\t\\t\\t\\t"; '
              'cout << Test1.get_quantity_nectar_zet_125ml() << " (pc)" << '
              'endl;\n'
              '\t\t\t\tcout << "     " <<Test1.get_price_nectar_zet_125ml() << '
              '" UZS for 1 pc\\n\\n";\n'
              '\t\t\t\t//\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\t//\n'
              '\t\t\t\t\tif (Test1.get_storage_quantity_nectar_zet_125ml() > '
              '0) { // checking for storage and user needs\n'
              '\t\t\t\t\t\t'
              'Test1.set_quantity_nectar_zet_125ml_incrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Nectar 125ml (pc): " << '
              'Test1.get_quantity_nectar_zet_125ml() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (Test1.get_quantity_nectar_zet_125ml() > 0) { // '
              'Check for (-1 kg)\n'
              '\t\t\t\t\t\t'
              'Test1.set_quantity_nectar_zet_125ml_decrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Nectar 125ml (pc): " << '
              'Test1.get_quantity_nectar_zet_125ml() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) cannot  decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for nectar_zet_125ml\n"
              "\t\t\t}// 'for' loop for nectar_zet_125ml\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // Back to F_User menu \n'
              '\t\tcase 48: {   k = 1000;\n'
              '\t\t\tF_User_Main_Menu(); }\n'
              '\t\t\t   break;\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t    User Information:" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch ends\n'
              '\n'
              '\t} // loop ends\n'
              '\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000087',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=1128,
         depth=2,
         type='function_decl',
         name='F_Bread_Bakery_Menu',
         text='void F_Bread_Bakery_Menu() {\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo();\n'
              '\t\tcout << "      Categories -> Bread & Bakery Products \\t\\t '
              'Cart \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << " 1. Bun Smart Food \\t\\t\\t\\t\\t"; cout << '
              'Test2.get_quantity_bun_smart_food() << " (pc)" << endl;\n'
              '\t\tcout << "    " << Test2.get_price_bun_smart_food() << " UZS '
              'for 1 pc\\n\\n";\n'
              '\t\tcout << " 2. Cracker Tuc cheese 100g \\t\\t\\t\\t"; cout << '
              'Test2.get_quantity_cracker_tuc_cheese_100g() << " (pc)" << '
              'endl;\n'
              '\t\tcout << "    " << Test2.get_price_cracker_tuc_cheese_100g() '
              '<< " UZS for 1 pc\\n\\n";\n'
              '\t\tcout << " 3. Bread Of SAMARKAND \\t\\t\\t\\t\\t"; cout << '
              'Test2.get_quantity_bread_samarkand() << " (pc)" << endl;\n'
              '\t\tcout << "    " << Test2.get_price_bread_samarkand() << " '
              'UZS for 1 pc\\n\\n";\n'
              '\t\tcout << " 0. Back\\n\\n";\n'
              '\t\tcout << " Your choice: ";\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Bread & Bakery Products '
              '\\t\\t Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Bun Smart Food \\t\\t\\t\\t\\t"; cout << '
              'Test2.get_quantity_bun_smart_food() << " (pc)" << endl;\n'
              '\t\t\t\tcout << "     " << Test2.get_price_bun_smart_food() << '
              '" UZS for 1 pc\\n\\n";\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Test2.get_storage_quantity_bun_smart_food() > 0) '
              '{ // checking for storage and user needs\n'
              '\t\t\t\t\t\tTest2.set_quantity_bun_smart_food_incrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Bun Smart Food (pc): " << '
              'Test2.get_quantity_bun_smart_food() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (Test2.get_quantity_bun_smart_food() > 0) { // '
              'Check for (-1 pc)\n'
              '\t\t\t\t\t\tTest2.set_quantity_bun_smart_food_decrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Bun Smart Food (pc): " << '
              'Test2.get_quantity_bun_smart_food() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for bun bread\n"
              "\t\t\t}// 'for' loop for bun bread\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // case 2 - for cracker_tuc_cheese_100g\n'
              '\t\tcase 50: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\t// Rustam have changed\n'
              '\t\t\t\tcout << "      Categories -> Bread & Bakery Products '
              '\\t\\t Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Cracker Tuc cheese 100g  \\t\\t\\t\\t"; '
              'cout << Test2.get_quantity_cracker_tuc_cheese_100g() << " (pc)" '
              '<< endl;\n'
              '\t\t\t\tcout << "     " << '
              'Test2.get_price_cracker_tuc_cheese_100g() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\t\t\t\t//\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\t\n'
              '\t\t\t\t\tif '
              '(Test2.get_storage_quantity_cracker_tuc_cheese_100g() > 0) { // '
              'checking for storage and user needs\n'
              '\t\t\t\t\t\t'
              'Test2.set_quantity_cracker_tuc_cheese_100g_incrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Cracker Tuc Cheese 100g (pc): '
              '" << Test2.get_quantity_cracker_tuc_cheese_100g() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t\t\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (Test2.get_quantity_cracker_tuc_cheese_100g() > 0) '
              '{ // Check for (-1 pc)\n'
              '\t\t\t\t\t\t'
              'Test2.set_quantity_cracker_tuc_cheese_100g_decrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Cracker Tuc Cheese 100g (pc): '
              '" << Test2.get_quantity_cracker_tuc_cheese_100g() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) cannot  decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for cracker_tuc_cheese_100g\n"
              "\t\t\t}// 'for' loop for cracker_tuc_cheese_100g\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // case 3 - for bread_samarkand\n'
              '\t\tcase 51: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\t// Rustam have changed\n'
              '\t\t\t\tcout << "      Categories -> Bread & Bakery Products '
              '\\t\\t Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Bread Of SAMARKAND \\t\\t\\t\\t  "; cout '
              '<< Test2.get_quantity_bread_samarkand() << " (pc)" << endl;\n'
              '\t\t\t\tcout << "     " << Test2.get_price_bread_samarkand() << '
              '" UZS for 1 pc\\n\\n";\n'
              '\t\t\t\t\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Test2.get_storage_quantity_bread_samarkand() > 0) '
              '{ // checking for storage and user needs\n'
              '\t\t\t\t\t\tTest2.set_quantity_bread_samarkand_incrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Bread Of SAMARKAND (pc): " << '
              'Test2.get_quantity_bread_samarkand() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (Test2.get_quantity_bread_samarkand() > 0) { // '
              'Check for (-1 pc)\n'
              '\t\t\t\t\t\tTest2.set_quantity_bread_samarkand_decrementing();\n'
              '\t\t\t\t\t\tcout << " Quantity of Bread Of SAMARKAND (pc): " << '
              'Test2.get_quantity_bread_samarkand() << endl;\n'
              '\t\t\t\t\t\tcout << "   Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) cannot  decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for bread_samarkand\n"
              "\t\t\t}// 'for' loop for bread_samarkand\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // Back to F_User menu \n'
              '\t\tcase 48: {   k = 1000;\n'
              '\t\t\tF_User_Main_Menu(); }\n'
              '\t\t\t   break;\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t    User Information:" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch ends\n'
              '\n'
              '\t} // loop ends\n'
              '\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000088',
         path='/E-Commerce App V1.0/main.cpp',
         lineno=1290,
         depth=2,
         type='function_decl',
         name='F_Cart_Check',
         text='void F_Cart_Check() {\n'
              '\tsystem("cls");\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "                                              C A R '
              'T \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t// Check\n'
              '\tfor (int i = 1; i <= 1; i++) {\n'
              '\t\tif (Test.get_quantity_potatoes() > 0) {\n'
              '\t\t\tcout << "\\n\\t  " << i << "." << "Potatoes, Weight    " '
              '<< Test.get_quantity_potatoes() << " (kg)     Price: " << '
              'Test.get_quantity_potatoes() * Test.get_price_potatoes();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += Test.get_quantity_potatoes() * '
              'Test.get_price_potatoes();\n'
              '\t\t}\n'
              '\t\tif (Test.get_quantity_carrot() > 0) {\n'
              '\t\t\tcout << "\\n\\t  " << i << "." << "Carrot, Weight      " '
              '<< Test.get_quantity_carrot() << " (kg)     Price: " << '
              'Test.get_quantity_carrot() * Test.get_price_carrot();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += Test.get_quantity_carrot() * '
              'Test.get_price_carrot();\n'
              '\t\t}\n'
              '\t\tif (Test.get_quantity_onion() > 0) {\n'
              '\t\t\tcout << "\\n\\t  " << i << "." << "Onion, Weight       " '
              '<< Test.get_quantity_onion() << " (kg)     Price: " << '
              'Test.get_quantity_onion() * Test.get_price_onion();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += Test.get_quantity_onion() * '
              'Test.get_price_onion();\n'
              '\t\t}\n'
              '\t\tif (Test1.get_quantity_drink_aloe_500ml() > 0) {\n'
              '\t\t\tcout << "\\n\\t  " << i << "." << "Aloe 500ml          " '
              '<< Test1.get_quantity_drink_aloe_500ml() << " (pc)     Price: " '
              '<< Test1.get_quantity_drink_aloe_500ml() * '
              'Test1.get_price_drink_aloe_500ml();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += Test1.get_quantity_drink_aloe_500ml() * '
              'Test1.get_price_drink_aloe_500ml();\n'
              '\t\t}\n'
              '\t\tif (Test1.get_quantity_nectar_zet_125ml() > 0) {\n'
              '\t\t\tcout << "\\n\\t  " << i << "." << "Nectar Zet 125ml    " '
              '<< Test1.get_quantity_nectar_zet_125ml() << " (pc)     Price: " '
              '<< Test1.get_quantity_nectar_zet_125ml() * '
              'Test1.get_price_nectar_zet_125ml();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += Test1.get_quantity_nectar_zet_125ml() * '
              'Test1.get_price_nectar_zet_125ml();\n'
              '\t\t}\n'
              '\t\tif (Test1.get_quantity_water_hydrolife_750ml() > 0) {\n'
              '\t\t\tcout << "\\n\\t  " << i << "." << "Hydrolife 750ml     " '
              '<< Test1.get_quantity_water_hydrolife_750ml() << " (pc)     '
              'Price: " << Test1.get_quantity_water_hydrolife_750ml() * '
              'Test1.get_price_water_hydrolife_750ml();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += Test1.get_quantity_water_hydrolife_750ml() '
              '* Test1.get_price_water_hydrolife_750ml();\n'
              '\t\t}\n'
              '\t\tif (Test2.get_quantity_bread_samarkand() > 0) {\n'
              '\t\t\tcout << "\\n\\t  " << i << "." << "Samarkand Bread ,   " '
              '<< Test2.get_quantity_bread_samarkand() << " (pc)     Price: " '
              '<< Test2.get_quantity_bread_samarkand() * '
              'Test2.get_price_bread_samarkand();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += Test2.get_quantity_bread_samarkand() * '
              'Test2.get_price_bread_samarkand();\n'
              '\t\t}\n'
              '\t\tif (Test2.get_quantity_bun_smart_food() > 0) {\n'
              '\t\t\tcout << "\\n\\t  " << i << "." << "Bun Smart Food ,    " '
              '<< Test2.get_quantity_bun_smart_food() << " (pc)     Price: " '
              '<< Test2.get_quantity_bun_smart_food() * '
              'Test2.get_price_bun_smart_food();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += Test2.get_quantity_bun_smart_food() * '
              'Test2.get_price_bun_smart_food();\n'
              '\t\t}\n'
              '\t\tif (Test2.get_quantity_cracker_tuc_cheese_100g() > 0) {\n'
              '\t\t\tcout << "\\n\\t  " << i << "." << "Tuc Cheese 100g ,   " '
              '<< Test2.get_quantity_cracker_tuc_cheese_100g() << " (pc)     '
              'Price: " << Test2.get_quantity_cracker_tuc_cheese_100g() * '
              'Test2.get_price_cracker_tuc_cheese_100g();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += '
              'Test2.get_quantity_cracker_tuc_cheese_100g() * '
              'Test2.get_price_cracker_tuc_cheese_100g();\n'
              '\t\t}\n'
              '\n'
              '\t\tif (i == 1) { // if nothing go to Menu\n'
              '\t\t\tcout << "\\n\\t You do not have any product in '
              'CART.\\n";\n'
              '\t\t\tcout << "\\tEnter any keyboard go to Menu\\n\\n" << '
              'endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tOverall_Sum = 0;\n'
              '\t\t\tF_User_Main_Menu();\n'
              '\t\t}\n'
              '\t\tif (i > 1) { // Menu for buying or back \n'
              '\t\t\tcout << "\\n\\n\\t\\t Overall Price: " << Overall_Sum << '
              '" Sum" << endl;\n'
              '\t\t\tcout << "\\n 1. Buy it now" << endl;\n'
              '\t\t\tcout << " 0. Go Back to Menu" << endl;\n'
              '\n'
              '\t\t\tswitch (_getch()) {\n'
              '\t\t\tcase 49: { //buy\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\t////\n'
              '\t\t\t\t// We need to add\n'
              '\t\t\t\t////\n'
              '\t\t\t\tcout << "Works !" << endl;\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t}\n'
              '\t\t\t\t   break;\n'
              '\t\t\tcase 48: { // Back\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tOverall_Sum = 0;\n'
              '\t\t\t\tF_User_Main_Menu();\n'
              '\t\t\t}\n'
              '\t\t\t\t   break;\n'
              '\t\t\tdefault: F_Cart_Check();\n'
              '\t\t\t} // switch ends\n'
              '\n'
              '\t\t} //if ends\n'
              '\n'
              '\t}// loop end\n'
              '\t//system("pause");\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000089',
         path='/E-Commerce App V2.0/Loading_Page.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V2.0/Loading_Page.h\n'
              '  Functions: F_Loading, gotoXY\n')

Fragment(uuid='NORMALIZED-000090',
         path='/E-Commerce App V2.0/Loading_Page.h',
         lineno=6,
         depth=2,
         type='function_decl',
         name='gotoXY',
         text='void gotoXY(int x, int y) {\n'
              "\t//'COORD' is a built in function for positioning the objects\n"
              '\tCOORD d;\n'
              '\td.X = x;\n'
              '\td.Y = y;\n'
              '\tSetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), '
              'd);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000091',
         path='/E-Commerce App V2.0/Loading_Page.h',
         lineno=14,
         depth=2,
         type='function_decl',
         name='F_Loading',
         text='void F_Loading() {\n'
              '\tcout << "\\n\\n\\n\\n\\n\\n";\n'
              '\tcout << "\\t\\t\\t       '
              '-------------------------------------  \\n";\n'
              '\tcout << "\\t\\t\\t         E I G H T S O F T  A C A D E M '
              'Y      \\n";\n'
              '\tcout << "\\t\\t\\t       '
              '-------------------------------------  \\n";\n'
              '\tcout << "\\t\\t\\t                   A L I B A Z A '
              'R             \\n";\n'
              '\tcout << "\\t\\t\\t       '
              '_____________________________________  \\n";\n'
              '\n'
              '\tchar a = 219;\n'
              '\tgotoXY(45, 14);\n'
              '\n'
              '\tcout << "LOADING... " << endl;\n'
              '\n'
              '\tgotoXY(37, 16);\n'
              '\tfor (int r = 1; r <= 26; r++)\n'
              '\t{\n'
              '\t\t//for speed\n'
              '\t\tfor (int speed = 0; speed <= 12000000; speed++);\n'
              '\t\tcout << a;\n'
              '\t}\n'
              '\tcout << endl;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000092',
         path='/E-Commerce App V2.0/Person.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V2.0/Person.h\n'
              '  Variable declarations: Owner, Person, Security, User\n')

Fragment(uuid='NORMALIZED-000093',
         path='/E-Commerce App V2.0/Person.h',
         lineno=28,
         depth=2,
         type='var_decl',
         name='Security',
         text='')

Fragment(uuid='NORMALIZED-000094',
         path='/E-Commerce App V2.0/Person.h',
         lineno=28,
         depth=2,
         type='var_decl',
         name='Person',
         text='')

Fragment(uuid='NORMALIZED-000095',
         path='/E-Commerce App V2.0/Person.h',
         lineno=43,
         depth=2,
         type='var_decl',
         name='User',
         text='')

Fragment(uuid='NORMALIZED-000096',
         path='/E-Commerce App V2.0/Person.h',
         lineno=43,
         depth=2,
         type='var_decl',
         name='Security',
         text='')

Fragment(uuid='NORMALIZED-000097',
         path='/E-Commerce App V2.0/Person.h',
         lineno=84,
         depth=2,
         type='var_decl',
         name='Owner',
         text='')

Fragment(uuid='NORMALIZED-000098',
         path='/E-Commerce App V2.0/Person.h',
         lineno=84,
         depth=2,
         type='var_decl',
         name='Security',
         text='')

Fragment(uuid='NORMALIZED-000099',
         path='/E-Commerce App V2.0/Products.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V2.0/Products.h\n'
              '  Variable declarations: Drinks, Foods, Products, Vegetables\n')

Fragment(uuid='NORMALIZED-000100',
         path='/E-Commerce App V2.0/Products.h',
         lineno=8,
         depth=2,
         type='var_decl',
         name='Products',
         text='')

Fragment(uuid='NORMALIZED-000101',
         path='/E-Commerce App V2.0/Products.h',
         lineno=22,
         depth=2,
         type='var_decl',
         name='Vegetables',
         text='')

Fragment(uuid='NORMALIZED-000102',
         path='/E-Commerce App V2.0/Products.h',
         lineno=22,
         depth=2,
         type='var_decl',
         name='Products',
         text='')

Fragment(uuid='NORMALIZED-000103',
         path='/E-Commerce App V2.0/Products.h',
         lineno=52,
         depth=2,
         type='var_decl',
         name='Drinks',
         text='')

Fragment(uuid='NORMALIZED-000104',
         path='/E-Commerce App V2.0/Products.h',
         lineno=52,
         depth=2,
         type='var_decl',
         name='Products',
         text='')

Fragment(uuid='NORMALIZED-000105',
         path='/E-Commerce App V2.0/Products.h',
         lineno=81,
         depth=2,
         type='var_decl',
         name='Foods',
         text='')

Fragment(uuid='NORMALIZED-000106',
         path='/E-Commerce App V2.0/Products.h',
         lineno=81,
         depth=2,
         type='var_decl',
         name='Products',
         text='')

Fragment(uuid='NORMALIZED-000107',
         path='/E-Commerce App V2.0/User_Info.txt',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='Rustam\n'
              '123456789\n'
              'Rustam202\n'
              'Rustam202\n'
              '\n'
              'Alimov\n'
              '123456789\n'
              'Alimov808\n'
              'Alimov808\n'
              '\n'
              'Rustam\n'
              '123456789\n'
              '1\n'
              '1\n'
              'Alimov\n'
              '123456789\n'
              'Alimov_8\n'
              'Alimov808\n'
              'Rddfrbd\n'
              '123422222\n'
              'Rssss3_3\n'
              'Errffgh543\n'
              'Rustam\n'
              '1345646985\n'
              'Alimov_8\n'
              'Rustam202\n')

Fragment(uuid='NORMALIZED-000108',
         path='/E-Commerce App V2.0/User_Info.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /E-Commerce App V2.0/User_Info.txt\n')

Fragment(uuid='NORMALIZED-000109',
         path='/E-Commerce App V2.0/Validation.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V2.0/Validation.h\n'
              '  Variable declarations: Login_Sign, Name_Memory, Num_Lower, '
              'Num_Number, Num_Upper, Validation, Validation_C, namespace\n')

Fragment(uuid='NORMALIZED-000110',
         path='/E-Commerce App V2.0/Validation.h',
         lineno=8,
         depth=2,
         type='var_decl',
         name='namespace',
         text='')

Fragment(uuid='NORMALIZED-000111',
         path='/E-Commerce App V2.0/Validation.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='Num_Upper',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000112',
         path='/E-Commerce App V2.0/Validation.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='Num_Lower',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000113',
         path='/E-Commerce App V2.0/Validation.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='Num_Number',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000114',
         path='/E-Commerce App V2.0/Validation.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='Validation',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000115',
         path='/E-Commerce App V2.0/Validation.h',
         lineno=13,
         depth=2,
         type='var_decl',
         name='Login_Sign',
         text='')

Fragment(uuid='NORMALIZED-000116',
         path='/E-Commerce App V2.0/Validation.h',
         lineno=17,
         depth=2,
         type='var_decl',
         name='Name_Memory',
         text='')

Fragment(uuid='NORMALIZED-000117',
         path='/E-Commerce App V2.0/Validation.h',
         lineno=20,
         depth=2,
         type='var_decl',
         name='Validation_C',
         text='')

Fragment(uuid='NORMALIZED-000118',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V2.0/main.cpp\n'
              '  Functions: F_Bread_Bakery_Menu, F_Cart_Check, F_Developers, '
              'F_General_Menu, F_Logo, F_Logo_Owner, F_Owner_Customers_List, '
              'F_Owner_Main_Menu, F_Owner_Products_Stotage, F_Sign_in, '
              'F_Table_For_Increasing_And_Decreasing, F_User_Main_Menu, '
              'F_Vegetables_Fruits_Menu, F_Water_Beverages_Menu, User_1, main\n'
              '  Variable declarations: Ch_Price, Ch_Quantity, Onion, '
              'Overall_Sum, Owner_Login_Sign, Owner_Parol_Sign, Pizza, '
              'User_Validtaion, Water\n')

Fragment(uuid='NORMALIZED-000119',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=23,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-000120',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=26,
         depth=2,
         type='var_decl',
         name='User_Validtaion',
         text='Validation_C User_Validtaion;\n')

Fragment(uuid='NORMALIZED-000121',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=27,
         depth=2,
         type='function_decl',
         name='User_1',
         text='')

Fragment(uuid='NORMALIZED-000122',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=30,
         depth=2,
         type='var_decl',
         name='Onion',
         text='Vegetables Onion("Onion", 3600.0, 10), Potatoes("Potatoes", '
              '7890.0, 10), Carrot("Carrot", 4890.0, 10);\n')

Fragment(uuid='NORMALIZED-000123',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=31,
         depth=2,
         type='var_decl',
         name='Water',
         text='Drinks Water("Water", 1590.0, 10), Pepsi("Pepsi", 3590.0, 10), '
              'Nectar("Nectar", 7550.0, 10);\n')

Fragment(uuid='NORMALIZED-000124',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=32,
         depth=2,
         type='var_decl',
         name='Pizza',
         text='Foods Pizza("Pizza", 48000.0, 10), Burger("Burger", 19000, 10), '
              'Fries("Potatoe Fries", 15000, 10);\n')

Fragment(uuid='NORMALIZED-000125',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=35,
         depth=2,
         type='var_decl',
         name='Overall_Sum',
         text='long double Overall_Sum;\n')

Fragment(uuid='NORMALIZED-000126',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=36,
         depth=2,
         type='var_decl',
         name='Ch_Price',
         text='long double Ch_Price, Ch_Quantity;\n')

Fragment(uuid='NORMALIZED-000127',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=36,
         depth=2,
         type='var_decl',
         name='Ch_Quantity',
         text='long double Ch_Price, Ch_Quantity;\n')

Fragment(uuid='NORMALIZED-000128',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=39,
         depth=2,
         type='var_decl',
         name='Owner_Login_Sign',
         text='string Owner_Login_Sign = "Alimov808";\n')

Fragment(uuid='NORMALIZED-000129',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=40,
         depth=2,
         type='var_decl',
         name='Owner_Parol_Sign',
         text='string Owner_Parol_Sign = "Rustam202";\n')

Fragment(uuid='NORMALIZED-000130',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=45,
         depth=2,
         type='function_decl',
         name='F_General_Menu',
         text='')

Fragment(uuid='NORMALIZED-000131',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=46,
         depth=2,
         type='function_decl',
         name='F_Sign_in',
         text='')

Fragment(uuid='NORMALIZED-000132',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=47,
         depth=2,
         type='function_decl',
         name='F_Developers',
         text='')

Fragment(uuid='NORMALIZED-000133',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=48,
         depth=2,
         type='function_decl',
         name='F_Logo',
         text='')

Fragment(uuid='NORMALIZED-000134',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=49,
         depth=2,
         type='function_decl',
         name='F_Logo_Owner',
         text='')

Fragment(uuid='NORMALIZED-000135',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=52,
         depth=2,
         type='function_decl',
         name='F_User_Main_Menu',
         text='')

Fragment(uuid='NORMALIZED-000136',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=53,
         depth=2,
         type='function_decl',
         name='F_Table_For_Increasing_And_Decreasing',
         text='')

Fragment(uuid='NORMALIZED-000137',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=54,
         depth=2,
         type='function_decl',
         name='F_Vegetables_Fruits_Menu',
         text='')

Fragment(uuid='NORMALIZED-000138',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=55,
         depth=2,
         type='function_decl',
         name='F_Water_Beverages_Menu',
         text='')

Fragment(uuid='NORMALIZED-000139',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=56,
         depth=2,
         type='function_decl',
         name='F_Bread_Bakery_Menu',
         text='')

Fragment(uuid='NORMALIZED-000140',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=57,
         depth=2,
         type='function_decl',
         name='F_Cart_Check',
         text='')

Fragment(uuid='NORMALIZED-000141',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=59,
         depth=2,
         type='function_decl',
         name='F_Owner_Main_Menu',
         text='')

Fragment(uuid='NORMALIZED-000142',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=60,
         depth=2,
         type='function_decl',
         name='F_Owner_Products_Stotage',
         text='')

Fragment(uuid='NORMALIZED-000143',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=61,
         depth=2,
         type='function_decl',
         name='F_Owner_Customers_List',
         text='')

Fragment(uuid='NORMALIZED-000144',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=65,
         depth=2,
         type='function_decl',
         name='main',
         text='int main() {\n'
              '\n'
              '\t//Loading\n'
              '\tF_Loading();\n'
              '\tF_General_Menu();\n'
              '\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000145',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=76,
         depth=2,
         type='function_decl',
         name='F_General_Menu',
         text='void F_General_Menu() {\n'
              '\t// Main Menu \n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\tcout << "        A L I B A Z A '
              'R                                             A U T H E N T I C '
              'A T I O N     \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << "\\t\\t\\t\\t\\t  Authentication \\n" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   1. Sign in" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   2. Sign up" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   3. About" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   0. Exit" << endl << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t  Your Choice: ";\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: { // Sign in\n'
              '\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_Sign_in();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tcase 50: {  // Register\n'
              '\t\t\t\t\t // Set details with validation \n'
              '\t\t\tfor (int i = 0; i != 1;) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << "        A L I B A Z A '
              'R                                             R E G I S T R A T '
              'I O N         \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t       Example of Registration: " '
              '<< endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t       ________________________" '
              '<< endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        User Name : Abdullokh " << '
              'endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        Telephone : 974006102 " << '
              'endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        Login     : Alimov_8 " << '
              'endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        Password  : Alimov808 " << '
              'endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t       ________________________" '
              '<< endl << endl;\n'
              '\t\t\t\tUser_Validtaion.SetUser();\n'
              '\n'
              '\t\t\t\t////////////\n'
              '\n'
              '\t\t\t\tValidationParol(User_Validtaion);\n'
              '\t\t\t\tValidationName(User_Validtaion);\n'
              '\t\t\t\tValidationTellNum(User_Validtaion);\n'
              '\t\t\t\tif (Validation == 3) {\n'
              '\t\t\t\t\t////// File Handling For User Info\n'
              '\t\t\t\t\tofstream User_Info;\n'
              '\t\t\t\t\tUser_Info.open("User_Info.txt", ios::app);  // '
              'Opening File\n'
              '\t\t\t\t\t// Setting User Info in Memory\n'
              '\t\t\t\t\tUser_Info << Name_Memory << endl;\n'
              '\t\t\t\t\tUser_Info << TellNum_Memory << endl;\n'
              '\t\t\t\t\tUser_Info << Login_Memory << endl;\n'
              '\t\t\t\t\tUser_Info << Parol_Memory << endl;\n'
              '\t\t\t\t\tUser_Info.close();\n'
              '\t\t\t\t\t///////// End of the File Handling\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t '
              '__________________________________" << endl;\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t      Correct Validation" << '
              'endl;\n'
              '\t\t\t\t\ti++;\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\tPlease press any key to '
              'continue..." << endl << endl;\n'
              '\t\t\t\t\tsystem("Pause");\n'
              '\t\t\t\t\tValidation = 0;\n'
              '\t\t\t\t}\n'
              '\t\t\t\telse {\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t '
              '__________________________________" << endl;\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t       Invalid Validation" << '
              'endl;\n'
              '\t\t\t\t\tcout << "\\t\\t\\t    Please press any key to rewrite '
              'details..." << endl << endl;\n'
              '\t\t\t\t\tsystem("Pause"); system("cls");\n'
              '\t\t\t\t\tValidation = 0;\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tcase 51: {  // Developers\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_Developers();\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tcase 48: {  // Developers\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\n\\n\\n\\n\\t\\t\\t\\tThank you for your '
              'attention!\\n\\n\\n\\n\\n\\n\\n\\n\\n";\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tdefault: {  cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t}\n'
              '\t}\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-000146',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=172,
         depth=2,
         type='function_decl',
         name='F_Developers',
         text='void F_Developers() {\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "        A L I B A Z A '
              'R                                                           A B '
              'O U T        \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\tcout << "\\n\\t\\t\\t\\t\'AliBazar\' Online Shopping '
              'Aplication " << endl << endl;\n'
              '\tcout << "\\t\\t\\t\\t   Team Name: EightSoft " << endl;\n'
              '\tcout << "\\t\\t\\t\\tTeam Section: OOP2 - '
              '004                         " << endl;\n'
              '\tcout << "\\t\\t\\t\\tTeam Members: " ;\n'
              '\tcout << "Alimov Abdullokh [U1910060]\\n\\t\\t\\t\\t\\t      '
              'Zokirov Rustam   [U1910049] " << endl;\n'
              '\n'
              '\tcout << "\\n\\n\\t\\t\\t\\tPress any key to go back to Menu '
              '\\n\\n" << endl;\n'
              '\tsystem("pause");\n'
              '\tF_General_Menu();\n'
              '}\n')

Fragment(uuid='NORMALIZED-000147',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=188,
         depth=2,
         type='function_decl',
         name='F_Sign_in',
         text='void F_Sign_in() {\n'
              '\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\tcout << "        A L I B A Z A '
              'R                                                       S I G '
              'N  I N          \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << "\\t\\t\\t\\t\\t     Sign in\\n\\n";\n'
              '\t\tcout << "\\t\\t\\t\\t\\t1. Sign in as Owner" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t2. Sign in as User" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t0. Back" << endl << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   Your Choice: ";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: { // Sign in as Owner\n'
              '\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                          O W '
              'N E R          \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t        Owner '
              'Authentication\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\tLogin    : "; cin >> Login_Sign;\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\tPassword : "; cin >> Parol_Sign;\n'
              '\t\t\tif (Login_Sign == Owner_Login_Sign && Parol_Sign == '
              'Owner_Parol_Sign) {\n'
              "\t\t\t\t/////// Owner's Menu\n"
              '\t\t\t\tF_Owner_Main_Menu();\n'
              '\t\t\t\t//////\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t}\n'
              "\t\t\telse {  // If Login hasn't Registered\n"
              '\t\t\t\tcout << "\\n\\n\\t\\t\\t        Your Login and Password '
              'are Invalid." << endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t   Please press any key to go back to '
              '\'Sign in\' Menu.\\n\\n" << endl;\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t\tF_Sign_in();\n'
              '\t\t\t}\n'
              '\t\t}   break;\n'
              '\n'
              '\t\tcase 50: {  // Sign in as User\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                     C U S T O '
              'M E R         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Customer '
              'Authentication\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\tLogin    : "; cin >> Login_Sign;\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\tPassword : "; cin >> Parol_Sign;\n'
              '\n'
              '\t\t\t//////   File Handling For User Info\n'
              '\t\t\tifstream Search;\n'
              '\t\t\tSearch.open("User_Info.txt");\n'
              '\t\t\twhile (Search) {\n'
              '\t\t\t\tSearch >> Name_Memory;\n'
              '\t\t\t\tSearch >> TellNum_Memory;\n'
              '\t\t\t\tSearch >> Login_Memory;\n'
              '\t\t\t\tSearch >> Parol_Memory;\n'
              '\t\t\t\tif (Login_Sign == Login_Memory && Parol_Sign == '
              'Parol_Memory) {\n'
              '\t\t\t\t\tUser User_1(Name_Memory, TellNum_Memory, '
              'Login_Memory, Parol_Memory);\n'
              '\t\t\t\t\tF_User_Main_Menu();\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tSearch.close();\n'
              '\t\t\t///////// End of the File Handling\n'
              '\t\t\tcout << "\\n\\n\\t\\t\\t        Your Login and Password '
              'are Invalid." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t   Please press any key to go back to '
              '\'Sign in\' Menu.\\n\\n" << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tF_Sign_in();\n'
              '\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tcase 48: {  // Back\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\ti = 1000;\n'
              '\t\t\tF_General_Menu();\n'
              '\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t}\n'
              '\t}\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-000148',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=275,
         depth=2,
         type='function_decl',
         name='F_Logo',
         text='void F_Logo() {\n'
              '\tsystem("cls");\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "        A L I B A Z A '
              'R                                                    8. Account '
              'Info         \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '}\n')

Fragment(uuid='NORMALIZED-000149',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=283,
         depth=2,
         type='function_decl',
         name='F_User_Main_Menu',
         text='void F_User_Main_Menu() {\n'
              '\t// Entering as a Guest\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\n'
              '\t\tF_Logo();\n'
              '\n'
              '\t\tcout << "       Categories\\n\\n";\n'
              '\t\tcout << "       1. Vegetables & Fruits\\n\\n";\n'
              '\t\tcout << "       2. Water & Beverages\\n\\n";\n'
              '\t\tcout << "       3. Bread & Bakery Products\\n\\n";\n'
              '\t\tcout << "       4. Cart and Overall Sums\\n\\n";\n'
              '\t\tcout << "       0. Go Back\\n\\n";\n'
              '\t\tcout << "       Your choice: ";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: {\n'
              '\t\t\tF_Vegetables_Fruits_Menu();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 50: {\n'
              '\t\t\tF_Water_Beverages_Menu();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 51: {\n'
              '\t\t\tF_Bread_Bakery_Menu();\n'
              '\t\t}\n'
              '\t\tcase 52:\n'
              '\t\t{\n'
              '\t\t\tF_Cart_Check();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tcase 48: {  // Back to Menu\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\ti = 1000;\n'
              '\t\t\tF_Sign_in();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t    User Information:" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch \n'
              '\t} // for loop \n'
              '}\n')

Fragment(uuid='NORMALIZED-000150',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=343,
         depth=2,
         type='function_decl',
         name='F_Table_For_Increasing_And_Decreasing',
         text='void F_Table_For_Increasing_And_Decreasing() {\n'
              '\n'
              '\tcout << "     (+)   \'Press 1\'                        \\n";\n'
              '\tcout << "     (-)   \'Press 2\'                        \\n";\n'
              '\tcout << "     (0)   \'Back\'                           \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\tcout << "     Add to Cart:  \\n";\n'
              '\t//cin >> VariableForIncreasingAndDecreasing;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000151',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=354,
         depth=2,
         type='function_decl',
         name='F_Vegetables_Fruits_Menu',
         text='void F_Vegetables_Fruits_Menu() {\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo();\n'
              '\t\tcout << "      Categories -> Vegetables & Fruits \\t\\t '
              'Cart \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << " 1. Potatoes, Weight \\t\\t\\t\\t\\t"; cout << '
              'Potatoes.getQuantity() << " (kg)" << endl;\n'
              '\t\tcout << "    " << Potatoes.getPrice() << " UZS for 1 '
              'kg\\n\\n";\n'
              '\t\tcout << " 2. Yellow Carrot, Weight \\t\\t\\t\\t"; cout << '
              'Carrot.getQuantity() << " (kg)" << endl;\n'
              '\t\tcout << "    " << Carrot.getPrice() << " UZS for 1 '
              'kg\\n\\n";\n'
              '\t\tcout << " 3. Onion, Weight \\t\\t\\t\\t\\t"; cout << '
              'Onion.getQuantity() << " (kg)" << endl;\n'
              '\t\tcout << "    " << Onion.getPrice() << " UZS for 1 '
              'kg\\n\\n";\n'
              '\t\tcout << " 0. Back\\n\\n";\n'
              '\t\tcout << " Your choice: ";\n'
              '\t\tswitch (_getch()) {\n'
              '\t\t\t// for potatoes\n'
              '\t\tcase 49: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Vegetables & Fruits \\t\\t '
              'Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Potatoes, Weight \\t\\t\\t\\t\\t"; cout '
              '<< Potatoes.getQuantity() << " (kg)" << endl;\n'
              '\t\t\t\tcout << "     " << Potatoes.getPrice() << " UZS for 1 '
              'kg\\n\\n";\n'
              '\t\t\t\t//\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Potatoes.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tUser_1.Potatoes_User++;\n'
              '\t\t\t\t\t\tPotatoes.quantity--;\n'
              '\t\t\t\t\t\tcout << " Quantity of Potatoes (kg): " << '
              'User_1.Potatoes_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Potatoes_User > 0) { // Check for (-1 kg)\n'
              '\t\t\t\t\t\tUser_1.Potatoes_User--;\n'
              '\t\t\t\t\t\tPotatoes.quantity++;\n'
              '\t\t\t\t\t\tcout << " Quantity of Potatoes (kg): " << '
              'User_1.Potatoes_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for potato\n"
              "\t\t\t}// 'for' loop for potato\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // for carrot\n'
              '\t\tcase 50: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Vegetables & Fruits \\t\\t '
              'Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Carrot, Weight \\t\\t\\t\\t\\t"; cout << '
              'Carrot.getQuantity() << " (kg)" << endl;\n'
              '\t\t\t\tcout << "     " << Carrot.getPrice() << " UZS for 1 '
              'kg\\n\\n";\n'
              '\t\t\t\t//\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Carrot.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tUser_1.Carrot_User++;\n'
              '\t\t\t\t\t\tCarrot.quantity--;\n'
              '\t\t\t\t\t\tcout << " Quantity of Carrot (kg): " << '
              'User_1.Carrot_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Carrot_User > 0) { // Check for (-1 kg)\n'
              '\t\t\t\t\t\tUser_1.Carrot_User--;\n'
              '\t\t\t\t\t\tCarrot.quantity++;\n'
              '\t\t\t\t\t\tcout << " Quantity of Carrot (kg): " << '
              'User_1.Carrot_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for potato\n"
              "\t\t\t}// 'for' loop for potato\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // for onion\n'
              '\t\tcase 51: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Vegetables & Fruits \\t\\t '
              'Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Onion, Weight \\t\\t\\t\\t\\t"; cout << '
              'Onion.getQuantity() << " (kg)" << endl;\n'
              '\t\t\t\tcout << "     " << Onion.getPrice() << " UZS for 1 '
              'kg\\n\\n";\n'
              '\t\t\t\t//\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Onion.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tUser_1.Onion_User++;\n'
              '\t\t\t\t\t\tOnion.quantity--;\n'
              '\t\t\t\t\t\tcout << " Quantity of Onion (kg): " << '
              'User_1.Onion_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Onion_User > 0) { // Check for (-1 kg)\n'
              '\t\t\t\t\t\tUser_1.Onion_User--;\n'
              '\t\t\t\t\t\tCarrot.quantity++;\n'
              '\t\t\t\t\t\tcout << " Quantity of Carrot (kg): " << '
              'User_1.Onion_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for potato\n"
              "\t\t\t}// 'for' loop for potato\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // Back to F_User menu \n'
              '\t\tcase 48: {   k = 1000;\n'
              '\t\t\t//F_User_Main_Menu(); \n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t    User Information:" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch ends\n'
              '\t} // loop ends\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000152',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=524,
         depth=2,
         type='function_decl',
         name='F_Water_Beverages_Menu',
         text='void F_Water_Beverages_Menu() {\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo();\n'
              '\t\tcout << "      Categories -> Water & Beverages \\t\\t\\t '
              'Cart \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << " 1. Water, Hydrolife without gas 500ml \\t\\t\\t"; '
              'cout << Water.getQuantity() << " (pc)" << endl;\n'
              '\t\tcout << "    " << Water.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\t\tcout << " 2. Pepsi 500ml   \\t\\t\\t\\t\\t"; cout << '
              'Pepsi.getQuantity() << " (pc)" << endl;\n'
              '\t\tcout << "    " << Pepsi.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\t\tcout << " 3. Nectar, Zet Apple 125ml \\t\\t\\t\\t"; cout << '
              'Nectar.getQuantity() << " (pc)" << endl;\n'
              '\t\tcout << "    " << Nectar.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\t\tcout << " 0. Back\\n\\n";\n'
              '\t\tcout << " Your choice: ";\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: { // Water\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Water & Beverages '
              '\\t\\t\\t Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Water, Hydrolife without gas 500ml '
              '\\t\\t"; cout << Water.getQuantity() << " (pc)" << endl;\n'
              '\t\t\t\tcout << "     " << Water.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Water.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tWater.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Water_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of Bottles (pc): " << '
              'User_1.Water_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Water_User > 0) { // Check for (-1 kg)\n'
              '\t\t\t\t\t\tWater.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Water_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of Bottles (pc): " << '
              'User_1.Water_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for water\n"
              "\t\t\t}// 'for' loop for water\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 50: { // Pepsi\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Water & Beverages '
              '\\t\\t\\t Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "      Pepsi 500ml \\t\\t\\t\\t\\t"; cout << '
              'Pepsi.getQuantity() << " (pc)" << endl;\n'
              '\t\t\t\tcout << "      " << Pepsi.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Pepsi.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tPepsi.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Pepsi_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of Bottles (pc): " << '
              'User_1.Pepsi_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Pepsi_User > 0) { // Check for (-1 kg)\n'
              '\t\t\t\t\t\tPepsi.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Pepsi_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of Bottles (pc): " << '
              'User_1.Pepsi_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for water\n"
              "\t\t\t}// 'for' loop for water\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 51: { // Nectar\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Water & Beverages '
              '\\t\\t\\t Cart \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "      Nectar 500ml \\t\\t\\t\\t\\t"; cout << '
              'Nectar.getQuantity() << " (pc)" << endl;\n'
              '\t\t\t\tcout << "      " << Nectar.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Nectar.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tNectar.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Nectar_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of Bottles (pc): " << '
              'User_1.Nectar_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Nectar_User > 0) { // Check for (-1 kg)\n'
              '\t\t\t\t\t\tNectar.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Nectar_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of Bottles (pc): " << '
              'User_1.Nectar_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for water\n"
              "\t\t\t}// 'for' loop for water\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // Back to F_User menu \n'
              '\t\tcase 48: {   k = 1000;\n'
              '\t\t\tF_User_Main_Menu(); }\n'
              '\t\t\t   break;\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t    User Information:" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch ends\n'
              '\n'
              '\t} // loop ends\n'
              '\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000153',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=686,
         depth=2,
         type='function_decl',
         name='F_Bread_Bakery_Menu',
         text='void F_Bread_Bakery_Menu() {\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo();\n'
              '\t\tcout << "      Categories -> Bread & Bakery Products \\t\\t '
              'Cart \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << " 1. Pizza \\t\\t\\t\\t\\t\\t"; cout << '
              'Pizza.getQuantity() << " (pc)" << endl;\n'
              '\t\tcout << "    " << Pizza.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\t\tcout << " 2. Burger \\t\\t\\t\\t\\t\\t"; cout << '
              'Burger.getQuantity() << " (pc)" << endl;\n'
              '\t\tcout << "    " << Burger.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\t\tcout << " 3. Potatoe Fries \\t\\t\\t\\t\\t"; cout << '
              'Fries.getQuantity() << " (pc)" << endl;\n'
              '\t\tcout << "    " << Fries.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\t\tcout << " 0. Back\\n\\n";\n'
              '\t\tcout << " Your choice: ";\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: { // Pizza\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Food Products \\t\\t Cart '
              '\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Pizza \\t\\t\\t\\t\\t"; cout << '
              'Pizza.getQuantity() << " (pc)" << endl;\n'
              '\t\t\t\tcout << "     " << Pizza.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Pizza.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tPizza.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Pizza_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of Pizza (pc): " << '
              'User_1.Pizza_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Pizza_User > 0) { // Check for (-1 pc)\n'
              '\t\t\t\t\t\tPizza.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Pizza_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of Pizza (pc): " << '
              'User_1.Pizza_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for bun bread\n"
              "\t\t\t}// 'for' loop for bun bread\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 50: { // Burger\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Food Products \\t\\t Cart '
              '\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Burger \\t\\t\\t\\t\\t"; cout << '
              'Burger.getQuantity() << " (pc)" << endl;\n'
              '\t\t\t\tcout << "     " << Burger.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Burger.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tBurger.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Burger_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of Burger (pc): " << '
              'User_1.Burger_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Burger_User > 0) { // Check for (-1 pc)\n'
              '\t\t\t\t\t\tBurger.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Burger_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of Burger (pc): " << '
              'User_1.Burger_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for bun bread\n"
              "\t\t\t}// 'for' loop for bun bread\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 51: { // Fries\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "      Categories -> Food Products \\t\\t Cart '
              '\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\t\t\t\tcout << "     Potatoe Fries \\t\\t\\t\\t"; cout << '
              'Fries.getQuantity() << " (pc)" << endl;\n'
              '\t\t\t\tcout << "     " << Fries.getPrice() << " UZS for 1 '
              'pc\\n\\n";\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Fries.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tFries.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Fries_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of Fries (pc): " << '
              'User_1.Fries_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Fries_User > 0) { // Check for (-1 pc)\n'
              '\t\t\t\t\t\tBurger.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Fries_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of Fries (pc): " << '
              'User_1.Fries_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for bun bread\n"
              "\t\t\t}// 'for' loop for bun bread\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // Back to F_User menu \n'
              '\t\tcase 48: {   k = 1000;\n'
              '\t\t\tF_User_Main_Menu(); }\n'
              '\t\t\t   break;\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t    User Information:" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch ends\n'
              '\n'
              '\t} // loop ends\n'
              '\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000154',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=848,
         depth=2,
         type='function_decl',
         name='F_Cart_Check',
         text='void F_Cart_Check() {\n'
              '\tsystem("cls");\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "                                              C A R '
              'T \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t// Check\n'
              '\tfor (int i = 1; i <= 1; i++) {\n'
              '\t\tif (User_1.Potatoes_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << "." << "Potatoes, '
              'Weight    " << User_1.Potatoes_User << " (kg)    Price: " << '
              'User_1.Potatoes_User * Potatoes.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Potatoes_User * '
              'Potatoes.getPrice();\n'
              '\t\t}\n'
              '\t\t\n'
              '\t\tif (User_1.Carrot_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << "." << "Carrot, '
              'Weight      " << User_1.Carrot_User << " (kg)    Price: " << '
              'User_1.Carrot_User * Carrot.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Carrot_User * Carrot.getPrice();\n'
              '\t\t}\n'
              '\n'
              '\t\tif (User_1.Onion_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << "." << "Onion, '
              'Weight       " << User_1.Onion_User << " (kg)    Price: " << '
              'User_1.Onion_User * Onion.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Onion_User * Onion.getPrice();\n'
              '\t\t}\n'
              '\n'
              '\t\tif (User_1.Water_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << "." << "Water, '
              '500ml        " << User_1.Water_User << " (pc)    Price: " << '
              'User_1.Water_User * Water.getPrice();\n'
              '\t\t\ti++; \n'
              '\t\t\tOverall_Sum += User_1.Water_User * Water.getPrice();\n'
              '\t\t}\n'
              '\t\tif (User_1.Pepsi_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << "." << "Pepsi, '
              '500ml        " << User_1.Pepsi_User << " (pc)    Price: " << '
              'User_1.Pepsi_User * Pepsi.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Pepsi_User * Pepsi.getPrice();\n'
              '\t\t}\n'
              '\t\tif (User_1.Nectar_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << "." << "Nectar, '
              '500ml       " << User_1.Nectar_User << " (pc)    Price: " << '
              'User_1.Nectar_User * Nectar.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Nectar_User * Nectar.getPrice();\n'
              '\t\t}\n'
              '\t\tif (User_1.Pizza_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << "." << "Pizza\\t        '
              '" << User_1.Pizza_User << " (pc)\\t  Price: " << '
              'User_1.Pizza_User * Pizza.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Pizza_User * Pizza.getPrice();\n'
              '\t\t}\n'
              '\t\tif (User_1.Burger_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << "." << "Burger\\t        '
              '" << User_1.Burger_User << " (pc)\\t  Price: " << '
              'User_1.Burger_User * Burger.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Burger_User * Burger.getPrice();\n'
              '\t\t}\n'
              '\t\tif (User_1.Fries_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << "." << "Fries\\t        '
              '" << User_1.Fries_User << " (pc)\\t  Price: " << '
              'User_1.Fries_User * Fries.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Fries_User * Fries.getPrice();\n'
              '\t\t}\n'
              '\n'
              '\t\tif (i == 1) { // if nothing go to Menu\n'
              '\t\t\tcout << "\\n\\t You do not have any product in '
              '\'CART\'.\\n";\n'
              '\t\t\tcout << "\\tPress any key to go to \'Products '
              'Menu\'\\n\\n" << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tOverall_Sum = 0;\n'
              '\t\t\tF_User_Main_Menu();\n'
              '\t\t}\n'
              '\t\tif (i > 1) { // Menu for buying or back \n'
              '\t\t\tcout << "\\n\\n\\t\\t\\t  Overall Price: " << Overall_Sum '
              '<< " Sums" << endl;\n'
              '\t\t\tcout << "\\n\\t   1. Buy now" << endl;\n'
              '\t\t\tcout << "\\t   0. Products Menu" << endl;\n'
              '\n'
              '\t\t\tswitch (_getch()) {\n'
              '\t\t\tcase 49: { //buy\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\t////\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << "                                              '
              'C A R T \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\n'
              '\t\t\t\t////\n'
              '\t\t\t\tcout << " Money will be taken from your \'Telephone '
              'Number\': " << endl;\n'
              '\t\t\t\tcout << " 1. OK" << endl;\n'
              '\t\t\t\tcout << " Press any key to go back..." << endl;\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49: {\n'
              '\t\t\t\t\tcout << "\\n  Transaction Successful!\\n  '
              'Congratulations ! :)" << endl;\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t\tOverall_Sum = 0;\n'
              '\t\t\t\t\t// Storage\n'
              '\t\t\t\t\tUser_1.Potatoes_User = 0; User_1.Onion_User = 0; '
              'User_1.Carrot_User = 0;\n'
              '\t\t\t\t\tUser_1.Water_User = 0; User_1.Pepsi_User = 0; '
              'User_1.Nectar_User = 0;\n'
              '\t\t\t\t\tUser_1.Pizza_User = 0; User_1.Burger_User = 0; '
              'User_1.Fries_User = 0;\n'
              '\t\t\t\t\tF_User_Main_Menu();\n'
              '\t\t\t\t}\n'
              '\t\t\t\t\t   break;\n'
              '\n'
              '\t\t\t\tdefault:  F_Cart_Check();\n'
              '\n'
              '\t\t\t\t} // switch of case 49\n'
              '\n'
              '\t\t\t\t////\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t}\n'
              '\t\t\t\t   break;\n'
              '\t\t\tcase 48: { // Back\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tOverall_Sum = 0;\n'
              '\t\t\t\tF_User_Main_Menu();\n'
              '\t\t\t}\n'
              '\t\t\t\t   break;\n'
              '\t\t\tdefault: F_Cart_Check();\n'
              '\t\t\t} // switch ends\n'
              '\n'
              '\t\t} //if ends\n'
              '\n'
              '\t}// loop end\n'
              '\t//system("pause");\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000155',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=968,
         depth=2,
         type='function_decl',
         name='F_Logo_Owner',
         text='void F_Logo_Owner() {\n'
              '\tsystem("cls");\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "        A L I B A Z A '
              'R                                                  O W N E R  M '
              'E N U         \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '}\n')

Fragment(uuid='NORMALIZED-000156',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=976,
         depth=2,
         type='function_decl',
         name='F_Owner_Main_Menu',
         text='void F_Owner_Main_Menu() {\n'
              '\tsystem("cls");\n'
              '\tcout << endl << endl;\n'
              '\t// Entering as a Owner of shop\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo_Owner();\n'
              '\t\tcout << "       Main Menu\\n\\n";\n'
              '\t\tcout << "       1. Products in stock \\n\\n";\n'
              '\t\tcout << "       2. Customers list \\n\\n";\n'
              '\t\tcout << "       0. Back\\n\\n";\n'
              '\t\tcout << "       Your choice: ";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: {\n'
              '\t\t\tF_Owner_Products_Stotage();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 50: {\n'
              '\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                           C U S T O M E R S  '
              'L I S T        \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\n\\t\\t\\t   Customers list :" << endl << '
              'endl;\n'
              '\n'
              '\t\t\tF_Owner_Customers_List();\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\n'
              '\t\tcase 48: {  // Back to Menu\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tk = 1000;\n'
              '\t\t\tF_Sign_in();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch \n'
              '\t} // for loop \n'
              '}\n')

Fragment(uuid='NORMALIZED-000157',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=1023,
         depth=2,
         type='function_decl',
         name='F_Owner_Products_Stotage',
         text='void F_Owner_Products_Stotage() {\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tF_Logo_Owner();\n'
              '\t\tcout << "  Products List                                '
              'Category                    Price          In Stock\\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\tcout << " 1. Potatoes, Weight                          '
              'Vegetables & Fruits          " << Potatoes.getPrice() << '
              '"\\t\\t  " << Potatoes.getQuantity() << endl;\n'
              '\t\tcout << " 2. Yellow Carrot, Weight                     '
              'Vegetables & Fruits          " << Carrot.getPrice() << "\\t\\t  '
              '" << Carrot.getQuantity() << endl;\n'
              '\t\tcout << " 3. Onion, Weight                             '
              'Vegetables & Fruits          " << Onion.getPrice() << "\\t\\t  '
              '" << Onion.getQuantity() << endl;\n'
              '\t\tcout << " 4. Water                                     '
              'Water & Beverages            " << Water.getPrice() << "\\t\\t  '
              '" << Water.getQuantity() << endl;\n'
              '\t\tcout << " 5. Pepsi                                     '
              'Water & Beverages            " << Pepsi.getPrice() << "\\t\\t  '
              '" << Pepsi.getQuantity() << endl;\n'
              '\t\tcout << " 6. Nector                                    '
              'Water & Beverages            " << Nectar.getPrice() << "\\t\\t  '
              '" << Nectar.getQuantity() << endl;\n'
              '\t\tcout << " 7. Pizza                                     '
              'Bread & Bakery Products      " << Pizza.getPrice() << "\\t  " '
              '<< Pizza.getQuantity() << endl;\n'
              '\t\tcout << " 8. Burger                                    '
              'Bread & Bakery Products      " << Burger.getPrice() << "\\t  " '
              '<< Burger.getQuantity() << endl;\n'
              '\t\tcout << " 9. Potatoe Fries                             '
              'Bread & Bakery Products      " << Fries.getPrice() << "\\t  " '
              '<< Fries.getQuantity() << endl;\n'
              '\t\tcout << " \\n 0. Back\\n";\n'
              '\t\tcout << " Make changes in: ";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase '1':\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Potatoes, Weight                          '
              'Vegetables & Fruits             " << Potatoes.getPrice() << '
              '"\\t\\t " << Potatoes.getQuantity() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or "
              '\'0\'\\n\\n";\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << " Enter a new price: ";\n'
              '\t\t\t\t\tcin >> Ch_Price;\n'
              '\t\t\t\t\tif (Ch_Price >= 0) {\n'
              '\t\t\t\t\t\tPotatoes.price = Ch_Price;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << " Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> Ch_Quantity;\n'
              '\t\t\t\t\tif (Ch_Quantity > 0) {\n'
              '\t\t\t\t\t\tPotatoes.quantity = Ch_Quantity;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '2':\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Yellow Carrot, Weight                     '
              'Vegetables & Fruits             " << Carrot.getPrice() << '
              '"\\t\\t " << Carrot.getQuantity() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 3. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> Ch_Price;\n'
              '\t\t\t\t\tif (Ch_Price >= 0) {\n'
              '\t\t\t\t\t\tCarrot.price = Ch_Price;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> Ch_Quantity;\n'
              '\n'
              '\t\t\t\t\tif (Ch_Quantity > 0) {\n'
              '\t\t\t\t\t\tCarrot.quantity = Ch_Quantity;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '3':\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Onion, Weight                             '
              'Vegetables & Fruits             " << Onion.getPrice() << '
              '"\\t\\t " << Onion.getQuantity() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> Ch_Price;\n'
              '\t\t\t\t\tif (Ch_Price >= 0) {\n'
              '\t\t\t\t\t\tOnion.price = Ch_Price;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> Ch_Quantity;\n'
              '\t\t\t\t\tif (Ch_Quantity > 0) {\n'
              '\t\t\t\t\t\tOnion.quantity = Ch_Quantity;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '4':\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Water, Hydrolife without gas 750ml        '
              'Water & Beverages               " << Water.getPrice() << '
              '"\\t\\t " << Water.getQuantity() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> Ch_Price;\n'
              '\n'
              '\t\t\t\t\tif (Ch_Price >= 0) {\n'
              '\t\t\t\t\t\tWater.price = Ch_Price;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> Ch_Quantity;\n'
              '\t\t\t\t\tif (Ch_Quantity > 0) {\n'
              '\t\t\t\t\t\tWater.quantity = Ch_Quantity;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '5':\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Drink, Aloe Original 500ml                '
              'Water & Beverages               " << Pepsi.getPrice() << '
              '"\\t\\t " << Pepsi.getQuantity() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> Ch_Price;\n'
              '\n'
              '\t\t\t\t\tif (Ch_Price >= 0) {\n'
              '\t\t\t\t\t\tPepsi.price = Ch_Price;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> Ch_Quantity;\n'
              '\n'
              '\t\t\t\t\tif (Ch_Quantity > 0) {\n'
              '\t\t\t\t\t\tPepsi.quantity = Ch_Quantity;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '6':\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Nectar, Zet Apple 125ml                   '
              'Water & Beverages               " << Nectar.getPrice() << '
              '"\\t\\t " << Nectar.getQuantity() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> Ch_Price;\n'
              '\t\t\t\t\tif (Ch_Price >= 0) {\n'
              '\t\t\t\t\t\tNectar.price = Ch_Price;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> Ch_Quantity;\n'
              '\t\t\t\t\tif (Ch_Quantity > 0) {\n'
              '\t\t\t\t\t\tNectar.quantity = Ch_Quantity;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '7':\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Pizza                                   Bread '
              '& Bakery Products           " << Pizza.getPrice() << "\\t " << '
              'Pizza.getQuantity() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> Ch_Price;\n'
              '\t\t\t\t\tif (Ch_Price >= 0) {\n'
              '\t\t\t\t\t\tPizza.price = Ch_Price;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> Ch_Quantity;\n'
              '\t\t\t\t\tif (Ch_Quantity > 0) {\n'
              '\t\t\t\t\t\tPizza.quantity = Ch_Quantity;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '8':\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Burger                                  Bread '
              '& Bakery Products           " << Burger.getPrice() << "\\t" << '
              'Burger.getQuantity() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> Ch_Price;\n'
              '\t\t\t\t\tif (Ch_Price >= 0) {\n'
              '\t\t\t\t\t\tBurger.price = Ch_Price;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> Ch_Quantity;\n'
              '\t\t\t\t\tif (Ch_Quantity > 0) {\n'
              '\t\t\t\t\t\tBurger.quantity = Ch_Quantity;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '9':\n"
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\n  '
              'Product                                     '
              'Category                     Price         In Stock\\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << " Potatoe Fries                           Bread '
              '& Bakery Products           " << Fries.getPrice() << "\\t" << '
              'Fries.getQuantity() << endl;\n'
              '\t\t\t\tcout << "\\n 1. Change price \\n 2. Change the quantity '
              "in storage\\n 0. Go back \\n Press '1' or '2' or '0'\\n\\n "
              '";\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tcout << "Enter a new price: ";\n'
              '\t\t\t\t\tcin >> Ch_Price;\n'
              '\n'
              '\t\t\t\t\tif (Ch_Price >= 0) {\n'
              '\t\t\t\t\t\tFries.price = Ch_Price;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Price cannot be negative! Please check '
              'one more time.\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tcout << "Enter a new quantity in storage: ";\n'
              '\t\t\t\t\tcin >> Ch_Quantity;\n'
              '\t\t\t\t\tif (Ch_Quantity > 0) {\n'
              '\t\t\t\t\t\tFries.quantity = Ch_Quantity;\n'
              '\t\t\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' \n"
              "\t\t\t}// 'for' loop \n"
              '\t\t\tbreak;\n'
              "\t\tcase '0': {  // Back to Menu\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\ti = 1000;\n'
              '\t\t\tF_Owner_Main_Menu();\n'
              '\t\t} break;\n'
              '\n'
              "\t\tcase 'i' || 'I': { // User info   \n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\n\\t\\t\\t   User Information:" << endl;;\n'
              '\t\t\tcout << "\\t\\t    _______________________________" << '
              'endl << endl;;\n'
              '\t\t\tcout << "\\t\\t      User Name  : " << Name_Memory << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      Telephone  : " << TellNum_Memory << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      Login      : " << Login_Memory << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      Password   : " << Parol_Memory << '
              'endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t\t\t   break;\n'
              '\n'
              '\t\tdefault: { cout << "\\n\\t\\t      Your choice is not '
              'available in Menu" << endl;\n'
              '\t\t\tcout << "\\t\\tPlease press any keyboard to continue '
              'program\\n" << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t} break;\n'
              '\n'
              '\t\t} // switch\n'
              '\n'
              '\t} // for loop for products in stock  \n'
              '}\n')

Fragment(uuid='NORMALIZED-000158',
         path='/E-Commerce App V2.0/main.cpp',
         lineno=1441,
         depth=2,
         type='function_decl',
         name='F_Owner_Customers_List',
         text='void F_Owner_Customers_List() {\n'
              '\tcout << endl;\n'
              '\n'
              '\tifstream in;\n'
              '\tint Num = 1;\n'
              '\tstring Info;\n'
              '\n'
              '\tin.open("User_Info.txt");\n'
              '\twhile (in) {\n'
              '\t\tcout << "\\t " << Num << "." << endl;\n'
              '\t\tcout << "\\t-------------------------" << endl;\n'
              '\t\tgetline(in, Info);\n'
              '\t\tcout << "\\t User Name: " << Info << endl;\n'
              '\t\tgetline(in, Info);\n'
              '\t\tcout << "\\t Phone    : " << Info << endl;\n'
              '\t\tgetline(in, Info);\n'
              '\t\tcout << "\\t Login    : " << Info << endl;\n'
              '\t\tgetline(in, Info);\n'
              '\t\tcout << "\\t Password : " << Info << endl;\n'
              '\t\tNum++;\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\tcout << "\\t-------------------------" << endl;\n'
              '\tin.close();\n'
              '}\n')

Fragment(uuid='NORMALIZED-000159',
         path='/E-Commerce App V3.0/Loading_Page.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V3.0/Loading_Page.h\n'
              '  Functions: F_Loading, gotoXY\n')

Fragment(uuid='NORMALIZED-000160',
         path='/E-Commerce App V3.0/Loading_Page.h',
         lineno=6,
         depth=2,
         type='function_decl',
         name='gotoXY',
         text='void gotoXY(int x, int y) {\n'
              "\t//'COORD' is a built in function for positioning the objects\n"
              '\tCOORD d;\n'
              '\td.X = x;\n'
              '\td.Y = y;\n'
              '\tSetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), '
              'd);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000161',
         path='/E-Commerce App V3.0/Loading_Page.h',
         lineno=14,
         depth=2,
         type='function_decl',
         name='F_Loading',
         text='void F_Loading() {\n'
              '\tcout << "\\n\\n\\n\\n\\n\\n";\n'
              '\tcout << "\\t\\t\\t       '
              '-------------------------------------  \\n";\n'
              '\tcout << "\\t\\t\\t         E I G H T S O F T  A C A D E M '
              'Y      \\n";\n'
              '\tcout << "\\t\\t\\t       '
              '-------------------------------------  \\n";\n'
              '\tcout << "\\t\\t\\t                   A L I B A Z A '
              'R             \\n";\n'
              '\tcout << "\\t\\t\\t       '
              '_____________________________________  \\n";\n'
              '\n'
              '\tchar a = 219;\n'
              '\tgotoXY(45, 14);\n'
              '\n'
              '\tcout << "LOADING... " << endl;\n'
              '\n'
              '\tgotoXY(37, 16);\n'
              '\tfor (int r = 1; r <= 26; r++)\n'
              '\t{\n'
              '\t\t//for speed\n'
              '\t\tfor (int speed = 0; speed <= 30000000; speed++);\n'
              '\t\tcout << a;\n'
              '\t}\n'
              '\tcout << endl;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000162',
         path='/E-Commerce App V3.0/Password_Vali_Asterisk.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V3.0/Password_Vali_Asterisk.h\n'
              '  Functions: F_Password_Val\n'
              '  Variable declarations: Length_Val, Letter_Val, Password_Val, '
              'namespace\n')

Fragment(uuid='NORMALIZED-000163',
         path='/E-Commerce App V3.0/Password_Vali_Asterisk.h',
         lineno=7,
         depth=2,
         type='var_decl',
         name='namespace',
         text='')

Fragment(uuid='NORMALIZED-000164',
         path='/E-Commerce App V3.0/Password_Vali_Asterisk.h',
         lineno=10,
         depth=2,
         type='var_decl',
         name='Password_Val',
         text='')

Fragment(uuid='NORMALIZED-000165',
         path='/E-Commerce App V3.0/Password_Vali_Asterisk.h',
         lineno=10,
         depth=2,
         type='var_decl',
         name='Letter_Val',
         text='')

Fragment(uuid='NORMALIZED-000166',
         path='/E-Commerce App V3.0/Password_Vali_Asterisk.h',
         lineno=10,
         depth=2,
         type='var_decl',
         name='Length_Val',
         text='')

Fragment(uuid='NORMALIZED-000167',
         path='/E-Commerce App V3.0/Password_Vali_Asterisk.h',
         lineno=13,
         depth=2,
         type='function_decl',
         name='F_Password_Val',
         text='void F_Password_Val() {\n'
              '\tPassword_Val = "";\n'
              '\tParol_Sign = "";\n'
              '\tcout << "\\t\\t\\t\\t\\tPassword : ";\n'
              '\tfor (int i = 0; i != 1;) {\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "1";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 50: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "2";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 51: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "3";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 52: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "4";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 53: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "5";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 54: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "6";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 55: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "7";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 56: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "8";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 57: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "9";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 48: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "0";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 81: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "Q";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 87: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "W";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 69: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "E";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 82: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "R";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 84: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "T";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 89: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "Y";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 85: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "U";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 73: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "I";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 79: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "O";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 80: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "P";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 65: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "A";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 83: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "S";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 68: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "D";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 70: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "F";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 71: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "G";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 72: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "H";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 74: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "J";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 75: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "K";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 76: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "L";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 90: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "Z";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 88: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "X";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 67: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "C";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 86: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "V";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 66: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "B";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 78: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "N";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 77: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "M";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 97: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "a";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 98: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "b";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 99: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "c";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 100: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "d";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 101: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "e";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 102: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "f";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 103: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "g";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 104: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "h";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 105: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "i";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 106: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "j";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 107: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "k";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 108: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "l";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 109: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "m";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 110: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "n";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 111: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "o";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 112: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "p";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 113: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "q";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 114: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "r";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 115: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "s";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 116: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "t";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 117: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "u";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 118: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "v";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 119: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "w";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 120: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "x";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 121: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "y";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 122: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "z";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 123: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "{";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 124: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "|";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 125: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "}";\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\tcase 33: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "!";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 36: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "$";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 37: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "%";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 38: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "&";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 39: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "\'";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 40: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "(";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 41: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + ")";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 42: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "*";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 43: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "+";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 44: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + ",";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 45: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "-";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 46: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + ".";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 47: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "/";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 58: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + ":";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 59: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + ";";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 60: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "<";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 61: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "=";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 62: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + ">";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 63: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "?";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 95: {\n'
              '\t\t\tcout << "*"; Password_Val = Password_Val + "_";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\n'
              '\t\tcase 8: { // Deleting character\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                              '
              '\\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t          Authentication\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\tLogin    : "; cout << Login_Sign '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\tPassword : ";\n'
              '\t\t\tLength_Val = Password_Val.length();\n'
              '\t\t\tLength_Val--;\n'
              '\t\t\tfor (int j = 0; j < Length_Val; j++) {\n'
              '\t\t\t\tLetter_Val = Password_Val[j];\n'
              '\t\t\t\tChange_Val = Change_Val + Letter_Val;\n'
              '\t\t\t\tcout << "*";\n'
              '\t\t\t}\n'
              '\t\t\tPassword_Val = Change_Val;\n'
              '\t\t\tChange_Val = "";\n'
              '\t\t}\n'
              '\t\t\t  break;\n'
              '\t\tcase 13: { // Entering Password_Val \n'
              '\t\t\ti = 1;\n'
              '\t\t\tChange_Val = "";\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t}\n'
              '\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-000168',
         path='/E-Commerce App V3.0/Person.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V3.0/Person.h\n'
              '  Variable declarations: Owner, Person, Security, User\n')

Fragment(uuid='NORMALIZED-000169',
         path='/E-Commerce App V3.0/Person.h',
         lineno=34,
         depth=2,
         type='var_decl',
         name='Security',
         text='')

Fragment(uuid='NORMALIZED-000170',
         path='/E-Commerce App V3.0/Person.h',
         lineno=34,
         depth=2,
         type='var_decl',
         name='Person',
         text='')

Fragment(uuid='NORMALIZED-000171',
         path='/E-Commerce App V3.0/Person.h',
         lineno=50,
         depth=2,
         type='var_decl',
         name='User',
         text='')

Fragment(uuid='NORMALIZED-000172',
         path='/E-Commerce App V3.0/Person.h',
         lineno=50,
         depth=2,
         type='var_decl',
         name='Security',
         text='')

Fragment(uuid='NORMALIZED-000173',
         path='/E-Commerce App V3.0/Person.h',
         lineno=96,
         depth=2,
         type='var_decl',
         name='Owner',
         text='')

Fragment(uuid='NORMALIZED-000174',
         path='/E-Commerce App V3.0/Person.h',
         lineno=96,
         depth=2,
         type='var_decl',
         name='Security',
         text='')

Fragment(uuid='NORMALIZED-000175',
         path='/E-Commerce App V3.0/Products.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V3.0/Products.h\n'
              '  Variable declarations: Class_Of_Products1, '
              'Class_Of_Products2, Class_Of_Products3, Products, position1\n')

Fragment(uuid='NORMALIZED-000176',
         path='/E-Commerce App V3.0/Products.h',
         lineno=7,
         depth=2,
         type='var_decl',
         name='position1',
         text='int position1 = 1; // for numbering the products\n')

Fragment(uuid='NORMALIZED-000177',
         path='/E-Commerce App V3.0/Products.h',
         lineno=10,
         depth=2,
         type='var_decl',
         name='Products',
         text='')

Fragment(uuid='NORMALIZED-000178',
         path='/E-Commerce App V3.0/Products.h',
         lineno=29,
         depth=2,
         type='var_decl',
         name='Class_Of_Products1',
         text='')

Fragment(uuid='NORMALIZED-000179',
         path='/E-Commerce App V3.0/Products.h',
         lineno=29,
         depth=2,
         type='var_decl',
         name='Products',
         text='')

Fragment(uuid='NORMALIZED-000180',
         path='/E-Commerce App V3.0/Products.h',
         lineno=64,
         depth=2,
         type='var_decl',
         name='Class_Of_Products2',
         text='')

Fragment(uuid='NORMALIZED-000181',
         path='/E-Commerce App V3.0/Products.h',
         lineno=64,
         depth=2,
         type='var_decl',
         name='Products',
         text='')

Fragment(uuid='NORMALIZED-000182',
         path='/E-Commerce App V3.0/Products.h',
         lineno=98,
         depth=2,
         type='var_decl',
         name='Class_Of_Products3',
         text='')

Fragment(uuid='NORMALIZED-000183',
         path='/E-Commerce App V3.0/Products.h',
         lineno=98,
         depth=2,
         type='var_decl',
         name='Products',
         text='')

Fragment(uuid='NORMALIZED-000184',
         path='/E-Commerce App V3.0/User_Info.txt',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='Rustam\n'
              '974060656\n'
              'Rustam202\n'
              'Rustam202\n'
              'Alimov\n'
              '974056585\n'
              'Alimov808\n'
              'Alimov808\n'
              'Rustam\n'
              '974060656\n'
              'Rusam8\n'
              'Rustam808\n')

Fragment(uuid='NORMALIZED-000185',
         path='/E-Commerce App V3.0/User_Info.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /E-Commerce App V3.0/User_Info.txt\n')

Fragment(uuid='NORMALIZED-000186',
         path='/E-Commerce App V3.0/Validation.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V3.0/Validation.h\n'
              '  Variable declarations: Login_Sign, Name_Memory, Num_Lower, '
              'Num_Number, Num_Upper, Validation, Validation_C, namespace\n')

Fragment(uuid='NORMALIZED-000187',
         path='/E-Commerce App V3.0/Validation.h',
         lineno=8,
         depth=2,
         type='var_decl',
         name='namespace',
         text='')

Fragment(uuid='NORMALIZED-000188',
         path='/E-Commerce App V3.0/Validation.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='Num_Upper',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000189',
         path='/E-Commerce App V3.0/Validation.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='Num_Lower',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000190',
         path='/E-Commerce App V3.0/Validation.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='Num_Number',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000191',
         path='/E-Commerce App V3.0/Validation.h',
         lineno=12,
         depth=2,
         type='var_decl',
         name='Validation',
         text='int Num_Upper = 0, Num_Lower = 0, Num_Number = 0, Validation = '
              '0;\n')

Fragment(uuid='NORMALIZED-000192',
         path='/E-Commerce App V3.0/Validation.h',
         lineno=13,
         depth=2,
         type='var_decl',
         name='Login_Sign',
         text='')

Fragment(uuid='NORMALIZED-000193',
         path='/E-Commerce App V3.0/Validation.h',
         lineno=17,
         depth=2,
         type='var_decl',
         name='Name_Memory',
         text='')

Fragment(uuid='NORMALIZED-000194',
         path='/E-Commerce App V3.0/Validation.h',
         lineno=20,
         depth=2,
         type='var_decl',
         name='Validation_C',
         text='')

Fragment(uuid='NORMALIZED-000195',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /E-Commerce App V3.0/main.cpp\n'
              '  Functions: F_Cart_Check, F_Class_Of_Products1_Menu, '
              'F_Class_Of_Products2_Menu, F_Class_Of_Products3_Menu, '
              'F_Developers, F_General_Menu, F_Logo, F_Logo_Owner, '
              'F_Modify_Info_Products, F_Owner_Customers_List, '
              'F_Owner_Main_Menu, F_Owner_Products_Stotage, F_Sign_in, '
              'F_Table_For_Increasing_And_Decreasing, F_User_Main_Menu, '
              'User_1, main\n'
              '  Variable declarations: Ch_Price, Ch_Quantity, Overall_Sum, '
              'Owner_Login_Sign, Owner_Parol_Sign, Product1_1, Product2_1, '
              'Product3_1, Product_Class, Product_Name, User_Validtaion\n')

Fragment(uuid='NORMALIZED-000196',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=28,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-000197',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=31,
         depth=2,
         type='var_decl',
         name='User_Validtaion',
         text='Validation_C User_Validtaion;\n')

Fragment(uuid='NORMALIZED-000198',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=32,
         depth=2,
         type='function_decl',
         name='User_1',
         text='')

Fragment(uuid='NORMALIZED-000199',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=35,
         depth=2,
         type='var_decl',
         name='Product1_1',
         text='Class_Of_Products1 Product1_1("Potatoes", "Vegetables & '
              'Fruits", 7890.0, 10), Product1_2("Carrots", "Vegetables & '
              'Fruits", 4890.0, 10), Product1_3("Onion", "Vegetables & '
              'Fruits", 3600.0, 10);\n')

Fragment(uuid='NORMALIZED-000200',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=36,
         depth=2,
         type='var_decl',
         name='Product2_1',
         text='Class_Of_Products2 Product2_1("Water", "Water & Beverages", '
              '1590.0, 10), Product2_2("Pepsi", "Water & Beverages", 3590.0, '
              '10), Product2_3("Nectar", "Water & Beverages", 7550.0, 10);\n')

Fragment(uuid='NORMALIZED-000201',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=37,
         depth=2,
         type='var_decl',
         name='Product3_1',
         text='Class_Of_Products3 Product3_1("Pizza", "Fast Food Products", '
              '48000.0, 10), Product3_2("Burger", "Fast Food Products", '
              '19000.0, 10), Product3_3("Potatoe Fries", "Fast Food Products", '
              '15000.0, 10);\n')

Fragment(uuid='NORMALIZED-000202',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=41,
         depth=2,
         type='var_decl',
         name='Overall_Sum',
         text='long double Overall_Sum;\n')

Fragment(uuid='NORMALIZED-000203',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=42,
         depth=2,
         type='var_decl',
         name='Ch_Price',
         text='float Ch_Price, Ch_Quantity;\n')

Fragment(uuid='NORMALIZED-000204',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=42,
         depth=2,
         type='var_decl',
         name='Ch_Quantity',
         text='float Ch_Price, Ch_Quantity;\n')

Fragment(uuid='NORMALIZED-000205',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=43,
         depth=2,
         type='var_decl',
         name='Product_Name',
         text='string Product_Name = "" , Product_Class = "";\n')

Fragment(uuid='NORMALIZED-000206',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=43,
         depth=2,
         type='var_decl',
         name='Product_Class',
         text='string Product_Name = "" , Product_Class = "";\n')

Fragment(uuid='NORMALIZED-000207',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=47,
         depth=2,
         type='var_decl',
         name='Owner_Login_Sign',
         text='string Owner_Login_Sign = "1";\n')

Fragment(uuid='NORMALIZED-000208',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=48,
         depth=2,
         type='var_decl',
         name='Owner_Parol_Sign',
         text='string Owner_Parol_Sign = "1";  \n')

Fragment(uuid='NORMALIZED-000209',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=52,
         depth=2,
         type='function_decl',
         name='F_General_Menu',
         text='')

Fragment(uuid='NORMALIZED-000210',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=53,
         depth=2,
         type='function_decl',
         name='F_Sign_in',
         text='')

Fragment(uuid='NORMALIZED-000211',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=54,
         depth=2,
         type='function_decl',
         name='F_Developers',
         text='')

Fragment(uuid='NORMALIZED-000212',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=55,
         depth=2,
         type='function_decl',
         name='F_Logo',
         text='')

Fragment(uuid='NORMALIZED-000213',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=56,
         depth=2,
         type='function_decl',
         name='F_Logo_Owner',
         text='')

Fragment(uuid='NORMALIZED-000214',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=59,
         depth=2,
         type='function_decl',
         name='F_User_Main_Menu',
         text='')

Fragment(uuid='NORMALIZED-000215',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=60,
         depth=2,
         type='function_decl',
         name='F_Table_For_Increasing_And_Decreasing',
         text='')

Fragment(uuid='NORMALIZED-000216',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=61,
         depth=2,
         type='function_decl',
         name='F_Class_Of_Products1_Menu',
         text='')

Fragment(uuid='NORMALIZED-000217',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=62,
         depth=2,
         type='function_decl',
         name='F_Class_Of_Products2_Menu',
         text='')

Fragment(uuid='NORMALIZED-000218',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=63,
         depth=2,
         type='function_decl',
         name='F_Class_Of_Products3_Menu',
         text='')

Fragment(uuid='NORMALIZED-000219',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=64,
         depth=2,
         type='function_decl',
         name='F_Cart_Check',
         text='')

Fragment(uuid='NORMALIZED-000220',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=67,
         depth=2,
         type='function_decl',
         name='F_Owner_Main_Menu',
         text='')

Fragment(uuid='NORMALIZED-000221',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=68,
         depth=2,
         type='function_decl',
         name='F_Modify_Info_Products',
         text='')

Fragment(uuid='NORMALIZED-000222',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=69,
         depth=2,
         type='function_decl',
         name='F_Owner_Products_Stotage',
         text='')

Fragment(uuid='NORMALIZED-000223',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=70,
         depth=2,
         type='function_decl',
         name='F_Owner_Customers_List',
         text='')

Fragment(uuid='NORMALIZED-000224',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=74,
         depth=2,
         type='function_decl',
         name='main',
         text='int main() {\n'
              '\n'
              '\t//Loading\n'
              '\tF_Loading();\n'
              '\tF_General_Menu();\n'
              '\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000225',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=85,
         depth=2,
         type='function_decl',
         name='F_General_Menu',
         text='void F_General_Menu() {\n'
              '\t// Main Menu \n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\tcout << "        A L I B A Z A '
              'R                                             A U T H E N T I C '
              'A T I O N     \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << "\\t\\t\\t\\t\\t  Authentication \\n" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   1. Sign in" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   2. Sign up" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   3. About" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   0. Exit" << endl << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t  Your Choice: ";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: { // Sign in\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_Sign_in();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tcase 50: {  // Register\n'
              '\t\t\t\t\t// Set details with validation \n'
              '\t\t\tfor (int i = 0; i != 1;) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << "        A L I B A Z A '
              'R                                             R E G I S T R A T '
              'I O N         \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t       Example of Registration: " '
              '<< endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t       ________________________" '
              '<< endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        User Name : Abdullokh " << '
              'endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        Telephone : 974006102 " << '
              'endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        Login     : Alimov_8 " << '
              'endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t        Password  : Alimov808 " << '
              'endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t\\t       ________________________" '
              '<< endl << endl;\n'
              '\t\t\t\tUser_Validtaion.SetUser();\n'
              '\n'
              '\t\t\t\t////////////\n'
              '\n'
              '\t\t\t\tValidationParol(User_Validtaion);\n'
              '\t\t\t\tValidationName(User_Validtaion);\n'
              '\t\t\t\tValidationTellNum(User_Validtaion);\n'
              '\n'
              '\t\t\t\tif (Validation == 3) {\n'
              '\t\t\t\t\t////// File Handling For User Info\n'
              '\t\t\t\t\tofstream User_Info;\n'
              '\t\t\t\t\tUser_Info.open("User_Info.txt", ios::app);  // '
              'Opening File\n'
              '\n'
              '\t\t\t\t\t// Setting User Info in Memory\n'
              '\t\t\t\t\tUser_Info << Name_Memory << endl;\n'
              '\t\t\t\t\tUser_Info << TellNum_Memory << endl;\n'
              '\t\t\t\t\tUser_Info << Login_Memory << endl;\n'
              '\t\t\t\t\tUser_Info << Parol_Memory << endl;\n'
              '\t\t\t\t\tUser_Info.close();\n'
              '\t\t\t\t\t///////// End of the File Handling\n'
              '\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t '
              '__________________________________" << endl;\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t      Correct Validation" << '
              'endl;\n'
              '\t\t\t\t\ti++;\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\tPlease press any key to '
              'continue..." << endl << endl;\n'
              '\t\t\t\t\tsystem("Pause");\n'
              '\t\t\t\t\tValidation = 0;\n'
              '\t\t\t\t}\n'
              '\t\t\t\telse {\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t '
              '__________________________________" << endl;\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t       Invalid Validation" << '
              'endl;\n'
              '\t\t\t\t\tcout << "\\t\\t   Please press \'1\' to rewrite || '
              'Press any key to go back to menu" << endl << endl;\n'
              '\t\t\t\t\tValidation = 0;\n'
              '\t\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\t\tcase 49: {\n'
              '\t\t\t\t\t\t// Rewriting i=0; \n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\t\t   break;\n'
              '\n'
              '\t\t\t\t\tdefault: F_General_Menu(); \n'
              '\t\t\t\t\t\t// Go back \n'
              '\t\t\t\t\t}\n'
              '\n'
              '\t\t\t\t} // else\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tcase 51: {  // Developers\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_Developers();\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tcase 48: {  // Developers\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\n\\n\\n\\n\\t\\t\\t\\tThank you for your '
              'attention!\\n\\n\\n\\n\\n\\n\\n\\n\\n\\t\\t\\t\\t";\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tdefault: {  cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t}\n'
              '\t}\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-000226',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=194,
         depth=2,
         type='function_decl',
         name='F_Developers',
         text='void F_Developers() {\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "        A L I B A Z A '
              'R                                                           A B '
              'O U T        \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\tcout << "\\n\\t\\t\\t\\t\'AliBazar\' Online Shopping '
              'Aplication " << endl << endl;\n'
              '\tcout << "\\t\\t\\t\\t   Team Name: EightSoft " << endl;\n'
              '\tcout << "\\t\\t\\t\\tTeam Section: OOP2 - '
              '004                         " << endl;\n'
              '\tcout << "\\t\\t\\t\\tTeam Members: ";\n'
              '\tcout << "Alimov Abdullokh [U1910060]\\n\\t\\t\\t\\t\\t      '
              'Zokirov Rustam   [U1910049] " << endl;\n'
              '\n'
              '\tcout << "\\n\\n\\t\\t\\t\\tPress any key to go back to Menu '
              '\\n\\n" << endl;\n'
              '\tsystem("pause");\n'
              '}\n')

Fragment(uuid='NORMALIZED-000227',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=209,
         depth=2,
         type='function_decl',
         name='F_Sign_in',
         text='void F_Sign_in() {\n'
              '\t// Sign in Function\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\tcout << "        A L I B A Z A '
              'R                                                       S I G '
              'N  I N          \\n";\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\tcout << "\\t\\t\\t\\t\\t   Sign in\\n\\n";\n'
              '\t\tcout << "\\t\\t\\t\\t\\t1. Sign in as Owner" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t2. Sign in as User" << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t0. Back" << endl << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t  Your Choice: ";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: { // Sign in as Owner\n'
              '\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                          O W '
              'N E R          \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t        Owner '
              'Authentication\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\tLogin    : "; cin >> Login_Sign;\n'
              '\t\t\t//cout << "\\t\\t\\t\\t\\tPassword : "; cin >> '
              'Parol_Sign;\n'
              '\t\t\tF_Password_Val();\n'
              '\t\t\tParol_Sign = Password_Val;\n'
              '\n'
              '\t\t\tif (Login_Sign == Owner_Login_Sign && Parol_Sign == '
              'Owner_Parol_Sign) {\n'
              "\t\t\t\t/////// Owner's Menu\n"
              '\t\t\t\tF_Owner_Main_Menu();\n'
              '\t\t\t\t//////\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t}\n'
              "\t\t\telse {  // If Login hasn't Registered\n"
              '\t\t\t\tcout << "\\n\\n\\t\\t\\t        Your Login and Password '
              'are Invalid." << endl;\n'
              '\t\t\t\tcout << "\\t\\t\\t   Please press any key to go back to '
              '\'Sign in\' Menu.\\n\\n" << endl;\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t\tF_Sign_in();\n'
              '\t\t\t}\n'
              '\t\t}   \n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tcase 50: {  // Sign in as User\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                     C U S T O '
              'M E R         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Customer '
              'Authentication\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\tLogin    : "; cin >> Login_Sign;\n'
              '\t\t\tF_Password_Val();\n'
              '\t\t\tParol_Sign = Password_Val;\n'
              '\t\t\t//////   File Handling For User Info\n'
              '\t\t\tifstream Search;\n'
              '\t\t\tSearch.open("User_Info.txt");\n'
              '\n'
              '\t\t\twhile (Search) {\n'
              '\t\t\t\tSearch >> Name_Memory;\n'
              '\t\t\t\tSearch >> TellNum_Memory;\n'
              '\t\t\t\tSearch >> Login_Memory;\n'
              '\t\t\t\tSearch >> Parol_Memory;\n'
              '\t\t\t\tif (Login_Sign == Login_Memory && Parol_Sign == '
              'Parol_Memory) {\n'
              '\t\t\t\t\tUser User_1(Name_Memory, TellNum_Memory, '
              'Login_Memory, Parol_Memory);\n'
              '\t\t\t\t\tF_User_Main_Menu();\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tSearch.close();\n'
              '\t\t\t///////// End of the File Handling\n'
              '\n'
              '\t\t\tcout << "\\n\\n\\t\\t\\t        Your Login and Password '
              'are Invalid." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t   Please press any key to go back to '
              '\'Sign in\' Menu.\\n\\n" << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tF_Sign_in();\n'
              '\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tcase 48: {  // Back\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\ti = 1000;\n'
              '\t\t\tF_General_Menu();\n'
              '\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t}\n'
              '\t}\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-000228',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=303,
         depth=2,
         type='function_decl',
         name='F_Logo',
         text='void F_Logo() {\n'
              '\tsystem("cls");\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "        A L I B A Z A '
              'R                                                    8. Account '
              'Info         \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '}\n')

Fragment(uuid='NORMALIZED-000229',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=311,
         depth=2,
         type='function_decl',
         name='F_User_Main_Menu',
         text='void F_User_Main_Menu() {\n'
              '\t// Entering as a Guest\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\n'
              '\t\tF_Logo();\n'
              '\n'
              '\t\tcout << "       Categories\\n\\n";\n'
              '\t\tcout << "       1. Vegetables & Fruits\\n\\n";\n'
              '\t\tcout << "       2. Water & Beverages\\n\\n";\n'
              '\t\tcout << "       3. Fast Food Products\\n\\n";\n'
              '\t\tcout << "       4. Cart and Overall Sums\\n\\n";\n'
              '\t\tcout << "       0. Go Back\\n\\n";\n'
              '\t\tcout << "       Your choice: ";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: {\n'
              '\t\t\tF_Class_Of_Products1_Menu();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 50: {\n'
              '\t\t\tF_Class_Of_Products2_Menu();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 51: {\n'
              '\t\t\tF_Class_Of_Products3_Menu();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 52:{\n'
              '\t\t\tF_Cart_Check();\n'
              '\t\t}break;\n'
              '\n'
              '\t\tcase 48: {  // Back to Menu\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\ti = 1000;\n'
              '\t\t\tF_Sign_in();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Information :" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login     : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password  : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t} // switch \n'
              '\t} // for loop \n'
              '}\n')

Fragment(uuid='NORMALIZED-000230',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=372,
         depth=2,
         type='function_decl',
         name='F_Table_For_Increasing_And_Decreasing',
         text='void F_Table_For_Increasing_And_Decreasing() {\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n";\n'
              '\tcout << "     (+)   \'Press 1\'                        \\n";\n'
              '\tcout << "     (-)   \'Press 2\'                        \\n";\n'
              '\tcout << "     (0)   \'Back\'                           \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\tcout << "     Add to Cart:  \\n";\n'
              '\t//cin >> VariableForIncreasingAndDecreasing;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000231',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=383,
         depth=2,
         type='function_decl',
         name='F_Class_Of_Products1_Menu',
         text='void F_Class_Of_Products1_Menu() {\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '    \tF_Logo();\n'
              '\n'
              '\t\tcout << "    Products List  \\t\\t    Category\\t\\t       '
              'Price\\t\\t In Stock\\n";\n'
              '\t\tProduct1_1.Display();\n'
              '\t\tProduct1_2.Display();\n'
              '\t\tProduct1_3.Display();\n'
              '\t\tposition1 = 1;\n'
              '\n'
              '\t\tcout << " 0. Back\\n\\n";\n'
              '\t\tcout << " Your choice: ";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\t\t// for Product1_1\n'
              '\t\tcase 49: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "    Products List  \\t\\t    '
              'Category\\t\\t       Price\\t\\t In Stock\\n";\n'
              '\t\t\t\tProduct1_1.Display(); position1 = 1;\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Product1_1.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tUser_1.Product1_1_User++;\n'
              '\t\t\t\t\t\tProduct1_1.quantity--;\n'
              '\t\t\t\t\t\tcout << " Quantity of "<< Product1_1.getName() << " '
              '- " << User_1.Product1_1_User << endl;\n'
              '\t\t\t\t\t\tcout << "     Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Product1_1_User > 0) { // Check for (-1 '
              'kg/pc)\n'
              '\t\t\t\t\t\tUser_1.Product1_1_User--;\n'
              '\t\t\t\t\t\tProduct1_1.quantity++;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product1_1.getName() << '
              '" - "  << User_1.Product1_1_User << endl;\n'
              '\t\t\t\t\t\tcout << "     Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg/pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for potato\n"
              "\t\t\t}// 'for' loop for potato\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t   // for Product1_2\n'
              '\t\tcase 50: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "    Products List  \\t\\t    '
              'Category\\t\\t       Price\\t\\t In Stock\\n";\n'
              '\t\t\t\tProduct1_2.Display(); position1 = 1;\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Product1_2.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tUser_1.Product1_2_User++;\n'
              '\t\t\t\t\t\tProduct1_2.quantity--;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product1_2.getName() << '
              '" - " << User_1.Product1_2_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Product1_2_User > 0) { // Check for (-1 '
              'kg/pc)\n'
              '\t\t\t\t\t\tUser_1.Product1_2_User--;\n'
              '\t\t\t\t\t\tProduct1_2.quantity++;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product1_2.getName() << '
              '" - " << User_1.Product1_2_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg/pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for potato\n"
              "\t\t\t}// 'for' loop for potato\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t   // for Product1_3\n'
              '\t\tcase 51: {\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "    Products List  \\t\\t    '
              'Category\\t\\t       Price\\t\\t In Stock\\n";\n'
              '\t\t\t\tProduct1_3.Display(); position1 = 1;\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Product1_3.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tUser_1.Product1_3_User++;\n'
              '\t\t\t\t\t\tProduct1_3.quantity--;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product1_3.getName() << '
              '" - " << User_1.Product1_3_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Product1_3_User > 0) { // Check for (-1 '
              'kg/pc)\n'
              '\t\t\t\t\t\tUser_1.Product1_3_User--;\n'
              '\t\t\t\t\t\tProduct1_3.quantity++;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product1_3.getName() << '
              '" - " << User_1.Product1_3_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg/pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for potato\n"
              "\t\t\t}// 'for' loop for potato\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t  // Back to F_User menu \n'
              '\t\tcase 48: {   k = 1000;\n'
              '\t\t\t//F_User_Main_Menu(); \n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Information :" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch ends\n'
              '\t} // loop ends\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000232',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=544,
         depth=2,
         type='function_decl',
         name='F_Class_Of_Products2_Menu',
         text='void F_Class_Of_Products2_Menu() {\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo();\n'
              '\n'
              '\t\tcout << "    Products List  \\t\\t    Category\\t\\t       '
              'Price\\t\\t In Stock\\n";\n'
              '\t\tProduct2_1.Display();\n'
              '\t\tProduct2_2.Display();\n'
              '\t\tProduct2_3.Display();\n'
              '\t\tposition1 = 1;\n'
              '\n'
              '\t\tcout << " 0. Back\\n\\n";\n'
              '\t\tcout << " Your choice: ";\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: { // Product2_1\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "    Products List  \\t\\t    '
              'Category\\t\\t       Price\\t\\t In Stock\\n";\n'
              '\t\t\t\tProduct2_1.Display(); position1 = 1;\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Product2_1.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tProduct2_1.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Product2_1_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product2_1.getName() << '
              '" - " << User_1.Product2_1_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Product2_1_User > 0) { // Check for (-1 '
              'kg/pc)\n'
              '\t\t\t\t\t\tProduct2_1.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Product2_1_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product2_1.getName() << '
              '" - "  << User_1.Product2_1_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg/pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for Product2_1\n"
              "\t\t\t}// 'for' loop for Product2_1\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 50: { // Product2_2\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "    Products List  \\t\\t    '
              'Category\\t\\t       Price\\t\\t In Stock\\n";\n'
              '\t\t\t\tProduct2_2.Display(); position1 = 1;\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Product2_2.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tProduct2_2.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Product2_2_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product2_2.getName() << '
              '" - " << User_1.Product2_2_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Product2_2_User > 0) { // Check for (-1 '
              'kg/pc)\n'
              '\t\t\t\t\t\tProduct2_2.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Product2_2_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product2_2.getName() << '
              '" - " << User_1.Product2_2_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg/pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for Product2_1\n"
              "\t\t\t}// 'for' loop for Product2_1\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 51: { // Product2_3\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "    Products List  \\t\\t    '
              'Category\\t\\t       Price\\t\\t In Stock\\n";\n'
              '\t\t\t\tProduct2_3.Display(); position1 = 1;\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Product2_3.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tProduct2_3.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Product2_3_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product2_3.getName() << '
              '" - " << User_1.Product2_3_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Product2_3_User > 0) { // Check for (-1 '
              'kg/pc)\n'
              '\t\t\t\t\t\tProduct2_3.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Product2_3_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product2_3.getName() << '
              '" - " << User_1.Product2_3_User << endl;\n'
              '\t\t\t\t\t\tcout << "    Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg/pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for Product2_1\n"
              "\t\t\t}// 'for' loop for Product2_1\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // Back to F_User menu \n'
              '\t\tcase 48: {   k = 1000;\n'
              '\t\t\tF_User_Main_Menu(); }\n'
              '\t\t\t   break;\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Information :" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch ends\n'
              '\n'
              '\t} // loop ends\n'
              '\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000233',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=699,
         depth=2,
         type='function_decl',
         name='F_Class_Of_Products3_Menu',
         text='void F_Class_Of_Products3_Menu() {\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo();      \n'
              '\t\tcout << "    Products List  \\t\\t    Category\\t\\t       '
              'Price\\t\\t In Stock\\n";\n'
              '\t\tProduct3_1.Display();\n'
              '\t\tProduct3_2.Display();\n'
              '\t\tProduct3_3.Display();\n'
              '\t\tposition1 = 1;\n'
              '\n'
              '\t\tcout << " 0. Back\\n\\n";\n'
              '\t\tcout << " Your choice: ";\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: { // Product3_1\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\n'
              '\t\t\t\tcout << "    Products List  \\t\\t    '
              'Category\\t\\t       Price\\t\\t In Stock\\n";\n'
              '\t\t\t\tProduct3_1.Display(); position1 = 1;\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Product3_1.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tProduct3_1.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Product3_1_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product3_1.getName() << '
              '" - " << User_1.Product3_1_User << endl;\n'
              '\t\t\t\t\t\tcout << "     Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Product3_1_User > 0) { // Check for (-1 '
              'kg/pc)\n'
              '\t\t\t\t\t\tProduct3_1.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Product3_1_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product3_1.getName() << '
              '" - " << User_1.Product3_1_User << endl;\n'
              '\t\t\t\t\t\tcout << "     Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg/pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for bun bread\n"
              "\t\t\t}// 'for' loop for bun bread\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 50: { // Product3_2\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "    Products List  \\t\\t    '
              'Category\\t\\t       Price\\t\\t In Stock\\n";\n'
              '\t\t\t\tProduct3_2.Display(); position1 = 1;\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Product3_2.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tProduct3_2.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Product3_2_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product3_2.getName() << '
              '" - " << User_1.Product3_2_User << endl;\n'
              '\t\t\t\t\t\tcout << "     Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Product3_2_User > 0) { // Check for (-1 '
              'kg/pc)\n'
              '\t\t\t\t\t\tProduct3_2.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Product3_2_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product3_2.getName() << '
              '" - " << User_1.Product3_2_User << endl;\n'
              '\t\t\t\t\t\tcout << "     Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg/pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for bun bread\n"
              "\t\t\t}// 'for' loop for bun bread\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tcase 51: { // Product3_3\n'
              '\t\t\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "    Products List  \\t\\t    '
              'Category\\t\\t       Price\\t\\t In Stock\\n";\n'
              '\t\t\t\tProduct3_3.Display(); position1 = 1;\n'
              '\n'
              '\t\t\t\tF_Table_For_Increasing_And_Decreasing();\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49:\n'
              '\t\t\t\t\tif (Product3_3.getQuantity() > 0) { // checking for '
              'storage and user needs\n'
              '\t\t\t\t\t\tProduct3_3.quantity--;\n'
              '\t\t\t\t\t\tUser_1.Product3_3_User++;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product3_3.getName() << '
              '" - " << User_1.Product3_3_User << endl;\n'
              '\t\t\t\t\t\tcout << "     Successfully added \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tcout << " Product is over / finished. Sorry!\\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 50:\n'
              '\t\t\t\t\tif (User_1.Product3_3_User > 0) { // Check for (-1 '
              'kg/pc)\n'
              '\t\t\t\t\t\tProduct3_3.quantity++;\n'
              '\t\t\t\t\t\tUser_1.Product3_3_User--;\n'
              '\t\t\t\t\t\tcout << " Quantity of " << Product3_3.getName() << '
              '" - " << User_1.Product3_3_User << endl;\n'
              '\t\t\t\t\t\tcout << "     Successfully decreased \\n";\n'
              '\t\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse { cout << " 0 (kg/pc) can not decrease \\n"; '
              'Sleep(0700); Sleep(0700); }\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 48:\n'
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\t}// 'switch' for bun bread\n"
              "\t\t\t}// 'for' loop for bun bread\n"
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t\t   // Back to F_User menu \n'
              '\t\tcase 48: {   k = 1000;\n'
              '\t\t\tF_User_Main_Menu(); }\n'
              '\t\t\t   break;\n'
              '\t\tcase 56: { // User info   \n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                                   U S E R  I '
              'N F O         \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Information :" << endl << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      User Name  : " << Name_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Telephone  : " << '
              'TellNum_Memory << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Login      : " << Login_Memory '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t      Password   : " << Parol_Memory '
              '<< endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t} // switch ends\n'
              '\n'
              '\t} // loop ends\n'
              '\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000234',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=854,
         depth=2,
         type='function_decl',
         name='F_Cart_Check',
         text='void F_Cart_Check() {\n'
              '\tsystem("cls");\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "                                              C A R '
              'T \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t// Check\n'
              '\tfor (int i = 1; i <= 1; i++) {\n'
              '\t\tif (User_1.Product1_1_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << ". " << '
              'Product1_1.getName() << " --- " << User_1.Product1_1_User << " '
              '--- Price: " << User_1.Product1_1_User * '
              'Product1_1.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Product1_1_User * '
              'Product1_1.getPrice();\n'
              '\t\t}\n'
              '\n'
              '\t\tif (User_1.Product1_2_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << ". " << '
              'Product1_2.getName() <<" --- " << User_1.Product1_2_User << " '
              '--- Price: " << User_1.Product1_2_User * '
              'Product1_2.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Product1_2_User * '
              'Product1_2.getPrice();\n'
              '\t\t}\n'
              '\n'
              '\t\tif (User_1.Product1_3_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << ". " << '
              'Product1_3.getName() <<" --- " << User_1.Product1_3_User << " '
              '--- Price: " << User_1.Product1_3_User * '
              'Product1_3.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Product1_3_User * '
              'Product1_3.getPrice();\n'
              '\t\t}\n'
              '\n'
              '\t\tif (User_1.Product2_1_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << ". " << '
              'Product2_1.getName() <<" --- " << User_1.Product2_1_User << " '
              '--- Price: " << User_1.Product2_1_User * '
              'Product2_1.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Product2_1_User * '
              'Product2_1.getPrice();\n'
              '\t\t}\n'
              '\t\tif (User_1.Product2_2_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << ". " << '
              'Product2_2.getName() <<" --- " << User_1.Product2_2_User << " '
              '--- Price: " << User_1.Product2_2_User * '
              'Product2_2.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Product2_2_User * '
              'Product2_2.getPrice();\n'
              '\t\t}\n'
              '\t\tif (User_1.Product2_3_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << ". " << '
              'Product2_3.getName() << " --- " << User_1.Product2_3_User << " '
              '--- Price: " << User_1.Product2_3_User * '
              'Product2_3.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Product2_3_User * '
              'Product2_3.getPrice();\n'
              '\t\t}\n'
              '\t\tif (User_1.Product3_1_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << ". " << '
              'Product3_1.getName() << " --- " << User_1.Product3_1_User << " '
              '--- Price: " << User_1.Product3_1_User * '
              'Product3_1.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Product3_1_User * '
              'Product3_1.getPrice();\n'
              '\t\t}\n'
              '\t\tif (User_1.Product3_2_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << ". " << '
              'Product3_2.getName() << " --- " << User_1.Product3_2_User << " '
              '--- Price: " << User_1.Product3_2_User * '
              'Product3_2.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Product3_2_User * '
              'Product3_2.getPrice();\n'
              '\t\t}\n'
              '\t\tif (User_1.Product3_3_User > 0) {\n'
              '\t\t\tcout << "\\n\\t\\t\\t  " << i << ". " << '
              'Product3_3.getName()<< " --- " << User_1.Product3_3_User << " '
              '--- Price: " << User_1.Product3_3_User * '
              'Product3_3.getPrice();\n'
              '\t\t\ti++;\n'
              '\t\t\tOverall_Sum += User_1.Product3_3_User * '
              'Product3_3.getPrice();\n'
              '\t\t}\n'
              '\n'
              '\t\tif (i == 1) { // if nothing go to Menu\n'
              '\t\t\tcout << "\\n\\t You do not have any product in '
              '\'CART\'.\\n";\n'
              '\t\t\tcout << "\\tPress any key to go to \'Products '
              'Menu\'\\n\\n" << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tOverall_Sum = 0;\n'
              '\t\t\tF_User_Main_Menu();\n'
              '\t\t}\n'
              '\t\tif (i > 1) { // Menu for buying or back \n'
              '\t\t\tcout << "\\n\\n\\t\\t\\t  Overall Price: " << Overall_Sum '
              '<< " Sums" << endl;\n'
              '\t\t\tcout << "\\n\\t   1. Buy now" << endl;\n'
              '\t\t\tcout << "\\t   0. Products Menu" << endl;\n'
              '\n'
              '\t\t\tswitch (_getch()) {\n'
              '\t\t\tcase 49: { //buy\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\t////\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\t\tcout << "                                              '
              'C A R T \\n";\n'
              '\t\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\n'
              '\t\t\t\t////\n'
              '\t\t\t\tcout << " Money will be taken from your \'Telephone '
              'Number\': " << endl;\n'
              '\t\t\t\tcout << " 1. OK" << endl;\n'
              '\t\t\t\tcout << " Press any key to go back..." << endl;\n'
              '\t\t\t\tswitch (_getch()) {\n'
              '\t\t\t\tcase 49: {\n'
              '\t\t\t\t\tcout << "\\n  Transaction Successful!\\n  '
              'Congratulations ! :)" << endl;\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t\tOverall_Sum = 0;\n'
              '\t\t\t\t\t// Storage\n'
              '\t\t\t\t\tUser_1.Product1_1_User = 0; User_1.Product1_3_User = '
              '0; User_1.Product1_2_User = 0;\n'
              '\t\t\t\t\tUser_1.Product2_1_User = 0; User_1.Product2_2_User = '
              '0; User_1.Product2_3_User = 0;\n'
              '\t\t\t\t\tUser_1.Product3_1_User = 0; User_1.Product3_2_User = '
              '0; User_1.Product3_3_User = 0;\n'
              '\t\t\t\t\tF_User_Main_Menu();\n'
              '\t\t\t\t}\n'
              '\t\t\t\t\t   break;\n'
              '\n'
              '\t\t\t\tdefault:  F_Cart_Check();\n'
              '\n'
              '\t\t\t\t} // switch of case 49\n'
              '\n'
              '\t\t\t\t////\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t}\n'
              '\t\t\t\t   break;\n'
              '\t\t\tcase 48: { // Back\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tOverall_Sum = 0;\n'
              '\t\t\t\tF_User_Main_Menu();\n'
              '\t\t\t}\n'
              '\t\t\t\t   break;\n'
              '\t\t\tdefault: F_Cart_Check();\n'
              '\t\t\t} // switch ends\n'
              '\n'
              '\t\t} //if ends\n'
              '\n'
              '\t}// loop end\n'
              '\t//system("pause");\n'
              '} // function ends\n')

Fragment(uuid='NORMALIZED-000235',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=974,
         depth=2,
         type='function_decl',
         name='F_Logo_Owner',
         text='void F_Logo_Owner() {\n'
              '\tsystem("cls");\n'
              '\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\tcout << "        A L I B A Z A '
              'R                                                  O W N E R  M '
              'E N U         \\n";\n'
              '\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '}\n')

Fragment(uuid='NORMALIZED-000236',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=982,
         depth=2,
         type='function_decl',
         name='F_Owner_Main_Menu',
         text='void F_Owner_Main_Menu() {\n'
              '\tsystem("cls");\n'
              '\tcout << endl << endl;\n'
              '\n'
              '\t// Entering as a Owner of shop\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tF_Logo_Owner();\n'
              '\t\tcout << "       Main Menu\\n\\n";\n'
              '\t\tcout << "       1. Products in stock \\n\\n";\n'
              '\t\tcout << "       2. Customers list \\n\\n";\n'
              '\t\tcout << "       0. Back\\n\\n";\n'
              '\t\tcout << "       Your choice: ";\n'
              '\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\tcase 49: {\n'
              '\t\t\tF_Owner_Products_Stotage();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tcase 50: {\n'
              '\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\t\t\tcout << "        A L I B A Z A '
              'R                                           C U S T O M E R S  '
              'L I S T        \\n";\n'
              '\t\t\tcout << '
              '"____________________________________________________________________________________________________\\n\\n";\n'
              '\t\t\tcout << "\\n\\t\\t\\t   Customers list :" << endl << '
              'endl;\n'
              '\n'
              '\t\t\tF_Owner_Customers_List();\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\n'
              '\n'
              '\t\tcase 48: {  // Back to Menu\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tk = 1000;\n'
              '\t\t\tF_Sign_in();\n'
              '\t\t} break;\n'
              '\n'
              '\t\tdefault: { cout << "\\n\\n\\t\\t\\t       Your choice is '
              'not available in Menu." << endl;\n'
              '\t\t\tcout << "\\t\\t\\t\\t    Please enter correct keys.\\n" '
              '<< endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t} // switch \n'
              '\t} // for loop \n'
              '}\n')

Fragment(uuid='NORMALIZED-000237',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=1032,
         depth=2,
         type='function_decl',
         name='F_Owner_Products_Stotage',
         text='void F_Owner_Products_Stotage() {\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tF_Logo_Owner();\n'
              '\n'
              '\t\tcout << "    Products List  \\t\\t    Category\\t\\t       '
              'Price\\t\\t In Stock\\n";\n'
              '\t\tProduct1_1.Display();\n'
              '\t\tProduct1_2.Display();\n'
              '\t\tProduct1_3.Display();\n'
              '\t\tProduct2_1.Display();\n'
              '\t\tProduct2_2.Display();\n'
              '\t\tProduct2_3.Display();\n'
              '\t\tProduct3_1.Display();\n'
              '\t\tProduct3_2.Display();\n'
              '\t\tProduct3_3.Display();\n'
              '\n'
              '\t\tposition1 = 1; // numbering of products return to 1\n'
              '\t\t\n'
              '\t\tcout << " \\n   0. Back\\n";\n'
              '\t\tcout << "   Make changes in: ";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase '1':\n"
              '\t\t\tF_Modify_Info_Products(1);\n'
              '\t\t\tbreak;\n'
              "\t\tcase '2':\n"
              '\t\t\tF_Modify_Info_Products(2);\n'
              '\t\t\tbreak;\n'
              "\t\tcase '3':\n"
              '\t\t\tF_Modify_Info_Products(3);\n'
              '\t\t\tbreak;\n'
              "\t\tcase '4':\n"
              '\t\t\tF_Modify_Info_Products(4);\n'
              '\t\t\tbreak;\n'
              "\t\tcase '5':\n"
              '\t\t\tF_Modify_Info_Products(5);\n'
              '\t\t\tbreak;\n'
              "\t\tcase '6':\n"
              '\t\t\tF_Modify_Info_Products(6);\n'
              '\t\t\tbreak;\n'
              "\t\tcase '7':\n"
              '\t\t\tF_Modify_Info_Products(7);\n'
              '\t\t\tbreak;\n'
              "\t\tcase '8':\n"
              '\t\t\tF_Modify_Info_Products(8);\n'
              '\t\t\tbreak;\n'
              "\t\tcase '9':\n"
              '\t\t\tF_Modify_Info_Products(9);\n'
              '\t\t\tbreak;\n'
              "\t\tcase '0':   // Back to Menu\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\ti = 1000;\n'
              '\t\t\tF_Owner_Main_Menu();\n'
              '\t\t    break;\n'
              '\n'
              "\t\tcase 'i' || 'I':  // User info   \n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\n\\t\\t\\t   User Information:" << endl;;\n'
              '\t\t\tcout << "\\t\\t    _______________________________" << '
              'endl << endl;;\n'
              '\t\t\tcout << "\\t\\t      User Name  : " << Name_Memory << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      Telephone  : " << TellNum_Memory << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      Login      : " << Login_Memory << '
              'endl;\n'
              '\t\t\tcout << "\\t\\t      Password   : " << Parol_Memory << '
              'endl << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t    break;\n'
              '\t\t\n'
              '\t\tdefault:  cout << "\\n\\t\\t      Your choice is not '
              'available in Menu" << endl;\n'
              '\t\t\tcout << "\\t\\tPlease press any keyboard to continue '
              'program\\n" << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t     break;\n'
              '\n'
              '\t\t} // switch\n'
              '\n'
              '\t} // for loop for products in stock  \n'
              '}\n')

Fragment(uuid='NORMALIZED-000238',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=1108,
         depth=2,
         type='function_decl',
         name='F_Modify_Info_Products',
         text='void F_Modify_Info_Products(int take_product_location) {\n'
              '\tfor (int j = 0; j < 1000; j++) {\n'
              '\t\tsystem("cls");\n'
              '\n'
              '\t\t// It is for Displaying the products in order\n'
              '\t\tcout << "    Products List  \\t\\t    Category\\t\\t       '
              'Price\\t\\t In Stock\\n";\n'
              '\t\tif (take_product_location == 1) Product1_1.Display();\n'
              '\t\telse if (take_product_location == 2) Product1_2.Display();\n'
              '\t\telse if (take_product_location == 3) Product1_3.Display();\n'
              '\t\telse if (take_product_location == 4) Product2_1.Display();\n'
              '\t\telse if (take_product_location == 5) Product2_2.Display();\n'
              '\t\telse if (take_product_location == 6) Product2_3.Display();\n'
              '\t\telse if (take_product_location == 7) Product3_1.Display();\n'
              '\t\telse if (take_product_location == 8) Product3_2.Display();\n'
              '\t\telse if (take_product_location == 39) '
              'Product3_3.Display();\n'
              '\t\tposition1 = 1;\n'
              '\t\tcout << '
              '"____________________________________________________________________________________________________ '
              '\\n";\n'
              '\n'
              '\t\tcout << " 1. Change the price \\n";\n'
              '\t\tcout << " 2. Change the quantity in storage\\n";\n'
              '\t\tcout << " 3. Change the name of product\\n";\n'
              '\t\tcout << " 4. Change the class of product\\n";\n'
              '\t\tcout << " 0. Go back \\n";\n'
              '\t\tcout << " Your choice:\\n\\n";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              '\t\t\t// FOR CHANGING A PRICE\n'
              '\t\tcase 49:\n'
              '\t\t\tcout << " Enter a new price: ";\n'
              '\t\t\tcin >> Ch_Price;\n'
              '\n'
              '\t\t\tif (Ch_Price >= 0) {\n'
              '\t\t\t\tif (take_product_location == 1) Product1_1.price = '
              'Ch_Price;\n'
              '\t\t\t\telse if (take_product_location == 2) Product1_2.price = '
              'Ch_Price;\n'
              '\t\t\t\telse if (take_product_location == 3) Product1_3.price = '
              'Ch_Price;\n'
              '\t\t\t\telse if (take_product_location == 4) Product2_1.price = '
              'Ch_Price;\n'
              '\t\t\t\telse if (take_product_location == 5) Product2_2.price = '
              'Ch_Price;\n'
              '\t\t\t\telse if (take_product_location == 6) Product2_3.price = '
              'Ch_Price;\n'
              '\t\t\t\telse if (take_product_location == 7) Product3_1.price = '
              'Ch_Price;\n'
              '\t\t\t\telse if (take_product_location == 8) Product3_2.price = '
              'Ch_Price;\n'
              '\t\t\t\telse if (take_product_location == 39) Product3_3.price '
              '= Ch_Price;\n'
              '\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t}\n'
              '\t\t\telse {\n'
              '\t\t\t\tcout << " Price cannot be negative! Please check one '
              'more time.\\n";\n'
              '\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t}\n'
              '\t\t\tbreak;\n'
              '\t\t\t// FOR CHANGING THE QUANTITY IN STORAGE\n'
              '\t\tcase 50:\n'
              '\t\t\tcout << " Enter a new quantity in storage: ";\n'
              '\t\t\tcin >> Ch_Quantity;\n'
              '\n'
              '\t\t\tif (Ch_Quantity > 0) {\n'
              '\t\t\t\tif (take_product_location == 1) Product1_1.quantity = '
              'Ch_Quantity;\n'
              '\t\t\t\telse if (take_product_location == 2) '
              'Product1_2.quantity = Ch_Quantity;\n'
              '\t\t\t\telse if (take_product_location == 3) '
              'Product1_3.quantity = Ch_Quantity;\n'
              '\t\t\t\telse if (take_product_location == 4) '
              'Product2_1.quantity = Ch_Quantity;\n'
              '\t\t\t\telse if (take_product_location == 5) '
              'Product2_2.quantity = Ch_Quantity;\n'
              '\t\t\t\telse if (take_product_location == 6) '
              'Product2_3.quantity = Ch_Quantity;\n'
              '\t\t\t\telse if (take_product_location == 7) '
              'Product3_1.quantity = Ch_Quantity;\n'
              '\t\t\t\telse if (take_product_location == 8) '
              'Product3_2.quantity = Ch_Quantity;\n'
              '\t\t\t\telse if (take_product_location == 39) '
              'Product3_3.quantity = Ch_Quantity;\n'
              '\t\t\t\tcout << " Successfully changed!\\n";\n'
              '\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t}\n'
              '\t\t\telse {\n'
              '\t\t\t\tcout << " Quantity cannot be negative\\n";\n'
              '\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t}\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\t\t// FOR CHANGING THE NAME\n'
              '\t\tcase 51:\n'
              '\t\t\tcout << " Enter a new name: ";\n'
              '\t\t\tgetline(cin, Product_Name);\n'
              '\n'
              '\t\t\tif (take_product_location == 1) Product1_1.name = '
              'Product_Name;\n'
              '\t\t\telse if (take_product_location == 2) Product1_2.name = '
              'Product_Name;\n'
              '\t\t\telse if (take_product_location == 3) Product1_3.name = '
              'Product_Name;\n'
              '\t\t\telse if (take_product_location == 4) Product2_1.name = '
              'Product_Name;\n'
              '\t\t\telse if (take_product_location == 5) Product2_2.name = '
              'Product_Name;\n'
              '\t\t\telse if (take_product_location == 6) Product2_3.name = '
              'Product_Name;\n'
              '\t\t\telse if (take_product_location == 7) Product3_1.name = '
              'Product_Name;\n'
              '\t\t\telse if (take_product_location == 8) Product3_2.name = '
              'Product_Name;\n'
              '\t\t\telse if (take_product_location == 39) Product3_3.name = '
              'Product_Name;\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\t\t// FOR CHANGING THE CLASS OF PRODUCT\n'
              '\t\tcase 52:\n'
              '\t\t\tcout << " Enter a new Class Name: ";\n'
              '\t\t\tgetline(cin, Product_Class);\n'
              '\n'
              '\t\t\tif (take_product_location == 1) '
              'Product1_1.class_of_products = Product_Class;\n'
              '\t\t\telse if (take_product_location == 2) '
              'Product1_2.class_of_products = Product_Class;\n'
              '\t\t\telse if (take_product_location == 3) '
              'Product1_3.class_of_products = Product_Class;\n'
              '\t\t\telse if (take_product_location == 4) '
              'Product2_1.class_of_products = Product_Class;\n'
              '\t\t\telse if (take_product_location == 5) '
              'Product2_2.class_of_products = Product_Class;\n'
              '\t\t\telse if (take_product_location == 6) '
              'Product2_3.class_of_products = Product_Class;\n'
              '\t\t\telse if (take_product_location == 7) '
              'Product3_1.class_of_products = Product_Class;\n'
              '\t\t\telse if (take_product_location == 8) '
              'Product3_2.class_of_products = Product_Class;\n'
              '\t\t\telse if (take_product_location == 39) '
              'Product3_3.class_of_products = Product_Class;\n'
              '\t\t\tbreak;\n'
              '\t\tcase 48:\n'
              '\t\t\tj = 1000;\n'
              '\t\t\tbreak;\n'
              "\t\t}// 'switch' \n"
              "\t}// 'for' loop \n"
              '}\n')

Fragment(uuid='NORMALIZED-000239',
         path='/E-Commerce App V3.0/main.cpp',
         lineno=1220,
         depth=2,
         type='function_decl',
         name='F_Owner_Customers_List',
         text='void F_Owner_Customers_List() {\n'
              '\tcout << endl;\n'
              '\n'
              '\tifstream in;\n'
              '\tint Num = 1;\n'
              '\tstring Info;\n'
              '\n'
              '\tin.open("User_Info.txt");\n'
              '\twhile (in) {\n'
              '\t\tcout << "\\t " << Num << "." << endl;\n'
              '\t\tcout << "\\t-------------------------" << endl;\n'
              '\t\tgetline(in, Info);\n'
              '\t\tcout << "\\t User Name: " << Info << endl;\n'
              '\t\tgetline(in, Info);\n'
              '\t\tcout << "\\t Phone    : " << Info << endl;\n'
              '\t\tgetline(in, Info);\n'
              '\t\tcout << "\\t Login    : " << Info << endl;\n'
              '\t\tgetline(in, Info);\n'
              '\t\tcout << "\\t Password : " << Info << endl;\n'
              '\t\tNum++;\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\tcout << "\\t-------------------------" << endl;\n'
              '\tin.close();\n'
              '}\n')

Fragment(uuid='NORMALIZED-000240',
         path='/Labirint Game/olaf-game.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/olaf-game.cpp\n'
              '  Functions: F_Developers, F_Help, F_Loading, F_Logic, '
              'F_MainMenu, F_Map, F_Quit, F_Start, main\n'
              '  Variable declarations: Case_1, Case_2, Developers, Help, '
              'Loading_1, Loading_2, Loading_3, MainMenu, Map, Player, Quit, '
              'Rand, TURN_1, TURN_2, Turn_1, Turn_2, k, window, x\n')

Fragment(uuid='NORMALIZED-000241',
         path='/Labirint Game/olaf-game.cpp',
         lineno=9,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-000242',
         path='/Labirint Game/olaf-game.cpp',
         lineno=12,
         depth=2,
         type='var_decl',
         name='k',
         text='int k;\n')

Fragment(uuid='NORMALIZED-000243',
         path='/Labirint Game/olaf-game.cpp',
         lineno=15,
         depth=2,
         type='var_decl',
         name='Rand',
         text='int Rand, Case_1 = 0, Case_2 = 0, x, Turn_1, Turn_2, TURN_1, '
              'TURN_2;\n')

Fragment(uuid='NORMALIZED-000244',
         path='/Labirint Game/olaf-game.cpp',
         lineno=15,
         depth=2,
         type='var_decl',
         name='Case_1',
         text='int Rand, Case_1 = 0, Case_2 = 0, x, Turn_1, Turn_2, TURN_1, '
              'TURN_2;\n')

Fragment(uuid='NORMALIZED-000245',
         path='/Labirint Game/olaf-game.cpp',
         lineno=15,
         depth=2,
         type='var_decl',
         name='Case_2',
         text='int Rand, Case_1 = 0, Case_2 = 0, x, Turn_1, Turn_2, TURN_1, '
              'TURN_2;\n')

Fragment(uuid='NORMALIZED-000246',
         path='/Labirint Game/olaf-game.cpp',
         lineno=15,
         depth=2,
         type='var_decl',
         name='x',
         text='int Rand, Case_1 = 0, Case_2 = 0, x, Turn_1, Turn_2, TURN_1, '
              'TURN_2;\n')

Fragment(uuid='NORMALIZED-000247',
         path='/Labirint Game/olaf-game.cpp',
         lineno=15,
         depth=2,
         type='var_decl',
         name='Turn_1',
         text='int Rand, Case_1 = 0, Case_2 = 0, x, Turn_1, Turn_2, TURN_1, '
              'TURN_2;\n')

Fragment(uuid='NORMALIZED-000248',
         path='/Labirint Game/olaf-game.cpp',
         lineno=15,
         depth=2,
         type='var_decl',
         name='Turn_2',
         text='int Rand, Case_1 = 0, Case_2 = 0, x, Turn_1, Turn_2, TURN_1, '
              'TURN_2;\n')

Fragment(uuid='NORMALIZED-000249',
         path='/Labirint Game/olaf-game.cpp',
         lineno=15,
         depth=2,
         type='var_decl',
         name='TURN_1',
         text='int Rand, Case_1 = 0, Case_2 = 0, x, Turn_1, Turn_2, TURN_1, '
              'TURN_2;\n')

Fragment(uuid='NORMALIZED-000250',
         path='/Labirint Game/olaf-game.cpp',
         lineno=15,
         depth=2,
         type='var_decl',
         name='TURN_2',
         text='int Rand, Case_1 = 0, Case_2 = 0, x, Turn_1, Turn_2, TURN_1, '
              'TURN_2;\n')

Fragment(uuid='NORMALIZED-000251',
         path='/Labirint Game/olaf-game.cpp',
         lineno=18,
         depth=2,
         type='var_decl',
         name='window',
         text='sf::RenderWindow window(sf::VideoMode(1000, 650), "OLAF Game", '
              'sf::Style::Close | sf::Style::Resize);\n')

Fragment(uuid='NORMALIZED-000252',
         path='/Labirint Game/olaf-game.cpp',
         lineno=22,
         depth=2,
         type='var_decl',
         name='MainMenu',
         text='sf::RectangleShape MainMenu(sf::Vector2f(1000.0f, 650.0f));\n')

Fragment(uuid='NORMALIZED-000253',
         path='/Labirint Game/olaf-game.cpp',
         lineno=23,
         depth=2,
         type='var_decl',
         name='Developers',
         text='sf::RectangleShape Developers(sf::Vector2f(1000.0f, 650.0f));\n')

Fragment(uuid='NORMALIZED-000254',
         path='/Labirint Game/olaf-game.cpp',
         lineno=24,
         depth=2,
         type='var_decl',
         name='Help',
         text='sf::RectangleShape Help(sf::Vector2f(1000.0f, 650.0f));\n')

Fragment(uuid='NORMALIZED-000255',
         path='/Labirint Game/olaf-game.cpp',
         lineno=25,
         depth=2,
         type='var_decl',
         name='Quit',
         text='sf::RectangleShape Quit(sf::Vector2f(1000.0f, 650.0f));\n')

Fragment(uuid='NORMALIZED-000256',
         path='/Labirint Game/olaf-game.cpp',
         lineno=26,
         depth=2,
         type='var_decl',
         name='Loading_1',
         text='sf::RectangleShape Loading_1(sf::Vector2f(1000.0f, 650.0f));\n')

Fragment(uuid='NORMALIZED-000257',
         path='/Labirint Game/olaf-game.cpp',
         lineno=27,
         depth=2,
         type='var_decl',
         name='Loading_2',
         text='sf::RectangleShape Loading_2(sf::Vector2f(1000.0f, 650.0f));\n')

Fragment(uuid='NORMALIZED-000258',
         path='/Labirint Game/olaf-game.cpp',
         lineno=28,
         depth=2,
         type='var_decl',
         name='Loading_3',
         text='sf::RectangleShape Loading_3(sf::Vector2f(1000.0f, 650.0f));\n')

Fragment(uuid='NORMALIZED-000259',
         path='/Labirint Game/olaf-game.cpp',
         lineno=29,
         depth=2,
         type='var_decl',
         name='Map',
         text='sf::RectangleShape Map(sf::Vector2f(1000.0f, 650.0f));\n')

Fragment(uuid='NORMALIZED-000260',
         path='/Labirint Game/olaf-game.cpp',
         lineno=30,
         depth=2,
         type='var_decl',
         name='Player',
         text='sf::RectangleShape Player(sf::Vector2f(45.0f, 30.0f));\n')

Fragment(uuid='NORMALIZED-000261',
         path='/Labirint Game/olaf-game.cpp',
         lineno=37,
         depth=2,
         type='function_decl',
         name='F_MainMenu',
         text='')

Fragment(uuid='NORMALIZED-000262',
         path='/Labirint Game/olaf-game.cpp',
         lineno=38,
         depth=2,
         type='function_decl',
         name='F_Help',
         text='')

Fragment(uuid='NORMALIZED-000263',
         path='/Labirint Game/olaf-game.cpp',
         lineno=39,
         depth=2,
         type='function_decl',
         name='F_Developers',
         text='')

Fragment(uuid='NORMALIZED-000264',
         path='/Labirint Game/olaf-game.cpp',
         lineno=40,
         depth=2,
         type='function_decl',
         name='F_Quit',
         text='')

Fragment(uuid='NORMALIZED-000265',
         path='/Labirint Game/olaf-game.cpp',
         lineno=41,
         depth=2,
         type='function_decl',
         name='F_Start',
         text='')

Fragment(uuid='NORMALIZED-000266',
         path='/Labirint Game/olaf-game.cpp',
         lineno=42,
         depth=2,
         type='function_decl',
         name='F_Logic',
         text='')

Fragment(uuid='NORMALIZED-000267',
         path='/Labirint Game/olaf-game.cpp',
         lineno=43,
         depth=2,
         type='function_decl',
         name='F_Map',
         text='')

Fragment(uuid='NORMALIZED-000268',
         path='/Labirint Game/olaf-game.cpp',
         lineno=46,
         depth=2,
         type='function_decl',
         name='F_MainMenu',
         text='void F_MainMenu() {\n'
              '\twindow.clear(sf::Color::White);\n'
              '\twindow.draw(MainMenu);\n'
              '\twindow.display();\n'
              '\n'
              '\t//Start Game\n'
              '\tif (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Numpad1)) '
              '{\n'
              '\t\t//sound_Rington.play(); \n'
              '\t\tF_Start();\n'
              '\t}\n'
              '\t//Help Desck\n'
              '\tif (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Numpad2)) '
              '{\n'
              '\t\t//sound_Rington.play(); \n'
              '\t\tF_Help();\n'
              '\t}\n'
              '\t//Developers \n'
              '\tif (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Numpad3)) '
              '{\n'
              '\t\t//sound_Rington.play();\n'
              '\t\tF_Developers();\n'
              '\t}\n'
              '\t//Quit\n'
              '\tif (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Numpad4)) '
              '{\n'
              '\t\t//sound_Rington.play();\n'
              '\t\tF_Quit();\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-000269',
         path='/Labirint Game/olaf-game.cpp',
         lineno=74,
         depth=2,
         type='function_decl',
         name='F_Help',
         text='void F_Help() {\n'
              '\twindow.clear(sf::Color::White);\n'
              '\twindow.draw(Help);\n'
              '\twindow.display();\n'
              '\n'
              '\tif (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Escape))\n'
              '\t{\n'
              '\t\t//sound_Rington.play();\n'
              '\t\tF_MainMenu();\n'
              '\t}\n'
              '\telse { F_Help(); }\n'
              '}\n')

Fragment(uuid='NORMALIZED-000270',
         path='/Labirint Game/olaf-game.cpp',
         lineno=87,
         depth=2,
         type='function_decl',
         name='F_Developers',
         text='void F_Developers() {\n'
              '\twindow.clear(sf::Color::White);\n'
              '\twindow.draw(Developers);\n'
              '\twindow.display();\n'
              '\n'
              '\tif (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Escape)) {\n'
              '\t\t//sound_Rington.play(); F_MainMenu();\n'
              '\t}\n'
              '\telse { F_Developers(); }\n'
              '}\n')

Fragment(uuid='NORMALIZED-000271',
         path='/Labirint Game/olaf-game.cpp',
         lineno=98,
         depth=2,
         type='function_decl',
         name='F_Quit',
         text='void F_Quit() {\n'
              '\twindow.clear(sf::Color::White);\n'
              '\twindow.draw(Quit);\n'
              '\twindow.display();\n'
              '\n'
              '\tif (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Numpad2)) '
              '{\n'
              '\t\t//sound_Rington.play(); \n'
              '\t\tF_MainMenu();\n'
              '\t}\n'
              '\telse if '
              '(sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Numpad1))\n'
              '\t{\n'
              '\t\t//sound_Rington.play();\n'
              '\t\tsystem("pause");\n'
              '\t\twindow.close();\n'
              '\t}\n'
              '\telse { F_Quit(); }\n'
              '}\n')

Fragment(uuid='NORMALIZED-000272',
         path='/Labirint Game/olaf-game.cpp',
         lineno=117,
         depth=2,
         type='function_decl',
         name='F_Start',
         text='void F_Start() {\n'
              '\n'
              '\tF_Map();\n'
              '\tif ((x % 2 == 0) && '
              'sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Space)) {\n'
              '\t\t//sound_Rington.play();\n'
              '\t\twindow.clear();\n'
              '\t\twindow.display();\n'
              '\t\tSleep(0700); Sleep(0700); Sleep(0700);\n'
              '\t\tx++;\n'
              '\t\tF_Logic();\n'
              '\t\tF_Start();\n'
              '\t}\n'
              '\telse if (x % 2 == 1) {\n'
              '\t\t//sound_Rington.play();\n'
              '\t\twindow.clear();\n'
              '\t\twindow.display();\n'
              '\t\tSleep(0700); Sleep(0700); Sleep(0700);\n'
              '\t\tx++;\n'
              '\t\tF_Logic();\n'
              '\t\tF_Start();\n'
              '\t}\n'
              '\telse F_Start();\n'
              '}\n')

Fragment(uuid='NORMALIZED-000273',
         path='/Labirint Game/olaf-game.cpp',
         lineno=142,
         depth=2,
         type='function_decl',
         name='F_Loading',
         text='void F_Loading() {\n'
              '\tfor (int i = 1; i <= 12; i++) {\n'
              '\n'
              '\t\twindow.clear(sf::Color::White);\n'
              '\t\tif (i == 1 || i == 4 || i == 7 || i == 10) '
              'window.draw(Loading_1);\n'
              '\t\tif (i == 2 || i == 5 || i == 8 || i == 11) '
              'window.draw(Loading_2);\n'
              '\t\tif (i == 3 || i == 6 || i == 9 || i == 12) '
              'window.draw(Loading_3);\n'
              '\t\twindow.display();\n'
              '\t\tSleep(0700);\n'
              '\t}\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-000274',
         path='/Labirint Game/olaf-game.cpp',
         lineno=156,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tk = 0;\n'
              '\t//Identifiers Picture \n'
              '\tsf::Texture TextMainMenu; '
              'TextMainMenu.loadFromFile("Main_Menu.jpg"); '
              'MainMenu.setTexture(&TextMainMenu);\n'
              '\tsf::Texture TextHelp; TextHelp.loadFromFile("Help.jpg"); '
              'Help.setTexture(&TextHelp);\n'
              '\tsf::Texture TextDevelopers; '
              'TextDevelopers.loadFromFile("Developers.jpg"); '
              'Developers.setTexture(&TextDevelopers);\n'
              '\tsf::Texture TextQuit; TextQuit.loadFromFile("Quit_Main.jpg"); '
              'Quit.setTexture(&TextQuit);\n'
              '\tsf::Texture TextLoading1; '
              'TextLoading1.loadFromFile("Loading1.jpg"); '
              'Loading_1.setTexture(&TextLoading1);\n'
              '\tsf::Texture TextLoading2; '
              'TextLoading2.loadFromFile("Loading2.jpg"); '
              'Loading_2.setTexture(&TextLoading2);\n'
              '\tsf::Texture TextLoading3; '
              'TextLoading3.loadFromFile("Loading3.jpg"); '
              'Loading_3.setTexture(&TextLoading3);\n'
              '\tsf::Texture TextMap; TextMap.loadFromFile("Map.png"); '
              'Map.setTexture(&TextMap);\n'
              '\tsf::Texture TextPlayer_1; '
              'TextPlayer_1.loadFromFile("Player.png"); '
              'Player.setTexture(&TextPlayer_1);\n'
              '\n'
              '\t// Musics \n'
              '\t//if (!Rington.loadFromFile("Rington.wav")) { cout << "ERROR" '
              '<< endl; } sound_Rington.setBuffer(Rington);\n'
              '\t//if (!BackMusic.loadFromFile("BackMusic.wav")) { cout << '
              '"ERROR" << endl; } sound_BackMusic.setBuffer(BackMusic);\n'
              '\n'
              '\t//Starting point\n'
              '\twhile (window.isOpen())\n'
              '\t{\n'
              '\n'
              '\t\tsf::Event evnt;\n'
              '\t\twhile (window.pollEvent(evnt))\n'
              '\t\t{\n'
              '\t\t\tswitch (evnt.type) {\n'
              '\t\t\tcase sf::Event::Closed: window.close();\n'
              '\t\t\t\tbreak;\n'
              '\t\t\tcase sf::Event::Resized:;\n'
              '\t\t\t\tbreak;\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\t//Others\n'
              '\n'
              '\n'
              '\t\t// Outputs\n'
              '\t\tif (k == 0) {// sound_BackMusic.play();\n'
              '\t\tF_Loading(); k++; }\n'
              '\t\t//k = 1;\n'
              '\t\tif (k == 1) { F_MainMenu(); }\n'
              '\t}\n'
              '\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000275',
         path='/Labirint Game/sfml/include/SFML/Audio.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio.hpp\n')

Fragment(uuid='NORMALIZED-000276',
         path='/Labirint Game/sfml/include/SFML/Audio/AlResource.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/AlResource.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000277',
         path='/Labirint Game/sfml/include/SFML/Audio/AlResource.hpp',
         lineno=34,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Base class for classes that require an OpenAL '
              'context\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API AlResource\n'
              '{\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    AlResource();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~AlResource();\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000278',
         path='/Labirint Game/sfml/include/SFML/Audio/Export.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/Export.hpp\n')

Fragment(uuid='NORMALIZED-000279',
         path='/Labirint Game/sfml/include/SFML/Audio/InputSoundFile.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/InputSoundFile.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000280',
         path='/Labirint Game/sfml/include/SFML/Audio/InputSoundFile.hpp',
         lineno=38,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class InputStream;\n'
              'class SoundFileReader;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Provide read access to sound files\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API InputSoundFile : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    InputSoundFile();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~InputSoundFile();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open a sound file from the disk for reading\n'
              '    ///\n'
              '    /// The supported audio formats are: WAV (PCM only), '
              'OGG/Vorbis, FLAC.\n'
              '    /// The supported sample sizes for FLAC and WAV are 8, 16, '
              '24 and 32 bit.\n'
              '    ///\n'
              '    /// \\param filename Path of the sound file to load\n'
              '    ///\n'
              '    /// \\return True if the file was successfully opened\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool openFromFile(const std::string& filename);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open a sound file in memory for reading\n'
              '    ///\n'
              '    /// The supported audio formats are: WAV (PCM only), '
              'OGG/Vorbis, FLAC.\n'
              '    /// The supported sample sizes for FLAC and WAV are 8, 16, '
              '24 and 32 bit.\n'
              '    ///\n'
              '    /// \\param data        Pointer to the file data in memory\n'
              '    /// \\param sizeInBytes Size of the data to load, in bytes\n'
              '    ///\n'
              '    /// \\return True if the file was successfully opened\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool openFromMemory(const void* data, std::size_t '
              'sizeInBytes);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open a sound file from a custom stream for '
              'reading\n'
              '    ///\n'
              '    /// The supported audio formats are: WAV (PCM only), '
              'OGG/Vorbis, FLAC.\n'
              '    /// The supported sample sizes for FLAC and WAV are 8, 16, '
              '24 and 32 bit.\n'
              '    ///\n'
              '    /// \\param stream Source stream to read from\n'
              '    ///\n'
              '    /// \\return True if the file was successfully opened\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool openFromStream(InputStream& stream);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the total number of audio samples in the '
              'file\n'
              '    ///\n'
              '    /// \\return Number of samples\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Uint64 getSampleCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the number of channels used by the sound\n'
              '    ///\n'
              '    /// \\return Number of channels (1 = mono, 2 = stereo)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getChannelCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the sample rate of the sound\n'
              '    ///\n'
              '    /// \\return Sample rate, in samples per second\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getSampleRate() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the total duration of the sound file\n'
              '    ///\n'
              '    /// This function is provided for convenience, the duration '
              'is\n'
              '    /// deduced from the other sound file attributes.\n'
              '    ///\n'
              '    /// \\return Duration of the sound file\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time getDuration() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the read offset of the file in time\n'
              '    ///\n'
              '    /// \\return Time position\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time getTimeOffset() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the read offset of the file in samples\n'
              '    ///\n'
              '    /// \\return Sample position\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Uint64 getSampleOffset() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current read position to the given '
              'sample offset\n'
              '    ///\n'
              '    /// This function takes a sample offset to provide maximum\n'
              '    /// precision. If you need to jump to a given time, use '
              'the\n'
              '    /// other overload.\n'
              '    ///\n'
              '    /// The sample offset takes the channels into account.\n'
              '    /// If you have a time offset instead, you can easily find\n'
              '    /// the corresponding sample offset with the following '
              'formula:\n'
              '    /// `timeInSeconds * sampleRate * channelCount`\n'
              '    /// If the given offset exceeds to total number of '
              'samples,\n'
              '    /// this function jumps to the end of the sound file.\n'
              '    ///\n'
              '    /// \\param sampleOffset Index of the sample to jump to, '
              'relative to the beginning\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void seek(Uint64 sampleOffset);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current read position to the given '
              'time offset\n'
              '    ///\n'
              '    /// Using a time offset is handy but imprecise. If you need '
              'an accurate\n'
              '    /// result, consider using the overload which takes a '
              'sample offset.\n'
              '    ///\n'
              '    /// If the given time exceeds to total duration, this '
              'function jumps\n'
              '    /// to the end of the sound file.\n'
              '    ///\n'
              '    /// \\param timeOffset Time to jump to, relative to the '
              'beginning\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void seek(Time timeOffset);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Read audio samples from the open file\n'
              '    ///\n'
              '    /// \\param samples  Pointer to the sample array to fill\n'
              '    /// \\param maxCount Maximum number of samples to read\n'
              '    ///\n'
              '    /// \\return Number of samples actually read (may be less '
              'than \\a maxCount)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Uint64 read(Int16* samples, Uint64 maxCount);\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Close the current file\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void close();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SoundFileReader* m_reader;       ///< Reader that handles '
              "I/O on the file's format\n"
              '    InputStream*     m_stream;       ///< Input stream used to '
              "access the file's data\n"
              '    bool             m_streamOwned;  ///< Is the stream '
              'internal or external?\n'
              '    Uint64           m_sampleOffset; ///< Sample Read Position\n'
              '    Uint64           m_sampleCount;  ///< Total number of '
              'samples in the file\n'
              '    unsigned int     m_channelCount; ///< Number of channels of '
              'the sound\n'
              '    unsigned int     m_sampleRate;   ///< Number of samples per '
              'second\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000281',
         path='/Labirint Game/sfml/include/SFML/Audio/Listener.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/Listener.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000282',
         path='/Labirint Game/sfml/include/SFML/Audio/Listener.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief The audio listener is the point in the scene\n'
              '///        from where all the sounds are heard\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API Listener\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the global volume of all the sounds and '
              'musics\n'
              '    ///\n'
              '    /// The volume is a number between 0 and 100; it is '
              'combined with\n'
              '    /// the individual volume of each sound / music.\n'
              '    /// The default value for the volume is 100 (maximum).\n'
              '    ///\n'
              '    /// \\param volume New global volume, in the range [0, '
              '100]\n'
              '    ///\n'
              '    /// \\see getGlobalVolume\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setGlobalVolume(float volume);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current value of the global volume\n'
              '    ///\n'
              '    /// \\return Current global volume, in the range [0, 100]\n'
              '    ///\n'
              '    /// \\see setGlobalVolume\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static float getGlobalVolume();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the position of the listener in the scene\n'
              '    ///\n'
              "    /// The default listener's position is (0, 0, 0).\n"
              '    ///\n'
              "    /// \\param x X coordinate of the listener's position\n"
              "    /// \\param y Y coordinate of the listener's position\n"
              "    /// \\param z Z coordinate of the listener's position\n"
              '    ///\n'
              '    /// \\see getPosition, setDirection\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setPosition(float x, float y, float z);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the position of the listener in the scene\n'
              '    ///\n'
              "    /// The default listener's position is (0, 0, 0).\n"
              '    ///\n'
              "    /// \\param position New listener's position\n"
              '    ///\n'
              '    /// \\see getPosition, setDirection\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setPosition(const Vector3f& position);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current position of the listener in the '
              'scene\n'
              '    ///\n'
              "    /// \\return Listener's position\n"
              '    ///\n'
              '    /// \\see setPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static Vector3f getPosition();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the forward vector of the listener in the '
              'scene\n'
              '    ///\n'
              '    /// The direction (also called "at vector") is the vector\n'
              "    /// pointing forward from the listener's perspective. "
              'Together\n'
              '    /// with the up vector, it defines the 3D orientation of '
              'the\n'
              "    /// listener in the scene. The direction vector doesn't\n"
              '    /// have to be normalized.\n'
              "    /// The default listener's direction is (0, 0, -1).\n"
              '    ///\n'
              "    /// \\param x X coordinate of the listener's direction\n"
              "    /// \\param y Y coordinate of the listener's direction\n"
              "    /// \\param z Z coordinate of the listener's direction\n"
              '    ///\n'
              '    /// \\see getDirection, setUpVector, setPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setDirection(float x, float y, float z);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the forward vector of the listener in the '
              'scene\n'
              '    ///\n'
              '    /// The direction (also called "at vector") is the vector\n'
              "    /// pointing forward from the listener's perspective. "
              'Together\n'
              '    /// with the up vector, it defines the 3D orientation of '
              'the\n'
              "    /// listener in the scene. The direction vector doesn't\n"
              '    /// have to be normalized.\n'
              "    /// The default listener's direction is (0, 0, -1).\n"
              '    ///\n'
              "    /// \\param direction New listener's direction\n"
              '    ///\n'
              '    /// \\see getDirection, setUpVector, setPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setDirection(const Vector3f& direction);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current forward vector of the listener '
              'in the scene\n'
              '    ///\n'
              "    /// \\return Listener's forward vector (not normalized)\n"
              '    ///\n'
              '    /// \\see setDirection\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static Vector3f getDirection();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the upward vector of the listener in the '
              'scene\n'
              '    ///\n'
              '    /// The up vector is the vector that points upward from '
              'the\n'
              "    /// listener's perspective. Together with the direction, "
              'it\n'
              '    /// defines the 3D orientation of the listener in the '
              'scene.\n'
              "    /// The up vector doesn't have to be normalized.\n"
              "    /// The default listener's up vector is (0, 1, 0). It is "
              'usually\n'
              '    /// not necessary to change it, especially in 2D '
              'scenarios.\n'
              '    ///\n'
              "    /// \\param x X coordinate of the listener's up vector\n"
              "    /// \\param y Y coordinate of the listener's up vector\n"
              "    /// \\param z Z coordinate of the listener's up vector\n"
              '    ///\n'
              '    /// \\see getUpVector, setDirection, setPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setUpVector(float x, float y, float z);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the upward vector of the listener in the '
              'scene\n'
              '    ///\n'
              '    /// The up vector is the vector that points upward from '
              'the\n'
              "    /// listener's perspective. Together with the direction, "
              'it\n'
              '    /// defines the 3D orientation of the listener in the '
              'scene.\n'
              "    /// The up vector doesn't have to be normalized.\n"
              "    /// The default listener's up vector is (0, 1, 0). It is "
              'usually\n'
              '    /// not necessary to change it, especially in 2D '
              'scenarios.\n'
              '    ///\n'
              "    /// \\param upVector New listener's up vector\n"
              '    ///\n'
              '    /// \\see getUpVector, setDirection, setPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setUpVector(const Vector3f& upVector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current upward vector of the listener '
              'in the scene\n'
              '    ///\n'
              "    /// \\return Listener's upward vector (not normalized)\n"
              '    ///\n'
              '    /// \\see setUpVector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static Vector3f getUpVector();\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000283',
         path='/Labirint Game/sfml/include/SFML/Audio/Music.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/Music.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000284',
         path='/Labirint Game/sfml/include/SFML/Audio/Music.hpp',
         lineno=40,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class InputStream;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Streamed music played from an audio file\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API Music : public SoundStream\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Structure defining a time range using the '
              'template type\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename T>\n'
              '    struct Span\n'
              '    {\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Default constructor\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        Span()\n'
              '        {\n'
              '\n'
              '        }\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Initialization constructor\n'
              '        ///\n'
              '        /// \\param off Initial Offset\n'
              '        /// \\param len Initial Length\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        Span(T off, T len):\n'
              '        offset(off),\n'
              '        length(len)\n'
              '        {\n'
              '\n'
              '        }\n'
              '\n'
              '        T offset; ///< The beginning offset of the time range\n'
              '        T length; ///< The length of the time range\n'
              '    };\n'
              '\n'
              '    // Define the relevant Span types\n'
              '    typedef Span<Time> TimeSpan;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Music();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Music();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open a music from an audio file\n'
              '    ///\n'
              "    /// This function doesn't start playing the music (call "
              'play()\n'
              '    /// to do so).\n'
              '    /// See the documentation of sf::InputSoundFile for the '
              'list\n'
              '    /// of supported formats.\n'
              '    ///\n'
              '    /// \\warning Since the music is not loaded at once but '
              'rather\n'
              '    /// streamed continuously, the file must remain accessible '
              'until\n'
              '    /// the sf::Music object loads a new music or is '
              'destroyed.\n'
              '    ///\n'
              '    /// \\param filename Path of the music file to open\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see openFromMemory, openFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool openFromFile(const std::string& filename);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open a music from an audio file in memory\n'
              '    ///\n'
              "    /// This function doesn't start playing the music (call "
              'play()\n'
              '    /// to do so).\n'
              '    /// See the documentation of sf::InputSoundFile for the '
              'list\n'
              '    /// of supported formats.\n'
              '    ///\n'
              '    /// \\warning Since the music is not loaded at once but '
              'rather streamed\n'
              '    /// continuously, the \\a data buffer must remain '
              'accessible until\n'
              '    /// the sf::Music object loads a new music or is destroyed. '
              'That is,\n'
              "    /// you can't deallocate the buffer right after calling "
              'this function.\n'
              '    ///\n'
              '    /// \\param data        Pointer to the file data in memory\n'
              '    /// \\param sizeInBytes Size of the data to load, in bytes\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see openFromFile, openFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool openFromMemory(const void* data, std::size_t '
              'sizeInBytes);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open a music from an audio file in a custom '
              'stream\n'
              '    ///\n'
              "    /// This function doesn't start playing the music (call "
              'play()\n'
              '    /// to do so).\n'
              '    /// See the documentation of sf::InputSoundFile for the '
              'list\n'
              '    /// of supported formats.\n'
              '    ///\n'
              '    /// \\warning Since the music is not loaded at once but '
              'rather\n'
              '    /// streamed continuously, the \\a stream must remain '
              'accessible\n'
              '    /// until the sf::Music object loads a new music or is '
              'destroyed.\n'
              '    ///\n'
              '    /// \\param stream Source stream to read from\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see openFromFile, openFromMemory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool openFromStream(InputStream& stream);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the total duration of the music\n'
              '    ///\n'
              '    /// \\return Music duration\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time getDuration() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Get the positions of the of the sound's looping "
              'sequence\n'
              '    ///\n'
              '    /// \\return Loop Time position class.\n'
              '    ///\n'
              '    /// \\warning Since setLoopPoints() performs some '
              'adjustments on the\n'
              '    /// provided values and rounds them to internal samples, a '
              'call to\n'
              '    /// getLoopPoints() is not guaranteed to return the same '
              'times passed\n'
              '    /// into a previous call to setLoopPoints(). However, it is '
              'guaranteed\n'
              '    /// to return times that will map to the valid internal '
              'samples of\n'
              '    /// this Music if they are later passed to '
              'setLoopPoints().\n'
              '    ///\n'
              '    /// \\see setLoopPoints\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    TimeSpan getLoopPoints() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Sets the beginning and end of the sound's "
              'looping sequence using sf::Time\n'
              '    ///\n'
              '    /// Loop points allow one to specify a pair of positions '
              'such that, when the music\n'
              '    /// is enabled for looping, it will seamlessly seek to the '
              'beginning whenever it\n'
              '    /// encounters the end. Valid ranges for timePoints.offset '
              'and timePoints.length are\n'
              '    /// [0, Dur) and (0, Dur-offset] respectively, where Dur is '
              'the value returned by getDuration().\n'
              '    /// Note that the EOF "loop point" from the end to the '
              'beginning of the stream is still honored,\n'
              '    /// in case the caller seeks to a point after the end of '
              'the loop range. This function can be\n'
              '    /// safely called at any point after a stream is opened, '
              'and will be applied to a playing sound\n'
              '    /// without affecting the current playing offset.\n'
              '    ///\n'
              "    /// \\warning Setting the loop points while the stream's "
              'status is Paused\n'
              '    /// will set its status to Stopped. The playing offset will '
              'be unaffected.\n'
              '    ///\n'
              '    /// \\param timePoints The definition of the loop. Can be '
              "any time points within the sound's length\n"
              '    ///\n'
              '    /// \\see getLoopPoints\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setLoopPoints(TimeSpan timePoints);\n'
              '\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Request a new chunk of audio samples from the '
              'stream source\n'
              '    ///\n'
              '    /// This function fills the chunk from the next samples\n'
              '    /// to read from the audio file.\n'
              '    ///\n'
              '    /// \\param data Chunk of data to fill\n'
              '    ///\n'
              '    /// \\return True to continue playback, false to stop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual bool onGetData(Chunk& data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current playing position in the '
              'stream source\n'
              '    ///\n'
              '    /// \\param timeOffset New playing position, from the '
              'beginning of the music\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void onSeek(Time timeOffset);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current playing position in the '
              'stream source to the loop offset\n'
              '    ///\n'
              '    /// This is called by the underlying SoundStream whenever '
              'it needs us to reset\n'
              '    /// the seek position for a loop. We then determine whether '
              'we are looping on a\n'
              '    /// loop point or the end-of-file, perform the seek, and '
              'return the new position.\n'
              '    ///\n'
              '    /// \\return The seek position after looping (or -1 if '
              "there's no loop)\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 onLoop();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Initialize the internal state after loading a '
              'new music\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void initialize();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Helper to convert an sf::Time to a sample '
              'position\n'
              '    ///\n'
              '    /// \\param position Time to convert to samples\n'
              '    ///\n'
              '    /// \\return The number of samples elapsed at the given '
              'time\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Uint64 timeToSamples(Time position) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Helper to convert a sample position to an '
              'sf::Time\n'
              '    ///\n'
              '    /// \\param samples Sample count to convert to Time\n'
              '    ///\n'
              '    /// \\return The Time position of the given sample\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time samplesToTime(Uint64 samples) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    InputSoundFile     m_file;     ///< The streamed music '
              'file\n'
              '    std::vector<Int16> m_samples;  ///< Temporary buffer of '
              'samples\n'
              '    Mutex              m_mutex;    ///< Mutex protecting the '
              'data\n'
              '    Span<Uint64>       m_loopSpan; ///< Loop Range Specifier\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000285',
         path='/Labirint Game/sfml/include/SFML/Audio/OutputSoundFile.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/OutputSoundFile.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000286',
         path='/Labirint Game/sfml/include/SFML/Audio/OutputSoundFile.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class SoundFileWriter;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Provide write access to sound files\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API OutputSoundFile : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    OutputSoundFile();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    /// Closes the file if it was still open.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~OutputSoundFile();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open the sound file from the disk for writing\n'
              '    ///\n'
              '    /// The supported audio formats are: WAV, OGG/Vorbis, '
              'FLAC.\n'
              '    ///\n'
              '    /// \\param filename     Path of the sound file to write\n'
              '    /// \\param sampleRate   Sample rate of the sound\n'
              '    /// \\param channelCount Number of channels in the sound\n'
              '    ///\n'
              '    /// \\return True if the file was successfully opened\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool openFromFile(const std::string& filename, unsigned int '
              'sampleRate, unsigned int channelCount);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Write audio samples to the file\n'
              '    ///\n'
              '    /// \\param samples     Pointer to the sample array to '
              'write\n'
              '    /// \\param count       Number of samples to write\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void write(const Int16* samples, Uint64 count);\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Close the current file\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void close();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SoundFileWriter* m_writer; ///< Writer that handles I/O on '
              "the file's format\n"
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000287',
         path='/Labirint Game/sfml/include/SFML/Audio/Sound.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/Sound.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000288',
         path='/Labirint Game/sfml/include/SFML/Audio/Sound.hpp',
         lineno=37,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class SoundBuffer;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Regular sound that can be played in the audio '
              'environment\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API Sound : public SoundSource\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Sound();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the sound with a buffer\n'
              '    ///\n'
              '    /// \\param buffer Sound buffer containing the audio data '
              'to play with the sound\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit Sound(const SoundBuffer& buffer);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy constructor\n'
              '    ///\n'
              '    /// \\param copy Instance to copy\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Sound(const Sound& copy);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Sound();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Start or resume playing the sound\n'
              '    ///\n'
              '    /// This function starts the stream if it was stopped, '
              'resumes\n'
              '    /// it if it was paused, and restarts it from beginning if '
              'it\n'
              '    /// was it already playing.\n'
              "    /// This function uses its own thread so that it doesn't "
              'block\n'
              '    /// the rest of the program while the sound is played.\n'
              '    ///\n'
              '    /// \\see pause, stop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void play();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Pause the sound\n'
              '    ///\n'
              '    /// This function pauses the sound if it was playing,\n'
              '    /// otherwise (sound already paused or stopped) it has no '
              'effect.\n'
              '    ///\n'
              '    /// \\see play, stop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void pause();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief stop playing the sound\n'
              '    ///\n'
              '    /// This function stops the sound if it was playing or '
              'paused,\n'
              '    /// and does nothing if it was already stopped.\n'
              '    /// It also resets the playing position (unlike pause()).\n'
              '    ///\n'
              '    /// \\see play, pause\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void stop();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the source buffer containing the audio data '
              'to play\n'
              '    ///\n'
              '    /// It is important to note that the sound buffer is not '
              'copied,\n'
              '    /// thus the sf::SoundBuffer instance must remain alive as '
              'long\n'
              '    /// as it is attached to the sound.\n'
              '    ///\n'
              '    /// \\param buffer Sound buffer to attach to the sound\n'
              '    ///\n'
              '    /// \\see getBuffer\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setBuffer(const SoundBuffer& buffer);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set whether or not the sound should loop after '
              'reaching the end\n'
              '    ///\n'
              '    /// If set, the sound will restart from beginning after\n'
              '    /// reaching the end and so on, until it is stopped or\n'
              '    /// setLoop(false) is called.\n'
              '    /// The default looping state for sound is false.\n'
              '    ///\n'
              '    /// \\param loop True to play in loop, false to play once\n'
              '    ///\n'
              '    /// \\see getLoop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setLoop(bool loop);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current playing position of the '
              'sound\n'
              '    ///\n'
              '    /// The playing position can be changed when the sound is\n'
              '    /// either paused or playing. Changing the playing '
              'position\n'
              '    /// when the sound is stopped has no effect, since playing\n'
              '    /// the sound will reset its position.\n'
              '    ///\n'
              '    /// \\param timeOffset New playing position, from the '
              'beginning of the sound\n'
              '    ///\n'
              '    /// \\see getPlayingOffset\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPlayingOffset(Time timeOffset);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the audio buffer attached to the sound\n'
              '    ///\n'
              '    /// \\return Sound buffer attached to the sound (can be '
              'NULL)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const SoundBuffer* getBuffer() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether or not the sound is in loop mode\n'
              '    ///\n'
              '    /// \\return True if the sound is looping, false otherwise\n'
              '    ///\n'
              '    /// \\see setLoop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool getLoop() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current playing position of the sound\n'
              '    ///\n'
              '    /// \\return Current playing position, from the beginning '
              'of the sound\n'
              '    ///\n'
              '    /// \\see setPlayingOffset\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time getPlayingOffset() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current status of the sound (stopped, '
              'paused, playing)\n'
              '    ///\n'
              '    /// \\return Current status of the sound\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status getStatus() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Overload of assignment operator\n'
              '    ///\n'
              '    /// \\param right Instance to assign\n'
              '    ///\n'
              '    /// \\return Reference to self\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Sound& operator =(const Sound& right);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Reset the internal buffer of the sound\n'
              '    ///\n'
              "    /// This function is for internal use only, you don't have\n"
              '    /// to use it. It is called by the sf::SoundBuffer that\n'
              '    /// this sound uses, when it is destroyed in order to '
              'prevent\n'
              '    /// the sound from using a dead buffer.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void resetBuffer();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const SoundBuffer* m_buffer; ///< Sound buffer bound to the '
              'source\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000289',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundBuffer.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/SoundBuffer.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000290',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundBuffer.hpp',
         lineno=39,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class Sound;\n'
              'class InputSoundFile;\n'
              'class InputStream;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Storage for audio samples defining a sound\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API SoundBuffer : AlResource\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SoundBuffer();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy constructor\n'
              '    ///\n'
              '    /// \\param copy Instance to copy\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SoundBuffer(const SoundBuffer& copy);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~SoundBuffer();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the sound buffer from a file\n'
              '    ///\n'
              '    /// See the documentation of sf::InputSoundFile for the '
              'list\n'
              '    /// of supported formats.\n'
              '    ///\n'
              '    /// \\param filename Path of the sound file to load\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromMemory, loadFromStream, loadFromSamples, '
              'saveToFile\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromFile(const std::string& filename);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the sound buffer from a file in memory\n'
              '    ///\n'
              '    /// See the documentation of sf::InputSoundFile for the '
              'list\n'
              '    /// of supported formats.\n'
              '    ///\n'
              '    /// \\param data        Pointer to the file data in memory\n'
              '    /// \\param sizeInBytes Size of the data to load, in bytes\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromStream, loadFromSamples\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromMemory(const void* data, std::size_t '
              'sizeInBytes);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the sound buffer from a custom stream\n'
              '    ///\n'
              '    /// See the documentation of sf::InputSoundFile for the '
              'list\n'
              '    /// of supported formats.\n'
              '    ///\n'
              '    /// \\param stream Source stream to read from\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromMemory, loadFromSamples\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromStream(InputStream& stream);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the sound buffer from an array of audio '
              'samples\n'
              '    ///\n'
              '    /// The assumed format of the audio samples is 16 bits '
              'signed integer\n'
              '    /// (sf::Int16).\n'
              '    ///\n'
              '    /// \\param samples      Pointer to the array of samples in '
              'memory\n'
              '    /// \\param sampleCount  Number of samples in the array\n'
              '    /// \\param channelCount Number of channels (1 = mono, 2 = '
              'stereo, ...)\n'
              '    /// \\param sampleRate   Sample rate (number of samples to '
              'play per second)\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromMemory, saveToFile\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromSamples(const Int16* samples, Uint64 '
              'sampleCount, unsigned int channelCount, unsigned int '
              'sampleRate);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Save the sound buffer to an audio file\n'
              '    ///\n'
              '    /// See the documentation of sf::OutputSoundFile for the '
              'list\n'
              '    /// of supported formats.\n'
              '    ///\n'
              '    /// \\param filename Path of the sound file to write\n'
              '    ///\n'
              '    /// \\return True if saving succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromMemory, loadFromSamples\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool saveToFile(const std::string& filename) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the array of audio samples stored in the '
              'buffer\n'
              '    ///\n'
              '    /// The format of the returned samples is 16 bits signed '
              'integer\n'
              '    /// (sf::Int16). The total number of samples in this array\n'
              '    /// is given by the getSampleCount() function.\n'
              '    ///\n'
              '    /// \\return Read-only pointer to the array of sound '
              'samples\n'
              '    ///\n'
              '    /// \\see getSampleCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Int16* getSamples() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the number of samples stored in the buffer\n'
              '    ///\n'
              '    /// The array of samples can be accessed with the '
              'getSamples()\n'
              '    /// function.\n'
              '    ///\n'
              '    /// \\return Number of samples\n'
              '    ///\n'
              '    /// \\see getSamples\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Uint64 getSampleCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the sample rate of the sound\n'
              '    ///\n'
              '    /// The sample rate is the number of samples played per '
              'second.\n'
              '    /// The higher, the better the quality (for example, 44100\n'
              '    /// samples/s is CD quality).\n'
              '    ///\n'
              '    /// \\return Sample rate (number of samples per second)\n'
              '    ///\n'
              '    /// \\see getChannelCount, getDuration\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getSampleRate() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the number of channels used by the sound\n'
              '    ///\n'
              '    /// If the sound is mono then the number of channels will\n'
              '    /// be 1, 2 for stereo, etc.\n'
              '    ///\n'
              '    /// \\return Number of channels\n'
              '    ///\n'
              '    /// \\see getSampleRate, getDuration\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getChannelCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the total duration of the sound\n'
              '    ///\n'
              '    /// \\return Sound duration\n'
              '    ///\n'
              '    /// \\see getSampleRate, getChannelCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time getDuration() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Overload of assignment operator\n'
              '    ///\n'
              '    /// \\param right Instance to assign\n'
              '    ///\n'
              '    /// \\return Reference to self\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SoundBuffer& operator =(const SoundBuffer& right);\n'
              '\n'
              'private:\n'
              '\n'
              '    friend class Sound;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Initialize the internal state after loading a '
              'new sound\n'
              '    ///\n'
              '    /// \\param file Sound file providing access to the new '
              'loaded sound\n'
              '    ///\n'
              '    /// \\return True on successful initialization, false on '
              'failure\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool initialize(InputSoundFile& file);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update the internal buffer with the cached '
              'audio samples\n'
              '    ///\n'
              '    /// \\param channelCount Number of channels\n'
              '    /// \\param sampleRate   Sample rate (number of samples per '
              'second)\n'
              '    ///\n'
              '    /// \\return True on success, false if any error happened\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool update(unsigned int channelCount, unsigned int '
              'sampleRate);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Add a sound to the list of sounds that use this '
              'buffer\n'
              '    ///\n'
              '    /// \\param sound Sound instance to attach\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void attachSound(Sound* sound) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Remove a sound from the list of sounds that use '
              'this buffer\n'
              '    ///\n'
              '    /// \\param sound Sound instance to detach\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void detachSound(Sound* sound) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Types\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef std::set<Sound*> SoundList; ///< Set of unique '
              'sound instances\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int       m_buffer;   ///< OpenAL buffer '
              'identifier\n'
              '    std::vector<Int16> m_samples;  ///< Samples buffer\n'
              '    Time               m_duration; ///< Sound duration\n'
              '    mutable SoundList  m_sounds;   ///< List of sounds that are '
              'using this buffer\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000291',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundBufferRecorder.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint '
              'Game/sfml/include/SFML/Audio/SoundBufferRecorder.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000292',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundBufferRecorder.hpp',
         lineno=37,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Specialized SoundRecorder which stores the '
              'captured\n'
              '///        audio data into a sound buffer\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API SoundBufferRecorder : public '
              'SoundRecorder\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~SoundBufferRecorder();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the sound buffer containing the captured '
              'audio data\n'
              '    ///\n'
              '    /// The sound buffer is valid only after the capture has '
              'ended.\n'
              '    /// This function provides a read-only access to the '
              'internal\n'
              '    /// sound buffer, but it can be copied if you need to\n'
              '    /// make any modification to it.\n'
              '    ///\n'
              '    /// \\return Read-only access to the sound buffer\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const SoundBuffer& getBuffer() const;\n'
              '\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Start capturing audio data\n'
              '    ///\n'
              '    /// \\return True to start the capture, or false to abort '
              'it\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual bool onStart();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Process a new chunk of recorded samples\n'
              '    ///\n'
              '    /// \\param samples     Pointer to the new chunk of '
              'recorded samples\n'
              '    /// \\param sampleCount Number of samples pointed by \\a '
              'samples\n'
              '    ///\n'
              '    /// \\return True to continue the capture, or false to stop '
              'it\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual bool onProcessSamples(const Int16* samples, '
              'std::size_t sampleCount);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Stop capturing audio data\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void onStop();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    std::vector<Int16> m_samples; ///< Temporary sample buffer '
              'to hold the recorded data\n'
              '    SoundBuffer        m_buffer;  ///< Sound buffer that will '
              'contain the recorded data\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000293',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000294',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class InputStream;\n'
              'class SoundFileReader;\n'
              'class SoundFileWriter;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Manages and instantiates sound file readers and '
              'writers\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API SoundFileFactory\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Register a new reader\n'
              '    ///\n'
              '    /// \\see unregisterReader\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename T>\n'
              '    static void registerReader();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Unregister a reader\n'
              '    ///\n'
              '    /// \\see registerReader\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename T>\n'
              '    static void unregisterReader();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Register a new writer\n'
              '    ///\n'
              '    /// \\see unregisterWriter\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename T>\n'
              '    static void registerWriter();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Unregister a writer\n'
              '    ///\n'
              '    /// \\see registerWriter\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename T>\n'
              '    static void unregisterWriter();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Instantiate the right reader for the given file '
              'on disk\n'
              '    ///\n'
              "    /// It's up to the caller to release the returned reader\n"
              '    ///\n'
              '    /// \\param filename Path of the sound file\n'
              '    ///\n'
              '    /// \\return A new sound file reader that can read the '
              'given file, or null if no reader can handle it\n'
              '    ///\n'
              '    /// \\see createReaderFromMemory, createReaderFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static SoundFileReader* createReaderFromFilename(const '
              'std::string& filename);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Instantiate the right codec for the given file '
              'in memory\n'
              '    ///\n'
              "    /// It's up to the caller to release the returned reader\n"
              '    ///\n'
              '    /// \\param data        Pointer to the file data in memory\n'
              '    /// \\param sizeInBytes Total size of the file data, in '
              'bytes\n'
              '    ///\n'
              '    /// \\return A new sound file codec that can read the given '
              'file, or null if no codec can handle it\n'
              '    ///\n'
              '    /// \\see createReaderFromFilename, createReaderFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static SoundFileReader* createReaderFromMemory(const void* '
              'data, std::size_t sizeInBytes);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Instantiate the right codec for the given file '
              'in stream\n'
              '    ///\n'
              "    /// It's up to the caller to release the returned reader\n"
              '    ///\n'
              '    /// \\param stream Source stream to read from\n'
              '    ///\n'
              '    /// \\return A new sound file codec that can read the given '
              'file, or null if no codec can handle it\n'
              '    ///\n'
              '    /// \\see createReaderFromFilename, createReaderFromMemory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static SoundFileReader* createReaderFromStream(InputStream& '
              'stream);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Instantiate the right writer for the given file '
              'on disk\n'
              '    ///\n'
              "    /// It's up to the caller to release the returned writer\n"
              '    ///\n'
              '    /// \\param filename Path of the sound file\n'
              '    ///\n'
              '    /// \\return A new sound file writer that can write given '
              'file, or null if no writer can handle it\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static SoundFileWriter* createWriterFromFilename(const '
              'std::string& filename);\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Types\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct ReaderFactory\n'
              '    {\n'
              '        bool (*check)(InputStream&);\n'
              '        SoundFileReader* (*create)();\n'
              '    };\n'
              '    typedef std::vector<ReaderFactory> ReaderFactoryArray;\n'
              '\n'
              '    struct WriterFactory\n'
              '    {\n'
              '        bool (*check)(const std::string&);\n'
              '        SoundFileWriter* (*create)();\n'
              '    };\n'
              '    typedef std::vector<WriterFactory> WriterFactoryArray;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Static member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static ReaderFactoryArray s_readers; ///< List of all '
              'registered readers\n'
              '    static WriterFactoryArray s_writers; ///< List of all '
              'registered writers\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000295',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000296',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000297',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint '
              'Game/sfml/include/SFML/Audio/SoundFileFactory.inl\n')

Fragment(uuid='NORMALIZED-000298',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n// SFML - Simple and Fast Multimedia Library')

Fragment(uuid='NORMALIZED-000299',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)')

Fragment(uuid='NORMALIZED-000300',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000301',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "// This software is provided 'as-is', without any express or "
              'implied warranty.')

Fragment(uuid='NORMALIZED-000302',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// In no event will the authors be held liable for any damages '
              'arising from the use of this software.')

Fragment(uuid='NORMALIZED-000303',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000304',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Permission is granted to anyone to use this software for any '
              'purpose,')

Fragment(uuid='NORMALIZED-000305',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// including commercial applications, and to alter it and '
              'redistribute it freely,')

Fragment(uuid='NORMALIZED-000306',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n// subject to the following restrictions:')

Fragment(uuid='NORMALIZED-000307',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000308',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n// 1. The origin of this software must not be misrepresented;')

Fragment(uuid='NORMALIZED-000309',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n//    you must not claim that you wrote the original software.')

Fragment(uuid='NORMALIZED-000310',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n//    If you use this software in a product, an acknowledgment')

Fragment(uuid='NORMALIZED-000311',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    in the product documentation would be appreciated but is '
              'not required.')

Fragment(uuid='NORMALIZED-000312',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000313',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n// 2. Altered source versions must be plainly marked as such,')

Fragment(uuid='NORMALIZED-000314',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    and must not be misrepresented as being the original '
              'software.')

Fragment(uuid='NORMALIZED-000315',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000316',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// 3. This notice may not be removed or altered from any source '
              'distribution.')

Fragment(uuid='NORMALIZED-000317',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000318',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000319',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000320',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              '// Headers\n'
              '////////////////////////////////////////////////////////////\n'
              '\n')

Fragment(uuid='NORMALIZED-000321',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=29,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'namespace sf\n'
              '{\n'
              'namespace priv\n'
              '{\n'
              '    template <typename T> SoundFileReader* createReader() '
              '{return new T;}\n'
              '    template <typename T> SoundFileWriter* createWriter() '
              '{return new T;}\n'
              '}\n')

Fragment(uuid='NORMALIZED-000322',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'void SoundFileFactory::registerReader()\n'
              '{\n'
              "    // Make sure the same class won't be registered twice\n"
              '    unregisterReader<T>();\n')

Fragment(uuid='NORMALIZED-000323',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    // Create a new factory with the functions provided by the '
              'class\n'
              '    ReaderFactory factory;\n'
              '    factory.check = &T::check;\n'
              '    factory.create = &priv::createReader<T>;\n')

Fragment(uuid='NORMALIZED-000324',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=49,
         depth=1,
         type='documentation',
         name='',
         text='\n    // Add it\n    s_readers.push_back(factory);\n}\n\n')

Fragment(uuid='NORMALIZED-000325',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=54,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'void SoundFileFactory::unregisterReader()\n'
              '{\n'
              '    // Remove the instance(s) of the reader from the array of '
              'factories\n'
              '    for (ReaderFactoryArray::iterator it = s_readers.begin(); '
              'it != s_readers.end(); )\n'
              '    {\n'
              '        if (it->create == &priv::createReader<T>)\n'
              '            it = s_readers.erase(it);\n'
              '        else\n'
              '            ++it;\n'
              '    }\n'
              '}\n')

Fragment(uuid='NORMALIZED-000326',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=68,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'void SoundFileFactory::registerWriter()\n'
              '{\n'
              "    // Make sure the same class won't be registered twice\n"
              '    unregisterWriter<T>();\n')

Fragment(uuid='NORMALIZED-000327',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=75,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    // Create a new factory with the functions provided by the '
              'class\n'
              '    WriterFactory factory;\n'
              '    factory.check = &T::check;\n'
              '    factory.create = &priv::createWriter<T>;\n')

Fragment(uuid='NORMALIZED-000328',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=80,
         depth=1,
         type='documentation',
         name='',
         text='\n    // Add it\n    s_writers.push_back(factory);\n}\n\n')

Fragment(uuid='NORMALIZED-000329',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=85,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'void SoundFileFactory::unregisterWriter()\n'
              '{\n'
              '    // Remove the instance(s) of the writer from the array of '
              'factories\n'
              '    for (WriterFactoryArray::iterator it = s_writers.begin(); '
              'it != s_writers.end(); )\n'
              '    {\n'
              '        if (it->create == &priv::createWriter<T>)\n'
              '            it = s_writers.erase(it);\n'
              '        else\n'
              '            ++it;\n'
              '    }\n'
              '}\n')

Fragment(uuid='NORMALIZED-000330',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileFactory.inl',
         lineno=99,
         depth=1,
         type='documentation',
         name='',
         text='\n} // namespace sf\n')

Fragment(uuid='NORMALIZED-000331',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileReader.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/SoundFileReader.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000332',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileReader.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class InputStream;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Abstract base class for sound file decoding\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API SoundFileReader\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Structure holding the audio properties of a '
              'sound file\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct Info\n'
              '    {\n'
              '        Uint64       sampleCount;  ///< Total number of samples '
              'in the file\n'
              '        unsigned int channelCount; ///< Number of channels of '
              'the sound\n'
              '        unsigned int sampleRate;   ///< Samples rate of the '
              'sound, in samples per second\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Virtual destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~SoundFileReader() {}\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open a sound file for reading\n'
              '    ///\n'
              '    /// The provided stream reference is valid as long as the\n'
              '    /// SoundFileReader is alive, so it is safe to use/store '
              'it\n'
              '    /// during the whole lifetime of the reader.\n'
              '    ///\n'
              '    /// \\param stream Source stream to read from\n'
              '    /// \\param info   Structure to fill with the properties of '
              'the loaded sound\n'
              '    ///\n'
              '    /// \\return True if the file was successfully opened\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual bool open(InputStream& stream, Info& info) = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current read position to the given '
              'sample offset\n'
              '    ///\n'
              '    /// The sample offset takes the channels into account.\n'
              '    /// If you have a time offset instead, you can easily find\n'
              '    /// the corresponding sample offset with the following '
              'formula:\n'
              '    /// `timeInSeconds * sampleRate * channelCount`\n'
              '    /// If the given offset exceeds to total number of '
              'samples,\n'
              '    /// this function must jump to the end of the file.\n'
              '    ///\n'
              '    /// \\param sampleOffset Index of the sample to jump to, '
              'relative to the beginning\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void seek(Uint64 sampleOffset) = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Read audio samples from the open file\n'
              '    ///\n'
              '    /// \\param samples  Pointer to the sample array to fill\n'
              '    /// \\param maxCount Maximum number of samples to read\n'
              '    ///\n'
              '    /// \\return Number of samples actually read (may be less '
              'than \\a maxCount)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Uint64 read(Int16* samples, Uint64 maxCount) = 0;\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000333',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileWriter.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/SoundFileWriter.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000334',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundFileWriter.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Abstract base class for sound file encoding\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API SoundFileWriter\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Virtual destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~SoundFileWriter() {}\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open a sound file for writing\n'
              '    ///\n'
              '    /// \\param filename     Path of the file to open\n'
              '    /// \\param sampleRate   Sample rate of the sound\n'
              '    /// \\param channelCount Number of channels of the sound\n'
              '    ///\n'
              '    /// \\return True if the file was successfully opened\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual bool open(const std::string& filename, unsigned int '
              'sampleRate, unsigned int channelCount) = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Write audio samples to the open file\n'
              '    ///\n'
              '    /// \\param samples Pointer to the sample array to write\n'
              '    /// \\param count   Number of samples to write\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void write(const Int16* samples, Uint64 count) = '
              '0;\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000335',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundRecorder.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/SoundRecorder.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000336',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundRecorder.hpp',
         lineno=39,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Abstract base class for capturing sound data\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API SoundRecorder : AlResource\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~SoundRecorder();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Start the capture\n'
              '    ///\n'
              '    /// The \\a sampleRate parameter defines the number of '
              'audio samples\n'
              '    /// captured per second. The higher, the better the '
              'quality\n'
              '    /// (for example, 44100 samples/sec is CD quality).\n'
              "    /// This function uses its own thread so that it doesn't "
              'block\n'
              '    /// the rest of the program while the capture runs.\n'
              '    /// Please note that only one capture can happen at the '
              'same time.\n'
              '    /// You can select which capture device will be used, by '
              'passing\n'
              '    /// the name to the setDevice() method. If none was '
              'selected\n'
              '    /// before, the default capture device will be used. You '
              'can get a\n'
              '    /// list of the names of all available capture devices by '
              'calling\n'
              '    /// getAvailableDevices().\n'
              '    ///\n'
              '    /// \\param sampleRate Desired capture rate, in number of '
              'samples per second\n'
              '    ///\n'
              '    /// \\return True, if start of capture was successful\n'
              '    ///\n'
              '    /// \\see stop, getAvailableDevices\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool start(unsigned int sampleRate = 44100);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Stop the capture\n'
              '    ///\n'
              '    /// \\see start\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void stop();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the sample rate\n'
              '    ///\n'
              '    /// The sample rate defines the number of audio samples\n'
              '    /// captured per second. The higher, the better the '
              'quality\n'
              '    /// (for example, 44100 samples/sec is CD quality).\n'
              '    ///\n'
              '    /// \\return Sample rate, in samples per second\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getSampleRate() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a list of the names of all available audio '
              'capture devices\n'
              '    ///\n'
              '    /// This function returns a vector of strings, containing\n'
              '    /// the names of all available audio capture devices.\n'
              '    ///\n'
              '    /// \\return A vector of strings containing the names\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static std::vector<std::string> getAvailableDevices();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the name of the default audio capture '
              'device\n'
              '    ///\n'
              '    /// This function returns the name of the default audio\n'
              '    /// capture device. If none is available, an empty string\n'
              '    /// is returned.\n'
              '    ///\n'
              '    /// \\return The name of the default audio capture device\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static std::string getDefaultDevice();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the audio capture device\n'
              '    ///\n'
              '    /// This function sets the audio capture device to the '
              'device\n'
              '    /// with the given \\a name. It can be called on the fly '
              '(i.e:\n'
              '    /// while recording). If you do so while recording and\n'
              '    /// opening the device fails, it stops the recording.\n'
              '    ///\n'
              '    /// \\param name The name of the audio capture device\n'
              '    ///\n'
              '    /// \\return True, if it was able to set the requested '
              'device\n'
              '    ///\n'
              '    /// \\see getAvailableDevices, getDefaultDevice\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool setDevice(const std::string& name);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the name of the current audio capture '
              'device\n'
              '    ///\n'
              '    /// \\return The name of the current audio capture device\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const std::string& getDevice() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the channel count of the audio capture '
              'device\n'
              '    ///\n'
              '    /// This method allows you to specify the number of '
              'channels\n'
              '    /// used for recording. Currently only 16-bit mono and\n'
              '    /// 16-bit stereo are supported.\n'
              '    ///\n'
              '    /// \\param channelCount Number of channels. Currently '
              'only\n'
              '    ///                     mono (1) and stereo (2) are '
              'supported.\n'
              '    ///\n'
              '    /// \\see getChannelCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setChannelCount(unsigned int channelCount);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the number of channels used by this '
              'recorder\n'
              '    ///\n'
              '    /// Currently only mono and stereo are supported, so the\n'
              '    /// value is either 1 (for mono) or 2 (for stereo).\n'
              '    ///\n'
              '    /// \\return Number of channels\n'
              '    ///\n'
              '    /// \\see setChannelCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getChannelCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check if the system supports audio capture\n'
              '    ///\n'
              '    /// This function should always be called before using\n'
              '    /// the audio capture features. If it returns false, then\n'
              '    /// any attempt to use sf::SoundRecorder or one of its '
              'derived\n'
              '    /// classes will fail.\n'
              '    ///\n'
              '    /// \\return True if audio capture is supported, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isAvailable();\n'
              '\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// This constructor is only meant to be called by derived '
              'classes.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SoundRecorder();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the processing interval\n'
              '    ///\n'
              '    /// The processing interval controls the period\n'
              '    /// between calls to the onProcessSamples function. You '
              'may\n'
              '    /// want to use a small interval if you want to process '
              'the\n'
              '    /// recorded data in real time, for example.\n'
              '    ///\n'
              '    /// Note: this is only a hint, the actual period may vary.\n'
              "    /// So don't rely on this parameter to implement precise "
              'timing.\n'
              '    ///\n'
              '    /// The default processing interval is 100 ms.\n'
              '    ///\n'
              '    /// \\param interval Processing interval\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setProcessingInterval(Time interval);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Start capturing audio data\n'
              '    ///\n'
              '    /// This virtual function may be overridden by a derived '
              'class\n'
              '    /// if something has to be done every time a new capture\n'
              '    /// starts. If not, this function can be ignored; the '
              'default\n'
              '    /// implementation does nothing.\n'
              '    ///\n'
              '    /// \\return True to start the capture, or false to abort '
              'it\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual bool onStart();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Process a new chunk of recorded samples\n'
              '    ///\n'
              '    /// This virtual function is called every time a new chunk '
              'of\n'
              '    /// recorded data is available. The derived class can then '
              'do\n'
              '    /// whatever it wants with it (storing it, playing it, '
              'sending\n'
              '    /// it over the network, etc.).\n'
              '    ///\n'
              '    /// \\param samples     Pointer to the new chunk of '
              'recorded samples\n'
              '    /// \\param sampleCount Number of samples pointed by \\a '
              'samples\n'
              '    ///\n'
              '    /// \\return True to continue the capture, or false to stop '
              'it\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual bool onProcessSamples(const Int16* samples, '
              'std::size_t sampleCount) = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Stop capturing audio data\n'
              '    ///\n'
              '    /// This virtual function may be overridden by a derived '
              'class\n'
              '    /// if something has to be done every time the capture\n'
              '    /// ends. If not, this function can be ignored; the '
              'default\n'
              '    /// implementation does nothing.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void onStop();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Function called as the entry point of the '
              'thread\n'
              '    ///\n'
              '    /// This function starts the recording loop, and returns\n'
              '    /// only when the capture is stopped.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void record();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the new available audio samples and process '
              'them\n'
              '    ///\n'
              '    /// This function is called continuously during the\n'
              '    /// capture loop. It retrieves the captured samples and\n'
              '    /// forwards them to the derived class.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void processCapturedSamples();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Clean up the recorder's internal resources\n"
              '    ///\n'
              '    /// This function is called when the capture stops.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void cleanup();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Thread             m_thread;             ///< Thread '
              'running the background recording task\n'
              '    std::vector<Int16> m_samples;            ///< Buffer to '
              'store captured samples\n'
              '    unsigned int       m_sampleRate;         ///< Sample rate\n'
              '    Time               m_processingInterval; ///< Time period '
              'between calls to onProcessSamples\n'
              '    bool               m_isCapturing;        ///< Capturing '
              'state\n'
              '    std::string        m_deviceName;         ///< Name of the '
              'audio capture device\n'
              '    unsigned int       m_channelCount;       ///< Number of '
              'recording channels\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000337',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundSource.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/SoundSource.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000338',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundSource.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              "/// \\brief Base class defining a sound's properties\n"
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API SoundSource : AlResource\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enumeration of the sound source states\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Status\n'
              '    {\n'
              '        Stopped, ///< Sound is not playing\n'
              '        Paused,  ///< Sound is paused\n'
              '        Playing  ///< Sound is playing\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy constructor\n'
              '    ///\n'
              '    /// \\param copy Instance to copy\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SoundSource(const SoundSource& copy);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~SoundSource();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the pitch of the sound\n'
              '    ///\n'
              '    /// The pitch represents the perceived fundamental '
              'frequency\n'
              '    /// of a sound; thus you can make a sound more acute or '
              'grave\n'
              '    /// by changing its pitch. A side effect of changing the '
              'pitch\n'
              '    /// is to modify the playing speed of the sound as well.\n'
              '    /// The default value for the pitch is 1.\n'
              '    ///\n'
              '    /// \\param pitch New pitch to apply to the sound\n'
              '    ///\n'
              '    /// \\see getPitch\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPitch(float pitch);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the volume of the sound\n'
              '    ///\n'
              '    /// The volume is a value between 0 (mute) and 100 (full '
              'volume).\n'
              '    /// The default value for the volume is 100.\n'
              '    ///\n'
              '    /// \\param volume Volume of the sound\n'
              '    ///\n'
              '    /// \\see getVolume\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setVolume(float volume);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the 3D position of the sound in the audio '
              'scene\n'
              '    ///\n'
              '    /// Only sounds with one channel (mono sounds) can be\n'
              '    /// spatialized.\n'
              '    /// The default position of a sound is (0, 0, 0).\n'
              '    ///\n'
              '    /// \\param x X coordinate of the position of the sound in '
              'the scene\n'
              '    /// \\param y Y coordinate of the position of the sound in '
              'the scene\n'
              '    /// \\param z Z coordinate of the position of the sound in '
              'the scene\n'
              '    ///\n'
              '    /// \\see getPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPosition(float x, float y, float z);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the 3D position of the sound in the audio '
              'scene\n'
              '    ///\n'
              '    /// Only sounds with one channel (mono sounds) can be\n'
              '    /// spatialized.\n'
              '    /// The default position of a sound is (0, 0, 0).\n'
              '    ///\n'
              '    /// \\param position Position of the sound in the scene\n'
              '    ///\n'
              '    /// \\see getPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPosition(const Vector3f& position);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Make the sound's position relative to the "
              'listener or absolute\n'
              '    ///\n'
              '    /// Making a sound relative to the listener will ensure '
              'that it will always\n'
              '    /// be played the same way regardless of the position of '
              'the listener.\n'
              '    /// This can be useful for non-spatialized sounds, sounds '
              'that are\n'
              '    /// produced by the listener, or sounds attached to it.\n'
              '    /// The default value is false (position is absolute).\n'
              '    ///\n'
              '    /// \\param relative True to set the position relative, '
              'false to set it absolute\n'
              '    ///\n'
              '    /// \\see isRelativeToListener\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setRelativeToListener(bool relative);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the minimum distance of the sound\n'
              '    ///\n'
              '    /// The "minimum distance" of a sound is the maximum\n'
              '    /// distance at which it is heard at its maximum volume. '
              'Further\n'
              '    /// than the minimum distance, it will start to fade out '
              'according\n'
              '    /// to its attenuation factor. A value of 0 ("inside the '
              'head\n'
              '    /// of the listener") is an invalid value and is '
              'forbidden.\n'
              '    /// The default value of the minimum distance is 1.\n'
              '    ///\n'
              '    /// \\param distance New minimum distance of the sound\n'
              '    ///\n'
              '    /// \\see getMinDistance, setAttenuation\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setMinDistance(float distance);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the attenuation factor of the sound\n'
              '    ///\n'
              '    /// The attenuation is a multiplicative factor which makes\n'
              '    /// the sound more or less loud according to its distance\n'
              '    /// from the listener. An attenuation of 0 will produce a\n'
              '    /// non-attenuated sound, i.e. its volume will always be '
              'the same\n'
              '    /// whether it is heard from near or from far. On the other '
              'hand,\n'
              '    /// an attenuation value such as 100 will make the sound '
              'fade out\n'
              '    /// very quickly as it gets further from the listener.\n'
              '    /// The default value of the attenuation is 1.\n'
              '    ///\n'
              '    /// \\param attenuation New attenuation factor of the '
              'sound\n'
              '    ///\n'
              '    /// \\see getAttenuation, setMinDistance\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setAttenuation(float attenuation);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the pitch of the sound\n'
              '    ///\n'
              '    /// \\return Pitch of the sound\n'
              '    ///\n'
              '    /// \\see setPitch\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getPitch() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the volume of the sound\n'
              '    ///\n'
              '    /// \\return Volume of the sound, in the range [0, 100]\n'
              '    ///\n'
              '    /// \\see setVolume\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getVolume() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the 3D position of the sound in the audio '
              'scene\n'
              '    ///\n'
              '    /// \\return Position of the sound\n'
              '    ///\n'
              '    /// \\see setPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector3f getPosition() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Tell whether the sound's position is relative "
              'to the\n'
              '    ///        listener or is absolute\n'
              '    ///\n'
              '    /// \\return True if the position is relative, false if '
              "it's absolute\n"
              '    ///\n'
              '    /// \\see setRelativeToListener\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool isRelativeToListener() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the minimum distance of the sound\n'
              '    ///\n'
              '    /// \\return Minimum distance of the sound\n'
              '    ///\n'
              '    /// \\see setMinDistance, getAttenuation\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getMinDistance() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the attenuation factor of the sound\n'
              '    ///\n'
              '    /// \\return Attenuation factor of the sound\n'
              '    ///\n'
              '    /// \\see setAttenuation, getMinDistance\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getAttenuation() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Overload of assignment operator\n'
              '    ///\n'
              '    /// \\param right Instance to assign\n'
              '    ///\n'
              '    /// \\return Reference to self\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SoundSource& operator =(const SoundSource& right);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Start or resume playing the sound source\n'
              '    ///\n'
              '    /// This function starts the source if it was stopped, '
              'resumes\n'
              '    /// it if it was paused, and restarts it from the beginning '
              'if\n'
              '    /// it was already playing.\n'
              '    ///\n'
              '    /// \\see pause, stop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void play() = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Pause the sound source\n'
              '    ///\n'
              '    /// This function pauses the source if it was playing,\n'
              '    /// otherwise (source already paused or stopped) it has no '
              'effect.\n'
              '    ///\n'
              '    /// \\see play, stop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void pause() = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Stop playing the sound source\n'
              '    ///\n'
              '    /// This function stops the source if it was playing or '
              'paused,\n'
              '    /// and does nothing if it was already stopped.\n'
              '    /// It also resets the playing position (unlike pause()).\n'
              '    ///\n'
              '    /// \\see play, pause\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void stop() = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current status of the sound (stopped, '
              'paused, playing)\n'
              '    ///\n'
              '    /// \\return Current status of the sound\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Status getStatus() const;\n'
              '\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// This constructor is meant to be called by derived '
              'classes only.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SoundSource();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int m_source; ///< OpenAL source identifier\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000339',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundStream.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Audio/SoundStream.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000340',
         path='/Labirint Game/sfml/include/SFML/Audio/SoundStream.hpp',
         lineno=39,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Abstract base class for streamed audio sources\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_AUDIO_API SoundStream : public SoundSource\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Structure defining a chunk of audio data to '
              'stream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct Chunk\n'
              '    {\n'
              '        const Int16* samples;     ///< Pointer to the audio '
              'samples\n'
              '        std::size_t  sampleCount; ///< Number of samples '
              'pointed by Samples\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~SoundStream();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Start or resume playing the audio stream\n'
              '    ///\n'
              '    /// This function starts the stream if it was stopped, '
              'resumes\n'
              '    /// it if it was paused, and restarts it from the beginning '
              'if\n'
              '    /// it was already playing.\n'
              "    /// This function uses its own thread so that it doesn't "
              'block\n'
              '    /// the rest of the program while the stream is played.\n'
              '    ///\n'
              '    /// \\see pause, stop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void play();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Pause the audio stream\n'
              '    ///\n'
              '    /// This function pauses the stream if it was playing,\n'
              '    /// otherwise (stream already paused or stopped) it has no '
              'effect.\n'
              '    ///\n'
              '    /// \\see play, stop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void pause();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Stop playing the audio stream\n'
              '    ///\n'
              '    /// This function stops the stream if it was playing or '
              'paused,\n'
              '    /// and does nothing if it was already stopped.\n'
              '    /// It also resets the playing position (unlike pause()).\n'
              '    ///\n'
              '    /// \\see play, pause\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void stop();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the number of channels of the stream\n'
              '    ///\n'
              '    /// 1 channel means a mono sound, 2 means stereo, etc.\n'
              '    ///\n'
              '    /// \\return Number of channels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getChannelCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the stream sample rate of the stream\n'
              '    ///\n'
              '    /// The sample rate is the number of audio samples played '
              'per\n'
              '    /// second. The higher, the better the quality.\n'
              '    ///\n'
              '    /// \\return Sample rate, in number of samples per second\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getSampleRate() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current status of the stream (stopped, '
              'paused, playing)\n'
              '    ///\n'
              '    /// \\return Current status\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status getStatus() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current playing position of the '
              'stream\n'
              '    ///\n'
              '    /// The playing position can be changed when the stream is\n'
              '    /// either paused or playing. Changing the playing '
              'position\n'
              '    /// when the stream is stopped has no effect, since '
              'playing\n'
              '    /// the stream would reset its position.\n'
              '    ///\n'
              '    /// \\param timeOffset New playing position, from the '
              'beginning of the stream\n'
              '    ///\n'
              '    /// \\see getPlayingOffset\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPlayingOffset(Time timeOffset);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current playing position of the stream\n'
              '    ///\n'
              '    /// \\return Current playing position, from the beginning '
              'of the stream\n'
              '    ///\n'
              '    /// \\see setPlayingOffset\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time getPlayingOffset() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set whether or not the stream should loop after '
              'reaching the end\n'
              '    ///\n'
              '    /// If set, the stream will restart from beginning after\n'
              '    /// reaching the end and so on, until it is stopped or\n'
              '    /// setLoop(false) is called.\n'
              '    /// The default looping state for streams is false.\n'
              '    ///\n'
              '    /// \\param loop True to play in loop, false to play once\n'
              '    ///\n'
              '    /// \\see getLoop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setLoop(bool loop);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether or not the stream is in loop mode\n'
              '    ///\n'
              '    /// \\return True if the stream is looping, false '
              'otherwise\n'
              '    ///\n'
              '    /// \\see setLoop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool getLoop() const;\n'
              '\n'
              'protected:\n'
              '\n'
              '    enum\n'
              '    {\n'
              '        NoLoop = -1 ///< "Invalid" endSeeks value, telling us '
              'to continue uninterrupted\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// This constructor is only meant to be called by derived '
              'classes.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SoundStream();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Define the audio stream parameters\n'
              '    ///\n'
              '    /// This function must be called by derived classes as '
              'soon\n'
              '    /// as they know the audio settings of the stream to play.\n'
              '    /// Any attempt to manipulate the stream (play(), ...) '
              'before\n'
              '    /// calling this function will fail.\n'
              '    /// It can be called multiple times if the settings of the\n'
              '    /// audio stream change, but only when the stream is '
              'stopped.\n'
              '    ///\n'
              '    /// \\param channelCount Number of channels of the stream\n'
              '    /// \\param sampleRate   Sample rate, in samples per '
              'second\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void initialize(unsigned int channelCount, unsigned int '
              'sampleRate);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Request a new chunk of audio samples from the '
              'stream source\n'
              '    ///\n'
              '    /// This function must be overridden by derived classes to '
              'provide\n'
              '    /// the audio samples to play. It is called continuously by '
              'the\n'
              '    /// streaming loop, in a separate thread.\n'
              '    /// The source can choose to stop the streaming loop at any '
              'time, by\n'
              '    /// returning false to the caller.\n'
              '    /// If you return true (i.e. continue streaming) it is '
              'important that\n'
              '    /// the returned array of samples is not empty; this would '
              'stop the stream\n'
              '    /// due to an internal limitation.\n'
              '    ///\n'
              '    /// \\param data Chunk of data to fill\n'
              '    ///\n'
              '    /// \\return True to continue playback, false to stop\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual bool onGetData(Chunk& data) = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current playing position in the '
              'stream source\n'
              '    ///\n'
              '    /// This function must be overridden by derived classes to\n'
              '    /// allow random seeking into the stream source.\n'
              '    ///\n'
              '    /// \\param timeOffset New playing position, relative to '
              'the beginning of the stream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void onSeek(Time timeOffset) = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current playing position in the '
              'stream source to the beginning of the loop\n'
              '    ///\n'
              '    /// This function can be overridden by derived classes to\n'
              '    /// allow implementation of custom loop points. Otherwise,\n'
              '    /// it just calls onSeek(Time::Zero) and returns 0.\n'
              '    ///\n'
              '    /// \\return The seek position after looping (or -1 if '
              "there's no loop)\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 onLoop();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Function called as the entry point of the '
              'thread\n'
              '    ///\n'
              '    /// This function starts the streaming loop, and returns\n'
              '    /// only when the sound is stopped.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void streamData();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Fill a new buffer with audio samples, and '
              'append\n'
              '    ///        it to the playing queue\n'
              '    ///\n'
              '    /// This function is called as soon as a buffer has been '
              'fully\n'
              '    /// consumed; it fills it again and inserts it back into '
              'the\n'
              '    /// playing queue.\n'
              '    ///\n'
              '    /// \\param bufferNum Number of the buffer to fill (in [0, '
              'BufferCount])\n'
              '    /// \\param immediateLoop Treat empty buffers as spent, and '
              'act on loops immediately\n'
              '    ///\n'
              '    /// \\return True if the stream source has requested to '
              'stop, false otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool fillAndPushBuffer(unsigned int bufferNum, bool '
              'immediateLoop = false);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Fill the audio buffers and put them all into '
              'the playing queue\n'
              '    ///\n'
              '    /// This function is called when playing starts and the\n'
              '    /// playing queue is empty.\n'
              '    ///\n'
              '    /// \\return True if the derived class has requested to '
              'stop, false otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool fillQueue();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Clear all the audio buffers and empty the '
              'playing queue\n'
              '    ///\n'
              '    /// This function is called when the stream is stopped.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void clearQueue();\n'
              '\n'
              '    enum\n'
              '    {\n'
              '        BufferCount = 3,    ///< Number of audio buffers used '
              'by the streaming loop\n'
              '        BufferRetries = 2   ///< Number of retries (excluding '
              'initial try) for onGetData()\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Thread        m_thread;                   ///< Thread '
              'running the background tasks\n'
              '    mutable Mutex m_threadMutex;              ///< Thread '
              'mutex\n'
              '    Status        m_threadStartState;         ///< State the '
              'thread starts in (Playing, Paused, Stopped)\n'
              '    bool          m_isStreaming;              ///< Streaming '
              'state (true = playing, false = stopped)\n'
              '    unsigned int  m_buffers[BufferCount];     ///< Sound '
              'buffers used to store temporary audio data\n'
              '    unsigned int  m_channelCount;             ///< Number of '
              'channels (1 = mono, 2 = stereo, ...)\n'
              '    unsigned int  m_sampleRate;               ///< Frequency '
              '(samples / second)\n'
              '    Uint32        m_format;                   ///< Format of '
              'the internal sound buffers\n'
              '    bool          m_loop;                     ///< Loop flag '
              '(true to loop, false to play once)\n'
              '    Uint64        m_samplesProcessed;         ///< Number of '
              'buffers processed since beginning of the stream\n'
              '    Int64         m_bufferSeeks[BufferCount]; ///< If buffer is '
              'an "end buffer", holds next seek position, else NoLoop. For '
              'play offset calculation.\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000341',
         path='/Labirint Game/sfml/include/SFML/Config.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Config.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000342',
         path='/Labirint Game/sfml/include/SFML/Config.hpp',
         lineno=206,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '    // All "common" platforms use the same size for char, short '
              'and int\n'
              '    // (basically there are 3 types for 3 sizes, so no other '
              'match is possible),\n'
              '    // we can use them without doing any kind of check\n'
              '\n'
              '    // 8 bits integer types\n'
              '    typedef signed   char Int8;\n'
              '    typedef unsigned char Uint8;\n'
              '\n'
              '    // 16 bits integer types\n'
              '    typedef signed   short Int16;\n'
              '    typedef unsigned short Uint16;\n'
              '\n'
              '    // 32 bits integer types\n'
              '    typedef signed   int Int32;\n'
              '    typedef unsigned int Uint32;\n'
              '\n'
              '    // 64 bits integer types\n'
              '    #if defined(_MSC_VER)\n'
              '        typedef signed   __int64 Int64;\n'
              '        typedef unsigned __int64 Uint64;\n'
              '    #else\n'
              '        typedef signed   long long Int64;\n'
              '        typedef unsigned long long Uint64;\n'
              '    #endif\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000343',
         path='/Labirint Game/sfml/include/SFML/GpuPreference.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/GpuPreference.hpp\n')

Fragment(uuid='NORMALIZED-000344',
         path='/Labirint Game/sfml/include/SFML/Graphics.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics.hpp\n')

Fragment(uuid='NORMALIZED-000345',
         path='/Labirint Game/sfml/include/SFML/Graphics/BlendMode.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/BlendMode.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000346',
         path='/Labirint Game/sfml/include/SFML/Graphics/BlendMode.hpp',
         lineno=34,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Blending modes for drawing\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'struct SFML_GRAPHICS_API BlendMode\n'
              '{\n'
              '    ////////////////////////////////////////////////////////\n'
              '    /// \\brief Enumeration of the blending factors\n'
              '    ///\n'
              '    /// The factors are mapped directly to their OpenGL '
              'equivalents,\n'
              '    /// specified by glBlendFunc() or glBlendFuncSeparate().\n'
              '    ////////////////////////////////////////////////////////\n'
              '    enum Factor\n'
              '    {\n'
              '        Zero,             ///< (0, 0, 0, 0)\n'
              '        One,              ///< (1, 1, 1, 1)\n'
              '        SrcColor,         ///< (src.r, src.g, src.b, src.a)\n'
              '        OneMinusSrcColor, ///< (1, 1, 1, 1) - (src.r, src.g, '
              'src.b, src.a)\n'
              '        DstColor,         ///< (dst.r, dst.g, dst.b, dst.a)\n'
              '        OneMinusDstColor, ///< (1, 1, 1, 1) - (dst.r, dst.g, '
              'dst.b, dst.a)\n'
              '        SrcAlpha,         ///< (src.a, src.a, src.a, src.a)\n'
              '        OneMinusSrcAlpha, ///< (1, 1, 1, 1) - (src.a, src.a, '
              'src.a, src.a)\n'
              '        DstAlpha,         ///< (dst.a, dst.a, dst.a, dst.a)\n'
              '        OneMinusDstAlpha  ///< (1, 1, 1, 1) - (dst.a, dst.a, '
              'dst.a, dst.a)\n'
              '    };\n'
              '\n'
              '    ////////////////////////////////////////////////////////\n'
              '    /// \\brief Enumeration of the blending equations\n'
              '    ///\n'
              '    /// The equations are mapped directly to their OpenGL '
              'equivalents,\n'
              '    /// specified by glBlendEquation() or '
              'glBlendEquationSeparate().\n'
              '    ////////////////////////////////////////////////////////\n'
              '    enum Equation\n'
              '    {\n'
              '        Add,            ///< Pixel = Src * SrcFactor + Dst * '
              'DstFactor\n'
              '        Subtract,       ///< Pixel = Src * SrcFactor - Dst * '
              'DstFactor\n'
              '        ReverseSubtract ///< Pixel = Dst * DstFactor - Src * '
              'SrcFactor\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Constructs a blending mode that does alpha blending.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    BlendMode();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the blend mode given the factors and '
              'equation.\n'
              '    ///\n'
              '    /// This constructor uses the same factors and equation for '
              'both\n'
              '    /// color and alpha components. It also defaults to the Add '
              'equation.\n'
              '    ///\n'
              '    /// \\param sourceFactor      Specifies how to compute the '
              'source factor for the color and alpha channels.\n'
              '    /// \\param destinationFactor Specifies how to compute the '
              'destination factor for the color and alpha channels.\n'
              '    /// \\param blendEquation     Specifies how to combine the '
              'source and destination colors and alpha.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    BlendMode(Factor sourceFactor, Factor destinationFactor, '
              'Equation blendEquation = Add);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the blend mode given the factors and '
              'equation.\n'
              '    ///\n'
              '    /// \\param colorSourceFactor      Specifies how to compute '
              'the source factor for the color channels.\n'
              '    /// \\param colorDestinationFactor Specifies how to compute '
              'the destination factor for the color channels.\n'
              '    /// \\param colorBlendEquation     Specifies how to combine '
              'the source and destination colors.\n'
              '    /// \\param alphaSourceFactor      Specifies how to compute '
              'the source factor.\n'
              '    /// \\param alphaDestinationFactor Specifies how to compute '
              'the destination factor.\n'
              '    /// \\param alphaBlendEquation     Specifies how to combine '
              'the source and destination alphas.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    BlendMode(Factor colorSourceFactor, Factor '
              'colorDestinationFactor,\n'
              '              Equation colorBlendEquation, Factor '
              'alphaSourceFactor,\n'
              '              Factor alphaDestinationFactor, Equation '
              'alphaBlendEquation);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member Data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Factor   colorSrcFactor; ///< Source blending factor for '
              'the color channels\n'
              '    Factor   colorDstFactor; ///< Destination blending factor '
              'for the color channels\n'
              '    Equation colorEquation;  ///< Blending equation for the '
              'color channels\n'
              '    Factor   alphaSrcFactor; ///< Source blending factor for '
              'the alpha channel\n'
              '    Factor   alphaDstFactor; ///< Destination blending factor '
              'for the alpha channel\n'
              '    Equation alphaEquation;  ///< Blending equation for the '
              'alpha channel\n'
              '};\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates BlendMode\n'
              '/// \\brief Overload of the == operator\n'
              '///\n'
              '/// \\param left  Left operand\n'
              '/// \\param right Right operand\n'
              '///\n'
              '/// \\return True if blending modes are equal, false if they '
              'are different\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API bool operator ==(const BlendMode& left, const '
              'BlendMode& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates BlendMode\n'
              '/// \\brief Overload of the != operator\n'
              '///\n'
              '/// \\param left  Left operand\n'
              '/// \\param right Right operand\n'
              '///\n'
              '/// \\return True if blending modes are different, false if '
              'they are equal\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API bool operator !=(const BlendMode& left, const '
              'BlendMode& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '// Commonly used blending modes\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API extern const BlendMode BlendAlpha;    ///< '
              'Blend source and dest according to dest alpha\n'
              'SFML_GRAPHICS_API extern const BlendMode BlendAdd;      ///< '
              'Add source to dest\n'
              'SFML_GRAPHICS_API extern const BlendMode BlendMultiply; ///< '
              'Multiply source and dest\n'
              'SFML_GRAPHICS_API extern const BlendMode BlendNone;     ///< '
              'Overwrite dest with source\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000347',
         path='/Labirint Game/sfml/include/SFML/Graphics/CircleShape.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/CircleShape.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000348',
         path='/Labirint Game/sfml/include/SFML/Graphics/CircleShape.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Specialized shape representing a circle\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API CircleShape : public Shape\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// \\param radius     Radius of the circle\n'
              '    /// \\param pointCount Number of points composing the '
              'circle\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit CircleShape(float radius = 0, std::size_t '
              'pointCount = 30);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the radius of the circle\n'
              '    ///\n'
              '    /// \\param radius New radius of the circle\n'
              '    ///\n'
              '    /// \\see getRadius\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setRadius(float radius);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the radius of the circle\n'
              '    ///\n'
              '    /// \\return Radius of the circle\n'
              '    ///\n'
              '    /// \\see setRadius\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getRadius() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the number of points of the circle\n'
              '    ///\n'
              '    /// \\param count New number of points of the circle\n'
              '    ///\n'
              '    /// \\see getPointCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPointCount(std::size_t count);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the number of points of the circle\n'
              '    ///\n'
              '    /// \\return Number of points of the circle\n'
              '    ///\n'
              '    /// \\see setPointCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual std::size_t getPointCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a point of the circle\n'
              '    ///\n'
              '    /// The returned point is in local coordinates, that is,\n'
              "    /// the shape's transforms (position, rotation, scale) are\n"
              '    /// not taken into account.\n'
              '    /// The result is undefined if \\a index is out of the '
              'valid range.\n'
              '    ///\n'
              '    /// \\param index Index of the point to get, in range [0 .. '
              'getPointCount() - 1]\n'
              '    ///\n'
              '    /// \\return index-th point of the shape\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Vector2f getPoint(std::size_t index) const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float       m_radius;     ///< Radius of the circle\n'
              '    std::size_t m_pointCount; ///< Number of points composing '
              'the circle\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000349',
         path='/Labirint Game/sfml/include/SFML/Graphics/Color.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Color.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000350',
         path='/Labirint Game/sfml/include/SFML/Graphics/Color.hpp',
         lineno=34,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Utility class for manipulating RGBA colors\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Color\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Constructs an opaque black color. It is equivalent to\n'
              '    /// sf::Color(0, 0, 0, 255).\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Color();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the color from its 4 RGBA components\n'
              '    ///\n'
              '    /// \\param red   Red component (in the range [0, 255])\n'
              '    /// \\param green Green component (in the range [0, 255])\n'
              '    /// \\param blue  Blue component (in the range [0, 255])\n'
              '    /// \\param alpha Alpha (opacity) component (in the range '
              '[0, 255])\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Color(Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha = '
              '255);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the color from 32-bit unsigned '
              'integer\n'
              '    ///\n'
              '    /// \\param color Number containing the RGBA components (in '
              'that order)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit Color(Uint32 color);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Retrieve the color as a 32-bit unsigned '
              'integer\n'
              '    ///\n'
              '    /// \\return Color represented as a 32-bit unsigned '
              'integer\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Uint32 toInteger() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Static member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static const Color Black;       ///< Black predefined '
              'color\n'
              '    static const Color White;       ///< White predefined '
              'color\n'
              '    static const Color Red;         ///< Red predefined color\n'
              '    static const Color Green;       ///< Green predefined '
              'color\n'
              '    static const Color Blue;        ///< Blue predefined color\n'
              '    static const Color Yellow;      ///< Yellow predefined '
              'color\n'
              '    static const Color Magenta;     ///< Magenta predefined '
              'color\n'
              '    static const Color Cyan;        ///< Cyan predefined color\n'
              '    static const Color Transparent; ///< Transparent (black) '
              'predefined color\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Uint8 r; ///< Red component\n'
              '    Uint8 g; ///< Green component\n'
              '    Uint8 b; ///< Blue component\n'
              '    Uint8 a; ///< Alpha (opacity) component\n'
              '};\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Color\n'
              '/// \\brief Overload of the == operator\n'
              '///\n'
              '/// This operator compares two colors and check if they are '
              'equal.\n'
              '///\n'
              '/// \\param left  Left operand\n'
              '/// \\param right Right operand\n'
              '///\n'
              '/// \\return True if colors are equal, false if they are '
              'different\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API bool operator ==(const Color& left, const '
              'Color& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Color\n'
              '/// \\brief Overload of the != operator\n'
              '///\n'
              '/// This operator compares two colors and check if they are '
              'different.\n'
              '///\n'
              '/// \\param left  Left operand\n'
              '/// \\param right Right operand\n'
              '///\n'
              '/// \\return True if colors are different, false if they are '
              'equal\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API bool operator !=(const Color& left, const '
              'Color& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Color\n'
              '/// \\brief Overload of the binary + operator\n'
              '///\n'
              '/// This operator returns the component-wise sum of two '
              'colors.\n'
              '/// Components that exceed 255 are clamped to 255.\n'
              '///\n'
              '/// \\param left  Left operand\n'
              '/// \\param right Right operand\n'
              '///\n'
              '/// \\return Result of \\a left + \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API Color operator +(const Color& left, const '
              'Color& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Color\n'
              '/// \\brief Overload of the binary - operator\n'
              '///\n'
              '/// This operator returns the component-wise subtraction of two '
              'colors.\n'
              '/// Components below 0 are clamped to 0.\n'
              '///\n'
              '/// \\param left  Left operand\n'
              '/// \\param right Right operand\n'
              '///\n'
              '/// \\return Result of \\a left - \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API Color operator -(const Color& left, const '
              'Color& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Color\n'
              '/// \\brief Overload of the binary * operator\n'
              '///\n'
              '/// This operator returns the component-wise multiplication\n'
              '/// (also called "modulation") of two colors.\n'
              '/// Components are then divided by 255 so that the result is\n'
              '/// still in the range [0, 255].\n'
              '///\n'
              '/// \\param left  Left operand\n'
              '/// \\param right Right operand\n'
              '///\n'
              '/// \\return Result of \\a left * \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API Color operator *(const Color& left, const '
              'Color& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Color\n'
              '/// \\brief Overload of the binary += operator\n'
              '///\n'
              '/// This operator computes the component-wise sum of two '
              'colors,\n'
              '/// and assigns the result to the left operand.\n'
              '/// Components that exceed 255 are clamped to 255.\n'
              '///\n'
              '/// \\param left  Left operand\n'
              '/// \\param right Right operand\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API Color& operator +=(Color& left, const Color& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Color\n'
              '/// \\brief Overload of the binary -= operator\n'
              '///\n'
              '/// This operator computes the component-wise subtraction of '
              'two colors,\n'
              '/// and assigns the result to the left operand.\n'
              '/// Components below 0 are clamped to 0.\n'
              '///\n'
              '/// \\param left  Left operand\n'
              '/// \\param right Right operand\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API Color& operator -=(Color& left, const Color& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Color\n'
              '/// \\brief Overload of the binary *= operator\n'
              '///\n'
              '/// This operator returns the component-wise multiplication\n'
              '/// (also called "modulation") of two colors, and assigns\n'
              '/// the result to the left operand.\n'
              '/// Components are then divided by 255 so that the result is\n'
              '/// still in the range [0, 255].\n'
              '///\n'
              '/// \\param left  Left operand\n'
              '/// \\param right Right operand\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API Color& operator *=(Color& left, const Color& '
              'right);\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000351',
         path='/Labirint Game/sfml/include/SFML/Graphics/ConvexShape.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/ConvexShape.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000352',
         path='/Labirint Game/sfml/include/SFML/Graphics/ConvexShape.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Specialized shape representing a convex polygon\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API ConvexShape : public Shape\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// \\param pointCount Number of points of the polygon\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit ConvexShape(std::size_t pointCount = 0);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the number of points of the polygon\n'
              '    ///\n'
              '    /// \\a count must be greater than 2 to define a valid '
              'shape.\n'
              '    ///\n'
              '    /// \\param count New number of points of the polygon\n'
              '    ///\n'
              '    /// \\see getPointCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPointCount(std::size_t count);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the number of points of the polygon\n'
              '    ///\n'
              '    /// \\return Number of points of the polygon\n'
              '    ///\n'
              '    /// \\see setPointCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual std::size_t getPointCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the position of a point\n'
              '    ///\n'
              "    /// Don't forget that the polygon must remain convex, and\n"
              '    /// the points need to stay ordered!\n'
              '    /// setPointCount must be called first in order to set the '
              'total\n'
              '    /// number of points. The result is undefined if \\a index '
              'is out\n'
              '    /// of the valid range.\n'
              '    ///\n'
              '    /// \\param index Index of the point to change, in range [0 '
              '.. getPointCount() - 1]\n'
              '    /// \\param point New position of the point\n'
              '    ///\n'
              '    /// \\see getPoint\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPoint(std::size_t index, const Vector2f& point);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the position of a point\n'
              '    ///\n'
              '    /// The returned point is in local coordinates, that is,\n'
              "    /// the shape's transforms (position, rotation, scale) are\n"
              '    /// not taken into account.\n'
              '    /// The result is undefined if \\a index is out of the '
              'valid range.\n'
              '    ///\n'
              '    /// \\param index Index of the point to get, in range [0 .. '
              'getPointCount() - 1]\n'
              '    ///\n'
              '    /// \\return Position of the index-th point of the polygon\n'
              '    ///\n'
              '    /// \\see setPoint\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Vector2f getPoint(std::size_t index) const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    std::vector<Vector2f> m_points; ///< Points composing the '
              'convex polygon\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000353',
         path='/Labirint Game/sfml/include/SFML/Graphics/Drawable.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Drawable.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000354',
         path='/Labirint Game/sfml/include/SFML/Graphics/Drawable.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class RenderTarget;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Abstract base class for objects that can be drawn\n'
              '///        to a render target\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Drawable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Virtual destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~Drawable() {}\n'
              '\n'
              'protected:\n'
              '\n'
              '    friend class RenderTarget;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw the object to a render target\n'
              '    ///\n'
              '    /// This is a pure virtual function that has to be '
              'implemented\n'
              '    /// by the derived class to define how the drawable should '
              'be\n'
              '    /// drawn.\n'
              '    ///\n'
              '    /// \\param target Render target to draw to\n'
              '    /// \\param states Current render states\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void draw(RenderTarget& target, RenderStates '
              'states) const = 0;\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000355',
         path='/Labirint Game/sfml/include/SFML/Graphics/Export.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Export.hpp\n')

Fragment(uuid='NORMALIZED-000356',
         path='/Labirint Game/sfml/include/SFML/Graphics/Font.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Font.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000357',
         path='/Labirint Game/sfml/include/SFML/Graphics/Font.hpp',
         lineno=42,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class InputStream;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Class for loading and manipulating character fonts\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Font\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Holds various information about a font\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct Info\n'
              '    {\n'
              '        std::string family; ///< The font family\n'
              '    };\n'
              '\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// This constructor defines an empty font\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Font();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy constructor\n'
              '    ///\n'
              '    /// \\param copy Instance to copy\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Font(const Font& copy);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    /// Cleans up all the internal resources used by the font\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Font();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the font from a file\n'
              '    ///\n'
              '    /// The supported font formats are: TrueType, Type 1, CFF,\n'
              '    /// OpenType, SFNT, X11 PCF, Windows FNT, BDF, PFR and Type '
              '42.\n'
              '    /// Note that this function knows nothing about the '
              'standard\n'
              "    /// fonts installed on the user's system, thus you can't\n"
              '    /// load them directly.\n'
              '    ///\n'
              '    /// \\warning SFML cannot preload all the font data in '
              'this\n'
              '    /// function, so the file has to remain accessible until\n'
              '    /// the sf::Font object loads a new font or is destroyed.\n'
              '    ///\n'
              '    /// \\param filename Path of the font file to load\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromMemory, loadFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromFile(const std::string& filename);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the font from a file in memory\n'
              '    ///\n'
              '    /// The supported font formats are: TrueType, Type 1, CFF,\n'
              '    /// OpenType, SFNT, X11 PCF, Windows FNT, BDF, PFR and Type '
              '42.\n'
              '    ///\n'
              '    /// \\warning SFML cannot preload all the font data in '
              'this\n'
              '    /// function, so the buffer pointed by \\a data has to '
              'remain\n'
              '    /// valid until the sf::Font object loads a new font or\n'
              '    /// is destroyed.\n'
              '    ///\n'
              '    /// \\param data        Pointer to the file data in memory\n'
              '    /// \\param sizeInBytes Size of the data to load, in bytes\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromMemory(const void* data, std::size_t '
              'sizeInBytes);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the font from a custom stream\n'
              '    ///\n'
              '    /// The supported font formats are: TrueType, Type 1, CFF,\n'
              '    /// OpenType, SFNT, X11 PCF, Windows FNT, BDF, PFR and Type '
              '42.\n'
              '    /// Warning: SFML cannot preload all the font data in this\n'
              '    /// function, so the contents of \\a stream have to remain\n'
              '    /// valid as long as the font is used.\n'
              '    ///\n'
              '    /// \\warning SFML cannot preload all the font data in '
              'this\n'
              '    /// function, so the stream has to remain accessible until\n'
              '    /// the sf::Font object loads a new font or is destroyed.\n'
              '    ///\n'
              '    /// \\param stream Source stream to read from\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromMemory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromStream(InputStream& stream);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the font information\n'
              '    ///\n'
              '    /// \\return A structure that holds the font information\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Info& getInfo() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Retrieve a glyph of the font\n'
              '    ///\n'
              '    /// If the font is a bitmap font, not all character sizes\n'
              '    /// might be available. If the glyph is not available at '
              'the\n'
              '    /// requested size, an empty glyph is returned.\n'
              '    ///\n'
              '    /// Be aware that using a negative value for the outline\n'
              '    /// thickness will cause distorted rendering.\n'
              '    ///\n'
              '    /// \\param codePoint        Unicode code point of the '
              'character to get\n'
              '    /// \\param characterSize    Reference character size\n'
              '    /// \\param bold             Retrieve the bold version or '
              'the regular one?\n'
              '    /// \\param outlineThickness Thickness of outline (when != '
              '0 the glyph will not be filled)\n'
              '    ///\n'
              '    /// \\return The glyph corresponding to \\a codePoint and '
              '\\a characterSize\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Glyph& getGlyph(Uint32 codePoint, unsigned int '
              'characterSize, bool bold, float outlineThickness = 0) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the kerning offset of two glyphs\n'
              '    ///\n'
              '    /// The kerning is an extra offset (negative) to apply '
              'between two\n'
              '    /// glyphs when rendering them, to make the pair look more '
              '"natural".\n'
              '    /// For example, the pair "AV" have a special kerning to '
              'make them\n'
              '    /// closer than other characters. Most of the glyphs pairs '
              'have a\n'
              '    /// kerning offset of zero, though.\n'
              '    ///\n'
              '    /// \\param first         Unicode code point of the first '
              'character\n'
              '    /// \\param second        Unicode code point of the second '
              'character\n'
              '    /// \\param characterSize Reference character size\n'
              '    ///\n'
              '    /// \\return Kerning value for \\a first and \\a second, in '
              'pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getKerning(Uint32 first, Uint32 second, unsigned int '
              'characterSize) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the line spacing\n'
              '    ///\n'
              '    /// Line spacing is the vertical offset to apply between '
              'two\n'
              '    /// consecutive lines of text.\n'
              '    ///\n'
              '    /// \\param characterSize Reference character size\n'
              '    ///\n'
              '    /// \\return Line spacing, in pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getLineSpacing(unsigned int characterSize) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the position of the underline\n'
              '    ///\n'
              '    /// Underline position is the vertical offset to apply '
              'between the\n'
              '    /// baseline and the underline.\n'
              '    ///\n'
              '    /// \\param characterSize Reference character size\n'
              '    ///\n'
              '    /// \\return Underline position, in pixels\n'
              '    ///\n'
              '    /// \\see getUnderlineThickness\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getUnderlinePosition(unsigned int characterSize) '
              'const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the thickness of the underline\n'
              '    ///\n'
              '    /// Underline thickness is the vertical size of the '
              'underline.\n'
              '    ///\n'
              '    /// \\param characterSize Reference character size\n'
              '    ///\n'
              '    /// \\return Underline thickness, in pixels\n'
              '    ///\n'
              '    /// \\see getUnderlinePosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getUnderlineThickness(unsigned int characterSize) '
              'const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Retrieve the texture containing the loaded '
              'glyphs of a certain size\n'
              '    ///\n'
              '    /// The contents of the returned texture changes as more '
              'glyphs\n'
              '    /// are requested, thus it is not very relevant. It is '
              'mainly\n'
              '    /// used internally by sf::Text.\n'
              '    ///\n'
              '    /// \\param characterSize Reference character size\n'
              '    ///\n'
              '    /// \\return Texture containing the glyphs of the requested '
              'size\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Texture& getTexture(unsigned int characterSize) '
              'const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Overload of assignment operator\n'
              '    ///\n'
              '    /// \\param right Instance to assign\n'
              '    ///\n'
              '    /// \\return Reference to self\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Font& operator =(const Font& right);\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Structure defining a row of glyphs\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct Row\n'
              '    {\n'
              '        Row(unsigned int rowTop, unsigned int rowHeight) : '
              'width(0), top(rowTop), height(rowHeight) {}\n'
              '\n'
              '        unsigned int width;  ///< Current width of the row\n'
              '        unsigned int top;    ///< Y position of the row into '
              'the texture\n'
              '        unsigned int height; ///< Height of the row\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Types\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef std::map<Uint64, Glyph> GlyphTable; ///< Table '
              'mapping a codepoint to its glyph\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Structure defining a page of glyphs\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct Page\n'
              '    {\n'
              '        Page();\n'
              '\n'
              '        GlyphTable       glyphs;  ///< Table mapping code '
              'points to their corresponding glyph\n'
              '        Texture          texture; ///< Texture containing the '
              'pixels of the glyphs\n'
              '        unsigned int     nextRow; ///< Y position of the next '
              'new row in the texture\n'
              '        std::vector<Row> rows;    ///< List containing the '
              'position of all the existing rows\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Free all the internal resources\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void cleanup();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load a new glyph and store it in the cache\n'
              '    ///\n'
              '    /// \\param codePoint        Unicode code point of the '
              'character to load\n'
              '    /// \\param characterSize    Reference character size\n'
              '    /// \\param bold             Retrieve the bold version or '
              'the regular one?\n'
              '    /// \\param outlineThickness Thickness of outline (when != '
              '0 the glyph will not be filled)\n'
              '    ///\n'
              '    /// \\return The glyph corresponding to \\a codePoint and '
              '\\a characterSize\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Glyph loadGlyph(Uint32 codePoint, unsigned int '
              'characterSize, bool bold, float outlineThickness) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Find a suitable rectangle within the texture '
              'for a glyph\n'
              '    ///\n'
              '    /// \\param page   Page of glyphs to search in\n'
              '    /// \\param width  Width of the rectangle\n'
              '    /// \\param height Height of the rectangle\n'
              '    ///\n'
              '    /// \\return Found rectangle within the texture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    IntRect findGlyphRect(Page& page, unsigned int width, '
              'unsigned int height) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Make sure that the given size is the current '
              'one\n'
              '    ///\n'
              '    /// \\param characterSize Reference character size\n'
              '    ///\n'
              '    /// \\return True on success, false if any error happened\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool setCurrentSize(unsigned int characterSize) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Types\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef std::map<unsigned int, Page> PageTable; ///< Table '
              'mapping a character size to its page (texture)\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void*                      m_library;     ///< Pointer to '
              'the internal library interface (it is typeless to avoid '
              'exposing implementation details)\n'
              '    void*                      m_face;        ///< Pointer to '
              'the internal font face (it is typeless to avoid exposing '
              'implementation details)\n'
              '    void*                      m_streamRec;   ///< Pointer to '
              'the stream rec instance (it is typeless to avoid exposing '
              'implementation details)\n'
              '    void*                      m_stroker;     ///< Pointer to '
              'the stroker (it is typeless to avoid exposing implementation '
              'details)\n'
              '    int*                       m_refCount;    ///< Reference '
              'counter used by implicit sharing\n'
              '    Info                       m_info;        ///< Information '
              'about the font\n'
              '    mutable PageTable          m_pages;       ///< Table '
              'containing the glyphs pages by character size\n'
              '    mutable std::vector<Uint8> m_pixelBuffer; ///< Pixel buffer '
              "holding a glyph's pixels before being written to the texture\n"
              '    #ifdef SFML_SYSTEM_ANDROID\n'
              '    void*                      m_stream; ///< Asset file '
              'streamer (if loaded from file)\n'
              '    #endif\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000358',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Glsl.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000359',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.hpp',
         lineno=37,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'namespace priv\n'
              '{\n'
              '    // Forward declarations\n'
              '    template <std::size_t Columns, std::size_t Rows>\n'
              '    struct Matrix;\n'
              '\n'
              '    template <typename T>\n'
              '    struct Vector4;\n'
              '\n'
              '#include <SFML/Graphics/Glsl.inl>\n'
              '\n'
              '} // namespace priv\n'
              '\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Namespace with GLSL types\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'namespace Glsl\n'
              '{\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 2D float vector (\\p vec2 in GLSL)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef Vector2<float> Vec2;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 2D int vector (\\p ivec2 in GLSL)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef Vector2<int> Ivec2;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 2D bool vector (\\p bvec2 in GLSL)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef Vector2<bool> Bvec2;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 3D float vector (\\p vec3 in GLSL)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef Vector3<float> Vec3;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 3D int vector (\\p ivec3 in GLSL)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef Vector3<int> Ivec3;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 3D bool vector (\\p bvec3 in GLSL)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef Vector3<bool> Bvec3;\n'
              '\n'
              '#ifdef SFML_DOXYGEN\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 4D float vector (\\p vec4 in GLSL)\n'
              '    ///\n'
              '    /// 4D float vectors can be implicitly converted from '
              'sf::Color\n'
              '    /// instances. Each color channel is normalized from '
              'integers\n'
              '    /// in [0, 255] to floating point values in [0, 1].\n'
              '    /// \\code\n'
              '    /// sf::Glsl::Vec4 zeroVector;\n'
              '    /// sf::Glsl::Vec4 vector(1.f, 2.f, 3.f, 4.f);\n'
              '    /// sf::Glsl::Vec4 color = sf::Color::Cyan;\n'
              '    /// \\endcode\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef implementation-defined Vec4;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 4D int vector (\\p ivec4 in GLSL)\n'
              '    ///\n'
              '    /// 4D int vectors can be implicitly converted from '
              'sf::Color\n'
              '    /// instances. Each color channel remains unchanged inside\n'
              '    /// the integer interval [0, 255].\n'
              '    /// \\code\n'
              '    /// sf::Glsl::Ivec4 zeroVector;\n'
              '    /// sf::Glsl::Ivec4 vector(1, 2, 3, 4);\n'
              '    /// sf::Glsl::Ivec4 color = sf::Color::Cyan;\n'
              '    /// \\endcode\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef implementation-defined Ivec4;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 4D bool vector (\\p bvec4 in GLSL)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef implementation-defined Bvec4;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 3x3 float matrix (\\p mat3 in GLSL)\n'
              '    ///\n'
              '    /// The matrix can be constructed from an array with 3x3\n'
              '    /// elements, aligned in column-major order. For example,\n'
              '    /// a translation by (x, y) looks as follows:\n'
              '    /// \\code\n'
              '    /// float array[9] =\n'
              '    /// {\n'
              '    ///     1, 0, 0,\n'
              '    ///     0, 1, 0,\n'
              '    ///     x, y, 1\n'
              '    /// };\n'
              '    ///\n'
              '    /// sf::Glsl::Mat3 matrix(array);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// Mat3 can also be implicitly converted from '
              'sf::Transform:\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// sf::Glsl::Mat3 matrix = transform;\n'
              '    /// \\endcode\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef implementation-defined Mat3;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief 4x4 float matrix (\\p mat4 in GLSL)\n'
              '    ///\n'
              '    /// The matrix can be constructed from an array with 4x4\n'
              '    /// elements, aligned in column-major order. For example,\n'
              '    /// a translation by (x, y, z) looks as follows:\n'
              '    /// \\code\n'
              '    /// float array[16] =\n'
              '    /// {\n'
              '    ///     1, 0, 0, 0,\n'
              '    ///     0, 1, 0, 0,\n'
              '    ///     0, 0, 1, 0,\n'
              '    ///     x, y, z, 1\n'
              '    /// };\n'
              '    ///\n'
              '    /// sf::Glsl::Mat4 matrix(array);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// Mat4 can also be implicitly converted from '
              'sf::Transform:\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// sf::Glsl::Mat4 matrix = transform;\n'
              '    /// \\endcode\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef implementation-defined Mat4;\n'
              '\n'
              '#else // SFML_DOXYGEN\n'
              '\n'
              '    typedef priv::Vector4<float> Vec4;\n'
              '    typedef priv::Vector4<int> Ivec4;\n'
              '    typedef priv::Vector4<bool> Bvec4;\n'
              '    typedef priv::Matrix<3, 3> Mat3;\n'
              '    typedef priv::Matrix<4, 4> Mat4;\n'
              '\n'
              '#endif // SFML_DOXYGEN\n'
              '\n'
              '} // namespace Glsl\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000360',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000361',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000362',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint Game/sfml/include/SFML/Graphics/Glsl.inl\n')

Fragment(uuid='NORMALIZED-000363',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n// SFML - Simple and Fast Multimedia Library')

Fragment(uuid='NORMALIZED-000364',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)')

Fragment(uuid='NORMALIZED-000365',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000366',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "// This software is provided 'as-is', without any express or "
              'implied warranty.')

Fragment(uuid='NORMALIZED-000367',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// In no event will the authors be held liable for any damages '
              'arising from the use of this software.')

Fragment(uuid='NORMALIZED-000368',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000369',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Permission is granted to anyone to use this software for any '
              'purpose,')

Fragment(uuid='NORMALIZED-000370',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// including commercial applications, and to alter it and '
              'redistribute it freely,')

Fragment(uuid='NORMALIZED-000371',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n// subject to the following restrictions:')

Fragment(uuid='NORMALIZED-000372',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000373',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n// 1. The origin of this software must not be misrepresented;')

Fragment(uuid='NORMALIZED-000374',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n//    you must not claim that you wrote the original software.')

Fragment(uuid='NORMALIZED-000375',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n//    If you use this software in a product, an acknowledgment')

Fragment(uuid='NORMALIZED-000376',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    in the product documentation would be appreciated but is '
              'not required.')

Fragment(uuid='NORMALIZED-000377',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000378',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n// 2. Altered source versions must be plainly marked as such,')

Fragment(uuid='NORMALIZED-000379',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    and must not be misrepresented as being the original '
              'software.')

Fragment(uuid='NORMALIZED-000380',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000381',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// 3. This notice may not be removed or altered from any source '
              'distribution.')

Fragment(uuid='NORMALIZED-000382',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000383',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000384',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000385',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000386',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Helper functions to copy sf::Transform to '
              'sf::Glsl::Mat3/4\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'void SFML_GRAPHICS_API copyMatrix(const Transform& source, '
              'Matrix<3, 3>& dest);\n'
              'void SFML_GRAPHICS_API copyMatrix(const Transform& source, '
              'Matrix<4, 4>& dest);\n')

Fragment(uuid='NORMALIZED-000387',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=32,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Copy array-based matrix with given number of '
              'elements\n'
              '///\n'
              '/// Indirection to std::copy() to avoid inclusion of\n'
              "/// <algorithm> and MSVC's annoying 4996 warning in header\n"
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'void SFML_GRAPHICS_API copyMatrix(const float* source, '
              'std::size_t elements, float* dest);\n')

Fragment(uuid='NORMALIZED-000388',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=41,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Helper functions to copy sf::Color to '
              'sf::Glsl::Vec4/Ivec4\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'void SFML_GRAPHICS_API copyVector(const Color& source, '
              'Vector4<float>& dest);\n'
              'void SFML_GRAPHICS_API copyVector(const Color& source, '
              'Vector4<int>& dest);\n'
              '\n')

Fragment(uuid='NORMALIZED-000389',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=49,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Matrix type, used to set uniforms in GLSL\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <std::size_t Columns, std::size_t Rows>\n'
              'struct Matrix\n'
              '{\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct from raw data\n'
              '    ///\n'
              '    /// \\param pointer Points to the beginning of an array '
              'that\n'
              '    ///                has the size of the matrix. The '
              'elements\n'
              '    ///                are copied to the instance.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit Matrix(const float* pointer)\n'
              '    {\n'
              '        copyMatrix(pointer, Columns * Rows, array);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000390',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=69,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct implicitly from SFML transform\n'
              '    ///\n'
              '    /// This constructor is only supported for 3x3 and 4x4\n'
              '    /// matrices.\n'
              '    ///\n'
              '    /// \\param transform Object containing a transform.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Matrix(const Transform& transform)\n'
              '    {\n'
              '        copyMatrix(transform, *this);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000391',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=83,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    float array[Columns * Rows]; ///< Array holding matrix '
              'data\n'
              '};\n')

Fragment(uuid='NORMALIZED-000392',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=86,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief 4D vector type, used to set uniforms in GLSL\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'struct Vector4\n'
              '{\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor, creates a zero vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector4() :\n'
              '    x(0),\n'
              '    y(0),\n'
              '    z(0),\n'
              '    w(0)\n'
              '    {\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000393',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=105,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct from 4 vector components\n'
              '    ///\n'
              '    /// \\param X Component of the 4D vector\n'
              '    /// \\param Y Component of the 4D vector\n'
              '    /// \\param Z Component of the 4D vector\n'
              '    /// \\param W Component of the 4D vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector4(T X, T Y, T Z, T W) :\n'
              '    x(X),\n'
              '    y(Y),\n'
              '    z(Z),\n'
              '    w(W)\n'
              '    {\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000394',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Conversion constructor\n'
              '    ///\n'
              '    /// \\param other 4D vector of different type\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename U>\n'
              '    explicit Vector4(const Vector4<U>& other) :\n'
              '    x(static_cast<T>(other.x)),\n'
              '    y(static_cast<T>(other.y)),\n'
              '    z(static_cast<T>(other.z)),\n'
              '    w(static_cast<T>(other.w))\n'
              '    {\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000395',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=137,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct float vector implicitly from color\n'
              '    ///\n'
              '    /// \\param color Color instance. Is normalized to [0, 1]\n'
              '    ///              for floats, and left as-is for ints.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector4(const Color& color)\n'
              '    // uninitialized\n'
              '    {\n'
              '        copyVector(color, *this);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000396',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glsl.inl',
         lineno=150,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    T x; ///< 1st component (X) of the 4D vector\n'
              '    T y; ///< 2nd component (Y) of the 4D vector\n'
              '    T z; ///< 3rd component (Z) of the 4D vector\n'
              '    T w; ///< 4th component (W) of the 4D vector\n'
              '};\n')

Fragment(uuid='NORMALIZED-000397',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glyph.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Glyph.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000398',
         path='/Labirint Game/sfml/include/SFML/Graphics/Glyph.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Structure describing a glyph\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Glyph\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Glyph() : advance(0) {}\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float     advance;     ///< Offset to move horizontally to '
              'the next character\n'
              '    FloatRect bounds;      ///< Bounding rectangle of the '
              'glyph, in coordinates relative to the baseline\n'
              '    IntRect   textureRect; ///< Texture coordinates of the '
              "glyph inside the font's texture\n"
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000399',
         path='/Labirint Game/sfml/include/SFML/Graphics/Image.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Image.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000400',
         path='/Labirint Game/sfml/include/SFML/Graphics/Image.hpp',
         lineno=38,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class InputStream;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Class for loading, manipulating and saving images\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Image\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates an empty image.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Image();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Image();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create the image and fill it with a unique '
              'color\n'
              '    ///\n'
              '    /// \\param width  Width of the image\n'
              '    /// \\param height Height of the image\n'
              '    /// \\param color  Fill color\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void create(unsigned int width, unsigned int height, const '
              'Color& color = Color(0, 0, 0));\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create the image from an array of pixels\n'
              '    ///\n'
              '    /// The \\a pixel array is assumed to contain 32-bits RGBA '
              'pixels,\n'
              '    /// and have the given \\a width and \\a height. If not, '
              'this is\n'
              '    /// an undefined behavior.\n'
              '    /// If \\a pixels is null, an empty image is created.\n'
              '    ///\n'
              '    /// \\param width  Width of the image\n'
              '    /// \\param height Height of the image\n'
              '    /// \\param pixels Array of pixels to copy to the image\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void create(unsigned int width, unsigned int height, const '
              'Uint8* pixels);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the image from a file on disk\n'
              '    ///\n'
              '    /// The supported image formats are bmp, png, tga, jpg, '
              'gif,\n'
              '    /// psd, hdr and pic. Some format options are not '
              'supported,\n'
              '    /// like progressive jpeg.\n'
              '    /// If this function fails, the image is left unchanged.\n'
              '    ///\n'
              '    /// \\param filename Path of the image file to load\n'
              '    ///\n'
              '    /// \\return True if loading was successful\n'
              '    ///\n'
              '    /// \\see loadFromMemory, loadFromStream, saveToFile\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromFile(const std::string& filename);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the image from a file in memory\n'
              '    ///\n'
              '    /// The supported image formats are bmp, png, tga, jpg, '
              'gif,\n'
              '    /// psd, hdr and pic. Some format options are not '
              'supported,\n'
              '    /// like progressive jpeg.\n'
              '    /// If this function fails, the image is left unchanged.\n'
              '    ///\n'
              '    /// \\param data Pointer to the file data in memory\n'
              '    /// \\param size Size of the data to load, in bytes\n'
              '    ///\n'
              '    /// \\return True if loading was successful\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromMemory(const void* data, std::size_t size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the image from a custom stream\n'
              '    ///\n'
              '    /// The supported image formats are bmp, png, tga, jpg, '
              'gif,\n'
              '    /// psd, hdr and pic. Some format options are not '
              'supported,\n'
              '    /// like progressive jpeg.\n'
              '    /// If this function fails, the image is left unchanged.\n'
              '    ///\n'
              '    /// \\param stream Source stream to read from\n'
              '    ///\n'
              '    /// \\return True if loading was successful\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromMemory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromStream(InputStream& stream);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Save the image to a file on disk\n'
              '    ///\n'
              '    /// The format of the image is automatically deduced from\n'
              '    /// the extension. The supported image formats are bmp, '
              'png,\n'
              '    /// tga and jpg. The destination file is overwritten\n'
              '    /// if it already exists. This function fails if the image '
              'is empty.\n'
              '    ///\n'
              '    /// \\param filename Path of the file to save\n'
              '    ///\n'
              '    /// \\return True if saving was successful\n'
              '    ///\n'
              '    /// \\see create, loadFromFile, loadFromMemory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool saveToFile(const std::string& filename) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the size (width and height) of the '
              'image\n'
              '    ///\n'
              '    /// \\return Size of the image, in pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2u getSize() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create a transparency mask from a specified '
              'color-key\n'
              '    ///\n'
              '    /// This function sets the alpha value of every pixel '
              'matching\n'
              '    /// the given color to \\a alpha (0 by default), so that '
              'they\n'
              '    /// become transparent.\n'
              '    ///\n'
              '    /// \\param color Color to make transparent\n'
              '    /// \\param alpha Alpha value to assign to transparent '
              'pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void createMaskFromColor(const Color& color, Uint8 alpha = '
              '0);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy pixels from another image onto this one\n'
              '    ///\n'
              '    /// This function does a slow pixel copy and should not be\n'
              '    /// used intensively. It can be used to prepare a complex\n'
              '    /// static image from several others, but if you need this\n'
              "    /// kind of feature in real-time you'd better use "
              'sf::RenderTexture.\n'
              '    ///\n'
              '    /// If \\a sourceRect is empty, the whole image is copied.\n'
              '    /// If \\a applyAlpha is set to true, the transparency of\n'
              '    /// source pixels is applied. If it is false, the pixels '
              'are\n'
              '    /// copied unchanged with their alpha value.\n'
              '    ///\n'
              '    /// \\param source     Source image to copy\n'
              '    /// \\param destX      X coordinate of the destination '
              'position\n'
              '    /// \\param destY      Y coordinate of the destination '
              'position\n'
              '    /// \\param sourceRect Sub-rectangle of the source image to '
              'copy\n'
              '    /// \\param applyAlpha Should the copy take into account '
              'the source transparency?\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void copy(const Image& source, unsigned int destX, unsigned '
              'int destY, const IntRect& sourceRect = IntRect(0, 0, 0, 0), '
              'bool applyAlpha = false);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the color of a pixel\n'
              '    ///\n'
              "    /// This function doesn't check the validity of the pixel\n"
              '    /// coordinates, using out-of-range values will result in\n'
              '    /// an undefined behavior.\n'
              '    ///\n'
              '    /// \\param x     X coordinate of pixel to change\n'
              '    /// \\param y     Y coordinate of pixel to change\n'
              '    /// \\param color New color of the pixel\n'
              '    ///\n'
              '    /// \\see getPixel\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPixel(unsigned int x, unsigned int y, const Color& '
              'color);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the color of a pixel\n'
              '    ///\n'
              "    /// This function doesn't check the validity of the pixel\n"
              '    /// coordinates, using out-of-range values will result in\n'
              '    /// an undefined behavior.\n'
              '    ///\n'
              '    /// \\param x X coordinate of pixel to get\n'
              '    /// \\param y Y coordinate of pixel to get\n'
              '    ///\n'
              '    /// \\return Color of the pixel at coordinates (x, y)\n'
              '    ///\n'
              '    /// \\see setPixel\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Color getPixel(unsigned int x, unsigned int y) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a read-only pointer to the array of pixels\n'
              '    ///\n'
              '    /// The returned value points to an array of RGBA pixels '
              'made of\n'
              '    /// 8 bits integers components. The size of the array is\n'
              '    /// width * height * 4 (getSize().x * getSize().y * 4).\n'
              '    /// Warning: the returned pointer may become invalid if '
              'you\n'
              '    /// modify the image, so you should never store it for too '
              'long.\n'
              '    /// If the image is empty, a null pointer is returned.\n'
              '    ///\n'
              '    /// \\return Read-only pointer to the array of pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Uint8* getPixelsPtr() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Flip the image horizontally (left <-> right)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void flipHorizontally();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Flip the image vertically (top <-> bottom)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void flipVertically();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2u           m_size;   ///< Image size\n'
              '    std::vector<Uint8> m_pixels; ///< Pixels of the image\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000401',
         path='/Labirint Game/sfml/include/SFML/Graphics/PrimitiveType.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/PrimitiveType.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000402',
         path='/Labirint Game/sfml/include/SFML/Graphics/PrimitiveType.hpp',
         lineno=28,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\ingroup graphics\n'
              '/// \\brief Types of primitives that a sf::VertexArray can '
              'render\n'
              '///\n'
              '/// Points and lines have no area, therefore their thickness\n'
              '/// will always be 1 pixel, regardless the current transform\n'
              '/// and view.\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'enum PrimitiveType\n'
              '{\n'
              '    Points,        ///< List of individual points\n'
              '    Lines,         ///< List of individual lines\n'
              '    LineStrip,     ///< List of connected lines, a point uses '
              'the previous point to form a line\n'
              '    Triangles,     ///< List of individual triangles\n'
              '    TriangleStrip, ///< List of connected triangles, a point '
              'uses the two previous points to form a triangle\n'
              '    TriangleFan,   ///< List of connected triangles, a point '
              'uses the common center and the previous point to form a '
              'triangle\n'
              '    Quads,         ///< List of individual quads (deprecated, '
              "don't work with OpenGL ES)\n"
              '\n'
              '    // Deprecated names\n'
              '    LinesStrip     = LineStrip,     ///< \\deprecated Use '
              'LineStrip instead\n'
              '    TrianglesStrip = TriangleStrip, ///< \\deprecated Use '
              'TriangleStrip instead\n'
              '    TrianglesFan   = TriangleFan    ///< \\deprecated Use '
              'TriangleFan instead\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000403',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Rect.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000404',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Utility class for manipulating 2D axis aligned '
              'rectangles\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'class Rect\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates an empty rectangle (it is equivalent to '
              'calling\n'
              '    /// Rect(0, 0, 0, 0)).\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Rect();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the rectangle from its coordinates\n'
              '    ///\n'
              '    /// Be careful, the last two parameters are the width\n'
              '    /// and height, not the right and bottom coordinates!\n'
              '    ///\n'
              '    /// \\param rectLeft   Left coordinate of the rectangle\n'
              '    /// \\param rectTop    Top coordinate of the rectangle\n'
              '    /// \\param rectWidth  Width of the rectangle\n'
              '    /// \\param rectHeight Height of the rectangle\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Rect(T rectLeft, T rectTop, T rectWidth, T rectHeight);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the rectangle from position and size\n'
              '    ///\n'
              '    /// Be careful, the last parameter is the size,\n'
              '    /// not the bottom-right corner!\n'
              '    ///\n'
              '    /// \\param position Position of the top-left corner of the '
              'rectangle\n'
              '    /// \\param size     Size of the rectangle\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Rect(const Vector2<T>& position, const Vector2<T>& size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the rectangle from another type of '
              'rectangle\n'
              '    ///\n'
              "    /// This constructor doesn't replace the copy constructor,\n"
              "    /// it's called only when U != T.\n"
              '    /// A call to this constructor will fail to compile if U\n'
              '    /// is not convertible to T.\n'
              '    ///\n'
              '    /// \\param rectangle Rectangle to convert\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename U>\n'
              '    explicit Rect(const Rect<U>& rectangle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Check if a point is inside the rectangle's "
              'area\n'
              '    ///\n'
              '    /// This check is non-inclusive. If the point lies on the\n'
              '    /// edge of the rectangle, this function will return '
              'false.\n'
              '    ///\n'
              '    /// \\param x X coordinate of the point to test\n'
              '    /// \\param y Y coordinate of the point to test\n'
              '    ///\n'
              '    /// \\return True if the point is inside, false otherwise\n'
              '    ///\n'
              '    /// \\see intersects\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool contains(T x, T y) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Check if a point is inside the rectangle's "
              'area\n'
              '    ///\n'
              '    /// This check is non-inclusive. If the point lies on the\n'
              '    /// edge of the rectangle, this function will return '
              'false.\n'
              '    ///\n'
              '    /// \\param point Point to test\n'
              '    ///\n'
              '    /// \\return True if the point is inside, false otherwise\n'
              '    ///\n'
              '    /// \\see intersects\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool contains(const Vector2<T>& point) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check the intersection between two rectangles\n'
              '    ///\n'
              '    /// \\param rectangle Rectangle to test\n'
              '    ///\n'
              '    /// \\return True if rectangles overlap, false otherwise\n'
              '    ///\n'
              '    /// \\see contains\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool intersects(const Rect<T>& rectangle) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check the intersection between two rectangles\n'
              '    ///\n'
              '    /// This overload returns the overlapped rectangle in the\n'
              '    /// \\a intersection parameter.\n'
              '    ///\n'
              '    /// \\param rectangle    Rectangle to test\n'
              '    /// \\param intersection Rectangle to be filled with the '
              'intersection\n'
              '    ///\n'
              '    /// \\return True if rectangles overlap, false otherwise\n'
              '    ///\n'
              '    /// \\see contains\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool intersects(const Rect<T>& rectangle, Rect<T>& '
              'intersection) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    T left;   ///< Left coordinate of the rectangle\n'
              '    T top;    ///< Top coordinate of the rectangle\n'
              '    T width;  ///< Width of the rectangle\n'
              '    T height; ///< Height of the rectangle\n'
              '};\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Rect\n'
              '/// \\brief Overload of binary operator ==\n'
              '///\n'
              '/// This operator compares strict equality between two '
              'rectangles.\n'
              '///\n'
              '/// \\param left  Left operand (a rectangle)\n'
              '/// \\param right Right operand (a rectangle)\n'
              '///\n'
              '/// \\return True if \\a left is equal to \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'bool operator ==(const Rect<T>& left, const Rect<T>& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Rect\n'
              '/// \\brief Overload of binary operator !=\n'
              '///\n'
              '/// This operator compares strict difference between two '
              'rectangles.\n'
              '///\n'
              '/// \\param left  Left operand (a rectangle)\n'
              '/// \\param right Right operand (a rectangle)\n'
              '///\n'
              '/// \\return True if \\a left is not equal to \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'bool operator !=(const Rect<T>& left, const Rect<T>& right);\n'
              '\n'
              '#include <SFML/Graphics/Rect.inl>\n'
              '\n'
              '// Create typedefs for the most common types\n'
              'typedef Rect<int>   IntRect;\n'
              'typedef Rect<float> FloatRect;\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000405',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000406',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000407',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint Game/sfml/include/SFML/Graphics/Rect.inl\n')

Fragment(uuid='NORMALIZED-000408',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n// SFML - Simple and Fast Multimedia Library')

Fragment(uuid='NORMALIZED-000409',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)')

Fragment(uuid='NORMALIZED-000410',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000411',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "// This software is provided 'as-is', without any express or "
              'implied warranty.')

Fragment(uuid='NORMALIZED-000412',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// In no event will the authors be held liable for any damages '
              'arising from the use of this software.')

Fragment(uuid='NORMALIZED-000413',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000414',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Permission is granted to anyone to use this software for any '
              'purpose,')

Fragment(uuid='NORMALIZED-000415',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// including commercial applications, and to alter it and '
              'redistribute it freely,')

Fragment(uuid='NORMALIZED-000416',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n// subject to the following restrictions:')

Fragment(uuid='NORMALIZED-000417',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000418',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n// 1. The origin of this software must not be misrepresented;')

Fragment(uuid='NORMALIZED-000419',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n//    you must not claim that you wrote the original software.')

Fragment(uuid='NORMALIZED-000420',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n//    If you use this software in a product, an acknowledgment')

Fragment(uuid='NORMALIZED-000421',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    in the product documentation would be appreciated but is '
              'not required.')

Fragment(uuid='NORMALIZED-000422',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000423',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n// 2. Altered source versions must be plainly marked as such,')

Fragment(uuid='NORMALIZED-000424',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    and must not be misrepresented as being the original '
              'software.')

Fragment(uuid='NORMALIZED-000425',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000426',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// 3. This notice may not be removed or altered from any source '
              'distribution.')

Fragment(uuid='NORMALIZED-000427',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000428',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000429',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000430',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000431',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Rect<T>::Rect() :\n'
              'left  (0),\n'
              'top   (0),\n'
              'width (0),\n'
              'height(0)\n'
              '{\n')

Fragment(uuid='NORMALIZED-000432',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=34,
         depth=1,
         type='documentation',
         name='',
         text='\n}\n\n')

Fragment(uuid='NORMALIZED-000433',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Rect<T>::Rect(T rectLeft, T rectTop, T rectWidth, T rectHeight) '
              ':\n'
              'left  (rectLeft),\n'
              'top   (rectTop),\n'
              'width (rectWidth),\n'
              'height(rectHeight)\n'
              '{\n')

Fragment(uuid='NORMALIZED-000434',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='\n}\n\n')

Fragment(uuid='NORMALIZED-000435',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=49,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Rect<T>::Rect(const Vector2<T>& position, const Vector2<T>& '
              'size) :\n'
              'left  (position.x),\n'
              'top   (position.y),\n'
              'width (size.x),\n'
              'height(size.y)\n'
              '{\n')

Fragment(uuid='NORMALIZED-000436',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=58,
         depth=1,
         type='documentation',
         name='',
         text='\n}\n\n')

Fragment(uuid='NORMALIZED-000437',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=61,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'template <typename U>\n'
              'Rect<T>::Rect(const Rect<U>& rectangle) :\n'
              'left  (static_cast<T>(rectangle.left)),\n'
              'top   (static_cast<T>(rectangle.top)),\n'
              'width (static_cast<T>(rectangle.width)),\n'
              'height(static_cast<T>(rectangle.height))\n'
              '{\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000438',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=73,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'bool Rect<T>::contains(T x, T y) const\n'
              '{\n'
              '    // Rectangles with negative dimensions are allowed, so we '
              'must handle them correctly\n')

Fragment(uuid='NORMALIZED-000439',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=79,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    // Compute the real min and max of the rectangle on both '
              'axes\n'
              '    T minX = std::min(left, static_cast<T>(left + width));\n'
              '    T maxX = std::max(left, static_cast<T>(left + width));\n'
              '    T minY = std::min(top, static_cast<T>(top + height));\n'
              '    T maxY = std::max(top, static_cast<T>(top + height));\n')

Fragment(uuid='NORMALIZED-000440',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=85,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    return (x >= minX) && (x < maxX) && (y >= minY) && (y < '
              'maxY);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000441',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=89,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'bool Rect<T>::contains(const Vector2<T>& point) const\n'
              '{\n'
              '    return contains(point.x, point.y);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000442',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=97,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'bool Rect<T>::intersects(const Rect<T>& rectangle) const\n'
              '{\n'
              '    Rect<T> intersection;\n'
              '    return intersects(rectangle, intersection);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000443',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=106,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'bool Rect<T>::intersects(const Rect<T>& rectangle, Rect<T>& '
              'intersection) const\n'
              '{\n'
              '    // Rectangles with negative dimensions are allowed, so we '
              'must handle them correctly\n')

Fragment(uuid='NORMALIZED-000444',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=112,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    // Compute the min and max of the first rectangle on both '
              'axes\n'
              '    T r1MinX = std::min(left, static_cast<T>(left + width));\n'
              '    T r1MaxX = std::max(left, static_cast<T>(left + width));\n'
              '    T r1MinY = std::min(top, static_cast<T>(top + height));\n'
              '    T r1MaxY = std::max(top, static_cast<T>(top + height));\n')

Fragment(uuid='NORMALIZED-000445',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=118,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    // Compute the min and max of the second rectangle on both '
              'axes\n'
              '    T r2MinX = std::min(rectangle.left, '
              'static_cast<T>(rectangle.left + rectangle.width));\n'
              '    T r2MaxX = std::max(rectangle.left, '
              'static_cast<T>(rectangle.left + rectangle.width));\n'
              '    T r2MinY = std::min(rectangle.top, '
              'static_cast<T>(rectangle.top + rectangle.height));\n'
              '    T r2MaxY = std::max(rectangle.top, '
              'static_cast<T>(rectangle.top + rectangle.height));\n')

Fragment(uuid='NORMALIZED-000446',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=124,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    // Compute the intersection boundaries\n'
              '    T interLeft   = std::max(r1MinX, r2MinX);\n'
              '    T interTop    = std::max(r1MinY, r2MinY);\n'
              '    T interRight  = std::min(r1MaxX, r2MaxX);\n'
              '    T interBottom = std::min(r1MaxY, r2MaxY);\n')

Fragment(uuid='NORMALIZED-000447',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=130,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    // If the intersection is valid (positive non zero area), '
              'then there is an intersection\n'
              '    if ((interLeft < interRight) && (interTop < interBottom))\n'
              '    {\n'
              '        intersection = Rect<T>(interLeft, interTop, interRight '
              '- interLeft, interBottom - interTop);\n'
              '        return true;\n'
              '    }\n'
              '    else\n'
              '    {\n'
              '        intersection = Rect<T>(0, 0, 0, 0);\n'
              '        return false;\n'
              '    }\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000448',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=144,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline bool operator ==(const Rect<T>& left, const Rect<T>& '
              'right)\n'
              '{\n'
              '    return (left.left == right.left) && (left.width == '
              'right.width) &&\n'
              '           (left.top == right.top) && (left.height == '
              'right.height);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000449',
         path='/Labirint Game/sfml/include/SFML/Graphics/Rect.inl',
         lineno=153,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline bool operator !=(const Rect<T>& left, const Rect<T>& '
              'right)\n'
              '{\n'
              '    return !(left == right);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000450',
         path='/Labirint Game/sfml/include/SFML/Graphics/RectangleShape.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint '
              'Game/sfml/include/SFML/Graphics/RectangleShape.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000451',
         path='/Labirint Game/sfml/include/SFML/Graphics/RectangleShape.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Specialized shape representing a rectangle\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API RectangleShape : public Shape\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// \\param size Size of the rectangle\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit RectangleShape(const Vector2f& size = Vector2f(0, '
              '0));\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the size of the rectangle\n'
              '    ///\n'
              '    /// \\param size New size of the rectangle\n'
              '    ///\n'
              '    /// \\see getSize\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setSize(const Vector2f& size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the size of the rectangle\n'
              '    ///\n'
              '    /// \\return Size of the rectangle\n'
              '    ///\n'
              '    /// \\see setSize\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Vector2f& getSize() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the number of points defining the shape\n'
              '    ///\n'
              '    /// \\return Number of points of the shape. For rectangle\n'
              '    ///         shapes, this number is always 4.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual std::size_t getPointCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a point of the rectangle\n'
              '    ///\n'
              '    /// The returned point is in local coordinates, that is,\n'
              "    /// the shape's transforms (position, rotation, scale) are\n"
              '    /// not taken into account.\n'
              '    /// The result is undefined if \\a index is out of the '
              'valid range.\n'
              '    ///\n'
              '    /// \\param index Index of the point to get, in range [0 .. '
              '3]\n'
              '    ///\n'
              '    /// \\return index-th point of the shape\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Vector2f getPoint(std::size_t index) const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2f m_size; ///< Size of the rectangle\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000452',
         path='/Labirint Game/sfml/include/SFML/Graphics/RenderStates.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/RenderStates.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000453',
         path='/Labirint Game/sfml/include/SFML/Graphics/RenderStates.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class Shader;\n'
              'class Texture;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Define the states used for drawing to a '
              'RenderTarget\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API RenderStates\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Constructing a default set of render states is '
              'equivalent\n'
              '    /// to using sf::RenderStates::Default.\n'
              '    /// The default set defines:\n'
              '    /// \\li the BlendAlpha blend mode\n'
              '    /// \\li the identity transform\n'
              '    /// \\li a null texture\n'
              '    /// \\li a null shader\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    RenderStates();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a default set of render states with a '
              'custom blend mode\n'
              '    ///\n'
              '    /// \\param theBlendMode Blend mode to use\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    RenderStates(const BlendMode& theBlendMode);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a default set of render states with a '
              'custom transform\n'
              '    ///\n'
              '    /// \\param theTransform Transform to use\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    RenderStates(const Transform& theTransform);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a default set of render states with a '
              'custom texture\n'
              '    ///\n'
              '    /// \\param theTexture Texture to use\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    RenderStates(const Texture* theTexture);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a default set of render states with a '
              'custom shader\n'
              '    ///\n'
              '    /// \\param theShader Shader to use\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    RenderStates(const Shader* theShader);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a set of render states with all its '
              'attributes\n'
              '    ///\n'
              '    /// \\param theBlendMode Blend mode to use\n'
              '    /// \\param theTransform Transform to use\n'
              '    /// \\param theTexture   Texture to use\n'
              '    /// \\param theShader    Shader to use\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    RenderStates(const BlendMode& theBlendMode, const '
              'Transform& theTransform,\n'
              '                 const Texture* theTexture, const Shader* '
              'theShader);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Static member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static const RenderStates Default; ///< Special instance '
              'holding the default render states\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    BlendMode      blendMode; ///< Blending mode\n'
              '    Transform      transform; ///< Transform\n'
              '    const Texture* texture;   ///< Texture\n'
              '    const Shader*  shader;    ///< Shader\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000454',
         path='/Labirint Game/sfml/include/SFML/Graphics/RenderTarget.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/RenderTarget.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000455',
         path='/Labirint Game/sfml/include/SFML/Graphics/RenderTarget.hpp',
         lineno=43,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class Drawable;\n'
              'class VertexBuffer;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Base class for all render targets (window, texture, '
              '...)\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API RenderTarget : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~RenderTarget();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Clear the entire target with a single color\n'
              '    ///\n'
              '    /// This function is usually called once every frame,\n'
              '    /// to clear the previous contents of the target.\n'
              '    ///\n'
              '    /// \\param color Fill color to use to clear the render '
              'target\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void clear(const Color& color = Color(0, 0, 0, 255));\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current active view\n'
              '    ///\n'
              '    /// The view is like a 2D camera, it controls which part '
              'of\n'
              '    /// the 2D scene is visible, and how it is viewed in the\n'
              '    /// render target.\n'
              '    /// The new view will affect everything that is drawn, '
              'until\n'
              '    /// another view is set.\n'
              '    /// The render target keeps its own copy of the view '
              'object,\n'
              '    /// so it is not necessary to keep the original one alive\n'
              '    /// after calling this function.\n'
              '    /// To restore the original view of the target, you can '
              'pass\n'
              '    /// the result of getDefaultView() to this function.\n'
              '    ///\n'
              '    /// \\param view New view to use\n'
              '    ///\n'
              '    /// \\see getView, getDefaultView\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setView(const View& view);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the view currently in use in the render '
              'target\n'
              '    ///\n'
              '    /// \\return The view object that is currently used\n'
              '    ///\n'
              '    /// \\see setView, getDefaultView\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const View& getView() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the default view of the render target\n'
              '    ///\n'
              '    /// The default view has the initial size of the render '
              'target,\n'
              '    /// and never changes after the target has been created.\n'
              '    ///\n'
              '    /// \\return The default view of the render target\n'
              '    ///\n'
              '    /// \\see setView, getView\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const View& getDefaultView() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the viewport of a view, applied to this '
              'render target\n'
              '    ///\n'
              '    /// The viewport is defined in the view as a ratio, this '
              'function\n'
              '    /// simply applies this ratio to the current dimensions of '
              'the\n'
              '    /// render target to calculate the pixels rectangle that '
              'the viewport\n'
              '    /// actually covers in the target.\n'
              '    ///\n'
              '    /// \\param view The view for which we want to compute the '
              'viewport\n'
              '    ///\n'
              '    /// \\return Viewport rectangle, expressed in pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    IntRect getViewport(const View& view) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Convert a point from target coordinates to '
              'world\n'
              '    ///        coordinates, using the current view\n'
              '    ///\n'
              '    /// This function is an overload of the mapPixelToCoords\n'
              '    /// function that implicitly uses the current view.\n'
              '    /// It is equivalent to:\n'
              '    /// \\code\n'
              '    /// target.mapPixelToCoords(point, target.getView());\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param point Pixel to convert\n'
              '    ///\n'
              '    /// \\return The converted point, in "world" coordinates\n'
              '    ///\n'
              '    /// \\see mapCoordsToPixel\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2f mapPixelToCoords(const Vector2i& point) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Convert a point from target coordinates to '
              'world coordinates\n'
              '    ///\n'
              '    /// This function finds the 2D position that matches the\n'
              '    /// given pixel of the render target. In other words, it '
              'does\n'
              '    /// the inverse of what the graphics card does, to find '
              'the\n'
              '    /// initial position of a rendered pixel.\n'
              '    ///\n'
              '    /// Initially, both coordinate systems (world units and '
              'target pixels)\n'
              '    /// match perfectly. But if you define a custom view or '
              'resize your\n'
              '    /// render target, this assertion is not true anymore, i.e. '
              'a point\n'
              '    /// located at (10, 50) in your render target may map to '
              'the point\n'
              '    /// (150, 75) in your 2D world -- if the view is translated '
              'by (140, 25).\n'
              '    ///\n'
              '    /// For render-windows, this function is typically used to '
              'find\n'
              '    /// which point (or object) is located below the mouse '
              'cursor.\n'
              '    ///\n'
              '    /// This version uses a custom view for calculations, see '
              'the other\n'
              '    /// overload of the function if you want to use the current '
              'view of the\n'
              '    /// render target.\n'
              '    ///\n'
              '    /// \\param point Pixel to convert\n'
              '    /// \\param view The view to use for converting the point\n'
              '    ///\n'
              '    /// \\return The converted point, in "world" units\n'
              '    ///\n'
              '    /// \\see mapCoordsToPixel\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2f mapPixelToCoords(const Vector2i& point, const '
              'View& view) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Convert a point from world coordinates to '
              'target\n'
              '    ///        coordinates, using the current view\n'
              '    ///\n'
              '    /// This function is an overload of the mapCoordsToPixel\n'
              '    /// function that implicitly uses the current view.\n'
              '    /// It is equivalent to:\n'
              '    /// \\code\n'
              '    /// target.mapCoordsToPixel(point, target.getView());\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param point Point to convert\n'
              '    ///\n'
              '    /// \\return The converted point, in target coordinates '
              '(pixels)\n'
              '    ///\n'
              '    /// \\see mapPixelToCoords\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2i mapCoordsToPixel(const Vector2f& point) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Convert a point from world coordinates to '
              'target coordinates\n'
              '    ///\n'
              '    /// This function finds the pixel of the render target that '
              'matches\n'
              '    /// the given 2D point. In other words, it goes through the '
              'same process\n'
              '    /// as the graphics card, to compute the final position of '
              'a rendered point.\n'
              '    ///\n'
              '    /// Initially, both coordinate systems (world units and '
              'target pixels)\n'
              '    /// match perfectly. But if you define a custom view or '
              'resize your\n'
              '    /// render target, this assertion is not true anymore, i.e. '
              'a point\n'
              '    /// located at (150, 75) in your 2D world may map to the '
              'pixel\n'
              '    /// (10, 50) of your render target -- if the view is '
              'translated by (140, 25).\n'
              '    ///\n'
              '    /// This version uses a custom view for calculations, see '
              'the other\n'
              '    /// overload of the function if you want to use the current '
              'view of the\n'
              '    /// render target.\n'
              '    ///\n'
              '    /// \\param point Point to convert\n'
              '    /// \\param view The view to use for converting the point\n'
              '    ///\n'
              '    /// \\return The converted point, in target coordinates '
              '(pixels)\n'
              '    ///\n'
              '    /// \\see mapPixelToCoords\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2i mapCoordsToPixel(const Vector2f& point, const '
              'View& view) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw a drawable object to the render target\n'
              '    ///\n'
              '    /// \\param drawable Object to draw\n'
              '    /// \\param states   Render states to use for drawing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void draw(const Drawable& drawable, const RenderStates& '
              'states = RenderStates::Default);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw primitives defined by an array of '
              'vertices\n'
              '    ///\n'
              '    /// \\param vertices    Pointer to the vertices\n'
              '    /// \\param vertexCount Number of vertices in the array\n'
              '    /// \\param type        Type of primitives to draw\n'
              '    /// \\param states      Render states to use for drawing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void draw(const Vertex* vertices, std::size_t vertexCount,\n'
              '              PrimitiveType type, const RenderStates& states = '
              'RenderStates::Default);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw primitives defined by a vertex buffer\n'
              '    ///\n'
              '    /// \\param vertexBuffer Vertex buffer\n'
              '    /// \\param states       Render states to use for drawing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void draw(const VertexBuffer& vertexBuffer, const '
              'RenderStates& states = RenderStates::Default);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw primitives defined by a vertex buffer\n'
              '    ///\n'
              '    /// \\param vertexBuffer Vertex buffer\n'
              '    /// \\param firstVertex  Index of the first vertex to '
              'render\n'
              '    /// \\param vertexCount  Number of vertices to render\n'
              '    /// \\param states       Render states to use for drawing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void draw(const VertexBuffer& vertexBuffer, std::size_t '
              'firstVertex, std::size_t vertexCount, const RenderStates& '
              'states = RenderStates::Default);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the size of the rendering region of the '
              'target\n'
              '    ///\n'
              '    /// \\return Size in pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Vector2u getSize() const = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Activate or deactivate the render target for '
              'rendering\n'
              '    ///\n'
              "    /// This function makes the render target's context current "
              'for\n'
              "    /// future OpenGL rendering operations (so you shouldn't "
              'care\n'
              "    /// about it if you're not doing direct OpenGL stuff).\n"
              "    /// A render target's context is active only on the current "
              'thread,\n'
              '    /// if you want to make it active on another thread you '
              'have\n'
              '    /// to deactivate it on the previous thread first if it was '
              'active.\n'
              '    /// Only one context can be current in a thread, so if you\n'
              '    /// want to draw OpenGL geometry to another render target\n'
              "    /// don't forget to activate it again. Activating a render\n"
              '    /// target will automatically deactivate the previously '
              'active\n'
              '    /// context (if any).\n'
              '    ///\n'
              '    /// \\param active True to activate, false to deactivate\n'
              '    ///\n'
              '    /// \\return True if operation was successful, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual bool setActive(bool active = true);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Save the current OpenGL render states and '
              'matrices\n'
              '    ///\n'
              '    /// This function can be used when you mix SFML drawing\n'
              '    /// and direct OpenGL rendering. Combined with '
              'popGLStates,\n'
              '    /// it ensures that:\n'
              "    /// \\li SFML's internal states are not messed up by your "
              'OpenGL code\n'
              '    /// \\li your OpenGL states are not modified by a call to a '
              'SFML function\n'
              '    ///\n'
              '    /// More specifically, it must be used around code that\n'
              '    /// calls Draw functions. Example:\n'
              '    /// \\code\n'
              '    /// // OpenGL code here...\n'
              '    /// window.pushGLStates();\n'
              '    /// window.draw(...);\n'
              '    /// window.draw(...);\n'
              '    /// window.popGLStates();\n'
              '    /// // OpenGL code here...\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// Note that this function is quite expensive: it saves '
              'all the\n'
              '    /// possible OpenGL states and matrices, even the ones you\n'
              "    /// don't care about. Therefore it should be used wisely.\n"
              '    /// It is provided for convenience, but the best results '
              'will\n'
              '    /// be achieved if you handle OpenGL states yourself '
              '(because\n'
              '    /// you know which states have really changed, and need to '
              'be\n'
              '    /// saved and restored). Take a look at the resetGLStates\n'
              '    /// function if you do so.\n'
              '    ///\n'
              '    /// \\see popGLStates\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void pushGLStates();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Restore the previously saved OpenGL render '
              'states and matrices\n'
              '    ///\n'
              '    /// See the description of pushGLStates to get a detailed\n'
              '    /// description of these functions.\n'
              '    ///\n'
              '    /// \\see pushGLStates\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void popGLStates();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Reset the internal OpenGL states so that the '
              'target is ready for drawing\n'
              '    ///\n'
              '    /// This function can be used when you mix SFML drawing\n'
              '    /// and direct OpenGL rendering, if you choose not to use\n'
              '    /// pushGLStates/popGLStates. It makes sure that all '
              'OpenGL\n'
              '    /// states needed by SFML are set, so that subsequent '
              'draw()\n'
              '    /// calls will work as expected.\n'
              '    ///\n'
              '    /// Example:\n'
              '    /// \\code\n'
              '    /// // OpenGL code here...\n'
              '    /// glPushAttrib(...);\n'
              '    /// window.resetGLStates();\n'
              '    /// window.draw(...);\n'
              '    /// window.draw(...);\n'
              '    /// glPopAttrib(...);\n'
              '    /// // OpenGL code here...\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void resetGLStates();\n'
              '\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    RenderTarget();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Performs the common initialization step after '
              'creation\n'
              '    ///\n'
              '    /// The derived classes must call this function after the\n'
              '    /// target is created and ready for drawing.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void initialize();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Apply the current view\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void applyCurrentView();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Apply a new blending mode\n'
              '    ///\n'
              '    /// \\param mode Blending mode to apply\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void applyBlendMode(const BlendMode& mode);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Apply a new transform\n'
              '    ///\n'
              '    /// \\param transform Transform to apply\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void applyTransform(const Transform& transform);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Apply a new texture\n'
              '    ///\n'
              '    /// \\param texture Texture to apply\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void applyTexture(const Texture* texture);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Apply a new shader\n'
              '    ///\n'
              '    /// \\param shader Shader to apply\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void applyShader(const Shader* shader);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Setup environment for drawing\n'
              '    ///\n'
              '    /// \\param useVertexCache Are we going to use the vertex '
              'cache?\n'
              '    /// \\param states         Render states to use for '
              'drawing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setupDraw(bool useVertexCache, const RenderStates& '
              'states);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw the primitives\n'
              '    ///\n'
              '    /// \\param type        Type of primitives to draw\n'
              '    /// \\param firstVertex Index of the first vertex to use '
              'when drawing\n'
              '    /// \\param vertexCount Number of vertices to use when '
              'drawing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void drawPrimitives(PrimitiveType type, std::size_t '
              'firstVertex, std::size_t vertexCount);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Clean up environment after drawing\n'
              '    ///\n'
              '    /// \\param states Render states used for drawing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void cleanupDraw(const RenderStates& states);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Render states cache\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct StatesCache\n'
              '    {\n'
              '        enum {VertexCacheSize = 4};\n'
              '\n'
              '        bool      enable;         ///< Is the cache enabled?\n'
              '        bool      glStatesSet;    ///< Are our internal GL '
              'states set yet?\n'
              '        bool      viewChanged;    ///< Has the current view '
              'changed since last draw?\n'
              '        BlendMode lastBlendMode;  ///< Cached blending mode\n'
              '        Uint64    lastTextureId;  ///< Cached texture\n'
              '        bool      texCoordsArrayEnabled; ///< Is '
              'GL_TEXTURE_COORD_ARRAY client state enabled?\n'
              '        bool      useVertexCache; ///< Did we previously use '
              'the vertex cache?\n'
              '        Vertex    vertexCache[VertexCacheSize]; ///< '
              'Pre-transformed vertices cache\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    View        m_defaultView; ///< Default view\n'
              '    View        m_view;        ///< Current view\n'
              '    StatesCache m_cache;       ///< Render states cache\n'
              '    Uint64      m_id;          ///< Unique number that '
              'identifies the RenderTarget\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000456',
         path='/Labirint Game/sfml/include/SFML/Graphics/RenderTexture.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/RenderTexture.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000457',
         path='/Labirint Game/sfml/include/SFML/Graphics/RenderTexture.hpp',
         lineno=37,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'namespace priv\n'
              '{\n'
              '    class RenderTextureImpl;\n'
              '}\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Target for off-screen 2D rendering into a texture\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API RenderTexture : public RenderTarget\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Constructs an empty, invalid render-texture. You must\n'
              '    /// call create to have a valid render-texture.\n'
              '    ///\n'
              '    /// \\see create\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    RenderTexture();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~RenderTexture();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create the render-texture\n'
              '    ///\n'
              '    /// Before calling this function, the render-texture is in\n'
              '    /// an invalid state, thus it is mandatory to call it '
              'before\n'
              '    /// doing anything with the render-texture.\n'
              '    /// The last parameter, \\a depthBuffer, is useful if you '
              'want\n'
              '    /// to use the render-texture for 3D OpenGL rendering that '
              'requires\n'
              '    /// a depth buffer. Otherwise it is unnecessary, and you '
              'should\n'
              '    /// leave this parameter to false (which is its default '
              'value).\n'
              '    ///\n'
              '    /// \\param width       Width of the render-texture\n'
              '    /// \\param height      Height of the render-texture\n'
              '    /// \\param depthBuffer Do you want this render-texture to '
              'have a depth buffer?\n'
              '    ///\n'
              '    /// \\return True if creation has been successful\n'
              '    ///\n'
              '    /// \\deprecated Use create(unsigned int, unsigned int, '
              'const ContextSettings&) instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED bool create(unsigned int width, unsigned '
              'int height, bool depthBuffer);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create the render-texture\n'
              '    ///\n'
              '    /// Before calling this function, the render-texture is in\n'
              '    /// an invalid state, thus it is mandatory to call it '
              'before\n'
              '    /// doing anything with the render-texture.\n'
              '    /// The last parameter, \\a settings, is useful if you want '
              'to enable\n'
              '    /// multi-sampling or use the render-texture for OpenGL '
              'rendering that\n'
              '    /// requires a depth or stencil buffer. Otherwise it is '
              'unnecessary, and\n'
              '    /// you should leave this parameter at its default value.\n'
              '    ///\n'
              '    /// \\param width    Width of the render-texture\n'
              '    /// \\param height   Height of the render-texture\n'
              '    /// \\param settings Additional settings for the underlying '
              'OpenGL texture and context\n'
              '    ///\n'
              '    /// \\return True if creation has been successful\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool create(unsigned int width, unsigned int height, const '
              'ContextSettings& settings = ContextSettings());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the maximum anti-aliasing level supported '
              'by the system\n'
              '    ///\n'
              '    /// \\return The maximum anti-aliasing level supported by '
              'the system\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static unsigned int getMaximumAntialiasingLevel();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enable or disable texture smoothing\n'
              '    ///\n'
              '    /// This function is similar to Texture::setSmooth.\n'
              '    /// This parameter is disabled by default.\n'
              '    ///\n'
              '    /// \\param smooth True to enable smoothing, false to '
              'disable it\n'
              '    ///\n'
              '    /// \\see isSmooth\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setSmooth(bool smooth);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether the smooth filtering is enabled or '
              'not\n'
              '    ///\n'
              '    /// \\return True if texture smoothing is enabled\n'
              '    ///\n'
              '    /// \\see setSmooth\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool isSmooth() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enable or disable texture repeating\n'
              '    ///\n'
              '    /// This function is similar to Texture::setRepeated.\n'
              '    /// This parameter is disabled by default.\n'
              '    ///\n'
              '    /// \\param repeated True to enable repeating, false to '
              'disable it\n'
              '    ///\n'
              '    /// \\see isRepeated\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setRepeated(bool repeated);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether the texture is repeated or not\n'
              '    ///\n'
              '    /// \\return True if texture is repeated\n'
              '    ///\n'
              '    /// \\see setRepeated\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool isRepeated() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Generate a mipmap using the current texture '
              'data\n'
              '    ///\n'
              '    /// This function is similar to Texture::generateMipmap and '
              'operates\n'
              '    /// on the texture used as the target for drawing.\n'
              '    /// Be aware that any draw operation may modify the base '
              'level image data.\n'
              '    /// For this reason, calling this function only makes sense '
              'after all\n'
              '    /// drawing is completed and display has been called. Not '
              'calling display\n'
              '    /// after subsequent drawing will lead to undefined '
              'behavior if a mipmap\n'
              '    /// had been previously generated.\n'
              '    ///\n'
              '    /// \\return True if mipmap generation was successful, '
              'false if unsuccessful\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool generateMipmap();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Activate or deactivate the render-texture for '
              'rendering\n'
              '    ///\n'
              "    /// This function makes the render-texture's context "
              'current for\n'
              "    /// future OpenGL rendering operations (so you shouldn't "
              'care\n'
              "    /// about it if you're not doing direct OpenGL stuff).\n"
              '    /// Only one context can be current in a thread, so if you\n'
              '    /// want to draw OpenGL geometry to another render target\n'
              "    /// (like a RenderWindow) don't forget to activate it "
              'again.\n'
              '    ///\n'
              '    /// \\param active True to activate, false to deactivate\n'
              '    ///\n'
              '    /// \\return True if operation was successful, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool setActive(bool active = true);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update the contents of the target texture\n'
              '    ///\n'
              '    /// This function updates the target texture with what\n'
              '    /// has been drawn so far. Like for windows, calling this\n'
              '    /// function is mandatory at the end of rendering. Not '
              'calling\n'
              '    /// it may leave the texture in an undefined state.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void display();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the size of the rendering region of the '
              'texture\n'
              '    ///\n'
              '    /// The returned value is the size that you passed to\n'
              '    /// the create function.\n'
              '    ///\n'
              '    /// \\return Size in pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Vector2u getSize() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a read-only reference to the target '
              'texture\n'
              '    ///\n'
              '    /// After drawing to the render-texture and calling '
              'Display,\n'
              '    /// you can retrieve the updated texture using this '
              'function,\n'
              '    /// and draw it using a sprite (for example).\n'
              '    /// The internal sf::Texture of a render-texture is always '
              'the\n'
              '    /// same instance, so that it is possible to call this '
              'function\n'
              '    /// once and keep a reference to the texture even after it '
              'is\n'
              '    /// modified.\n'
              '    ///\n'
              '    /// \\return Const reference to the texture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Texture& getTexture() const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    priv::RenderTextureImpl* m_impl;    ///< Platform/hardware '
              'specific implementation\n'
              '    Texture                  m_texture; ///< Target texture to '
              'draw on\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000458',
         path='/Labirint Game/sfml/include/SFML/Graphics/RenderWindow.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/RenderWindow.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000459',
         path='/Labirint Game/sfml/include/SFML/Graphics/RenderWindow.hpp',
         lineno=38,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Window that can serve as a target for 2D drawing\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API RenderWindow : public Window, public '
              'RenderTarget\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              "    /// This constructor doesn't actually create the window,\n"
              '    /// use the other constructors or call create() to do so.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    RenderWindow();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a new window\n'
              '    ///\n'
              '    /// This constructor creates the window with the size and '
              'pixel\n'
              '    /// depth defined in \\a mode. An optional style can be '
              'passed to\n'
              '    /// customize the look and behavior of the window '
              '(borders,\n'
              '    /// title bar, resizable, closable, ...).\n'
              '    ///\n'
              '    /// The fourth parameter is an optional structure '
              'specifying\n'
              '    /// advanced OpenGL context settings such as antialiasing,\n'
              "    /// depth-buffer bits, etc. You shouldn't care about these\n"
              '    /// parameters for a regular usage of the graphics module.\n'
              '    ///\n'
              '    /// \\param mode     Video mode to use (defines the width, '
              'height and depth of the rendering area of the window)\n'
              '    /// \\param title    Title of the window\n'
              '    /// \\param style    %Window style, a bitwise OR '
              'combination of sf::Style enumerators\n'
              '    /// \\param settings Additional settings for the underlying '
              'OpenGL context\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    RenderWindow(VideoMode mode, const String& title, Uint32 '
              'style = Style::Default, const ContextSettings& settings = '
              'ContextSettings());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the window from an existing control\n'
              '    ///\n'
              '    /// Use this constructor if you want to create an SFML\n'
              '    /// rendering area into an already existing control.\n'
              '    ///\n'
              '    /// The second parameter is an optional structure '
              'specifying\n'
              '    /// advanced OpenGL context settings such as antialiasing,\n'
              "    /// depth-buffer bits, etc. You shouldn't care about these\n"
              '    /// parameters for a regular usage of the graphics module.\n'
              '    ///\n'
              '    /// \\param handle   Platform-specific handle of the '
              'control (\\a HWND on\n'
              '    ///                 Windows, \\a %Window on Linux/FreeBSD, '
              '\\a NSWindow on OS X)\n'
              '    /// \\param settings Additional settings for the underlying '
              'OpenGL context\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit RenderWindow(WindowHandle handle, const '
              'ContextSettings& settings = ContextSettings());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    /// Closes the window and frees all the resources attached '
              'to it.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~RenderWindow();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the size of the rendering region of the '
              'window\n'
              '    ///\n'
              "    /// The size doesn't include the titlebar and borders\n"
              '    /// of the window.\n'
              '    ///\n'
              '    /// \\return Size in pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Vector2u getSize() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Activate or deactivate the window as the '
              'current target\n'
              '    ///        for OpenGL rendering\n'
              '    ///\n'
              '    /// A window is active only on the current thread, if you '
              'want to\n'
              '    /// make it active on another thread you have to deactivate '
              'it\n'
              '    /// on the previous thread first if it was active.\n'
              '    /// Only one window can be active on a thread at a time, '
              'thus\n'
              '    /// the window previously active (if any) automatically '
              'gets deactivated.\n'
              '    /// This is not to be confused with requestFocus().\n'
              '    ///\n'
              '    /// \\param active True to activate, false to deactivate\n'
              '    ///\n'
              '    /// \\return True if operation was successful, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool setActive(bool active = true);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy the current contents of the window to an '
              'image\n'
              '    ///\n'
              '    /// \\deprecated\n'
              '    /// Use a sf::Texture and its sf::Texture::update(const '
              'Window&)\n'
              '    /// function and copy its contents into an sf::Image '
              'instead.\n'
              '    /// \\code\n'
              '    /// sf::Vector2u windowSize = window.getSize();\n'
              '    /// sf::Texture texture;\n'
              '    /// texture.create(windowSize.x, windowSize.y);\n'
              '    /// texture.update(window);\n'
              '    /// sf::Image screenshot = texture.copyToImage();\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// This is a slow operation, whose main purpose is to '
              'make\n'
              '    /// screenshots of the application. If you want to update '
              'an\n'
              '    /// image with the contents of the window and then use it '
              'for\n'
              '    /// drawing, you should rather use a sf::Texture and its\n'
              '    /// update(Window&) function.\n'
              '    /// You can also draw things directly to a texture with '
              'the\n'
              '    /// sf::RenderTexture class.\n'
              '    ///\n'
              '    /// \\return Image containing the captured contents\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED Image capture() const;\n'
              '\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Function called after the window has been '
              'created\n'
              '    ///\n'
              '    /// This function is called so that derived classes can\n'
              '    /// perform their own specific initialization as soon as\n'
              '    /// the window is created.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void onCreate();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Function called after the window has been '
              'resized\n'
              '    ///\n'
              '    /// This function is called so that derived classes can\n'
              '    /// perform custom actions when the size of the window '
              'changes.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void onResize();\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000460',
         path='/Labirint Game/sfml/include/SFML/Graphics/Shader.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Shader.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000461',
         path='/Labirint Game/sfml/include/SFML/Graphics/Shader.hpp',
         lineno=41,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class Color;\n'
              'class InputStream;\n'
              'class Texture;\n'
              'class Transform;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Shader class (vertex, geometry and fragment)\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Shader : GlResource, NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Types of shaders\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Type\n'
              '    {\n'
              '        Vertex,   ///< %Vertex shader\n'
              '        Geometry, ///< Geometry shader\n'
              '        Fragment  ///< Fragment (pixel) shader\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Special type that can be passed to '
              'setUniform(),\n'
              '    ///        and that represents the texture of the object '
              'being drawn\n'
              '    ///\n'
              '    /// \\see setUniform(const std::string&, '
              'CurrentTextureType)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct CurrentTextureType {};\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Represents the texture of the object being '
              'drawn\n'
              '    ///\n'
              '    /// \\see setUniform(const std::string&, '
              'CurrentTextureType)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static CurrentTextureType CurrentTexture;\n'
              '\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// This constructor creates an invalid shader.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Shader();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Shader();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the vertex, geometry or fragment shader '
              'from a file\n'
              '    ///\n'
              '    /// This function loads a single shader, vertex, geometry '
              'or\n'
              '    /// fragment, identified by the second argument.\n'
              '    /// The source must be a text file containing a valid\n'
              '    /// shader in GLSL language. GLSL is a C-like language\n'
              "    /// dedicated to OpenGL shaders; you'll probably need to\n"
              '    /// read a good documentation for it before writing your\n'
              '    /// own shaders.\n'
              '    ///\n'
              '    /// \\param filename Path of the vertex, geometry or '
              'fragment shader file to load\n'
              '    /// \\param type     Type of shader (vertex, geometry or '
              'fragment)\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromMemory, loadFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromFile(const std::string& filename, Type type);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load both the vertex and fragment shaders from '
              'files\n'
              '    ///\n'
              '    /// This function loads both the vertex and the fragment\n'
              '    /// shaders. If one of them fails to load, the shader is '
              'left\n'
              '    /// empty (the valid shader is unloaded).\n'
              '    /// The sources must be text files containing valid '
              'shaders\n'
              '    /// in GLSL language. GLSL is a C-like language dedicated '
              'to\n'
              "    /// OpenGL shaders; you'll probably need to read a good "
              'documentation\n'
              '    /// for it before writing your own shaders.\n'
              '    ///\n'
              '    /// \\param vertexShaderFilename   Path of the vertex '
              'shader file to load\n'
              '    /// \\param fragmentShaderFilename Path of the fragment '
              'shader file to load\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromMemory, loadFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromFile(const std::string& vertexShaderFilename, '
              'const std::string& fragmentShaderFilename);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the vertex, geometry and fragment shaders '
              'from files\n'
              '    ///\n'
              '    /// This function loads the vertex, geometry and fragment\n'
              '    /// shaders. If one of them fails to load, the shader is '
              'left\n'
              '    /// empty (the valid shader is unloaded).\n'
              '    /// The sources must be text files containing valid '
              'shaders\n'
              '    /// in GLSL language. GLSL is a C-like language dedicated '
              'to\n'
              "    /// OpenGL shaders; you'll probably need to read a good "
              'documentation\n'
              '    /// for it before writing your own shaders.\n'
              '    ///\n'
              '    /// \\param vertexShaderFilename   Path of the vertex '
              'shader file to load\n'
              '    /// \\param geometryShaderFilename Path of the geometry '
              'shader file to load\n'
              '    /// \\param fragmentShaderFilename Path of the fragment '
              'shader file to load\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromMemory, loadFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromFile(const std::string& vertexShaderFilename, '
              'const std::string& geometryShaderFilename, const std::string& '
              'fragmentShaderFilename);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the vertex, geometry or fragment shader '
              'from a source code in memory\n'
              '    ///\n'
              '    /// This function loads a single shader, vertex, geometry\n'
              '    /// or fragment, identified by the second argument.\n'
              '    /// The source code must be a valid shader in GLSL '
              'language.\n'
              '    /// GLSL is a C-like language dedicated to OpenGL shaders;\n'
              "    /// you'll probably need to read a good documentation for\n"
              '    /// it before writing your own shaders.\n'
              '    ///\n'
              '    /// \\param shader String containing the source code of the '
              'shader\n'
              '    /// \\param type   Type of shader (vertex, geometry or '
              'fragment)\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromMemory(const std::string& shader, Type type);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load both the vertex and fragment shaders from '
              'source codes in memory\n'
              '    ///\n'
              '    /// This function loads both the vertex and the fragment\n'
              '    /// shaders. If one of them fails to load, the shader is '
              'left\n'
              '    /// empty (the valid shader is unloaded).\n'
              '    /// The sources must be valid shaders in GLSL language. '
              'GLSL is\n'
              "    /// a C-like language dedicated to OpenGL shaders; you'll\n"
              '    /// probably need to read a good documentation for it '
              'before\n'
              '    /// writing your own shaders.\n'
              '    ///\n'
              '    /// \\param vertexShader   String containing the source '
              'code of the vertex shader\n'
              '    /// \\param fragmentShader String containing the source '
              'code of the fragment shader\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromMemory(const std::string& vertexShader, const '
              'std::string& fragmentShader);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the vertex, geometry and fragment shaders '
              'from source codes in memory\n'
              '    ///\n'
              '    /// This function loads the vertex, geometry and fragment\n'
              '    /// shaders. If one of them fails to load, the shader is '
              'left\n'
              '    /// empty (the valid shader is unloaded).\n'
              '    /// The sources must be valid shaders in GLSL language. '
              'GLSL is\n'
              "    /// a C-like language dedicated to OpenGL shaders; you'll\n"
              '    /// probably need to read a good documentation for it '
              'before\n'
              '    /// writing your own shaders.\n'
              '    ///\n'
              '    /// \\param vertexShader   String containing the source '
              'code of the vertex shader\n'
              '    /// \\param geometryShader String containing the source '
              'code of the geometry shader\n'
              '    /// \\param fragmentShader String containing the source '
              'code of the fragment shader\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromStream\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromMemory(const std::string& vertexShader, const '
              'std::string& geometryShader, const std::string& '
              'fragmentShader);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the vertex, geometry or fragment shader '
              'from a custom stream\n'
              '    ///\n'
              '    /// This function loads a single shader, vertex, geometry\n'
              '    /// or fragment, identified by the second argument.\n'
              '    /// The source code must be a valid shader in GLSL '
              'language.\n'
              '    /// GLSL is a C-like language dedicated to OpenGL shaders;\n'
              "    /// you'll probably need to read a good documentation for "
              'it\n'
              '    /// before writing your own shaders.\n'
              '    ///\n'
              '    /// \\param stream Source stream to read from\n'
              '    /// \\param type   Type of shader (vertex, geometry or '
              'fragment)\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromMemory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromStream(InputStream& stream, Type type);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load both the vertex and fragment shaders from '
              'custom streams\n'
              '    ///\n'
              '    /// This function loads both the vertex and the fragment\n'
              '    /// shaders. If one of them fails to load, the shader is '
              'left\n'
              '    /// empty (the valid shader is unloaded).\n'
              '    /// The source codes must be valid shaders in GLSL '
              'language.\n'
              '    /// GLSL is a C-like language dedicated to OpenGL shaders;\n'
              "    /// you'll probably need to read a good documentation for\n"
              '    /// it before writing your own shaders.\n'
              '    ///\n'
              '    /// \\param vertexShaderStream   Source stream to read the '
              'vertex shader from\n'
              '    /// \\param fragmentShaderStream Source stream to read the '
              'fragment shader from\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromMemory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromStream(InputStream& vertexShaderStream, '
              'InputStream& fragmentShaderStream);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the vertex, geometry and fragment shaders '
              'from custom streams\n'
              '    ///\n'
              '    /// This function loads the vertex, geometry and fragment\n'
              '    /// shaders. If one of them fails to load, the shader is '
              'left\n'
              '    /// empty (the valid shader is unloaded).\n'
              '    /// The source codes must be valid shaders in GLSL '
              'language.\n'
              '    /// GLSL is a C-like language dedicated to OpenGL shaders;\n'
              "    /// you'll probably need to read a good documentation for\n"
              '    /// it before writing your own shaders.\n'
              '    ///\n'
              '    /// \\param vertexShaderStream   Source stream to read the '
              'vertex shader from\n'
              '    /// \\param geometryShaderStream Source stream to read the '
              'geometry shader from\n'
              '    /// \\param fragmentShaderStream Source stream to read the '
              'fragment shader from\n'
              '    ///\n'
              '    /// \\return True if loading succeeded, false if it failed\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromMemory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromStream(InputStream& vertexShaderStream, '
              'InputStream& geometryShaderStream, InputStream& '
              'fragmentShaderStream);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p float uniform\n'
              '    ///\n'
              '    /// \\param name Name of the uniform variable in GLSL\n'
              '    /// \\param x    Value of the float scalar\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, float x);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p vec2 uniform\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param vector Value of the vec2 vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Vec2& '
              'vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p vec3 uniform\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param vector Value of the vec3 vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Vec3& '
              'vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p vec4 uniform\n'
              '    ///\n'
              '    /// This overload can also be called with sf::Color '
              'objects\n'
              '    /// that are converted to sf::Glsl::Vec4.\n'
              '    ///\n'
              '    /// It is important to note that the components of the '
              'color are\n'
              '    /// normalized before being passed to the shader. '
              'Therefore,\n'
              '    /// they are converted from range [0 .. 255] to range [0 .. '
              '1].\n'
              '    /// For example, a sf::Color(255, 127, 0, 255) will be '
              'transformed\n'
              '    /// to a vec4(1.0, 0.5, 0.0, 1.0) in the shader.\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param vector Value of the vec4 vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Vec4& '
              'vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p int uniform\n'
              '    ///\n'
              '    /// \\param name Name of the uniform variable in GLSL\n'
              '    /// \\param x    Value of the int scalar\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, int x);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p ivec2 uniform\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param vector Value of the ivec2 vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Ivec2& '
              'vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p ivec3 uniform\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param vector Value of the ivec3 vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Ivec3& '
              'vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p ivec4 uniform\n'
              '    ///\n'
              '    /// This overload can also be called with sf::Color '
              'objects\n'
              '    /// that are converted to sf::Glsl::Ivec4.\n'
              '    ///\n'
              '    /// If color conversions are used, the ivec4 uniform in '
              'GLSL\n'
              '    /// will hold the same values as the original sf::Color\n'
              '    /// instance. For example, sf::Color(255, 127, 0, 255) is\n'
              '    /// mapped to ivec4(255, 127, 0, 255).\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param vector Value of the ivec4 vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Ivec4& '
              'vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p bool uniform\n'
              '    ///\n'
              '    /// \\param name Name of the uniform variable in GLSL\n'
              '    /// \\param x    Value of the bool scalar\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, bool x);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p bvec2 uniform\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param vector Value of the bvec2 vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Bvec2& '
              'vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p bvec3 uniform\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param vector Value of the bvec3 vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Bvec3& '
              'vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p bvec4 uniform\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param vector Value of the bvec4 vector\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Bvec4& '
              'vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p mat3 matrix\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param matrix Value of the mat3 matrix\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Mat3& '
              'matrix);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify value for \\p mat4 matrix\n'
              '    ///\n'
              '    /// \\param name   Name of the uniform variable in GLSL\n'
              '    /// \\param matrix Value of the mat4 matrix\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Glsl::Mat4& '
              'matrix);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify a texture as \\p sampler2D uniform\n'
              '    ///\n'
              '    /// \\a name is the name of the variable to change in the '
              'shader.\n'
              '    /// The corresponding parameter in the shader must be a 2D '
              'texture\n'
              '    /// (\\p sampler2D GLSL type).\n'
              '    ///\n'
              '    /// Example:\n'
              '    /// \\code\n'
              '    /// uniform sampler2D the_texture; // this is the variable '
              'in the shader\n'
              '    /// \\endcode\n'
              '    /// \\code\n'
              '    /// sf::Texture texture;\n'
              '    /// ...\n'
              '    /// shader.setUniform("the_texture", texture);\n'
              '    /// \\endcode\n'
              '    /// It is important to note that \\a texture must remain '
              'alive as long\n'
              '    /// as the shader uses it, no copy is made internally.\n'
              '    ///\n'
              '    /// To use the texture of the object being drawn, which '
              'cannot be\n'
              '    /// known in advance, you can pass the special value\n'
              '    /// sf::Shader::CurrentTexture:\n'
              '    /// \\code\n'
              '    /// shader.setUniform("the_texture", '
              'sf::Shader::CurrentTexture).\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param name    Name of the texture in the shader\n'
              '    /// \\param texture Texture to assign\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, const Texture& '
              'texture);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify current texture as \\p sampler2D '
              'uniform\n'
              '    ///\n'
              '    /// This overload maps a shader texture variable to the\n'
              '    /// texture of the object being drawn, which cannot be\n'
              '    /// known in advance. The second argument must be\n'
              '    /// sf::Shader::CurrentTexture.\n'
              '    /// The corresponding parameter in the shader must be a 2D '
              'texture\n'
              '    /// (\\p sampler2D GLSL type).\n'
              '    ///\n'
              '    /// Example:\n'
              '    /// \\code\n'
              '    /// uniform sampler2D current; // this is the variable in '
              'the shader\n'
              '    /// \\endcode\n'
              '    /// \\code\n'
              '    /// shader.setUniform("current", '
              'sf::Shader::CurrentTexture);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param name Name of the texture in the shader\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniform(const std::string& name, '
              'CurrentTextureType);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify values for \\p float[] array uniform\n'
              '    ///\n'
              '    /// \\param name        Name of the uniform variable in '
              'GLSL\n'
              '    /// \\param scalarArray pointer to array of \\p float '
              'values\n'
              '    /// \\param length      Number of elements in the array\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniformArray(const std::string& name, const float* '
              'scalarArray, std::size_t length);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify values for \\p vec2[] array uniform\n'
              '    ///\n'
              '    /// \\param name        Name of the uniform variable in '
              'GLSL\n'
              '    /// \\param vectorArray pointer to array of \\p vec2 '
              'values\n'
              '    /// \\param length      Number of elements in the array\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniformArray(const std::string& name, const '
              'Glsl::Vec2* vectorArray, std::size_t length);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify values for \\p vec3[] array uniform\n'
              '    ///\n'
              '    /// \\param name        Name of the uniform variable in '
              'GLSL\n'
              '    /// \\param vectorArray pointer to array of \\p vec3 '
              'values\n'
              '    /// \\param length      Number of elements in the array\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniformArray(const std::string& name, const '
              'Glsl::Vec3* vectorArray, std::size_t length);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify values for \\p vec4[] array uniform\n'
              '    ///\n'
              '    /// \\param name        Name of the uniform variable in '
              'GLSL\n'
              '    /// \\param vectorArray pointer to array of \\p vec4 '
              'values\n'
              '    /// \\param length      Number of elements in the array\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniformArray(const std::string& name, const '
              'Glsl::Vec4* vectorArray, std::size_t length);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify values for \\p mat3[] array uniform\n'
              '    ///\n'
              '    /// \\param name        Name of the uniform variable in '
              'GLSL\n'
              '    /// \\param matrixArray pointer to array of \\p mat3 '
              'values\n'
              '    /// \\param length      Number of elements in the array\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniformArray(const std::string& name, const '
              'Glsl::Mat3* matrixArray, std::size_t length);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specify values for \\p mat4[] array uniform\n'
              '    ///\n'
              '    /// \\param name        Name of the uniform variable in '
              'GLSL\n'
              '    /// \\param matrixArray pointer to array of \\p mat4 '
              'values\n'
              '    /// \\param length      Number of elements in the array\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUniformArray(const std::string& name, const '
              'Glsl::Mat4* matrixArray, std::size_t length);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change a float parameter of the shader\n'
              '    ///\n'
              '    /// \\deprecated Use setUniform(const std::string&, float) '
              'instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setParameter(const std::string& name, '
              'float x);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change a 2-components vector parameter of the '
              'shader\n'
              '    ///\n'
              '    /// \\deprecated Use setUniform(const std::string&, const '
              'Glsl::Vec2&) instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setParameter(const std::string& name, '
              'float x, float y);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change a 3-components vector parameter of the '
              'shader\n'
              '    ///\n'
              '    /// \\deprecated Use setUniform(const std::string&, const '
              'Glsl::Vec3&) instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setParameter(const std::string& name, '
              'float x, float y, float z);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change a 4-components vector parameter of the '
              'shader\n'
              '    ///\n'
              '    /// \\deprecated Use setUniform(const std::string&, const '
              'Glsl::Vec4&) instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setParameter(const std::string& name, '
              'float x, float y, float z, float w);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change a 2-components vector parameter of the '
              'shader\n'
              '    ///\n'
              '    /// \\deprecated Use setUniform(const std::string&, const '
              'Glsl::Vec2&) instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setParameter(const std::string& name, '
              'const Vector2f& vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change a 3-components vector parameter of the '
              'shader\n'
              '    ///\n'
              '    /// \\deprecated Use setUniform(const std::string&, const '
              'Glsl::Vec3&) instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setParameter(const std::string& name, '
              'const Vector3f& vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change a color parameter of the shader\n'
              '    ///\n'
              '    /// \\deprecated Use setUniform(const std::string&, const '
              'Glsl::Vec4&) instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setParameter(const std::string& name, '
              'const Color& color);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change a matrix parameter of the shader\n'
              '    ///\n'
              '    /// \\deprecated Use setUniform(const std::string&, const '
              'Glsl::Mat4&) instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setParameter(const std::string& name, '
              'const Transform& transform);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change a texture parameter of the shader\n'
              '    ///\n'
              '    /// \\deprecated Use setUniform(const std::string&, const '
              'Texture&) instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setParameter(const std::string& name, '
              'const Texture& texture);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change a texture parameter of the shader\n'
              '    ///\n'
              '    /// \\deprecated Use setUniform(const std::string&, '
              'CurrentTextureType) instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setParameter(const std::string& name, '
              'CurrentTextureType);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the underlying OpenGL handle of the '
              'shader.\n'
              '    ///\n'
              "    /// You shouldn't need to use this function, unless you "
              'have\n'
              "    /// very specific stuff to implement that SFML doesn't "
              'support,\n'
              '    /// or implement a temporary workaround until a bug is '
              'fixed.\n'
              '    ///\n'
              '    /// \\return OpenGL handle of the shader or 0 if not yet '
              'loaded\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getNativeHandle() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Bind a shader for rendering\n'
              '    ///\n'
              '    /// This function is not part of the graphics API, it '
              "mustn't be\n"
              '    /// used when drawing SFML entities. It must be used only '
              'if you\n'
              '    /// mix sf::Shader with OpenGL code.\n'
              '    ///\n'
              '    /// \\code\n'
              '    /// sf::Shader s1, s2;\n'
              '    /// ...\n'
              '    /// sf::Shader::bind(&s1);\n'
              '    /// // draw OpenGL stuff that use s1...\n'
              '    /// sf::Shader::bind(&s2);\n'
              '    /// // draw OpenGL stuff that use s2...\n'
              '    /// sf::Shader::bind(NULL);\n'
              '    /// // draw OpenGL stuff that use no shader...\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param shader Shader to bind, can be null to use no '
              'shader\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void bind(const Shader* shader);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether or not the system supports '
              'shaders\n'
              '    ///\n'
              '    /// This function should always be called before using\n'
              '    /// the shader features. If it returns false, then\n'
              '    /// any attempt to use sf::Shader will fail.\n'
              '    ///\n'
              '    /// \\return True if shaders are supported, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isAvailable();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether or not the system supports '
              'geometry shaders\n'
              '    ///\n'
              '    /// This function should always be called before using\n'
              '    /// the geometry shader features. If it returns false, '
              'then\n'
              '    /// any attempt to use sf::Shader geometry shader features '
              'will fail.\n'
              '    ///\n'
              '    /// This function can only return true if isAvailable() '
              'would also\n'
              '    /// return true, since shaders in general have to be '
              'supported in\n'
              '    /// order for geometry shaders to be supported as well.\n'
              '    ///\n'
              '    /// Note: The first call to this function, whether by your\n'
              '    /// code or SFML will result in a context switch.\n'
              '    ///\n'
              '    /// \\return True if geometry shaders are supported, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isGeometryAvailable();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Compile the shader(s) and create the program\n'
              '    ///\n'
              '    /// If one of the arguments is NULL, the corresponding '
              'shader\n'
              '    /// is not created.\n'
              '    ///\n'
              '    /// \\param vertexShaderCode   Source code of the vertex '
              'shader\n'
              '    /// \\param geometryShaderCode Source code of the geometry '
              'shader\n'
              '    /// \\param fragmentShaderCode Source code of the fragment '
              'shader\n'
              '    ///\n'
              '    /// \\return True on success, false if any error happened\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool compile(const char* vertexShaderCode, const char* '
              'geometryShaderCode, const char* fragmentShaderCode);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Bind all the textures used by the shader\n'
              '    ///\n'
              '    /// This function each texture to a different unit, and\n'
              '    /// updates the corresponding variables in the shader '
              'accordingly.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void bindTextures() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the location ID of a shader uniform\n'
              '    ///\n'
              '    /// \\param name Name of the uniform variable to search\n'
              '    ///\n'
              '    /// \\return Location ID of the uniform, or -1 if not '
              'found\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    int getUniformLocation(const std::string& name);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief RAII object to save and restore the program\n'
              '    ///        binding while uniforms are being set\n'
              '    ///\n'
              '    /// Implementation is private in the .cpp file.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct UniformBinder;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Types\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    typedef std::map<int, const Texture*> TextureTable;\n'
              '    typedef std::map<std::string, int> UniformTable;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int m_shaderProgram;  ///< OpenGL identifier for '
              'the program\n'
              '    int          m_currentTexture; ///< Location of the current '
              'texture in the shader\n'
              '    TextureTable m_textures;       ///< Texture variables in '
              'the shader, mapped to their location\n'
              '    UniformTable m_uniforms;       ///< Parameters location '
              'cache\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000462',
         path='/Labirint Game/sfml/include/SFML/Graphics/Shape.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Shape.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000463',
         path='/Labirint Game/sfml/include/SFML/Graphics/Shape.hpp',
         lineno=38,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Base class for textured shapes with outline\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Shape : public Drawable, public '
              'Transformable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Virtual destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~Shape();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the source texture of the shape\n'
              '    ///\n'
              '    /// The \\a texture argument refers to a texture that must\n'
              '    /// exist as long as the shape uses it. Indeed, the shape\n'
              "    /// doesn't store its own copy of the texture, but rather "
              'keeps\n'
              '    /// a pointer to the one that you passed to this function.\n'
              '    /// If the source texture is destroyed and the shape tries '
              'to\n'
              '    /// use it, the behavior is undefined.\n'
              '    /// \\a texture can be NULL to disable texturing.\n'
              '    /// If \\a resetRect is true, the TextureRect property of\n'
              '    /// the shape is automatically adjusted to the size of the '
              'new\n'
              '    /// texture. If it is false, the texture rect is left '
              'unchanged.\n'
              '    ///\n'
              '    /// \\param texture   New texture\n'
              '    /// \\param resetRect Should the texture rect be reset to '
              'the size of the new texture?\n'
              '    ///\n'
              '    /// \\see getTexture, setTextureRect\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setTexture(const Texture* texture, bool resetRect = '
              'false);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the sub-rectangle of the texture that the '
              'shape will display\n'
              '    ///\n'
              "    /// The texture rect is useful when you don't want to "
              'display\n'
              '    /// the whole texture, but rather a part of it.\n'
              '    /// By default, the texture rect covers the entire '
              'texture.\n'
              '    ///\n'
              '    /// \\param rect Rectangle defining the region of the '
              'texture to display\n'
              '    ///\n'
              '    /// \\see getTextureRect, setTexture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setTextureRect(const IntRect& rect);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the fill color of the shape\n'
              '    ///\n'
              "    /// This color is modulated (multiplied) with the shape's\n"
              '    /// texture if any. It can be used to colorize the shape,\n'
              '    /// or change its global opacity.\n'
              '    /// You can use sf::Color::Transparent to make the inside '
              'of\n'
              '    /// the shape transparent, and have the outline alone.\n'
              "    /// By default, the shape's fill color is opaque white.\n"
              '    ///\n'
              '    /// \\param color New color of the shape\n'
              '    ///\n'
              '    /// \\see getFillColor, setOutlineColor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setFillColor(const Color& color);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the outline color of the shape\n'
              '    ///\n'
              "    /// By default, the shape's outline color is opaque white.\n"
              '    ///\n'
              '    /// \\param color New outline color of the shape\n'
              '    ///\n'
              '    /// \\see getOutlineColor, setFillColor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setOutlineColor(const Color& color);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Set the thickness of the shape's outline\n"
              '    ///\n'
              '    /// Note that negative values are allowed (so that the '
              'outline\n'
              '    /// expands towards the center of the shape), and using '
              'zero\n'
              '    /// disables the outline.\n'
              '    /// By default, the outline thickness is 0.\n'
              '    ///\n'
              '    /// \\param thickness New outline thickness\n'
              '    ///\n'
              '    /// \\see getOutlineThickness\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setOutlineThickness(float thickness);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the source texture of the shape\n'
              '    ///\n'
              '    /// If the shape has no source texture, a NULL pointer is '
              'returned.\n'
              '    /// The returned pointer is const, which means that you '
              "can't\n"
              '    /// modify the texture when you retrieve it with this '
              'function.\n'
              '    ///\n'
              "    /// \\return Pointer to the shape's texture\n"
              '    ///\n'
              '    /// \\see setTexture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Texture* getTexture() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the sub-rectangle of the texture displayed '
              'by the shape\n'
              '    ///\n'
              '    /// \\return Texture rectangle of the shape\n'
              '    ///\n'
              '    /// \\see setTextureRect\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const IntRect& getTextureRect() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the fill color of the shape\n'
              '    ///\n'
              '    /// \\return Fill color of the shape\n'
              '    ///\n'
              '    /// \\see setFillColor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Color& getFillColor() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the outline color of the shape\n'
              '    ///\n'
              '    /// \\return Outline color of the shape\n'
              '    ///\n'
              '    /// \\see setOutlineColor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Color& getOutlineColor() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the outline thickness of the shape\n'
              '    ///\n'
              '    /// \\return Outline thickness of the shape\n'
              '    ///\n'
              '    /// \\see setOutlineThickness\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getOutlineThickness() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the total number of points of the shape\n'
              '    ///\n'
              '    /// \\return Number of points of the shape\n'
              '    ///\n'
              '    /// \\see getPoint\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual std::size_t getPointCount() const = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a point of the shape\n'
              '    ///\n'
              '    /// The returned point is in local coordinates, that is,\n'
              "    /// the shape's transforms (position, rotation, scale) are\n"
              '    /// not taken into account.\n'
              '    /// The result is undefined if \\a index is out of the '
              'valid range.\n'
              '    ///\n'
              '    /// \\param index Index of the point to get, in range [0 .. '
              'getPointCount() - 1]\n'
              '    ///\n'
              '    /// \\return index-th point of the shape\n'
              '    ///\n'
              '    /// \\see getPointCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Vector2f getPoint(std::size_t index) const = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the local bounding rectangle of the entity\n'
              '    ///\n'
              '    /// The returned rectangle is in local coordinates, which '
              'means\n'
              '    /// that it ignores the transformations (translation, '
              'rotation,\n'
              '    /// scale, ...) that are applied to the entity.\n'
              '    /// In other words, this function returns the bounds of '
              'the\n'
              "    /// entity in the entity's coordinate system.\n"
              '    ///\n'
              '    /// \\return Local bounding rectangle of the entity\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    FloatRect getLocalBounds() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the global (non-minimal) bounding rectangle '
              'of the entity\n'
              '    ///\n'
              '    /// The returned rectangle is in global coordinates, which '
              'means\n'
              '    /// that it takes into account the transformations '
              '(translation,\n'
              '    /// rotation, scale, ...) that are applied to the entity.\n'
              '    /// In other words, this function returns the bounds of '
              'the\n'
              "    /// shape in the global 2D world's coordinate system.\n"
              '    ///\n'
              '    /// This function does not necessarily return the \\a '
              'minimal\n'
              '    /// bounding rectangle. It merely ensures that the '
              'returned\n'
              '    /// rectangle covers all the vertices (but possibly more).\n'
              '    /// This allows for a fast approximation of the bounds as '
              'a\n'
              '    /// first check; you may want to use more precise checks\n'
              '    /// on top of that.\n'
              '    ///\n'
              '    /// \\return Global bounding rectangle of the entity\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    FloatRect getGlobalBounds() const;\n'
              '\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Shape();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Recompute the internal geometry of the shape\n'
              '    ///\n'
              '    /// This function must be called by the derived class '
              'everytime\n'
              "    /// the shape's points change (i.e. the result of either\n"
              '    /// getPointCount or getPoint is different).\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void update();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw the shape to a render target\n'
              '    ///\n'
              '    /// \\param target Render target to draw to\n'
              '    /// \\param states Current render states\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void draw(RenderTarget& target, RenderStates '
              'states) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Update the fill vertices' color\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void updateFillColors();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Update the fill vertices' texture coordinates\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void updateTexCoords();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Update the outline vertices' position\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void updateOutline();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Update the outline vertices' color\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void updateOutlineColors();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Texture* m_texture;          ///< Texture of the '
              'shape\n'
              '    IntRect        m_textureRect;      ///< Rectangle defining '
              'the area of the source texture to display\n'
              '    Color          m_fillColor;        ///< Fill color\n'
              '    Color          m_outlineColor;     ///< Outline color\n'
              '    float          m_outlineThickness; ///< Thickness of the '
              "shape's outline\n"
              '    VertexArray    m_vertices;         ///< Vertex array '
              'containing the fill geometry\n'
              '    VertexArray    m_outlineVertices;  ///< Vertex array '
              'containing the outline geometry\n'
              '    FloatRect      m_insideBounds;     ///< Bounding rectangle '
              'of the inside (fill)\n'
              '    FloatRect      m_bounds;           ///< Bounding rectangle '
              'of the whole shape (outline + fill)\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000464',
         path='/Labirint Game/sfml/include/SFML/Graphics/Sprite.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Sprite.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000465',
         path='/Labirint Game/sfml/include/SFML/Graphics/Sprite.hpp',
         lineno=38,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class Texture;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Drawable representation of a texture, with its\n'
              '///        own transformations, color, etc.\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Sprite : public Drawable, public '
              'Transformable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates an empty sprite with no source texture.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Sprite();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the sprite from a source texture\n'
              '    ///\n'
              '    /// \\param texture Source texture\n'
              '    ///\n'
              '    /// \\see setTexture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit Sprite(const Texture& texture);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the sprite from a sub-rectangle of a '
              'source texture\n'
              '    ///\n'
              '    /// \\param texture   Source texture\n'
              '    /// \\param rectangle Sub-rectangle of the texture to '
              'assign to the sprite\n'
              '    ///\n'
              '    /// \\see setTexture, setTextureRect\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Sprite(const Texture& texture, const IntRect& rectangle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the source texture of the sprite\n'
              '    ///\n'
              '    /// The \\a texture argument refers to a texture that must\n'
              '    /// exist as long as the sprite uses it. Indeed, the '
              'sprite\n'
              "    /// doesn't store its own copy of the texture, but rather "
              'keeps\n'
              '    /// a pointer to the one that you passed to this function.\n'
              '    /// If the source texture is destroyed and the sprite tries '
              'to\n'
              '    /// use it, the behavior is undefined.\n'
              '    /// If \\a resetRect is true, the TextureRect property of\n'
              '    /// the sprite is automatically adjusted to the size of the '
              'new\n'
              '    /// texture. If it is false, the texture rect is left '
              'unchanged.\n'
              '    ///\n'
              '    /// \\param texture   New texture\n'
              '    /// \\param resetRect Should the texture rect be reset to '
              'the size of the new texture?\n'
              '    ///\n'
              '    /// \\see getTexture, setTextureRect\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setTexture(const Texture& texture, bool resetRect = '
              'false);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the sub-rectangle of the texture that the '
              'sprite will display\n'
              '    ///\n'
              "    /// The texture rect is useful when you don't want to "
              'display\n'
              '    /// the whole texture, but rather a part of it.\n'
              '    /// By default, the texture rect covers the entire '
              'texture.\n'
              '    ///\n'
              '    /// \\param rectangle Rectangle defining the region of the '
              'texture to display\n'
              '    ///\n'
              '    /// \\see getTextureRect, setTexture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setTextureRect(const IntRect& rectangle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the global color of the sprite\n'
              '    ///\n'
              "    /// This color is modulated (multiplied) with the sprite's\n"
              '    /// texture. It can be used to colorize the sprite, or '
              'change\n'
              '    /// its global opacity.\n'
              "    /// By default, the sprite's color is opaque white.\n"
              '    ///\n'
              '    /// \\param color New color of the sprite\n'
              '    ///\n'
              '    /// \\see getColor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setColor(const Color& color);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the source texture of the sprite\n'
              '    ///\n'
              '    /// If the sprite has no source texture, a NULL pointer is '
              'returned.\n'
              '    /// The returned pointer is const, which means that you '
              "can't\n"
              '    /// modify the texture when you retrieve it with this '
              'function.\n'
              '    ///\n'
              "    /// \\return Pointer to the sprite's texture\n"
              '    ///\n'
              '    /// \\see setTexture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Texture* getTexture() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the sub-rectangle of the texture displayed '
              'by the sprite\n'
              '    ///\n'
              '    /// \\return Texture rectangle of the sprite\n'
              '    ///\n'
              '    /// \\see setTextureRect\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const IntRect& getTextureRect() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the global color of the sprite\n'
              '    ///\n'
              '    /// \\return Global color of the sprite\n'
              '    ///\n'
              '    /// \\see setColor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Color& getColor() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the local bounding rectangle of the entity\n'
              '    ///\n'
              '    /// The returned rectangle is in local coordinates, which '
              'means\n'
              '    /// that it ignores the transformations (translation, '
              'rotation,\n'
              '    /// scale, ...) that are applied to the entity.\n'
              '    /// In other words, this function returns the bounds of '
              'the\n'
              "    /// entity in the entity's coordinate system.\n"
              '    ///\n'
              '    /// \\return Local bounding rectangle of the entity\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    FloatRect getLocalBounds() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the global bounding rectangle of the '
              'entity\n'
              '    ///\n'
              '    /// The returned rectangle is in global coordinates, which '
              'means\n'
              '    /// that it takes into account the transformations '
              '(translation,\n'
              '    /// rotation, scale, ...) that are applied to the entity.\n'
              '    /// In other words, this function returns the bounds of '
              'the\n'
              "    /// sprite in the global 2D world's coordinate system.\n"
              '    ///\n'
              '    /// \\return Global bounding rectangle of the entity\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    FloatRect getGlobalBounds() const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw the sprite to a render target\n'
              '    ///\n'
              '    /// \\param target Render target to draw to\n'
              '    /// \\param states Current render states\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void draw(RenderTarget& target, RenderStates '
              'states) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Update the vertices' positions\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void updatePositions();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Update the vertices' texture coordinates\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void updateTexCoords();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vertex         m_vertices[4]; ///< Vertices defining the '
              "sprite's geometry\n"
              '    const Texture* m_texture;     ///< Texture of the sprite\n'
              '    IntRect        m_textureRect; ///< Rectangle defining the '
              'area of the source texture to display\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000466',
         path='/Labirint Game/sfml/include/SFML/Graphics/Text.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Text.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000467',
         path='/Labirint Game/sfml/include/SFML/Graphics/Text.hpp',
         lineno=42,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Graphical text that can be drawn to a render '
              'target\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Text : public Drawable, public '
              'Transformable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enumeration of the string drawing styles\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Style\n'
              '    {\n'
              '        Regular       = 0,      ///< Regular characters, no '
              'style\n'
              '        Bold          = 1 << 0, ///< Bold characters\n'
              '        Italic        = 1 << 1, ///< Italic characters\n'
              '        Underlined    = 1 << 2, ///< Underlined characters\n'
              '        StrikeThrough = 1 << 3  ///< Strike through characters\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates an empty text.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Text();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the text from a string, font and '
              'size\n'
              '    ///\n'
              '    /// Note that if the used font is a bitmap font, it is not\n'
              '    /// scalable, thus not all requested sizes will be '
              'available\n'
              '    /// to use. This needs to be taken into consideration when\n'
              '    /// setting the character size. If you need to display '
              'text\n'
              '    /// of a certain size, make sure the corresponding bitmap\n'
              '    /// font that supports that size is used.\n'
              '    ///\n'
              '    /// \\param string         Text assigned to the string\n'
              '    /// \\param font           Font used to draw the string\n'
              '    /// \\param characterSize  Base size of characters, in '
              'pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Text(const String& string, const Font& font, unsigned int '
              'characterSize = 30);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Set the text's string\n"
              '    ///\n'
              '    /// The \\a string argument is a sf::String, which can\n'
              '    /// automatically be constructed from standard string '
              'types.\n'
              '    /// So, the following calls are all valid:\n'
              '    /// \\code\n'
              '    /// text.setString("hello");\n'
              '    /// text.setString(L"hello");\n'
              '    /// text.setString(std::string("hello"));\n'
              '    /// text.setString(std::wstring(L"hello"));\n'
              '    /// \\endcode\n'
              "    /// A text's string is empty by default.\n"
              '    ///\n'
              '    /// \\param string New string\n'
              '    ///\n'
              '    /// \\see getString\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setString(const String& string);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Set the text's font\n"
              '    ///\n'
              '    /// The \\a font argument refers to a font that must\n'
              '    /// exist as long as the text uses it. Indeed, the text\n'
              "    /// doesn't store its own copy of the font, but rather "
              'keeps\n'
              '    /// a pointer to the one that you passed to this function.\n'
              '    /// If the font is destroyed and the text tries to\n'
              '    /// use it, the behavior is undefined.\n'
              '    ///\n'
              '    /// \\param font New font\n'
              '    ///\n'
              '    /// \\see getFont\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setFont(const Font& font);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the character size\n'
              '    ///\n'
              '    /// The default size is 30.\n'
              '    ///\n'
              '    /// Note that if the used font is a bitmap font, it is not\n'
              '    /// scalable, thus not all requested sizes will be '
              'available\n'
              '    /// to use. This needs to be taken into consideration when\n'
              '    /// setting the character size. If you need to display '
              'text\n'
              '    /// of a certain size, make sure the corresponding bitmap\n'
              '    /// font that supports that size is used.\n'
              '    ///\n'
              '    /// \\param size New character size, in pixels\n'
              '    ///\n'
              '    /// \\see getCharacterSize\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setCharacterSize(unsigned int size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the line spacing factor\n'
              '    ///\n'
              '    /// The default spacing between lines is defined by the '
              'font.\n'
              '    /// This method enables you to set a factor for the '
              'spacing\n'
              '    /// between lines. By default the line spacing factor is '
              '1.\n'
              '    ///\n'
              '    /// \\param spacingFactor New line spacing factor\n'
              '    ///\n'
              '    /// \\see getLineSpacing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setLineSpacing(float spacingFactor);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the letter spacing factor\n'
              '    ///\n'
              '    /// The default spacing between letters is defined by the '
              'font.\n'
              "    /// This factor doesn't directly apply to the existing\n"
              '    /// spacing between each character, it rather adds a fixed\n'
              '    /// space between them which is calculated from the font\n'
              '    /// metrics and the character size.\n'
              '    /// Note that factors below 1 (including negative numbers) '
              'bring\n'
              '    /// characters closer to each other.\n'
              '    /// By default the letter spacing factor is 1.\n'
              '    ///\n'
              '    /// \\param spacingFactor New letter spacing factor\n'
              '    ///\n'
              '    /// \\see getLetterSpacing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setLetterSpacing(float spacingFactor);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Set the text's style\n"
              '    ///\n'
              '    /// You can pass a combination of one or more styles, for\n'
              '    /// example sf::Text::Bold | sf::Text::Italic.\n'
              '    /// The default style is sf::Text::Regular.\n'
              '    ///\n'
              '    /// \\param style New style\n'
              '    ///\n'
              '    /// \\see getStyle\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setStyle(Uint32 style);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the fill color of the text\n'
              '    ///\n'
              "    /// By default, the text's fill color is opaque white.\n"
              '    /// Setting the fill color to a transparent color with an '
              'outline\n'
              '    /// will cause the outline to be displayed in the fill area '
              'of the text.\n'
              '    ///\n'
              '    /// \\param color New fill color of the text\n'
              '    ///\n'
              '    /// \\see getFillColor\n'
              '    ///\n'
              '    /// \\deprecated There is now fill and outline colors '
              'instead\n'
              '    /// of a single global color.\n'
              '    /// Use setFillColor() or setOutlineColor() instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED void setColor(const Color& color);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the fill color of the text\n'
              '    ///\n'
              "    /// By default, the text's fill color is opaque white.\n"
              '    /// Setting the fill color to a transparent color with an '
              'outline\n'
              '    /// will cause the outline to be displayed in the fill area '
              'of the text.\n'
              '    ///\n'
              '    /// \\param color New fill color of the text\n'
              '    ///\n'
              '    /// \\see getFillColor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setFillColor(const Color& color);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the outline color of the text\n'
              '    ///\n'
              "    /// By default, the text's outline color is opaque black.\n"
              '    ///\n'
              '    /// \\param color New outline color of the text\n'
              '    ///\n'
              '    /// \\see getOutlineColor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setOutlineColor(const Color& color);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Set the thickness of the text's outline\n"
              '    ///\n'
              '    /// By default, the outline thickness is 0.\n'
              '    ///\n'
              '    /// Be aware that using a negative value for the outline\n'
              '    /// thickness will cause distorted rendering.\n'
              '    ///\n'
              '    /// \\param thickness New outline thickness, in pixels\n'
              '    ///\n'
              '    /// \\see getOutlineThickness\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setOutlineThickness(float thickness);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Get the text's string\n"
              '    ///\n'
              '    /// The returned string is a sf::String, which can '
              'automatically\n'
              '    /// be converted to standard string types. So, the '
              'following\n'
              '    /// lines of code are all valid:\n'
              '    /// \\code\n'
              '    /// sf::String   s1 = text.getString();\n'
              '    /// std::string  s2 = text.getString();\n'
              '    /// std::wstring s3 = text.getString();\n'
              '    /// \\endcode\n'
              '    ///\n'
              "    /// \\return Text's string\n"
              '    ///\n'
              '    /// \\see setString\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const String& getString() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Get the text's font\n"
              '    ///\n'
              '    /// If the text has no font attached, a NULL pointer is '
              'returned.\n'
              '    /// The returned pointer is const, which means that you\n'
              '    /// cannot modify the font when you get it from this '
              'function.\n'
              '    ///\n'
              "    /// \\return Pointer to the text's font\n"
              '    ///\n'
              '    /// \\see setFont\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Font* getFont() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the character size\n'
              '    ///\n'
              '    /// \\return Size of the characters, in pixels\n'
              '    ///\n'
              '    /// \\see setCharacterSize\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getCharacterSize() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the size of the letter spacing factor\n'
              '    ///\n'
              '    /// \\return Size of the letter spacing factor\n'
              '    ///\n'
              '    /// \\see setLetterSpacing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getLetterSpacing() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the size of the line spacing factor\n'
              '    ///\n'
              '    /// \\return Size of the line spacing factor\n'
              '    ///\n'
              '    /// \\see setLineSpacing\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getLineSpacing() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Get the text's style\n"
              '    ///\n'
              "    /// \\return Text's style\n"
              '    ///\n'
              '    /// \\see setStyle\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Uint32 getStyle() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the fill color of the text\n'
              '    ///\n'
              '    /// \\return Fill color of the text\n'
              '    ///\n'
              '    /// \\see setFillColor\n'
              '    ///\n'
              '    /// \\deprecated There is now fill and outline colors '
              'instead\n'
              '    /// of a single global color.\n'
              '    /// Use getFillColor() or getOutlineColor() instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SFML_DEPRECATED const Color& getColor() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the fill color of the text\n'
              '    ///\n'
              '    /// \\return Fill color of the text\n'
              '    ///\n'
              '    /// \\see setFillColor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Color& getFillColor() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the outline color of the text\n'
              '    ///\n'
              '    /// \\return Outline color of the text\n'
              '    ///\n'
              '    /// \\see setOutlineColor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Color& getOutlineColor() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the outline thickness of the text\n'
              '    ///\n'
              '    /// \\return Outline thickness of the text, in pixels\n'
              '    ///\n'
              '    /// \\see setOutlineThickness\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getOutlineThickness() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the position of the \\a index-th '
              'character\n'
              '    ///\n'
              '    /// This function computes the visual position of a '
              'character\n'
              '    /// from its index in the string. The returned position is\n'
              '    /// in global coordinates (translation, rotation, scale '
              'and\n'
              '    /// origin are applied).\n'
              '    /// If \\a index is out of range, the position of the end '
              'of\n'
              '    /// the string is returned.\n'
              '    ///\n'
              '    /// \\param index Index of the character\n'
              '    ///\n'
              '    /// \\return Position of the character\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2f findCharacterPos(std::size_t index) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the local bounding rectangle of the entity\n'
              '    ///\n'
              '    /// The returned rectangle is in local coordinates, which '
              'means\n'
              '    /// that it ignores the transformations (translation, '
              'rotation,\n'
              '    /// scale, ...) that are applied to the entity.\n'
              '    /// In other words, this function returns the bounds of '
              'the\n'
              "    /// entity in the entity's coordinate system.\n"
              '    ///\n'
              '    /// \\return Local bounding rectangle of the entity\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    FloatRect getLocalBounds() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the global bounding rectangle of the '
              'entity\n'
              '    ///\n'
              '    /// The returned rectangle is in global coordinates, which '
              'means\n'
              '    /// that it takes into account the transformations '
              '(translation,\n'
              '    /// rotation, scale, ...) that are applied to the entity.\n'
              '    /// In other words, this function returns the bounds of '
              'the\n'
              "    /// text in the global 2D world's coordinate system.\n"
              '    ///\n'
              '    /// \\return Global bounding rectangle of the entity\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    FloatRect getGlobalBounds() const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw the text to a render target\n'
              '    ///\n'
              '    /// \\param target Render target to draw to\n'
              '    /// \\param states Current render states\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void draw(RenderTarget& target, RenderStates '
              'states) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Make sure the text's geometry is updated\n"
              '    ///\n'
              '    /// All the attributes related to rendering are cached, '
              'such\n'
              '    /// that the geometry is only updated when necessary.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void ensureGeometryUpdate() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    String              m_string;              ///< String to '
              'display\n'
              '    const Font*         m_font;                ///< Font used '
              'to display the string\n'
              '    unsigned int        m_characterSize;       ///< Base size '
              'of characters, in pixels\n'
              '    float               m_letterSpacingFactor; ///< Spacing '
              'factor between letters\n'
              '    float               m_lineSpacingFactor;   ///< Spacing '
              'factor between lines\n'
              '    Uint32              m_style;               ///< Text style '
              '(see Style enum)\n'
              '    Color               m_fillColor;           ///< Text fill '
              'color\n'
              '    Color               m_outlineColor;        ///< Text '
              'outline color\n'
              '    float               m_outlineThickness;    ///< Thickness '
              "of the text's outline\n"
              '    mutable VertexArray m_vertices;            ///< Vertex '
              'array containing the fill geometry\n'
              '    mutable VertexArray m_outlineVertices;     ///< Vertex '
              'array containing the outline geometry\n'
              '    mutable FloatRect   m_bounds;              ///< Bounding '
              'rectangle of the text (in local coordinates)\n'
              '    mutable bool        m_geometryNeedUpdate;  ///< Does the '
              'geometry need to be recomputed?\n'
              '    mutable Uint64      m_fontTextureId;       ///< The font '
              'texture id\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000468',
         path='/Labirint Game/sfml/include/SFML/Graphics/Texture.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Texture.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000469',
         path='/Labirint Game/sfml/include/SFML/Graphics/Texture.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class InputStream;\n'
              'class RenderTarget;\n'
              'class RenderTexture;\n'
              'class Text;\n'
              'class Window;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Image living on the graphics card that can be used '
              'for drawing\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Texture : GlResource\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Types of texture coordinates that can be used '
              'for rendering\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum CoordinateType\n'
              '    {\n'
              '        Normalized, ///< Texture coordinates in range [0 .. 1]\n'
              '        Pixels      ///< Texture coordinates in range [0 .. '
              'size]\n'
              '    };\n'
              '\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates an empty texture.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Texture();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy constructor\n'
              '    ///\n'
              '    /// \\param copy instance to copy\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Texture(const Texture& copy);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Texture();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create the texture\n'
              '    ///\n'
              '    /// If this function fails, the texture is left unchanged.\n'
              '    ///\n'
              '    /// \\param width  Width of the texture\n'
              '    /// \\param height Height of the texture\n'
              '    ///\n'
              '    /// \\return True if creation was successful\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool create(unsigned int width, unsigned int height);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the texture from a file on disk\n'
              '    ///\n'
              '    /// This function is a shortcut for the following code:\n'
              '    /// \\code\n'
              '    /// sf::Image image;\n'
              '    /// image.loadFromFile(filename);\n'
              '    /// texture.loadFromImage(image, area);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// The \\a area argument can be used to load only a '
              'sub-rectangle\n'
              '    /// of the whole image. If you want the entire image then '
              'leave\n'
              '    /// the default value (which is an empty IntRect).\n'
              '    /// If the \\a area rectangle crosses the bounds of the '
              'image, it\n'
              '    /// is adjusted to fit the image size.\n'
              '    ///\n'
              '    /// The maximum size for a texture depends on the graphics\n'
              '    /// driver and can be retrieved with the getMaximumSize '
              'function.\n'
              '    ///\n'
              '    /// If this function fails, the texture is left unchanged.\n'
              '    ///\n'
              '    /// \\param filename Path of the image file to load\n'
              '    /// \\param area     Area of the image to load\n'
              '    ///\n'
              '    /// \\return True if loading was successful\n'
              '    ///\n'
              '    /// \\see loadFromMemory, loadFromStream, loadFromImage\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromFile(const std::string& filename, const '
              'IntRect& area = IntRect());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the texture from a file in memory\n'
              '    ///\n'
              '    /// This function is a shortcut for the following code:\n'
              '    /// \\code\n'
              '    /// sf::Image image;\n'
              '    /// image.loadFromMemory(data, size);\n'
              '    /// texture.loadFromImage(image, area);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// The \\a area argument can be used to load only a '
              'sub-rectangle\n'
              '    /// of the whole image. If you want the entire image then '
              'leave\n'
              '    /// the default value (which is an empty IntRect).\n'
              '    /// If the \\a area rectangle crosses the bounds of the '
              'image, it\n'
              '    /// is adjusted to fit the image size.\n'
              '    ///\n'
              '    /// The maximum size for a texture depends on the graphics\n'
              '    /// driver and can be retrieved with the getMaximumSize '
              'function.\n'
              '    ///\n'
              '    /// If this function fails, the texture is left unchanged.\n'
              '    ///\n'
              '    /// \\param data Pointer to the file data in memory\n'
              '    /// \\param size Size of the data to load, in bytes\n'
              '    /// \\param area Area of the image to load\n'
              '    ///\n'
              '    /// \\return True if loading was successful\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromStream, loadFromImage\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromMemory(const void* data, std::size_t size, '
              'const IntRect& area = IntRect());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the texture from a custom stream\n'
              '    ///\n'
              '    /// This function is a shortcut for the following code:\n'
              '    /// \\code\n'
              '    /// sf::Image image;\n'
              '    /// image.loadFromStream(stream);\n'
              '    /// texture.loadFromImage(image, area);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// The \\a area argument can be used to load only a '
              'sub-rectangle\n'
              '    /// of the whole image. If you want the entire image then '
              'leave\n'
              '    /// the default value (which is an empty IntRect).\n'
              '    /// If the \\a area rectangle crosses the bounds of the '
              'image, it\n'
              '    /// is adjusted to fit the image size.\n'
              '    ///\n'
              '    /// The maximum size for a texture depends on the graphics\n'
              '    /// driver and can be retrieved with the getMaximumSize '
              'function.\n'
              '    ///\n'
              '    /// If this function fails, the texture is left unchanged.\n'
              '    ///\n'
              '    /// \\param stream Source stream to read from\n'
              '    /// \\param area   Area of the image to load\n'
              '    ///\n'
              '    /// \\return True if loading was successful\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromMemory, loadFromImage\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromStream(InputStream& stream, const IntRect& '
              'area = IntRect());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Load the texture from an image\n'
              '    ///\n'
              '    /// The \\a area argument can be used to load only a '
              'sub-rectangle\n'
              '    /// of the whole image. If you want the entire image then '
              'leave\n'
              '    /// the default value (which is an empty IntRect).\n'
              '    /// If the \\a area rectangle crosses the bounds of the '
              'image, it\n'
              '    /// is adjusted to fit the image size.\n'
              '    ///\n'
              '    /// The maximum size for a texture depends on the graphics\n'
              '    /// driver and can be retrieved with the getMaximumSize '
              'function.\n'
              '    ///\n'
              '    /// If this function fails, the texture is left unchanged.\n'
              '    ///\n'
              '    /// \\param image Image to load into the texture\n'
              '    /// \\param area  Area of the image to load\n'
              '    ///\n'
              '    /// \\return True if loading was successful\n'
              '    ///\n'
              '    /// \\see loadFromFile, loadFromMemory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromImage(const Image& image, const IntRect& area '
              '= IntRect());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the size of the texture\n'
              '    ///\n'
              '    /// \\return Size in pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2u getSize() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy the texture pixels to an image\n'
              '    ///\n'
              '    /// This function performs a slow operation that downloads\n'
              "    /// the texture's pixels from the graphics card and copies\n"
              '    /// them to a new image, potentially applying '
              'transformations\n'
              '    /// to pixels if necessary (texture may be padded or '
              'flipped).\n'
              '    ///\n'
              "    /// \\return Image containing the texture's pixels\n"
              '    ///\n'
              '    /// \\see loadFromImage\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Image copyToImage() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update the whole texture from an array of '
              'pixels\n'
              '    ///\n'
              '    /// The \\a pixel array is assumed to have the same size '
              'as\n'
              '    /// the \\a area rectangle, and to contain 32-bits RGBA '
              'pixels.\n'
              '    ///\n'
              '    /// No additional check is performed on the size of the '
              'pixel\n'
              '    /// array, passing invalid arguments will lead to an '
              'undefined\n'
              '    /// behavior.\n'
              '    ///\n'
              '    /// This function does nothing if \\a pixels is null or if '
              'the\n'
              '    /// texture was not previously created.\n'
              '    ///\n'
              '    /// \\param pixels Array of pixels to copy to the texture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void update(const Uint8* pixels);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update a part of the texture from an array of '
              'pixels\n'
              '    ///\n'
              '    /// The size of the \\a pixel array must match the \\a '
              'width and\n'
              '    /// \\a height arguments, and it must contain 32-bits RGBA '
              'pixels.\n'
              '    ///\n'
              '    /// No additional check is performed on the size of the '
              'pixel\n'
              '    /// array or the bounds of the area to update, passing '
              'invalid\n'
              '    /// arguments will lead to an undefined behavior.\n'
              '    ///\n'
              '    /// This function does nothing if \\a pixels is null or if '
              'the\n'
              '    /// texture was not previously created.\n'
              '    ///\n'
              '    /// \\param pixels Array of pixels to copy to the texture\n'
              '    /// \\param width  Width of the pixel region contained in '
              '\\a pixels\n'
              '    /// \\param height Height of the pixel region contained in '
              '\\a pixels\n'
              '    /// \\param x      X offset in the texture where to copy '
              'the source pixels\n'
              '    /// \\param y      Y offset in the texture where to copy '
              'the source pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void update(const Uint8* pixels, unsigned int width, '
              'unsigned int height, unsigned int x, unsigned int y);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update a part of this texture from another '
              'texture\n'
              '    ///\n'
              '    /// Although the source texture can be smaller than this '
              'texture,\n'
              '    /// this function is usually used for updating the whole '
              'texture.\n'
              '    /// The other overload, which has (x, y) additional '
              'arguments,\n'
              '    /// is more convenient for updating a sub-area of this '
              'texture.\n'
              '    ///\n'
              '    /// No additional check is performed on the size of the '
              'passed\n'
              '    /// texture, passing a texture bigger than this texture\n'
              '    /// will lead to an undefined behavior.\n'
              '    ///\n'
              '    /// This function does nothing if either texture was not\n'
              '    /// previously created.\n'
              '    ///\n'
              '    /// \\param texture Source texture to copy to this texture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void update(const Texture& texture);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update a part of this texture from another '
              'texture\n'
              '    ///\n'
              '    /// No additional check is performed on the size of the '
              'texture,\n'
              '    /// passing an invalid combination of texture size and '
              'offset\n'
              '    /// will lead to an undefined behavior.\n'
              '    ///\n'
              '    /// This function does nothing if either texture was not\n'
              '    /// previously created.\n'
              '    ///\n'
              '    /// \\param texture Source texture to copy to this texture\n'
              '    /// \\param x       X offset in this texture where to copy '
              'the source texture\n'
              '    /// \\param y       Y offset in this texture where to copy '
              'the source texture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void update(const Texture& texture, unsigned int x, '
              'unsigned int y);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update the texture from an image\n'
              '    ///\n'
              '    /// Although the source image can be smaller than the '
              'texture,\n'
              '    /// this function is usually used for updating the whole '
              'texture.\n'
              '    /// The other overload, which has (x, y) additional '
              'arguments,\n'
              '    /// is more convenient for updating a sub-area of the '
              'texture.\n'
              '    ///\n'
              '    /// No additional check is performed on the size of the '
              'image,\n'
              '    /// passing an image bigger than the texture will lead to '
              'an\n'
              '    /// undefined behavior.\n'
              '    ///\n'
              '    /// This function does nothing if the texture was not\n'
              '    /// previously created.\n'
              '    ///\n'
              '    /// \\param image Image to copy to the texture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void update(const Image& image);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update a part of the texture from an image\n'
              '    ///\n'
              '    /// No additional check is performed on the size of the '
              'image,\n'
              '    /// passing an invalid combination of image size and '
              'offset\n'
              '    /// will lead to an undefined behavior.\n'
              '    ///\n'
              '    /// This function does nothing if the texture was not\n'
              '    /// previously created.\n'
              '    ///\n'
              '    /// \\param image Image to copy to the texture\n'
              '    /// \\param x     X offset in the texture where to copy the '
              'source image\n'
              '    /// \\param y     Y offset in the texture where to copy the '
              'source image\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void update(const Image& image, unsigned int x, unsigned '
              'int y);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update the texture from the contents of a '
              'window\n'
              '    ///\n'
              '    /// Although the source window can be smaller than the '
              'texture,\n'
              '    /// this function is usually used for updating the whole '
              'texture.\n'
              '    /// The other overload, which has (x, y) additional '
              'arguments,\n'
              '    /// is more convenient for updating a sub-area of the '
              'texture.\n'
              '    ///\n'
              '    /// No additional check is performed on the size of the '
              'window,\n'
              '    /// passing a window bigger than the texture will lead to '
              'an\n'
              '    /// undefined behavior.\n'
              '    ///\n'
              '    /// This function does nothing if either the texture or the '
              'window\n'
              '    /// was not previously created.\n'
              '    ///\n'
              '    /// \\param window Window to copy to the texture\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void update(const Window& window);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update a part of the texture from the contents '
              'of a window\n'
              '    ///\n'
              '    /// No additional check is performed on the size of the '
              'window,\n'
              '    /// passing an invalid combination of window size and '
              'offset\n'
              '    /// will lead to an undefined behavior.\n'
              '    ///\n'
              '    /// This function does nothing if either the texture or the '
              'window\n'
              '    /// was not previously created.\n'
              '    ///\n'
              '    /// \\param window Window to copy to the texture\n'
              '    /// \\param x      X offset in the texture where to copy '
              'the source window\n'
              '    /// \\param y      Y offset in the texture where to copy '
              'the source window\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void update(const Window& window, unsigned int x, unsigned '
              'int y);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enable or disable the smooth filter\n'
              '    ///\n'
              '    /// When the filter is activated, the texture appears '
              'smoother\n'
              '    /// so that pixels are less noticeable. However if you '
              'want\n'
              '    /// the texture to look exactly the same as its source '
              'file,\n'
              '    /// you should leave it disabled.\n'
              '    /// The smooth filter is disabled by default.\n'
              '    ///\n'
              '    /// \\param smooth True to enable smoothing, false to '
              'disable it\n'
              '    ///\n'
              '    /// \\see isSmooth\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setSmooth(bool smooth);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether the smooth filter is enabled or '
              'not\n'
              '    ///\n'
              '    /// \\return True if smoothing is enabled, false if it is '
              'disabled\n'
              '    ///\n'
              '    /// \\see setSmooth\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool isSmooth() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enable or disable conversion from sRGB\n'
              '    ///\n'
              '    /// When providing texture data from an image file or '
              'memory, it can\n'
              '    /// either be stored in a linear color space or an sRGB '
              'color space.\n'
              '    /// Most digital images account for gamma correction '
              'already, so they\n'
              '    /// would need to be "uncorrected" back to linear color '
              'space before\n'
              '    /// being processed by the hardware. The hardware can '
              'automatically\n'
              '    /// convert it from the sRGB color space to a linear color '
              'space when\n'
              '    /// it gets sampled. When the rendered image gets output to '
              'the final\n'
              '    /// framebuffer, it gets converted back to sRGB.\n'
              '    ///\n'
              '    /// After enabling or disabling sRGB conversion, make sure '
              'to reload\n'
              '    /// the texture data in order for the setting to take '
              'effect.\n'
              '    ///\n'
              '    /// This option is only useful in conjunction with an sRGB '
              'capable\n'
              '    /// framebuffer. This can be requested during window '
              'creation.\n'
              '    ///\n'
              '    /// \\param sRgb True to enable sRGB conversion, false to '
              'disable it\n'
              '    ///\n'
              '    /// \\see isSrgb\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setSrgb(bool sRgb);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether the texture source is converted '
              'from sRGB or not\n'
              '    ///\n'
              '    /// \\return True if the texture source is converted from '
              'sRGB, false if not\n'
              '    ///\n'
              '    /// \\see setSrgb\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool isSrgb() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enable or disable repeating\n'
              '    ///\n'
              '    /// Repeating is involved when using texture coordinates\n'
              '    /// outside the texture rectangle [0, 0, width, height].\n'
              '    /// In this case, if repeat mode is enabled, the whole '
              'texture\n'
              '    /// will be repeated as many times as needed to reach the\n'
              '    /// coordinate (for example, if the X texture coordinate '
              'is\n'
              '    /// 3 * width, the texture will be repeated 3 times).\n'
              '    /// If repeat mode is disabled, the "extra space" will '
              'instead\n'
              '    /// be filled with border pixels.\n'
              '    /// Warning: on very old graphics cards, white pixels may '
              'appear\n'
              '    /// when the texture is repeated. With such cards, repeat '
              'mode\n'
              '    /// can be used reliably only if the texture has '
              'power-of-two\n'
              '    /// dimensions (such as 256x128).\n'
              '    /// Repeating is disabled by default.\n'
              '    ///\n'
              '    /// \\param repeated True to repeat the texture, false to '
              'disable repeating\n'
              '    ///\n'
              '    /// \\see isRepeated\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setRepeated(bool repeated);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether the texture is repeated or not\n'
              '    ///\n'
              '    /// \\return True if repeat mode is enabled, false if it is '
              'disabled\n'
              '    ///\n'
              '    /// \\see setRepeated\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool isRepeated() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Generate a mipmap using the current texture '
              'data\n'
              '    ///\n'
              '    /// Mipmaps are pre-computed chains of optimized textures. '
              'Each\n'
              '    /// level of texture in a mipmap is generated by halving '
              'each of\n'
              "    /// the previous level's dimensions. This is done until the "
              'final\n'
              '    /// level has the size of 1x1. The textures generated in '
              'this process may\n'
              '    /// make use of more advanced filters which might improve '
              'the visual quality\n'
              '    /// of textures when they are applied to objects much '
              'smaller than they are.\n'
              '    /// This is known as minification. Because fewer texels '
              '(texture elements)\n'
              '    /// have to be sampled from when heavily minified, usage of '
              'mipmaps\n'
              '    /// can also improve rendering performance in certain '
              'scenarios.\n'
              '    ///\n'
              '    /// Mipmap generation relies on the necessary OpenGL '
              'extension being\n'
              '    /// available. If it is unavailable or generation fails due '
              'to another\n'
              '    /// reason, this function will return false. Mipmap data is '
              'only valid from\n'
              '    /// the time it is generated until the next time the base '
              'level image is\n'
              '    /// modified, at which point this function will have to be '
              'called again to\n'
              '    /// regenerate it.\n'
              '    ///\n'
              '    /// \\return True if mipmap generation was successful, '
              'false if unsuccessful\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool generateMipmap();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Overload of assignment operator\n'
              '    ///\n'
              '    /// \\param right Instance to assign\n'
              '    ///\n'
              '    /// \\return Reference to self\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Texture& operator =(const Texture& right);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Swap the contents of this texture with those of '
              'another\n'
              '    ///\n'
              '    /// \\param right Instance to swap with\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void swap(Texture& right);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the underlying OpenGL handle of the '
              'texture.\n'
              '    ///\n'
              "    /// You shouldn't need to use this function, unless you "
              'have\n'
              "    /// very specific stuff to implement that SFML doesn't "
              'support,\n'
              '    /// or implement a temporary workaround until a bug is '
              'fixed.\n'
              '    ///\n'
              '    /// \\return OpenGL handle of the texture or 0 if not yet '
              'created\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getNativeHandle() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Bind a texture for rendering\n'
              '    ///\n'
              '    /// This function is not part of the graphics API, it '
              "mustn't be\n"
              '    /// used when drawing SFML entities. It must be used only '
              'if you\n'
              '    /// mix sf::Texture with OpenGL code.\n'
              '    ///\n'
              '    /// \\code\n'
              '    /// sf::Texture t1, t2;\n'
              '    /// ...\n'
              '    /// sf::Texture::bind(&t1);\n'
              '    /// // draw OpenGL stuff that use t1...\n'
              '    /// sf::Texture::bind(&t2);\n'
              '    /// // draw OpenGL stuff that use t2...\n'
              '    /// sf::Texture::bind(NULL);\n'
              '    /// // draw OpenGL stuff that use no texture...\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// The \\a coordinateType argument controls how texture\n'
              '    /// coordinates will be interpreted. If Normalized (the '
              'default), they\n'
              '    /// must be in range [0 .. 1], which is the default way of '
              'handling\n'
              '    /// texture coordinates with OpenGL. If Pixels, they must '
              'be given\n'
              '    /// in pixels (range [0 .. size]). This mode is used '
              'internally by\n'
              '    /// the graphics classes of SFML, it makes the definition '
              'of texture\n'
              '    /// coordinates more intuitive for the high-level API, '
              "users don't need\n"
              '    /// to compute normalized values.\n'
              '    ///\n'
              '    /// \\param texture Pointer to the texture to bind, can be '
              'null to use no texture\n'
              '    /// \\param coordinateType Type of texture coordinates to '
              'use\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void bind(const Texture* texture, CoordinateType '
              'coordinateType = Normalized);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the maximum texture size allowed\n'
              '    ///\n'
              '    /// This maximum size is defined by the graphics driver.\n'
              '    /// You can expect a value of 512 pixels for low-end '
              'graphics\n'
              '    /// card, and up to 8192 pixels or more for newer '
              'hardware.\n'
              '    ///\n'
              '    /// \\return Maximum size allowed for textures, in pixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static unsigned int getMaximumSize();\n'
              '\n'
              'private:\n'
              '\n'
              '    friend class Text;\n'
              '    friend class RenderTexture;\n'
              '    friend class RenderTarget;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a valid image size according to hardware '
              'support\n'
              '    ///\n'
              '    /// This function checks whether the graphics driver '
              'supports\n'
              '    /// non power of two sizes or not, and adjusts the size\n'
              '    /// accordingly.\n'
              '    /// The returned size is greater than or equal to the '
              'original size.\n'
              '    ///\n'
              '    /// \\param size size to convert\n'
              '    ///\n'
              '    /// \\return Valid nearest size (greater than or equal to '
              'specified size)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static unsigned int getValidSize(unsigned int size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Invalidate the mipmap if one exists\n'
              '    ///\n'
              "    /// This also resets the texture's minifying function.\n"
              '    /// This function is mainly for internal use by '
              'RenderTexture.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void invalidateMipmap();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2u     m_size;          ///< Public texture size\n'
              '    Vector2u     m_actualSize;    ///< Actual texture size (can '
              'be greater than public size because of padding)\n'
              '    unsigned int m_texture;       ///< Internal texture '
              'identifier\n'
              '    bool         m_isSmooth;      ///< Status of the smooth '
              'filter\n'
              '    bool         m_sRgb;          ///< Should the texture '
              'source be converted from sRGB?\n'
              '    bool         m_isRepeated;    ///< Is the texture in repeat '
              'mode?\n'
              '    mutable bool m_pixelsFlipped; ///< To work around the '
              'inconsistency in Y orientation\n'
              '    bool         m_fboAttachment; ///< Is this texture owned by '
              'a framebuffer object?\n'
              '    bool         m_hasMipmap;     ///< Has the mipmap been '
              'generated?\n'
              '    Uint64       m_cacheId;       ///< Unique number that '
              "identifies the texture to the render target's cache\n"
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000470',
         path='/Labirint Game/sfml/include/SFML/Graphics/Transform.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Transform.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000471',
         path='/Labirint Game/sfml/include/SFML/Graphics/Transform.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Define a 3x3 transform matrix\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Transform\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates an identity transform (a transform that does '
              'nothing).\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a transform from a 3x3 matrix\n'
              '    ///\n'
              '    /// \\param a00 Element (0, 0) of the matrix\n'
              '    /// \\param a01 Element (0, 1) of the matrix\n'
              '    /// \\param a02 Element (0, 2) of the matrix\n'
              '    /// \\param a10 Element (1, 0) of the matrix\n'
              '    /// \\param a11 Element (1, 1) of the matrix\n'
              '    /// \\param a12 Element (1, 2) of the matrix\n'
              '    /// \\param a20 Element (2, 0) of the matrix\n'
              '    /// \\param a21 Element (2, 1) of the matrix\n'
              '    /// \\param a22 Element (2, 2) of the matrix\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform(float a00, float a01, float a02,\n'
              '              float a10, float a11, float a12,\n'
              '              float a20, float a21, float a22);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the transform as a 4x4 matrix\n'
              '    ///\n'
              '    /// This function returns a pointer to an array of 16 '
              'floats\n'
              '    /// containing the transform elements as a 4x4 matrix, '
              'which\n'
              '    /// is directly compatible with OpenGL functions.\n'
              '    ///\n'
              '    /// \\code\n'
              '    /// sf::Transform transform = ...;\n'
              '    /// glLoadMatrixf(transform.getMatrix());\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\return Pointer to a 4x4 matrix\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const float* getMatrix() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the inverse of the transform\n'
              '    ///\n'
              '    /// If the inverse cannot be computed, an identity '
              'transform\n'
              '    /// is returned.\n'
              '    ///\n'
              '    /// \\return A new transform which is the inverse of self\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform getInverse() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Transform a 2D point\n'
              '    ///\n'
              '    /// \\param x X coordinate of the point to transform\n'
              '    /// \\param y Y coordinate of the point to transform\n'
              '    ///\n'
              '    /// \\return Transformed point\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2f transformPoint(float x, float y) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Transform a 2D point\n'
              '    ///\n'
              '    /// \\param point Point to transform\n'
              '    ///\n'
              '    /// \\return Transformed point\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2f transformPoint(const Vector2f& point) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Transform a rectangle\n'
              '    ///\n'
              "    /// Since SFML doesn't provide support for oriented "
              'rectangles,\n'
              '    /// the result of this function is always an axis-aligned\n'
              '    /// rectangle. Which means that if the transform contains '
              'a\n'
              '    /// rotation, the bounding rectangle of the transformed '
              'rectangle\n'
              '    /// is returned.\n'
              '    ///\n'
              '    /// \\param rectangle Rectangle to transform\n'
              '    ///\n'
              '    /// \\return Transformed rectangle\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    FloatRect transformRect(const FloatRect& rectangle) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Combine the current transform with another one\n'
              '    ///\n'
              '    /// The result is a transform that is equivalent to '
              'applying\n'
              '    /// *this followed by \\a transform. Mathematically, it is\n'
              '    /// equivalent to a matrix multiplication.\n'
              '    ///\n'
              '    /// \\param transform Transform to combine with this '
              'transform\n'
              '    ///\n'
              '    /// \\return Reference to *this\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform& combine(const Transform& transform);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Combine the current transform with a '
              'translation\n'
              '    ///\n'
              '    /// This function returns a reference to *this, so that '
              'calls\n'
              '    /// can be chained.\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// transform.translate(100, 200).rotate(45);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param x Offset to apply on X axis\n'
              '    /// \\param y Offset to apply on Y axis\n'
              '    ///\n'
              '    /// \\return Reference to *this\n'
              '    ///\n'
              '    /// \\see rotate, scale\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform& translate(float x, float y);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Combine the current transform with a '
              'translation\n'
              '    ///\n'
              '    /// This function returns a reference to *this, so that '
              'calls\n'
              '    /// can be chained.\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// transform.translate(sf::Vector2f(100, '
              '200)).rotate(45);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param offset Translation offset to apply\n'
              '    ///\n'
              '    /// \\return Reference to *this\n'
              '    ///\n'
              '    /// \\see rotate, scale\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform& translate(const Vector2f& offset);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Combine the current transform with a rotation\n'
              '    ///\n'
              '    /// This function returns a reference to *this, so that '
              'calls\n'
              '    /// can be chained.\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// transform.rotate(90).translate(50, 20);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param angle Rotation angle, in degrees\n'
              '    ///\n'
              '    /// \\return Reference to *this\n'
              '    ///\n'
              '    /// \\see translate, scale\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform& rotate(float angle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Combine the current transform with a rotation\n'
              '    ///\n'
              '    /// The center of rotation is provided for convenience as a '
              'second\n'
              '    /// argument, so that you can build rotations around '
              'arbitrary points\n'
              '    /// more easily (and efficiently) than the usual\n'
              '    /// translate(-center).rotate(angle).translate(center).\n'
              '    ///\n'
              '    /// This function returns a reference to *this, so that '
              'calls\n'
              '    /// can be chained.\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// transform.rotate(90, 8, 3).translate(50, 20);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param angle Rotation angle, in degrees\n'
              '    /// \\param centerX X coordinate of the center of rotation\n'
              '    /// \\param centerY Y coordinate of the center of rotation\n'
              '    ///\n'
              '    /// \\return Reference to *this\n'
              '    ///\n'
              '    /// \\see translate, scale\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform& rotate(float angle, float centerX, float '
              'centerY);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Combine the current transform with a rotation\n'
              '    ///\n'
              '    /// The center of rotation is provided for convenience as a '
              'second\n'
              '    /// argument, so that you can build rotations around '
              'arbitrary points\n'
              '    /// more easily (and efficiently) than the usual\n'
              '    /// translate(-center).rotate(angle).translate(center).\n'
              '    ///\n'
              '    /// This function returns a reference to *this, so that '
              'calls\n'
              '    /// can be chained.\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// transform.rotate(90, sf::Vector2f(8, '
              '3)).translate(sf::Vector2f(50, 20));\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param angle Rotation angle, in degrees\n'
              '    /// \\param center Center of rotation\n'
              '    ///\n'
              '    /// \\return Reference to *this\n'
              '    ///\n'
              '    /// \\see translate, scale\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform& rotate(float angle, const Vector2f& center);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Combine the current transform with a scaling\n'
              '    ///\n'
              '    /// This function returns a reference to *this, so that '
              'calls\n'
              '    /// can be chained.\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// transform.scale(2, 1).rotate(45);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param scaleX Scaling factor on the X axis\n'
              '    /// \\param scaleY Scaling factor on the Y axis\n'
              '    ///\n'
              '    /// \\return Reference to *this\n'
              '    ///\n'
              '    /// \\see translate, rotate\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform& scale(float scaleX, float scaleY);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Combine the current transform with a scaling\n'
              '    ///\n'
              '    /// The center of scaling is provided for convenience as a '
              'second\n'
              '    /// argument, so that you can build scaling around '
              'arbitrary points\n'
              '    /// more easily (and efficiently) than the usual\n'
              '    /// translate(-center).scale(factors).translate(center).\n'
              '    ///\n'
              '    /// This function returns a reference to *this, so that '
              'calls\n'
              '    /// can be chained.\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// transform.scale(2, 1, 8, 3).rotate(45);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param scaleX Scaling factor on X axis\n'
              '    /// \\param scaleY Scaling factor on Y axis\n'
              '    /// \\param centerX X coordinate of the center of scaling\n'
              '    /// \\param centerY Y coordinate of the center of scaling\n'
              '    ///\n'
              '    /// \\return Reference to *this\n'
              '    ///\n'
              '    /// \\see translate, rotate\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform& scale(float scaleX, float scaleY, float centerX, '
              'float centerY);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Combine the current transform with a scaling\n'
              '    ///\n'
              '    /// This function returns a reference to *this, so that '
              'calls\n'
              '    /// can be chained.\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// transform.scale(sf::Vector2f(2, 1)).rotate(45);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param factors Scaling factors\n'
              '    ///\n'
              '    /// \\return Reference to *this\n'
              '    ///\n'
              '    /// \\see translate, rotate\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform& scale(const Vector2f& factors);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Combine the current transform with a scaling\n'
              '    ///\n'
              '    /// The center of scaling is provided for convenience as a '
              'second\n'
              '    /// argument, so that you can build scaling around '
              'arbitrary points\n'
              '    /// more easily (and efficiently) than the usual\n'
              '    /// translate(-center).scale(factors).translate(center).\n'
              '    ///\n'
              '    /// This function returns a reference to *this, so that '
              'calls\n'
              '    /// can be chained.\n'
              '    /// \\code\n'
              '    /// sf::Transform transform;\n'
              '    /// transform.scale(sf::Vector2f(2, 1), sf::Vector2f(8, '
              '3)).rotate(45);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param factors Scaling factors\n'
              '    /// \\param center Center of scaling\n'
              '    ///\n'
              '    /// \\return Reference to *this\n'
              '    ///\n'
              '    /// \\see translate, rotate\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transform& scale(const Vector2f& factors, const Vector2f& '
              'center);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Static member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static const Transform Identity; ///< The identity '
              'transform (does nothing)\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float m_matrix[16]; ///< 4x4 matrix defining the '
              'transformation\n'
              '};\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates sf::Transform\n'
              '/// \\brief Overload of binary operator * to combine two '
              'transforms\n'
              '///\n'
              '/// This call is equivalent to calling '
              'Transform(left).combine(right).\n'
              '///\n'
              '/// \\param left Left operand (the first transform)\n'
              '/// \\param right Right operand (the second transform)\n'
              '///\n'
              '/// \\return New combined transform\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API Transform operator *(const Transform& left, '
              'const Transform& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates sf::Transform\n'
              '/// \\brief Overload of binary operator *= to combine two '
              'transforms\n'
              '///\n'
              '/// This call is equivalent to calling left.combine(right).\n'
              '///\n'
              '/// \\param left Left operand (the first transform)\n'
              '/// \\param right Right operand (the second transform)\n'
              '///\n'
              '/// \\return The combined transform\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API Transform& operator *=(Transform& left, const '
              'Transform& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates sf::Transform\n'
              '/// \\brief Overload of binary operator * to transform a point\n'
              '///\n'
              '/// This call is equivalent to calling '
              'left.transformPoint(right).\n'
              '///\n'
              '/// \\param left Left operand (the transform)\n'
              '/// \\param right Right operand (the point to transform)\n'
              '///\n'
              '/// \\return New transformed point\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API Vector2f operator *(const Transform& left, '
              'const Vector2f& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates sf::Transform\n'
              '/// \\brief Overload of binary operator == to compare two '
              'transforms\n'
              '///\n'
              '/// Performs an element-wise comparison of the elements of the\n'
              '/// left transform with the elements of the right transform.\n'
              '///\n'
              '/// \\param left Left operand (the first transform)\n'
              '/// \\param right Right operand (the second transform)\n'
              '///\n'
              '/// \\return true if the transforms are equal, false otherwise\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API bool operator ==(const Transform& left, const '
              'Transform& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates sf::Transform\n'
              '/// \\brief Overload of binary operator != to compare two '
              'transforms\n'
              '///\n'
              '/// This call is equivalent to !(left == right).\n'
              '///\n'
              '/// \\param left Left operand (the first transform)\n'
              '/// \\param right Right operand (the second transform)\n'
              '///\n'
              '/// \\return true if the transforms are not equal, false '
              'otherwise\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_GRAPHICS_API bool operator !=(const Transform& left, const '
              'Transform& right);\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000472',
         path='/Labirint Game/sfml/include/SFML/Graphics/Transformable.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Transformable.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000473',
         path='/Labirint Game/sfml/include/SFML/Graphics/Transformable.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Decomposed transform defined by a position, a '
              'rotation and a scale\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Transformable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Transformable();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Virtual destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~Transformable();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief set the position of the object\n'
              '    ///\n'
              '    /// This function completely overwrites the previous '
              'position.\n'
              '    /// See the move function to apply an offset based on the '
              'previous position instead.\n'
              '    /// The default position of a transformable object is (0, '
              '0).\n'
              '    ///\n'
              '    /// \\param x X coordinate of the new position\n'
              '    /// \\param y Y coordinate of the new position\n'
              '    ///\n'
              '    /// \\see move, getPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPosition(float x, float y);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief set the position of the object\n'
              '    ///\n'
              '    /// This function completely overwrites the previous '
              'position.\n'
              '    /// See the move function to apply an offset based on the '
              'previous position instead.\n'
              '    /// The default position of a transformable object is (0, '
              '0).\n'
              '    ///\n'
              '    /// \\param position New position\n'
              '    ///\n'
              '    /// \\see move, getPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPosition(const Vector2f& position);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief set the orientation of the object\n'
              '    ///\n'
              '    /// This function completely overwrites the previous '
              'rotation.\n'
              '    /// See the rotate function to add an angle based on the '
              'previous rotation instead.\n'
              '    /// The default rotation of a transformable object is 0.\n'
              '    ///\n'
              '    /// \\param angle New rotation, in degrees\n'
              '    ///\n'
              '    /// \\see rotate, getRotation\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setRotation(float angle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief set the scale factors of the object\n'
              '    ///\n'
              '    /// This function completely overwrites the previous '
              'scale.\n'
              '    /// See the scale function to add a factor based on the '
              'previous scale instead.\n'
              '    /// The default scale of a transformable object is (1, 1).\n'
              '    ///\n'
              '    /// \\param factorX New horizontal scale factor\n'
              '    /// \\param factorY New vertical scale factor\n'
              '    ///\n'
              '    /// \\see scale, getScale\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setScale(float factorX, float factorY);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief set the scale factors of the object\n'
              '    ///\n'
              '    /// This function completely overwrites the previous '
              'scale.\n'
              '    /// See the scale function to add a factor based on the '
              'previous scale instead.\n'
              '    /// The default scale of a transformable object is (1, 1).\n'
              '    ///\n'
              '    /// \\param factors New scale factors\n'
              '    ///\n'
              '    /// \\see scale, getScale\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setScale(const Vector2f& factors);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief set the local origin of the object\n'
              '    ///\n'
              '    /// The origin of an object defines the center point for\n'
              '    /// all transformations (position, scale, rotation).\n'
              '    /// The coordinates of this point must be relative to the\n'
              '    /// top-left corner of the object, and ignore all\n'
              '    /// transformations (position, scale, rotation).\n'
              '    /// The default origin of a transformable object is (0, '
              '0).\n'
              '    ///\n'
              '    /// \\param x X coordinate of the new origin\n'
              '    /// \\param y Y coordinate of the new origin\n'
              '    ///\n'
              '    /// \\see getOrigin\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setOrigin(float x, float y);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief set the local origin of the object\n'
              '    ///\n'
              '    /// The origin of an object defines the center point for\n'
              '    /// all transformations (position, scale, rotation).\n'
              '    /// The coordinates of this point must be relative to the\n'
              '    /// top-left corner of the object, and ignore all\n'
              '    /// transformations (position, scale, rotation).\n'
              '    /// The default origin of a transformable object is (0, '
              '0).\n'
              '    ///\n'
              '    /// \\param origin New origin\n'
              '    ///\n'
              '    /// \\see getOrigin\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setOrigin(const Vector2f& origin);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief get the position of the object\n'
              '    ///\n'
              '    /// \\return Current position\n'
              '    ///\n'
              '    /// \\see setPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Vector2f& getPosition() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief get the orientation of the object\n'
              '    ///\n'
              '    /// The rotation is always in the range [0, 360].\n'
              '    ///\n'
              '    /// \\return Current rotation, in degrees\n'
              '    ///\n'
              '    /// \\see setRotation\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getRotation() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief get the current scale of the object\n'
              '    ///\n'
              '    /// \\return Current scale factors\n'
              '    ///\n'
              '    /// \\see setScale\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Vector2f& getScale() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief get the local origin of the object\n'
              '    ///\n'
              '    /// \\return Current origin\n'
              '    ///\n'
              '    /// \\see setOrigin\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Vector2f& getOrigin() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Move the object by a given offset\n'
              '    ///\n'
              '    /// This function adds to the current position of the '
              'object,\n'
              '    /// unlike setPosition which overwrites it.\n'
              '    /// Thus, it is equivalent to the following code:\n'
              '    /// \\code\n'
              '    /// sf::Vector2f pos = object.getPosition();\n'
              '    /// object.setPosition(pos.x + offsetX, pos.y + offsetY);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param offsetX X offset\n'
              '    /// \\param offsetY Y offset\n'
              '    ///\n'
              '    /// \\see setPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void move(float offsetX, float offsetY);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Move the object by a given offset\n'
              '    ///\n'
              '    /// This function adds to the current position of the '
              'object,\n'
              '    /// unlike setPosition which overwrites it.\n'
              '    /// Thus, it is equivalent to the following code:\n'
              '    /// \\code\n'
              '    /// object.setPosition(object.getPosition() + offset);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param offset Offset\n'
              '    ///\n'
              '    /// \\see setPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void move(const Vector2f& offset);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Rotate the object\n'
              '    ///\n'
              '    /// This function adds to the current rotation of the '
              'object,\n'
              '    /// unlike setRotation which overwrites it.\n'
              '    /// Thus, it is equivalent to the following code:\n'
              '    /// \\code\n'
              '    /// object.setRotation(object.getRotation() + angle);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param angle Angle of rotation, in degrees\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void rotate(float angle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Scale the object\n'
              '    ///\n'
              '    /// This function multiplies the current scale of the '
              'object,\n'
              '    /// unlike setScale which overwrites it.\n'
              '    /// Thus, it is equivalent to the following code:\n'
              '    /// \\code\n'
              '    /// sf::Vector2f scale = object.getScale();\n'
              '    /// object.setScale(scale.x * factorX, scale.y * factorY);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param factorX Horizontal scale factor\n'
              '    /// \\param factorY Vertical scale factor\n'
              '    ///\n'
              '    /// \\see setScale\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void scale(float factorX, float factorY);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Scale the object\n'
              '    ///\n'
              '    /// This function multiplies the current scale of the '
              'object,\n'
              '    /// unlike setScale which overwrites it.\n'
              '    /// Thus, it is equivalent to the following code:\n'
              '    /// \\code\n'
              '    /// sf::Vector2f scale = object.getScale();\n'
              '    /// object.setScale(scale.x * factor.x, scale.y * '
              'factor.y);\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param factor Scale factors\n'
              '    ///\n'
              '    /// \\see setScale\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void scale(const Vector2f& factor);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief get the combined transform of the object\n'
              '    ///\n'
              '    /// \\return Transform combining the '
              'position/rotation/scale/origin of the object\n'
              '    ///\n'
              '    /// \\see getInverseTransform\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Transform& getTransform() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief get the inverse of the combined transform of '
              'the object\n'
              '    ///\n'
              '    /// \\return Inverse of the combined transformations '
              'applied to the object\n'
              '    ///\n'
              '    /// \\see getTransform\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Transform& getInverseTransform() const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2f          m_origin;                     ///< Origin '
              'of translation/rotation/scaling of the object\n'
              '    Vector2f          m_position;                   ///< '
              'Position of the object in the 2D world\n'
              '    float             m_rotation;                   ///< '
              'Orientation of the object, in degrees\n'
              '    Vector2f          m_scale;                      ///< Scale '
              'of the object\n'
              '    mutable Transform m_transform;                  ///< '
              'Combined transformation of the object\n'
              '    mutable bool      m_transformNeedUpdate;        ///< Does '
              'the transform need to be recomputed?\n'
              '    mutable Transform m_inverseTransform;           ///< '
              'Combined transformation of the object\n'
              '    mutable bool      m_inverseTransformNeedUpdate; ///< Does '
              'the transform need to be recomputed?\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000474',
         path='/Labirint Game/sfml/include/SFML/Graphics/Vertex.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/Vertex.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000475',
         path='/Labirint Game/sfml/include/SFML/Graphics/Vertex.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Define a point with color and texture coordinates\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API Vertex\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vertex();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the vertex from its position\n'
              '    ///\n'
              '    /// The vertex color is white and texture coordinates are '
              '(0, 0).\n'
              '    ///\n'
              '    /// \\param thePosition Vertex position\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vertex(const Vector2f& thePosition);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the vertex from its position and '
              'color\n'
              '    ///\n'
              '    /// The texture coordinates are (0, 0).\n'
              '    ///\n'
              '    /// \\param thePosition Vertex position\n'
              '    /// \\param theColor    Vertex color\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vertex(const Vector2f& thePosition, const Color& '
              'theColor);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the vertex from its position and '
              'texture coordinates\n'
              '    ///\n'
              '    /// The vertex color is white.\n'
              '    ///\n'
              '    /// \\param thePosition  Vertex position\n'
              '    /// \\param theTexCoords Vertex texture coordinates\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vertex(const Vector2f& thePosition, const Vector2f& '
              'theTexCoords);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the vertex from its position, color '
              'and texture coordinates\n'
              '    ///\n'
              '    /// \\param thePosition  Vertex position\n'
              '    /// \\param theColor     Vertex color\n'
              '    /// \\param theTexCoords Vertex texture coordinates\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vertex(const Vector2f& thePosition, const Color& theColor, '
              'const Vector2f& theTexCoords);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2f  position;  ///< 2D position of the vertex\n'
              '    Color     color;     ///< Color of the vertex\n'
              "    Vector2f  texCoords; ///< Coordinates of the texture's "
              'pixel to map to the vertex\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000476',
         path='/Labirint Game/sfml/include/SFML/Graphics/VertexArray.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/VertexArray.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000477',
         path='/Labirint Game/sfml/include/SFML/Graphics/VertexArray.hpp',
         lineno=39,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Define a set of one or more 2D primitives\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API VertexArray : public Drawable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates an empty vertex array.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    VertexArray();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the vertex array with a type and an '
              'initial number of vertices\n'
              '    ///\n'
              '    /// \\param type        Type of primitives\n'
              '    /// \\param vertexCount Initial number of vertices in the '
              'array\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit VertexArray(PrimitiveType type, std::size_t '
              'vertexCount = 0);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the vertex count\n'
              '    ///\n'
              '    /// \\return Number of vertices in the array\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    std::size_t getVertexCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a read-write access to a vertex by its '
              'index\n'
              '    ///\n'
              "    /// This function doesn't check \\a index, it must be in "
              'range\n'
              '    /// [0, getVertexCount() - 1]. The behavior is undefined\n'
              '    /// otherwise.\n'
              '    ///\n'
              '    /// \\param index Index of the vertex to get\n'
              '    ///\n'
              '    /// \\return Reference to the index-th vertex\n'
              '    ///\n'
              '    /// \\see getVertexCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vertex& operator [](std::size_t index);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a read-only access to a vertex by its '
              'index\n'
              '    ///\n'
              "    /// This function doesn't check \\a index, it must be in "
              'range\n'
              '    /// [0, getVertexCount() - 1]. The behavior is undefined\n'
              '    /// otherwise.\n'
              '    ///\n'
              '    /// \\param index Index of the vertex to get\n'
              '    ///\n'
              '    /// \\return Const reference to the index-th vertex\n'
              '    ///\n'
              '    /// \\see getVertexCount\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Vertex& operator [](std::size_t index) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Clear the vertex array\n'
              '    ///\n'
              '    /// This function removes all the vertices from the array.\n'
              "    /// It doesn't deallocate the corresponding memory, so "
              'that\n'
              "    /// adding new vertices after clearing doesn't involve\n"
              '    /// reallocating all the memory.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void clear();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Resize the vertex array\n'
              '    ///\n'
              '    /// If \\a vertexCount is greater than the current size, '
              'the previous\n'
              '    /// vertices are kept and new (default-constructed) '
              'vertices are\n'
              '    /// added.\n'
              '    /// If \\a vertexCount is less than the current size, '
              'existing vertices\n'
              '    /// are removed from the array.\n'
              '    ///\n'
              '    /// \\param vertexCount New size of the array (number of '
              'vertices)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void resize(std::size_t vertexCount);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Add a vertex to the array\n'
              '    ///\n'
              '    /// \\param vertex Vertex to add\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void append(const Vertex& vertex);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the type of primitives to draw\n'
              '    ///\n'
              '    /// This function defines how the vertices must be '
              'interpreted\n'
              "    /// when it's time to draw them:\n"
              '    /// \\li As points\n'
              '    /// \\li As lines\n'
              '    /// \\li As triangles\n'
              '    /// \\li As quads\n'
              '    /// The default primitive type is sf::Points.\n'
              '    ///\n'
              '    /// \\param type Type of primitive\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPrimitiveType(PrimitiveType type);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the type of primitives drawn by the vertex '
              'array\n'
              '    ///\n'
              '    /// \\return Primitive type\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    PrimitiveType getPrimitiveType() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Compute the bounding rectangle of the vertex '
              'array\n'
              '    ///\n'
              '    /// This function returns the minimal axis-aligned '
              'rectangle\n'
              '    /// that contains all the vertices of the array.\n'
              '    ///\n'
              '    /// \\return Bounding rectangle of the vertex array\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    FloatRect getBounds() const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw the vertex array to a render target\n'
              '    ///\n'
              '    /// \\param target Render target to draw to\n'
              '    /// \\param states Current render states\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void draw(RenderTarget& target, RenderStates '
              'states) const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    std::vector<Vertex> m_vertices;      ///< Vertices '
              'contained in the array\n'
              '    PrimitiveType       m_primitiveType; ///< Type of '
              'primitives to draw\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000478',
         path='/Labirint Game/sfml/include/SFML/Graphics/VertexBuffer.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/VertexBuffer.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000479',
         path='/Labirint Game/sfml/include/SFML/Graphics/VertexBuffer.hpp',
         lineno=37,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class RenderTarget;\n'
              'class Vertex;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Vertex buffer storage for one or more 2D '
              'primitives\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API VertexBuffer : public Drawable, private '
              'GlResource\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Usage specifiers\n'
              '    ///\n'
              '    /// If data is going to be updated once or more every '
              'frame,\n'
              '    /// set the usage to Stream. If data is going to be set '
              'once\n'
              '    /// and used for a long time without being modified, set '
              'the\n'
              '    /// usage to Static. For everything else Dynamic should be '
              'a\n'
              '    /// good compromise.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Usage\n'
              '    {\n'
              '        Stream,  ///< Constantly changing data\n'
              '        Dynamic, ///< Occasionally changing data\n'
              '        Static   ///< Rarely changing data\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates an empty vertex buffer.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    VertexBuffer();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a VertexBuffer with a specific '
              'PrimitiveType\n'
              '    ///\n'
              '    /// Creates an empty vertex buffer and sets its primitive '
              'type to \\p type.\n'
              '    ///\n'
              '    /// \\param type Type of primitive\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit VertexBuffer(PrimitiveType type);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a VertexBuffer with a specific usage '
              'specifier\n'
              '    ///\n'
              '    /// Creates an empty vertex buffer and sets its usage to '
              '\\p usage.\n'
              '    ///\n'
              '    /// \\param usage Usage specifier\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit VertexBuffer(Usage usage);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a VertexBuffer with a specific '
              'PrimitiveType and usage specifier\n'
              '    ///\n'
              '    /// Creates an empty vertex buffer and sets its primitive '
              'type\n'
              '    /// to \\p type and usage to \\p usage.\n'
              '    ///\n'
              '    /// \\param type  Type of primitive\n'
              '    /// \\param usage Usage specifier\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    VertexBuffer(PrimitiveType type, Usage usage);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy constructor\n'
              '    ///\n'
              '    /// \\param copy instance to copy\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    VertexBuffer(const VertexBuffer& copy);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~VertexBuffer();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create the vertex buffer\n'
              '    ///\n'
              '    /// Creates the vertex buffer and allocates enough '
              'graphics\n'
              '    /// memory to hold \\p vertexCount vertices. Any '
              'previously\n'
              '    /// allocated memory is freed in the process.\n'
              '    ///\n'
              '    /// In order to deallocate previously allocated memory pass '
              '0\n'
              "    /// as \\p vertexCount. Don't forget to recreate with a "
              'non-zero\n'
              '    /// value when graphics memory should be allocated again.\n'
              '    ///\n'
              '    /// \\param vertexCount Number of vertices worth of memory '
              'to allocate\n'
              '    ///\n'
              '    /// \\return True if creation was successful\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool create(std::size_t vertexCount);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the vertex count\n'
              '    ///\n'
              '    /// \\return Number of vertices in the vertex buffer\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    std::size_t getVertexCount() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update the whole buffer from an array of '
              'vertices\n'
              '    ///\n'
              '    /// The \\a vertex array is assumed to have the same size '
              'as\n'
              '    /// the \\a created buffer.\n'
              '    ///\n'
              '    /// No additional check is performed on the size of the '
              'vertex\n'
              '    /// array, passing invalid arguments will lead to '
              'undefined\n'
              '    /// behavior.\n'
              '    ///\n'
              '    /// This function does nothing if \\a vertices is null or '
              'if the\n'
              '    /// buffer was not previously created.\n'
              '    ///\n'
              '    /// \\param vertices Array of vertices to copy to the '
              'buffer\n'
              '    ///\n'
              '    /// \\return True if the update was successful\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool update(const Vertex* vertices);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update a part of the buffer from an array of '
              'vertices\n'
              '    ///\n'
              '    /// \\p offset is specified as the number of vertices to '
              'skip\n'
              '    /// from the beginning of the buffer.\n'
              '    ///\n'
              '    /// If \\p offset is 0 and \\p vertexCount is equal to the '
              'size of\n'
              '    /// the currently created buffer, its whole contents are '
              'replaced.\n'
              '    ///\n'
              '    /// If \\p offset is 0 and \\p vertexCount is greater than '
              'the\n'
              '    /// size of the currently created buffer, a new buffer is '
              'created\n'
              '    /// containing the vertex data.\n'
              '    ///\n'
              '    /// If \\p offset is 0 and \\p vertexCount is less than the '
              'size of\n'
              '    /// the currently created buffer, only the corresponding '
              'region\n'
              '    /// is updated.\n'
              '    ///\n'
              '    /// If \\p offset is not 0 and \\p offset + \\p vertexCount '
              'is greater\n'
              '    /// than the size of the currently created buffer, the '
              'update fails.\n'
              '    ///\n'
              '    /// No additional check is performed on the size of the '
              'vertex\n'
              '    /// array, passing invalid arguments will lead to '
              'undefined\n'
              '    /// behavior.\n'
              '    ///\n'
              '    /// \\param vertices    Array of vertices to copy to the '
              'buffer\n'
              '    /// \\param vertexCount Number of vertices to copy\n'
              '    /// \\param offset      Offset in the buffer to copy to\n'
              '    ///\n'
              '    /// \\return True if the update was successful\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool update(const Vertex* vertices, std::size_t '
              'vertexCount, unsigned int offset);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy the contents of another buffer into this '
              'buffer\n'
              '    ///\n'
              '    /// \\param vertexBuffer Vertex buffer whose contents to '
              'copy into this vertex buffer\n'
              '    ///\n'
              '    /// \\return True if the copy was successful\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool update(const VertexBuffer& vertexBuffer);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Overload of assignment operator\n'
              '    ///\n'
              '    /// \\param right Instance to assign\n'
              '    ///\n'
              '    /// \\return Reference to self\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    VertexBuffer& operator =(const VertexBuffer& right);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Swap the contents of this vertex buffer with '
              'those of another\n'
              '    ///\n'
              '    /// \\param right Instance to swap with\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void swap(VertexBuffer& right);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the underlying OpenGL handle of the vertex '
              'buffer.\n'
              '    ///\n'
              "    /// You shouldn't need to use this function, unless you "
              'have\n'
              "    /// very specific stuff to implement that SFML doesn't "
              'support,\n'
              '    /// or implement a temporary workaround until a bug is '
              'fixed.\n'
              '    ///\n'
              '    /// \\return OpenGL handle of the vertex buffer or 0 if not '
              'yet created\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int getNativeHandle() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the type of primitives to draw\n'
              '    ///\n'
              '    /// This function defines how the vertices must be '
              'interpreted\n'
              "    /// when it's time to draw them.\n"
              '    ///\n'
              '    /// The default primitive type is sf::Points.\n'
              '    ///\n'
              '    /// \\param type Type of primitive\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPrimitiveType(PrimitiveType type);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the type of primitives drawn by the vertex '
              'buffer\n'
              '    ///\n'
              '    /// \\return Primitive type\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    PrimitiveType getPrimitiveType() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the usage specifier of this vertex buffer\n'
              '    ///\n'
              '    /// This function provides a hint about how this vertex '
              'buffer is\n'
              '    /// going to be used in terms of data update frequency.\n'
              '    ///\n'
              '    /// After changing the usage specifier, the vertex buffer '
              'has\n'
              '    /// to be updated with new data for the usage specifier to\n'
              '    /// take effect.\n'
              '    ///\n'
              '    /// The default primitive type is '
              'sf::VertexBuffer::Stream.\n'
              '    ///\n'
              '    /// \\param usage Usage specifier\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setUsage(Usage usage);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the usage specifier of this vertex buffer\n'
              '    ///\n'
              '    /// \\return Usage specifier\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Usage getUsage() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Bind a vertex buffer for rendering\n'
              '    ///\n'
              '    /// This function is not part of the graphics API, it '
              "mustn't be\n"
              '    /// used when drawing SFML entities. It must be used only '
              'if you\n'
              '    /// mix sf::VertexBuffer with OpenGL code.\n'
              '    ///\n'
              '    /// \\code\n'
              '    /// sf::VertexBuffer vb1, vb2;\n'
              '    /// ...\n'
              '    /// sf::VertexBuffer::bind(&vb1);\n'
              '    /// // draw OpenGL stuff that use vb1...\n'
              '    /// sf::VertexBuffer::bind(&vb2);\n'
              '    /// // draw OpenGL stuff that use vb2...\n'
              '    /// sf::VertexBuffer::bind(NULL);\n'
              '    /// // draw OpenGL stuff that use no vertex buffer...\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param vertexBuffer Pointer to the vertex buffer to '
              'bind, can be null to use no vertex buffer\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void bind(const VertexBuffer* vertexBuffer);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether or not the system supports vertex '
              'buffers\n'
              '    ///\n'
              '    /// This function should always be called before using\n'
              '    /// the vertex buffer features. If it returns false, then\n'
              '    /// any attempt to use sf::VertexBuffer will fail.\n'
              '    ///\n'
              '    /// \\return True if vertex buffers are supported, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isAvailable();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Draw the vertex buffer to a render target\n'
              '    ///\n'
              '    /// \\param target Render target to draw to\n'
              '    /// \\param states Current render states\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void draw(RenderTarget& target, RenderStates '
              'states) const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int  m_buffer;        ///< Internal buffer '
              'identifier\n'
              '    std::size_t   m_size;          ///< Size in Vertexes of the '
              'currently allocated buffer\n'
              '    PrimitiveType m_primitiveType; ///< Type of primitives to '
              'draw\n'
              '    Usage         m_usage;         ///< How this vertex buffer '
              'is to be used\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000480',
         path='/Labirint Game/sfml/include/SFML/Graphics/View.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Graphics/View.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000481',
         path='/Labirint Game/sfml/include/SFML/Graphics/View.hpp',
         lineno=37,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief 2D camera that defines what region is shown on '
              'screen\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_GRAPHICS_API View\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// This constructor creates a default view of (0, 0, 1000, '
              '1000)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    View();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the view from a rectangle\n'
              '    ///\n'
              '    /// \\param rectangle Rectangle defining the zone to '
              'display\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit View(const FloatRect& rectangle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the view from its center and size\n'
              '    ///\n'
              '    /// \\param center Center of the zone to display\n'
              '    /// \\param size   Size of zone to display\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    View(const Vector2f& center, const Vector2f& size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the center of the view\n'
              '    ///\n'
              '    /// \\param x X coordinate of the new center\n'
              '    /// \\param y Y coordinate of the new center\n'
              '    ///\n'
              '    /// \\see setSize, getCenter\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setCenter(float x, float y);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the center of the view\n'
              '    ///\n'
              '    /// \\param center New center\n'
              '    ///\n'
              '    /// \\see setSize, getCenter\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setCenter(const Vector2f& center);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the size of the view\n'
              '    ///\n'
              '    /// \\param width  New width of the view\n'
              '    /// \\param height New height of the view\n'
              '    ///\n'
              '    /// \\see setCenter, getCenter\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setSize(float width, float height);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the size of the view\n'
              '    ///\n'
              '    /// \\param size New size\n'
              '    ///\n'
              '    /// \\see setCenter, getCenter\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setSize(const Vector2f& size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the orientation of the view\n'
              '    ///\n'
              '    /// The default rotation of a view is 0 degree.\n'
              '    ///\n'
              '    /// \\param angle New angle, in degrees\n'
              '    ///\n'
              '    /// \\see getRotation\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setRotation(float angle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the target viewport\n'
              '    ///\n'
              '    /// The viewport is the rectangle into which the contents '
              'of the\n'
              '    /// view are displayed, expressed as a factor (between 0 '
              'and 1)\n'
              '    /// of the size of the RenderTarget to which the view is '
              'applied.\n'
              '    /// For example, a view which takes the left side of the '
              'target would\n'
              '    /// be defined with View.setViewport(sf::FloatRect(0, 0, '
              '0.5, 1)).\n'
              '    /// By default, a view has a viewport which covers the '
              'entire target.\n'
              '    ///\n'
              '    /// \\param viewport New viewport rectangle\n'
              '    ///\n'
              '    /// \\see getViewport\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setViewport(const FloatRect& viewport);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Reset the view to the given rectangle\n'
              '    ///\n'
              '    /// Note that this function resets the rotation angle to '
              '0.\n'
              '    ///\n'
              '    /// \\param rectangle Rectangle defining the zone to '
              'display\n'
              '    ///\n'
              '    /// \\see setCenter, setSize, setRotation\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void reset(const FloatRect& rectangle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the center of the view\n'
              '    ///\n'
              '    /// \\return Center of the view\n'
              '    ///\n'
              '    /// \\see getSize, setCenter\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Vector2f& getCenter() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the size of the view\n'
              '    ///\n'
              '    /// \\return Size of the view\n'
              '    ///\n'
              '    /// \\see getCenter, setSize\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Vector2f& getSize() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current orientation of the view\n'
              '    ///\n'
              '    /// \\return Rotation angle of the view, in degrees\n'
              '    ///\n'
              '    /// \\see setRotation\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float getRotation() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the target viewport rectangle of the view\n'
              '    ///\n'
              '    /// \\return Viewport rectangle, expressed as a factor of '
              'the target size\n'
              '    ///\n'
              '    /// \\see setViewport\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const FloatRect& getViewport() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Move the view relatively to its current '
              'position\n'
              '    ///\n'
              '    /// \\param offsetX X coordinate of the move offset\n'
              '    /// \\param offsetY Y coordinate of the move offset\n'
              '    ///\n'
              '    /// \\see setCenter, rotate, zoom\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void move(float offsetX, float offsetY);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Move the view relatively to its current '
              'position\n'
              '    ///\n'
              '    /// \\param offset Move offset\n'
              '    ///\n'
              '    /// \\see setCenter, rotate, zoom\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void move(const Vector2f& offset);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Rotate the view relatively to its current '
              'orientation\n'
              '    ///\n'
              '    /// \\param angle Angle to rotate, in degrees\n'
              '    ///\n'
              '    /// \\see setRotation, move, zoom\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void rotate(float angle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Resize the view rectangle relatively to its '
              'current size\n'
              '    ///\n'
              '    /// Resizing the view simulates a zoom, as the zone '
              'displayed on\n'
              '    /// screen grows or shrinks.\n'
              '    /// \\a factor is a multiplier:\n'
              '    /// \\li 1 keeps the size unchanged\n'
              '    /// \\li > 1 makes the view bigger (objects appear '
              'smaller)\n'
              '    /// \\li < 1 makes the view smaller (objects appear '
              'bigger)\n'
              '    ///\n'
              '    /// \\param factor Zoom factor to apply\n'
              '    ///\n'
              '    /// \\see setSize, move, rotate\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void zoom(float factor);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the projection transform of the view\n'
              '    ///\n'
              '    /// This function is meant for internal use only.\n'
              '    ///\n'
              '    /// \\return Projection transform defining the view\n'
              '    ///\n'
              '    /// \\see getInverseTransform\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Transform& getTransform() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the inverse projection transform of the '
              'view\n'
              '    ///\n'
              '    /// This function is meant for internal use only.\n'
              '    ///\n'
              '    /// \\return Inverse of the projection transform defining '
              'the view\n'
              '    ///\n'
              '    /// \\see getTransform\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const Transform& getInverseTransform() const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2f          m_center;              ///< Center of the '
              'view, in scene coordinates\n'
              '    Vector2f          m_size;                ///< Size of the '
              'view, in scene coordinates\n'
              '    float             m_rotation;            ///< Angle of '
              'rotation of the view rectangle, in degrees\n'
              '    FloatRect         m_viewport;            ///< Viewport '
              "rectangle, expressed as a factor of the render-target's size\n"
              '    mutable Transform m_transform;           ///< Precomputed '
              'projection transform corresponding to the view\n'
              '    mutable Transform m_inverseTransform;    ///< Precomputed '
              'inverse projection transform corresponding to the view\n'
              '    mutable bool      m_transformUpdated;    ///< Internal '
              'state telling if the transform needs to be updated\n'
              '    mutable bool      m_invTransformUpdated; ///< Internal '
              'state telling if the inverse transform needs to be updated\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000482',
         path='/Labirint Game/sfml/include/SFML/Main.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Main.hpp\n')

Fragment(uuid='NORMALIZED-000483',
         path='/Labirint Game/sfml/include/SFML/Network.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network.hpp\n')

Fragment(uuid='NORMALIZED-000484',
         path='/Labirint Game/sfml/include/SFML/Network/Export.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/Export.hpp\n')

Fragment(uuid='NORMALIZED-000485',
         path='/Labirint Game/sfml/include/SFML/Network/Ftp.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/Ftp.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000486',
         path='/Labirint Game/sfml/include/SFML/Network/Ftp.hpp',
         lineno=39,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class IpAddress;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief A FTP client\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_NETWORK_API Ftp : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enumeration of transfer modes\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum TransferMode\n'
              '    {\n'
              '        Binary, ///< Binary mode (file is transfered as a '
              'sequence of bytes)\n'
              '        Ascii,  ///< Text mode using ASCII encoding\n'
              '        Ebcdic  ///< Text mode using EBCDIC encoding\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Define a FTP response\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    class SFML_NETWORK_API Response\n'
              '    {\n'
              '    public:\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Status codes possibly returned by a FTP '
              'response\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        enum Status\n'
              '        {\n'
              '            // 1xx: the requested action is being initiated,\n'
              '            // expect another reply before proceeding with a '
              'new command\n'
              '            RestartMarkerReply          = 110, ///< Restart '
              'marker reply\n'
              '            ServiceReadySoon            = 120, ///< Service '
              'ready in N minutes\n'
              '            DataConnectionAlreadyOpened = 125, ///< Data '
              'connection already opened, transfer starting\n'
              '            OpeningDataConnection       = 150, ///< File status '
              'ok, about to open data connection\n'
              '\n'
              '            // 2xx: the requested action has been successfully '
              'completed\n'
              '            Ok                    = 200, ///< Command ok\n'
              '            PointlessCommand      = 202, ///< Command not '
              'implemented\n'
              '            SystemStatus          = 211, ///< System status, or '
              'system help reply\n'
              '            DirectoryStatus       = 212, ///< Directory status\n'
              '            FileStatus            = 213, ///< File status\n'
              '            HelpMessage           = 214, ///< Help message\n'
              '            SystemType            = 215, ///< NAME system type, '
              'where NAME is an official system name from the list in the '
              'Assigned Numbers document\n'
              '            ServiceReady          = 220, ///< Service ready for '
              'new user\n'
              '            ClosingConnection     = 221, ///< Service closing '
              'control connection\n'
              '            DataConnectionOpened  = 225, ///< Data connection '
              'open, no transfer in progress\n'
              '            ClosingDataConnection = 226, ///< Closing data '
              'connection, requested file action successful\n'
              '            EnteringPassiveMode   = 227, ///< Entering passive '
              'mode\n'
              '            LoggedIn              = 230, ///< User logged in, '
              'proceed. Logged out if appropriate\n'
              '            FileActionOk          = 250, ///< Requested file '
              'action ok\n'
              '            DirectoryOk           = 257, ///< PATHNAME created\n'
              '\n'
              '            // 3xx: the command has been accepted, but the '
              'requested action\n'
              '            // is dormant, pending receipt of further '
              'information\n'
              '            NeedPassword       = 331, ///< User name ok, need '
              'password\n'
              '            NeedAccountToLogIn = 332, ///< Need account for '
              'login\n'
              '            NeedInformation    = 350, ///< Requested file '
              'action pending further information\n'
              '\n'
              '            // 4xx: the command was not accepted and the '
              'requested action did not take place,\n'
              '            // but the error condition is temporary and the '
              'action may be requested again\n'
              '            ServiceUnavailable        = 421, ///< Service not '
              'available, closing control connection\n'
              "            DataConnectionUnavailable = 425, ///< Can't open "
              'data connection\n'
              '            TransferAborted           = 426, ///< Connection '
              'closed, transfer aborted\n'
              '            FileActionAborted         = 450, ///< Requested '
              'file action not taken\n'
              '            LocalError                = 451, ///< Requested '
              'action aborted, local error in processing\n'
              '            InsufficientStorageSpace  = 452, ///< Requested '
              'action not taken; insufficient storage space in system, file '
              'unavailable\n'
              '\n'
              '            // 5xx: the command was not accepted and\n'
              '            // the requested action did not take place\n'
              '            CommandUnknown          = 500, ///< Syntax error, '
              'command unrecognized\n'
              '            ParametersUnknown       = 501, ///< Syntax error in '
              'parameters or arguments\n'
              '            CommandNotImplemented   = 502, ///< Command not '
              'implemented\n'
              '            BadCommandSequence      = 503, ///< Bad sequence of '
              'commands\n'
              '            ParameterNotImplemented = 504, ///< Command not '
              'implemented for that parameter\n'
              '            NotLoggedIn             = 530, ///< Not logged in\n'
              '            NeedAccountToStore      = 532, ///< Need account '
              'for storing files\n'
              '            FileUnavailable         = 550, ///< Requested '
              'action not taken, file unavailable\n'
              '            PageTypeUnknown         = 551, ///< Requested '
              'action aborted, page type unknown\n'
              '            NotEnoughMemory         = 552, ///< Requested file '
              'action aborted, exceeded storage allocation\n'
              '            FilenameNotAllowed      = 553, ///< Requested '
              'action not taken, file name not allowed\n'
              '\n'
              '            // 10xx: SFML custom codes\n'
              '            InvalidResponse  = 1000, ///< Not part of the FTP '
              'standard, generated by SFML when a received response cannot be '
              'parsed\n'
              '            ConnectionFailed = 1001, ///< Not part of the FTP '
              'standard, generated by SFML when the low-level socket '
              'connection with the server fails\n'
              '            ConnectionClosed = 1002, ///< Not part of the FTP '
              'standard, generated by SFML when the low-level socket '
              'connection is unexpectedly closed\n'
              '            InvalidFile      = 1003  ///< Not part of the FTP '
              'standard, generated by SFML when a local file cannot be read or '
              'written\n'
              '        };\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Default constructor\n'
              '        ///\n'
              '        /// This constructor is used by the FTP client to '
              'build\n'
              '        /// the response.\n'
              '        ///\n'
              '        /// \\param code    Response status code\n'
              '        /// \\param message Response message\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        explicit Response(Status code = InvalidResponse, const '
              'std::string& message = "");\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Check if the status code means a success\n'
              '        ///\n'
              '        /// This function is defined for convenience, it is\n'
              '        /// equivalent to testing if the status code is < 400.\n'
              '        ///\n'
              '        /// \\return True if the status is a success, false if '
              'it is a failure\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        bool isOk() const;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Get the status code of the response\n'
              '        ///\n'
              '        /// \\return Status code\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        Status getStatus() const;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Get the full message contained in the '
              'response\n'
              '        ///\n'
              '        /// \\return The response message\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        const std::string& getMessage() const;\n'
              '\n'
              '    private:\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        // Member data\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        Status      m_status;  ///< Status code returned from '
              'the server\n'
              '        std::string m_message; ///< Last message received from '
              'the server\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specialization of FTP response returning a '
              'directory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    class SFML_NETWORK_API DirectoryResponse : public Response\n'
              '    {\n'
              '    public:\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Default constructor\n'
              '        ///\n'
              '        /// \\param response Source response\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        DirectoryResponse(const Response& response);\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Get the directory returned in the response\n'
              '        ///\n'
              '        /// \\return Directory name\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        const std::string& getDirectory() const;\n'
              '\n'
              '    private:\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        // Member data\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        std::string m_directory; ///< Directory extracted from '
              'the response message\n'
              '    };\n'
              '\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Specialization of FTP response returning a\n'
              '    ///        filename listing\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    class SFML_NETWORK_API ListingResponse : public Response\n'
              '    {\n'
              '    public:\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Default constructor\n'
              '        ///\n'
              '        /// \\param response  Source response\n'
              '        /// \\param data      Data containing the raw listing\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        ListingResponse(const Response& response, const '
              'std::string& data);\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Return the array of directory/file names\n'
              '        ///\n'
              '        /// \\return Array containing the requested listing\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        const std::vector<std::string>& getListing() const;\n'
              '\n'
              '    private:\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        // Member data\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        std::vector<std::string> m_listing; ///< Directory/file '
              'names extracted from the data\n'
              '    };\n'
              '\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    /// Automatically closes the connection with the server if\n'
              '    /// it is still opened.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Ftp();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Connect to the specified FTP server\n'
              '    ///\n'
              '    /// The port has a default value of 21, which is the '
              'standard\n'
              "    /// port used by the FTP protocol. You shouldn't use a "
              'different\n'
              '    /// value, unless you really know what you do.\n'
              '    /// This function tries to connect to the server so it may '
              'take\n'
              '    /// a while to complete, especially if the server is not\n'
              '    /// reachable. To avoid blocking your application for too '
              'long,\n'
              '    /// you can use a timeout. The default value, Time::Zero, '
              'means that the\n'
              '    /// system timeout will be used (which is usually pretty '
              'long).\n'
              '    ///\n'
              '    /// \\param server  Name or address of the FTP server to '
              'connect to\n'
              '    /// \\param port    Port used for the connection\n'
              '    /// \\param timeout Maximum time to wait\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see disconnect\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response connect(const IpAddress& server, unsigned short '
              'port = 21, Time timeout = Time::Zero);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Close the connection with the server\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see connect\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response disconnect();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Log in using an anonymous account\n'
              '    ///\n'
              '    /// Logging in is mandatory after connecting to the '
              'server.\n'
              '    /// Users that are not logged in cannot perform any '
              'operation.\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response login();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Log in using a username and a password\n'
              '    ///\n'
              '    /// Logging in is mandatory after connecting to the '
              'server.\n'
              '    /// Users that are not logged in cannot perform any '
              'operation.\n'
              '    ///\n'
              '    /// \\param name     User name\n'
              '    /// \\param password Password\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response login(const std::string& name, const std::string& '
              'password);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Send a null command to keep the connection '
              'alive\n'
              '    ///\n'
              '    /// This command is useful because the server may close '
              'the\n'
              '    /// connection automatically if no command is sent.\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response keepAlive();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current working directory\n'
              '    ///\n'
              '    /// The working directory is the root path for subsequent\n'
              '    /// operations involving directories and/or filenames.\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see getDirectoryListing, changeDirectory, '
              'parentDirectory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    DirectoryResponse getWorkingDirectory();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the contents of the given directory\n'
              '    ///\n'
              '    /// This function retrieves the sub-directories and files\n'
              '    /// contained in the given directory. It is not recursive.\n'
              '    /// The \\a directory parameter is relative to the current\n'
              '    /// working directory.\n'
              '    ///\n'
              '    /// \\param directory Directory to list\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see getWorkingDirectory, changeDirectory, '
              'parentDirectory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ListingResponse getDirectoryListing(const std::string& '
              'directory = "");\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current working directory\n'
              '    ///\n'
              '    /// The new directory must be relative to the current one.\n'
              '    ///\n'
              '    /// \\param directory New working directory\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see getWorkingDirectory, getDirectoryListing, '
              'parentDirectory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response changeDirectory(const std::string& directory);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Go to the parent directory of the current one\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see getWorkingDirectory, getDirectoryListing, '
              'changeDirectory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response parentDirectory();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create a new directory\n'
              '    ///\n'
              '    /// The new directory is created as a child of the current\n'
              '    /// working directory.\n'
              '    ///\n'
              '    /// \\param name Name of the directory to create\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see deleteDirectory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response createDirectory(const std::string& name);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Remove an existing directory\n'
              '    ///\n'
              '    /// The directory to remove must be relative to the\n'
              '    /// current working directory.\n'
              '    /// Use this function with caution, the directory will\n'
              '    /// be removed permanently!\n'
              '    ///\n'
              '    /// \\param name Name of the directory to remove\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see createDirectory\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response deleteDirectory(const std::string& name);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Rename an existing file\n'
              '    ///\n'
              '    /// The filenames must be relative to the current working\n'
              '    /// directory.\n'
              '    ///\n'
              '    /// \\param file    File to rename\n'
              '    /// \\param newName New name of the file\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see deleteFile\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response renameFile(const std::string& file, const '
              'std::string& newName);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Remove an existing file\n'
              '    ///\n'
              '    /// The file name must be relative to the current working\n'
              '    /// directory.\n'
              '    /// Use this function with caution, the file will be\n'
              '    /// removed permanently!\n'
              '    ///\n'
              '    /// \\param name File to remove\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see renameFile\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response deleteFile(const std::string& name);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Download a file from the server\n'
              '    ///\n'
              '    /// The filename of the distant file is relative to the\n'
              '    /// current working directory of the server, and the local\n'
              '    /// destination path is relative to the current directory\n'
              '    /// of your application.\n'
              '    /// If a file with the same filename as the distant file\n'
              '    /// already exists in the local destination path, it will\n'
              '    /// be overwritten.\n'
              '    ///\n'
              '    /// \\param remoteFile Filename of the distant file to '
              'download\n'
              '    /// \\param localPath  The directory in which to put the '
              'file on the local computer\n'
              '    /// \\param mode       Transfer mode\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see upload\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response download(const std::string& remoteFile, const '
              'std::string& localPath, TransferMode mode = Binary);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Upload a file to the server\n'
              '    ///\n'
              '    /// The name of the local file is relative to the current\n'
              '    /// working directory of your application, and the\n'
              '    /// remote path is relative to the current directory of '
              'the\n'
              '    /// FTP server.\n'
              '    ///\n'
              '    /// The append parameter controls whether the remote file '
              'is\n'
              '    /// appended to or overwritten if it already exists.\n'
              '    ///\n'
              '    /// \\param localFile  Path of the local file to upload\n'
              '    /// \\param remotePath The directory in which to put the '
              'file on the server\n'
              '    /// \\param mode       Transfer mode\n'
              '    /// \\param append     Pass true to append to or false to '
              'overwrite the remote file if it already exists\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    /// \\see download\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response upload(const std::string& localFile, const '
              'std::string& remotePath, TransferMode mode = Binary, bool '
              'append = false);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Send a command to the FTP server\n'
              '    ///\n'
              '    /// While the most often used commands are provided as '
              'member\n'
              '    /// functions in the sf::Ftp class, this method can be '
              'used\n'
              '    /// to send any FTP command to the server. If the command\n'
              '    /// requires one or more parameters, they can be specified\n'
              '    /// in \\a parameter. If the server returns information, '
              'you\n'
              '    /// can extract it from the response using '
              'Response::getMessage().\n'
              '    ///\n'
              '    /// \\param command   Command to send\n'
              '    /// \\param parameter Command parameter\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response sendCommand(const std::string& command, const '
              'std::string& parameter = "");\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Receive a response from the server\n'
              '    ///\n'
              '    /// This function must be called after each call to\n'
              '    /// sendCommand that expects a response.\n'
              '    ///\n'
              '    /// \\return Server response to the request\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response getResponse();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Utility class for exchanging datas with the '
              'server\n'
              '    ///        on the data channel\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    class DataChannel;\n'
              '\n'
              '    friend class DataChannel;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    TcpSocket   m_commandSocket; ///< Socket holding the '
              'control connection with the server\n'
              '    std::string m_receiveBuffer; ///< Received command data '
              'that is yet to be processed\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000487',
         path='/Labirint Game/sfml/include/SFML/Network/Http.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/Http.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000488',
         path='/Labirint Game/sfml/include/SFML/Network/Http.hpp',
         lineno=40,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief A HTTP client\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_NETWORK_API Http : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Define a HTTP request\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    class SFML_NETWORK_API Request\n'
              '    {\n'
              '    public:\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Enumerate the available HTTP methods for a '
              'request\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        enum Method\n'
              '        {\n'
              '            Get,   ///< Request in get mode, standard method to '
              'retrieve a page\n'
              '            Post,  ///< Request in post mode, usually to send '
              'data to a page\n'
              "            Head,  ///< Request a page's header only\n"
              '            Put,   ///< Request in put mode, useful for a REST '
              'API\n'
              '            Delete ///< Request in delete mode, useful for a '
              'REST API\n'
              '        };\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Default constructor\n'
              '        ///\n'
              '        /// This constructor creates a GET request, with the '
              'root\n'
              '        /// URI ("/") and an empty body.\n'
              '        ///\n'
              '        /// \\param uri    Target URI\n'
              '        /// \\param method Method to use for the request\n'
              "        /// \\param body   Content of the request's body\n"
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        Request(const std::string& uri = "/", Method method = '
              'Get, const std::string& body = "");\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Set the value of a field\n'
              '        ///\n'
              "        /// The field is created if it doesn't exist. The name "
              'of\n'
              '        /// the field is case-insensitive.\n'
              "        /// By default, a request doesn't contain any field "
              '(but the\n'
              '        /// mandatory fields are added later by the HTTP client '
              'when\n'
              '        /// sending the request).\n'
              '        ///\n'
              '        /// \\param field Name of the field to set\n'
              '        /// \\param value Value of the field\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        void setField(const std::string& field, const '
              'std::string& value);\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Set the request method\n'
              '        ///\n'
              '        /// See the Method enumeration for a complete list of '
              'all\n'
              '        /// the availale methods.\n'
              '        /// The method is Http::Request::Get by default.\n'
              '        ///\n'
              '        /// \\param method Method to use for the request\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        void setMethod(Method method);\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Set the requested URI\n'
              '        ///\n'
              '        /// The URI is the resource (usually a web page or a '
              'file)\n'
              '        /// that you want to get or post.\n'
              '        /// The URI is "/" (the root page) by default.\n'
              '        ///\n'
              '        /// \\param uri URI to request, relative to the host\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        void setUri(const std::string& uri);\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Set the HTTP version for the request\n'
              '        ///\n'
              '        /// The HTTP version is 1.0 by default.\n'
              '        ///\n'
              '        /// \\param major Major HTTP version number\n'
              '        /// \\param minor Minor HTTP version number\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        void setHttpVersion(unsigned int major, unsigned int '
              'minor);\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Set the body of the request\n'
              '        ///\n'
              '        /// The body of a request is optional and only makes '
              'sense\n'
              '        /// for POST requests. It is ignored for all other '
              'methods.\n'
              '        /// The body is empty by default.\n'
              '        ///\n'
              '        /// \\param body Content of the body\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        void setBody(const std::string& body);\n'
              '\n'
              '    private:\n'
              '\n'
              '        friend class Http;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Prepare the final request to send to the '
              'server\n'
              '        ///\n'
              '        /// This is used internally by Http before sending the\n'
              '        /// request to the web server.\n'
              '        ///\n'
              '        /// \\return String containing the request, ready to be '
              'sent\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        std::string prepare() const;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Check if the request defines a field\n'
              '        ///\n'
              '        /// This function uses case-insensitive comparisons.\n'
              '        ///\n'
              '        /// \\param field Name of the field to test\n'
              '        ///\n'
              '        /// \\return True if the field exists, false otherwise\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        bool hasField(const std::string& field) const;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        // Types\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        typedef std::map<std::string, std::string> FieldTable;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        // Member data\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        FieldTable   m_fields;       ///< Fields of the header '
              'associated to their value\n'
              '        Method       m_method;       ///< Method to use for the '
              'request\n'
              '        std::string  m_uri;          ///< Target URI of the '
              'request\n'
              '        unsigned int m_majorVersion; ///< Major HTTP version\n'
              '        unsigned int m_minorVersion; ///< Minor HTTP version\n'
              '        std::string  m_body;         ///< Body of the request\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Define a HTTP response\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    class SFML_NETWORK_API Response\n'
              '    {\n'
              '    public:\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Enumerate all the valid status codes for a '
              'response\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        enum Status\n'
              '        {\n'
              '            // 2xx: success\n'
              '            Ok             = 200, ///< Most common code '
              'returned when operation was successful\n'
              '            Created        = 201, ///< The resource has '
              'successfully been created\n'
              '            Accepted       = 202, ///< The request has been '
              'accepted, but will be processed later by the server\n'
              "            NoContent      = 204, ///< The server didn't send "
              'any data in return\n'
              '            ResetContent   = 205, ///< The server informs the '
              'client that it should clear the view (form) that caused the '
              'request to be sent\n'
              '            PartialContent = 206, ///< The server has sent a '
              'part of the resource, as a response to a partial GET request\n'
              '\n'
              '            // 3xx: redirection\n'
              '            MultipleChoices  = 300, ///< The requested page can '
              'be accessed from several locations\n'
              '            MovedPermanently = 301, ///< The requested page has '
              'permanently moved to a new location\n'
              '            MovedTemporarily = 302, ///< The requested page has '
              'temporarily moved to a new location\n'
              '            NotModified      = 304, ///< For conditional '
              "requests, means the requested page hasn't changed and doesn't "
              'need to be refreshed\n'
              '\n'
              '            // 4xx: client error\n'
              "            BadRequest          = 400, ///< The server couldn't "
              'understand the request (syntax error)\n'
              '            Unauthorized        = 401, ///< The requested page '
              'needs an authentication to be accessed\n'
              '            Forbidden           = 403, ///< The requested page '
              'cannot be accessed at all, even with authentication\n'
              '            NotFound            = 404, ///< The requested page '
              "doesn't exist\n"
              "            RangeNotSatisfiable = 407, ///< The server can't "
              'satisfy the partial GET request (with a "Range" header field)\n'
              '\n'
              '            // 5xx: server error\n'
              '            InternalServerError = 500, ///< The server '
              'encountered an unexpected error\n'
              "            NotImplemented      = 501, ///< The server doesn't "
              'implement a requested feature\n'
              '            BadGateway          = 502, ///< The gateway server '
              'has received an error from the source server\n'
              '            ServiceNotAvailable = 503, ///< The server is '
              'temporarily unavailable (overloaded, in maintenance, ...)\n'
              '            GatewayTimeout      = 504, ///< The gateway server '
              "couldn't receive a response from the source server\n"
              "            VersionNotSupported = 505, ///< The server doesn't "
              'support the requested HTTP version\n'
              '\n'
              '            // 10xx: SFML custom codes\n'
              '            InvalidResponse  = 1000, ///< Response is not a '
              'valid HTTP one\n'
              '            ConnectionFailed = 1001  ///< Connection with '
              'server failed\n'
              '        };\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Default constructor\n'
              '        ///\n'
              '        /// Constructs an empty response.\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        Response();\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Get the value of a field\n'
              '        ///\n'
              '        /// If the field \\a field is not found in the response '
              'header,\n'
              '        /// the empty string is returned. This function uses\n'
              '        /// case-insensitive comparisons.\n'
              '        ///\n'
              '        /// \\param field Name of the field to get\n'
              '        ///\n'
              '        /// \\return Value of the field, or empty string if not '
              'found\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        const std::string& getField(const std::string& field) '
              'const;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Get the response status code\n'
              '        ///\n'
              '        /// The status code should be the first thing to be '
              'checked\n'
              '        /// after receiving a response, it defines whether it '
              'is a\n'
              '        /// success, a failure or anything else (see the '
              'Status\n'
              '        /// enumeration).\n'
              '        ///\n'
              '        /// \\return Status code of the response\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        Status getStatus() const;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Get the major HTTP version number of the '
              'response\n'
              '        ///\n'
              '        /// \\return Major HTTP version number\n'
              '        ///\n'
              '        /// \\see getMinorHttpVersion\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        unsigned int getMajorHttpVersion() const;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Get the minor HTTP version number of the '
              'response\n'
              '        ///\n'
              '        /// \\return Minor HTTP version number\n'
              '        ///\n'
              '        /// \\see getMajorHttpVersion\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        unsigned int getMinorHttpVersion() const;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Get the body of the response\n'
              '        ///\n'
              '        /// The body of a response may contain:\n'
              '        /// \\li the requested page (for GET requests)\n'
              '        /// \\li a response from the server (for POST '
              'requests)\n'
              '        /// \\li nothing (for HEAD requests)\n'
              '        /// \\li an error message (in case of an error)\n'
              '        ///\n'
              '        /// \\return The response body\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        const std::string& getBody() const;\n'
              '\n'
              '    private:\n'
              '\n'
              '        friend class Http;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Construct the header from a response '
              'string\n'
              '        ///\n'
              '        /// This function is used by Http to build the '
              'response\n'
              '        /// of a request.\n'
              '        ///\n'
              '        /// \\param data Content of the response to parse\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        void parse(const std::string& data);\n'
              '\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Read values passed in the answer header\n'
              '        ///\n'
              '        /// This function is used by Http to extract values '
              'passed\n'
              '        /// in the response.\n'
              '        ///\n'
              '        /// \\param in String stream containing the header '
              'values\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        void parseFields(std::istream &in);\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        // Types\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        typedef std::map<std::string, std::string> FieldTable;\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        // Member data\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        FieldTable   m_fields;       ///< Fields of the header\n'
              '        Status       m_status;       ///< Status code\n'
              '        unsigned int m_majorVersion; ///< Major HTTP version\n'
              '        unsigned int m_minorVersion; ///< Minor HTTP version\n'
              '        std::string  m_body;         ///< Body of the response\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Http();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the HTTP client with the target host\n'
              '    ///\n'
              '    /// This is equivalent to calling setHost(host, port).\n'
              '    /// The port has a default value of 0, which means that '
              'the\n'
              '    /// HTTP client will use the right port according to the\n'
              '    /// protocol used (80 for HTTP). You should leave it like\n'
              '    /// this unless you really need a port other than the\n'
              '    /// standard one, or use an unknown protocol.\n'
              '    ///\n'
              '    /// \\param host Web server to connect to\n'
              '    /// \\param port Port to use for connection\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Http(const std::string& host, unsigned short port = 0);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the target host\n'
              '    ///\n'
              '    /// This function just stores the host address and port, '
              'it\n'
              "    /// doesn't actually connect to it until you send a "
              'request.\n'
              '    /// The port has a default value of 0, which means that '
              'the\n'
              '    /// HTTP client will use the right port according to the\n'
              '    /// protocol used (80 for HTTP). You should leave it like\n'
              '    /// this unless you really need a port other than the\n'
              '    /// standard one, or use an unknown protocol.\n'
              '    ///\n'
              '    /// \\param host Web server to connect to\n'
              '    /// \\param port Port to use for connection\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setHost(const std::string& host, unsigned short port = '
              '0);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Send a HTTP request and return the server's "
              'response.\n'
              '    ///\n'
              '    /// You must have a valid host before sending a request '
              '(see setHost).\n'
              '    /// Any missing mandatory header field in the request will '
              'be added\n'
              '    /// with an appropriate value.\n'
              "    /// Warning: this function waits for the server's response "
              'and may\n'
              "    /// not return instantly; use a thread if you don't want to "
              'block your\n'
              '    /// application, or use a timeout to limit the time to '
              'wait. A value\n'
              '    /// of Time::Zero means that the client will use the system '
              'default timeout\n'
              '    /// (which is usually pretty long).\n'
              '    ///\n'
              '    /// \\param request Request to send\n'
              '    /// \\param timeout Maximum time to wait\n'
              '    ///\n'
              "    /// \\return Server's response\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Response sendRequest(const Request& request, Time timeout = '
              'Time::Zero);\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    TcpSocket      m_connection; ///< Connection to the host\n'
              '    IpAddress      m_host;       ///< Web host address\n'
              '    std::string    m_hostName;   ///< Web host name\n'
              '    unsigned short m_port;       ///< Port used for connection '
              'with host\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000489',
         path='/Labirint Game/sfml/include/SFML/Network/IpAddress.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/IpAddress.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000490',
         path='/Labirint Game/sfml/include/SFML/Network/IpAddress.hpp',
         lineno=38,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Encapsulate an IPv4 network address\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_NETWORK_API IpAddress\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// This constructor creates an empty (invalid) address\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    IpAddress();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the address from a string\n'
              '    ///\n'
              '    /// Here \\a address can be either a decimal address\n'
              '    /// (ex: "192.168.1.56") or a network name (ex: '
              '"localhost").\n'
              '    ///\n'
              '    /// \\param address IP address or network name\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    IpAddress(const std::string& address);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the address from a string\n'
              '    ///\n'
              '    /// Here \\a address can be either a decimal address\n'
              '    /// (ex: "192.168.1.56") or a network name (ex: '
              '"localhost").\n'
              '    /// This is equivalent to the constructor taking a '
              'std::string\n'
              '    /// parameter, it is defined for convenience so that the\n'
              '    /// implicit conversions from literal strings to IpAddress '
              'work.\n'
              '    ///\n'
              '    /// \\param address IP address or network name\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    IpAddress(const char* address);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the address from 4 bytes\n'
              '    ///\n'
              '    /// Calling IpAddress(a, b, c, d) is equivalent to calling\n'
              '    /// IpAddress("a.b.c.d"), but safer as it doesn\'t have to\n'
              '    /// parse a string to get the address components.\n'
              '    ///\n'
              '    /// \\param byte0 First byte of the address\n'
              '    /// \\param byte1 Second byte of the address\n'
              '    /// \\param byte2 Third byte of the address\n'
              '    /// \\param byte3 Fourth byte of the address\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    IpAddress(Uint8 byte0, Uint8 byte1, Uint8 byte2, Uint8 '
              'byte3);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the address from a 32-bits integer\n'
              '    ///\n'
              '    /// This constructor uses the internal representation of\n'
              '    /// the address directly. It should be used for '
              'optimization\n'
              '    /// purposes, and only if you got that representation from\n'
              '    /// IpAddress::toInteger().\n'
              '    ///\n'
              '    /// \\param address 4 bytes of the address packed into a '
              '32-bits integer\n'
              '    ///\n'
              '    /// \\see toInteger\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit IpAddress(Uint32 address);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a string representation of the address\n'
              '    ///\n'
              '    /// The returned string is the decimal representation of '
              'the\n'
              '    /// IP address (like "192.168.1.56"), even if it was '
              'constructed\n'
              '    /// from a host name.\n'
              '    ///\n'
              '    /// \\return String representation of the address\n'
              '    ///\n'
              '    /// \\see toInteger\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    std::string toString() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get an integer representation of the address\n'
              '    ///\n'
              '    /// The returned number is the internal representation of '
              'the\n'
              '    /// address, and should be used for optimization purposes '
              'only\n'
              '    /// (like sending the address through a socket).\n'
              '    /// The integer produced by this function can then be '
              'converted\n'
              '    /// back to a sf::IpAddress with the proper constructor.\n'
              '    ///\n'
              '    /// \\return 32-bits unsigned integer representation of the '
              'address\n'
              '    ///\n'
              '    /// \\see toString\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Uint32 toInteger() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Get the computer's local address\n"
              '    ///\n'
              '    /// The local address is the address of the computer from '
              'the\n'
              '    /// LAN point of view, i.e. something like 192.168.1.56. It '
              'is\n'
              '    /// meaningful only for communications over the local '
              'network.\n'
              '    /// Unlike getPublicAddress, this function is fast and may '
              'be\n'
              '    /// used safely anywhere.\n'
              '    ///\n'
              '    /// \\return Local IP address of the computer\n'
              '    ///\n'
              '    /// \\see getPublicAddress\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static IpAddress getLocalAddress();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Get the computer's public address\n"
              '    ///\n'
              '    /// The public address is the address of the computer from '
              'the\n'
              '    /// internet point of view, i.e. something like '
              '89.54.1.169.\n'
              '    /// It is necessary for communications over the world wide '
              'web.\n'
              '    /// The only way to get a public address is to ask it to a\n'
              '    /// distant website; as a consequence, this function '
              'depends on\n'
              '    /// both your network connection and the server, and may '
              'be\n'
              '    /// very slow. You should use it as few as possible. '
              'Because\n'
              '    /// this function depends on the network connection and on '
              'a distant\n'
              "    /// server, you may use a time limit if you don't want your "
              'program\n'
              '    /// to be possibly stuck waiting in case there is a '
              'problem; this\n'
              '    /// limit is deactivated by default.\n'
              '    ///\n'
              '    /// \\param timeout Maximum time to wait\n'
              '    ///\n'
              '    /// \\return Public IP address of the computer\n'
              '    ///\n'
              '    /// \\see getLocalAddress\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static IpAddress getPublicAddress(Time timeout = '
              'Time::Zero);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Static member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static const IpAddress None;      ///< Value representing '
              'an empty/invalid address\n'
              '    static const IpAddress Any;       ///< Value representing '
              'any address (0.0.0.0)\n'
              '    static const IpAddress LocalHost; ///< The "localhost" '
              'address (for connecting a computer to itself locally)\n'
              '    static const IpAddress Broadcast; ///< The "broadcast" '
              'address (for sending UDP messages to everyone on a local '
              'network)\n'
              '\n'
              'private:\n'
              '\n'
              '    friend SFML_NETWORK_API bool operator <(const IpAddress& '
              'left, const IpAddress& right);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Resolve the given address string\n'
              '    ///\n'
              '    /// \\param address Address string\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void resolve(const std::string& address);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Uint32 m_address; ///< Address stored as an unsigned 32 '
              'bits integer\n'
              '    bool   m_valid;   ///< Is the address valid?\n'
              '};\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Overload of == operator to compare two IP '
              'addresses\n'
              '///\n'
              '/// \\param left  Left operand (a IP address)\n'
              '/// \\param right Right operand (a IP address)\n'
              '///\n'
              '/// \\return True if both addresses are equal\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_NETWORK_API bool operator ==(const IpAddress& left, const '
              'IpAddress& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Overload of != operator to compare two IP '
              'addresses\n'
              '///\n'
              '/// \\param left  Left operand (a IP address)\n'
              '/// \\param right Right operand (a IP address)\n'
              '///\n'
              '/// \\return True if both addresses are different\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_NETWORK_API bool operator !=(const IpAddress& left, const '
              'IpAddress& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Overload of < operator to compare two IP addresses\n'
              '///\n'
              '/// \\param left  Left operand (a IP address)\n'
              '/// \\param right Right operand (a IP address)\n'
              '///\n'
              '/// \\return True if \\a left is lesser than \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_NETWORK_API bool operator <(const IpAddress& left, const '
              'IpAddress& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Overload of > operator to compare two IP addresses\n'
              '///\n'
              '/// \\param left  Left operand (a IP address)\n'
              '/// \\param right Right operand (a IP address)\n'
              '///\n'
              '/// \\return True if \\a left is greater than \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_NETWORK_API bool operator >(const IpAddress& left, const '
              'IpAddress& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Overload of <= operator to compare two IP '
              'addresses\n'
              '///\n'
              '/// \\param left  Left operand (a IP address)\n'
              '/// \\param right Right operand (a IP address)\n'
              '///\n'
              '/// \\return True if \\a left is lesser or equal than \\a '
              'right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_NETWORK_API bool operator <=(const IpAddress& left, const '
              'IpAddress& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Overload of >= operator to compare two IP '
              'addresses\n'
              '///\n'
              '/// \\param left  Left operand (a IP address)\n'
              '/// \\param right Right operand (a IP address)\n'
              '///\n'
              '/// \\return True if \\a left is greater or equal than \\a '
              'right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_NETWORK_API bool operator >=(const IpAddress& left, const '
              'IpAddress& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Overload of >> operator to extract an IP address '
              'from an input stream\n'
              '///\n'
              '/// \\param stream  Input stream\n'
              '/// \\param address IP address to extract\n'
              '///\n'
              '/// \\return Reference to the input stream\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_NETWORK_API std::istream& operator >>(std::istream& '
              'stream, IpAddress& address);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Overload of << operator to print an IP address to '
              'an output stream\n'
              '///\n'
              '/// \\param stream  Output stream\n'
              '/// \\param address IP address to print\n'
              '///\n'
              '/// \\return Reference to the output stream\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_NETWORK_API std::ostream& operator <<(std::ostream& '
              'stream, const IpAddress& address);\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000491',
         path='/Labirint Game/sfml/include/SFML/Network/Packet.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/Packet.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000492',
         path='/Labirint Game/sfml/include/SFML/Network/Packet.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class String;\n'
              'class TcpSocket;\n'
              'class UdpSocket;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Utility class to build blocks of data to transfer\n'
              '///        over the network\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_NETWORK_API Packet\n'
              '{\n'
              '    // A bool-like type that cannot be converted to integer or '
              'pointer types\n'
              '    typedef bool (Packet::*BoolType)(std::size_t);\n'
              '\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates an empty packet.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Virtual destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~Packet();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Append data to the end of the packet\n'
              '    ///\n'
              '    /// \\param data        Pointer to the sequence of bytes to '
              'append\n'
              '    /// \\param sizeInBytes Number of bytes to append\n'
              '    ///\n'
              '    /// \\see clear\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void append(const void* data, std::size_t sizeInBytes);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Clear the packet\n'
              '    ///\n'
              '    /// After calling Clear, the packet is empty.\n'
              '    ///\n'
              '    /// \\see append\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void clear();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get a pointer to the data contained in the '
              'packet\n'
              '    ///\n'
              '    /// Warning: the returned pointer may become invalid after\n'
              '    /// you append data to the packet, therefore it should '
              'never\n'
              '    /// be stored.\n'
              '    /// The return pointer is NULL if the packet is empty.\n'
              '    ///\n'
              '    /// \\return Pointer to the data\n'
              '    ///\n'
              '    /// \\see getDataSize\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const void* getData() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the size of the data contained in the '
              'packet\n'
              '    ///\n'
              '    /// This function returns the number of bytes pointed to '
              'by\n'
              '    /// what getData returns.\n'
              '    ///\n'
              '    /// \\return Data size, in bytes\n'
              '    ///\n'
              '    /// \\see getData\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    std::size_t getDataSize() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell if the reading position has reached the\n'
              '    ///        end of the packet\n'
              '    ///\n'
              '    /// This function is useful to know if there is some data\n'
              '    /// left to be read, without actually reading it.\n'
              '    ///\n'
              '    /// \\return True if all data was read, false otherwise\n'
              '    ///\n'
              '    /// \\see operator bool\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool endOfPacket() const;\n'
              '\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Test the validity of the packet, for reading\n'
              '    ///\n'
              '    /// This operator allows to test the packet as a boolean\n'
              '    /// variable, to check if a reading operation was '
              'successful.\n'
              '    ///\n'
              '    /// A packet will be in an invalid state if it has no more\n'
              '    /// data to read.\n'
              '    ///\n'
              '    /// This behavior is the same as standard C++ streams.\n'
              '    ///\n'
              '    /// Usage example:\n'
              '    /// \\code\n'
              '    /// float x;\n'
              '    /// packet >> x;\n'
              '    /// if (packet)\n'
              '    /// {\n'
              '    ///    // ok, x was extracted successfully\n'
              '    /// }\n'
              '    ///\n'
              '    /// // -- or --\n'
              '    ///\n'
              '    /// float x;\n'
              '    /// if (packet >> x)\n'
              '    /// {\n'
              '    ///    // ok, x was extracted successfully\n'
              '    /// }\n'
              '    /// \\endcode\n'
              '    ///\n'
              "    /// Don't focus on the return type, it's equivalent to bool "
              'but\n'
              '    /// it disallows unwanted implicit conversions to integer '
              'or\n'
              '    /// pointer types.\n'
              '    ///\n'
              '    /// \\return True if last data extraction from packet was '
              'successful\n'
              '    ///\n'
              '    /// \\see endOfPacket\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    operator BoolType() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// Overload of operator >> to read data from the packet\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(bool&         data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(Int8&         data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(Uint8&        data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(Int16&        data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(Uint16&       data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(Int32&        data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(Uint32&       data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(Int64&        data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(Uint64&       data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(float&        data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(double&       data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(char*         data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(std::string&  data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(wchar_t*      data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(std::wstring& data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator >>(String&       data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// Overload of operator << to write data into the packet\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(bool                data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(Int8                data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(Uint8               data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(Int16               data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(Uint16              data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(Int32               data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(Uint32              data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(Int64               data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(Uint64              data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(float               data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(double              data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(const char*         data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(const std::string&  data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(const wchar_t*      data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(const std::wstring& data);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\overload\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Packet& operator <<(const String&       data);\n'
              '\n'
              'protected:\n'
              '\n'
              '    friend class TcpSocket;\n'
              '    friend class UdpSocket;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Called before the packet is sent over the '
              'network\n'
              '    ///\n'
              '    /// This function can be defined by derived classes to\n'
              '    /// transform the data before it is sent; this can be\n'
              '    /// used for compression, encryption, etc.\n'
              '    /// The function must return a pointer to the modified '
              'data,\n'
              '    /// as well as the number of bytes pointed.\n'
              "    /// The default implementation provides the packet's data\n"
              '    /// without transforming it.\n'
              '    ///\n'
              '    /// \\param size Variable to fill with the size of data to '
              'send\n'
              '    ///\n'
              '    /// \\return Pointer to the array of bytes to send\n'
              '    ///\n'
              '    /// \\see onReceive\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual const void* onSend(std::size_t& size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Called after the packet is received over the '
              'network\n'
              '    ///\n'
              '    /// This function can be defined by derived classes to\n'
              '    /// transform the data after it is received; this can be\n'
              '    /// used for decompression, decryption, etc.\n'
              '    /// The function receives a pointer to the received data,\n'
              '    /// and must fill the packet with the transformed bytes.\n'
              '    /// The default implementation fills the packet directly\n'
              '    /// without transforming the data.\n'
              '    ///\n'
              '    /// \\param data Pointer to the received bytes\n'
              '    /// \\param size Number of bytes\n'
              '    ///\n'
              '    /// \\see onSend\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void onReceive(const void* data, std::size_t '
              'size);\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// Disallow comparisons between packets\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool operator ==(const Packet& right) const;\n'
              '    bool operator !=(const Packet& right) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check if the packet can extract a given number '
              'of bytes\n'
              '    ///\n'
              '    /// This function updates accordingly the state of the '
              'packet.\n'
              '    ///\n'
              '    /// \\param size Size to check\n'
              '    ///\n'
              '    /// \\return True if \\a size bytes can be read from the '
              'packet\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool checkSize(std::size_t size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    std::vector<char> m_data;    ///< Data stored in the '
              'packet\n'
              '    std::size_t       m_readPos; ///< Current reading position '
              'in the packet\n'
              '    std::size_t       m_sendPos; ///< Current send position in '
              'the packet (for handling partial sends)\n'
              '    bool              m_isValid; ///< Reading state of the '
              'packet\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000493',
         path='/Labirint Game/sfml/include/SFML/Network/Socket.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/Socket.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000494',
         path='/Labirint Game/sfml/include/SFML/Network/Socket.hpp',
         lineno=37,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class SocketSelector;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Base class for all the socket types\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_NETWORK_API Socket : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Status codes that may be returned by socket '
              'functions\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Status\n'
              '    {\n'
              '        Done,         ///< The socket has sent / received the '
              'data\n'
              '        NotReady,     ///< The socket is not ready to send / '
              'receive data yet\n'
              '        Partial,      ///< The socket sent a part of the data\n'
              '        Disconnected, ///< The TCP socket has been '
              'disconnected\n'
              '        Error         ///< An unexpected error happened\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Some special values used by sockets\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum\n'
              '    {\n'
              '        AnyPort = 0 ///< Special value that tells the system to '
              'pick any available port\n'
              '    };\n'
              '\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~Socket();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the blocking state of the socket\n'
              '    ///\n'
              '    /// In blocking mode, calls will not return until they '
              'have\n'
              '    /// completed their task. For example, a call to Receive '
              'in\n'
              "    /// blocking mode won't return until some data was "
              'actually\n'
              '    /// received.\n'
              '    /// In non-blocking mode, calls will always return '
              'immediately,\n'
              '    /// using the return code to signal whether there was data\n'
              '    /// available or not.\n'
              '    /// By default, all sockets are blocking.\n'
              '    ///\n'
              '    /// \\param blocking True to set the socket as blocking, '
              'false for non-blocking\n'
              '    ///\n'
              '    /// \\see isBlocking\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setBlocking(bool blocking);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether the socket is in blocking or '
              'non-blocking mode\n'
              '    ///\n'
              '    /// \\return True if the socket is blocking, false '
              'otherwise\n'
              '    ///\n'
              '    /// \\see setBlocking\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool isBlocking() const;\n'
              '\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Types of protocols that the socket can use\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Type\n'
              '    {\n'
              '        Tcp, ///< TCP protocol\n'
              '        Udp  ///< UDP protocol\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// This constructor can only be accessed by derived '
              'classes.\n'
              '    ///\n'
              '    /// \\param type Type of the socket (TCP or UDP)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Socket(Type type);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the internal handle of the socket\n'
              '    ///\n'
              '    /// The returned handle may be invalid if the socket\n'
              '    /// was not created yet (or already destroyed).\n'
              '    /// This function can only be accessed by derived classes.\n'
              '    ///\n'
              '    /// \\return The internal (OS-specific) handle of the '
              'socket\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SocketHandle getHandle() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create the internal representation of the '
              'socket\n'
              '    ///\n'
              '    /// This function can only be accessed by derived classes.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void create();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create the internal representation of the '
              'socket\n'
              '    ///        from a socket handle\n'
              '    ///\n'
              '    /// This function can only be accessed by derived classes.\n'
              '    ///\n'
              '    /// \\param handle OS-specific handle of the socket to '
              'wrap\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void create(SocketHandle handle);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Close the socket gracefully\n'
              '    ///\n'
              '    /// This function can only be accessed by derived classes.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void close();\n'
              '\n'
              'private:\n'
              '\n'
              '    friend class SocketSelector;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Type         m_type;       ///< Type of the socket (TCP or '
              'UDP)\n'
              '    SocketHandle m_socket;     ///< Socket descriptor\n'
              '    bool         m_isBlocking; ///< Current blocking mode of '
              'the socket\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000495',
         path='/Labirint Game/sfml/include/SFML/Network/SocketHandle.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/SocketHandle.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000496',
         path='/Labirint Game/sfml/include/SFML/Network/SocketHandle.hpp',
         lineno=38,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '// Define the low-level socket handle type, specific to\n'
              '// each platform\n'
              '////////////////////////////////////////////////////////////\n'
              '#if defined(SFML_SYSTEM_WINDOWS)\n'
              '\n'
              '    typedef UINT_PTR SocketHandle;\n'
              '\n'
              '#else\n'
              '\n'
              '    typedef int SocketHandle;\n'
              '\n'
              '#endif\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000497',
         path='/Labirint Game/sfml/include/SFML/Network/SocketSelector.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/SocketSelector.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000498',
         path='/Labirint Game/sfml/include/SFML/Network/SocketSelector.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class Socket;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Multiplexer that allows to read from multiple '
              'sockets\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_NETWORK_API SocketSelector\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SocketSelector();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Copy constructor\n'
              '    ///\n'
              '    /// \\param copy Instance to copy\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SocketSelector(const SocketSelector& copy);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~SocketSelector();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Add a new socket to the selector\n'
              '    ///\n'
              '    /// This function keeps a weak reference to the socket,\n'
              '    /// so you have to make sure that the socket is not '
              'destroyed\n'
              '    /// while it is stored in the selector.\n'
              '    /// This function does nothing if the socket is not valid.\n'
              '    ///\n'
              '    /// \\param socket Reference to the socket to add\n'
              '    ///\n'
              '    /// \\see remove, clear\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void add(Socket& socket);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Remove a socket from the selector\n'
              '    ///\n'
              "    /// This function doesn't destroy the socket, it simply\n"
              '    /// removes the reference that the selector has to it.\n'
              '    ///\n'
              '    /// \\param socket Reference to the socket to remove\n'
              '    ///\n'
              '    /// \\see add, clear\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void remove(Socket& socket);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Remove all the sockets stored in the selector\n'
              '    ///\n'
              "    /// This function doesn't destroy any instance, it simply\n"
              '    /// removes all the references that the selector has to\n'
              '    /// external sockets.\n'
              '    ///\n'
              '    /// \\see add, remove\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void clear();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Wait until one or more sockets are ready to '
              'receive\n'
              '    ///\n'
              '    /// This function returns as soon as at least one socket '
              'has\n'
              '    /// some data available to be received. To know which '
              'sockets are\n'
              '    /// ready, use the isReady function.\n'
              '    /// If you use a timeout and no socket is ready before the '
              'timeout\n'
              '    /// is over, the function returns false.\n'
              '    ///\n'
              '    /// \\param timeout Maximum time to wait, (use Time::Zero '
              'for infinity)\n'
              '    ///\n'
              '    /// \\return True if there are sockets ready, false '
              'otherwise\n'
              '    ///\n'
              '    /// \\see isReady\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool wait(Time timeout = Time::Zero);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Test a socket to know if it is ready to receive '
              'data\n'
              '    ///\n'
              '    /// This function must be used after a call to Wait, to '
              'know\n'
              '    /// which sockets are ready to receive data. If a socket '
              'is\n'
              '    /// ready, a call to receive will never block because we '
              'know\n'
              '    /// that there is data available to read.\n'
              '    /// Note that if this function returns true for a '
              'TcpListener,\n'
              '    /// this means that it is ready to accept a new '
              'connection.\n'
              '    ///\n'
              '    /// \\param socket Socket to test\n'
              '    ///\n'
              '    /// \\return True if the socket is ready to read, false '
              'otherwise\n'
              '    ///\n'
              '    /// \\see isReady\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool isReady(Socket& socket) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Overload of assignment operator\n'
              '    ///\n'
              '    /// \\param right Instance to assign\n'
              '    ///\n'
              '    /// \\return Reference to self\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SocketSelector& operator =(const SocketSelector& right);\n'
              '\n'
              'private:\n'
              '\n'
              '    struct SocketSelectorImpl;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    SocketSelectorImpl* m_impl; ///< Opaque pointer to the '
              'implementation (which requires OS-specific types)\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000499',
         path='/Labirint Game/sfml/include/SFML/Network/TcpListener.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/TcpListener.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000500',
         path='/Labirint Game/sfml/include/SFML/Network/TcpListener.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class TcpSocket;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Socket that listens to new TCP connections\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_NETWORK_API TcpListener : public Socket\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    TcpListener();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the port to which the socket is bound '
              'locally\n'
              '    ///\n'
              '    /// If the socket is not listening to a port, this '
              'function\n'
              '    /// returns 0.\n'
              '    ///\n'
              '    /// \\return Port to which the socket is bound\n'
              '    ///\n'
              '    /// \\see listen\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned short getLocalPort() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Start listening for incoming connection '
              'attempts\n'
              '    ///\n'
              '    /// This function makes the socket start listening on the\n'
              '    /// specified port, waiting for incoming connection '
              'attempts.\n'
              '    ///\n'
              '    /// If the socket is already listening on a port when this\n'
              '    /// function is called, it will stop listening on the old\n'
              '    /// port before starting to listen on the new port.\n'
              '    ///\n'
              '    /// \\param port    Port to listen on for incoming '
              'connection attempts\n'
              '    /// \\param address Address of the interface to listen on\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see accept, close\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status listen(unsigned short port, const IpAddress& address '
              '= IpAddress::Any);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Stop listening and close the socket\n'
              '    ///\n'
              '    /// This function gracefully stops the listener. If the\n'
              '    /// socket is not listening, this function has no effect.\n'
              '    ///\n'
              '    /// \\see listen\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void close();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Accept a new connection\n'
              '    ///\n'
              '    /// If the socket is in blocking mode, this function will\n'
              '    /// not return until a connection is actually received.\n'
              '    ///\n'
              '    /// \\param socket Socket that will hold the new '
              'connection\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see listen\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status accept(TcpSocket& socket);\n'
              '};\n'
              '\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000501',
         path='/Labirint Game/sfml/include/SFML/Network/TcpSocket.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/TcpSocket.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000502',
         path='/Labirint Game/sfml/include/SFML/Network/TcpSocket.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class TcpListener;\n'
              'class IpAddress;\n'
              'class Packet;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Specialized socket using the TCP protocol\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_NETWORK_API TcpSocket : public Socket\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    TcpSocket();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the port to which the socket is bound '
              'locally\n'
              '    ///\n'
              '    /// If the socket is not connected, this function returns '
              '0.\n'
              '    ///\n'
              '    /// \\return Port to which the socket is bound\n'
              '    ///\n'
              '    /// \\see connect, getRemotePort\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned short getLocalPort() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the address of the connected peer\n'
              '    ///\n'
              '    /// It the socket is not connected, this function returns\n'
              '    /// sf::IpAddress::None.\n'
              '    ///\n'
              '    /// \\return Address of the remote peer\n'
              '    ///\n'
              '    /// \\see getRemotePort\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    IpAddress getRemoteAddress() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the port of the connected peer to which\n'
              '    ///        the socket is connected\n'
              '    ///\n'
              '    /// If the socket is not connected, this function returns '
              '0.\n'
              '    ///\n'
              '    /// \\return Remote port to which the socket is connected\n'
              '    ///\n'
              '    /// \\see getRemoteAddress\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned short getRemotePort() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Connect the socket to a remote peer\n'
              '    ///\n'
              '    /// In blocking mode, this function may take a while, '
              'especially\n'
              '    /// if the remote peer is not reachable. The last parameter '
              'allows\n'
              '    /// you to stop trying to connect after a given timeout.\n'
              '    /// If the socket is already connected, the connection is\n'
              '    /// forcibly disconnected before attempting to connect '
              'again.\n'
              '    ///\n'
              '    /// \\param remoteAddress Address of the remote peer\n'
              '    /// \\param remotePort    Port of the remote peer\n'
              '    /// \\param timeout       Optional maximum time to wait\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see disconnect\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status connect(const IpAddress& remoteAddress, unsigned '
              'short remotePort, Time timeout = Time::Zero);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Disconnect the socket from its remote peer\n'
              '    ///\n'
              '    /// This function gracefully closes the connection. If the\n'
              '    /// socket is not connected, this function has no effect.\n'
              '    ///\n'
              '    /// \\see connect\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void disconnect();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Send raw data to the remote peer\n'
              '    ///\n'
              '    /// To be able to handle partial sends over non-blocking\n'
              '    /// sockets, use the send(const void*, std::size_t, '
              'std::size_t&)\n'
              '    /// overload instead.\n'
              '    /// This function will fail if the socket is not '
              'connected.\n'
              '    ///\n'
              '    /// \\param data Pointer to the sequence of bytes to send\n'
              '    /// \\param size Number of bytes to send\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see receive\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status send(const void* data, std::size_t size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Send raw data to the remote peer\n'
              '    ///\n'
              '    /// This function will fail if the socket is not '
              'connected.\n'
              '    ///\n'
              '    /// \\param data Pointer to the sequence of bytes to send\n'
              '    /// \\param size Number of bytes to send\n'
              '    /// \\param sent The number of bytes sent will be written '
              'here\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see receive\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status send(const void* data, std::size_t size, '
              'std::size_t& sent);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Receive raw data from the remote peer\n'
              '    ///\n'
              '    /// In blocking mode, this function will wait until some\n'
              '    /// bytes are actually received.\n'
              '    /// This function will fail if the socket is not '
              'connected.\n'
              '    ///\n'
              '    /// \\param data     Pointer to the array to fill with the '
              'received bytes\n'
              '    /// \\param size     Maximum number of bytes that can be '
              'received\n'
              '    /// \\param received This variable is filled with the '
              'actual number of bytes received\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see send\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status receive(void* data, std::size_t size, std::size_t& '
              'received);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Send a formatted packet of data to the remote '
              'peer\n'
              '    ///\n'
              '    /// In non-blocking mode, if this function returns '
              'sf::Socket::Partial,\n'
              '    /// you \\em must retry sending the same unmodified packet '
              'before sending\n'
              '    /// anything else in order to guarantee the packet arrives '
              'at the remote\n'
              '    /// peer uncorrupted.\n'
              '    /// This function will fail if the socket is not '
              'connected.\n'
              '    ///\n'
              '    /// \\param packet Packet to send\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see receive\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status send(Packet& packet);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Receive a formatted packet of data from the '
              'remote peer\n'
              '    ///\n'
              '    /// In blocking mode, this function will wait until the '
              'whole packet\n'
              '    /// has been received.\n'
              '    /// This function will fail if the socket is not '
              'connected.\n'
              '    ///\n'
              '    /// \\param packet Packet to fill with the received data\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see send\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status receive(Packet& packet);\n'
              '\n'
              'private:\n'
              '\n'
              '    friend class TcpListener;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Structure holding the data of a pending packet\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct PendingPacket\n'
              '    {\n'
              '        PendingPacket();\n'
              '\n'
              '        Uint32            Size;         ///< Data of packet '
              'size\n'
              '        std::size_t       SizeReceived; ///< Number of size '
              'bytes received so far\n'
              '        std::vector<char> Data;         ///< Data of the '
              'packet\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    PendingPacket m_pendingPacket; ///< Temporary data of the '
              'packet currently being received\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000503',
         path='/Labirint Game/sfml/include/SFML/Network/UdpSocket.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Network/UdpSocket.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000504',
         path='/Labirint Game/sfml/include/SFML/Network/UdpSocket.hpp',
         lineno=37,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class Packet;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Specialized socket using the UDP protocol\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_NETWORK_API UdpSocket : public Socket\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Constants\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum\n'
              '    {\n'
              '        MaxDatagramSize = 65507 ///< The maximum number of '
              'bytes that can be sent in a single UDP datagram\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    UdpSocket();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the port to which the socket is bound '
              'locally\n'
              '    ///\n'
              '    /// If the socket is not bound to a port, this function\n'
              '    /// returns 0.\n'
              '    ///\n'
              '    /// \\return Port to which the socket is bound\n'
              '    ///\n'
              '    /// \\see bind\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned short getLocalPort() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Bind the socket to a specific port\n'
              '    ///\n'
              '    /// Binding the socket to a port is necessary for being\n'
              '    /// able to receive data on that port.\n'
              '    /// You can use the special value Socket::AnyPort to tell '
              'the\n'
              '    /// system to automatically pick an available port, and '
              'then\n'
              '    /// call getLocalPort to retrieve the chosen port.\n'
              '    ///\n'
              '    /// Since the socket can only be bound to a single port at\n'
              '    /// any given moment, if it is already bound when this\n'
              '    /// function is called, it will be unbound from the '
              'previous\n'
              '    /// port before being bound to the new one.\n'
              '    ///\n'
              '    /// \\param port    Port to bind the socket to\n'
              '    /// \\param address Address of the interface to bind to\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see unbind, getLocalPort\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status bind(unsigned short port, const IpAddress& address = '
              'IpAddress::Any);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Unbind the socket from the local port to which '
              'it is bound\n'
              '    ///\n'
              '    /// The port that the socket was previously bound to is '
              'immediately\n'
              '    /// made available to the operating system after this '
              'function is called.\n'
              '    /// This means that a subsequent call to bind() will be '
              'able to re-bind\n'
              '    /// the port if no other process has done so in the mean '
              'time.\n'
              '    /// If the socket is not bound to a port, this function has '
              'no effect.\n'
              '    ///\n'
              '    /// \\see bind\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void unbind();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Send raw data to a remote peer\n'
              '    ///\n'
              '    /// Make sure that \\a size is not greater than\n'
              '    /// UdpSocket::MaxDatagramSize, otherwise this function '
              'will\n'
              '    /// fail and no data will be sent.\n'
              '    ///\n'
              '    /// \\param data          Pointer to the sequence of bytes '
              'to send\n'
              '    /// \\param size          Number of bytes to send\n'
              '    /// \\param remoteAddress Address of the receiver\n'
              '    /// \\param remotePort    Port of the receiver to send the '
              'data to\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see receive\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status send(const void* data, std::size_t size, const '
              'IpAddress& remoteAddress, unsigned short remotePort);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Receive raw data from a remote peer\n'
              '    ///\n'
              '    /// In blocking mode, this function will wait until some\n'
              '    /// bytes are actually received.\n'
              '    /// Be careful to use a buffer which is large enough for\n'
              '    /// the data that you intend to receive, if it is too '
              'small\n'
              '    /// then an error will be returned and *all* the data will\n'
              '    /// be lost.\n'
              '    ///\n'
              '    /// \\param data          Pointer to the array to fill with '
              'the received bytes\n'
              '    /// \\param size          Maximum number of bytes that can '
              'be received\n'
              '    /// \\param received      This variable is filled with the '
              'actual number of bytes received\n'
              '    /// \\param remoteAddress Address of the peer that sent the '
              'data\n'
              '    /// \\param remotePort    Port of the peer that sent the '
              'data\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see send\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status receive(void* data, std::size_t size, std::size_t& '
              'received, IpAddress& remoteAddress, unsigned short& '
              'remotePort);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Send a formatted packet of data to a remote '
              'peer\n'
              '    ///\n'
              '    /// Make sure that the packet size is not greater than\n'
              '    /// UdpSocket::MaxDatagramSize, otherwise this function '
              'will\n'
              '    /// fail and no data will be sent.\n'
              '    ///\n'
              '    /// \\param packet        Packet to send\n'
              '    /// \\param remoteAddress Address of the receiver\n'
              '    /// \\param remotePort    Port of the receiver to send the '
              'data to\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see receive\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status send(Packet& packet, const IpAddress& remoteAddress, '
              'unsigned short remotePort);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Receive a formatted packet of data from a '
              'remote peer\n'
              '    ///\n'
              '    /// In blocking mode, this function will wait until the '
              'whole packet\n'
              '    /// has been received.\n'
              '    ///\n'
              '    /// \\param packet        Packet to fill with the received '
              'data\n'
              '    /// \\param remoteAddress Address of the peer that sent the '
              'data\n'
              '    /// \\param remotePort    Port of the peer that sent the '
              'data\n'
              '    ///\n'
              '    /// \\return Status code\n'
              '    ///\n'
              '    /// \\see send\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Status receive(Packet& packet, IpAddress& remoteAddress, '
              'unsigned short& remotePort);\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    std::vector<char> m_buffer; ///< Temporary buffer holding '
              'the received data in Receive(Packet)\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000505',
         path='/Labirint Game/sfml/include/SFML/OpenGL.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/OpenGL.hpp\n')

Fragment(uuid='NORMALIZED-000506',
         path='/Labirint Game/sfml/include/SFML/System.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System.hpp\n')

Fragment(uuid='NORMALIZED-000507',
         path='/Labirint Game/sfml/include/SFML/System/Clock.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Clock.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000508',
         path='/Labirint Game/sfml/include/SFML/System/Clock.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Utility class that measures the elapsed time\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_SYSTEM_API Clock\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// The clock starts automatically after being '
              'constructed.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Clock();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the elapsed time\n'
              '    ///\n'
              '    /// This function returns the time elapsed since the last '
              'call\n'
              '    /// to restart() (or the construction of the instance if '
              'restart()\n'
              '    /// has not been called).\n'
              '    ///\n'
              '    /// \\return Time elapsed\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time getElapsedTime() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Restart the clock\n'
              '    ///\n'
              '    /// This function puts the time counter back to zero.\n'
              '    /// It also returns the time elapsed since the clock was '
              'started.\n'
              '    ///\n'
              '    /// \\return Time elapsed\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time restart();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time m_startTime; ///< Time of last reset, in microseconds\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000509',
         path='/Labirint Game/sfml/include/SFML/System/Err.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Err.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000510',
         path='/Labirint Game/sfml/include/SFML/System/Err.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Standard stream used by SFML to output warnings and '
              'errors\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API std::ostream& err();\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000511',
         path='/Labirint Game/sfml/include/SFML/System/Export.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Export.hpp\n')

Fragment(uuid='NORMALIZED-000512',
         path='/Labirint Game/sfml/include/SFML/System/FileInputStream.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/FileInputStream.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000513',
         path='/Labirint Game/sfml/include/SFML/System/FileInputStream.hpp',
         lineno=49,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Implementation of input stream based on a file\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_SYSTEM_API FileInputStream : public InputStream, '
              'NonCopyable\n'
              '{\n'
              'public:\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    FileInputStream();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~FileInputStream();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open the stream from a file path\n'
              '    ///\n'
              '    /// \\param filename Name of the file to open\n'
              '    ///\n'
              '    /// \\return True on success, false on error\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool open(const std::string& filename);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Read data from the stream\n'
              '    ///\n'
              "    /// After reading, the stream's reading position must be\n"
              '    /// advanced by the amount of bytes read.\n'
              '    ///\n'
              '    /// \\param data Buffer where to copy the read data\n'
              '    /// \\param size Desired number of bytes to read\n'
              '    ///\n'
              '    /// \\return The number of bytes actually read, or -1 on '
              'error\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 read(void* data, Int64 size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current reading position\n'
              '    ///\n'
              '    /// \\param position The position to seek to, from the '
              'beginning\n'
              '    ///\n'
              '    /// \\return The position actually sought to, or -1 on '
              'error\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 seek(Int64 position);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current reading position in the stream\n'
              '    ///\n'
              '    /// \\return The current position, or -1 on error.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 tell();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the size of the stream\n'
              '    ///\n'
              '    /// \\return The total number of bytes available in the '
              'stream, or -1 on error\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 getSize();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '#ifdef SFML_SYSTEM_ANDROID\n'
              '    priv::ResourceStream* m_file;\n'
              '#else\n'
              '    std::FILE* m_file; ///< stdio file stream\n'
              '#endif\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000514',
         path='/Labirint Game/sfml/include/SFML/System/InputStream.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/InputStream.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000515',
         path='/Labirint Game/sfml/include/SFML/System/InputStream.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Abstract class for custom file input streams\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_SYSTEM_API InputStream\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Virtual destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~InputStream() {}\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Read data from the stream\n'
              '    ///\n'
              "    /// After reading, the stream's reading position must be\n"
              '    /// advanced by the amount of bytes read.\n'
              '    ///\n'
              '    /// \\param data Buffer where to copy the read data\n'
              '    /// \\param size Desired number of bytes to read\n'
              '    ///\n'
              '    /// \\return The number of bytes actually read, or -1 on '
              'error\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 read(void* data, Int64 size) = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current reading position\n'
              '    ///\n'
              '    /// \\param position The position to seek to, from the '
              'beginning\n'
              '    ///\n'
              '    /// \\return The position actually sought to, or -1 on '
              'error\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 seek(Int64 position) = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current reading position in the stream\n'
              '    ///\n'
              '    /// \\return The current position, or -1 on error.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 tell() = 0;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the size of the stream\n'
              '    ///\n'
              '    /// \\return The total number of bytes available in the '
              'stream, or -1 on error\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 getSize() = 0;\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000516',
         path='/Labirint Game/sfml/include/SFML/System/Lock.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Lock.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000517',
         path='/Labirint Game/sfml/include/SFML/System/Lock.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class Mutex;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Automatic wrapper for locking and unlocking '
              'mutexes\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_SYSTEM_API Lock : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the lock with a target mutex\n'
              '    ///\n'
              '    /// The mutex passed to sf::Lock is automatically locked.\n'
              '    ///\n'
              '    /// \\param mutex Mutex to lock\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit Lock(Mutex& mutex);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    /// The destructor of sf::Lock automatically unlocks its '
              'mutex.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Lock();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Mutex& m_mutex; ///< Mutex to lock / unlock\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000518',
         path='/Labirint Game/sfml/include/SFML/System/MemoryInputStream.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint '
              'Game/sfml/include/SFML/System/MemoryInputStream.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000519',
         path='/Labirint Game/sfml/include/SFML/System/MemoryInputStream.hpp',
         lineno=37,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Implementation of input stream based on a memory '
              'chunk\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_SYSTEM_API MemoryInputStream : public InputStream\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    MemoryInputStream();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Open the stream from its data\n'
              '    ///\n'
              '    /// \\param data        Pointer to the data in memory\n'
              '    /// \\param sizeInBytes Size of the data, in bytes\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void open(const void* data, std::size_t sizeInBytes);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Read data from the stream\n'
              '    ///\n'
              "    /// After reading, the stream's reading position must be\n"
              '    /// advanced by the amount of bytes read.\n'
              '    ///\n'
              '    /// \\param data Buffer where to copy the read data\n'
              '    /// \\param size Desired number of bytes to read\n'
              '    ///\n'
              '    /// \\return The number of bytes actually read, or -1 on '
              'error\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 read(void* data, Int64 size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the current reading position\n'
              '    ///\n'
              '    /// \\param position The position to seek to, from the '
              'beginning\n'
              '    ///\n'
              '    /// \\return The position actually sought to, or -1 on '
              'error\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 seek(Int64 position);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current reading position in the stream\n'
              '    ///\n'
              '    /// \\return The current position, or -1 on error.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 tell();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the size of the stream\n'
              '    ///\n'
              '    /// \\return The total number of bytes available in the '
              'stream, or -1 on error\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual Int64 getSize();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const char* m_data;   ///< Pointer to the data in memory\n'
              '    Int64       m_size;   ///< Total size of the data\n'
              '    Int64       m_offset; ///< Current reading position\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000520',
         path='/Labirint Game/sfml/include/SFML/System/Mutex.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Mutex.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000521',
         path='/Labirint Game/sfml/include/SFML/System/Mutex.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'namespace priv\n'
              '{\n'
              '    class MutexImpl;\n'
              '}\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Blocks concurrent access to shared resources\n'
              '///        from multiple threads\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_SYSTEM_API Mutex : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Mutex();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Mutex();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Lock the mutex\n'
              '    ///\n'
              '    /// If the mutex is already locked in another thread,\n'
              '    /// this call will block the execution until the mutex\n'
              '    /// is released.\n'
              '    ///\n'
              '    /// \\see unlock\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void lock();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Unlock the mutex\n'
              '    ///\n'
              '    /// \\see lock\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void unlock();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    priv::MutexImpl* m_mutexImpl; ///< OS-specific '
              'implementation\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000522',
         path='/Labirint Game/sfml/include/SFML/System/NativeActivity.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/NativeActivity.hpp\n'
              '  Namespaces: sf\n'
              '  Structs: ANativeActivity\n')

Fragment(uuid='NORMALIZED-000523',
         path='/Labirint Game/sfml/include/SFML/System/NativeActivity.hpp',
         lineno=40,
         depth=2,
         type='struct_decl',
         name='ANativeActivity',
         text='')

Fragment(uuid='NORMALIZED-000524',
         path='/Labirint Game/sfml/include/SFML/System/NativeActivity.hpp',
         lineno=42,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\ingroup system\n'
              '/// \\brief Return a pointer to the Android native activity\n'
              '///\n'
              "/// You shouldn't have to use this function, unless you want\n"
              "/// to implement very specific details, that SFML doesn't\n"
              '/// support, or to use a workaround for a known issue.\n'
              '///\n'
              '/// \\return Pointer to Android native activity structure\n'
              '///\n'
              '/// \\sfplatform{Android,SFML/System/NativeActivity.hpp}\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API ANativeActivity* getNativeActivity();\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000525',
         path='/Labirint Game/sfml/include/SFML/System/NonCopyable.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/NonCopyable.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000526',
         path='/Labirint Game/sfml/include/SFML/System/NonCopyable.hpp',
         lineno=34,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Utility class that makes any derived\n'
              '///        class non-copyable\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_SYSTEM_API NonCopyable\n'
              '{\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Because this class has a copy constructor, the '
              'compiler\n'
              '    /// will not automatically generate the default '
              'constructor.\n'
              "    /// That's why we must define it explicitly.\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    NonCopyable() {}\n'
              '    \n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default destructor\n'
              '    ///\n'
              "    /// By declaring a protected destructor it's impossible to\n"
              '    /// call delete on a pointer of sf::NonCopyable, thus\n'
              '    /// preventing possible resource leaks.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~NonCopyable() {}\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Disabled copy constructor\n'
              '    ///\n'
              '    /// By making the copy constructor private, the compiler '
              'will\n'
              '    /// trigger an error if anyone outside tries to use it.\n'
              '    /// To prevent NonCopyable or friend classes from using '
              'it,\n'
              '    /// we also give no definition, so that the linker will\n'
              '    /// produce an error if the first protection was '
              'inefficient.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    NonCopyable(const NonCopyable&);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Disabled assignment operator\n'
              '    ///\n'
              '    /// By making the assignment operator private, the compiler '
              'will\n'
              '    /// trigger an error if anyone outside tries to use it.\n'
              '    /// To prevent NonCopyable or friend classes from using '
              'it,\n'
              '    /// we also give no definition, so that the linker will\n'
              '    /// produce an error if the first protection was '
              'inefficient.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    NonCopyable& operator =(const NonCopyable&);\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000527',
         path='/Labirint Game/sfml/include/SFML/System/Sleep.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Sleep.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000528',
         path='/Labirint Game/sfml/include/SFML/System/Sleep.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\ingroup system\n'
              '/// \\brief Make the current thread sleep for a given duration\n'
              '///\n'
              '/// sf::sleep is the best way to block a program or one of its\n'
              "/// threads, as it doesn't consume any CPU power.\n"
              '///\n'
              '/// \\param duration Time to sleep\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'void SFML_SYSTEM_API sleep(Time duration);\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000529',
         path='/Labirint Game/sfml/include/SFML/System/String.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/String.hpp\n')

Fragment(uuid='NORMALIZED-000530',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000531',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000532',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint Game/sfml/include/SFML/System/String.inl\n')

Fragment(uuid='NORMALIZED-000533',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n// SFML - Simple and Fast Multimedia Library')

Fragment(uuid='NORMALIZED-000534',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)')

Fragment(uuid='NORMALIZED-000535',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000536',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "// This software is provided 'as-is', without any express or "
              'implied warranty.')

Fragment(uuid='NORMALIZED-000537',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// In no event will the authors be held liable for any damages '
              'arising from the use of this software.')

Fragment(uuid='NORMALIZED-000538',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000539',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Permission is granted to anyone to use this software for any '
              'purpose,')

Fragment(uuid='NORMALIZED-000540',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// including commercial applications, and to alter it and '
              'redistribute it freely,')

Fragment(uuid='NORMALIZED-000541',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n// subject to the following restrictions:')

Fragment(uuid='NORMALIZED-000542',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000543',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n// 1. The origin of this software must not be misrepresented;')

Fragment(uuid='NORMALIZED-000544',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n//    you must not claim that you wrote the original software.')

Fragment(uuid='NORMALIZED-000545',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n//    If you use this software in a product, an acknowledgment')

Fragment(uuid='NORMALIZED-000546',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    in the product documentation would be appreciated but is '
              'not required.')

Fragment(uuid='NORMALIZED-000547',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000548',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n// 2. Altered source versions must be plainly marked as such,')

Fragment(uuid='NORMALIZED-000549',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    and must not be misrepresented as being the original '
              'software.')

Fragment(uuid='NORMALIZED-000550',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000551',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// 3. This notice may not be removed or altered from any source '
              'distribution.')

Fragment(uuid='NORMALIZED-000552',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000553',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000554',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000555',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000556',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'String String::fromUtf8(T begin, T end)\n'
              '{\n'
              '    String string;\n'
              '    Utf8::toUtf32(begin, end, '
              'std::back_inserter(string.m_string));\n'
              '    return string;\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000557',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'String String::fromUtf16(T begin, T end)\n'
              '{\n'
              '    String string;\n'
              '    Utf16::toUtf32(begin, end, '
              'std::back_inserter(string.m_string));\n'
              '    return string;\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000558',
         path='/Labirint Game/sfml/include/SFML/System/String.inl',
         lineno=45,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'String String::fromUtf32(T begin, T end)\n'
              '{\n'
              '    String string;\n'
              '    string.m_string.assign(begin, end);\n'
              '    return string;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000559',
         path='/Labirint Game/sfml/include/SFML/System/Thread.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Thread.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000560',
         path='/Labirint Game/sfml/include/SFML/System/Thread.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'namespace priv\n'
              '{\n'
              '    class ThreadImpl;\n'
              '    struct ThreadFunc;\n'
              '}\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Utility class to manipulate threads\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_SYSTEM_API Thread : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the thread from a functor with no '
              'argument\n'
              '    ///\n'
              '    /// This constructor works for function objects, as well\n'
              '    /// as free functions.\n'
              '    ///\n'
              '    /// Use this constructor for this kind of function:\n'
              '    /// \\code\n'
              '    /// void function();\n'
              '    ///\n'
              '    /// // --- or ----\n'
              '    ///\n'
              '    /// struct Functor\n'
              '    /// {\n'
              '    ///     void operator()();\n'
              '    /// };\n'
              '    /// \\endcode\n'
              '    /// Note: this does *not* run the thread, use launch().\n'
              '    ///\n'
              '    /// \\param function Functor or free function to use as the '
              'entry point of the thread\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename F>\n'
              '    Thread(F function);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the thread from a functor with an '
              'argument\n'
              '    ///\n'
              '    /// This constructor works for function objects, as well\n'
              '    /// as free functions.\n'
              '    /// It is a template, which means that the argument can\n'
              '    /// have any type (int, std::string, void*, Toto, ...).\n'
              '    ///\n'
              '    /// Use this constructor for this kind of function:\n'
              '    /// \\code\n'
              '    /// void function(int arg);\n'
              '    ///\n'
              '    /// // --- or ----\n'
              '    ///\n'
              '    /// struct Functor\n'
              '    /// {\n'
              '    ///     void operator()(std::string arg);\n'
              '    /// };\n'
              '    /// \\endcode\n'
              '    /// Note: this does *not* run the thread, use launch().\n'
              '    ///\n'
              '    /// \\param function Functor or free function to use as the '
              'entry point of the thread\n'
              '    /// \\param argument argument to forward to the function\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename F, typename A>\n'
              '    Thread(F function, A argument);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the thread from a member function and '
              'an object\n'
              '    ///\n'
              '    /// This constructor is a template, which means that you '
              'can\n'
              '    /// use it with any class.\n'
              '    /// Use this constructor for this kind of function:\n'
              '    /// \\code\n'
              '    /// class MyClass\n'
              '    /// {\n'
              '    /// public:\n'
              '    ///\n'
              '    ///     void function();\n'
              '    /// };\n'
              '    /// \\endcode\n'
              '    /// Note: this does *not* run the thread, use launch().\n'
              '    ///\n'
              '    /// \\param function Entry point of the thread\n'
              '    /// \\param object Pointer to the object to use\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename C>\n'
              '    Thread(void(C::*function)(), C* object);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    /// This destructor calls wait(), so that the internal '
              'thread\n'
              '    /// cannot survive after its sf::Thread instance is '
              'destroyed.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Thread();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Run the thread\n'
              '    ///\n'
              '    /// This function starts the entry point passed to the\n'
              "    /// thread's constructor, and returns immediately.\n"
              "    /// After this function returns, the thread's function is\n"
              '    /// running in parallel to the calling code.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void launch();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Wait until the thread finishes\n'
              '    ///\n'
              '    /// This function will block the execution until the\n'
              "    /// thread's function ends.\n"
              '    /// Warning: if the thread function never ends, the '
              'calling\n'
              '    /// thread will block forever.\n'
              '    /// If this function is called from its owner thread, it\n'
              '    /// returns without doing anything.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void wait();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Terminate the thread\n'
              '    ///\n'
              '    /// This function immediately stops the thread, without '
              'waiting\n'
              '    /// for its function to finish.\n'
              '    /// Terminating a thread with this function is not safe,\n'
              '    /// and can lead to local variables not being destroyed\n'
              '    /// on some operating systems. You should rather try to '
              'make\n'
              '    /// the thread function terminate by itself.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void terminate();\n'
              '\n'
              'private:\n'
              '\n'
              '    friend class priv::ThreadImpl;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Internal entry point of the thread\n'
              '    ///\n'
              '    /// This function is called by the thread implementation.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void run();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    priv::ThreadImpl* m_impl;       ///< OS-specific '
              'implementation of the thread\n'
              '    priv::ThreadFunc* m_entryPoint; ///< Abstraction of the '
              'function to run\n'
              '};\n'
              '\n'
              '#include <SFML/System/Thread.inl>\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000561',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000562',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000563',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint Game/sfml/include/SFML/System/Thread.inl\n')

Fragment(uuid='NORMALIZED-000564',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n// SFML - Simple and Fast Multimedia Library')

Fragment(uuid='NORMALIZED-000565',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)')

Fragment(uuid='NORMALIZED-000566',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000567',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "// This software is provided 'as-is', without any express or "
              'implied warranty.')

Fragment(uuid='NORMALIZED-000568',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// In no event will the authors be held liable for any damages '
              'arising from the use of this software.')

Fragment(uuid='NORMALIZED-000569',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000570',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Permission is granted to anyone to use this software for any '
              'purpose,')

Fragment(uuid='NORMALIZED-000571',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// including commercial applications, and to alter it and '
              'redistribute it freely,')

Fragment(uuid='NORMALIZED-000572',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n// subject to the following restrictions:')

Fragment(uuid='NORMALIZED-000573',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000574',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n// 1. The origin of this software must not be misrepresented;')

Fragment(uuid='NORMALIZED-000575',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n//    you must not claim that you wrote the original software.')

Fragment(uuid='NORMALIZED-000576',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n//    If you use this software in a product, an acknowledgment')

Fragment(uuid='NORMALIZED-000577',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    in the product documentation would be appreciated but is '
              'not required.')

Fragment(uuid='NORMALIZED-000578',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000579',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n// 2. Altered source versions must be plainly marked as such,')

Fragment(uuid='NORMALIZED-000580',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    and must not be misrepresented as being the original '
              'software.')

Fragment(uuid='NORMALIZED-000581',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000582',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// 3. This notice may not be removed or altered from any source '
              'distribution.')

Fragment(uuid='NORMALIZED-000583',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000584',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000585',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000586',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'namespace priv\n'
              '{\n'
              '// Base class for abstract thread functions\n'
              'struct ThreadFunc\n'
              '{\n'
              '    virtual ~ThreadFunc() {}\n'
              '    virtual void run() = 0;\n'
              '};\n')

Fragment(uuid='NORMALIZED-000587',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '// Specialization using a functor (including free functions) '
              'with no argument\n'
              'template <typename T>\n'
              'struct ThreadFunctor : ThreadFunc\n'
              '{\n'
              '    ThreadFunctor(T functor) : m_functor(functor) {}\n'
              '    virtual void run() {m_functor();}\n'
              '    T m_functor;\n'
              '};\n')

Fragment(uuid='NORMALIZED-000588',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=42,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '// Specialization using a functor (including free functions) '
              'with one argument\n'
              'template <typename F, typename A>\n'
              'struct ThreadFunctorWithArg : ThreadFunc\n'
              '{\n'
              '    ThreadFunctorWithArg(F function, A arg) : '
              'm_function(function), m_arg(arg) {}\n'
              '    virtual void run() {m_function(m_arg);}\n'
              '    F m_function;\n'
              '    A m_arg;\n'
              '};\n')

Fragment(uuid='NORMALIZED-000589',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '// Specialization using a member function\n'
              'template <typename C>\n'
              'struct ThreadMemberFunc : ThreadFunc\n'
              '{\n'
              '    ThreadMemberFunc(void(C::*function)(), C* object) : '
              'm_function(function), m_object(object) {}\n'
              '    virtual void run() {(m_object->*m_function)();}\n'
              '    void(C::*m_function)();\n'
              '    C* m_object;\n'
              '};\n')

Fragment(uuid='NORMALIZED-000590',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=62,
         depth=1,
         type='documentation',
         name='',
         text='\n} // namespace priv\n\n')

Fragment(uuid='NORMALIZED-000591',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=65,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename F>\n'
              'Thread::Thread(F functor) :\n'
              'm_impl      (NULL),\n'
              'm_entryPoint(new priv::ThreadFunctor<F>(functor))\n'
              '{\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000592',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=74,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename F, typename A>\n'
              'Thread::Thread(F function, A argument) :\n'
              'm_impl      (NULL),\n'
              'm_entryPoint(new priv::ThreadFunctorWithArg<F, A>(function, '
              'argument))\n'
              '{\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000593',
         path='/Labirint Game/sfml/include/SFML/System/Thread.inl',
         lineno=83,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename C>\n'
              'Thread::Thread(void(C::*function)(), C* object) :\n'
              'm_impl      (NULL),\n'
              'm_entryPoint(new priv::ThreadMemberFunc<C>(function, object))\n'
              '{\n'
              '}\n')

Fragment(uuid='NORMALIZED-000594',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocal.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/ThreadLocal.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000595',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocal.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'namespace priv\n'
              '{\n'
              '    class ThreadLocalImpl;\n'
              '}\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Defines variables with thread-local storage\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_SYSTEM_API ThreadLocal : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// \\param value Optional value to initialize the '
              'variable\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ThreadLocal(void* value = NULL);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~ThreadLocal();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the thread-specific value of the variable\n'
              '    ///\n'
              '    /// \\param value Value of the variable for the current '
              'thread\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setValue(void* value);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Retrieve the thread-specific value of the '
              'variable\n'
              '    ///\n'
              '    /// \\return Value of the variable for the current thread\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void* getValue() const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    priv::ThreadLocalImpl* m_impl; ///< Pointer to the OS '
              'specific implementation\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000596',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000597',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.hpp',
         lineno=34,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Pointer to a thread-local variable\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'class ThreadLocalPtr : private ThreadLocal\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// \\param value Optional value to initialize the '
              'variable\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ThreadLocalPtr(T* value = NULL);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Overload of unary operator *\n'
              '    ///\n'
              '    /// Like raw pointers, applying the * operator returns a\n'
              '    /// reference to the pointed-to object.\n'
              '    ///\n'
              '    /// \\return Reference to the thread-local variable\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    T& operator *() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Overload of operator ->\n'
              '    ///\n'
              '    /// Similarly to raw pointers, applying the -> operator\n'
              '    /// returns the pointed-to object.\n'
              '    ///\n'
              '    /// \\return Pointer to the thread-local variable\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    T* operator ->() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Conversion operator to implicitly convert the\n'
              '    ///        pointer to its raw pointer type (T*)\n'
              '    ///\n'
              '    /// \\return Pointer to the actual object\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    operator T*() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Assignment operator for a raw pointer '
              'parameter\n'
              '    ///\n'
              '    /// \\param value Pointer to assign\n'
              '    ///\n'
              '    /// \\return Reference to self\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ThreadLocalPtr<T>& operator =(T* value);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Assignment operator for a ThreadLocalPtr '
              'parameter\n'
              '    ///\n'
              '    /// \\param right ThreadLocalPtr to assign\n'
              '    ///\n'
              '    /// \\return Reference to self\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ThreadLocalPtr<T>& operator =(const ThreadLocalPtr<T>& '
              'right);\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000598',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000599',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000600',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint '
              'Game/sfml/include/SFML/System/ThreadLocalPtr.inl\n')

Fragment(uuid='NORMALIZED-000601',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n// SFML - Simple and Fast Multimedia Library')

Fragment(uuid='NORMALIZED-000602',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)')

Fragment(uuid='NORMALIZED-000603',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000604',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "// This software is provided 'as-is', without any express or "
              'implied warranty.')

Fragment(uuid='NORMALIZED-000605',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// In no event will the authors be held liable for any damages '
              'arising from the use of this software.')

Fragment(uuid='NORMALIZED-000606',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000607',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Permission is granted to anyone to use this software for any '
              'purpose,')

Fragment(uuid='NORMALIZED-000608',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// including commercial applications, and to alter it and '
              'redistribute it freely,')

Fragment(uuid='NORMALIZED-000609',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n// subject to the following restrictions:')

Fragment(uuid='NORMALIZED-000610',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000611',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n// 1. The origin of this software must not be misrepresented;')

Fragment(uuid='NORMALIZED-000612',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n//    you must not claim that you wrote the original software.')

Fragment(uuid='NORMALIZED-000613',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n//    If you use this software in a product, an acknowledgment')

Fragment(uuid='NORMALIZED-000614',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    in the product documentation would be appreciated but is '
              'not required.')

Fragment(uuid='NORMALIZED-000615',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000616',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n// 2. Altered source versions must be plainly marked as such,')

Fragment(uuid='NORMALIZED-000617',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    and must not be misrepresented as being the original '
              'software.')

Fragment(uuid='NORMALIZED-000618',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000619',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// 3. This notice may not be removed or altered from any source '
              'distribution.')

Fragment(uuid='NORMALIZED-000620',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000621',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000622',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000623',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000624',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'ThreadLocalPtr<T>::ThreadLocalPtr(T* value) :\n'
              'ThreadLocal(value)\n'
              '{\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000625',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'T& ThreadLocalPtr<T>::operator *() const\n'
              '{\n'
              '    return *static_cast<T*>(getValue());\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000626',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=43,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'T* ThreadLocalPtr<T>::operator ->() const\n'
              '{\n'
              '    return static_cast<T*>(getValue());\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000627',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=51,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'ThreadLocalPtr<T>::operator T*() const\n'
              '{\n'
              '    return static_cast<T*>(getValue());\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000628',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=59,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(T* value)\n'
              '{\n'
              '    setValue(value);\n'
              '    return *this;\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000629',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=68,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(const '
              'ThreadLocalPtr<T>& right)\n'
              '{\n'
              '    setValue(right.getValue());\n'
              '    return *this;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000630',
         path='/Labirint Game/sfml/include/SFML/System/ThreadLocalPtr.inl',
         lineno=76,
         depth=1,
         type='documentation',
         name='',
         text='\n} // namespace sf\n')

Fragment(uuid='NORMALIZED-000631',
         path='/Labirint Game/sfml/include/SFML/System/Time.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Time.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000632',
         path='/Labirint Game/sfml/include/SFML/System/Time.hpp',
         lineno=34,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Represents a time value\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_SYSTEM_API Time\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Sets the time value to zero.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Time();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the time value as a number of seconds\n'
              '    ///\n'
              '    /// \\return Time in seconds\n'
              '    ///\n'
              '    /// \\see asMilliseconds, asMicroseconds\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    float asSeconds() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the time value as a number of '
              'milliseconds\n'
              '    ///\n'
              '    /// \\return Time in milliseconds\n'
              '    ///\n'
              '    /// \\see asSeconds, asMicroseconds\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Int32 asMilliseconds() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the time value as a number of '
              'microseconds\n'
              '    ///\n'
              '    /// \\return Time in microseconds\n'
              '    ///\n'
              '    /// \\see asSeconds, asMilliseconds\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Int64 asMicroseconds() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Static member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static const Time Zero; ///< Predefined "zero" time value\n'
              '\n'
              'private:\n'
              '\n'
              '    friend SFML_SYSTEM_API Time seconds(float);\n'
              '    friend SFML_SYSTEM_API Time milliseconds(Int32);\n'
              '    friend SFML_SYSTEM_API Time microseconds(Int64);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct from a number of microseconds\n'
              '    ///\n'
              '    /// This function is internal. To construct time values,\n'
              '    /// use sf::seconds, sf::milliseconds or sf::microseconds '
              'instead.\n'
              '    ///\n'
              '    /// \\param microseconds Number of microseconds\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit Time(Int64 microseconds);\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Int64 m_microseconds; ///< Time value stored as '
              'microseconds\n'
              '};\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Construct a time value from a number of seconds\n'
              '///\n'
              '/// \\param amount Number of seconds\n'
              '///\n'
              '/// \\return Time value constructed from the amount of seconds\n'
              '///\n'
              '/// \\see milliseconds, microseconds\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time seconds(float amount);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Construct a time value from a number of '
              'milliseconds\n'
              '///\n'
              '/// \\param amount Number of milliseconds\n'
              '///\n'
              '/// \\return Time value constructed from the amount of '
              'milliseconds\n'
              '///\n'
              '/// \\see seconds, microseconds\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time milliseconds(Int32 amount);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Construct a time value from a number of '
              'microseconds\n'
              '///\n'
              '/// \\param amount Number of microseconds\n'
              '///\n'
              '/// \\return Time value constructed from the amount of '
              'microseconds\n'
              '///\n'
              '/// \\see seconds, milliseconds\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time microseconds(Int64 amount);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of == operator to compare two time values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return True if both time values are equal\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API bool operator ==(Time left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of != operator to compare two time values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return True if both time values are different\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API bool operator !=(Time left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of < operator to compare two time values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return True if \\a left is lesser than \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API bool operator <(Time left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of > operator to compare two time values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return True if \\a left is greater than \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API bool operator >(Time left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of <= operator to compare two time values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return True if \\a left is lesser or equal than \\a '
              'right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API bool operator <=(Time left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of >= operator to compare two time values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return True if \\a left is greater or equal than \\a '
              'right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API bool operator >=(Time left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of unary - operator to negate a time '
              'value\n'
              '///\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return Opposite of the time value\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time operator -(Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary + operator to add two time '
              'values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return Sum of the two times values\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time operator +(Time left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary += operator to add/assign two '
              'time values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return Sum of the two times values\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time& operator +=(Time& left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary - operator to subtract two time '
              'values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return Difference of the two times values\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time operator -(Time left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary -= operator to subtract/assign '
              'two time values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return Difference of the two times values\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time& operator -=(Time& left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary * operator to scale a time '
              'value\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a number)\n'
              '///\n'
              '/// \\return \\a left multiplied by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time operator *(Time left, float right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary * operator to scale a time '
              'value\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a number)\n'
              '///\n'
              '/// \\return \\a left multiplied by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time operator *(Time left, Int64 right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary * operator to scale a time '
              'value\n'
              '///\n'
              '/// \\param left  Left operand (a number)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return \\a left multiplied by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time operator *(float left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary * operator to scale a time '
              'value\n'
              '///\n'
              '/// \\param left  Left operand (a number)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return \\a left multiplied by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time operator *(Int64 left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary *= operator to scale/assign a '
              'time value\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a number)\n'
              '///\n'
              '/// \\return \\a left multiplied by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time& operator *=(Time& left, float right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary *= operator to scale/assign a '
              'time value\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a number)\n'
              '///\n'
              '/// \\return \\a left multiplied by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time& operator *=(Time& left, Int64 right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary / operator to scale a time '
              'value\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a number)\n'
              '///\n'
              '/// \\return \\a left divided by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time operator /(Time left, float right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary / operator to scale a time '
              'value\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a number)\n'
              '///\n'
              '/// \\return \\a left divided by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time operator /(Time left, Int64 right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary /= operator to scale/assign a '
              'time value\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a number)\n'
              '///\n'
              '/// \\return \\a left divided by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time& operator /=(Time& left, float right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary /= operator to scale/assign a '
              'time value\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a number)\n'
              '///\n'
              '/// \\return \\a left divided by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time& operator /=(Time& left, Int64 right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary / operator to compute the ratio '
              'of two time values\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return \\a left divided by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API float operator /(Time left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary % operator to compute remainder '
              'of a time value\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return \\a left modulo \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time operator %(Time left, Time right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Time\n'
              '/// \\brief Overload of binary %= operator to compute/assign '
              'remainder of a time value\n'
              '///\n'
              '/// \\param left  Left operand (a time)\n'
              '/// \\param right Right operand (a time)\n'
              '///\n'
              '/// \\return \\a left modulo \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_SYSTEM_API Time& operator %=(Time& left, Time right);\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000633',
         path='/Labirint Game/sfml/include/SFML/System/Utf.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Utf.hpp\n')

Fragment(uuid='NORMALIZED-000634',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000635',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000636',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint Game/sfml/include/SFML/System/Utf.inl\n')

Fragment(uuid='NORMALIZED-000637',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n// SFML - Simple and Fast Multimedia Library')

Fragment(uuid='NORMALIZED-000638',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)')

Fragment(uuid='NORMALIZED-000639',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000640',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "// This software is provided 'as-is', without any express or "
              'implied warranty.')

Fragment(uuid='NORMALIZED-000641',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// In no event will the authors be held liable for any damages '
              'arising from the use of this software.')

Fragment(uuid='NORMALIZED-000642',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000643',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Permission is granted to anyone to use this software for any '
              'purpose,')

Fragment(uuid='NORMALIZED-000644',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// including commercial applications, and to alter it and '
              'redistribute it freely,')

Fragment(uuid='NORMALIZED-000645',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n// subject to the following restrictions:')

Fragment(uuid='NORMALIZED-000646',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000647',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n// 1. The origin of this software must not be misrepresented;')

Fragment(uuid='NORMALIZED-000648',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n//    you must not claim that you wrote the original software.')

Fragment(uuid='NORMALIZED-000649',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n//    If you use this software in a product, an acknowledgment')

Fragment(uuid='NORMALIZED-000650',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    in the product documentation would be appreciated but is '
              'not required.')

Fragment(uuid='NORMALIZED-000651',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000652',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n// 2. Altered source versions must be plainly marked as such,')

Fragment(uuid='NORMALIZED-000653',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    and must not be misrepresented as being the original '
              'software.')

Fragment(uuid='NORMALIZED-000654',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000655',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// 3. This notice may not be removed or altered from any source '
              'distribution.')

Fragment(uuid='NORMALIZED-000656',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000657',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000658',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000659',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000660',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              '// References:\n'
              '//\n'
              '// https://www.unicode.org/\n'
              '// https://www.unicode.org/Public/PROGRAMS/CVTUTF/ConvertUTF.c\n'
              '// https://www.unicode.org/Public/PROGRAMS/CVTUTF/ConvertUTF.h\n'
              '// https://people.w3.org/rishida/scripts/uniview/conversion\n'
              '//\n'
              '////////////////////////////////////////////////////////////\n'
              '\n')

Fragment(uuid='NORMALIZED-000661',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000662',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\ntemplate <typename In>')

Fragment(uuid='NORMALIZED-000663',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'In Utf<8>::decode(In begin, In end, Uint32& output, Uint32 '
              'replacement)')

Fragment(uuid='NORMALIZED-000664',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-000665',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n    // Some useful precomputed data')

Fragment(uuid='NORMALIZED-000666',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n    static const int trailing[256] =')

Fragment(uuid='NORMALIZED-000667',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-000668',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '
              '0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,')

Fragment(uuid='NORMALIZED-000669',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '
              '0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,')

Fragment(uuid='NORMALIZED-000670',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '
              '0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,')

Fragment(uuid='NORMALIZED-000671',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '
              '0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,')

Fragment(uuid='NORMALIZED-000672',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '
              '0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,')

Fragment(uuid='NORMALIZED-000673',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '
              '0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,')

Fragment(uuid='NORMALIZED-000674',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, '
              '1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,')

Fragment(uuid='NORMALIZED-000675',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, '
              '3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5')

Fragment(uuid='NORMALIZED-000676',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n    };')

Fragment(uuid='NORMALIZED-000677',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n    static const Uint32 offsets[6] =')

Fragment(uuid='NORMALIZED-000678',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-000679',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        0x00000000, 0x00003080, 0x000E2080, 0x03C82080, '
              '0xFA082080, 0x82082080')

Fragment(uuid='NORMALIZED-000680',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n    };')

Fragment(uuid='NORMALIZED-000681',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000682',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n    // decode the character')

Fragment(uuid='NORMALIZED-000683',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n    int trailingBytes = trailing[static_cast<Uint8>(*begin)];')

Fragment(uuid='NORMALIZED-000684',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (begin + trailingBytes < end)')

Fragment(uuid='NORMALIZED-000685',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-000686',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n        output = 0;')

Fragment(uuid='NORMALIZED-000687',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n        switch (trailingBytes)')

Fragment(uuid='NORMALIZED-000688',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n        {')

Fragment(uuid='NORMALIZED-000689',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            case 5: output += static_cast<Uint8>(*begin++); '
              'output <<= 6;')

Fragment(uuid='NORMALIZED-000690',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            case 4: output += static_cast<Uint8>(*begin++); '
              'output <<= 6;')

Fragment(uuid='NORMALIZED-000691',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            case 3: output += static_cast<Uint8>(*begin++); '
              'output <<= 6;')

Fragment(uuid='NORMALIZED-000692',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            case 2: output += static_cast<Uint8>(*begin++); '
              'output <<= 6;')

Fragment(uuid='NORMALIZED-000693',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            case 1: output += static_cast<Uint8>(*begin++); '
              'output <<= 6;')

Fragment(uuid='NORMALIZED-000694',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n            case 0: output += static_cast<Uint8>(*begin++);')

Fragment(uuid='NORMALIZED-000695',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='NORMALIZED-000696',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n        output -= offsets[trailingBytes];')

Fragment(uuid='NORMALIZED-000697',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000698',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n    else')

Fragment(uuid='NORMALIZED-000699',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-000700',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n        // Incomplete character')

Fragment(uuid='NORMALIZED-000701',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n        begin = end;')

Fragment(uuid='NORMALIZED-000702',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n        output = replacement;')

Fragment(uuid='NORMALIZED-000703',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000704',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000705',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=80,
         depth=1,
         type='documentation',
         name='',
         text='\n    return begin;\n}\n\n')

Fragment(uuid='NORMALIZED-000706',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=84,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename Out>\n'
              'Out Utf<8>::encode(Uint32 input, Out output, Uint8 '
              'replacement)\n'
              '{\n'
              '    // Some useful precomputed data\n'
              '    static const Uint8 firstBytes[7] =\n'
              '    {\n'
              '        0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC\n'
              '    };\n')

Fragment(uuid='NORMALIZED-000707',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=94,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    // encode the character\n'
              '    if ((input > 0x0010FFFF) || ((input >= 0xD800) && (input <= '
              '0xDBFF)))\n'
              '    {\n'
              '        // Invalid character\n'
              '        if (replacement)\n'
              '            *output++ = replacement;\n'
              '    }\n'
              '    else\n'
              '    {\n'
              '        // Valid character\n')

Fragment(uuid='NORMALIZED-000708',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=105,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Get the number of bytes to write\n'
              '        std::size_t bytestoWrite = 1;\n'
              '        if      (input <  0x80)       bytestoWrite = 1;\n'
              '        else if (input <  0x800)      bytestoWrite = 2;\n'
              '        else if (input <  0x10000)    bytestoWrite = 3;\n'
              '        else if (input <= 0x0010FFFF) bytestoWrite = 4;\n')

Fragment(uuid='NORMALIZED-000709',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=112,
         depth=2,
         type='documentation',
         name='',
         text='\n        // Extract the bytes to write')

Fragment(uuid='NORMALIZED-000710',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=113,
         depth=2,
         type='documentation',
         name='',
         text='\n        Uint8 bytes[4];')

Fragment(uuid='NORMALIZED-000711',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='\n        switch (bytestoWrite)')

Fragment(uuid='NORMALIZED-000712',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=115,
         depth=2,
         type='documentation',
         name='',
         text='\n        {')

Fragment(uuid='NORMALIZED-000713',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            case 4: bytes[3] = static_cast<Uint8>((input | '
              '0x80) & 0xBF); input >>= 6;')

Fragment(uuid='NORMALIZED-000714',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            case 3: bytes[2] = static_cast<Uint8>((input | '
              '0x80) & 0xBF); input >>= 6;')

Fragment(uuid='NORMALIZED-000715',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            case 2: bytes[1] = static_cast<Uint8>((input | '
              '0x80) & 0xBF); input >>= 6;')

Fragment(uuid='NORMALIZED-000716',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=119,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            case 1: bytes[0] = static_cast<Uint8> (input | '
              'firstBytes[bytestoWrite]);')

Fragment(uuid='NORMALIZED-000717',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=120,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='NORMALIZED-000718',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=121,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000719',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Add them to the output\n'
              '        output = std::copy(bytes, bytes + bytestoWrite, '
              'output);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000720',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=126,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000721',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=130,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In>\n'
              'In Utf<8>::next(In begin, In end)\n'
              '{\n'
              '    Uint32 codepoint;\n'
              '    return decode(begin, end, codepoint);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000722',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=139,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In>\n'
              'std::size_t Utf<8>::count(In begin, In end)\n'
              '{\n'
              '    std::size_t length = 0;\n'
              '    while (begin < end)\n'
              '    {\n'
              '        begin = next(begin, end);\n'
              '        ++length;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000723',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=150,
         depth=1,
         type='documentation',
         name='',
         text='\n    return length;\n}\n\n')

Fragment(uuid='NORMALIZED-000724',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=154,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<8>::fromAnsi(In begin, In end, Out output, const '
              'std::locale& locale)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint = Utf<32>::decodeAnsi(*begin++, '
              'locale);\n'
              '        output = encode(codepoint, output);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000725',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=164,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000726',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=168,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<8>::fromWide(In begin, In end, Out output)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint = Utf<32>::decodeWide(*begin++);\n'
              '        output = encode(codepoint, output);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000727',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=178,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000728',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=182,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<8>::fromLatin1(In begin, In end, Out output)\n'
              '{\n'
              '    // Latin-1 is directly compatible with Unicode encodings,\n'
              '    // and can thus be treated as (a sub-range of) UTF-32\n'
              '    while (begin < end)\n'
              '        output = encode(*begin++, output);\n')

Fragment(uuid='NORMALIZED-000729',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=191,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000730',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=195,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<8>::toAnsi(In begin, In end, Out output, char '
              'replacement, const std::locale& locale)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint;\n'
              '        begin = decode(begin, end, codepoint);\n'
              '        output = Utf<32>::encodeAnsi(codepoint, output, '
              'replacement, locale);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000731',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=206,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000732',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=210,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<8>::toWide(In begin, In end, Out output, wchar_t '
              'replacement)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint;\n'
              '        begin = decode(begin, end, codepoint);\n'
              '        output = Utf<32>::encodeWide(codepoint, output, '
              'replacement);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000733',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=221,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000734',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=225,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<8>::toLatin1(In begin, In end, Out output, char '
              'replacement)\n'
              '{\n'
              '    // Latin-1 is directly compatible with Unicode encodings,\n'
              '    // and can thus be treated as (a sub-range of) UTF-32\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint;\n'
              '        begin = decode(begin, end, codepoint);\n'
              '        *output++ = codepoint < 256 ? '
              'static_cast<char>(codepoint) : replacement;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000735',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=238,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000736',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=242,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<8>::toUtf8(In begin, In end, Out output)\n'
              '{\n'
              '    return std::copy(begin, end, output);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000737',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=250,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<8>::toUtf16(In begin, In end, Out output)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint;\n'
              '        begin = decode(begin, end, codepoint);\n'
              '        output = Utf<16>::encode(codepoint, output);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000738',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=261,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000739',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=265,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<8>::toUtf32(In begin, In end, Out output)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint;\n'
              '        begin = decode(begin, end, codepoint);\n'
              '        *output++ = codepoint;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000740',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=276,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000741',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=280,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In>\n'
              'In Utf<16>::decode(In begin, In end, Uint32& output, Uint32 '
              'replacement)\n'
              '{\n'
              '    Uint16 first = *begin++;\n')

Fragment(uuid='NORMALIZED-000742',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=286,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "    // If it's a surrogate pair, first convert to a single "
              'UTF-32 character')

Fragment(uuid='NORMALIZED-000743',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=287,
         depth=2,
         type='documentation',
         name='',
         text='\n    if ((first >= 0xD800) && (first <= 0xDBFF))')

Fragment(uuid='NORMALIZED-000744',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=288,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-000745',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=289,
         depth=2,
         type='documentation',
         name='',
         text='\n        if (begin < end)')

Fragment(uuid='NORMALIZED-000746',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=290,
         depth=2,
         type='documentation',
         name='',
         text='\n        {')

Fragment(uuid='NORMALIZED-000747',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=291,
         depth=2,
         type='documentation',
         name='',
         text='\n            Uint32 second = *begin++;')

Fragment(uuid='NORMALIZED-000748',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=292,
         depth=2,
         type='documentation',
         name='',
         text='\n            if ((second >= 0xDC00) && (second <= 0xDFFF))')

Fragment(uuid='NORMALIZED-000749',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=293,
         depth=2,
         type='documentation',
         name='',
         text='\n            {')

Fragment(uuid='NORMALIZED-000750',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=294,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                // The second element is valid: convert the two '
              'elements to a UTF-32 character')

Fragment(uuid='NORMALIZED-000751',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=295,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                output = static_cast<Uint32>(((first - 0xD800) '
              '<< 10) + (second - 0xDC00) + 0x0010000);')

Fragment(uuid='NORMALIZED-000752',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=296,
         depth=2,
         type='documentation',
         name='',
         text='\n            }')

Fragment(uuid='NORMALIZED-000753',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=297,
         depth=2,
         type='documentation',
         name='',
         text='\n            else')

Fragment(uuid='NORMALIZED-000754',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=298,
         depth=2,
         type='documentation',
         name='',
         text='\n            {')

Fragment(uuid='NORMALIZED-000755',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=299,
         depth=2,
         type='documentation',
         name='',
         text='\n                // Invalid character')

Fragment(uuid='NORMALIZED-000756',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=300,
         depth=2,
         type='documentation',
         name='',
         text='\n                output = replacement;')

Fragment(uuid='NORMALIZED-000757',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=301,
         depth=2,
         type='documentation',
         name='',
         text='\n            }')

Fragment(uuid='NORMALIZED-000758',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=302,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='NORMALIZED-000759',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=303,
         depth=2,
         type='documentation',
         name='',
         text='\n        else')

Fragment(uuid='NORMALIZED-000760',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=304,
         depth=2,
         type='documentation',
         name='',
         text='\n        {')

Fragment(uuid='NORMALIZED-000761',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=305,
         depth=2,
         type='documentation',
         name='',
         text='\n            // Invalid character')

Fragment(uuid='NORMALIZED-000762',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=306,
         depth=2,
         type='documentation',
         name='',
         text='\n            begin = end;')

Fragment(uuid='NORMALIZED-000763',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=307,
         depth=2,
         type='documentation',
         name='',
         text='\n            output = replacement;')

Fragment(uuid='NORMALIZED-000764',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=308,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='NORMALIZED-000765',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=309,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000766',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=310,
         depth=2,
         type='documentation',
         name='',
         text='\n    else')

Fragment(uuid='NORMALIZED-000767',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=311,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-000768',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=312,
         depth=2,
         type='documentation',
         name='',
         text='\n        // We can make a direct copy')

Fragment(uuid='NORMALIZED-000769',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=313,
         depth=2,
         type='documentation',
         name='',
         text='\n        output = first;')

Fragment(uuid='NORMALIZED-000770',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=314,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000771',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=315,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000772',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=316,
         depth=1,
         type='documentation',
         name='',
         text='\n    return begin;\n}\n\n')

Fragment(uuid='NORMALIZED-000773',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=320,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000774',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=321,
         depth=2,
         type='documentation',
         name='',
         text='\ntemplate <typename Out>')

Fragment(uuid='NORMALIZED-000775',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=322,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Out Utf<16>::encode(Uint32 input, Out output, Uint16 '
              'replacement)')

Fragment(uuid='NORMALIZED-000776',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=323,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-000777',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=324,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (input <= 0xFFFF)')

Fragment(uuid='NORMALIZED-000778',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=325,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-000779',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=326,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        // The character can be copied directly, we just need '
              "to check if it's in the valid range")

Fragment(uuid='NORMALIZED-000780',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=327,
         depth=2,
         type='documentation',
         name='',
         text='\n        if ((input >= 0xD800) && (input <= 0xDFFF))')

Fragment(uuid='NORMALIZED-000781',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=328,
         depth=2,
         type='documentation',
         name='',
         text='\n        {')

Fragment(uuid='NORMALIZED-000782',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=329,
         depth=2,
         type='documentation',
         name='',
         text='\n            // Invalid character (this range is reserved)')

Fragment(uuid='NORMALIZED-000783',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=330,
         depth=2,
         type='documentation',
         name='',
         text='\n            if (replacement)')

Fragment(uuid='NORMALIZED-000784',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=331,
         depth=2,
         type='documentation',
         name='',
         text='\n                *output++ = replacement;')

Fragment(uuid='NORMALIZED-000785',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=332,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='NORMALIZED-000786',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=333,
         depth=2,
         type='documentation',
         name='',
         text='\n        else')

Fragment(uuid='NORMALIZED-000787',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=334,
         depth=2,
         type='documentation',
         name='',
         text='\n        {')

Fragment(uuid='NORMALIZED-000788',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=335,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            // Valid character directly convertible to a single '
              'UTF-16 character')

Fragment(uuid='NORMALIZED-000789',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=336,
         depth=2,
         type='documentation',
         name='',
         text='\n            *output++ = static_cast<Uint16>(input);')

Fragment(uuid='NORMALIZED-000790',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=337,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='NORMALIZED-000791',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=338,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000792',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=339,
         depth=2,
         type='documentation',
         name='',
         text='\n    else if (input > 0x0010FFFF)')

Fragment(uuid='NORMALIZED-000793',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=340,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-000794',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=341,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        // Invalid character (greater than the maximum Unicode '
              'value)')

Fragment(uuid='NORMALIZED-000795',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=342,
         depth=2,
         type='documentation',
         name='',
         text='\n        if (replacement)')

Fragment(uuid='NORMALIZED-000796',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=343,
         depth=2,
         type='documentation',
         name='',
         text='\n            *output++ = replacement;')

Fragment(uuid='NORMALIZED-000797',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=344,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000798',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=345,
         depth=2,
         type='documentation',
         name='',
         text='\n    else')

Fragment(uuid='NORMALIZED-000799',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=346,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-000800',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=347,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        // The input character will be converted to two UTF-16 '
              'elements')

Fragment(uuid='NORMALIZED-000801',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=348,
         depth=2,
         type='documentation',
         name='',
         text='\n        input -= 0x0010000;')

Fragment(uuid='NORMALIZED-000802',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=349,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        *output++ = static_cast<Uint16>((input >> 10)     + '
              '0xD800);')

Fragment(uuid='NORMALIZED-000803',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=350,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        *output++ = static_cast<Uint16>((input & 0x3FFUL) + '
              '0xDC00);')

Fragment(uuid='NORMALIZED-000804',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=351,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000805',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=352,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000806',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=353,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000807',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=357,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In>\n'
              'In Utf<16>::next(In begin, In end)\n'
              '{\n'
              '    Uint32 codepoint;\n'
              '    return decode(begin, end, codepoint);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000808',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=366,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In>\n'
              'std::size_t Utf<16>::count(In begin, In end)\n'
              '{\n'
              '    std::size_t length = 0;\n'
              '    while (begin < end)\n'
              '    {\n'
              '        begin = next(begin, end);\n'
              '        ++length;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000809',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=377,
         depth=1,
         type='documentation',
         name='',
         text='\n    return length;\n}\n\n')

Fragment(uuid='NORMALIZED-000810',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=381,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<16>::fromAnsi(In begin, In end, Out output, const '
              'std::locale& locale)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint = Utf<32>::decodeAnsi(*begin++, '
              'locale);\n'
              '        output = encode(codepoint, output);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000811',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=391,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000812',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=395,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<16>::fromWide(In begin, In end, Out output)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint = Utf<32>::decodeWide(*begin++);\n'
              '        output = encode(codepoint, output);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000813',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=405,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000814',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=409,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<16>::fromLatin1(In begin, In end, Out output)\n'
              '{\n'
              '    // Latin-1 is directly compatible with Unicode encodings,\n'
              '    // and can thus be treated as (a sub-range of) UTF-32\n'
              '    return std::copy(begin, end, output);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000815',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=419,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<16>::toAnsi(In begin, In end, Out output, char '
              'replacement, const std::locale& locale)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint;\n'
              '        begin = decode(begin, end, codepoint);\n'
              '        output = Utf<32>::encodeAnsi(codepoint, output, '
              'replacement, locale);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000816',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=430,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000817',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=434,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<16>::toWide(In begin, In end, Out output, wchar_t '
              'replacement)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint;\n'
              '        begin = decode(begin, end, codepoint);\n'
              '        output = Utf<32>::encodeWide(codepoint, output, '
              'replacement);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000818',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=445,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000819',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=449,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<16>::toLatin1(In begin, In end, Out output, char '
              'replacement)\n'
              '{\n'
              '    // Latin-1 is directly compatible with Unicode encodings,\n'
              '    // and can thus be treated as (a sub-range of) UTF-32\n'
              '    while (begin < end)\n'
              '    {\n'
              '        *output++ = *begin < 256 ? static_cast<char>(*begin) : '
              'replacement;\n'
              '        begin++;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000820',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=461,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000821',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=465,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<16>::toUtf8(In begin, In end, Out output)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint;\n'
              '        begin = decode(begin, end, codepoint);\n'
              '        output = Utf<8>::encode(codepoint, output);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000822',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=476,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000823',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=480,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<16>::toUtf16(In begin, In end, Out output)\n'
              '{\n'
              '    return std::copy(begin, end, output);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000824',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=488,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<16>::toUtf32(In begin, In end, Out output)\n'
              '{\n'
              '    while (begin < end)\n'
              '    {\n'
              '        Uint32 codepoint;\n'
              '        begin = decode(begin, end, codepoint);\n'
              '        *output++ = codepoint;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000825',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=499,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000826',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=503,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In>\n'
              'In Utf<32>::decode(In begin, In /*end*/, Uint32& output, Uint32 '
              '/*replacement*/)\n'
              '{\n'
              '    output = *begin++;\n'
              '    return begin;\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000827',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=512,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename Out>\n'
              'Out Utf<32>::encode(Uint32 input, Out output, Uint32 '
              '/*replacement*/)\n'
              '{\n'
              '    *output++ = input;\n'
              '    return output;\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000828',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=521,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In>\n'
              'In Utf<32>::next(In begin, In /*end*/)\n'
              '{\n'
              '    return ++begin;\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000829',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=529,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In>\n'
              'std::size_t Utf<32>::count(In begin, In end)\n'
              '{\n'
              '    return begin - end;\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000830',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=537,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<32>::fromAnsi(In begin, In end, Out output, const '
              'std::locale& locale)\n'
              '{\n'
              '    while (begin < end)\n'
              '        *output++ = decodeAnsi(*begin++, locale);\n')

Fragment(uuid='NORMALIZED-000831',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=544,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000832',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=548,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<32>::fromWide(In begin, In end, Out output)\n'
              '{\n'
              '    while (begin < end)\n'
              '        *output++ = decodeWide(*begin++);\n')

Fragment(uuid='NORMALIZED-000833',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=555,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000834',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=559,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<32>::fromLatin1(In begin, In end, Out output)\n'
              '{\n'
              '    // Latin-1 is directly compatible with Unicode encodings,\n'
              '    // and can thus be treated as (a sub-range of) UTF-32\n'
              '    return std::copy(begin, end, output);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000835',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=569,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<32>::toAnsi(In begin, In end, Out output, char '
              'replacement, const std::locale& locale)\n'
              '{\n'
              '    while (begin < end)\n'
              '        output = encodeAnsi(*begin++, output, replacement, '
              'locale);\n')

Fragment(uuid='NORMALIZED-000836',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=576,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000837',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=580,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<32>::toWide(In begin, In end, Out output, wchar_t '
              'replacement)\n'
              '{\n'
              '    while (begin < end)\n'
              '        output = encodeWide(*begin++, output, replacement);\n')

Fragment(uuid='NORMALIZED-000838',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=587,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000839',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=591,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<32>::toLatin1(In begin, In end, Out output, char '
              'replacement)\n'
              '{\n'
              '    // Latin-1 is directly compatible with Unicode encodings,\n'
              '    // and can thus be treated as (a sub-range of) UTF-32\n'
              '    while (begin < end)\n'
              '    {\n'
              '        *output++ = *begin < 256 ? static_cast<char>(*begin) : '
              'replacement;\n'
              '        begin++;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000840',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=603,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000841',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=607,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<32>::toUtf8(In begin, In end, Out output)\n'
              '{\n'
              '    while (begin < end)\n'
              '        output = Utf<8>::encode(*begin++, output);\n')

Fragment(uuid='NORMALIZED-000842',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=614,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n')

Fragment(uuid='NORMALIZED-000843',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=617,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<32>::toUtf16(In begin, In end, Out output)\n'
              '{\n'
              '    while (begin < end)\n'
              '        output = Utf<16>::encode(*begin++, output);\n')

Fragment(uuid='NORMALIZED-000844',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=624,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n\n')

Fragment(uuid='NORMALIZED-000845',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=628,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In, typename Out>\n'
              'Out Utf<32>::toUtf32(In begin, In end, Out output)\n'
              '{\n'
              '    return std::copy(begin, end, output);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000846',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=636,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In>\n'
              'Uint32 Utf<32>::decodeAnsi(In input, const std::locale& '
              'locale)\n'
              '{\n'
              "    // On Windows, GCC's standard library (glibc++) has almost\n"
              '    // no support for Unicode stuff. As a consequence, in this\n'
              '    // context we can only use the default locale and ignore\n'
              '    // the one passed as parameter.\n')

Fragment(uuid='NORMALIZED-000847',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=645,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    #if defined(SFML_SYSTEM_WINDOWS) &&                       '
              '/* if Windows ... */                          \\\n'
              '       (defined(__GLIBCPP__) || defined (__GLIBCXX__)) &&     '
              '/* ... and standard library is glibc++ ... */ \\\n'
              '      !(defined(__SGI_STL_PORT) || defined(_STLPORT_VERSION)) '
              '/* ... and STLPort is not used on top of it */\n')

Fragment(uuid='NORMALIZED-000848',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=649,
         depth=1,
         type='documentation',
         name='',
         text='\n        (void)locale; // to avoid warnings\n')

Fragment(uuid='NORMALIZED-000849',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=651,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        wchar_t character = 0;\n'
              '        mbtowc(&character, &input, 1);\n'
              '        return static_cast<Uint32>(character);\n')

Fragment(uuid='NORMALIZED-000850',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=655,
         depth=1,
         type='documentation',
         name='',
         text='\n    #else\n')

Fragment(uuid='NORMALIZED-000851',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=657,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Get the facet of the locale which deals with '
              'character conversion\n'
              '        const std::ctype<wchar_t>& facet = std::use_facet< '
              'std::ctype<wchar_t> >(locale);\n')

Fragment(uuid='NORMALIZED-000852',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=660,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Use the facet to convert each character of the input '
              'string\n'
              '        return static_cast<Uint32>(facet.widen(input));\n')

Fragment(uuid='NORMALIZED-000853',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=663,
         depth=1,
         type='documentation',
         name='',
         text='\n    #endif\n}\n\n')

Fragment(uuid='NORMALIZED-000854',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=667,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename In>\n'
              'Uint32 Utf<32>::decodeWide(In input)\n'
              '{\n'
              '    // The encoding of wide characters is not well defined and '
              'is left to the system;\n'
              '    // however we can safely assume that it is UCS-2 on Windows '
              'and\n'
              '    // UCS-4 on Unix systems.\n'
              '    // In both cases, a simple copy is enough (UCS-2 is a '
              'subset of UCS-4,\n'
              '    // and UCS-4 *is* UTF-32).\n')

Fragment(uuid='NORMALIZED-000855',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=677,
         depth=1,
         type='documentation',
         name='',
         text='\n    return input;\n}\n\n')

Fragment(uuid='NORMALIZED-000856',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=681,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename Out>\n'
              'Out Utf<32>::encodeAnsi(Uint32 codepoint, Out output, char '
              'replacement, const std::locale& locale)\n'
              '{\n'
              "    // On Windows, gcc's standard library (glibc++) has almost\n"
              '    // no support for Unicode stuff. As a consequence, in this\n'
              '    // context we can only use the default locale and ignore\n'
              '    // the one passed as parameter.\n')

Fragment(uuid='NORMALIZED-000857',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=690,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    #if defined(SFML_SYSTEM_WINDOWS) &&                       '
              '/* if Windows ... */                          \\\n'
              '       (defined(__GLIBCPP__) || defined (__GLIBCXX__)) &&     '
              '/* ... and standard library is glibc++ ... */ \\\n'
              '      !(defined(__SGI_STL_PORT) || defined(_STLPORT_VERSION)) '
              '/* ... and STLPort is not used on top of it */\n')

Fragment(uuid='NORMALIZED-000858',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=694,
         depth=1,
         type='documentation',
         name='',
         text='\n        (void)locale; // to avoid warnings\n')

Fragment(uuid='NORMALIZED-000859',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=696,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        char character = 0;\n'
              '        if (wctomb(&character, static_cast<wchar_t>(codepoint)) '
              '>= 0)\n'
              '            *output++ = character;\n'
              '        else if (replacement)\n'
              '            *output++ = replacement;\n')

Fragment(uuid='NORMALIZED-000860',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=702,
         depth=1,
         type='documentation',
         name='',
         text='\n        return output;\n')

Fragment(uuid='NORMALIZED-000861',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=704,
         depth=1,
         type='documentation',
         name='',
         text='\n    #else\n')

Fragment(uuid='NORMALIZED-000862',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=706,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Get the facet of the locale which deals with '
              'character conversion\n'
              '        const std::ctype<wchar_t>& facet = std::use_facet< '
              'std::ctype<wchar_t> >(locale);\n')

Fragment(uuid='NORMALIZED-000863',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=709,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Use the facet to convert each character of the input '
              'string\n'
              '        *output++ = '
              'facet.narrow(static_cast<wchar_t>(codepoint), replacement);\n')

Fragment(uuid='NORMALIZED-000864',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=712,
         depth=1,
         type='documentation',
         name='',
         text='\n        return output;\n')

Fragment(uuid='NORMALIZED-000865',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=714,
         depth=1,
         type='documentation',
         name='',
         text='\n    #endif\n}\n\n')

Fragment(uuid='NORMALIZED-000866',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=718,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename Out>\n'
              'Out Utf<32>::encodeWide(Uint32 codepoint, Out output, wchar_t '
              'replacement)\n'
              '{\n'
              '    // The encoding of wide characters is not well defined and '
              'is left to the system;\n'
              '    // however we can safely assume that it is UCS-2 on Windows '
              'and\n'
              '    // UCS-4 on Unix systems.\n'
              '    // For UCS-2 we need to check if the source characters fits '
              'in (UCS-2 is a subset of UCS-4).\n'
              '    // For UCS-4 we can do a direct copy (UCS-4 *is* UTF-32).\n')

Fragment(uuid='NORMALIZED-000867',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=728,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    switch (sizeof(wchar_t))\n'
              '    {\n'
              '        case 4:\n'
              '        {\n'
              '            *output++ = static_cast<wchar_t>(codepoint);\n'
              '            break;\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000868',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=736,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        default:\n'
              '        {\n'
              '            if ((codepoint <= 0xFFFF) && ((codepoint < 0xD800) '
              '|| (codepoint > 0xDFFF)))\n'
              '            {\n'
              '                *output++ = static_cast<wchar_t>(codepoint);\n'
              '            }\n'
              '            else if (replacement)\n'
              '            {\n'
              '                *output++ = replacement;\n'
              '            }\n'
              '            break;\n'
              '        }\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000869',
         path='/Labirint Game/sfml/include/SFML/System/Utf.inl',
         lineno=750,
         depth=1,
         type='documentation',
         name='',
         text='\n    return output;\n}\n')

Fragment(uuid='NORMALIZED-000870',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Vector2.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000871',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.hpp',
         lineno=29,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Utility template class for manipulating\n'
              '///        2-dimensional vectors\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'class Vector2\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates a Vector2(0, 0).\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the vector from its coordinates\n'
              '    ///\n'
              '    /// \\param X X coordinate\n'
              '    /// \\param Y Y coordinate\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2(T X, T Y);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the vector from another type of '
              'vector\n'
              '    ///\n'
              "    /// This constructor doesn't replace the copy constructor,\n"
              "    /// it's called only when U != T.\n"
              '    /// A call to this constructor will fail to compile if U\n'
              '    /// is not convertible to T.\n'
              '    ///\n'
              '    /// \\param vector Vector to convert\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename U>\n'
              '    explicit Vector2(const Vector2<U>& vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    T x; ///< X coordinate of the vector\n'
              '    T y; ///< Y coordinate of the vector\n'
              '};\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of unary operator -\n'
              '///\n'
              '/// \\param right Vector to negate\n'
              '///\n'
              '/// \\return Memberwise opposite of the vector\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector2<T> operator -(const Vector2<T>& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator +=\n'
              '///\n'
              '/// This operator performs a memberwise addition of both '
              'vectors,\n'
              '/// and assigns the result to \\a left.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector2<T>& operator +=(Vector2<T>& left, const Vector2<T>& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator -=\n'
              '///\n'
              '/// This operator performs a memberwise subtraction of both '
              'vectors,\n'
              '/// and assigns the result to \\a left.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector2<T>& operator -=(Vector2<T>& left, const Vector2<T>& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator +\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return Memberwise addition of both vectors\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector2<T> operator +(const Vector2<T>& left, const Vector2<T>& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator -\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return Memberwise subtraction of both vectors\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector2<T> operator -(const Vector2<T>& left, const Vector2<T>& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator *\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a scalar value)\n'
              '///\n'
              '/// \\return Memberwise multiplication by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector2<T> operator *(const Vector2<T>& left, T right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator *\n'
              '///\n'
              '/// \\param left  Left operand (a scalar value)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return Memberwise multiplication by \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector2<T> operator *(T left, const Vector2<T>& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator *=\n'
              '///\n'
              '/// This operator performs a memberwise multiplication by \\a '
              'right,\n'
              '/// and assigns the result to \\a left.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a scalar value)\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector2<T>& operator *=(Vector2<T>& left, T right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator /\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a scalar value)\n'
              '///\n'
              '/// \\return Memberwise division by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector2<T> operator /(const Vector2<T>& left, T right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator /=\n'
              '///\n'
              '/// This operator performs a memberwise division by \\a right,\n'
              '/// and assigns the result to \\a left.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a scalar value)\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector2<T>& operator /=(Vector2<T>& left, T right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator ==\n'
              '///\n'
              '/// This operator compares strict equality between two '
              'vectors.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return True if \\a left is equal to \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'bool operator ==(const Vector2<T>& left, const Vector2<T>& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector2\n'
              '/// \\brief Overload of binary operator !=\n'
              '///\n'
              '/// This operator compares strict difference between two '
              'vectors.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return True if \\a left is not equal to \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'bool operator !=(const Vector2<T>& left, const Vector2<T>& '
              'right);\n'
              '\n'
              '#include <SFML/System/Vector2.inl>\n'
              '\n'
              '// Define the most common types\n'
              'typedef Vector2<int>          Vector2i;\n'
              'typedef Vector2<unsigned int> Vector2u;\n'
              'typedef Vector2<float>        Vector2f;\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000872',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000873',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000874',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint Game/sfml/include/SFML/System/Vector2.inl\n')

Fragment(uuid='NORMALIZED-000875',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n// SFML - Simple and Fast Multimedia Library')

Fragment(uuid='NORMALIZED-000876',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)')

Fragment(uuid='NORMALIZED-000877',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000878',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "// This software is provided 'as-is', without any express or "
              'implied warranty.')

Fragment(uuid='NORMALIZED-000879',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// In no event will the authors be held liable for any damages '
              'arising from the use of this software.')

Fragment(uuid='NORMALIZED-000880',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000881',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Permission is granted to anyone to use this software for any '
              'purpose,')

Fragment(uuid='NORMALIZED-000882',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// including commercial applications, and to alter it and '
              'redistribute it freely,')

Fragment(uuid='NORMALIZED-000883',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n// subject to the following restrictions:')

Fragment(uuid='NORMALIZED-000884',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000885',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n// 1. The origin of this software must not be misrepresented;')

Fragment(uuid='NORMALIZED-000886',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n//    you must not claim that you wrote the original software.')

Fragment(uuid='NORMALIZED-000887',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n//    If you use this software in a product, an acknowledgment')

Fragment(uuid='NORMALIZED-000888',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    in the product documentation would be appreciated but is '
              'not required.')

Fragment(uuid='NORMALIZED-000889',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000890',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n// 2. Altered source versions must be plainly marked as such,')

Fragment(uuid='NORMALIZED-000891',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    and must not be misrepresented as being the original '
              'software.')

Fragment(uuid='NORMALIZED-000892',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000893',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// 3. This notice may not be removed or altered from any source '
              'distribution.')

Fragment(uuid='NORMALIZED-000894',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000895',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000896',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000897',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000898',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T>::Vector2() :\n'
              'x(0),\n'
              'y(0)\n'
              '{\n')

Fragment(uuid='NORMALIZED-000899',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=32,
         depth=1,
         type='documentation',
         name='',
         text='\n}\n\n')

Fragment(uuid='NORMALIZED-000900',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T>::Vector2(T X, T Y) :\n'
              'x(X),\n'
              'y(Y)\n'
              '{\n')

Fragment(uuid='NORMALIZED-000901',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=42,
         depth=1,
         type='documentation',
         name='',
         text='\n}\n\n')

Fragment(uuid='NORMALIZED-000902',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=45,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'template <typename U>\n'
              'inline Vector2<T>::Vector2(const Vector2<U>& vector) :\n'
              'x(static_cast<T>(vector.x)),\n'
              'y(static_cast<T>(vector.y))\n'
              '{\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000903',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=55,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T> operator -(const Vector2<T>& right)\n'
              '{\n'
              '    return Vector2<T>(-right.x, -right.y);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000904',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=63,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T>& operator +=(Vector2<T>& left, const '
              'Vector2<T>& right)\n'
              '{\n'
              '    left.x += right.x;\n'
              '    left.y += right.y;\n')

Fragment(uuid='NORMALIZED-000905',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=70,
         depth=1,
         type='documentation',
         name='',
         text='\n    return left;\n}\n\n')

Fragment(uuid='NORMALIZED-000906',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=74,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T>& operator -=(Vector2<T>& left, const '
              'Vector2<T>& right)\n'
              '{\n'
              '    left.x -= right.x;\n'
              '    left.y -= right.y;\n')

Fragment(uuid='NORMALIZED-000907',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=81,
         depth=1,
         type='documentation',
         name='',
         text='\n    return left;\n}\n\n')

Fragment(uuid='NORMALIZED-000908',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=85,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T> operator +(const Vector2<T>& left, const '
              'Vector2<T>& right)\n'
              '{\n'
              '    return Vector2<T>(left.x + right.x, left.y + right.y);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000909',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=93,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T> operator -(const Vector2<T>& left, const '
              'Vector2<T>& right)\n'
              '{\n'
              '    return Vector2<T>(left.x - right.x, left.y - right.y);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000910',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=101,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T> operator *(const Vector2<T>& left, T right)\n'
              '{\n'
              '    return Vector2<T>(left.x * right, left.y * right);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000911',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=109,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T> operator *(T left, const Vector2<T>& right)\n'
              '{\n'
              '    return Vector2<T>(right.x * left, right.y * left);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000912',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=117,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T>& operator *=(Vector2<T>& left, T right)\n'
              '{\n'
              '    left.x *= right;\n'
              '    left.y *= right;\n')

Fragment(uuid='NORMALIZED-000913',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=124,
         depth=1,
         type='documentation',
         name='',
         text='\n    return left;\n}\n\n')

Fragment(uuid='NORMALIZED-000914',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=128,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T> operator /(const Vector2<T>& left, T right)\n'
              '{\n'
              '    return Vector2<T>(left.x / right, left.y / right);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000915',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=136,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector2<T>& operator /=(Vector2<T>& left, T right)\n'
              '{\n'
              '    left.x /= right;\n'
              '    left.y /= right;\n')

Fragment(uuid='NORMALIZED-000916',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=143,
         depth=1,
         type='documentation',
         name='',
         text='\n    return left;\n}\n\n')

Fragment(uuid='NORMALIZED-000917',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=147,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline bool operator ==(const Vector2<T>& left, const '
              'Vector2<T>& right)\n'
              '{\n'
              '    return (left.x == right.x) && (left.y == right.y);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000918',
         path='/Labirint Game/sfml/include/SFML/System/Vector2.inl',
         lineno=155,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline bool operator !=(const Vector2<T>& left, const '
              'Vector2<T>& right)\n'
              '{\n'
              '    return (left.x != right.x) || (left.y != right.y);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000919',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/System/Vector3.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000920',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.hpp',
         lineno=29,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Utility template class for manipulating\n'
              '///        3-dimensional vectors\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'class Vector3\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// Creates a Vector3(0, 0, 0).\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector3();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the vector from its coordinates\n'
              '    ///\n'
              '    /// \\param X X coordinate\n'
              '    /// \\param Y Y coordinate\n'
              '    /// \\param Z Z coordinate\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector3(T X, T Y, T Z);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the vector from another type of '
              'vector\n'
              '    ///\n'
              "    /// This constructor doesn't replace the copy constructor,\n"
              "    /// it's called only when U != T.\n"
              '    /// A call to this constructor will fail to compile if U\n'
              '    /// is not convertible to T.\n'
              '    ///\n'
              '    /// \\param vector Vector to convert\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    template <typename U>\n'
              '    explicit Vector3(const Vector3<U>& vector);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    T x; ///< X coordinate of the vector\n'
              '    T y; ///< Y coordinate of the vector\n'
              '    T z; ///< Z coordinate of the vector\n'
              '};\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of unary operator -\n'
              '///\n'
              '/// \\param left Vector to negate\n'
              '///\n'
              '/// \\return Memberwise opposite of the vector\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector3<T> operator -(const Vector3<T>& left);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator +=\n'
              '///\n'
              '/// This operator performs a memberwise addition of both '
              'vectors,\n'
              '/// and assigns the result to \\a left.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector3<T>& operator +=(Vector3<T>& left, const Vector3<T>& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator -=\n'
              '///\n'
              '/// This operator performs a memberwise subtraction of both '
              'vectors,\n'
              '/// and assigns the result to \\a left.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector3<T>& operator -=(Vector3<T>& left, const Vector3<T>& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator +\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return Memberwise addition of both vectors\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector3<T> operator +(const Vector3<T>& left, const Vector3<T>& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator -\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return Memberwise subtraction of both vectors\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector3<T> operator -(const Vector3<T>& left, const Vector3<T>& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator *\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a scalar value)\n'
              '///\n'
              '/// \\return Memberwise multiplication by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector3<T> operator *(const Vector3<T>& left, T right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator *\n'
              '///\n'
              '/// \\param left  Left operand (a scalar value)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return Memberwise multiplication by \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector3<T> operator *(T left, const Vector3<T>& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator *=\n'
              '///\n'
              '/// This operator performs a memberwise multiplication by \\a '
              'right,\n'
              '/// and assigns the result to \\a left.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a scalar value)\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector3<T>& operator *=(Vector3<T>& left, T right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator /\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a scalar value)\n'
              '///\n'
              '/// \\return Memberwise division by \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector3<T> operator /(const Vector3<T>& left, T right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator /=\n'
              '///\n'
              '/// This operator performs a memberwise division by \\a right,\n'
              '/// and assigns the result to \\a left.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a scalar value)\n'
              '///\n'
              '/// \\return Reference to \\a left\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'Vector3<T>& operator /=(Vector3<T>& left, T right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator ==\n'
              '///\n'
              '/// This operator compares strict equality between two '
              'vectors.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return True if \\a left is equal to \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'bool operator ==(const Vector3<T>& left, const Vector3<T>& '
              'right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates Vector3\n'
              '/// \\brief Overload of binary operator !=\n'
              '///\n'
              '/// This operator compares strict difference between two '
              'vectors.\n'
              '///\n'
              '/// \\param left  Left operand (a vector)\n'
              '/// \\param right Right operand (a vector)\n'
              '///\n'
              '/// \\return True if \\a left is not equal to \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'bool operator !=(const Vector3<T>& left, const Vector3<T>& '
              'right);\n'
              '\n'
              '#include <SFML/System/Vector3.inl>\n'
              '\n'
              '// Define the most common types\n'
              'typedef Vector3<int>   Vector3i;\n'
              'typedef Vector3<float> Vector3f;\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000921',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000922',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000923',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint Game/sfml/include/SFML/System/Vector3.inl\n')

Fragment(uuid='NORMALIZED-000924',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n// SFML - Simple and Fast Multimedia Library')

Fragment(uuid='NORMALIZED-000925',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Copyright (C) 2007-2018 Laurent Gomila (laurent@sfml-dev.org)')

Fragment(uuid='NORMALIZED-000926',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000927',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "// This software is provided 'as-is', without any express or "
              'implied warranty.')

Fragment(uuid='NORMALIZED-000928',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// In no event will the authors be held liable for any damages '
              'arising from the use of this software.')

Fragment(uuid='NORMALIZED-000929',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000930',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// Permission is granted to anyone to use this software for any '
              'purpose,')

Fragment(uuid='NORMALIZED-000931',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// including commercial applications, and to alter it and '
              'redistribute it freely,')

Fragment(uuid='NORMALIZED-000932',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n// subject to the following restrictions:')

Fragment(uuid='NORMALIZED-000933',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000934',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n// 1. The origin of this software must not be misrepresented;')

Fragment(uuid='NORMALIZED-000935',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n//    you must not claim that you wrote the original software.')

Fragment(uuid='NORMALIZED-000936',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n//    If you use this software in a product, an acknowledgment')

Fragment(uuid='NORMALIZED-000937',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    in the product documentation would be appreciated but is '
              'not required.')

Fragment(uuid='NORMALIZED-000938',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000939',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n// 2. Altered source versions must be plainly marked as such,')

Fragment(uuid='NORMALIZED-000940',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '//    and must not be misrepresented as being the original '
              'software.')

Fragment(uuid='NORMALIZED-000941',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000942',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '// 3. This notice may not be removed or altered from any source '
              'distribution.')

Fragment(uuid='NORMALIZED-000943',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n//')

Fragment(uuid='NORMALIZED-000944',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n////////////////////////////////////////////////////////////')

Fragment(uuid='NORMALIZED-000945',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000946',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000947',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T>::Vector3() :\n'
              'x(0),\n'
              'y(0),\n'
              'z(0)\n'
              '{\n')

Fragment(uuid='NORMALIZED-000948',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\n}\n\n')

Fragment(uuid='NORMALIZED-000949',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=36,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T>::Vector3(T X, T Y, T Z) :\n'
              'x(X),\n'
              'y(Y),\n'
              'z(Z)\n'
              '{\n')

Fragment(uuid='NORMALIZED-000950',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\n}\n\n')

Fragment(uuid='NORMALIZED-000951',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=47,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'template <typename U>\n'
              'inline Vector3<T>::Vector3(const Vector3<U>& vector) :\n'
              'x(static_cast<T>(vector.x)),\n'
              'y(static_cast<T>(vector.y)),\n'
              'z(static_cast<T>(vector.z))\n'
              '{\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000952',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=58,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T> operator -(const Vector3<T>& left)\n'
              '{\n'
              '    return Vector3<T>(-left.x, -left.y, -left.z);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000953',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=66,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T>& operator +=(Vector3<T>& left, const '
              'Vector3<T>& right)\n'
              '{\n'
              '    left.x += right.x;\n'
              '    left.y += right.y;\n'
              '    left.z += right.z;\n')

Fragment(uuid='NORMALIZED-000954',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=74,
         depth=1,
         type='documentation',
         name='',
         text='\n    return left;\n}\n\n')

Fragment(uuid='NORMALIZED-000955',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=78,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T>& operator -=(Vector3<T>& left, const '
              'Vector3<T>& right)\n'
              '{\n'
              '    left.x -= right.x;\n'
              '    left.y -= right.y;\n'
              '    left.z -= right.z;\n')

Fragment(uuid='NORMALIZED-000956',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=86,
         depth=1,
         type='documentation',
         name='',
         text='\n    return left;\n}\n\n')

Fragment(uuid='NORMALIZED-000957',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=90,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T> operator +(const Vector3<T>& left, const '
              'Vector3<T>& right)\n'
              '{\n'
              '    return Vector3<T>(left.x + right.x, left.y + right.y, '
              'left.z + right.z);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000958',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=98,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T> operator -(const Vector3<T>& left, const '
              'Vector3<T>& right)\n'
              '{\n'
              '    return Vector3<T>(left.x - right.x, left.y - right.y, '
              'left.z - right.z);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000959',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=106,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T> operator *(const Vector3<T>& left, T right)\n'
              '{\n'
              '    return Vector3<T>(left.x * right, left.y * right, left.z * '
              'right);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000960',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=114,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T> operator *(T left, const Vector3<T>& right)\n'
              '{\n'
              '    return Vector3<T>(right.x * left, right.y * left, right.z * '
              'left);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000961',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T>& operator *=(Vector3<T>& left, T right)\n'
              '{\n'
              '    left.x *= right;\n'
              '    left.y *= right;\n'
              '    left.z *= right;\n')

Fragment(uuid='NORMALIZED-000962',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=130,
         depth=1,
         type='documentation',
         name='',
         text='\n    return left;\n}\n\n')

Fragment(uuid='NORMALIZED-000963',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=134,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T> operator /(const Vector3<T>& left, T right)\n'
              '{\n'
              '    return Vector3<T>(left.x / right, left.y / right, left.z / '
              'right);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000964',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=142,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline Vector3<T>& operator /=(Vector3<T>& left, T right)\n'
              '{\n'
              '    left.x /= right;\n'
              '    left.y /= right;\n'
              '    left.z /= right;\n')

Fragment(uuid='NORMALIZED-000965',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=150,
         depth=1,
         type='documentation',
         name='',
         text='\n    return left;\n}\n\n')

Fragment(uuid='NORMALIZED-000966',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=154,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline bool operator ==(const Vector3<T>& left, const '
              'Vector3<T>& right)\n'
              '{\n'
              '    return (left.x == right.x) && (left.y == right.y) && '
              '(left.z == right.z);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000967',
         path='/Labirint Game/sfml/include/SFML/System/Vector3.inl',
         lineno=162,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '////////////////////////////////////////////////////////////\n'
              'template <typename T>\n'
              'inline bool operator !=(const Vector3<T>& left, const '
              'Vector3<T>& right)\n'
              '{\n'
              '    return (left.x != right.x) || (left.y != right.y) || '
              '(left.z != right.z);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000968',
         path='/Labirint Game/sfml/include/SFML/Window.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window.hpp\n')

Fragment(uuid='NORMALIZED-000969',
         path='/Labirint Game/sfml/include/SFML/Window/Clipboard.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Clipboard.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000970',
         path='/Labirint Game/sfml/include/SFML/Window/Clipboard.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Give access to the system clipboard\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API Clipboard\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the content of the clipboard as string '
              'data\n'
              '    ///\n'
              '    /// This function returns the content of the clipboard\n'
              '    /// as a string. If the clipboard does not contain string\n'
              '    /// it returns an empty sf::String object.\n'
              '    ///\n'
              '    /// \\return Clipboard contents as sf::String object\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static String getString();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the content of the clipboard as string '
              'data\n'
              '    ///\n'
              '    /// This function sets the content of the clipboard as a\n'
              '    /// string.\n'
              '    ///\n'
              '    /// \\warning Due to limitations on some operating '
              'systems,\n'
              '    ///          setting the clipboard contents is only\n'
              '    ///          guaranteed to work if there is currently an\n'
              '    ///          open window for which events are being '
              'handled.\n'
              '    ///\n'
              '    /// \\param text sf::String containing the data to be sent\n'
              '    /// to the clipboard\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setString(const String& text);\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000971',
         path='/Labirint Game/sfml/include/SFML/Window/Context.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Context.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000972',
         path='/Labirint Game/sfml/include/SFML/Window/Context.hpp',
         lineno=37,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'namespace priv\n'
              '{\n'
              '    class GlContext;\n'
              '}\n'
              '\n'
              'typedef void (*GlFunctionPointer)();\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Class holding a valid drawing context\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API Context : GlResource, NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// The constructor creates and activates the context\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Context();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    /// The destructor deactivates and destroys the context\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Context();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Activate or deactivate explicitly the context\n'
              '    ///\n'
              '    /// \\param active True to activate, false to deactivate\n'
              '    ///\n'
              '    /// \\return True on success, false on failure\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool setActive(bool active);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the settings of the context\n'
              '    ///\n'
              '    /// Note that these settings may be different than the '
              'ones\n'
              '    /// passed to the constructor; they are indeed adjusted if '
              'the\n'
              '    /// original settings are not directly supported by the '
              'system.\n'
              '    ///\n'
              '    /// \\return Structure containing the settings\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const ContextSettings& getSettings() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check whether a given OpenGL extension is '
              'available\n'
              '    ///\n'
              '    /// \\param name Name of the extension to check for\n'
              '    ///\n'
              '    /// \\return True if available, false if unavailable\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isExtensionAvailable(const char* name);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the address of an OpenGL function\n'
              '    ///\n'
              '    /// \\param name Name of the function to get the address '
              'of\n'
              '    ///\n'
              '    /// \\return Address of the OpenGL function, 0 on failure\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static GlFunctionPointer getFunction(const char* name);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the currently active context\n'
              '    ///\n'
              '    /// This function will only return sf::Context objects.\n'
              '    /// Contexts created e.g. by RenderTargets or for internal\n'
              '    /// use will not be returned by this function.\n'
              '    ///\n'
              '    /// \\return The currently active context or NULL if none '
              'is active\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static const Context* getActiveContext();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Get the currently active context's ID\n"
              '    ///\n'
              '    /// The context ID is used to identify contexts when\n'
              '    /// managing unshareable OpenGL resources.\n'
              '    ///\n'
              "    /// \\return The active context's ID or 0 if no context is "
              'currently active\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static Uint64 getActiveContextId();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a in-memory context\n'
              '    ///\n'
              "    /// This constructor is for internal use, you don't need\n"
              '    /// to bother with it.\n'
              '    ///\n'
              '    /// \\param settings Creation parameters\n'
              '    /// \\param width    Back buffer width\n'
              '    /// \\param height   Back buffer height\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Context(const ContextSettings& settings, unsigned int '
              'width, unsigned int height);\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    priv::GlContext* m_context; ///< Internal OpenGL context\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000973',
         path='/Labirint Game/sfml/include/SFML/Window/ContextSettings.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/ContextSettings.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000974',
         path='/Labirint Game/sfml/include/SFML/Window/ContextSettings.hpp',
         lineno=30,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Structure defining the settings of the OpenGL\n'
              '///        context attached to a window\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'struct ContextSettings\n'
              '{\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enumeration of the context attribute flags\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Attribute\n'
              '    {\n'
              '        Default = 0,      ///< Non-debug, compatibility context '
              '(this and the core attribute are mutually exclusive)\n'
              '        Core    = 1 << 0, ///< Core attribute\n'
              '        Debug   = 1 << 2  ///< Debug attribute\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// \\param depth        Depth buffer bits\n'
              '    /// \\param stencil      Stencil buffer bits\n'
              '    /// \\param antialiasing Antialiasing level\n'
              '    /// \\param major        Major number of the context '
              'version\n'
              '    /// \\param minor        Minor number of the context '
              'version\n'
              '    /// \\param attributes   Attribute flags of the context\n'
              '    /// \\param sRgb         sRGB capable framebuffer\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit ContextSettings(unsigned int depth = 0, unsigned '
              'int stencil = 0, unsigned int antialiasing = 0, unsigned int '
              'major = 1, unsigned int minor = 1, unsigned int attributes = '
              'Default, bool sRgb = false) :\n'
              '    depthBits        (depth),\n'
              '    stencilBits      (stencil),\n'
              '    antialiasingLevel(antialiasing),\n'
              '    majorVersion     (major),\n'
              '    minorVersion     (minor),\n'
              '    attributeFlags   (attributes),\n'
              '    sRgbCapable      (sRgb)\n'
              '    {\n'
              '    }\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int depthBits;         ///< Bits of the depth '
              'buffer\n'
              '    unsigned int stencilBits;       ///< Bits of the stencil '
              'buffer\n'
              '    unsigned int antialiasingLevel; ///< Level of antialiasing\n'
              '    unsigned int majorVersion;      ///< Major number of the '
              'context version to create\n'
              '    unsigned int minorVersion;      ///< Minor number of the '
              'context version to create\n'
              '    Uint32       attributeFlags;    ///< The attribute flags to '
              'create the context with\n'
              '    bool         sRgbCapable;       ///< Whether the context '
              'framebuffer is sRGB capable\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000975',
         path='/Labirint Game/sfml/include/SFML/Window/Cursor.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Cursor.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000976',
         path='/Labirint Game/sfml/include/SFML/Window/Cursor.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'namespace priv\n'
              '{\n'
              '    class CursorImpl;\n'
              '}\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Cursor defines the appearance of a system cursor\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API Cursor : NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enumeration of the native system cursor types\n'
              '    ///\n'
              '    /// Refer to the following table to determine which cursor\n'
              '    /// is available on which platform.\n'
              '    ///\n'
              '    ///  Type                               | Linux | Mac OS X '
              '| Windows  |\n'
              '    /// '
              '------------------------------------|:-----:|:--------:|:--------:|\n'
              '    ///  sf::Cursor::Arrow                  |  yes  |    yes   '
              '|   yes    |\n'
              '    ///  sf::Cursor::ArrowWait              |  no   |    no    '
              '|   yes    |\n'
              '    ///  sf::Cursor::Wait                   |  yes  |    no    '
              '|   yes    |\n'
              '    ///  sf::Cursor::Text                   |  yes  |    yes   '
              '|   yes    |\n'
              '    ///  sf::Cursor::Hand                   |  yes  |    yes   '
              '|   yes    |\n'
              '    ///  sf::Cursor::SizeHorizontal         |  yes  |    yes   '
              '|   yes    |\n'
              '    ///  sf::Cursor::SizeVertical           |  yes  |    yes   '
              '|   yes    |\n'
              '    ///  sf::Cursor::SizeTopLeftBottomRight |  no   |    yes*  '
              '|   yes    |\n'
              '    ///  sf::Cursor::SizeBottomLeftTopRight |  no   |    yes*  '
              '|   yes    |\n'
              '    ///  sf::Cursor::SizeAll                |  yes  |    no    '
              '|   yes    |\n'
              '    ///  sf::Cursor::Cross                  |  yes  |    yes   '
              '|   yes    |\n'
              '    ///  sf::Cursor::Help                   |  yes  |    yes*  '
              '|   yes    |\n'
              '    ///  sf::Cursor::NotAllowed             |  yes  |    yes   '
              '|   yes    |\n'
              '    ///\n'
              '    ///  * These cursor types are undocumented so may not\n'
              '    ///    be available on all versions, but have been tested '
              'on 10.13\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Type\n'
              '    {\n'
              '        Arrow,                  ///< Arrow cursor (default)\n'
              '        ArrowWait,              ///< Busy arrow cursor\n'
              '        Wait,                   ///< Busy cursor\n'
              '        Text,                   ///< I-beam, cursor when '
              'hovering over a field allowing text entry\n'
              '        Hand,                   ///< Pointing hand cursor\n'
              '        SizeHorizontal,         ///< Horizontal double arrow '
              'cursor\n'
              '        SizeVertical,           ///< Vertical double arrow '
              'cursor\n'
              '        SizeTopLeftBottomRight, ///< Double arrow cursor going '
              'from top-left to bottom-right\n'
              '        SizeBottomLeftTopRight, ///< Double arrow cursor going '
              'from bottom-left to top-right\n'
              '        SizeAll,                ///< Combination of '
              'SizeHorizontal and SizeVertical\n'
              '        Cross,                  ///< Crosshair cursor\n'
              '        Help,                   ///< Help cursor\n'
              '        NotAllowed              ///< Action not allowed cursor\n'
              '    };\n'
              '\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              "    /// This constructor doesn't actually create the cursor;\n"
              '    /// initially the new instance is invalid and must not be\n'
              '    /// used until either loadFromPixels() or loadFromSystem()\n'
              '    /// is called and successfully created a cursor.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Cursor();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    /// This destructor releases the system resources\n'
              '    /// associated with this cursor, if any.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~Cursor();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create a cursor with the provided image\n'
              '    ///\n'
              '    /// \\a pixels must be an array of \\a width by \\a height '
              'pixels\n'
              '    /// in 32-bit RGBA format. If not, this will cause '
              'undefined behavior.\n'
              '    ///\n'
              '    /// If \\a pixels is null or either \\a width or \\a height '
              'are 0,\n'
              '    /// the current cursor is left unchanged and the function '
              'will\n'
              '    /// return false.\n'
              '    ///\n'
              '    /// In addition to specifying the pixel data, you can also\n'
              '    /// specify the location of the hotspot of the cursor. The\n'
              '    /// hotspot is the pixel coordinate within the cursor '
              'image\n'
              '    /// which will be located exactly where the mouse pointer\n'
              '    /// position is. Any mouse actions that are performed will\n'
              '    /// return the window/screen location of the hotspot.\n'
              '    ///\n'
              '    /// \\warning On Unix, the pixels are mapped into a '
              'monochrome\n'
              '    ///          bitmap: pixels with an alpha channel to 0 are\n'
              '    ///          transparent, black if the RGB channel are '
              'close\n'
              '    ///          to zero, and white otherwise.\n'
              '    ///\n'
              '    /// \\param pixels   Array of pixels of the image\n'
              '    /// \\param size     Width and height of the image\n'
              '    /// \\param hotspot  (x,y) location of the hotspot\n'
              '    /// \\return true if the cursor was successfully loaded;\n'
              '    ///         false otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromPixels(const Uint8* pixels, Vector2u size, '
              'Vector2u hotspot);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create a native system cursor\n'
              '    ///\n'
              '    /// Refer to the list of cursor available on each system\n'
              '    /// (see sf::Cursor::Type) to know whether a given cursor '
              'is\n'
              '    /// expected to load successfully or is not supported by\n'
              '    /// the operating system.\n'
              '    ///\n'
              '    /// \\param type Native system cursor type\n'
              '    /// \\return true if and only if the corresponding cursor '
              'is\n'
              '    ///         natively supported by the operating system;\n'
              '    ///         false otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool loadFromSystem(Type type);\n'
              '\n'
              'private:\n'
              '\n'
              '    friend class Window;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get access to the underlying implementation\n'
              '    ///\n'
              '    /// This is primarily designed for '
              'sf::Window::setMouseCursor,\n'
              '    /// hence the friendship.\n'
              '    ///\n'
              '    /// \\return a reference to the OS-specific implementation\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const priv::CursorImpl& getImpl() const;\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    priv::CursorImpl* m_impl; ///< Platform-specific '
              'implementation of the cursor\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000977',
         path='/Labirint Game/sfml/include/SFML/Window/Event.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Event.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000978',
         path='/Labirint Game/sfml/include/SFML/Window/Event.hpp',
         lineno=38,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Defines a system event and its parameters\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class Event\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Size events parameters (Resized)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct SizeEvent\n'
              '    {\n'
              '        unsigned int width;  ///< New width, in pixels\n'
              '        unsigned int height; ///< New height, in pixels\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Keyboard event parameters (KeyPressed, '
              'KeyReleased)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct KeyEvent\n'
              '    {\n'
              '        Keyboard::Key code;    ///< Code of the key that has '
              'been pressed\n'
              '        bool          alt;     ///< Is the Alt key pressed?\n'
              '        bool          control; ///< Is the Control key '
              'pressed?\n'
              '        bool          shift;   ///< Is the Shift key pressed?\n'
              '        bool          system;  ///< Is the System key pressed?\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Text event parameters (TextEntered)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct TextEvent\n'
              '    {\n'
              '        Uint32 unicode; ///< UTF-32 Unicode value of the '
              'character\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Mouse move event parameters (MouseMoved)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct MouseMoveEvent\n'
              '    {\n'
              '        int x; ///< X position of the mouse pointer, relative '
              'to the left of the owner window\n'
              '        int y; ///< Y position of the mouse pointer, relative '
              'to the top of the owner window\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Mouse buttons events parameters\n'
              '    ///        (MouseButtonPressed, MouseButtonReleased)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct MouseButtonEvent\n'
              '    {\n'
              '        Mouse::Button button; ///< Code of the button that has '
              'been pressed\n'
              '        int           x;      ///< X position of the mouse '
              'pointer, relative to the left of the owner window\n'
              '        int           y;      ///< Y position of the mouse '
              'pointer, relative to the top of the owner window\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Mouse wheel events parameters '
              '(MouseWheelMoved)\n'
              '    ///\n'
              '    /// \\deprecated This event is deprecated and potentially '
              'inaccurate.\n'
              '    ///             Use MouseWheelScrollEvent instead.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct MouseWheelEvent\n'
              '    {\n'
              '        int delta; ///< Number of ticks the wheel has moved '
              '(positive is up, negative is down)\n'
              '        int x;     ///< X position of the mouse pointer, '
              'relative to the left of the owner window\n'
              '        int y;     ///< Y position of the mouse pointer, '
              'relative to the top of the owner window\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Mouse wheel events parameters '
              '(MouseWheelScrolled)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct MouseWheelScrollEvent\n'
              '    {\n'
              '        Mouse::Wheel wheel; ///< Which wheel (for mice with '
              'multiple ones)\n'
              '        float        delta; ///< Wheel offset (positive is '
              'up/left, negative is down/right). High-precision mice may use '
              'non-integral offsets.\n'
              '        int          x;     ///< X position of the mouse '
              'pointer, relative to the left of the owner window\n'
              '        int          y;     ///< Y position of the mouse '
              'pointer, relative to the top of the owner window\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Joystick connection events parameters\n'
              '    ///        (JoystickConnected, JoystickDisconnected)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct JoystickConnectEvent\n'
              '    {\n'
              '        unsigned int joystickId; ///< Index of the joystick (in '
              'range [0 .. Joystick::Count - 1])\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Joystick axis move event parameters '
              '(JoystickMoved)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct JoystickMoveEvent\n'
              '    {\n'
              '        unsigned int   joystickId; ///< Index of the joystick '
              '(in range [0 .. Joystick::Count - 1])\n'
              '        Joystick::Axis axis;       ///< Axis on which the '
              'joystick moved\n'
              '        float          position;   ///< New position on the '
              'axis (in range [-100 .. 100])\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Joystick buttons events parameters\n'
              '    ///        (JoystickButtonPressed, JoystickButtonReleased)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct JoystickButtonEvent\n'
              '    {\n'
              '        unsigned int joystickId; ///< Index of the joystick (in '
              'range [0 .. Joystick::Count - 1])\n'
              '        unsigned int button;     ///< Index of the button that '
              'has been pressed (in range [0 .. Joystick::ButtonCount - 1])\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Touch events parameters (TouchBegan, '
              'TouchMoved, TouchEnded)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct TouchEvent\n'
              '    {\n'
              '        unsigned int finger; ///< Index of the finger in case '
              'of multi-touch events\n'
              '        int x;               ///< X position of the touch, '
              'relative to the left of the owner window\n'
              '        int y;               ///< Y position of the touch, '
              'relative to the top of the owner window\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Sensor event parameters (SensorChanged)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct SensorEvent\n'
              '    {\n'
              '        Sensor::Type type; ///< Type of the sensor\n'
              '        float x;           ///< Current value of the sensor on '
              'X axis\n'
              '        float y;           ///< Current value of the sensor on '
              'Y axis\n'
              '        float z;           ///< Current value of the sensor on '
              'Z axis\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enumeration of the different types of events\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum EventType\n'
              '    {\n'
              '        Closed,                 ///< The window requested to be '
              'closed (no data)\n'
              '        Resized,                ///< The window was resized '
              '(data in event.size)\n'
              '        LostFocus,              ///< The window lost the focus '
              '(no data)\n'
              '        GainedFocus,            ///< The window gained the '
              'focus (no data)\n'
              '        TextEntered,            ///< A character was entered '
              '(data in event.text)\n'
              '        KeyPressed,             ///< A key was pressed (data in '
              'event.key)\n'
              '        KeyReleased,            ///< A key was released (data '
              'in event.key)\n'
              '        MouseWheelMoved,        ///< The mouse wheel was '
              'scrolled (data in event.mouseWheel) (deprecated)\n'
              '        MouseWheelScrolled,     ///< The mouse wheel was '
              'scrolled (data in event.mouseWheelScroll)\n'
              '        MouseButtonPressed,     ///< A mouse button was pressed '
              '(data in event.mouseButton)\n'
              '        MouseButtonReleased,    ///< A mouse button was '
              'released (data in event.mouseButton)\n'
              '        MouseMoved,             ///< The mouse cursor moved '
              '(data in event.mouseMove)\n'
              '        MouseEntered,           ///< The mouse cursor entered '
              'the area of the window (no data)\n'
              '        MouseLeft,              ///< The mouse cursor left the '
              'area of the window (no data)\n'
              '        JoystickButtonPressed,  ///< A joystick button was '
              'pressed (data in event.joystickButton)\n'
              '        JoystickButtonReleased, ///< A joystick button was '
              'released (data in event.joystickButton)\n'
              '        JoystickMoved,          ///< The joystick moved along '
              'an axis (data in event.joystickMove)\n'
              '        JoystickConnected,      ///< A joystick was connected '
              '(data in event.joystickConnect)\n'
              '        JoystickDisconnected,   ///< A joystick was '
              'disconnected (data in event.joystickConnect)\n'
              '        TouchBegan,             ///< A touch event began (data '
              'in event.touch)\n'
              '        TouchMoved,             ///< A touch moved (data in '
              'event.touch)\n'
              '        TouchEnded,             ///< A touch event ended (data '
              'in event.touch)\n'
              '        SensorChanged,          ///< A sensor value changed '
              '(data in event.sensor)\n'
              '\n'
              '        Count                   ///< Keep last -- the total '
              'number of event types\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    EventType type; ///< Type of the event\n'
              '\n'
              '    union\n'
              '    {\n'
              '        SizeEvent             size;              ///< Size '
              'event parameters (Event::Resized)\n'
              '        KeyEvent              key;               ///< Key event '
              'parameters (Event::KeyPressed, Event::KeyReleased)\n'
              '        TextEvent             text;              ///< Text '
              'event parameters (Event::TextEntered)\n'
              '        MouseMoveEvent        mouseMove;         ///< Mouse '
              'move event parameters (Event::MouseMoved)\n'
              '        MouseButtonEvent      mouseButton;       ///< Mouse '
              'button event parameters (Event::MouseButtonPressed, '
              'Event::MouseButtonReleased)\n'
              '        MouseWheelEvent       mouseWheel;        ///< Mouse '
              'wheel event parameters (Event::MouseWheelMoved) (deprecated)\n'
              '        MouseWheelScrollEvent mouseWheelScroll;  ///< Mouse '
              'wheel event parameters (Event::MouseWheelScrolled)\n'
              '        JoystickMoveEvent     joystickMove;      ///< Joystick '
              'move event parameters (Event::JoystickMoved)\n'
              '        JoystickButtonEvent   joystickButton;    ///< Joystick '
              'button event parameters (Event::JoystickButtonPressed, '
              'Event::JoystickButtonReleased)\n'
              '        JoystickConnectEvent  joystickConnect;   ///< Joystick '
              '(dis)connect event parameters (Event::JoystickConnected, '
              'Event::JoystickDisconnected)\n'
              '        TouchEvent            touch;             ///< Touch '
              'events parameters (Event::TouchBegan, Event::TouchMoved, '
              'Event::TouchEnded)\n'
              '        SensorEvent           sensor;            ///< Sensor '
              'event parameters (Event::SensorChanged)\n'
              '    };\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000979',
         path='/Labirint Game/sfml/include/SFML/Window/Export.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Export.hpp\n')

Fragment(uuid='NORMALIZED-000980',
         path='/Labirint Game/sfml/include/SFML/Window/GlResource.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/GlResource.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000981',
         path='/Labirint Game/sfml/include/SFML/Window/GlResource.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '\n'
              'class Context;\n'
              '\n'
              'typedef void(*ContextDestroyCallback)(void*);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Base class for classes that require an OpenGL '
              'context\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API GlResource\n'
              '{\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    GlResource();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    ~GlResource();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Register a function to be called when a context '
              'is destroyed\n'
              '    ///\n'
              '    /// This is used for internal purposes in order to '
              'properly\n'
              '    /// clean up OpenGL resources that cannot be shared '
              'between\n'
              '    /// contexts.\n'
              '    ///\n'
              '    /// \\param callback Function to be called when a context '
              'is destroyed\n'
              '    /// \\param arg      Argument to pass when calling the '
              'function\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void '
              'registerContextDestroyCallback(ContextDestroyCallback callback, '
              'void* arg);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief RAII helper class to temporarily lock an '
              'available context for use\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    class SFML_WINDOW_API TransientContextLock : NonCopyable\n'
              '    {\n'
              '    public:\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Default constructor\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        TransientContextLock();\n'
              '\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        /// \\brief Destructor\n'
              '        ///\n'
              '        '
              '////////////////////////////////////////////////////////////\n'
              '        ~TransientContextLock();\n'
              '    };\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000982',
         path='/Labirint Game/sfml/include/SFML/Window/Joystick.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Joystick.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000983',
         path='/Labirint Game/sfml/include/SFML/Window/Joystick.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Give access to the real-time state of the '
              'joysticks\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API Joystick\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Constants related to joysticks capabilities\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum\n'
              '    {\n'
              '        Count       = 8,  ///< Maximum number of supported '
              'joysticks\n'
              '        ButtonCount = 32, ///< Maximum number of supported '
              'buttons\n'
              '        AxisCount   = 8   ///< Maximum number of supported '
              'axes\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Axes supported by SFML joysticks\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Axis\n'
              '    {\n'
              '        X,    ///< The X axis\n'
              '        Y,    ///< The Y axis\n'
              '        Z,    ///< The Z axis\n'
              '        R,    ///< The R axis\n'
              '        U,    ///< The U axis\n'
              '        V,    ///< The V axis\n'
              '        PovX, ///< The X axis of the point-of-view hat\n'
              '        PovY  ///< The Y axis of the point-of-view hat\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Structure holding a joystick's identification\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    struct SFML_WINDOW_API Identification\n'
              '    {\n'
              '        Identification();\n'
              '\n'
              '        String       name;      ///< Name of the joystick\n'
              '        unsigned int vendorId;  ///< Manufacturer identifier\n'
              '        unsigned int productId; ///< Product identifier\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check if a joystick is connected\n'
              '    ///\n'
              '    /// \\param joystick Index of the joystick to check\n'
              '    ///\n'
              '    /// \\return True if the joystick is connected, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isConnected(unsigned int joystick);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Return the number of buttons supported by a '
              'joystick\n'
              '    ///\n'
              '    /// If the joystick is not connected, this function returns '
              '0.\n'
              '    ///\n'
              '    /// \\param joystick Index of the joystick\n'
              '    ///\n'
              '    /// \\return Number of buttons supported by the joystick\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static unsigned int getButtonCount(unsigned int joystick);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check if a joystick supports a given axis\n'
              '    ///\n'
              '    /// If the joystick is not connected, this function returns '
              'false.\n'
              '    ///\n'
              '    /// \\param joystick Index of the joystick\n'
              '    /// \\param axis     Axis to check\n'
              '    ///\n'
              '    /// \\return True if the joystick supports the axis, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool hasAxis(unsigned int joystick, Axis axis);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check if a joystick button is pressed\n'
              '    ///\n'
              '    /// If the joystick is not connected, this function returns '
              'false.\n'
              '    ///\n'
              '    /// \\param joystick Index of the joystick\n'
              '    /// \\param button   Button to check\n'
              '    ///\n'
              '    /// \\return True if the button is pressed, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isButtonPressed(unsigned int joystick, unsigned '
              'int button);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current position of a joystick axis\n'
              '    ///\n'
              '    /// If the joystick is not connected, this function returns '
              '0.\n'
              '    ///\n'
              '    /// \\param joystick Index of the joystick\n'
              '    /// \\param axis     Axis to check\n'
              '    ///\n'
              '    /// \\return Current position of the axis, in range [-100 '
              '.. 100]\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static float getAxisPosition(unsigned int joystick, Axis '
              'axis);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the joystick information\n'
              '    ///\n'
              '    /// \\param joystick Index of the joystick\n'
              '    ///\n'
              '    /// \\return Structure containing joystick information.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static Identification getIdentification(unsigned int '
              'joystick);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Update the states of all joysticks\n'
              '    ///\n'
              '    /// This function is used internally by SFML, so you '
              'normally\n'
              "    /// don't have to call it explicitly. However, you may need "
              'to\n'
              '    /// call it if you have no window yet (or no window at '
              'all):\n'
              '    /// in this case the joystick states are not updated '
              'automatically.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void update();\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000984',
         path='/Labirint Game/sfml/include/SFML/Window/Keyboard.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Keyboard.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000985',
         path='/Labirint Game/sfml/include/SFML/Window/Keyboard.hpp',
         lineno=34,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Give access to the real-time state of the keyboard\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API Keyboard\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Key codes\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Key\n'
              '    {\n'
              '        Unknown = -1, ///< Unhandled key\n'
              '        A = 0,        ///< The A key\n'
              '        B,            ///< The B key\n'
              '        C,            ///< The C key\n'
              '        D,            ///< The D key\n'
              '        E,            ///< The E key\n'
              '        F,            ///< The F key\n'
              '        G,            ///< The G key\n'
              '        H,            ///< The H key\n'
              '        I,            ///< The I key\n'
              '        J,            ///< The J key\n'
              '        K,            ///< The K key\n'
              '        L,            ///< The L key\n'
              '        M,            ///< The M key\n'
              '        N,            ///< The N key\n'
              '        O,            ///< The O key\n'
              '        P,            ///< The P key\n'
              '        Q,            ///< The Q key\n'
              '        R,            ///< The R key\n'
              '        S,            ///< The S key\n'
              '        T,            ///< The T key\n'
              '        U,            ///< The U key\n'
              '        V,            ///< The V key\n'
              '        W,            ///< The W key\n'
              '        X,            ///< The X key\n'
              '        Y,            ///< The Y key\n'
              '        Z,            ///< The Z key\n'
              '        Num0,         ///< The 0 key\n'
              '        Num1,         ///< The 1 key\n'
              '        Num2,         ///< The 2 key\n'
              '        Num3,         ///< The 3 key\n'
              '        Num4,         ///< The 4 key\n'
              '        Num5,         ///< The 5 key\n'
              '        Num6,         ///< The 6 key\n'
              '        Num7,         ///< The 7 key\n'
              '        Num8,         ///< The 8 key\n'
              '        Num9,         ///< The 9 key\n'
              '        Escape,       ///< The Escape key\n'
              '        LControl,     ///< The left Control key\n'
              '        LShift,       ///< The left Shift key\n'
              '        LAlt,         ///< The left Alt key\n'
              '        LSystem,      ///< The left OS specific key: window '
              '(Windows and Linux), apple (MacOS X), ...\n'
              '        RControl,     ///< The right Control key\n'
              '        RShift,       ///< The right Shift key\n'
              '        RAlt,         ///< The right Alt key\n'
              '        RSystem,      ///< The right OS specific key: window '
              '(Windows and Linux), apple (MacOS X), ...\n'
              '        Menu,         ///< The Menu key\n'
              '        LBracket,     ///< The [ key\n'
              '        RBracket,     ///< The ] key\n'
              '        Semicolon,    ///< The ; key\n'
              '        Comma,        ///< The , key\n'
              '        Period,       ///< The . key\n'
              "        Quote,        ///< The ' key\n"
              '        Slash,        ///< The / key\n'
              '        Backslash,    ///< The \\ key\n'
              '        Tilde,        ///< The ~ key\n'
              '        Equal,        ///< The = key\n'
              '        Hyphen,       ///< The - key (hyphen)\n'
              '        Space,        ///< The Space key\n'
              '        Enter,        ///< The Enter/Return keys\n'
              '        Backspace,    ///< The Backspace key\n'
              '        Tab,          ///< The Tabulation key\n'
              '        PageUp,       ///< The Page up key\n'
              '        PageDown,     ///< The Page down key\n'
              '        End,          ///< The End key\n'
              '        Home,         ///< The Home key\n'
              '        Insert,       ///< The Insert key\n'
              '        Delete,       ///< The Delete key\n'
              '        Add,          ///< The + key\n'
              '        Subtract,     ///< The - key (minus, usually from '
              'numpad)\n'
              '        Multiply,     ///< The * key\n'
              '        Divide,       ///< The / key\n'
              '        Left,         ///< Left arrow\n'
              '        Right,        ///< Right arrow\n'
              '        Up,           ///< Up arrow\n'
              '        Down,         ///< Down arrow\n'
              '        Numpad0,      ///< The numpad 0 key\n'
              '        Numpad1,      ///< The numpad 1 key\n'
              '        Numpad2,      ///< The numpad 2 key\n'
              '        Numpad3,      ///< The numpad 3 key\n'
              '        Numpad4,      ///< The numpad 4 key\n'
              '        Numpad5,      ///< The numpad 5 key\n'
              '        Numpad6,      ///< The numpad 6 key\n'
              '        Numpad7,      ///< The numpad 7 key\n'
              '        Numpad8,      ///< The numpad 8 key\n'
              '        Numpad9,      ///< The numpad 9 key\n'
              '        F1,           ///< The F1 key\n'
              '        F2,           ///< The F2 key\n'
              '        F3,           ///< The F3 key\n'
              '        F4,           ///< The F4 key\n'
              '        F5,           ///< The F5 key\n'
              '        F6,           ///< The F6 key\n'
              '        F7,           ///< The F7 key\n'
              '        F8,           ///< The F8 key\n'
              '        F9,           ///< The F9 key\n'
              '        F10,          ///< The F10 key\n'
              '        F11,          ///< The F11 key\n'
              '        F12,          ///< The F12 key\n'
              '        F13,          ///< The F13 key\n'
              '        F14,          ///< The F14 key\n'
              '        F15,          ///< The F15 key\n'
              '        Pause,        ///< The Pause key\n'
              '\n'
              '        KeyCount,     ///< Keep last -- the total number of '
              'keyboard keys\n'
              '\n'
              '        // Deprecated values:\n'
              '\n'
              '        Dash      = Hyphen,       ///< \\deprecated Use Hyphen '
              'instead\n'
              '        BackSpace = Backspace,    ///< \\deprecated Use '
              'Backspace instead\n'
              '        BackSlash = Backslash,    ///< \\deprecated Use '
              'Backslash instead\n'
              '        SemiColon = Semicolon,    ///< \\deprecated Use '
              'Semicolon instead\n'
              '        Return    = Enter         ///< \\deprecated Use Enter '
              'instead\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check if a key is pressed\n'
              '    ///\n'
              '    /// \\param key Key to check\n'
              '    ///\n'
              '    /// \\return True if the key is pressed, false otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isKeyPressed(Key key);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Show or hide the virtual keyboard\n'
              '    ///\n'
              '    /// Warning: the virtual keyboard is not supported on all\n'
              '    /// systems. It will typically be implemented on mobile '
              'OSes\n'
              '    /// (Android, iOS) but not on desktop OSes (Windows, Linux, '
              '...).\n'
              '    ///\n'
              '    /// If the virtual keyboard is not available, this function '
              'does\n'
              '    /// nothing.\n'
              '    ///\n'
              '    /// \\param visible True to show, false to hide\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setVirtualKeyboardVisible(bool visible);\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000986',
         path='/Labirint Game/sfml/include/SFML/Window/Mouse.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Mouse.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000987',
         path='/Labirint Game/sfml/include/SFML/Window/Mouse.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class Window;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Give access to the real-time state of the mouse\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API Mouse\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Mouse buttons\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Button\n'
              '    {\n'
              '        Left,       ///< The left mouse button\n'
              '        Right,      ///< The right mouse button\n'
              '        Middle,     ///< The middle (wheel) mouse button\n'
              '        XButton1,   ///< The first extra mouse button\n'
              '        XButton2,   ///< The second extra mouse button\n'
              '\n'
              '        ButtonCount ///< Keep last -- the total number of mouse '
              'buttons\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Mouse wheels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Wheel\n'
              '    {\n'
              '        VerticalWheel,  ///< The vertical mouse wheel\n'
              '        HorizontalWheel ///< The horizontal mouse wheel\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check if a mouse button is pressed\n'
              '    ///\n'
              '    /// \\param button Button to check\n'
              '    ///\n'
              '    /// \\return True if the button is pressed, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isButtonPressed(Button button);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current position of the mouse in '
              'desktop coordinates\n'
              '    ///\n'
              '    /// This function returns the global position of the mouse\n'
              '    /// cursor on the desktop.\n'
              '    ///\n'
              '    /// \\return Current position of the mouse\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static Vector2i getPosition();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current position of the mouse in window '
              'coordinates\n'
              '    ///\n'
              '    /// This function returns the current position of the '
              'mouse\n'
              '    /// cursor, relative to the given window.\n'
              '    ///\n'
              '    /// \\param relativeTo Reference window\n'
              '    ///\n'
              '    /// \\return Current position of the mouse\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static Vector2i getPosition(const Window& relativeTo);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the current position of the mouse in '
              'desktop coordinates\n'
              '    ///\n'
              '    /// This function sets the global position of the mouse\n'
              '    /// cursor on the desktop.\n'
              '    ///\n'
              '    /// \\param position New position of the mouse\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setPosition(const Vector2i& position);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the current position of the mouse in window '
              'coordinates\n'
              '    ///\n'
              '    /// This function sets the current position of the mouse\n'
              '    /// cursor, relative to the given window.\n'
              '    ///\n'
              '    /// \\param position New position of the mouse\n'
              '    /// \\param relativeTo Reference window\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setPosition(const Vector2i& position, const '
              'Window& relativeTo);\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000988',
         path='/Labirint Game/sfml/include/SFML/Window/Sensor.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Sensor.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000989',
         path='/Labirint Game/sfml/include/SFML/Window/Sensor.hpp',
         lineno=36,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Give access to the real-time state of the sensors\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API Sensor\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Sensor type\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum Type\n'
              '    {\n'
              '        Accelerometer,    ///< Measures the raw acceleration '
              '(m/s^2)\n'
              '        Gyroscope,        ///< Measures the raw rotation rates '
              '(degrees/s)\n'
              '        Magnetometer,     ///< Measures the ambient magnetic '
              'field (micro-teslas)\n'
              '        Gravity,          ///< Measures the direction and '
              'intensity of gravity, independent of device acceleration '
              '(m/s^2)\n'
              '        UserAcceleration, ///< Measures the direction and '
              'intensity of device acceleration, independent of the gravity '
              '(m/s^2)\n'
              '        Orientation,      ///< Measures the absolute 3D '
              'orientation (degrees)\n'
              '\n'
              '        Count             ///< Keep last -- the total number of '
              'sensor types\n'
              '    };\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check if a sensor is available on the '
              'underlying platform\n'
              '    ///\n'
              '    /// \\param sensor Sensor to check\n'
              '    ///\n'
              '    /// \\return True if the sensor is available, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isAvailable(Type sensor);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enable or disable a sensor\n'
              '    ///\n'
              '    /// All sensors are disabled by default, to avoid consuming '
              'too\n'
              '    /// much battery power. Once a sensor is enabled, it '
              'starts\n'
              '    /// sending events of the corresponding type.\n'
              '    ///\n'
              '    /// This function does nothing if the sensor is '
              'unavailable.\n'
              '    ///\n'
              '    /// \\param sensor  Sensor to enable\n'
              '    /// \\param enabled True to enable, false to disable\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static void setEnabled(Type sensor, bool enabled);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current sensor value\n'
              '    ///\n'
              '    /// \\param sensor Sensor to read\n'
              '    ///\n'
              '    /// \\return The current sensor value\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static Vector3f getValue(Type sensor);\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000990',
         path='/Labirint Game/sfml/include/SFML/Window/Touch.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Touch.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000991',
         path='/Labirint Game/sfml/include/SFML/Window/Touch.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'class Window;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Give access to the real-time state of the touches\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API Touch\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check if a touch event is currently down\n'
              '    ///\n'
              '    /// \\param finger Finger index\n'
              '    ///\n'
              '    /// \\return True if \\a finger is currently touching the '
              'screen, false otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static bool isDown(unsigned int finger);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current position of a touch in desktop '
              'coordinates\n'
              '    ///\n'
              '    /// This function returns the current touch position\n'
              '    /// in global (desktop) coordinates.\n'
              '    ///\n'
              '    /// \\param finger Finger index\n'
              '    ///\n'
              '    /// \\return Current position of \\a finger, or undefined '
              "if it's not down\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static Vector2i getPosition(unsigned int finger);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current position of a touch in window '
              'coordinates\n'
              '    ///\n'
              '    /// This function returns the current touch position\n'
              '    /// relative to the given window.\n'
              '    ///\n'
              '    /// \\param finger Finger index\n'
              '    /// \\param relativeTo Reference window\n'
              '    ///\n'
              '    /// \\return Current position of \\a finger, or undefined '
              "if it's not down\n"
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static Vector2i getPosition(unsigned int finger, const '
              'Window& relativeTo);\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000992',
         path='/Labirint Game/sfml/include/SFML/Window/VideoMode.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/VideoMode.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000993',
         path='/Labirint Game/sfml/include/SFML/Window/VideoMode.hpp',
         lineno=35,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief VideoMode defines a video mode (width, height, '
              'bpp)\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API VideoMode\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              '    /// This constructors initializes all members to 0.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    VideoMode();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the video mode with its attributes\n'
              '    ///\n'
              '    /// \\param modeWidth        Width in pixels\n'
              '    /// \\param modeHeight       Height in pixels\n'
              '    /// \\param modeBitsPerPixel Pixel depths in bits per '
              'pixel\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    VideoMode(unsigned int modeWidth, unsigned int modeHeight, '
              'unsigned int modeBitsPerPixel = 32);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the current desktop video mode\n'
              '    ///\n'
              '    /// \\return Current desktop video mode\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static VideoMode getDesktopMode();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Retrieve all the video modes supported in '
              'fullscreen mode\n'
              '    ///\n'
              '    /// When creating a fullscreen window, the video mode is '
              'restricted\n'
              '    /// to be compatible with what the graphics driver and '
              'monitor\n'
              '    /// support. This function returns the complete list of all '
              'video\n'
              '    /// modes that can be used in fullscreen mode.\n'
              '    /// The returned array is sorted from best to worst, so '
              'that\n'
              '    /// the first element will always give the best mode '
              '(higher\n'
              '    /// width, height and bits-per-pixel).\n'
              '    ///\n'
              '    /// \\return Array containing all the supported fullscreen '
              'modes\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    static const std::vector<VideoMode>& getFullscreenModes();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether or not the video mode is valid\n'
              '    ///\n'
              '    /// The validity of video modes is only relevant when '
              'using\n'
              '    /// fullscreen windows; otherwise any video mode can be '
              'used\n'
              '    /// with no restriction.\n'
              '    ///\n'
              '    /// \\return True if the video mode is valid for fullscreen '
              'mode\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool isValid() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    unsigned int width;        ///< Video mode width, in '
              'pixels\n'
              '    unsigned int height;       ///< Video mode height, in '
              'pixels\n'
              '    unsigned int bitsPerPixel; ///< Video mode pixel depth, in '
              'bits per pixels\n'
              '};\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates VideoMode\n'
              '/// \\brief Overload of == operator to compare two video modes\n'
              '///\n'
              '/// \\param left  Left operand (a video mode)\n'
              '/// \\param right Right operand (a video mode)\n'
              '///\n'
              '/// \\return True if modes are equal\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_WINDOW_API bool operator ==(const VideoMode& left, const '
              'VideoMode& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates VideoMode\n'
              '/// \\brief Overload of != operator to compare two video modes\n'
              '///\n'
              '/// \\param left  Left operand (a video mode)\n'
              '/// \\param right Right operand (a video mode)\n'
              '///\n'
              '/// \\return True if modes are different\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_WINDOW_API bool operator !=(const VideoMode& left, const '
              'VideoMode& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates VideoMode\n'
              '/// \\brief Overload of < operator to compare video modes\n'
              '///\n'
              '/// \\param left  Left operand (a video mode)\n'
              '/// \\param right Right operand (a video mode)\n'
              '///\n'
              '/// \\return True if \\a left is lesser than \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_WINDOW_API bool operator <(const VideoMode& left, const '
              'VideoMode& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates VideoMode\n'
              '/// \\brief Overload of > operator to compare video modes\n'
              '///\n'
              '/// \\param left  Left operand (a video mode)\n'
              '/// \\param right Right operand (a video mode)\n'
              '///\n'
              '/// \\return True if \\a left is greater than \\a right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_WINDOW_API bool operator >(const VideoMode& left, const '
              'VideoMode& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates VideoMode\n'
              '/// \\brief Overload of <= operator to compare video modes\n'
              '///\n'
              '/// \\param left  Left operand (a video mode)\n'
              '/// \\param right Right operand (a video mode)\n'
              '///\n'
              '/// \\return True if \\a left is lesser or equal than \\a '
              'right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_WINDOW_API bool operator <=(const VideoMode& left, const '
              'VideoMode& right);\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\relates VideoMode\n'
              '/// \\brief Overload of >= operator to compare video modes\n'
              '///\n'
              '/// \\param left  Left operand (a video mode)\n'
              '/// \\param right Right operand (a video mode)\n'
              '///\n'
              '/// \\return True if \\a left is greater or equal than \\a '
              'right\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'SFML_WINDOW_API bool operator >=(const VideoMode& left, const '
              'VideoMode& right);\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000994',
         path='/Labirint Game/sfml/include/SFML/Window/Window.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/Window.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000995',
         path='/Labirint Game/sfml/include/SFML/Window/Window.hpp',
         lineno=44,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'namespace priv\n'
              '{\n'
              '    class GlContext;\n'
              '    class WindowImpl;\n'
              '}\n'
              '\n'
              'class Event;\n'
              '\n'
              '////////////////////////////////////////////////////////////\n'
              '/// \\brief Window that serves as a target for OpenGL '
              'rendering\n'
              '///\n'
              '////////////////////////////////////////////////////////////\n'
              'class SFML_WINDOW_API Window : GlResource, NonCopyable\n'
              '{\n'
              'public:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Default constructor\n'
              '    ///\n'
              "    /// This constructor doesn't actually create the window,\n"
              '    /// use the other constructors or call create() to do so.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Window();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct a new window\n'
              '    ///\n'
              '    /// This constructor creates the window with the size and '
              'pixel\n'
              '    /// depth defined in \\a mode. An optional style can be '
              'passed to\n'
              '    /// customize the look and behavior of the window '
              '(borders,\n'
              '    /// title bar, resizable, closable, ...). If \\a style '
              'contains\n'
              '    /// Style::Fullscreen, then \\a mode must be a valid video '
              'mode.\n'
              '    ///\n'
              '    /// The fourth parameter is an optional structure '
              'specifying\n'
              '    /// advanced OpenGL context settings such as antialiasing,\n'
              '    /// depth-buffer bits, etc.\n'
              '    ///\n'
              '    /// \\param mode     Video mode to use (defines the width, '
              'height and depth of the rendering area of the window)\n'
              '    /// \\param title    Title of the window\n'
              '    /// \\param style    %Window style, a bitwise OR '
              'combination of sf::Style enumerators\n'
              '    /// \\param settings Additional settings for the underlying '
              'OpenGL context\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Window(VideoMode mode, const String& title, Uint32 style = '
              'Style::Default, const ContextSettings& settings = '
              'ContextSettings());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Construct the window from an existing control\n'
              '    ///\n'
              '    /// Use this constructor if you want to create an OpenGL\n'
              '    /// rendering area into an already existing control.\n'
              '    ///\n'
              '    /// The second parameter is an optional structure '
              'specifying\n'
              '    /// advanced OpenGL context settings such as antialiasing,\n'
              '    /// depth-buffer bits, etc.\n'
              '    ///\n'
              '    /// \\param handle   Platform-specific handle of the '
              'control\n'
              '    /// \\param settings Additional settings for the underlying '
              'OpenGL context\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    explicit Window(WindowHandle handle, const ContextSettings& '
              'settings = ContextSettings());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Destructor\n'
              '    ///\n'
              '    /// Closes the window and frees all the resources attached '
              'to it.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual ~Window();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create (or recreate) the window\n'
              '    ///\n'
              '    /// If the window was already created, it closes it first.\n'
              '    /// If \\a style contains Style::Fullscreen, then \\a mode\n'
              '    /// must be a valid video mode.\n'
              '    ///\n'
              '    /// The fourth parameter is an optional structure '
              'specifying\n'
              '    /// advanced OpenGL context settings such as antialiasing,\n'
              '    /// depth-buffer bits, etc.\n'
              '    ///\n'
              '    /// \\param mode     Video mode to use (defines the width, '
              'height and depth of the rendering area of the window)\n'
              '    /// \\param title    Title of the window\n'
              '    /// \\param style    %Window style, a bitwise OR '
              'combination of sf::Style enumerators\n'
              '    /// \\param settings Additional settings for the underlying '
              'OpenGL context\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void create(VideoMode mode, const String& title, Uint32 '
              'style = Style::Default, const ContextSettings& settings = '
              'ContextSettings());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Create (or recreate) the window from an '
              'existing control\n'
              '    ///\n'
              '    /// Use this function if you want to create an OpenGL\n'
              '    /// rendering area into an already existing control.\n'
              '    /// If the window was already created, it closes it first.\n'
              '    ///\n'
              '    /// The second parameter is an optional structure '
              'specifying\n'
              '    /// advanced OpenGL context settings such as antialiasing,\n'
              '    /// depth-buffer bits, etc.\n'
              '    ///\n'
              '    /// \\param handle   Platform-specific handle of the '
              'control\n'
              '    /// \\param settings Additional settings for the underlying '
              'OpenGL context\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void create(WindowHandle handle, const ContextSettings& '
              'settings = ContextSettings());\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Close the window and destroy all the attached '
              'resources\n'
              '    ///\n'
              '    /// After calling this function, the sf::Window instance '
              'remains\n'
              '    /// valid and you can call create() to recreate the '
              'window.\n'
              '    /// All other functions such as pollEvent() or display() '
              'will\n'
              "    /// still work (i.e. you don't have to test isOpen() every "
              'time),\n'
              '    /// and will have no effect on closed windows.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void close();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Tell whether or not the window is open\n'
              '    ///\n'
              '    /// This function returns whether or not the window '
              'exists.\n'
              '    /// Note that a hidden window (setVisible(false)) is open\n'
              '    /// (therefore this function would return true).\n'
              '    ///\n'
              '    /// \\return True if the window is open, false if it has '
              'been closed\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool isOpen() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the settings of the OpenGL context of the '
              'window\n'
              '    ///\n'
              '    /// Note that these settings may be different from what '
              'was\n'
              '    /// passed to the constructor or the create() function,\n'
              '    /// if one or more settings were not supported. In this '
              'case,\n'
              '    /// SFML chose the closest match.\n'
              '    ///\n'
              '    /// \\return Structure containing the OpenGL context '
              'settings\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    const ContextSettings& getSettings() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Pop the event on top of the event queue, if '
              'any, and return it\n'
              '    ///\n'
              "    /// This function is not blocking: if there's no pending "
              'event then\n'
              '    /// it will return false and leave \\a event unmodified.\n'
              '    /// Note that more than one event may be present in the '
              'event queue,\n'
              '    /// thus you should always call this function in a loop\n'
              '    /// to make sure that you process every pending event.\n'
              '    /// \\code\n'
              '    /// sf::Event event;\n'
              '    /// while (window.pollEvent(event))\n'
              '    /// {\n'
              '    ///    // process event...\n'
              '    /// }\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param event Event to be returned\n'
              '    ///\n'
              '    /// \\return True if an event was returned, or false if the '
              'event queue was empty\n'
              '    ///\n'
              '    /// \\see waitEvent\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool pollEvent(Event& event);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Wait for an event and return it\n'
              '    ///\n'
              "    /// This function is blocking: if there's no pending event "
              'then\n'
              '    /// it will wait until an event is received.\n'
              '    /// After this function returns (and no error occurred),\n'
              '    /// the \\a event object is always valid and filled '
              'properly.\n'
              '    /// This function is typically used when you have a thread '
              'that\n'
              '    /// is dedicated to events handling: you want to make this '
              'thread\n'
              '    /// sleep as long as no new event is received.\n'
              '    /// \\code\n'
              '    /// sf::Event event;\n'
              '    /// if (window.waitEvent(event))\n'
              '    /// {\n'
              '    ///    // process event...\n'
              '    /// }\n'
              '    /// \\endcode\n'
              '    ///\n'
              '    /// \\param event Event to be returned\n'
              '    ///\n'
              '    /// \\return False if any error occurred\n'
              '    ///\n'
              '    /// \\see pollEvent\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool waitEvent(Event& event);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the position of the window\n'
              '    ///\n'
              '    /// \\return Position of the window, in pixels\n'
              '    ///\n'
              '    /// \\see setPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2i getPosition() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the position of the window on screen\n'
              '    ///\n'
              '    /// This function only works for top-level windows\n'
              '    /// (i.e. it will be ignored for windows created from\n'
              '    /// the handle of a child window/control).\n'
              '    ///\n'
              '    /// \\param position New position, in pixels\n'
              '    ///\n'
              '    /// \\see getPosition\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setPosition(const Vector2i& position);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the size of the rendering region of the '
              'window\n'
              '    ///\n'
              "    /// The size doesn't include the titlebar and borders\n"
              '    /// of the window.\n'
              '    ///\n'
              '    /// \\return Size in pixels\n'
              '    ///\n'
              '    /// \\see setSize\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    Vector2u getSize() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the size of the rendering region of the '
              'window\n'
              '    ///\n'
              '    /// \\param size New size, in pixels\n'
              '    ///\n'
              '    /// \\see getSize\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setSize(const Vector2u& size);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the title of the window\n'
              '    ///\n'
              '    /// \\param title New title\n'
              '    ///\n'
              '    /// \\see setIcon\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setTitle(const String& title);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              "    /// \\brief Change the window's icon\n"
              '    ///\n'
              '    /// \\a pixels must be an array of \\a width x \\a height '
              'pixels\n'
              '    /// in 32-bits RGBA format.\n'
              '    ///\n'
              '    /// The OS default icon is used by default.\n'
              '    ///\n'
              "    /// \\param width  Icon's width, in pixels\n"
              "    /// \\param height Icon's height, in pixels\n"
              '    /// \\param pixels Pointer to the array of pixels in '
              'memory. The\n'
              '    ///               pixels are copied, so you need not keep '
              'the\n'
              '    ///               source alive after calling this '
              'function.\n'
              '    ///\n'
              '    /// \\see setTitle\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setIcon(unsigned int width, unsigned int height, const '
              'Uint8* pixels);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Show or hide the window\n'
              '    ///\n'
              '    /// The window is shown by default.\n'
              '    ///\n'
              '    /// \\param visible True to show the window, false to hide '
              'it\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setVisible(bool visible);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enable or disable vertical synchronization\n'
              '    ///\n'
              '    /// Activating vertical synchronization will limit the '
              'number\n'
              '    /// of frames displayed to the refresh rate of the '
              'monitor.\n'
              '    /// This can avoid some visual artifacts, and limit the '
              'framerate\n'
              '    /// to a good value (but not constant across different '
              'computers).\n'
              '    ///\n'
              '    /// Vertical synchronization is disabled by default.\n'
              '    ///\n'
              '    /// \\param enabled True to enable v-sync, false to '
              'deactivate it\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setVerticalSyncEnabled(bool enabled);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Show or hide the mouse cursor\n'
              '    ///\n'
              '    /// The mouse cursor is visible by default.\n'
              '    ///\n'
              '    /// \\param visible True to show the mouse cursor, false to '
              'hide it\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setMouseCursorVisible(bool visible);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Grab or release the mouse cursor\n'
              '    ///\n'
              "    /// If set, grabs the mouse cursor inside this window's "
              'client\n'
              '    /// area so it may no longer be moved outside its bounds.\n'
              '    /// Note that grabbing is only active while the window has\n'
              '    /// focus.\n'
              '    ///\n'
              '    /// \\param grabbed True to enable, false to disable\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setMouseCursorGrabbed(bool grabbed);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Set the displayed cursor to a native system '
              'cursor\n'
              '    ///\n'
              '    /// Upon window creation, the arrow cursor is used by '
              'default.\n'
              '    ///\n'
              '    /// \\warning The cursor must not be destroyed while in use '
              'by\n'
              '    ///          the window.\n'
              '    ///\n'
              '    /// \\warning Features related to Cursor are not supported '
              'on\n'
              '    ///          iOS and Android.\n'
              '    ///\n'
              '    /// \\param cursor Native system cursor type to display\n'
              '    ///\n'
              '    /// \\see sf::Cursor::loadFromSystem\n'
              '    /// \\see sf::Cursor::loadFromPixels\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setMouseCursor(const Cursor& cursor);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Enable or disable automatic key-repeat\n'
              '    ///\n'
              '    /// If key repeat is enabled, you will receive repeated\n'
              '    /// KeyPressed events while keeping a key pressed. If it is '
              'disabled,\n'
              '    /// you will only get a single event when the key is '
              'pressed.\n'
              '    ///\n'
              '    /// Key repeat is enabled by default.\n'
              '    ///\n'
              '    /// \\param enabled True to enable, false to disable\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setKeyRepeatEnabled(bool enabled);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Limit the framerate to a maximum fixed '
              'frequency\n'
              '    ///\n'
              '    /// If a limit is set, the window will use a small delay '
              'after\n'
              '    /// each call to display() to ensure that the current '
              'frame\n'
              '    /// lasted long enough to match the framerate limit.\n'
              '    /// SFML will try to match the given limit as much as it '
              'can,\n'
              '    /// but since it internally uses sf::sleep, whose '
              'precision\n'
              '    /// depends on the underlying OS, the results may be a '
              'little\n'
              '    /// unprecise as well (for example, you can get 65 FPS '
              'when\n'
              '    /// requesting 60).\n'
              '    ///\n'
              '    /// \\param limit Framerate limit, in frames per seconds '
              '(use 0 to disable limit)\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setFramerateLimit(unsigned int limit);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Change the joystick threshold\n'
              '    ///\n'
              '    /// The joystick threshold is the value below which\n'
              '    /// no JoystickMoved event will be generated.\n'
              '    ///\n'
              '    /// The threshold value is 0.1 by default.\n'
              '    ///\n'
              '    /// \\param threshold New threshold, in the range [0, 100]\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void setJoystickThreshold(float threshold);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Activate or deactivate the window as the '
              'current target\n'
              '    ///        for OpenGL rendering\n'
              '    ///\n'
              '    /// A window is active only on the current thread, if you '
              'want to\n'
              '    /// make it active on another thread you have to deactivate '
              'it\n'
              '    /// on the previous thread first if it was active.\n'
              '    /// Only one window can be active on a thread at a time, '
              'thus\n'
              '    /// the window previously active (if any) automatically '
              'gets deactivated.\n'
              '    /// This is not to be confused with requestFocus().\n'
              '    ///\n'
              '    /// \\param active True to activate, false to deactivate\n'
              '    ///\n'
              '    /// \\return True if operation was successful, false '
              'otherwise\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool setActive(bool active = true) const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Request the current window to be made the '
              'active\n'
              '    ///        foreground window\n'
              '    ///\n'
              '    /// At any given time, only one window may have the input '
              'focus\n'
              '    /// to receive input events such as keystrokes or mouse '
              'events.\n'
              '    /// If a window requests focus, it only hints to the '
              'operating\n'
              '    /// system, that it would like to be focused. The operating '
              'system\n'
              '    /// is free to deny the request.\n'
              '    /// This is not to be confused with setActive().\n'
              '    ///\n'
              '    /// \\see hasFocus\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void requestFocus();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Check whether the window has the input focus\n'
              '    ///\n'
              '    /// At any given time, only one window may have the input '
              'focus\n'
              '    /// to receive input events such as keystrokes or most '
              'mouse\n'
              '    /// events.\n'
              '    ///\n'
              '    /// \\return True if window has focus, false otherwise\n'
              '    /// \\see requestFocus\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool hasFocus() const;\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Display on screen what has been rendered to the '
              'window so far\n'
              '    ///\n'
              '    /// This function is typically called after all OpenGL '
              'rendering\n'
              '    /// has been done for the current frame, in order to show\n'
              '    /// it on screen.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void display();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Get the OS-specific handle of the window\n'
              '    ///\n'
              '    /// The type of the returned handle is sf::WindowHandle,\n'
              '    /// which is a typedef to the handle type defined by the '
              'OS.\n'
              "    /// You shouldn't need to use this function, unless you "
              'have\n'
              "    /// very specific stuff to implement that SFML doesn't "
              'support,\n'
              '    /// or implement a temporary workaround until a bug is '
              'fixed.\n'
              '    ///\n'
              '    /// \\return System handle of the window\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    WindowHandle getSystemHandle() const;\n'
              '\n'
              'protected:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Function called after the window has been '
              'created\n'
              '    ///\n'
              '    /// This function is called so that derived classes can\n'
              '    /// perform their own specific initialization as soon as\n'
              '    /// the window is created.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void onCreate();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Function called after the window has been '
              'resized\n'
              '    ///\n'
              '    /// This function is called so that derived classes can\n'
              '    /// perform custom actions when the size of the window '
              'changes.\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    virtual void onResize();\n'
              '\n'
              'private:\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Processes an event before it is sent to the '
              'user\n'
              '    ///\n'
              '    /// This function is called every time an event is '
              'received\n'
              '    /// from the internal window (through pollEvent or '
              'waitEvent).\n'
              '    /// It filters out unwanted events, and performs whatever '
              'internal\n'
              '    /// stuff the window needs before the event is returned to '
              'the\n'
              '    /// user.\n'
              '    ///\n'
              '    /// \\param event Event to filter\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    bool filterEvent(const Event& event);\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\brief Perform some common internal initializations\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    void initialize();\n'
              '\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    // Member data\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    priv::WindowImpl* m_impl;           ///< Platform-specific '
              'implementation of the window\n'
              '    priv::GlContext*  m_context;        ///< Platform-specific '
              'implementation of the OpenGL context\n'
              '    Clock             m_clock;          ///< Clock for '
              'measuring the elapsed time between frames\n'
              '    Time              m_frameTimeLimit; ///< Current framerate '
              'limit\n'
              '    Vector2u          m_size;           ///< Current size of '
              'the window\n'
              '};\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000996',
         path='/Labirint Game/sfml/include/SFML/Window/WindowHandle.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/WindowHandle.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000997',
         path='/Labirint Game/sfml/include/SFML/Window/WindowHandle.hpp',
         lineno=38,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              '#if defined(SFML_SYSTEM_WINDOWS)\n'
              '\n'
              '    // Window handle is HWND (HWND__*) on Windows\n'
              '    typedef HWND__* WindowHandle;\n'
              '\n'
              '#elif defined(SFML_SYSTEM_LINUX) || '
              'defined(SFML_SYSTEM_FREEBSD) || defined(SFML_SYSTEM_OPENBSD)\n'
              '\n'
              '    // Window handle is Window (unsigned long) on Unix - X11\n'
              '    typedef unsigned long WindowHandle;\n'
              '\n'
              '#elif defined(SFML_SYSTEM_MACOS)\n'
              '\n'
              '    // Window handle is NSWindow or NSView (void*) on Mac OS X '
              '- Cocoa\n'
              '    typedef void* WindowHandle;\n'
              '\n'
              '#elif defined(SFML_SYSTEM_IOS)\n'
              '\n'
              '    // Window handle is UIWindow (void*) on iOS - UIKit\n'
              '    typedef void* WindowHandle;\n'
              '\n'
              '#elif defined(SFML_SYSTEM_ANDROID)\n'
              '\n'
              '    // Window handle is ANativeWindow* (void*) on Android\n'
              '    typedef void* WindowHandle;\n'
              '\n'
              '#elif defined(SFML_DOXYGEN)\n'
              '\n'
              '    // Define typedef symbol so that Doxygen can attach some '
              'documentation to it\n'
              '    typedef "platform-specific" WindowHandle;\n'
              '\n'
              '#endif\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-000998',
         path='/Labirint Game/sfml/include/SFML/Window/WindowStyle.hpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Labirint Game/sfml/include/SFML/Window/WindowStyle.hpp\n'
              '  Namespaces: sf\n')

Fragment(uuid='NORMALIZED-000999',
         path='/Labirint Game/sfml/include/SFML/Window/WindowStyle.hpp',
         lineno=29,
         depth=2,
         type='namespace',
         name='sf',
         text='namespace sf\n'
              '{\n'
              'namespace Style\n'
              '{\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    /// \\ingroup window\n'
              '    /// \\brief Enumeration of the window styles\n'
              '    ///\n'
              '    '
              '////////////////////////////////////////////////////////////\n'
              '    enum\n'
              '    {\n'
              '        None       = 0,      ///< No border / title bar (this '
              'flag and all others are mutually exclusive)\n'
              '        Titlebar   = 1 << 0, ///< Title bar + fixed border\n'
              '        Resize     = 1 << 1, ///< Title bar + resizable border '
              '+ maximize button\n'
              '        Close      = 1 << 2, ///< Title bar + close button\n'
              '        Fullscreen = 1 << 3, ///< Fullscreen mode (this flag '
              'and all others are mutually exclusive)\n'
              '\n'
              '        Default = Titlebar | Resize | Close ///< Default window '
              'style\n'
              '    };\n'
              '}\n'
              '\n'
              '} // namespace sf\n')

Fragment(uuid='NORMALIZED-001000',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='# This script provides the SFML libraries as imported targets')

Fragment(uuid='NORMALIZED-001001',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n# ------------------------------------')

Fragment(uuid='NORMALIZED-001002',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake\n')

Fragment(uuid='NORMALIZED-001003',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001004',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n# Usage')

Fragment(uuid='NORMALIZED-001005',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n# -----')

Fragment(uuid='NORMALIZED-001006',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001007',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# When you try to locate the SFML libraries, you must specify '
              'which modules you want to use (system, window, graphics, '
              'network, audio, main).')

Fragment(uuid='NORMALIZED-001008',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# If none is given, no imported target will be created and you '
              "won't be able to link to SFML libraries.")

Fragment(uuid='NORMALIZED-001009',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n# example:')

Fragment(uuid='NORMALIZED-001010',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '#   find_package(SFML COMPONENTS graphics window system) # find '
              'the graphics, window and system modules')

Fragment(uuid='NORMALIZED-001011',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001012',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# You can enforce a specific version, either MAJOR.MINOR or '
              'only MAJOR.')

Fragment(uuid='NORMALIZED-001013',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "# If nothing is specified, the version won't be checked (i.e. "
              'any version will be accepted).')

Fragment(uuid='NORMALIZED-001014',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n# example:')

Fragment(uuid='NORMALIZED-001015',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '#   find_package(SFML COMPONENTS ...)     # no specific version '
              'required')

Fragment(uuid='NORMALIZED-001016',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n#   find_package(SFML 2 COMPONENTS ...)   # any 2.x version')

Fragment(uuid='NORMALIZED-001017',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '#   find_package(SFML 2.4 COMPONENTS ...) # version 2.4 or '
              'greater')

Fragment(uuid='NORMALIZED-001018',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001019',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# By default, the dynamic libraries of SFML will be found. To '
              'find the static ones instead,')

Fragment(uuid='NORMALIZED-001020',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# you must set the SFML_STATIC_LIBRARIES variable to TRUE '
              'before calling find_package(SFML ...).')

Fragment(uuid='NORMALIZED-001021',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "# You don't need to deal with SFML's dependencies when linking "
              'your targets against SFML libraries,')

Fragment(uuid='NORMALIZED-001022',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# they will all be configured automatically, even if you use '
              'SFML static libraries.')

Fragment(uuid='NORMALIZED-001023',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n# example:')

Fragment(uuid='NORMALIZED-001024',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n#   set(SFML_STATIC_LIBRARIES TRUE)')

Fragment(uuid='NORMALIZED-001025',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n#   find_package(SFML 2 COMPONENTS network system)')

Fragment(uuid='NORMALIZED-001026',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001027',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# On macOS by default CMake will search for frameworks. If you '
              'want to use static libraries and have installed')

Fragment(uuid='NORMALIZED-001028',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# both SFML frameworks and SFML static libraries, your must set '
              'CMAKE_FIND_FRAMEWORK to "NEVER" or "LAST"')

Fragment(uuid='NORMALIZED-001029',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# in addition to setting SFML_STATIC_LIBRARIES to TRUE. '
              'Otherwise CMake will check the frameworks bundle config and')

Fragment(uuid='NORMALIZED-001030',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# fail after finding out that it does not provide static '
              'libraries. Please refer to CMake documentation for more details.')

Fragment(uuid='NORMALIZED-001031',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001032',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# Additionally, keep in mind that SFML frameworks are only '
              'available as release libraries unlike dylibs which')

Fragment(uuid='NORMALIZED-001033',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n# are available for both release and debug modes.')

Fragment(uuid='NORMALIZED-001034',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001035',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# If SFML is not installed in a standard path, you can use the '
              'SFML_DIR CMake variable')

Fragment(uuid='NORMALIZED-001036',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "# to tell CMake where SFML's config file is located "
              '(PREFIX/lib/cmake/SFML for a library-based installation,')

Fragment(uuid='NORMALIZED-001037',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# and PREFIX/SFML.framework/Resources/CMake on macOS for a '
              'framework-based installation).')

Fragment(uuid='NORMALIZED-001038',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001039',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n# Output')

Fragment(uuid='NORMALIZED-001040',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n# ------')

Fragment(uuid='NORMALIZED-001041',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001042',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n# This script defines the following variables:')

Fragment(uuid='NORMALIZED-001043',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# - For each specified module XXX (system, window, graphics, '
              'network, audio, main):')

Fragment(uuid='NORMALIZED-001044',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '#   - SFML_XXX_FOUND:  true if either the debug or release '
              'library of the xxx module is found')

Fragment(uuid='NORMALIZED-001045',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# - SFML_FOUND:        true if all the required modules are '
              'found')

Fragment(uuid='NORMALIZED-001046',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001047',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n# And the following targets:')

Fragment(uuid='NORMALIZED-001048',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# - For each specified module XXX (system, window, graphics, '
              'network, audio, main):')

Fragment(uuid='NORMALIZED-001049',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n#   - sfml-XXX')

Fragment(uuid='NORMALIZED-001050',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# The SFML targets are the same for both Debug and Release '
              'build configurations and will automatically provide')

Fragment(uuid='NORMALIZED-001051',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# correct settings based on your currently active build '
              'configuration. The SFML targets name also do not change')

Fragment(uuid='NORMALIZED-001052',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n# when using dynamic or static SFML libraries.')

Fragment(uuid='NORMALIZED-001053',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001054',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# When linking against a SFML target, you do not need to '
              'specify indirect dependencies. For example, linking')

Fragment(uuid='NORMALIZED-001055',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# against sfml-graphics will also automatically link against '
              'sfml-window and sfml-system.')

Fragment(uuid='NORMALIZED-001056',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-001057',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n# example:')

Fragment(uuid='NORMALIZED-001058',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n#   find_package(SFML 2 COMPONENTS graphics audio REQUIRED)')

Fragment(uuid='NORMALIZED-001059',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n#   add_executable(myapp ...)')

Fragment(uuid='NORMALIZED-001060',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n#   target_link_libraries(myapp sfml-graphics sfml-audio)')

Fragment(uuid='NORMALIZED-001061',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001062',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=61,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if (NOT SFML_FIND_COMPONENTS)\n'
              '    message(FATAL_ERROR "find_package(SFML) called with no '
              'component")\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001063',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=65,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set(FIND_SFML_PATHS\n'
              '    "${CMAKE_CURRENT_LIST_DIR}/../.."\n'
              '    ${SFML_ROOT}\n'
              '    $ENV{SFML_ROOT}\n'
              '    ~/Library/Frameworks\n'
              '    /Library/Frameworks\n'
              '    /usr/local\n'
              '    /usr\n'
              '    /sw\n'
              '    /opt/local\n'
              '    /opt/csw\n'
              '    /opt)\n')

Fragment(uuid='NORMALIZED-001064',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=78,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'find_path(SFML_DOC_DIR SFML.tag\n'
              '          PATH_SUFFIXES SFML/doc share/SFML/doc\n'
              '          PATHS ${FIND_SFML_PATHS})\n'
              '\n')

Fragment(uuid='NORMALIZED-001065',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# Update requested components (eg. request window component if '
              'graphics component was requested)')

Fragment(uuid='NORMALIZED-001066',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\nset(FIND_SFML_SYSTEM_DEPENDENCIES "")')

Fragment(uuid='NORMALIZED-001067',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\nset(FIND_SFML_MAIN_DEPENDENCIES "")')

Fragment(uuid='NORMALIZED-001068',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\nset(FIND_SFML_AUDIO_DEPENDENCIES system)')

Fragment(uuid='NORMALIZED-001069',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\nset(FIND_SFML_NETWORK_DEPENDENCIES system)')

Fragment(uuid='NORMALIZED-001070',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\nset(FIND_SFML_WINDOW_DEPENDENCIES system)')

Fragment(uuid='NORMALIZED-001071',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\nset(FIND_SFML_GRAPHICS_DEPENDENCIES window system)')

Fragment(uuid='NORMALIZED-001072',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\nset(FIND_SFML_ADDITIONAL_COMPONENTS "")')

Fragment(uuid='NORMALIZED-001073',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\nforeach(component ${SFML_FIND_COMPONENTS})')

Fragment(uuid='NORMALIZED-001074',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n    string(TOUPPER "${component}" UPPER_COMPONENT)')

Fragment(uuid='NORMALIZED-001075',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    list(APPEND FIND_SFML_ADDITIONAL_COMPONENTS '
              '${FIND_SFML_${UPPER_COMPONENT}_DEPENDENCIES})')

Fragment(uuid='NORMALIZED-001076',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\nendforeach()')

Fragment(uuid='NORMALIZED-001077',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND SFML_FIND_COMPONENTS '
              '${FIND_SFML_ADDITIONAL_COMPONENTS})')

Fragment(uuid='NORMALIZED-001078',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\nlist(REMOVE_DUPLICATES SFML_FIND_COMPONENTS)')

Fragment(uuid='NORMALIZED-001079',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001080',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=98,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Choose which target definitions must be imported\n'
              'if (SFML_STATIC_LIBRARIES)\n'
              '\tset(SFML_IS_FRAMEWORK_INSTALL "")\n'
              '    if (SFML_IS_FRAMEWORK_INSTALL)\n'
              '        message(WARNING "Static frameworks are not supported by '
              'SFML. Clear SFML_DIR cache entry, \\\n'
              'and either change SFML_STATIC_LIBRARIES or CMAKE_FIND_FRAMEWORK '
              'before calling find_package(SFML)")\n'
              '    endif()\n'
              '    set(config_name "Static")\n'
              'else()\n'
              '    set(config_name "Shared")\n'
              'endif()\n'
              'set(targets_config_file '
              '"${CMAKE_CURRENT_LIST_DIR}/SFML${config_name}Targets.cmake")\n')

Fragment(uuid='NORMALIZED-001081',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=111,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Generate imported targets for SFML and its dependencies\n'
              'if (EXISTS "${targets_config_file}")\n'
              '    # Set SFML_FOUND to TRUE by default, may be overwritten by '
              'one of the includes below\n'
              '    set(SFML_FOUND TRUE)\n'
              '    include("${targets_config_file}")\n'
              '    '
              'include("${CMAKE_CURRENT_LIST_DIR}/SFMLConfigDependencies.cmake")\n')

Fragment(uuid='NORMALIZED-001082',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=118,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    if (SFML_FOUND)\n'
              '        foreach (component ${SFML_FIND_COMPONENTS})\n'
              '            string(TOUPPER "${component}" UPPER_COMPONENT)\n'
              '            if (TARGET sfml-${component})\n'
              '                set(SFML_${UPPER_COMPONENT}_FOUND TRUE)\n'
              '            else()\n'
              '                set(FIND_SFML_ERROR "Found SFML but requested '
              "component '${component}' is missing in the config defined in "
              '${SFML_DIR}.")\n'
              '                set(SFML_${UPPER_COMPONENT}_FOUND FALSE)\n'
              '                set(SFML_FOUND FALSE)\n'
              '            endif()\n'
              '        endforeach()\n'
              '    endif()\n'
              'else()\n'
              '    set(FIND_SFML_ERROR "Requested SFML configuration '
              '(${config_name}) was not found")\n'
              '    set(SFML_FOUND FALSE)\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001083',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=135,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if (NOT SFML_FOUND)\n'
              '    if(SFML_FIND_REQUIRED)\n'
              '        # fatal error\n'
              '        message(FATAL_ERROR "${FIND_SFML_ERROR}")\n'
              '    elseif(NOT SFML_FIND_QUIETLY)\n'
              '        # error but continue\n'
              '        message(STATUS "${FIND_SFML_ERROR}")\n'
              '    endif()\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001084',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfig.cmake',
         lineno=145,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if (SFML_FOUND AND NOT SFML_FIND_QUIETLY)\n'
              '    message(STATUS "Found SFML 2.5.1 in '
              '${CMAKE_CURRENT_LIST_DIR}")\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001085',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if (CMAKE_VERSION VERSION_LESS 3.5.2)\n'
              '    include(CMakeParseArguments)\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001086',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake\n')

Fragment(uuid='NORMALIZED-001087',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# in case of static linking, we must also define the list of '
              'all the dependencies of SFML libraries')

Fragment(uuid='NORMALIZED-001088',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\nif(SFML_STATIC_LIBRARIES)')

Fragment(uuid='NORMALIZED-001089',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n    # detect the OS')

Fragment(uuid='NORMALIZED-001090',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n    if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")')

Fragment(uuid='NORMALIZED-001091',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n        set(FIND_SFML_OS_WINDOWS 1)')

Fragment(uuid='NORMALIZED-001092',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n    elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")')

Fragment(uuid='NORMALIZED-001093',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n        set(FIND_SFML_OS_LINUX 1)')

Fragment(uuid='NORMALIZED-001094',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n    elseif(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")')

Fragment(uuid='NORMALIZED-001095',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n        set(FIND_SFML_OS_FREEBSD 1)')

Fragment(uuid='NORMALIZED-001096',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n    elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")')

Fragment(uuid='NORMALIZED-001097',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n        if (DEFINED IOS)')

Fragment(uuid='NORMALIZED-001098',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n            set(FIND_SFML_OS_IOS 1)')

Fragment(uuid='NORMALIZED-001099',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n        else()')

Fragment(uuid='NORMALIZED-001100',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n            set(FIND_SFML_OS_MACOSX 1)')

Fragment(uuid='NORMALIZED-001101',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n        endif()')

Fragment(uuid='NORMALIZED-001102',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n    endif()')

Fragment(uuid='NORMALIZED-001103',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001104',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=22,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    # start with an empty list\n'
              '    set(FIND_SFML_DEPENDENCIES_NOTFOUND)\n')

Fragment(uuid='NORMALIZED-001105',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    # macro that searches for a 3rd-party library\n'
              '    function(sfml_bind_dependency)\n'
              '        cmake_parse_arguments(THIS "" "TARGET;FRIENDLY_NAME" '
              '"SEARCH_NAMES" ${ARGN})\n'
              '        if (THIS_UNPARSED_ARGUMENTS)\n'
              '            message(FATAL_ERROR "Unknown arguments when calling '
              'sfml_bind_dependency: ${THIS_UNPARSED_ARGUMENTS}")\n'
              '        endif()\n')

Fragment(uuid='NORMALIZED-001106',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=32,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        # No lookup in environment variables (PATH on Windows), '
              'as they may contain wrong library versions\n'
              '        find_library(${THIS_FRIENDLY_NAME}_LIB NAMES '
              '${THIS_SEARCH_NAMES}\n'
              '                     PATHS ${FIND_SFML_PATHS} PATH_SUFFIXES lib '
              'NO_SYSTEM_ENVIRONMENT_PATH)\n'
              '        mark_as_advanced(${THIS_FRIENDLY_NAME}_LIB)\n'
              '        if(${THIS_FRIENDLY_NAME}_LIB)\n'
              '            set_property(TARGET ${THIS_TARGET} APPEND PROPERTY '
              'INTERFACE_LINK_LIBRARIES "${${THIS_FRIENDLY_NAME}_LIB}")\n'
              '        else()\n'
              '            set(FIND_SFML_DEPENDENCIES_NOTFOUND '
              '"${FIND_SFML_DEPENDENCIES_NOTFOUND} ${THIS_FRIENDLY_NAME}" '
              'PARENT_SCOPE)\n'
              '        endif()\n'
              '    endfunction()\n')

Fragment(uuid='NORMALIZED-001107',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=43,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    # sfml-window\n'
              '    list(FIND SFML_FIND_COMPONENTS "window" '
              'FIND_SFML_WINDOW_COMPONENT_INDEX)\n'
              '    if(FIND_SFML_WINDOW_COMPONENT_INDEX GREATER -1)\n'
              '        if(FIND_SFML_OS_LINUX OR FIND_SFML_OS_FREEBSD)\n'
              '            sfml_bind_dependency(TARGET X11 FRIENDLY_NAME "X11" '
              'SEARCH_NAMES "X11")\n'
              '            sfml_bind_dependency(TARGET X11 FRIENDLY_NAME '
              '"Xrandr" SEARCH_NAMES "Xrandr")\n'
              '        endif()\n')

Fragment(uuid='NORMALIZED-001108',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=51,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if(FIND_SFML_OS_LINUX)\n'
              '            sfml_bind_dependency(TARGET UDev FRIENDLY_NAME '
              '"UDev" SEARCH_NAMES "udev" "libudev")\n'
              '        endif()\n')

Fragment(uuid='NORMALIZED-001109',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=55,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (FIND_SFML_OS_WINDOWS)\n'
              '            set_property(TARGET OpenGL APPEND PROPERTY '
              'INTERFACE_LINK_LIBRARIES "OpenGL32")\n'
              '        elseif(NOT FIND_SFML_OS_IOS)\n'
              '            sfml_bind_dependency(TARGET OpenGL FRIENDLY_NAME '
              '"OpenGL" SEARCH_NAMES "OpenGL" "GL")\n'
              '        endif()\n'
              '    endif()\n')

Fragment(uuid='NORMALIZED-001110',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=62,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    # sfml-graphics\n'
              '    list(FIND SFML_FIND_COMPONENTS "graphics" '
              'FIND_SFML_GRAPHICS_COMPONENT_INDEX)\n'
              '    if(FIND_SFML_GRAPHICS_COMPONENT_INDEX GREATER -1)\n'
              '        sfml_bind_dependency(TARGET Freetype FRIENDLY_NAME '
              '"FreeType" SEARCH_NAMES "freetype")\n'
              '    endif()\n')

Fragment(uuid='NORMALIZED-001111',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n    # sfml-audio')

Fragment(uuid='NORMALIZED-001112',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    list(FIND SFML_FIND_COMPONENTS "audio" '
              'FIND_SFML_AUDIO_COMPONENT_INDEX)')

Fragment(uuid='NORMALIZED-001113',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n    if(FIND_SFML_AUDIO_COMPONENT_INDEX GREATER -1)')

Fragment(uuid='NORMALIZED-001114',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        sfml_bind_dependency(TARGET OpenAL FRIENDLY_NAME '
              '"OpenAL" SEARCH_NAMES "OpenAL" "openal" "openal32")')

Fragment(uuid='NORMALIZED-001115',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n        if (NOT FIND_SFML_OS_IOS)')

Fragment(uuid='NORMALIZED-001116',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            sfml_bind_dependency(TARGET Vorbis FRIENDLY_NAME '
              '"VorbisFile" SEARCH_NAMES "vorbisfile")')

Fragment(uuid='NORMALIZED-001117',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            sfml_bind_dependency(TARGET Vorbis FRIENDLY_NAME '
              '"VorbisEnc" SEARCH_NAMES "vorbisenc")')

Fragment(uuid='NORMALIZED-001118',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n        endif()')

Fragment(uuid='NORMALIZED-001119',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        sfml_bind_dependency(TARGET Vorbis FRIENDLY_NAME '
              '"Vorbis" SEARCH_NAMES "vorbis")')

Fragment(uuid='NORMALIZED-001120',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        sfml_bind_dependency(TARGET Vorbis FRIENDLY_NAME "Ogg" '
              'SEARCH_NAMES "ogg")')

Fragment(uuid='NORMALIZED-001121',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        sfml_bind_dependency(TARGET FLAC FRIENDLY_NAME "FLAC" '
              'SEARCH_NAMES "FLAC")')

Fragment(uuid='NORMALIZED-001122',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n    endif()')

Fragment(uuid='NORMALIZED-001123',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001124',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigDependencies.cmake',
         lineno=81,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    if (FIND_SFML_DEPENDENCIES_NOTFOUND)\n'
              '        set(FIND_SFML_ERROR "SFML found but some of its '
              'dependencies are missing '
              '(${FIND_SFML_DEPENDENCIES_NOTFOUND})")\n'
              '        set(SFML_FOUND FALSE)\n'
              '    endif()\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001125',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigVersion.cmake',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# This is a basic version file for the Config-mode of '
              'find_package().\n'
              '# It is used by write_basic_package_version_file() as input '
              'file for configure_file()\n'
              '# to create a version-file which can be installed along a '
              'config.cmake file.\n'
              '#\n'
              '# The created file sets PACKAGE_VERSION_EXACT if the current '
              'version string and\n'
              '# the requested version string are exactly the same and it '
              'sets\n'
              '# PACKAGE_VERSION_COMPATIBLE if the current version is >= '
              'requested version,\n'
              '# but only if the requested major version is the same as the '
              'current one.\n'
              '# The variable CVF_VERSION must be set before calling '
              'configure_file().\n'
              '\n')

Fragment(uuid='NORMALIZED-001126',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigVersion.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLConfigVersion.cmake\n')

Fragment(uuid='NORMALIZED-001127',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigVersion.cmake',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\nset(PACKAGE_VERSION "2.5.1")\n')

Fragment(uuid='NORMALIZED-001128',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigVersion.cmake',
         lineno=13,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)\n'
              '  set(PACKAGE_VERSION_COMPATIBLE FALSE)\n'
              'else()\n')

Fragment(uuid='NORMALIZED-001129',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigVersion.cmake',
         lineno=17,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  if("2.5.1" MATCHES "^([0-9]+)\\\\.")\n'
              '    set(CVF_VERSION_MAJOR "${CMAKE_MATCH_1}")\n'
              '  else()\n'
              '    set(CVF_VERSION_MAJOR "2.5.1")\n'
              '  endif()\n')

Fragment(uuid='NORMALIZED-001130',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigVersion.cmake',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  if(PACKAGE_FIND_VERSION_MAJOR STREQUAL CVF_VERSION_MAJOR)\n'
              '    set(PACKAGE_VERSION_COMPATIBLE TRUE)\n'
              '  else()\n'
              '    set(PACKAGE_VERSION_COMPATIBLE FALSE)\n'
              '  endif()\n')

Fragment(uuid='NORMALIZED-001131',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigVersion.cmake',
         lineno=29,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  if(PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)\n'
              '      set(PACKAGE_VERSION_EXACT TRUE)\n'
              '  endif()\n'
              'endif()\n'
              '\n')

Fragment(uuid='NORMALIZED-001132',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigVersion.cmake',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              "# if the installed or the using project don't have "
              'CMAKE_SIZEOF_VOID_P set, ignore it:\n'
              'if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "" OR "4" STREQUAL "")\n'
              '   return()\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001133',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLConfigVersion.cmake',
         lineno=40,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# check that the installed version has the same 32/64bit-ness '
              'as the one which is currently searching:\n'
              'if(NOT CMAKE_SIZEOF_VOID_P STREQUAL "4")\n'
              '  math(EXPR installedBits "4 * 8")\n'
              '  set(PACKAGE_VERSION "${PACKAGE_VERSION} '
              '(${installedBits}bit)")\n'
              '  set(PACKAGE_VERSION_UNSUITABLE TRUE)\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001134',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='#----------------------------------------------------------------\n'
              '# Generated CMake target import file for configuration '
              '"Debug".\n'
              '#----------------------------------------------------------------\n')

Fragment(uuid='NORMALIZED-001135',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake\n')

Fragment(uuid='NORMALIZED-001136',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands may need to know the format version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION 1)\n')

Fragment(uuid='NORMALIZED-001137',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=7,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-system" for configuration "Debug"\n'
              'set_property(TARGET sfml-system APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-system PROPERTIES\n'
              '  IMPORTED_IMPLIB_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-system-d.lib"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/bin/sfml-system-d-2.dll"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001138',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-system )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-system '
              '"${_IMPORT_PREFIX}/lib/sfml-system-d.lib" '
              '"${_IMPORT_PREFIX}/bin/sfml-system-d-2.dll" )\n')

Fragment(uuid='NORMALIZED-001139',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=17,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-main" for configuration "Debug"\n'
              'set_property(TARGET sfml-main APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-main PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-main-d.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001140',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-main )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-main '
              '"${_IMPORT_PREFIX}/lib/sfml-main-d.lib" )\n')

Fragment(uuid='NORMALIZED-001141',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-window" for configuration "Debug"\n'
              'set_property(TARGET sfml-window APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-window PROPERTIES\n'
              '  IMPORTED_IMPLIB_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-window-d.lib"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/bin/sfml-window-d-2.dll"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001142',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=34,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-window )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-window '
              '"${_IMPORT_PREFIX}/lib/sfml-window-d.lib" '
              '"${_IMPORT_PREFIX}/bin/sfml-window-d-2.dll" )\n')

Fragment(uuid='NORMALIZED-001143',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-network" for configuration "Debug"\n'
              'set_property(TARGET sfml-network APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-network PROPERTIES\n'
              '  IMPORTED_IMPLIB_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-network-d.lib"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/bin/sfml-network-d-2.dll"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001144',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-network )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-network '
              '"${_IMPORT_PREFIX}/lib/sfml-network-d.lib" '
              '"${_IMPORT_PREFIX}/bin/sfml-network-d-2.dll" )\n')

Fragment(uuid='NORMALIZED-001145',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=47,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-graphics" for configuration "Debug"\n'
              'set_property(TARGET sfml-graphics APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-graphics PROPERTIES\n'
              '  IMPORTED_IMPLIB_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-graphics-d.lib"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/bin/sfml-graphics-d-2.dll"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001146',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=54,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-graphics )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-graphics '
              '"${_IMPORT_PREFIX}/lib/sfml-graphics-d.lib" '
              '"${_IMPORT_PREFIX}/bin/sfml-graphics-d-2.dll" )\n')

Fragment(uuid='NORMALIZED-001147',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=57,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-audio" for configuration "Debug"\n'
              'set_property(TARGET sfml-audio APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-audio PROPERTIES\n'
              '  IMPORTED_IMPLIB_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-audio-d.lib"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/bin/sfml-audio-d-2.dll"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001148',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=64,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-audio )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-audio '
              '"${_IMPORT_PREFIX}/lib/sfml-audio-d.lib" '
              '"${_IMPORT_PREFIX}/bin/sfml-audio-d-2.dll" )\n')

Fragment(uuid='NORMALIZED-001149',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-debug.cmake',
         lineno=67,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands beyond this point should not need to know the '
              'version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION)\n')

Fragment(uuid='NORMALIZED-001150',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='#----------------------------------------------------------------\n'
              '# Generated CMake target import file for configuration '
              '"Release".\n'
              '#----------------------------------------------------------------\n')

Fragment(uuid='NORMALIZED-001151',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake\n')

Fragment(uuid='NORMALIZED-001152',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands may need to know the format version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION 1)\n')

Fragment(uuid='NORMALIZED-001153',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=7,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-system" for configuration "Release"\n'
              'set_property(TARGET sfml-system APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-system PROPERTIES\n'
              '  IMPORTED_IMPLIB_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-system.lib"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/bin/sfml-system-2.dll"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001154',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-system )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-system '
              '"${_IMPORT_PREFIX}/lib/sfml-system.lib" '
              '"${_IMPORT_PREFIX}/bin/sfml-system-2.dll" )\n')

Fragment(uuid='NORMALIZED-001155',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=17,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-main" for configuration "Release"\n'
              'set_property(TARGET sfml-main APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-main PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-main.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001156',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-main )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-main '
              '"${_IMPORT_PREFIX}/lib/sfml-main.lib" )\n')

Fragment(uuid='NORMALIZED-001157',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-window" for configuration "Release"\n'
              'set_property(TARGET sfml-window APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-window PROPERTIES\n'
              '  IMPORTED_IMPLIB_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-window.lib"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/bin/sfml-window-2.dll"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001158',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=34,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-window )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-window '
              '"${_IMPORT_PREFIX}/lib/sfml-window.lib" '
              '"${_IMPORT_PREFIX}/bin/sfml-window-2.dll" )\n')

Fragment(uuid='NORMALIZED-001159',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-network" for configuration "Release"\n'
              'set_property(TARGET sfml-network APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-network PROPERTIES\n'
              '  IMPORTED_IMPLIB_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-network.lib"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/bin/sfml-network-2.dll"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001160',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-network )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-network '
              '"${_IMPORT_PREFIX}/lib/sfml-network.lib" '
              '"${_IMPORT_PREFIX}/bin/sfml-network-2.dll" )\n')

Fragment(uuid='NORMALIZED-001161',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=47,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-graphics" for configuration "Release"\n'
              'set_property(TARGET sfml-graphics APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-graphics PROPERTIES\n'
              '  IMPORTED_IMPLIB_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-graphics.lib"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/bin/sfml-graphics-2.dll"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001162',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=54,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-graphics )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-graphics '
              '"${_IMPORT_PREFIX}/lib/sfml-graphics.lib" '
              '"${_IMPORT_PREFIX}/bin/sfml-graphics-2.dll" )\n')

Fragment(uuid='NORMALIZED-001163',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=57,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-audio" for configuration "Release"\n'
              'set_property(TARGET sfml-audio APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-audio PROPERTIES\n'
              '  IMPORTED_IMPLIB_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-audio.lib"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/bin/sfml-audio-2.dll"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001164',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=64,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-audio )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-audio '
              '"${_IMPORT_PREFIX}/lib/sfml-audio.lib" '
              '"${_IMPORT_PREFIX}/bin/sfml-audio-2.dll" )\n')

Fragment(uuid='NORMALIZED-001165',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets-release.cmake',
         lineno=67,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands beyond this point should not need to know the '
              'version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION)\n')

Fragment(uuid='NORMALIZED-001166',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# Generated by CMake\n')

Fragment(uuid='NORMALIZED-001167',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake\n')

Fragment(uuid='NORMALIZED-001168',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)\n'
              '   message(FATAL_ERROR "CMake >= 2.6.0 required")\n'
              'endif()\n'
              'cmake_policy(PUSH)\n'
              'cmake_policy(VERSION 2.6)\n'
              '#----------------------------------------------------------------\n'
              '# Generated CMake target import file.\n'
              '#----------------------------------------------------------------\n')

Fragment(uuid='NORMALIZED-001169',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands may need to know the format version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION 1)\n')

Fragment(uuid='NORMALIZED-001170',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# Protect against multiple inclusion, which would fail when '
              'already imported targets are added once more.')

Fragment(uuid='NORMALIZED-001171',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\nset(_targetsDefined)')

Fragment(uuid='NORMALIZED-001172',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\nset(_targetsNotDefined)')

Fragment(uuid='NORMALIZED-001173',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\nset(_expectedTargets)')

Fragment(uuid='NORMALIZED-001174',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'foreach(_expectedTarget sfml-system sfml-main sfml-window '
              'OpenGL sfml-network sfml-graphics Freetype OpenAL Vorbis FLAC '
              'sfml-audio)')

Fragment(uuid='NORMALIZED-001175',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n  list(APPEND _expectedTargets ${_expectedTarget})')

Fragment(uuid='NORMALIZED-001176',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n  if(NOT TARGET ${_expectedTarget})')

Fragment(uuid='NORMALIZED-001177',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND _targetsNotDefined ${_expectedTarget})')

Fragment(uuid='NORMALIZED-001178',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n  endif()')

Fragment(uuid='NORMALIZED-001179',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n  if(TARGET ${_expectedTarget})')

Fragment(uuid='NORMALIZED-001180',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND _targetsDefined ${_expectedTarget})')

Fragment(uuid='NORMALIZED-001181',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n  endif()')

Fragment(uuid='NORMALIZED-001182',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\nendforeach()')

Fragment(uuid='NORMALIZED-001183',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\nif("${_targetsDefined}" STREQUAL "${_expectedTargets}")')

Fragment(uuid='NORMALIZED-001184',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n  unset(_targetsDefined)')

Fragment(uuid='NORMALIZED-001185',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n  unset(_targetsNotDefined)')

Fragment(uuid='NORMALIZED-001186',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n  unset(_expectedTargets)')

Fragment(uuid='NORMALIZED-001187',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n  set(CMAKE_IMPORT_FILE_VERSION)')

Fragment(uuid='NORMALIZED-001188',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n  cmake_policy(POP)')

Fragment(uuid='NORMALIZED-001189',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n  return()')

Fragment(uuid='NORMALIZED-001190',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\nendif()')

Fragment(uuid='NORMALIZED-001191',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\nif(NOT "${_targetsDefined}" STREQUAL "")')

Fragment(uuid='NORMALIZED-001192',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  message(FATAL_ERROR "Some (but not all) targets in this '
              'export set were already defined.\\nTargets Defined: '
              '${_targetsDefined}\\nTargets not yet defined: '
              '${_targetsNotDefined}\\n")')

Fragment(uuid='NORMALIZED-001193',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\nendif()')

Fragment(uuid='NORMALIZED-001194',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\nunset(_targetsDefined)')

Fragment(uuid='NORMALIZED-001195',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\nunset(_targetsNotDefined)')

Fragment(uuid='NORMALIZED-001196',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\nunset(_expectedTargets)')

Fragment(uuid='NORMALIZED-001197',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001198',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001199',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=43,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Compute the installation prefix relative to this file.\n'
              'get_filename_component(_IMPORT_PREFIX '
              '"${CMAKE_CURRENT_LIST_FILE}" PATH)\n'
              'get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" '
              'PATH)\n'
              'get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" '
              'PATH)\n'
              'get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" '
              'PATH)\n'
              'if(_IMPORT_PREFIX STREQUAL "/")\n'
              '  set(_IMPORT_PREFIX "")\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001200',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-system\n'
              'add_library(sfml-system SHARED IMPORTED)\n')

Fragment(uuid='NORMALIZED-001201',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=55,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-system PROPERTIES\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001202',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=59,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-main\n'
              'add_library(sfml-main STATIC IMPORTED)\n')

Fragment(uuid='NORMALIZED-001203',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=62,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-main PROPERTIES\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001204',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=66,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-window\n'
              'add_library(sfml-window SHARED IMPORTED)\n')

Fragment(uuid='NORMALIZED-001205',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=69,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-window PROPERTIES\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              '  INTERFACE_LINK_LIBRARIES "sfml-system"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001206',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=74,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target OpenGL\n'
              'add_library(OpenGL INTERFACE IMPORTED)\n')

Fragment(uuid='NORMALIZED-001207',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=77,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-network\n'
              'add_library(sfml-network SHARED IMPORTED)\n')

Fragment(uuid='NORMALIZED-001208',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=80,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-network PROPERTIES\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              '  INTERFACE_LINK_LIBRARIES "sfml-system"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001209',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=85,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-graphics\n'
              'add_library(sfml-graphics SHARED IMPORTED)\n')

Fragment(uuid='NORMALIZED-001210',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=88,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-graphics PROPERTIES\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              '  INTERFACE_LINK_LIBRARIES "sfml-window"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001211',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=93,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target Freetype\n'
              'add_library(Freetype INTERFACE IMPORTED)\n')

Fragment(uuid='NORMALIZED-001212',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=96,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target OpenAL\n'
              'add_library(OpenAL INTERFACE IMPORTED)\n')

Fragment(uuid='NORMALIZED-001213',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=99,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target Vorbis\n'
              'add_library(Vorbis INTERFACE IMPORTED)\n')

Fragment(uuid='NORMALIZED-001214',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=102,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(Vorbis PROPERTIES\n'
              '  INTERFACE_COMPILE_DEFINITIONS "OV_EXCLUDE_STATIC_CALLBACKS"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001215',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=106,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target FLAC\n'
              'add_library(FLAC INTERFACE IMPORTED)\n')

Fragment(uuid='NORMALIZED-001216',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=109,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(FLAC PROPERTIES\n'
              '  INTERFACE_COMPILE_DEFINITIONS "FLAC__NO_DLL"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001217',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=113,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-audio\n'
              'add_library(sfml-audio SHARED IMPORTED)\n')

Fragment(uuid='NORMALIZED-001218',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=116,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-audio PROPERTIES\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              '  INTERFACE_LINK_LIBRARIES "sfml-system"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001219',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=121,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if(CMAKE_VERSION VERSION_LESS 3.0.0)\n'
              '  message(FATAL_ERROR "This file relies on consumers using '
              'CMake 3.0.0 or greater.")\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001220',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=125,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Load information for each installed configuration.\n'
              'get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)\n'
              'file(GLOB CONFIG_FILES "${_DIR}/SFMLSharedTargets-*.cmake")\n'
              'foreach(f ${CONFIG_FILES})\n'
              '  include(${f})\n'
              'endforeach()\n')

Fragment(uuid='NORMALIZED-001221',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=132,
         depth=1,
         type='documentation',
         name='',
         text='\n# Cleanup temporary variables.\nset(_IMPORT_PREFIX)\n')

Fragment(uuid='NORMALIZED-001222',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=135,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# Loop over all imported files and verify that they actually '
              'exist')

Fragment(uuid='NORMALIZED-001223',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=136,
         depth=2,
         type='documentation',
         name='',
         text='\nforeach(target ${_IMPORT_CHECK_TARGETS} )')

Fragment(uuid='NORMALIZED-001224',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=137,
         depth=2,
         type='documentation',
         name='',
         text='\n  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )')

Fragment(uuid='NORMALIZED-001225',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=138,
         depth=2,
         type='documentation',
         name='',
         text='\n    if(NOT EXISTS "${file}" )')

Fragment(uuid='NORMALIZED-001226',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=139,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      message(FATAL_ERROR "The imported target \\"${target}\\" '
              'references the file')

Fragment(uuid='NORMALIZED-001227',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=140,
         depth=2,
         type='documentation',
         name='',
         text='\n   \\"${file}\\"')

Fragment(uuid='NORMALIZED-001228',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=141,
         depth=2,
         type='documentation',
         name='',
         text='\nbut this file does not exist.  Possible reasons include:')

Fragment(uuid='NORMALIZED-001229',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=142,
         depth=2,
         type='documentation',
         name='',
         text='\n* The file was deleted, renamed, or moved to another location.')

Fragment(uuid='NORMALIZED-001230',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=143,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '* An install or uninstall procedure did not complete '
              'successfully.')

Fragment(uuid='NORMALIZED-001231',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=144,
         depth=2,
         type='documentation',
         name='',
         text='\n* The installation package was faulty and contained')

Fragment(uuid='NORMALIZED-001232',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n   \\"${CMAKE_CURRENT_LIST_FILE}\\"')

Fragment(uuid='NORMALIZED-001233',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\nbut not all the files it references.')

Fragment(uuid='NORMALIZED-001234',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n")')

Fragment(uuid='NORMALIZED-001235',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\n    endif()')

Fragment(uuid='NORMALIZED-001236',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n  endforeach()')

Fragment(uuid='NORMALIZED-001237',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n  unset(_IMPORT_CHECK_FILES_FOR_${target})')

Fragment(uuid='NORMALIZED-001238',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\nendforeach()')

Fragment(uuid='NORMALIZED-001239',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\nunset(_IMPORT_CHECK_TARGETS)')

Fragment(uuid='NORMALIZED-001240',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001241',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=154,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# This file does not depend on other imported targets which '
              'have\n'
              '# been exported from the same project but in a separate export '
              'set.\n')

Fragment(uuid='NORMALIZED-001242',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLSharedTargets.cmake',
         lineno=157,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands beyond this point should not need to know the '
              'version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION)\n'
              'cmake_policy(POP)\n')

Fragment(uuid='NORMALIZED-001243',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='#----------------------------------------------------------------\n'
              '# Generated CMake target import file for configuration '
              '"Debug".\n'
              '#----------------------------------------------------------------\n')

Fragment(uuid='NORMALIZED-001244',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake\n')

Fragment(uuid='NORMALIZED-001245',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands may need to know the format version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION 1)\n')

Fragment(uuid='NORMALIZED-001246',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=7,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-system" for configuration "Debug"\n'
              'set_property(TARGET sfml-system APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-system PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-system-s-d.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001247',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-system )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-system '
              '"${_IMPORT_PREFIX}/lib/sfml-system-s-d.lib" )\n')

Fragment(uuid='NORMALIZED-001248',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=17,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-main" for configuration "Debug"\n'
              'set_property(TARGET sfml-main APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-main PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-main-d.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001249',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-main )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-main '
              '"${_IMPORT_PREFIX}/lib/sfml-main-d.lib" )\n')

Fragment(uuid='NORMALIZED-001250',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-window" for configuration "Debug"\n'
              'set_property(TARGET sfml-window APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-window PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-window-s-d.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001251',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=34,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-window )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-window '
              '"${_IMPORT_PREFIX}/lib/sfml-window-s-d.lib" )\n')

Fragment(uuid='NORMALIZED-001252',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-network" for configuration "Debug"\n'
              'set_property(TARGET sfml-network APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-network PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-network-s-d.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001253',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-network )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-network '
              '"${_IMPORT_PREFIX}/lib/sfml-network-s-d.lib" )\n')

Fragment(uuid='NORMALIZED-001254',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=47,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-graphics" for configuration "Debug"\n'
              'set_property(TARGET sfml-graphics APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-graphics PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-graphics-s-d.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001255',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=54,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-graphics )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-graphics '
              '"${_IMPORT_PREFIX}/lib/sfml-graphics-s-d.lib" )\n')

Fragment(uuid='NORMALIZED-001256',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=57,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-audio" for configuration "Debug"\n'
              'set_property(TARGET sfml-audio APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS DEBUG)\n'
              'set_target_properties(sfml-audio PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"\n'
              '  IMPORTED_LOCATION_DEBUG '
              '"${_IMPORT_PREFIX}/lib/sfml-audio-s-d.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001257',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=64,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-audio )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-audio '
              '"${_IMPORT_PREFIX}/lib/sfml-audio-s-d.lib" )\n')

Fragment(uuid='NORMALIZED-001258',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-debug.cmake',
         lineno=67,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands beyond this point should not need to know the '
              'version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION)\n')

Fragment(uuid='NORMALIZED-001259',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='#----------------------------------------------------------------\n'
              '# Generated CMake target import file for configuration '
              '"Release".\n'
              '#----------------------------------------------------------------\n')

Fragment(uuid='NORMALIZED-001260',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake\n')

Fragment(uuid='NORMALIZED-001261',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands may need to know the format version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION 1)\n')

Fragment(uuid='NORMALIZED-001262',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=7,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-system" for configuration "Release"\n'
              'set_property(TARGET sfml-system APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-system PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-system-s.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001263',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-system )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-system '
              '"${_IMPORT_PREFIX}/lib/sfml-system-s.lib" )\n')

Fragment(uuid='NORMALIZED-001264',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=17,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-main" for configuration "Release"\n'
              'set_property(TARGET sfml-main APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-main PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-main.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001265',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-main )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-main '
              '"${_IMPORT_PREFIX}/lib/sfml-main.lib" )\n')

Fragment(uuid='NORMALIZED-001266',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-window" for configuration "Release"\n'
              'set_property(TARGET sfml-window APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-window PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-window-s.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001267',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=34,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-window )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-window '
              '"${_IMPORT_PREFIX}/lib/sfml-window-s.lib" )\n')

Fragment(uuid='NORMALIZED-001268',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-network" for configuration "Release"\n'
              'set_property(TARGET sfml-network APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-network PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-network-s.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001269',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-network )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-network '
              '"${_IMPORT_PREFIX}/lib/sfml-network-s.lib" )\n')

Fragment(uuid='NORMALIZED-001270',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=47,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-graphics" for configuration "Release"\n'
              'set_property(TARGET sfml-graphics APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-graphics PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-graphics-s.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001271',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=54,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-graphics )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-graphics '
              '"${_IMPORT_PREFIX}/lib/sfml-graphics-s.lib" )\n')

Fragment(uuid='NORMALIZED-001272',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=57,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Import target "sfml-audio" for configuration "Release"\n'
              'set_property(TARGET sfml-audio APPEND PROPERTY '
              'IMPORTED_CONFIGURATIONS RELEASE)\n'
              'set_target_properties(sfml-audio PROPERTIES\n'
              '  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"\n'
              '  IMPORTED_LOCATION_RELEASE '
              '"${_IMPORT_PREFIX}/lib/sfml-audio-s.lib"\n'
              '  )\n')

Fragment(uuid='NORMALIZED-001273',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=64,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'list(APPEND _IMPORT_CHECK_TARGETS sfml-audio )\n'
              'list(APPEND _IMPORT_CHECK_FILES_FOR_sfml-audio '
              '"${_IMPORT_PREFIX}/lib/sfml-audio-s.lib" )\n')

Fragment(uuid='NORMALIZED-001274',
         path='/Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets-release.cmake',
         lineno=67,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands beyond this point should not need to know the '
              'version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION)\n')

Fragment(uuid='NORMALIZED-001275',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# Generated by CMake\n')

Fragment(uuid='NORMALIZED-001276',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Labirint '
              'Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake\n')

Fragment(uuid='NORMALIZED-001277',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)\n'
              '   message(FATAL_ERROR "CMake >= 2.6.0 required")\n'
              'endif()\n'
              'cmake_policy(PUSH)\n'
              'cmake_policy(VERSION 2.6)\n'
              '#----------------------------------------------------------------\n'
              '# Generated CMake target import file.\n'
              '#----------------------------------------------------------------\n')

Fragment(uuid='NORMALIZED-001278',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands may need to know the format version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION 1)\n')

Fragment(uuid='NORMALIZED-001279',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# Protect against multiple inclusion, which would fail when '
              'already imported targets are added once more.')

Fragment(uuid='NORMALIZED-001280',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\nset(_targetsDefined)')

Fragment(uuid='NORMALIZED-001281',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\nset(_targetsNotDefined)')

Fragment(uuid='NORMALIZED-001282',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\nset(_expectedTargets)')

Fragment(uuid='NORMALIZED-001283',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'foreach(_expectedTarget sfml-system sfml-main sfml-window '
              'OpenGL sfml-network sfml-graphics Freetype OpenAL Vorbis FLAC '
              'sfml-audio)')

Fragment(uuid='NORMALIZED-001284',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n  list(APPEND _expectedTargets ${_expectedTarget})')

Fragment(uuid='NORMALIZED-001285',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n  if(NOT TARGET ${_expectedTarget})')

Fragment(uuid='NORMALIZED-001286',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND _targetsNotDefined ${_expectedTarget})')

Fragment(uuid='NORMALIZED-001287',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n  endif()')

Fragment(uuid='NORMALIZED-001288',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n  if(TARGET ${_expectedTarget})')

Fragment(uuid='NORMALIZED-001289',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND _targetsDefined ${_expectedTarget})')

Fragment(uuid='NORMALIZED-001290',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n  endif()')

Fragment(uuid='NORMALIZED-001291',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\nendforeach()')

Fragment(uuid='NORMALIZED-001292',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\nif("${_targetsDefined}" STREQUAL "${_expectedTargets}")')

Fragment(uuid='NORMALIZED-001293',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n  unset(_targetsDefined)')

Fragment(uuid='NORMALIZED-001294',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n  unset(_targetsNotDefined)')

Fragment(uuid='NORMALIZED-001295',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n  unset(_expectedTargets)')

Fragment(uuid='NORMALIZED-001296',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n  set(CMAKE_IMPORT_FILE_VERSION)')

Fragment(uuid='NORMALIZED-001297',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n  cmake_policy(POP)')

Fragment(uuid='NORMALIZED-001298',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n  return()')

Fragment(uuid='NORMALIZED-001299',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\nendif()')

Fragment(uuid='NORMALIZED-001300',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\nif(NOT "${_targetsDefined}" STREQUAL "")')

Fragment(uuid='NORMALIZED-001301',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  message(FATAL_ERROR "Some (but not all) targets in this '
              'export set were already defined.\\nTargets Defined: '
              '${_targetsDefined}\\nTargets not yet defined: '
              '${_targetsNotDefined}\\n")')

Fragment(uuid='NORMALIZED-001302',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\nendif()')

Fragment(uuid='NORMALIZED-001303',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\nunset(_targetsDefined)')

Fragment(uuid='NORMALIZED-001304',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\nunset(_targetsNotDefined)')

Fragment(uuid='NORMALIZED-001305',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\nunset(_expectedTargets)')

Fragment(uuid='NORMALIZED-001306',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001307',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001308',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=43,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Compute the installation prefix relative to this file.\n'
              'get_filename_component(_IMPORT_PREFIX '
              '"${CMAKE_CURRENT_LIST_FILE}" PATH)\n'
              'get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" '
              'PATH)\n'
              'get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" '
              'PATH)\n'
              'get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" '
              'PATH)\n'
              'if(_IMPORT_PREFIX STREQUAL "/")\n'
              '  set(_IMPORT_PREFIX "")\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001309',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-system\n'
              'add_library(sfml-system STATIC IMPORTED)\n')

Fragment(uuid='NORMALIZED-001310',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=55,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-system PROPERTIES\n'
              '  INTERFACE_COMPILE_DEFINITIONS "SFML_STATIC"\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              '  INTERFACE_LINK_LIBRARIES "\\$<LINK_ONLY:winmm>"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001311',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=61,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-main\n'
              'add_library(sfml-main STATIC IMPORTED)\n')

Fragment(uuid='NORMALIZED-001312',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=64,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-main PROPERTIES\n'
              '  INTERFACE_COMPILE_DEFINITIONS "SFML_STATIC"\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001313',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=69,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-window\n'
              'add_library(sfml-window STATIC IMPORTED)\n')

Fragment(uuid='NORMALIZED-001314',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=72,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-window PROPERTIES\n'
              '  INTERFACE_COMPILE_DEFINITIONS "SFML_STATIC"\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              '  INTERFACE_LINK_LIBRARIES '
              '"sfml-system;\\$<LINK_ONLY:OpenGL>;\\$<LINK_ONLY:winmm>;\\$<LINK_ONLY:gdi32>"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001315',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=78,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target OpenGL\n'
              'add_library(OpenGL INTERFACE IMPORTED)\n')

Fragment(uuid='NORMALIZED-001316',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=81,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-network\n'
              'add_library(sfml-network STATIC IMPORTED)\n')

Fragment(uuid='NORMALIZED-001317',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=84,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-network PROPERTIES\n'
              '  INTERFACE_COMPILE_DEFINITIONS "SFML_STATIC"\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              '  INTERFACE_LINK_LIBRARIES "sfml-system;\\$<LINK_ONLY:ws2_32>"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001318',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=90,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-graphics\n'
              'add_library(sfml-graphics STATIC IMPORTED)\n')

Fragment(uuid='NORMALIZED-001319',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=93,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-graphics PROPERTIES\n'
              '  INTERFACE_COMPILE_DEFINITIONS "SFML_STATIC"\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              '  INTERFACE_LINK_LIBRARIES '
              '"sfml-window;\\$<LINK_ONLY:OpenGL>;\\$<LINK_ONLY:Freetype>"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001320',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=99,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target Freetype\n'
              'add_library(Freetype INTERFACE IMPORTED)\n')

Fragment(uuid='NORMALIZED-001321',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=102,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target OpenAL\n'
              'add_library(OpenAL INTERFACE IMPORTED)\n')

Fragment(uuid='NORMALIZED-001322',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=105,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target Vorbis\n'
              'add_library(Vorbis INTERFACE IMPORTED)\n')

Fragment(uuid='NORMALIZED-001323',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=108,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(Vorbis PROPERTIES\n'
              '  INTERFACE_COMPILE_DEFINITIONS "OV_EXCLUDE_STATIC_CALLBACKS"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001324',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=112,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target FLAC\n'
              'add_library(FLAC INTERFACE IMPORTED)\n')

Fragment(uuid='NORMALIZED-001325',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=115,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(FLAC PROPERTIES\n'
              '  INTERFACE_COMPILE_DEFINITIONS "FLAC__NO_DLL"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001326',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=119,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Create imported target sfml-audio\n'
              'add_library(sfml-audio STATIC IMPORTED)\n')

Fragment(uuid='NORMALIZED-001327',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(sfml-audio PROPERTIES\n'
              '  INTERFACE_COMPILE_DEFINITIONS "SFML_STATIC"\n'
              '  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"\n'
              '  INTERFACE_LINK_LIBRARIES '
              '"\\$<LINK_ONLY:OpenAL>;sfml-system;\\$<LINK_ONLY:Vorbis>;\\$<LINK_ONLY:FLAC>"\n'
              ')\n')

Fragment(uuid='NORMALIZED-001328',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=128,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if(CMAKE_VERSION VERSION_LESS 3.0.0)\n'
              '  message(FATAL_ERROR "This file relies on consumers using '
              'CMake 3.0.0 or greater.")\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-001329',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=132,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Load information for each installed configuration.\n'
              'get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)\n'
              'file(GLOB CONFIG_FILES "${_DIR}/SFMLStaticTargets-*.cmake")\n'
              'foreach(f ${CONFIG_FILES})\n'
              '  include(${f})\n'
              'endforeach()\n')

Fragment(uuid='NORMALIZED-001330',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=139,
         depth=1,
         type='documentation',
         name='',
         text='\n# Cleanup temporary variables.\nset(_IMPORT_PREFIX)\n')

Fragment(uuid='NORMALIZED-001331',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=142,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '# Loop over all imported files and verify that they actually '
              'exist')

Fragment(uuid='NORMALIZED-001332',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=143,
         depth=2,
         type='documentation',
         name='',
         text='\nforeach(target ${_IMPORT_CHECK_TARGETS} )')

Fragment(uuid='NORMALIZED-001333',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=144,
         depth=2,
         type='documentation',
         name='',
         text='\n  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )')

Fragment(uuid='NORMALIZED-001334',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n    if(NOT EXISTS "${file}" )')

Fragment(uuid='NORMALIZED-001335',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      message(FATAL_ERROR "The imported target \\"${target}\\" '
              'references the file')

Fragment(uuid='NORMALIZED-001336',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n   \\"${file}\\"')

Fragment(uuid='NORMALIZED-001337',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\nbut this file does not exist.  Possible reasons include:')

Fragment(uuid='NORMALIZED-001338',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n* The file was deleted, renamed, or moved to another location.')

Fragment(uuid='NORMALIZED-001339',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '* An install or uninstall procedure did not complete '
              'successfully.')

Fragment(uuid='NORMALIZED-001340',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\n* The installation package was faulty and contained')

Fragment(uuid='NORMALIZED-001341',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n   \\"${CMAKE_CURRENT_LIST_FILE}\\"')

Fragment(uuid='NORMALIZED-001342',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\nbut not all the files it references.')

Fragment(uuid='NORMALIZED-001343',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n")')

Fragment(uuid='NORMALIZED-001344',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n    endif()')

Fragment(uuid='NORMALIZED-001345',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n  endforeach()')

Fragment(uuid='NORMALIZED-001346',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n  unset(_IMPORT_CHECK_FILES_FOR_${target})')

Fragment(uuid='NORMALIZED-001347',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\nendforeach()')

Fragment(uuid='NORMALIZED-001348',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=159,
         depth=2,
         type='documentation',
         name='',
         text='\nunset(_IMPORT_CHECK_TARGETS)')

Fragment(uuid='NORMALIZED-001349',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=160,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001350',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=161,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# This file does not depend on other imported targets which '
              'have\n'
              '# been exported from the same project but in a separate export '
              'set.\n')

Fragment(uuid='NORMALIZED-001351',
         path='/Labirint Game/sfml/lib/cmake/SFML/SFMLStaticTargets.cmake',
         lineno=164,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '# Commands beyond this point should not need to know the '
              'version.\n'
              'set(CMAKE_IMPORT_FILE_VERSION)\n'
              'cmake_policy(POP)\n')

Fragment(uuid='NORMALIZED-001352',
         path='/New Year Congratulation/new_year.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /New Year Congratulation/new_year.cpp\n'
              '  Functions: SetColor, background, congrats, main, numbers, '
              'pushX, text_2020, work_pushX\n'
              '  Using declarations: setw\n')

Fragment(uuid='NORMALIZED-001353',
         path='/New Year Congratulation/new_year.cpp',
         lineno=10,
         depth=2,
         type='using_declaration',
         name='setw',
         text='')

Fragment(uuid='NORMALIZED-001354',
         path='/New Year Congratulation/new_year.cpp',
         lineno=11,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001355',
         path='/New Year Congratulation/new_year.cpp',
         lineno=15,
         depth=2,
         type='function_decl',
         name='SetColor',
         text='void SetColor(int value) \n'
              '{\n'
              '\tSetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), '
              'value);\n'
              '}\n')

Fragment(uuid='NORMALIZED-001356',
         path='/New Year Congratulation/new_year.cpp',
         lineno=20,
         depth=2,
         type='function_decl',
         name='background',
         text='void background()\n'
              '{\n'
              '\tSetColor(13);\n'
              '\tcout << endl;\n'
              '\tcout << '
              '"\\t\\t\\t\\t\t\t\t\t\t   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      \t '
              '" << endl;\n'
              '\tcout << '
              '"\\t\\t\\t\\t                                                   '
              '.\\\'\\\'.\t\t\t\t\t\t\t\t\t\t         " << endl;\n'
              '\tcout << '
              '"\\t\\t\\t\\t                                                  '
              ':_\\\\/_:    .\t\t\t\t\t\t\t\t\t\t " << endl;\n'
              '\tcout << "\\t\\t\\t\\t                |        '
              "*                   .''. : /\\\\ :\t\t* * *\t\t\t\t\t\t\t \t    "
              '" << endl;\n'
              '\tcout << "\\t\\t\\t\\t                | *    '
              "*                     :_\\\\/_:'.:::.    \\*\\'\\'*   * "
              '\\\'.\\\'/.\\\'\t\t    \t       "  << endl;\n'
              '\tcout << "\\t\\t\\t\\t                =\t*         '
              ".--             : /\\\\ : :::::  '*_\\\\\\/_*   -= o =- \\    "
              '\'  *\t\t\t\t " << endl;\n'
              '\tcout << "\\t\\t\\t\\t               === *       / _ '
              "'             '..'  ':::'   * \\/\\\\ *   "
              '.\\\'/.\\\\\\\'.           \t         " << endl;\n'
              '\tcout << "\\t\\t\\t\\t          *     |\t*       | _ |     '
              '*             .__      *..*           .....  '
              '.---\\"|\t\t         " << endl;\n'
              '\tcout << "\\t\\t\\t\\t       *        |\t _      | _ '
              "|\t          _*   .-'||'-.       .--\\'|  ||__ | _|    "
              '|    \t\t      " << endl;\n'
              '\tcout << "\\t\\t\\t\\t         *      |  .-\'|    | _ |      '
              ".-\\'|  _.|  ||    || -|  -__  |   |  | __ ||      "
              '|\t\t       \t " << endl;\n'
              '\tcout << "\\t\\t\\t\\t      .-----.   |  |  |    |   |\t |\' | '
              '|.    ||    || -|  |  | |   |  |    ||      |\t                 '
              '" << endl;\n'
              '\tcout << "\\t\\t\\t\\t   __\'       \' /\\ \'\\\\ |  '
              '\\\'-../   |...___|  \'-\'           \\"\\"  |__|   \\\'-\\\'   '
              '\\\'-.\\\'    \'\\`     |__    " << endl;\n'
              '\tcout << "\\t\\t\\t\\t     \' . . . \' []  \\\\   \\_/ \\_/  '
              "..........----|*..''|/?/>/ \\''\\''\\/''/''/ "
              '!!!<<<<>>>>>>...........    " << endl;\n'
              '\tSetColor(8);\n'
              '\tcout << "\\t\\t\\t\\t   '
              '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
              '" << endl;\n'
              '\t\n'
              '}\n')

Fragment(uuid='NORMALIZED-001357',
         path='/New Year Congratulation/new_year.cpp',
         lineno=42,
         depth=2,
         type='function_decl',
         name='numbers',
         text='void numbers()\n'
              '{\n'
              '\tint time = 10;\n'
              '\tSleep(1000);\n'
              '\twhile (time >= 0)\n'
              '\t{\n'
              '\t\tSleep(1000);\n'
              '\t\ttime--;\n'
              '\t\tcout << endl;\n'
              '\t\tswitch (time)\n'
              '\t\t{\n'
              '\t\tcase 9:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t      999999999      '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t    99:::::::::99    '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  99:::::::::::::99  '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 9::::::99999::::::9 '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 9:::::9     9:::::9 '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 9:::::9     9:::::9 '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  9:::::99999::::::9 '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t   99::::::::::::::9 '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     99999::::::::9  '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t          9::::::9   '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t         9::::::9    '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        9::::::9     '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t       9::::::9      '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t      9::::::9       '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     9999999         '
              '" << endl;\n'
              '\t\t\tbackground();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tcase 8:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t      888888888      '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t    88:::::::::88    '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  88:::::::::::::88  '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 8::::::88888::::::8 '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 8:::::8     8:::::8 '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 8:::::8     8:::::8 '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  8:::::88888:::::8  '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t   8:::::::::::::8   '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  8:::::88888:::::8  '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 8:::::8     8:::::8 '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 8:::::8     8:::::8 '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 8::::::88888::::::8 '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  88:::::::::::::88  '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t    88:::::::::88    '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t      888888888      '
              '" << endl;\n'
              '\t\t\tbackground();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tcase 7:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t '
              '77777777777777777777" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t '
              '7::::::::::::::::::7" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t '
              '7::::::::::::::::::7" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t '
              '777777777777:::::::7" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t            7::::::7 '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t           7::::::7  '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t          7::::::7   '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t         7::::::7    '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        7::::::7     '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t       7::::::7      '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t      7::::::7       '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     7::::::7        '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t    7::::::7         '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t   7::::::7          '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  77777777           '
              '" << endl;\n'
              '\t\t\tbackground();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tcase 6:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << endl ;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t          '
              '66666666          " << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t         '
              '6::::::6           " << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        '
              '6::::::6            " << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t       '
              '6::::::6             " << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t      '
              '6::::::6              " << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     '
              '6:::::::6              " << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t    '
              '6:::::::66666           " << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t   '
              '6:::::::::::::66         " << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  '
              '6:::::99999::::::6        " << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 6:::::9     '
              '9::::::6       " << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 6:::::9     '
              '9::::::6       " << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t '
              '6::::::99999::::::6        " << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  '
              '66:::::::::::::66         " << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t    '
              '66::::::::::66          " << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t      '
              '6666666666            " << endl;\n'
              '\t\t\tbackground();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tcase 5:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 555555555555555555  '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 5::::::::::::::::5  '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 5:::::555555555555  '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 5:::::5             '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 5:::::5             '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 5:::::5555555555    '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 5:::::::::::::::5   '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 55555555555::::::5  '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t             5:::::5 '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t             5:::::5 '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 555555      5:::::5 '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 55:::::55555::::::5 '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  55:::::::::::::55  '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t   55:::::::::::55   '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t    555555555555     '
              '" << endl;\n'
              '\t\t\tbackground();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tcase 4:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        444444444    '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t       4::::::::4    '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t      4:::::::::4    '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     4::::44::::4    '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t    4::::4 4::::4    '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t   4::::4  4::::4    '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  4::::4   4::::4    '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 4::::444444::::4444 '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 4::::::::::::::::44 '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 4444444444:::::4444 '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t           4::::4    '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t           4::::4    '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t         44::::::44  '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t         4::::::::4  '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t         4444444444  '
              '" << endl;\n'
              '\t\t\tbackground();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tcase 3:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 3333333333333333    '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 3:::::::::::::::33  '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 3::::::33333::::::3 '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 3333333     3:::::3 '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t             3:::::3 '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t             3:::::3 '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     33333333:::::3  '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     3:::::::::::3   '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     33333333:::::3  '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t            3:::::33 '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t            3:::::33 '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 3333333    3::::::3 '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 3::::::33333:::::33 '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 3:::::::::::::::33  '
              '" << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 3333333333333333    '
              '" << endl;\n'
              '\t\t\tbackground();\n'
              '\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tcase 2:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 222222222222222      '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 2:::::::::::::::22   '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 2::::::222222:::::22 '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 2222222     2:::::22 '
              '" << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t             2:::::22 '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t             2:::::22 '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t         2222::::22   '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     22222::::::22    '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t   22::::::::222      '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  2:::::22222         '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 2:::::2              '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 2:::::2       222222 '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 2::::::2222222:::::2 '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 2::::::::::::::::::2 '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 22222222222222222222 '
              '" << endl;\n'
              '\t\t\tbackground();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tcase 1:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t       1111111       '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t      1::::::1       '
              '" << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     1:::::::1       '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t    1111:::::1       '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        1::::1       '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        1::::1       '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        1::::1       '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        1::::1       '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        1::::1       '
              '" << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        1::::1       '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t        1::::1       '
              '" << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     111::::::111    '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     1::::::::::1    '
              '" << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     1::::::::::1    '
              '" << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     111111111111    '
              '" << endl;\n'
              '\t\t\tbackground();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tcase 0:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << endl ;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t       '
              '000000000        " << endl;\n'
              '\t\t\tSetColor(10);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t     '
              '00:::::::::00      " << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t   '
              '00:::::::::::::00    " << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  '
              '0:::::::000:::::::0   " << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 0:::::::0   '
              '0:::::::0   " << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 0::::::0     '
              '0::::::0  " << endl;\n'
              '\t\t\tSetColor(15);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 0::::::0     '
              '0::::::0  " << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 0::::::0 000 '
              '0::::::0  " << endl;\n'
              '\t\t\tSetColor(9);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 0::::::0     '
              '0::::::0  " << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 0::::::0     '
              '0::::::0  " << endl;\n'
              '\t\t\tSetColor(12);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t 0:::::::0   '
              '0:::::::0  " << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t  '
              '0:::::::000:::::::0   " << endl;\n'
              '\t\t\tSetColor(13);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t   '
              '0::::::::::::::00    " << endl;\n'
              '\t\t\tSetColor(14);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t    '
              '0:::::::::::00      " << endl;\n'
              '\t\t\tSetColor(11);\n'
              '\t\t\tcout << "\\t\\t\\t\\t\\t\\t\\t\\t\\t      '
              '0000000000        " << endl;\n'
              '\t\t\tbackground();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tdefault:\n'
              '\t\t\tbreak;\n'
              '\t\t}\n'
              '\t}\n'
              '\tsystem("cls");\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-001358',
         path='/New Year Congratulation/new_year.cpp',
         lineno=432,
         depth=2,
         type='function_decl',
         name='pushX',
         text='void pushX(int num) {\n'
              '\tfor (int i = 0;i < num;i++)\n'
              '\t\tcout << "  ";\n'
              '}\n')

Fragment(uuid='NORMALIZED-001359',
         path='/New Year Congratulation/new_year.cpp',
         lineno=437,
         depth=2,
         type='function_decl',
         name='text_2020',
         text='void text_2020()\n'
              '{\n'
              '\t\tcout << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tSetColor(8);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t 222222222222       '
              '0000000000      222222222222       0000000000       " << endl;\n'
              '\t\tSetColor(12);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t 2::::222:::22     '
              '00:::::::::00    2::::222:::22     00:::::::::00    " << endl;\n'
              '\t\tSetColor(14);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t 2222     2::22   '
              '00:::::::::::00   2222     2::22   00:::::::::::00   " << '
              'endl;\n'
              '\t\tSetColor(13);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t          2::22   0:::0     '
              '0:::0            2::22   0:::0     0:::0   " << endl;\n'
              '\t\tSetColor(10);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t          2::22   0:::0     '
              '0:::0            2::22   0:::0     0:::0   " << endl;\n'
              '\t\tSetColor(12);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t    222:::::22    0:::0     '
              '0:::0      222:::::22    0:::0     0:::0   " << endl;\n'
              '\t\tSetColor(14);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t  22::::22        0:::0     '
              '0:::0    22::::22        0:::0     0:::0   " << endl;\n'
              '\t\tSetColor(9);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t 2::::2    2222   '
              '00:::::::::::00   2::::2    2222   00:::::::::::00   " << '
              'endl;\n'
              '\t\tSetColor(12);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t 2::::2222::::2    '
              '00:::::::::00    2::::2222::::2    00:::::::::00    " << endl;\n'
              '\t\tSetColor(8);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t 22222222222222     '
              '00000000000     22222222222222     00000000000      " << endl;\n'
              '\t\n'
              '}\n')

Fragment(uuid='NORMALIZED-001360',
         path='/New Year Congratulation/new_year.cpp',
         lineno=464,
         depth=2,
         type='function_decl',
         name='work_pushX',
         text='void work_pushX()\n'
              '{\n'
              '\tint j = 0;\n'
              '\tfor (j = 0;j < 50;j++) {\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tpushX(j);\n'
              '\t\tSetColor(15);\n'
              '\t\tcout << '
              '".:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:" '
              '<< endl;\n'
              '\t\tpushX(j);\n'
              '\t\tSetColor(14);\n'
              '\t\tcout << "            __,  ,__)            __,  ,__)      '
              '__, ,__)             " << endl;\n'
              '\t\tpushX(j);\n'
              '\t\tcout << "           (--|__| _ ,_ ,_      (--|\\ | _       '
              '(--\\ | _  _ ,_        " << endl;\n'
              '\t\tpushX(j);\n'
              '\t\tcout << "             _|  |(_||_)|_)(_|    _| '
              '\\|(/_(_|_)     \\|(/_(_||         " << endl;\n'
              '\t\tpushX(j);\n'
              '\t\tcout << "            (        |  |  ,_|   (              '
              '(__|                  " << endl;\n'
              '\t\tpushX(j);\n'
              '\t\tSetColor(15);\n'
              '\t\tcout << '
              '".:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:" '
              '<< endl;\n'
              '\t\ttext_2020();\n'
              '\t\tcout << endl;\n'
              '\t\tSetColor(11);\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t               .     .  .      '
              '+     .      .          .    " << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t         .        .      .     '
              '#       .           .         " << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t            .       .         '
              '###            .      .      ." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t        .       .    #:. . : '
              '##\'##:. .:#  .      .        " << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t               .      . '
              '*####*###*####*  .*      .     .   "<< endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t                *#:.    . : '
              '#*###*# : .    . : #*  .       ." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t       .              '
              '*#########*#########*        .        ." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t            .     *#:.  '
              '*####*###*####* . : #*   .       ." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t         .      .  '
              '\'#######\'\'##\'##\'\'#######\'               " << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t                     '
              '.\'##\'#####\'#####\'##\'           .      ." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t        .    \'#:. ...  . : '
              '##\'###\'###\'##:. ... .:#\'     ." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t          .      '
              '\'#######\'##\'#####\'##\'#######\'      .     ." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t        .    .      '
              '\'#####\'\'#######\'\'#####\'    .      ." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t                 .     \'      '
              '000      \'    .     .        ." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t           .          .   .   '
              '000     .        .       ." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\t\\t      ............ '
              '..........O000O.......... ..............." << endl;\n'
              '\t\tSleep(100);\t\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001361',
         path='/New Year Congratulation/new_year.cpp',
         lineno=509,
         depth=2,
         type='function_decl',
         name='congrats',
         text='void congrats()\n'
              '{\n'
              '\tsystem("cls");\n'
              '\t\n'
              '\t\tSetColor(12);\n'
              '\t\tcout << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t  '
              '.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:" '
              '<< endl;\n'
              '\t\tSetColor(14);\n'
              '\t\tcout << "\\t              __,  ,__)            __,  '
              ',__)      __, ,__)                         __,  ,__)            '
              '__,  ,__)      __, ,__)             " << endl;\n'
              '\t\tcout << "\\t             (--|__| _ ,_ ,_      (--|\\ | '
              '_       (--\\ | _  _ ,_                   (--|__| _ ,_ ,_      '
              '(--|\\ | _       (--\\ | _  _ ,_        " << endl;\n'
              '\t\tcout << "\\t               _|  |(_||_)|_)(_|    _| '
              '\\|(/_(_|_)     \\|(/_(_||                      _|  '
              '|(_||_)|_)(_|    _| \\|(/_(_|_)     \\|(/_(_||         " << '
              'endl;\n'
              '\t\tcout << "\\t              (        |  |  ,_|   '
              '(              (__|                            (        |  |  '
              ',_|   (              (__|                  " << endl;\n'
              '\t\tSetColor(12);\n'
              '\t\tcout << "\\t  '
              '.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:" '
              '<< endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << endl;\n'
              '\t\n'
              '\t\tSetColor(15);\n'
              '\t\tcout << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << endl;\n'
              '\tstring hello = "\\t\\t\\t\\t\\tDEAR FRIENDS AND SUPER FAMILY '
              'OF INHA UNIVERSITY. HAPPY NEW YEAR!!! \\n\\n\\n\\t\\t   I WISH '
              'YOUR 2020 TO BE THE BEST AND PRODUCTIVE YEAR IN YOUR LIFE!!! '
              '\\n\\n\\t\\t   THANKS TO EVERYBODY WHOM I MET IN 2019. YOU '
              'TAUGHT ME TO BE SMARTER , WISER, AND MOST IMPORTANTLY TO '
              'UNDERSTAND BETTER IN PEOPLE.\\n\\n\\t\\t   WRITE DOWN YOUR '
              'GOALS, DO SOMETHING YOU BELIEVE IN, READ MORE BOOKS, AVOID TIME '
              'WASTERS, LOOK FOR MEANINGFUL PEOPLE AND '
              'RELATIONSHIPS.\\n\\n\\t\\t   AND I GUARANTEE YOUR 2020 WILL BE '
              'UNFORGETTABLE AND '
              'MEANINGFUL!\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tRUSTAM_Z\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n";\n'
              '\tint x = 0;\n'
              "\twhile (hello[x] != '\\0')\n"
              '\t{\n'
              '\t\tcout << hello[x];\n'
              '\t\tSleep(100);\n'
              '\t\tx++;\n'
              '\t};\n'
              '\t\n'
              '}\n')

Fragment(uuid='NORMALIZED-001362',
         path='/New Year Congratulation/new_year.cpp',
         lineno=543,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tsystem("pause");\n'
              '\tnumbers();\n'
              '\tsystem("cls");\n'
              '\t\n'
              '\twork_pushX();\n'
              '\t\t\n'
              '\tcongrats();\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001363',
         path='/New Year Congratulation/only_numbers.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /New Year Congratulation/only_numbers.cpp\n'
              '  Functions: main1, numbers_view\n'
              '  Using declarations: setw\n')

Fragment(uuid='NORMALIZED-001364',
         path='/New Year Congratulation/only_numbers.cpp',
         lineno=6,
         depth=2,
         type='using_declaration',
         name='setw',
         text='')

Fragment(uuid='NORMALIZED-001365',
         path='/New Year Congratulation/only_numbers.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001366',
         path='/New Year Congratulation/only_numbers.cpp',
         lineno=8,
         depth=2,
         type='function_decl',
         name='numbers_view',
         text='')

Fragment(uuid='NORMALIZED-001367',
         path='/New Year Congratulation/only_numbers.cpp',
         lineno=10,
         depth=2,
         type='function_decl',
         name='main1',
         text='int main1()\n{\n\tnumbers_view();\n\n\treturn 0;\n}\n')

Fragment(uuid='NORMALIZED-001368',
         path='/New Year Congratulation/only_numbers.cpp',
         lineno=17,
         depth=2,
         type='function_decl',
         name='numbers_view',
         text='void numbers_view()\n'
              '{\n'
              '\tint time = 10;\n'
              '\tSleep(1000);\n'
              '\twhile (time >= 0)\n'
              '\t{\n'
              '\t\tcout << "\\rTimer: " << setw(5) << time << flush;\n'
              '\t\tSleep(1000);\n'
              '\t\ttime--;\n'
              '\t\tconst char* num9[] =\n'
              '\t\t{\n'
              '\t\t\t"                     ",\n'
              '\t\t\t"      999999999      ",\n'
              '\t\t\t"    99:::::::::99    ",\n'
              '\t\t\t"  99:::::::::::::99  ",\n'
              '\t\t\t" 9::::::99999::::::9 ",\n'
              '\t\t\t" 9:::::9     9:::::9 ",\n'
              '\t\t\t" 9:::::9     9:::::9 ",\n'
              '\t\t\t"  9:::::99999::::::9 ",\n'
              '\t\t\t"   99::::::::::::::9 ",\n'
              '\t\t\t"     99999::::::::9  ",\n'
              '\t\t\t"          9::::::9   ",\n'
              '\t\t\t"         9::::::9    ",\n'
              '\t\t\t"        9::::::9     ",\n'
              '\t\t\t"       9:::::9       ",\n'
              '\t\t\t"      9:::::9        ",\n'
              '\t\t\t"     9999999         ", NULL\n'
              '\t\t};\n'
              '\t\tconst char* num8[] =\n'
              '\t\t{\n'
              '\t\t\t"                     ",\n'
              '\t\t\t"      888888888      ",\n'
              '\t\t\t"    88:::::::::88    ",\n'
              '\t\t\t"  88:::::::::::::88  ",\n'
              '\t\t\t" 8::::::88888::::::8 ",\n'
              '\t\t\t" 8:::::8     8:::::8 ",\n'
              '\t\t\t" 8:::::8     8:::::8 ",\n'
              '\t\t\t"  8:::::88888:::::8  ",\n'
              '\t\t\t"   8:::::::::::::8   ",\n'
              '\t\t\t"  8:::::88888:::::8  ",\n'
              '\t\t\t" 8:::::8     8:::::8 ",\n'
              '\t\t\t" 8:::::8     8:::::8 ",\n'
              '\t\t\t" 8::::::88888::::::8 ",\n'
              '\t\t\t"  88:::::::::::::88  ",\n'
              '\t\t\t"    88:::::::::88    ",\n'
              '\t\t\t"      888888888      ", NULL\n'
              '\t\t};\n'
              '\t\tconst char* num7[] =\n'
              '\t\t{\n'
              '\t\t\t"                     ",\n'
              '\t\t\t" 77777777777777777777",\n'
              '\t\t\t" 7::::::::::::::::::7",\n'
              '\t\t\t" 7::::::::::::::::::7",\n'
              '\t\t\t" 777777777777:::::::7",\n'
              '\t\t\t"            7::::::7 ",\n'
              '\t\t\t"           7::::::7  ",\n'
              '\t\t\t"          7::::::7   ",\n'
              '\t\t\t"         7::::::7    ",\n'
              '\t\t\t"        7::::::7     ",\n'
              '\t\t\t"       7::::::7      ",\n'
              '\t\t\t"      7::::::7       ",\n'
              '\t\t\t"     7::::::7        ",\n'
              '\t\t\t"    7::::::7         ",\n'
              '\t\t\t"   7::::::7          ",\n'
              '\t\t\t"  77777777           ",NULL\n'
              '\t\t};\n'
              '\t\tconst char* num6[] =\n'
              '\t\t{\n'
              '\t\t\t"                     ",\n'
              '\t\t\t"         66666666    ",\n'
              '\t\t\t"        6::::::6     ",\n'
              '\t\t\t"       6::::::6      ",\n'
              '\t\t\t"      6::::::6       ",\n'
              '\t\t\t"     6::::::6        ",\n'
              '\t\t\t"    6::::::6         ",\n'
              '\t\t\t"   6::::::::66666    ",\n'
              '\t\t\t"  6::::::::::::::6   ",\n'
              '\t\t\t" 6::::::66666:::::6  ",\n'
              '\t\t\t" 6:::::6     6:::::6 ",\n'
              '\t\t\t" 6:::::6     6:::::6 ",\n'
              '\t\t\t" 6::::::66666::::::6 ",\n'
              '\t\t\t"  66:::::::::::::66  ",\n'
              '\t\t\t"    66:::::::::66    ",\n'
              '\t\t\t"      666666666      ",NULL\n'
              '\t\t};\n'
              '\t\tconst char* num5[] =\n'
              '\t\t{\n'
              '\t\t\t"                     ",\n'
              '\t\t\t" 555555555555555555  ",\n'
              '\t\t\t" 5::::::::::::::::5  ",\n'
              '\t\t\t" 5:::::555555555555  ",\n'
              '\t\t\t" 5:::::5             ",\n'
              '\t\t\t" 5:::::5             ",\n'
              '\t\t\t" 5:::::5555555555    ",\n'
              '\t\t\t" 5:::::::::::::::5   ",\n'
              '\t\t\t" 555555555555:::::5  ",\n'
              '\t\t\t"             5:::::5 ",\n'
              '\t\t\t"             5:::::5 ",\n'
              '\t\t\t" 5555555     5:::::5 ",\n'
              '\t\t\t" 5::::::55555::::::5 ",\n'
              '\t\t\t"  55:::::::::::::55  ",\n'
              '\t\t\t"    55:::::::::55    ",\n'
              '\t\t\t"      555555555      ",NULL\n'
              '\t\t};\n'
              '\t\tconst char* num4[] =\n'
              '\t\t{\n'
              '\t\t\t"                     ",\n'
              '\t\t\t"        444444444    ",\n'
              '\t\t\t"       4::::::::4    ",\n'
              '\t\t\t"      4:::::::::4    ",\n'
              '\t\t\t"     4::::44::::4    ",\n'
              '\t\t\t"    4::::4 4::::4    ",\n'
              '\t\t\t"   4::::4  4::::4    ",\n'
              '\t\t\t"  4::::4   4::::4    ",\n'
              '\t\t\t" 4::::444444::::444  ",\n'
              '\t\t\t" 4::::::::::::::::4  ",\n'
              '\t\t\t" 4444444444:::::444  ",\n'
              '\t\t\t"           4::::4    ",\n'
              '\t\t\t"           4::::4    ",\n'
              '\t\t\t"         44::::::44  ",\n'
              '\t\t\t"         4::::::::4  ",\n'
              '\t\t\t"         4444444444  ",NULL\n'
              '\t\t};\n'
              '\t\tconst char* num3[] =\n'
              '\t\t{\n'
              '\t\t\t"                     ",\n'
              '\t\t\t" 3333333333333333    ",\n'
              '\t\t\t" 3:::::::::::::::33  ",\n'
              '\t\t\t" 3::::::33333::::::3 ",\n'
              '\t\t\t" 3333333     3:::::3 ",\n'
              '\t\t\t"             3:::::3 ",\n'
              '\t\t\t"             3:::::3 ",\n'
              '\t\t\t"     33333333:::::3  ",\n'
              '\t\t\t"     3:::::::::::3   ",\n'
              '\t\t\t"     33333333:::::3  ",\n'
              '\t\t\t"             3:::::3 ",\n'
              '\t\t\t"             3:::::3 ",\n'
              '\t\t\t" 3333333     3:::::3 ",\n'
              '\t\t\t" 3::::::33333::::::3 ",\n'
              '\t\t\t" 3:::::::::::::::33  ",\n'
              '\t\t\t"  333333333333333    ",NULL\n'
              '\t\t};\n'
              '\t\tconst char* num2[] =\n'
              '\t\t{\n'
              '\t\t\t"                     ",\n'
              '\t\t\t" 222222222222222     ",\n'
              '\t\t\t" 2:::::::::::::::22  ",\n'
              '\t\t\t" 2::::::222222:::::2 ",\n'
              '\t\t\t" 2222222     2:::::2 ",\n'
              '\t\t\t"             2:::::2 ",\n'
              '\t\t\t"             2:::::2 ",\n'
              '\t\t\t"          2222::::2  ",\n'
              '\t\t\t"     22222::::::22   ",\n'
              '\t\t\t"   22::::::::222     ",\n'
              '\t\t\t"  2:::::22222        ",\n'
              '\t\t\t" 2:::::2             ",\n'
              '\t\t\t" 2:::::2       222222",\n'
              '\t\t\t" 2::::::2222222:::::2",\n'
              '\t\t\t" 2::::::::::::::::::2",\n'
              '\t\t\t" 22222222222222222222",NULL\n'
              '\t\t};\n'
              '\t\tconst char* num1[] =\n'
              '\t\t{\n'
              '\t\t\t"                     ",\n'
              '\t\t\t"       1111111       ",\n'
              '\t\t\t"      1::::::1       ",\n'
              '\t\t\t"     1:::::::1       ",\n'
              '\t\t\t"     111:::::1       ",\n'
              '\t\t\t"        1::::1       ",\n'
              '\t\t\t"        1::::1       ",\n'
              '\t\t\t"        1::::1       ",\n'
              '\t\t\t"        1::::l       ",\n'
              '\t\t\t"        1::::l       ",\n'
              '\t\t\t"        1::::l       ",\n'
              '\t\t\t"        1::::l       ",\n'
              '\t\t\t"     111::::::111    ",\n'
              '\t\t\t"     1::::::::::1    ",\n'
              '\t\t\t"     1::::::::::1    ",\n'
              '\t\t\t"     111111111111    ",NULL\n'
              '\t\t};\n'
              '\t\tconst char* num0[] =\n'
              '\t\t{\n'
              '\t\t\t"                     ",\n'
              '\t\t\t"      000000000      ",\n'
              '\t\t\t"    00:::::::::00    ",\n'
              '\t\t\t"  00:::::::::::::00  ",\n'
              '\t\t\t" 0:::::::000:::::::0 ",\n'
              '\t\t\t" 0::::::0   0::::::0 ",\n'
              '\t\t\t" 0:::::0     0:::::0 ",\n'
              '\t\t\t" 0:::::0     0:::::0 ",\n'
              '\t\t\t" 0:::::0 000 0:::::0 ",\n'
              '\t\t\t" 0:::::0     0:::::0 ",\n'
              '\t\t\t" 0:::::0     0:::::0 ",\n'
              '\t\t\t" 0::::::0   0::::::0 ",\n'
              '\t\t\t" 0:::::::000:::::::0 ",\n'
              '\t\t\t"  00:::::::::::::00  ",\n'
              '\t\t\t"    00:::::::::00    ",\n'
              '\t\t\t"      000000000      ",NULL\n'
              '\t\t};\n'
              '\n'
              '\t\tswitch (time) {\n'
              '\t\tcase 0:\n'
              '\t\t\tcout << num9;\n'
              '\t\t\tbreak;\n'
              '\t\tcase 1:\n'
              '\t\t\tcout << num8;\n'
              '\t\t\tbreak;\n'
              '\t\tcase 2:\n'
              '\t\t\tcout<<num7;\n'
              '\t\t\tbreak;\n'
              '\t\tcase 3:\n'
              '\t\t  cout<<num6;\n'
              '\t\t\tbreak;\n'
              '\t\tcase 4:\n'
              '\t\t\tcout<<num5;\n'
              '\t\t\tbreak;\n'
              '\t\tcase 5:\n'
              '\t\t\tcout<<num4;\n'
              '\t\t\tbreak;\n'
              '\t\tcase 6:\n'
              '\t\t\tcout<<num3;\n'
              '\t\t\tbreak;\n'
              '\t\tcase 7:\n'
              '\t\t\tcout<<num2;\n'
              '\t\t\tbreak;\n'
              '\t\tcase 8:\n'
              '\t\t\tcout<<num1;\n'
              '\t\t\tbreak;\n'
              '\t\tcase 9:\n'
              '\t\t\tcout<<num0;\n'
              '\t\t\tbreak;\n'
              '\t\tdefault:\n'
              '\t\t\t\n'
              '\t\t\tbreak;\n'
              '\t\t}\n'
              '\t}\n'
              '\n'
              '\n'
              '\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-001369',
         path='/OOP1-Lab1/Circle.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab1/Circle.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001370',
         path='/OOP1-Lab1/Circle.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001371',
         path='/OOP1-Lab1/Circle.cpp',
         lineno=8,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tcout << "\\t\\tC++ program to Calculate Area and '
              'Circumference of Circle.\\n";\n'
              '\tfloat R, Area, Circumference;\n'
              '\tcout << "Please enter the Radius of Circle: ";\n'
              '\tcin >> R;\n'
              '\tif (R > 0)\n'
              '\t{\n'
              '\t\tArea = 3.14 * R * R;\n'
              '\t\tCircumference = 2 * 3.14 * R;\n'
              '\t\tcout << "Area of Circle is " << Area << ";" << endl;\n'
              '\t\tcout << "Circumference of Circle is " << Circumference << '
              '";" << endl;\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << "Negative numbers cannot be applied !!!" << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001372',
         path='/OOP1-Lab1/EquilateralTriangle.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab1/EquilateralTriangle.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001373',
         path='/OOP1-Lab1/EquilateralTriangle.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001374',
         path='/OOP1-Lab1/EquilateralTriangle.cpp',
         lineno=9,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tcout << "\\t\\tC++ program to Calculate Area of Equilateral '
              'Triangle.\\n ";\n'
              '\tfloat a, Area;\n'
              '\tcout << "Please enter the value for the side of Triangle: ";\n'
              '\tcin >> a;\n'
              '\tif (a > 0)\n'
              '\t{\n'
              '\t\tArea = sqrt(2) * a * a * 0.25;\n'
              '\t\tcout << "The Area of this triangle is " << Area << ";" << '
              'endl;\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << "The sides of Triangle cannot be negative numbers ! '
              '" << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001375',
         path='/OOP1-Lab1/README.md',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Operators\n'
              '\n'
              '1. C++ Program to Calculate Area and Circumference of Circle.\n'
              '2. C++ Program to Calculate Area of Scalene Triangle.\n'
              '3. C++ Program to Calculate Area of Equilateral Triangle.\n'
              '4. C++ Program to Calculate Area of Right angle Triangle.\n'
              '5. C++ Program to Calculate Area of Rectangle.\n'
              '6. C++ Program to Calculate Area of Square.')

Fragment(uuid='NORMALIZED-001376',
         path='/OOP1-Lab1/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Operators\n')

Fragment(uuid='NORMALIZED-001377',
         path='/OOP1-Lab1/Rectangle.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab1/Rectangle.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001378',
         path='/OOP1-Lab1/Rectangle.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001379',
         path='/OOP1-Lab1/Rectangle.cpp',
         lineno=9,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tcout << "\\t\\tC++ program to Calculate Area of Rectangle. " '
              '<< endl;\n'
              '\tfloat a, b, Area;\n'
              '\tcout << "Please enter the length of Rectangle: ";\n'
              '\tcin >> a;\n'
              '\tcout << "Please enter the width of Rectangle: ";\n'
              '\tcin >> b;\n'
              '\tif (a > 0 && b > 0)\n'
              '\t{\n'
              '\t\tArea = a * b;\n'
              '\t\tcout << "The area of Rectangle is " << Area << ";" << '
              'endl;\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << "The sides of Rectangle cannot be negative numbers '
              '!" << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001380',
         path='/OOP1-Lab1/RightTriangle.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab1/RightTriangle.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001381',
         path='/OOP1-Lab1/RightTriangle.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001382',
         path='/OOP1-Lab1/RightTriangle.cpp',
         lineno=8,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tcout << "\\t\\tC++ program to Calculate Area of Right angle '
              'Triangle.\\n ";\n'
              '\tfloat a, b, Area;\n'
              '\tcout << "Please enter the value for the first cathet of '
              'Triangle: ";\n'
              '\tcin >> a;\n'
              '\tcout << "Please enter the value for the second cathet of '
              'Triangle: ";\n'
              '\tcin >> b;\n'
              '\tif (a > 0 && b > 0)\n'
              '\t{\n'
              '\t\tArea = b * a * 0.5;\n'
              '\t\tcout << "The Area of this Triangle is " << Area << ";" << '
              'endl;\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << "The sides of Triangle cannot be negative numbers ! '
              '" << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001383',
         path='/OOP1-Lab1/ScaleneTriangle.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab1/ScaleneTriangle.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001384',
         path='/OOP1-Lab1/ScaleneTriangle.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001385',
         path='/OOP1-Lab1/ScaleneTriangle.cpp',
         lineno=9,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tcout << "\\t\\tC++ program to Calculate Area of Scalene '
              'Triangle.\\n";\n'
              '\tfloat a, b, c, S, Area;\n'
              '\tcout << "Please enter the values for the first side of '
              'Triangle: ";\n'
              '\tcin >> a;\n'
              '\tcout << "Please enter the values for the second side of '
              'Triangle: ";\n'
              '\tcin >> b;\n'
              '\tcout << "Please enter the values for the third side of '
              'Triangle: ";\n'
              '\tcin >> c;\n'
              '\tif (a > 0 && b > 0 && c > 0)\n'
              '\t{\n'
              '\t\tif (c < a + b && a < b + c && b < a + c)\n'
              '\t\t{\n'
              '\t\t\tS = (a + b + c) / 2;\n'
              '\t\t\tArea = sqrt(S * (S - a) * (S - b) * (S - c));\n'
              '\t\t\tcout << "The Area of Triangle is " << Area << endl;\n'
              '\t\t\treturn 0;\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tcout << "This triangle is wrong try another values." << '
              'endl;\n'
              '\t\t\treturn 0;\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << "The sides of Triangle cannot be negative numbers!" '
              '<< endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001386',
         path='/OOP1-Lab1/Square.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab1/Square.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001387',
         path='/OOP1-Lab1/Square.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001388',
         path='/OOP1-Lab1/Square.cpp',
         lineno=9,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tcout << "\\t\\tC++ program to Calculate Area of Square." << '
              'endl;\n'
              '\tfloat a, Area;\n'
              '\tcout << "Please enter the value for the side of Square: ";\n'
              '\tcin >> a;\n'
              '\tif (a > 0)\n'
              '\t{\n'
              '\t\tArea = a * a;\n'
              '\t\tcout << "The area of Square is " << Area << ";" << endl;\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << "Negetive numbers cannot be applied !!!" << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001389',
         path='/OOP1-Lab2/Greatestnumber.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab2/Greatestnumber.cpp\n  Functions: main2\n')

Fragment(uuid='NORMALIZED-001390',
         path='/OOP1-Lab2/Greatestnumber.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001391',
         path='/OOP1-Lab2/Greatestnumber.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main2',
         text='int main2()\n'
              '{\n'
              '\tfloat a, b, c;\n'
              '\tcout << "Enter the 3 numbres: ";\n'
              '\tcin >> a >> b >> c;\n'
              '\tif (a >= b && a >= c)\n'
              '\t\tcout << "The greatest number is " << a << ";" << endl;\n'
              '\tif (b >= a && b >= c)\n'
              '\t\tcout << "The greatest number is " << b << ";" << endl;\n'
              '\tif (c >= a && c >= b)\n'
              '\t\tcout << "The greatest number is " << c << ";" << endl;\n'
              '\telse if (a == b == c)\n'
              '\t\tcout << "All numbers are equal." << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001392',
         path='/OOP1-Lab2/LeapYear.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab2/LeapYear.cpp\n  Functions: main4\n')

Fragment(uuid='NORMALIZED-001393',
         path='/OOP1-Lab2/LeapYear.cpp',
         lineno=4,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001394',
         path='/OOP1-Lab2/LeapYear.cpp',
         lineno=6,
         depth=2,
         type='function_decl',
         name='main4',
         text='int main4()\n'
              '{\n'
              '\tint year;\n'
              '\tcout << "Enter a Year: ";\n'
              '\tcin >> year;\n'
              '\tif (year % 4 == 0)\n'
              '\t{\n'
              '\t\tif (year % 100 == 0)\n'
              '\t\t{\n'
              '\t\t\tif (year % 400 == 0)\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << "Given " << year << " year is a leap." << '
              'endl;\n'
              '\t\t\t}\n'
              '\t\t\telse\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << "Given " << year << " year isn\'t a leap." << '
              'endl;\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tcout << "Given " << year << " year is a leap year." << '
              'endl;\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << "Given " << year << " year isn\'t a leap." << '
              'endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001395',
         path='/OOP1-Lab2/OddEven.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab2/OddEven.cpp\n  Functions: main1\n')

Fragment(uuid='NORMALIZED-001396',
         path='/OOP1-Lab2/OddEven.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001397',
         path='/OOP1-Lab2/OddEven.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main1',
         text='int main1()\n'
              '{\n'
              '\tint a;\n'
              '\tcout << "Enter the number: ";\n'
              '\tcin >> a;\n'
              '\tif (a % 2 == 0)\n'
              '\t\tcout << "Your number is Even!" << endl;\n'
              '\telse\n'
              '\t\tcout << "Your number is Odd!" << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001398',
         path='/OOP1-Lab2/README.md',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Control Structures - if/else\n'
              '\n'
              '1. Program to convert temperature from degree centigrade to '
              'Fahrenheit.\n'
              '2. Program to show swap of two no’s without using third '
              'variable.\n'
              '3. Program to find greatest in 3 numbers.\n'
              '4. Program to find that entered year is leap year or not.\n'
              '5. Program to find whether given no is even or odd.')

Fragment(uuid='NORMALIZED-001399',
         path='/OOP1-Lab2/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Control Structures - if/else\n')

Fragment(uuid='NORMALIZED-001400',
         path='/OOP1-Lab2/Swapping.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab2/Swapping.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001401',
         path='/OOP1-Lab2/Swapping.cpp',
         lineno=3,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001402',
         path='/OOP1-Lab2/Swapping.cpp',
         lineno=4,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tfloat a, b;\n'
              '\tcout << "Enter first number: ";\n'
              '\tcin >> a;\n'
              '\tcout << "Enter second number: ";\n'
              '\tcin >> b;\n'
              '\ta = a + b;\n'
              '\tb = a - b;\n'
              '\ta = a - b;\n'
              '\tcout << "We have swapped your numbers, result in below." << '
              'endl;\n'
              '\tcout << "a = " << a << endl;\n'
              '\tcout << "b = " << b << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001403',
         path='/OOP1-Lab2/Temperature.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab2/Temperature.cpp\n  Functions: main3\n')

Fragment(uuid='NORMALIZED-001404',
         path='/OOP1-Lab2/Temperature.cpp',
         lineno=2,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001405',
         path='/OOP1-Lab2/Temperature.cpp',
         lineno=4,
         depth=2,
         type='function_decl',
         name='main3',
         text='int main3()\n'
              '{\n'
              '\tfloat C, F;\n'
              '\tcout << "Enter your temperature in Celcius: ";\n'
              '\tcin >> C;\n'
              '\tF = C * 1.8 + 32;\n'
              '\tcout << "In Celcius: " << C << "*C ;" << endl;\n'
              '\tcout << "In Fahrenheit: " << F << "F ;" << endl;\n'
              '\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001406',
         path='/OOP1-Lab3/Digits.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab3/Digits.cpp\n  Functions: main3\n')

Fragment(uuid='NORMALIZED-001407',
         path='/OOP1-Lab3/Digits.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001408',
         path='/OOP1-Lab3/Digits.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main3',
         text='int main3() {\n'
              '\tint a, sum = 0;\n'
              '\tcout << "Please enter the number: ";\n'
              '\tcin >> a;\n'
              '\twhile (a != 0) {\n'
              '\t\tsum = sum + a % 10;\n'
              '\t\ta = a / 10;\n'
              '\t}\n'
              '\tcout <<"The sum of digits of given number is "<< sum <<";"<< '
              'endl;\n'
              '\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001409',
         path='/OOP1-Lab3/Fibonacci.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab3/Fibonacci.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001410',
         path='/OOP1-Lab3/Fibonacci.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001411',
         path='/OOP1-Lab3/Fibonacci.cpp',
         lineno=8,
         depth=2,
         type='function_decl',
         name='main',
         text='int main() {\n'
              '\tint a = 0, b = 1, sum = 0;\n'
              '\tcout << a << endl;\n'
              '\tcout << b << endl;\n'
              '\twhile (b < 100) {\n'
              '\t\tsum = a + b;\n'
              '\t\ta = b;\n'
              '\t\tb = sum;\n'
              '\t\tif (b > 100) {\n'
              '\t\t\tbreak;\n'
              '\t\t}\n'
              '\t\tcout << sum << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001412',
         path='/OOP1-Lab3/Operators.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab3/Operators.cpp\n  Functions: main8\n')

Fragment(uuid='NORMALIZED-001413',
         path='/OOP1-Lab3/Operators.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001414',
         path='/OOP1-Lab3/Operators.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main8',
         text='int main8() {\n'
              '\tchar op;\n'
              '\tfloat num1, num2;\n'
              '\tcout << "Enter the 1st operand: ";\n'
              '\tcin >> num1;\n'
              '\tcout << "Enter operator either + or - or * or / : ";\n'
              '\tcin >> op;\n'
              '\tcout << "Enter 2nd operand: ";\n'
              '\tcin >> num2;\n'
              '\tcout << endl;\n'
              '\tswitch (op)\n'
              '\t{\n'
              "\tcase '+':\n"
              '\t\tcout << "Result is "<< num1 + num2 << endl;\n'
              '\t\tbreak;\n'
              "\tcase '-':\n"
              '\t\tcout << "Result is " << num1 - num2 << endl;\n'
              '\t\tbreak;\n'
              "\tcase '*':\n"
              '\t\tcout << "Result is " << num1 * num2 << endl;\n'
              '\t\tbreak;\n'
              "\tcase '/':\n"
              '\t\tcout << "Result is " << num1 / num2 << endl;\n'
              '\t\tbreak;\n'
              '\tdefault:\n'
              '\t\tcout << "Error! Operator is not correct";\n'
              '\t\tbreak;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001415',
         path='/OOP1-Lab3/Prime.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab3/Prime.cpp\n  Functions: main4\n')

Fragment(uuid='NORMALIZED-001416',
         path='/OOP1-Lab3/Prime.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001417',
         path='/OOP1-Lab3/Prime.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main4',
         text='int main4() {\n'
              '\tint num, j = 0;\n'
              '\tcout << "Enter the number: ";\n'
              '\tcin >> num;\n'
              '\tfor (int i = 1; i <= num; i++)\n'
              '\t{\n'
              '\t\tif ((num % i) == 0)\n'
              '\t\t{\n'
              '\t\t\tj++;\n'
              '\t\t}\n'
              '\t}\n'
              '\tif (j == 2)\n'
              '\t\tcout << num << " is a prime number." << endl;\n'
              '\telse\n'
              '\t\tcout << num << " is not a prime number." << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001418',
         path='/OOP1-Lab3/README.md',
         lineno=1,
         depth=10,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Control Structures - Loop/Switch\n')

Fragment(uuid='NORMALIZED-001419',
         path='/OOP1-Lab3/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Control Structures - Loop/Switch\n')

Fragment(uuid='NORMALIZED-001420',
         path='/OOP1-Lab3/README.md',
         lineno=2,
         depth=11,
         type='documentation',
         name='',
         text='\n1. Program to calculate sum of numbers from m to n.')

Fragment(uuid='NORMALIZED-001421',
         path='/OOP1-Lab3/README.md',
         lineno=3,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '    - Hint: Input two numbers m and n. Find sum of all numbers '
              'from m to n. For example m=3 and n=8 then sum will be 3 + 4 + 5 '
              '+ 6 + 7 + 8 = 33.')

Fragment(uuid='NORMALIZED-001422',
         path='/OOP1-Lab3/README.md',
         lineno=4,
         depth=11,
         type='documentation',
         name='',
         text='\n2. Program to print Fibonacci series up to 100. ')

Fragment(uuid='NORMALIZED-001423',
         path='/OOP1-Lab3/README.md',
         lineno=5,
         depth=11,
         type='documentation',
         name='',
         text='\n    - Hint: Fibonacci Series is 1, 1, 2, 3, 5, 8, 13, 21, ....')

Fragment(uuid='NORMALIZED-001424',
         path='/OOP1-Lab3/README.md',
         lineno=6,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '3. Program to input a number and then calculate sum of its '
              'digits.')

Fragment(uuid='NORMALIZED-001425',
         path='/OOP1-Lab3/README.md',
         lineno=7,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '    - Hint: let number = 562. Then you should print 5 + 6 + 2 = '
              '13.')

Fragment(uuid='NORMALIZED-001426',
         path='/OOP1-Lab3/README.md',
         lineno=8,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '4. Program to find whether given number is a prime number or '
              'not.')

Fragment(uuid='NORMALIZED-001427',
         path='/OOP1-Lab3/README.md',
         lineno=9,
         depth=11,
         type='documentation',
         name='',
         text='\n5. Program to display sum of series 1 + 1/2 + 1/3 + ... + 1/n.')

Fragment(uuid='NORMALIZED-001428',
         path='/OOP1-Lab3/README.md',
         lineno=10,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '6. Program to display series and find sum of 1 + 3 + 5 + ... + '
              'n.')

Fragment(uuid='NORMALIZED-001429',
         path='/OOP1-Lab3/README.md',
         lineno=11,
         depth=11,
         type='documentation',
         name='',
         text='\n7. Program to use switch statement. Display Monday to Sunday.')

Fragment(uuid='NORMALIZED-001430',
         path='/OOP1-Lab3/README.md',
         lineno=12,
         depth=11,
         type='documentation',
         name='',
         text='\n8. Program to display arithmetic operator using switch case')

Fragment(uuid='NORMALIZED-001431',
         path='/OOP1-Lab3/Sum1.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab3/Sum1.cpp\n  Functions: main5\n')

Fragment(uuid='NORMALIZED-001432',
         path='/OOP1-Lab3/Sum1.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001433',
         path='/OOP1-Lab3/Sum1.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main5',
         text='int main5() {\n'
              '\tint n;\n'
              '\tfloat sum = 0;\n'
              '\tcout << "Enter the value of n: ";\n'
              '\tcin >> n;\n'
              '\tfor (int i = 1;i <= n;i++)\n'
              '\t\tsum += 1 / i;\n'
              '\tcout << "Sum is : " << sum << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001434',
         path='/OOP1-Lab3/Sum2.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab3/Sum2.cpp\n  Functions: main6\n')

Fragment(uuid='NORMALIZED-001435',
         path='/OOP1-Lab3/Sum2.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001436',
         path='/OOP1-Lab3/Sum2.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main6',
         text='int main6() {\n'
              '\tint n, sum = 0;\n'
              '\tcout << "Enter the value of n: ";\n'
              '\tcin >> n;\n'
              '\tfor (int i = 1;i <= n;i=i+2)\n'
              '\t\tsum += i;\n'
              '\tcout << "Sum is : " << sum << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001437',
         path='/OOP1-Lab3/Weekdays.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab3/Weekdays.cpp\n  Functions: main7\n')

Fragment(uuid='NORMALIZED-001438',
         path='/OOP1-Lab3/Weekdays.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001439',
         path='/OOP1-Lab3/Weekdays.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main7',
         text='int main7() {\n'
              '\tint day ;\n'
              '\tcout << "Enter the number from 1 to 7: ";\n'
              '\tcin >> day;\n'
              '\tswitch (day) {\n'
              '\tcase 1:\n'
              '\t\tcout << "Monday" << endl;\n'
              '\t\tbreak;\n'
              '\tcase 2:\n'
              '\t\tcout << "Tuesday" << endl;\n'
              '\t\tbreak;\n'
              '\tcase 3:\n'
              '\t\tcout << "Wednesday" << endl;\n'
              '\t\tbreak;\n'
              '\tcase 4:\n'
              '\t\tcout << "Thursday" << endl;\n'
              '\t\tbreak;\n'
              '\tcase 5:\n'
              '\t\tcout << "Friday" << endl;\n'
              '\t\tbreak;\n'
              '\tcase 6:\n'
              '\t\tcout << "Saturday" << endl;\n'
              '\t\tbreak;\n'
              '\tcase 7:\n'
              '\t\tcout << "Sunday" << endl;\n'
              '\t\tbreak;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001440',
         path='/OOP1-Lab3/mn.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab3/mn.cpp\n  Functions: main1\n')

Fragment(uuid='NORMALIZED-001441',
         path='/OOP1-Lab3/mn.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001442',
         path='/OOP1-Lab3/mn.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main1',
         text='int main1() {\n'
              '\tint m, n, sum = 0;\n'
              '\tcout << "Enter the 1st number: ";\n'
              '\tcin >> n;\n'
              '\tcout << "Enter the 2nd number: ";\n'
              '\tcin >> m;\n'
              '\tif (n < m) {\n'
              '\t\tfor (int x = n; x <= m; x++) {\n'
              '\t\t\tsum += x;\n'
              '\t\t}\n'
              '\t\tcout << "The sum of the integers between the two numbers is '
              '" << sum << ";" << endl;\n'
              '\t}\n'
              '\telse if (m < n)\n'
              '\t\tcout << "Invalid numbers! Please try again." << endl;\n'
              '\telse if (m == n) {\n'
              '\t\tsum = n;\n'
              '\t\tcout << "The sum is " << sum << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001443',
         path='/OOP1-Lab4/README.md',
         lineno=1,
         depth=7,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Control Structure - Nested Loop\n'
              '\n'
              '1. Program to print stars Sequence1.\n'
              '    ```\n'
              '    *\n'
              '    **\n'
              '    ***')

Fragment(uuid='NORMALIZED-001444',
         path='/OOP1-Lab4/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Control Structure - Nested Loop\n')

Fragment(uuid='NORMALIZED-001445',
         path='/OOP1-Lab4/README.md',
         lineno=7,
         depth=7,
         type='documentation',
         name='',
         text='\n    ****')

Fragment(uuid='NORMALIZED-001446',
         path='/OOP1-Lab4/README.md',
         lineno=8,
         depth=7,
         type='documentation',
         name='',
         text='\n    *****')

Fragment(uuid='NORMALIZED-001447',
         path='/OOP1-Lab4/README.md',
         lineno=9,
         depth=7,
         type='documentation',
         name='',
         text='\n'
              '    ```\n'
              '2. Program to print stars Sequence2.\n'
              '    ```\n'
              '        *\n'
              '       ** \n'
              '      ***')

Fragment(uuid='NORMALIZED-001448',
         path='/OOP1-Lab4/README.md',
         lineno=15,
         depth=7,
         type='documentation',
         name='',
         text='\n     ****')

Fragment(uuid='NORMALIZED-001449',
         path='/OOP1-Lab4/README.md',
         lineno=16,
         depth=7,
         type='documentation',
         name='',
         text='\n    *****')

Fragment(uuid='NORMALIZED-001450',
         path='/OOP1-Lab4/README.md',
         lineno=17,
         depth=7,
         type='documentation',
         name='',
         text='\n'
              '    ```\n'
              '3. Program to print star Sequences3.\n'
              '    ```\n'
              '      *\n'
              '     ***')

Fragment(uuid='NORMALIZED-001451',
         path='/OOP1-Lab4/README.md',
         lineno=22,
         depth=7,
         type='documentation',
         name='',
         text='\n    *****')

Fragment(uuid='NORMALIZED-001452',
         path='/OOP1-Lab4/README.md',
         lineno=23,
         depth=7,
         type='documentation',
         name='',
         text='\n'
              '    ```\n'
              '4. Program to print Sequence4.\n'
              '    ```\n'
              '    *\n'
              '    **\n'
              '    ***')

Fragment(uuid='NORMALIZED-001453',
         path='/OOP1-Lab4/README.md',
         lineno=29,
         depth=7,
         type='documentation',
         name='',
         text='\n    ****')

Fragment(uuid='NORMALIZED-001454',
         path='/OOP1-Lab4/README.md',
         lineno=30,
         depth=7,
         type='documentation',
         name='',
         text='\n    *****')

Fragment(uuid='NORMALIZED-001455',
         path='/OOP1-Lab4/README.md',
         lineno=31,
         depth=7,
         type='documentation',
         name='',
         text='\n    *****')

Fragment(uuid='NORMALIZED-001456',
         path='/OOP1-Lab4/README.md',
         lineno=32,
         depth=7,
         type='documentation',
         name='',
         text='\n    ****')

Fragment(uuid='NORMALIZED-001457',
         path='/OOP1-Lab4/README.md',
         lineno=33,
         depth=7,
         type='documentation',
         name='',
         text='\n    ***')

Fragment(uuid='NORMALIZED-001458',
         path='/OOP1-Lab4/README.md',
         lineno=34,
         depth=7,
         type='documentation',
         name='',
         text='\n'
              '    **\n'
              '    *\n'
              '    ```\n'
              '5. Write a program to add first seven terms of the following '
              'series using for loop: `1/!1+ 2/!2 + 3/!3 + ...`')

Fragment(uuid='NORMALIZED-001459',
         path='/OOP1-Lab4/Source.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab4/Source.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001460',
         path='/OOP1-Lab4/Source.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001461',
         path='/OOP1-Lab4/Source.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tfor (int i = 1; i <= 5; i++)\n'
              '\t{\n'
              '\t\tfor (int j = 1; j <= i; j++)\n'
              '\t\t{\n'
              '\t\t\tcout << "*";\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001462',
         path='/OOP1-Lab4/Source1.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab4/Source1.cpp\n  Functions: main2\n')

Fragment(uuid='NORMALIZED-001463',
         path='/OOP1-Lab4/Source1.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001464',
         path='/OOP1-Lab4/Source1.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main2',
         text='int main2()\n'
              '{\n'
              '\tfor (int i = 1; i <= 5; i++)\n'
              '\t{\n'
              '\t\tfor (int j = 5; j >= 1; j--)\n'
              '\t\t{\n'
              '\t\t\tif (i >= j)\n'
              '\t\t\t\tcout << "*";\n'
              '\t\t\telse\n'
              '\t\t\t\tcout << " ";\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001465',
         path='/OOP1-Lab4/Source2.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab4/Source2.cpp\n  Functions: main3\n')

Fragment(uuid='NORMALIZED-001466',
         path='/OOP1-Lab4/Source2.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001467',
         path='/OOP1-Lab4/Source2.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main3',
         text='int main3()\n'
              '{\n'
              '\tfor (int i = 1; i <= 5; i += 2)\n'
              '\t{\n'
              '\t\tfor (int j = 3; j >= i; j -= 2)\n'
              '\t\t{\n'
              '\t\t\tcout << " ";\n'
              '\t\t}\n'
              '\n'
              '\t\tfor (int j = 1; j <= i; j++)\n'
              '\t\t{\n'
              '\t\t\tcout << "*";\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001468',
         path='/OOP1-Lab4/Source3.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab4/Source3.cpp\n  Functions: main4\n')

Fragment(uuid='NORMALIZED-001469',
         path='/OOP1-Lab4/Source3.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001470',
         path='/OOP1-Lab4/Source3.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main4',
         text='int main4()\n'
              '{\n'
              '\tfor (int i = 1; i <= 5; i++)\n'
              '\t{\n'
              '\t\tfor (int j = 1; j <= i; j++)\n'
              '\t\t{\n'
              '\t\t\tcout << "*";\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\tfor (int i = 1; i <= 5; i++)\n'
              '\t{\n'
              '\t\tfor (int j = 5; j >= i; j--)\n'
              '\t\t{\n'
              '\t\t\tcout << "*";\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001471',
         path='/OOP1-Lab4/Source4.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab4/Source4.cpp\n  Functions: main5\n')

Fragment(uuid='NORMALIZED-001472',
         path='/OOP1-Lab4/Source4.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001473',
         path='/OOP1-Lab4/Source4.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='main5',
         text='int main5()\n'
              '{\n'
              '\tfloat sum = 0, fact = 1;\n'
              '\tfor (int i = 1; i <= 7; i++)\n'
              '\t{\n'
              '\t\tfact = fact * i;\n'
              '\t\tsum += i / fact;\n'
              '\t}\n'
              '\tcout << "Sum is : " << sum << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001474',
         path='/OOP1-Lab5/README.md',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# Practical Lab Assignment\n'
              '\n'
              '1. Write a program to calculate area of a circle using '
              'functions.\n'
              '2. Write a program to swap two values using functions.\n'
              '3. Write a program to convert time to minutes using functions. '
              '(input 3 variables namely hours, minutes and seconds. Convert '
              'everything into minutes.)\n'
              '4. Write a program to sum the series up to n (Input n)')

Fragment(uuid='NORMALIZED-001475',
         path='/OOP1-Lab5/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment\n')

Fragment(uuid='NORMALIZED-001476',
         path='/OOP1-Lab5/Source.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab5/Source.cpp\n  Functions: area, main1\n')

Fragment(uuid='NORMALIZED-001477',
         path='/OOP1-Lab5/Source.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001478',
         path='/OOP1-Lab5/Source.cpp',
         lineno=9,
         depth=2,
         type='function_decl',
         name='area',
         text='float area(float radius)\n'
              '{ // function for calculating the area\n'
              '\tfloat area;\n'
              '\tarea = (atan(1) * 4) * (pow(radius, 2)); //"atan" is the '
              'function which is finding the PI=3.14\n'
              '\treturn area;\n'
              '} // end function "area"\n')

Fragment(uuid='NORMALIZED-001479',
         path='/OOP1-Lab5/Source.cpp',
         lineno=16,
         depth=2,
         type='function_decl',
         name='main1',
         text='int main1()\n'
              '{\n'
              '\tfloat radius;\n'
              '\tcout << "Please enter the radius of circle: ";\n'
              '\tcin >> radius; // inputing the radius\n'
              '\n'
              '\tif (radius > 0)\n'
              '\t\tcout << area(radius) << endl; // calling the function '
              '"area" for calculating the Area of Circle\n'
              '\n'
              '\telse\n'
              '\t\tcout << "INVALID Radius!" << endl; // if radius is a '
              'negative number or equal to zero the program will show "Invalid '
              'radius"\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001480',
         path='/OOP1-Lab5/Source1.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab5/Source1.cpp\n  Functions: main2\n')

Fragment(uuid='NORMALIZED-001481',
         path='/OOP1-Lab5/Source1.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001482',
         path='/OOP1-Lab5/Source1.cpp',
         lineno=9,
         depth=2,
         type='function_decl',
         name='main2',
         text='int main2()\n'
              '{\n'
              '\tint a, b;\n'
              '\tcout << "Enter two numbers: ";\n'
              '\tcin >> a >> b;\n'
              '\tswap(a, b);\t\t\t\t\t\t // C++ function to swap two numbers\n'
              '\tcout << a << " & " << b << endl; // swap is the function '
              'which is contained in c++ ==>\n'
              '\t\t\t\t\t\t\t\t\t //==> there is no need to open new function '
              'to swap\n'
              '\treturn 0;\n'
              '} // ending the function main\n')

Fragment(uuid='NORMALIZED-001483',
         path='/OOP1-Lab5/Source2.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab5/Source2.cpp\n  Functions: converting1, main3\n')

Fragment(uuid='NORMALIZED-001484',
         path='/OOP1-Lab5/Source2.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001485',
         path='/OOP1-Lab5/Source2.cpp',
         lineno=8,
         depth=2,
         type='function_decl',
         name='converting1',
         text='double converting1(double hours, double minutes, double '
              'seconds)\n'
              '{\t\t\t\t\t\t\t\t\t\t\t\t\t  // initializing the variables\n'
              '\treturn (hours * 60) + (minutes) + (seconds / 60); // '
              'returning the function "converting"\n'
              '}\n')

Fragment(uuid='NORMALIZED-001486',
         path='/OOP1-Lab5/Source2.cpp',
         lineno=13,
         depth=2,
         type='function_decl',
         name='main3',
         text='int main3()\n'
              '{\n'
              '\tdouble hours, minutes, seconds;\n'
              '\tcout << "Hours: ";\n'
              '\tcin >> hours;\t\t // Prompting user for data and\n'
              '\tcout << "Minutes: "; // reading 3 numbers for user\n'
              '\tcin >> minutes;\t\t //!\n'
              '\tcout << "Seconds: ";\n'
              '\tcin >> seconds;\n'
              '\tif (hours >= 0 && minutes >= 0 && seconds >= 0) // the '
              'program will be executed when all numbers are positive\n'
              '\t\tcout << "The time in minutes is " << converting1(hours, '
              'minutes, seconds) << endl;\n'
              '\telse // calling function to calculate the main function\n'
              '\t\tcout << "Invalid inputs!" << endl;\n'
              '\treturn 0; // indicates that the program will ended '
              'successfully\n'
              '}\n')

Fragment(uuid='NORMALIZED-001487',
         path='/OOP1-Lab5/Source3.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab5/Source3.cpp\n  Functions: main, qwerty\n')

Fragment(uuid='NORMALIZED-001488',
         path='/OOP1-Lab5/Source3.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001489',
         path='/OOP1-Lab5/Source3.cpp',
         lineno=9,
         depth=2,
         type='function_decl',
         name='qwerty',
         text='double qwerty(double n, double sum, double fact)\n'
              '{\n'
              '\tfor (int i = 1; i <= n; i++)\n'
              '\t{\n'
              '\t\tfact = fact * i;\t\t\t // calculating the factorial of the '
              'numbers\n'
              '\t\tsum += (pow(i, i) / (fact)); // executing the sum of '
              'numbers\n'
              '\t}\t\t\t\t\t\t\t\t //"pow" is raising \'i\' to power \'i\'\n'
              '\treturn sum;\t\t\t\t\t\t //\n'
              '} // end function qwerty\n')

Fragment(uuid='NORMALIZED-001490',
         path='/OOP1-Lab5/Source3.cpp',
         lineno=19,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tdouble n;\n'
              '\tdouble sum = 0;\n'
              '\tdouble fact = 1;\n'
              '\tcout << "Please ebter the number: "; // outputing and '
              'inputing the number\n'
              '\tcin >> n;\n'
              '\tif (n > 0)\t\t\t\t\t\t\t\t\t\t\t\t// the program will '
              'calculate the sum when numbers is positive\n'
              '\t\tcout << "Sum is: " << qwerty(n, sum, fact) << endl; // '
              'calling the function qwerty\n'
              '\telse\t\t\t\t\t\t\t\t\t\t\t\t\t// when the number is negative '
              "'else' will work\n"
              '\t\tcout << "INVALID INPUT!" << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '} // ending the program successfully\n')

Fragment(uuid='NORMALIZED-001491',
         path='/OOP1-Lab6/README.md',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# Practical Lab Assignment\n'
              '\n'
              '```\n'
              '1. Write a program to calculate area of following figures using '
              'function overloading:\n'
              'Circle\n'
              'Rectangle\n'
              'Triangle\n'
              'Square\n'
              '(Hint: 1. create 4 functions with same name area. 2. Each '
              'function to calculate area of one figure.)\n'
              '\n'
              '2. Write a program to calculate circumference of the following '
              'figures using function overloading:\n'
              'Circle\n'
              'Rectangle\n'
              'Triangle\n'
              'Square\n'
              '\n'
              '3. Write a program using function overloading:\n'
              'To find largest among three integers.\n'
              'To find largest among three floating point numbers.\n'
              '\n'
              '4. Convert function template for problem 3.\n'
              '```')

Fragment(uuid='NORMALIZED-001492',
         path='/OOP1-Lab6/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment\n')

Fragment(uuid='NORMALIZED-001493',
         path='/OOP1-Lab6/Source.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab6/Source.cpp\n'
              '  Functions: area, circumference, findlargest, first, main, '
              'second, third\n'
              '  Templates: Large\n')

Fragment(uuid='NORMALIZED-001494',
         path='/OOP1-Lab6/Source.cpp',
         lineno=5,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001495',
         path='/OOP1-Lab6/Source.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='first',
         text='void first()\n'
              '{\n'
              '\t// when the case 1 in the main menu\n'
              '\tfor (int l = 0; l < 120; l++)\n'
              '\t{\n'
              '\t\tcout << "=";\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t***Area of Geometrical figures.***\\n";\n'
              '\tfor (int l = 0; l < 120; l++)\n'
              '\t{\n'
              '\t\tcout << "=";\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\tcout << " [1] Circle" << endl;\n'
              '\tcout << " [2] Rectangle" << endl;\n'
              '\tcout << " [3] Triangle" << endl;\n'
              '\tcout << " [4] Square" << endl;\n'
              '\tcout << " [5] EXIT to MAIN MENU" << endl;\n'
              '\tcout << endl;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001496',
         path='/OOP1-Lab6/Source.cpp',
         lineno=29,
         depth=2,
         type='function_decl',
         name='second',
         text='void second()\n'
              '{\n'
              '\t// when the case 2 in the main menu\n'
              '\tfor (int l = 0; l < 120; l++)\n'
              '\t{\n'
              '\t\tcout << "=";\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t***Circumference of Geometrical '
              'figures.***\\n";\n'
              '\tfor (int l = 0; l < 120; l++)\n'
              '\t{\n'
              '\t\tcout << "=";\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\tcout << " [1] Circle" << endl;\n'
              '\tcout << " [2] Rectangle" << endl;\n'
              '\tcout << " [3] Triangle" << endl;\n'
              '\tcout << " [4] Square" << endl;\n'
              '\tcout << " [5] EXIT to MAIN MENU" << endl;\n'
              '\tcout << endl;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001497',
         path='/OOP1-Lab6/Source.cpp',
         lineno=51,
         depth=2,
         type='function_decl',
         name='third',
         text='void third()\n'
              '{\n'
              '\t// when the case 3 in the main menu\n'
              '\tfor (int l = 0; l < 120; l++)\n'
              '\t{\n'
              '\t\tcout << "=";\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t***Find the Largest number among 3 '
              'numbers.***\\n";\n'
              '\tfor (int l = 0; l < 120; l++)\n'
              '\t{\n'
              '\t\tcout << "=";\n'
              '\t}\n'
              '\tcout << endl;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001498',
         path='/OOP1-Lab6/Source.cpp',
         lineno=68,
         depth=2,
         type='function_decl',
         name='area',
         text='double area(double radius)\n'
              '{ // overloading function for finding the area of circle\n'
              '\tdouble area1;\n'
              '\tdouble input_radius;\n'
              '\tarea1 = 3.141592653589793238463 * pow(radius, 2);\n'
              '\tcout << "The area of Circle: " << area1 << endl;\n'
              '\tcout << endl;\n'
              '\treturn area1;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001499',
         path='/OOP1-Lab6/Source.cpp',
         lineno=78,
         depth=2,
         type='function_decl',
         name='area',
         text='double area(double sideA, double sideB)\n'
              '{ // overloading function for finding the area of rectengle\n'
              '\tdouble area2;\n'
              '\tarea2 = sideA * sideB;\n'
              '\tcout << "The area of Rectangle: " << area2 << endl;\n'
              '\tcout << endl;\n'
              '\treturn area2;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001500',
         path='/OOP1-Lab6/Source.cpp',
         lineno=87,
         depth=2,
         type='function_decl',
         name='area',
         text='double area(double sidetriangleA, double sidetriangleB, double '
              'sidetriangleC)\n'
              '{ // overloading function for finding the area of triangle\n'
              '\tdouble area3, S;\n'
              '\tS = (sidetriangleA + sidetriangleB + sidetriangleC) / 2;\n'
              '\tarea3 = sqrt(S * (S - sidetriangleA) * (S - sidetriangleB) * '
              '(S - sidetriangleC));\n'
              '\tcout << "The area of triangle: " << area3 << endl;\n'
              '\tcout << endl;\n'
              '\treturn area3;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001501',
         path='/OOP1-Lab6/Source.cpp',
         lineno=97,
         depth=2,
         type='function_decl',
         name='area',
         text='float area(float sidesquare) ////overloading function for '
              'finding the area of square\n'
              '{\n'
              '\tfloat area4;\n'
              '\tarea4 = pow(sidesquare, 2);\n'
              '\tcout << "The area of square: " << area4 << endl;\n'
              '\tcout << endl;\n'
              '\treturn area4;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001502',
         path='/OOP1-Lab6/Source.cpp',
         lineno=107,
         depth=2,
         type='function_decl',
         name='circumference',
         text='double circumference(double radius)\n'
              '{\n'
              '\tdouble circumference1;\n'
              '\tdouble input_radius;\n'
              '\tcircumference1 = 2 * 3.141592653589793238463 * radius;\n'
              '\tcout << "The circumference of Circle: " << circumference1 << '
              'endl;\n'
              '\tcout << endl;\n'
              '\treturn circumference1;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001503',
         path='/OOP1-Lab6/Source.cpp',
         lineno=117,
         depth=2,
         type='function_decl',
         name='circumference',
         text='double circumference(double sideA, double sideB)\n'
              '{\n'
              '\tdouble circumference2;\n'
              '\tcircumference2 = 2 * (sideA + sideB);\n'
              '\tcout << "The circumference of Rectangle: " << circumference2 '
              '<< endl;\n'
              '\tcout << endl;\n'
              '\treturn circumference2;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001504',
         path='/OOP1-Lab6/Source.cpp',
         lineno=126,
         depth=2,
         type='function_decl',
         name='circumference',
         text='double circumference(double sidetriangleA, double '
              'sidetriangleB, double sidetriangleC)\n'
              '{\n'
              '\tdouble circumference3;\n'
              '\tcircumference3 = sidetriangleA + sidetriangleB + '
              'sidetriangleC;\n'
              '\tcout << "The circumference of triangle: " << circumference3 '
              '<< endl;\n'
              '\tcout << endl;\n'
              '\treturn circumference3;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001505',
         path='/OOP1-Lab6/Source.cpp',
         lineno=135,
         depth=2,
         type='function_decl',
         name='circumference',
         text='float circumference(float sidesquare)\n'
              '{\n'
              '\tfloat circumference4;\n'
              '\tcircumference4 = 4 * sidesquare;\n'
              '\tcout << "The circumference of square: " << circumference4 << '
              'endl;\n'
              '\tcout << endl;\n'
              '\treturn circumference4;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001506',
         path='/OOP1-Lab6/Source.cpp',
         lineno=145,
         depth=2,
         type='function_decl',
         name='findlargest',
         text='int findlargest(int n1, int n2, int n3)\n'
              '{\n'
              '\n'
              '\tif (n1 >= n2 && n1 >= n3)\n'
              '\t{\n'
              '\t\tcout << "Largest number: " << n1 << endl;\n'
              '\t}\n'
              '\tif (n2 >= n1 && n2 >= n3)\n'
              '\t{\n'
              '\t\tcout << "Largest number: " << n2 << endl;\n'
              '\t}\n'
              '\tif (n3 >= n1 && n3 >= n2)\n'
              '\t{\n'
              '\t\tcout << "Largest number: " << n3 << endl;\n'
              '\t}\n'
              '\n'
              '\treturn n1, n2, n3;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001507',
         path='/OOP1-Lab6/Source.cpp',
         lineno=164,
         depth=2,
         type='function_decl',
         name='findlargest',
         text='double findlargest(double n1, double n2, double n3)\n'
              '{\n'
              '\n'
              '\tif (n1 >= n2 && n1 >= n3)\n'
              '\t{\n'
              '\t\tcout << "Largest number: " << n1 << endl;\n'
              '\t}\n'
              '\tif (n2 >= n1 && n2 >= n3)\n'
              '\t{\n'
              '\t\tcout << "Largest number: " << n2 << endl;\n'
              '\t}\n'
              '\tif (n3 >= n1 && n3 >= n2)\n'
              '\t{\n'
              '\t\tcout << "Largest number: " << n3 << endl;\n'
              '\t}\n'
              '\telse if (n1 == n2 == n3)\n'
              '\t\tcout << "Largest number : " << n3 << endl;\n'
              '\treturn n1, n2, n3;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001508',
         path='/OOP1-Lab6/Source.cpp',
         lineno=186,
         depth=2,
         type='function_template',
         name='Large',
         text='')

Fragment(uuid='NORMALIZED-001509',
         path='/OOP1-Lab6/Source.cpp',
         lineno=207,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tsystem("color 3E");\n'
              '\tint numberforoperation = 0;\n'
              '\tdouble radius1;\n'
              '\tdouble sideA, sideB;\n'
              '\tdouble sidetriangleA, sidetriangleB, sidetriangleC;\n'
              '\tfloat sidesquare;\n'
              '\tdouble n1, n2, n3;\n'
              '\n'
              '\tfor (int l = 0; l < 120; l++)\n'
              '\t{\n'
              '\t\tcout << "=";\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tHello! Welcome to the main '
              'menu.\\n";\n'
              '\tcout << "\\t\\t   WARNING!!! Enter only numbers!!! And the '
              '\'y/n\' when you will be asked!\\n";\n'
              '\tfor (int l = 0; l < 120; l++)\n'
              '\t{\n'
              '\t\tcout << "=";\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\tcout << "\\t[1] Area of Geometrical Figures.\\n";\n'
              '\tcout << "\\t[2] Circumference of geometrical figures.\\n";\n'
              '\tcout << "\\t[3] Find the largest number.\\n";\n'
              '\tcout << "\\t[4] finding the largest number with function '
              'template.\\n";\n'
              '\tcout << "\\t[5] EXIT\\n";\n'
              '\tcout << endl;\n'
              'b:\n'
              '\tcout << " Please enter the number of operation you would like '
              'to execute:  ";\n'
              '\tcin >> numberforoperation;\n'
              '\tif (numberforoperation > 0 && numberforoperation < 6)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tswitch (numberforoperation)\n'
              '\t\t{\n'
              '\t\tcase 1: // '
              'first11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n'
              '\t\t\tfirst();\n'
              '\t\t\tint firstfirst;\n'
              '\t\tf:\n'
              '\t\t\tcout << " Choose one figure: ";\n'
              '\t\t\tcin >> firstfirst;\n'
              '\t\t\tif (firstfirst > 0 && firstfirst < 6)\n'
              '\t\t\t{\n'
              '\t\t\t\tsystem("cls");\t\t// ends the main menu\n'
              '\t\t\t\tswitch (firstfirst) // firstfirst\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tsystem("cls"); // ends the main menu\n'
              '\t\t\t\tcase 1:\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t***CIRCLE***\\n";\n'
              '\t\t\t\ta:\n'
              '\t\t\t\t\tcout << "Enter the radius of the circle: ";\n'
              '\t\t\t\t\tcin >> radius1;\n'
              '\t\t\t\t\tif (radius1 > 0)\n'
              '\t\t\t\t\t{\n'
              '\t\t\t\t\t\tarea(radius1);\n'
              '\t\t\t\t\t\tfirst();\n'
              '\t\t\t\t\t\tgoto f;\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse\n'
              '\t\t\t\t\t\tgoto a;\n'
              '\t\t\t\t\tbreak;\n'
              '\n'
              '\t\t\t\tcase 2:\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t***RECTANGLE***\\n";\n'
              '\t\t\t\tc:\n'
              '\t\t\t\t\tcout << "Enter the height of rectangle: ";\n'
              '\t\t\t\t\tcin >> sideA;\n'
              '\t\t\t\t\tcout << "Enter the width of the rectangle: ";\n'
              '\t\t\t\t\tcin >> sideB;\n'
              '\t\t\t\t\tcout << endl;\n'
              '\t\t\t\t\tif (sideA > 0 && sideB > 0)\n'
              '\t\t\t\t\t{\n'
              '\t\t\t\t\t\tarea(sideA, sideB);\n'
              '\n'
              '\t\t\t\t\t\tfirst();\n'
              '\t\t\t\t\t\tgoto f;\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse\n'
              '\t\t\t\t\t\tgoto c;\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 3:\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t***TRIANGLE***" << endl;\n'
              '\t\t\t\td:\n'
              '\t\t\t\t\tcout << "Enter the first side of the triangle: ";\n'
              '\t\t\t\t\tcin >> sidetriangleA;\n'
              '\t\t\t\t\tcout << "Enter the second side of the triangle: ";\n'
              '\t\t\t\t\tcin >> sidetriangleB;\n'
              '\t\t\t\t\tcout << "Enter the third side of the triangle: ";\n'
              '\t\t\t\t\tcin >> sidetriangleC;\n'
              '\t\t\t\t\tcout << endl;\n'
              '\t\t\t\t\tif (sidetriangleA > 0 && sidetriangleB > 0 && '
              'sidetriangleC > 0 && sidetriangleC < sidetriangleA + '
              'sidetriangleB && sidetriangleA < sidetriangleB + sidetriangleC '
              '&& sidetriangleB < sidetriangleC + sidetriangleA)\n'
              '\t\t\t\t\t{\n'
              '\t\t\t\t\t\tarea(sidetriangleA, sidetriangleB, sidetriangleC);\n'
              '\n'
              '\t\t\t\t\t\tfirst();\n'
              '\t\t\t\t\t\tgoto f;\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse\n'
              '\t\t\t\t\t\tgoto d;\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 4:\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t***Square***" << endl;\n'
              '\t\t\t\te:\n'
              '\t\t\t\t\tcout << "Enter the side of square: ";\n'
              '\t\t\t\t\tcin >> sidesquare;\n'
              '\t\t\t\t\tif (sidesquare > 0)\n'
              '\t\t\t\t\t{\n'
              '\t\t\t\t\t\tarea(sidesquare);\n'
              '\n'
              '\t\t\t\t\t\tfirst();\n'
              '\t\t\t\t\t\tgoto f;\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse\n'
              '\t\t\t\t\t\tgoto e;\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 5:\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tmain();\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\t}\n'
              '\t\t\t\tdefault:\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\t\t}\n'
              '\t\t\telse\n'
              '\t\t\t\tgoto f;\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\tcase 2: // '
              'second2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\n'
              '\t\t\tsecond();\n'
              '\t\t\tint secondsecond;\n'
              '\t\tg:\n'
              '\t\t\tcout << " Choose one figure: ";\n'
              '\t\t\tcin >> secondsecond;\n'
              '\t\t\tif (secondsecond > 0 && secondsecond < 6)\n'
              '\t\t\t{\n'
              '\t\t\t\tsystem("cls");\t\t  // ends the main menu\n'
              '\t\t\t\tswitch (secondsecond) // firstfirst\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tsystem("cls"); // ends the main menu\n'
              '\t\t\t\tcase 1:\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t***CIRCLE***\\n";\n'
              '\t\t\t\th:\n'
              '\t\t\t\t\tcout << "Enter the radius of the circle: ";\n'
              '\t\t\t\t\tcin >> radius1;\n'
              '\t\t\t\t\tif (radius1 > 0)\n'
              '\t\t\t\t\t{\n'
              '\t\t\t\t\t\tcircumference(radius1);\n'
              '\t\t\t\t\t\tsecond();\n'
              '\t\t\t\t\t\tgoto g;\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse\n'
              '\t\t\t\t\t\tgoto h;\n'
              '\t\t\t\t\tbreak;\n'
              '\n'
              '\t\t\t\tcase 2:\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t***RECTANGLE***\\n";\n'
              '\t\t\t\tj:\n'
              '\t\t\t\t\tcout << "Enter the height of rectangle: ";\n'
              '\t\t\t\t\tcin >> sideA;\n'
              '\t\t\t\t\tcout << "Enter the width of the rectangle: ";\n'
              '\t\t\t\t\tcin >> sideB;\n'
              '\t\t\t\t\tcout << endl;\n'
              '\t\t\t\t\tif (sideA > 0 && sideB > 0)\n'
              '\t\t\t\t\t{\n'
              '\t\t\t\t\t\tcircumference(sideA, sideB);\n'
              '\t\t\t\t\t\tsecond();\n'
              '\t\t\t\t\t\tgoto g;\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse\n'
              '\t\t\t\t\t\tgoto j;\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 3:\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t***TRIANGLE***" << endl;\n'
              '\t\t\t\td1:\n'
              '\t\t\t\t\tcout << "Enter the first side of the triangle: ";\n'
              '\t\t\t\t\tcin >> sidetriangleA;\n'
              '\t\t\t\t\tcout << "Enter the second side of the triangle: ";\n'
              '\t\t\t\t\tcin >> sidetriangleB;\n'
              '\t\t\t\t\tcout << "Enter the third side of the triangle: ";\n'
              '\t\t\t\t\tcin >> sidetriangleC;\n'
              '\t\t\t\t\tcout << endl;\n'
              '\t\t\t\t\tif (sidetriangleA > 0 && sidetriangleB > 0 && '
              'sidetriangleC > 0 && sidetriangleC < sidetriangleA + '
              'sidetriangleB && sidetriangleA < sidetriangleB + sidetriangleC '
              '&& sidetriangleB < sidetriangleC + sidetriangleA)\n'
              '\t\t\t\t\t{\n'
              '\t\t\t\t\t\tcircumference(sidetriangleA, sidetriangleB, '
              'sidetriangleC);\n'
              '\t\t\t\t\t\tsecond();\n'
              '\t\t\t\t\t\tgoto g;\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse\n'
              '\t\t\t\t\t\tgoto d1;\n'
              '\t\t\t\t\tbreak;\n'
              '\n'
              '\t\t\t\tcase 4:\n'
              '\t\t\t\t\tcout << "\\t\\t\\t\\t***Square***" << endl;\n'
              '\t\t\t\te1:\n'
              '\t\t\t\t\tcout << "Enter the side of square: ";\n'
              '\t\t\t\t\tcin >> sidesquare;\n'
              '\t\t\t\t\tif (sidesquare > 0)\n'
              '\t\t\t\t\t{\n'
              '\t\t\t\t\t\tcircumference(sidesquare);\n'
              '\t\t\t\t\t\tsecond();\n'
              '\t\t\t\t\t\tgoto g;\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse\n'
              '\t\t\t\t\t\tgoto e1;\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 5:\n'
              '\t\t\t\t\tmain();\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tdefault:\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\t\t}\n'
              '\t\t\telse\n'
              '\t\t\t\tgoto g;\n'
              '\t\t\tbreak;\n'
              '\t\t\t'
              '///////////////////////////////////////////////////////////////////////////////////////////////////////////\n'
              '\t\tcase 3: // '
              'third333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333\n'
              '\t\t\tthird();\n'
              '\t\t\tcout << "\\t\\t\\tPlease enter 3 numbers to '
              'compare.\\n\\t\\t\\tYou can write even an integer or decimal '
              'number. For example: 123, 12.123, 0,123 \\n";\n'
              '\t\tx:\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tcout << "Enter the first number: ";\n'
              '\t\t\tcin >> n1;\n'
              '\t\t\tcout << "Enter the second number: ";\n'
              '\t\t\tcin >> n2;\n'
              '\t\t\tcout << "Enter the third number: ";\n'
              '\t\t\tcin >> n3;\n'
              '\t\t\tfindlargest(n1, n2, n3);\n'
              '\t\t\tchar quit;\n'
              '\t\t\tcout << "Do you want to try again(y/n)? ";\n'
              "\t\t\tif (cin >> quit && quit == 'y') // when user will input "
              "'y' the code will again ask you to input a 3 numbers\n"
              "\t\t\t\tgoto x;\t\t\t\t\t\t// when it will be 'n' the code will "
              'go to the main menu\n'
              '\t\t\telse\n'
              '\t\t\t{\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tmain();\n'
              '\t\t\t}\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\t\t'
              '/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n'
              '\t\tcase 4: // '
              'four4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444\n'
              '\t\t\tthird();\n'
              '\t\t\tcout << "\\t\\t\\tPlease enter 3 numbers to '
              'compare.\\n\\t\\t\\tYou can write even an integer or decimal '
              'number. For example: 123, 12.123, 0,123 \\n";\n'
              '\t\tqw:\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tcout << "Enter the first number: ";\n'
              '\t\t\tcin >> n1;\n'
              '\t\t\tcout << "Enter the second number: ";\n'
              '\t\t\tcin >> n2;\n'
              '\t\t\tcout << "Enter the third number: ";\n'
              '\t\t\tcin >> n3;\n'
              '\t\t\tfindlargest(n1, n2, n3);\n'
              '\t\t\tchar quit2;\n'
              '\t\t\tcout << "Do you want to try again(y/n)? "; // when user '
              "will input 'y' the code will again ask you to input a 3 "
              'numbers\n'
              "\t\t\tif (cin >> quit2 && quit2 == 'y')\t\t   // when it will "
              "be 'n' the code will go to the main menu\n"
              '\t\t\t\tgoto qw;\n'
              '\t\t\telse\n'
              '\t\t\t{\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tmain();\n'
              '\t\t\t}\n'
              '\t\t\tbreak; // breaking the case 4 of the main menu\n'
              '\t\tdefault:\n'
              '\t\t\tbreak; // breaking the default\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t\tgoto b;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001510',
         path='/OOP1-Lab7/README.md',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# Practical Lab Assignment\n'
              '\n'
              '1. Calculate the x^y (power) using recursion.\n'
              '2. Find sum of natural numbers using recursion.\n'
              '3. Display Fibonacci Series Using Recursion.\n'
              '4. Find G.C.D for two integers using recursion.')

Fragment(uuid='NORMALIZED-001511',
         path='/OOP1-Lab7/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment\n')

Fragment(uuid='NORMALIZED-001512',
         path='/OOP1-Lab7/fibonacci.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab7/fibonacci.cpp\n  Functions: fibonacci, main\n')

Fragment(uuid='NORMALIZED-001513',
         path='/OOP1-Lab7/fibonacci.cpp',
         lineno=3,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001514',
         path='/OOP1-Lab7/fibonacci.cpp',
         lineno=5,
         depth=2,
         type='function_decl',
         name='fibonacci',
         text='int fibonacci(int num)\n'
              "{ // new function 'fibonacci' for calculating fibonacci series\n"
              '\tif (num <= 1)\n'
              '\t{\n'
              '\t\treturn num;\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\treturn (fibonacci(num - 1) + fibonacci(num - 2));\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001515',
         path='/OOP1-Lab7/fibonacci.cpp',
         lineno=16,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tcout << "\\t\\t\\t***Program to calculate the sum of natural '
              'numbers using recursion***" << endl;\n'
              '\tcout << "Enter how many numbers would you like to output : '
              '";\n'
              '\tint num;\n'
              '\tcin >> num;\n'
              '\tcout << "Fibonnaci Series: ";\t // inputing the quantity of '
              'numbers\n'
              '\tfor (int i = 0; i < num; i++)\t // for loop for displaying '
              'series\n'
              '\t\tcout << " " << fibonacci(i); // calling function\n'
              '\tcout << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001516',
         path='/OOP1-Lab7/gcd.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab7/gcd.cpp\n  Functions: gcd, main4\n')

Fragment(uuid='NORMALIZED-001517',
         path='/OOP1-Lab7/gcd.cpp',
         lineno=3,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001518',
         path='/OOP1-Lab7/gcd.cpp',
         lineno=5,
         depth=2,
         type='function_decl',
         name='gcd',
         text='int gcd(int x, int y)\n'
              '{\n'
              '\tif (x == 0 || y == 0)\n'
              '\t\treturn y, x; // will input non-zero number when even one '
              'number input in zero\n'
              '\tif (x == y)\n'
              '\t\treturn x; // will return first number when both of the '
              'numbers are equal\n'
              '\tif (x > y)\n'
              '\t\treturn gcd(x - y, y); // when first number is greater than '
              'second\n'
              '\tif (y > x)\n'
              '\t\treturn gcd(x, y - x); // when second number is greater than '
              'first\n'
              '}\n')

Fragment(uuid='NORMALIZED-001519',
         path='/OOP1-Lab7/gcd.cpp',
         lineno=17,
         depth=2,
         type='function_decl',
         name='main4',
         text='int main4()\n'
              '{\n'
              '\tcout << "\\t\\t\\t***Program to calculate the G.C.D for two '
              'integers using recursion.***" << endl;\n'
              '\tcout << "Please enter two integers: " << endl;\n'
              '\tint x, y;\n'
              '\tcin >> x >> y;\n'
              '\tcout << "The G.C.D of " << x << "and " << y << " is " << '
              'gcd(x, y); // calling function in the main function\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001520',
         path='/OOP1-Lab7/power.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab7/power.cpp\n  Functions: main1, power\n')

Fragment(uuid='NORMALIZED-001521',
         path='/OOP1-Lab7/power.cpp',
         lineno=4,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001522',
         path='/OOP1-Lab7/power.cpp',
         lineno=6,
         depth=2,
         type='function_decl',
         name='power',
         text='long long int power(long long int x, long long int y)\n'
              '{\n'
              '\tif (y == 0)\n'
              '\t\treturn 1;\n'
              '\telse\n'
              '\t\treturn x * power(x, y - 1);\n'
              '}\n')

Fragment(uuid='NORMALIZED-001523',
         path='/OOP1-Lab7/power.cpp',
         lineno=14,
         depth=2,
         type='function_decl',
         name='main1',
         text='int main1()\n'
              '{\n'
              '\tcout << "\\t\\t\\t***Program to calculate the x^y using '
              'recursion***" << endl;\n'
              '\tint x, y;\n'
              '\tcout << "Please enter the numbers x^y: ";\n'
              '\tcin >> x >> y;\t\t\t\t\t   // inpuing the interval of the '
              'numbers\n'
              '\tcout << "Result: " << power(x, y); // calling function '
              "'power'\n"
              '\tcout << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001524',
         path='/OOP1-Lab7/sum.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab7/sum.cpp\n  Functions: main2, sum\n')

Fragment(uuid='NORMALIZED-001525',
         path='/OOP1-Lab7/sum.cpp',
         lineno=3,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001526',
         path='/OOP1-Lab7/sum.cpp',
         lineno=5,
         depth=2,
         type='function_decl',
         name='sum',
         text='long long int sum(long long int n)\n'
              "{ // fuction called 'sum' foe calculating the sum of the "
              'natural numbers\n'
              '\tif (n == 0)\n'
              "\t\treturn 0; // will return '0' when number will come to 0\n"
              '\telse\n'
              '\t\treturn n + sum(n - 1); // using recursion\n'
              '}\n')

Fragment(uuid='NORMALIZED-001527',
         path='/OOP1-Lab7/sum.cpp',
         lineno=13,
         depth=2,
         type='function_decl',
         name='main2',
         text='int main2()\n'
              '{\n'
              '\tcout << "\\t\\t\\t***Program to calculate the sum of natural '
              'numbers using recursion***" << endl;\n'
              '\tint num;\n'
              '\tcout << "Please enter the interval: ";\n'
              '\tcin >> num;\t\t\t\t\t\t\t // inpuing the interval of the '
              'numbers\n'
              '\tcout << "The sum is : " << sum(num); // calling function '
              "'sum'\n"
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001528',
         path='/OOP1-Lab8/README.md',
         lineno=1,
         depth=10,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Arrays\n')

Fragment(uuid='NORMALIZED-001529',
         path='/OOP1-Lab8/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Arrays\n')

Fragment(uuid='NORMALIZED-001530',
         path='/OOP1-Lab8/README.md',
         lineno=2,
         depth=11,
         type='documentation',
         name='',
         text='\n1. Write a program to display an array.')

Fragment(uuid='NORMALIZED-001531',
         path='/OOP1-Lab8/README.md',
         lineno=3,
         depth=11,
         type='documentation',
         name='',
         text='\n2. Write a program to find average of array elements.')

Fragment(uuid='NORMALIZED-001532',
         path='/OOP1-Lab8/README.md',
         lineno=4,
         depth=11,
         type='documentation',
         name='',
         text='\n3. Write a program to merge to sorted arrays.')

Fragment(uuid='NORMALIZED-001533',
         path='/OOP1-Lab8/README.md',
         lineno=5,
         depth=11,
         type='documentation',
         name='',
         text='\n    ```')

Fragment(uuid='NORMALIZED-001534',
         path='/OOP1-Lab8/README.md',
         lineno=6,
         depth=11,
         type='documentation',
         name='',
         text='\n    a1[10] = [25, 27, 32, 98]')

Fragment(uuid='NORMALIZED-001535',
         path='/OOP1-Lab8/README.md',
         lineno=7,
         depth=11,
         type='documentation',
         name='',
         text='\n    a2[10] = [12, 23, 28, 51, 72, 85, 97]')

Fragment(uuid='NORMALIZED-001536',
         path='/OOP1-Lab8/README.md',
         lineno=8,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '    then a3[20] should be equal to = [12, 23, 25, 27, 28, 32, '
              '51, 72, 85, 97, 98]')

Fragment(uuid='NORMALIZED-001537',
         path='/OOP1-Lab8/README.md',
         lineno=9,
         depth=11,
         type='documentation',
         name='',
         text='\n    ```')

Fragment(uuid='NORMALIZED-001538',
         path='/OOP1-Lab8/README.md',
         lineno=10,
         depth=11,
         type='documentation',
         name='',
         text='\n4. Write a program to insert an element to an array.')

Fragment(uuid='NORMALIZED-001539',
         path='/OOP1-Lab8/README.md',
         lineno=11,
         depth=11,
         type='documentation',
         name='',
         text='\n5. Write a program to delete an element from an array.')

Fragment(uuid='NORMALIZED-001540',
         path='/OOP1-Lab8/Sort.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab8/Sort.cpp\n  Functions: main, merging\n')

Fragment(uuid='NORMALIZED-001541',
         path='/OOP1-Lab8/Sort.cpp',
         lineno=2,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001542',
         path='/OOP1-Lab8/Sort.cpp',
         lineno=5,
         depth=2,
         type='function_decl',
         name='merging',
         text='void merging(int arr1[], int arr2[], int arr3[])\n'
              '{\n'
              '\tint i = 0, j = 0, k = 0;\n'
              '\tfor (i = 0; i < 5 && j < 5;)\n'
              '\t{ // comparing first array elements with second\n'
              '\t\tif (arr1[i] < arr2[j])\n'
              '\t\t{\n'
              '\t\t\tarr3[k] = arr1[i];\n'
              '\t\t\tk++;\n'
              '\t\t\ti++;\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tarr3[k] = arr2[j];\n'
              '\t\t\tk++;\n'
              '\t\t\tj++;\n'
              '\t\t}\n'
              '\t}\n'
              '\twhile (i < 5)\n'
              '\t{ // comparing for other elements of first and third arrays\n'
              '\t\tarr3[k] = arr1[i];\n'
              '\t\tk++;\n'
              '\t\ti++;\n'
              '\t}\n'
              '\twhile (j < 5)\n'
              '\t{ // comparing for other elements of second and third arrays\n'
              '\t\tarr3[k] = arr2[j];\n'
              '\t\tk++;\n'
              '\t\tj++;\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001543',
         path='/OOP1-Lab8/Sort.cpp',
         lineno=37,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\n'
              '\tint arr1[5], arr2[5];\n'
              '\tint arr3[10];\n'
              '\tint i;\n'
              '\tcout << "Input the elements for the first Array: ";\n'
              '\tfor (i = 0; i < 5; i++)\n'
              '\t{\n'
              '\t\tcin >> arr1[i];\n'
              '\t}\n'
              '\tcout << "Input the elements for the second Array: ";\n'
              '\tfor (i = 0; i < 5; i++)\n'
              '\t{\n'
              '\t\tcin >> arr2[i];\n'
              '\t}\n'
              '\tmerging(arr1, arr2, arr3); // calling function merging\n'
              '\tcout << "Sorted Elements: ";\n'
              '\tfor (i = 0; i < 10; i++)\n'
              '\t{\n'
              '\t\tcout << arr3[i] << " ";\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001544',
         path='/OOP1-Lab8/average.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab8/average.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001545',
         path='/OOP1-Lab8/average.cpp',
         lineno=2,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001546',
         path='/OOP1-Lab8/average.cpp',
         lineno=4,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tint a[10];\n'
              '\t// input the arrays\n'
              '\tcout << "Input an Array Elements. " << endl;\n'
              '\tfor (int i = 0; i < 10; i++)\n'
              '\t{\n'
              '\t\tcout << "array element [ " << i << " ] ";\n'
              '\t\tcin >> a[i];\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\tdouble sum = 0;\n'
              '\t// sum the elements of the array\n'
              '\tfor (int i = 0; i < 10; i++)\n'
              '\t{\n'
              '\t\tsum += a[i];\n'
              '\t}\n'
              '\tdouble average;\n'
              '\t// finding the elements of the array\n'
              '\taverage = sum / 10;\n'
              '\tcout << "Average of array elements: " << average << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001547',
         path='/OOP1-Lab8/deleting.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab8/deleting.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001548',
         path='/OOP1-Lab8/deleting.cpp',
         lineno=2,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001549',
         path='/OOP1-Lab8/deleting.cpp',
         lineno=4,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tint a[10];\n'
              '\tint n = 10;\n'
              '\tcout << "Input numbers for into arrays." << endl;\n'
              '\tfor (int i = 0; i < n; i++)\n'
              '\t{\n'
              '\t\tcout << "a[" << i << "] = "; // input array\n'
              '\t\tcin >> a[i];\n'
              '\t}\n'
              '\tint value;\n'
              '\tint position;\n'
              '\tcout << "Enter value which you want to delete: ";\n'
              '\tcin >> value;\n'
              '\tfor (int i = 0; i < n; i++)\n'
              '\t{ // finding the position\n'
              '\t\tif (value == a[i])\n'
              '\t\t\tposition = i;\n'
              '\t}\n'
              '\tfor (int i = position; i < n; i++)\n'
              '\t{ // incrementing the array elements into 1\n'
              '\t\ta[i] = a[i + 1];\n'
              '\t}\n'
              '\tn = n - 1;\n'
              '\tfor (int i = 0; i < n; i++)\n'
              '\t{\n'
              '\t\tcout << "a[" << i << "] =" << a[i] << endl; // output '
              'arrays with correct order\n'
              '\t}\n'
              '\ta[9] = 0;\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001550',
         path='/OOP1-Lab8/display.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab8/display.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001551',
         path='/OOP1-Lab8/display.cpp',
         lineno=2,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001552',
         path='/OOP1-Lab8/display.cpp',
         lineno=4,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tint a[10];\n'
              '\t// code for the input the elements of the array\n'
              '\tcout << "Input an Array Elements. " << endl;\n'
              '\tfor (int i = 0; i < 10; i++)\n'
              '\t{\n'
              '\t\tcout << "array element [ " << i << " ] ";\n'
              '\t\tcin >> a[i];\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\t// output tje arrays\n'
              '\tcout << "Displaying arrays: " << endl;\n'
              '\tfor (int i = 0; i < 5; i++)\n'
              '\t{\n'
              '\t\tcout << "a[ " << i << " ] = " << a[i] << endl;\n'
              '\t}\n'
              '\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001553',
         path='/OOP1-Lab8/inserting.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab8/inserting.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001554',
         path='/OOP1-Lab8/inserting.cpp',
         lineno=2,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001555',
         path='/OOP1-Lab8/inserting.cpp',
         lineno=4,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tint a[15], value, i, pos;\n'
              '\tint size = 10;\n'
              '\tcout << "Enter array elements: ";\n'
              '\tfor (i = 0; i < 10; i++) // input the array elements\n'
              '\t{\n'
              '\t\tcout << "a[ " << i << " ] = ";\n'
              '\t\tcin >> a[i];\n'
              '\t}\n'
              '\t// code for asking the value and the position to be inserted\n'
              '\tcout << "Enter element to be insert : ";\n'
              '\tcin >> value;\n'
              '\tcout << "At which position: ";\n'
              '\tcin >> pos;\n'
              '\t// changing the place of arrays\n'
              '\tfor (i = 10; i > pos; i--)\n'
              '\t{\n'
              '\t\ta[i] = a[i - 1];\n'
              '\t}\n'
              '\ta[pos] = value;\n'
              '\t// outputing correct araays order\n'
              '\tfor (i = 0; i < size + 1; i++)\n'
              '\t{\n'
              '\t\tcout << a[i] << " ";\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001556',
         path='/OOP1-Lab9/Pascal.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab9/Pascal.cpp\n  Functions: main\n')

Fragment(uuid='NORMALIZED-001557',
         path='/OOP1-Lab9/Pascal.cpp',
         lineno=2,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001558',
         path='/OOP1-Lab9/Pascal.cpp',
         lineno=4,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tcout << "\\t\\t\\tPalcal\'s Triangle\\n";\n'
              '\tint a[7][7] = {};\n'
              '\tint row = 0, col = 0;\n'
              '\tfor (int row = 0; row < 7; row++)\n'
              '\t{\n'
              '\t\tfor (int col = 0; col < row; col++)\n'
              '\t\t{\n'
              '\t\t\ta[0][0] = 1;\n'
              '\t\t\ta[row + 1][1] = 1;\n'
              '\n'
              '\t\t\tcout << a[row][col];\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001559',
         path='/OOP1-Lab9/Pascal2.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab9/Pascal2.cpp\n  Functions: main1\n')

Fragment(uuid='NORMALIZED-001560',
         path='/OOP1-Lab9/Pascal2.cpp',
         lineno=2,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001561',
         path='/OOP1-Lab9/Pascal2.cpp',
         lineno=3,
         depth=2,
         type='function_decl',
         name='main1',
         text='int main1()\n'
              '{\n'
              '\tcout << "\\t\\t\\tPascal\'s triangle\\n";\n'
              '\tint row = 0, col = 0;\n'
              '\tint a[7][7] = {};\n'
              '\ta[0][0] = 1;\t\t\t\t  // giving the value for the array with '
              'address a[0][0]\n'
              '\tfor (row = 0; row < 7; row++) // rows\n'
              '\t{\n'
              '\t\tfor (col = 0; col <= row; col++) // columns\n'
              '\t\t{\n'
              '\t\t\t// code for the borders of the triangle\n'
              '\t\t\t// giving to then the value 1\n'
              '\t\t\tif (col == 0 || row == col)\n'
              '\t\t\t{\n'
              '\t\t\t\ta[row][col] = 1;\n'
              '\t\t\t\tcout << " " << a[row][col];\n'
              '\t\t\t}\n'
              '\t\t\t// code for the finding the values for the inside numbers '
              'of the triangle\n'
              '\t\t\telse\n'
              '\t\t\t{\n'
              '\t\t\t\ta[row][col] = a[row - 1][col - 1] + a[row - 1][col];\n'
              '\t\t\t\tcout << " " << a[row][col];\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001562',
         path='/OOP1-Lab9/README.md',
         lineno=1,
         depth=10,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Arrays\n')

Fragment(uuid='NORMALIZED-001563',
         path='/OOP1-Lab9/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Arrays\n')

Fragment(uuid='NORMALIZED-001564',
         path='/OOP1-Lab9/README.md',
         lineno=2,
         depth=11,
         type='documentation',
         name='',
         text='\n1. Write a program to generate Pascal’s triangle.')

Fragment(uuid='NORMALIZED-001565',
         path='/OOP1-Lab9/README.md',
         lineno=3,
         depth=11,
         type='documentation',
         name='',
         text='\n    ```')

Fragment(uuid='NORMALIZED-001566',
         path='/OOP1-Lab9/README.md',
         lineno=4,
         depth=11,
         type='documentation',
         name='',
         text='\n            1')

Fragment(uuid='NORMALIZED-001567',
         path='/OOP1-Lab9/README.md',
         lineno=5,
         depth=11,
         type='documentation',
         name='',
         text='\n           1 1')

Fragment(uuid='NORMALIZED-001568',
         path='/OOP1-Lab9/README.md',
         lineno=6,
         depth=11,
         type='documentation',
         name='',
         text='\n          1 2 1')

Fragment(uuid='NORMALIZED-001569',
         path='/OOP1-Lab9/README.md',
         lineno=7,
         depth=11,
         type='documentation',
         name='',
         text='\n         1 3 3 1')

Fragment(uuid='NORMALIZED-001570',
         path='/OOP1-Lab9/README.md',
         lineno=8,
         depth=11,
         type='documentation',
         name='',
         text='\n        1 4 6 4 1')

Fragment(uuid='NORMALIZED-001571',
         path='/OOP1-Lab9/README.md',
         lineno=9,
         depth=11,
         type='documentation',
         name='',
         text='\n      1 5 10 10 5 1')

Fragment(uuid='NORMALIZED-001572',
         path='/OOP1-Lab9/README.md',
         lineno=10,
         depth=11,
         type='documentation',
         name='',
         text='\n    1 6 15 20 15 6 1')

Fragment(uuid='NORMALIZED-001573',
         path='/OOP1-Lab9/README.md',
         lineno=11,
         depth=11,
         type='documentation',
         name='',
         text='\n    ```')

Fragment(uuid='NORMALIZED-001574',
         path='/OOP1-Lab9/README.md',
         lineno=12,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '2. Write a menu driven program to read and display an m × n '
              'matrix. Also find the sum, transpose and product of two m × n '
              'matrices.')

Fragment(uuid='NORMALIZED-001575',
         path='/OOP1-Lab9/README.md',
         lineno=13,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '3. In a small company there are five salesman. Each salesman is '
              'supposed to sell three products. Write a program using 2D array '
              'to print the total sales by each salesman and total sales of '
              'each item.')

Fragment(uuid='NORMALIZED-001576',
         path='/OOP1-Lab9/Source1.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab9/Source1.cpp\n'
              '  Functions: main, main22, main_menu_view, product, '
              'read_display, sum_matrices, transpose\n')

Fragment(uuid='NORMALIZED-001577',
         path='/OOP1-Lab9/Source1.cpp',
         lineno=3,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001578',
         path='/OOP1-Lab9/Source1.cpp',
         lineno=5,
         depth=2,
         type='function_decl',
         name='main',
         text='')

Fragment(uuid='NORMALIZED-001579',
         path='/OOP1-Lab9/Source1.cpp',
         lineno=7,
         depth=2,
         type='function_decl',
         name='read_display',
         text='void read_display()\n'
              '{\n'
              '\tsystem("cls");\n'
              '\tcout << "\\t\\tREAD AND DISPLAY\\n";\n'
              '\tcout << "Please input information about 2D array: " << endl;\n'
              '\tint row_input, col_input;\n'
              '\tcout << "Rows (max 5): ";\n'
              '\tcin >> row_input;\n'
              '\tcout << "Columns (max 5): ";\n'
              '\tcin >> col_input;\n'
              '\tint a[5][5];\n'
              '\tcout << "Now input elements of Matrix: ";\n'
              '\tif (row_input > 0 && row_input <= 5 && col_input > 0 && '
              'col_input <= 5)\n'
              '\t{\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tcin >> a[row][col];\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\tcout << "Result: \\n";\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input; col++)\n'
              '\t\t\t{\n'
              '\n'
              '\t\t\t\tcout << a[row][col] << "  ";\n'
              '\t\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "Do you want to try again? (Yes = 1, No = Any '
              'Key)\\n";\n'
              '\t\tstring respond;\n'
              '\t\tcout << "Your choice: ";\n'
              '\t\tcin >> respond;\n'
              '\t\tif (respond == "1")\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tread_display();\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tmain();\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Please input valid numbers from 1 to 5 ! " << '
              'endl;\n'
              '\t\tread_display();\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001580',
         path='/OOP1-Lab9/Source1.cpp',
         lineno=62,
         depth=2,
         type='function_decl',
         name='transpose',
         text='void transpose()\n'
              '{\n'
              '\tsystem("cls");\n'
              '\tcout << "\\t\\tTRANSPOSE OF MATRIX\\n";\n'
              '\tint a[5][5], trans[5][5], r, c, i, j;\n'
              '\tcout << "Please input information about 2D array: " << endl;\n'
              '\tcout << "Rows (max 5): ";\n'
              '\tcin >> r;\n'
              '\tcout << "Columns (max 5): ";\n'
              '\tcin >> c;\n'
              '\t// Storing element of matrix entered by user in array\n'
              '\tif (r > 0 && r <= 5 && c > 0 && c <= 5)\n'
              '\t{\n'
              '\t\tcout << "Enter elements of matrix: " << endl;\n'
              '\t\tfor (i = 0; i < r; ++i)\n'
              '\t\t\tfor (j = 0; j < c; ++j)\n'
              '\t\t\t{\n'
              '\t\t\t\tcin >> a[i][j];\n'
              '\t\t\t}\n'
              '\t\t// Displaying the matrix\n'
              '\t\tcout << "Entered Matrix: " << endl;\n'
              '\t\tfor (i = 0; i < r; ++i)\n'
              '\t\t\tfor (j = 0; j < c; ++j)\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << " " << a[i][j];\n'
              '\t\t\t\tif (j == c - 1)\n'
              '\t\t\t\t\tcout << endl\n'
              '\t\t\t\t\t\t << endl;\n'
              '\t\t\t}\n'
              '\t\t// Finding transpose of matrix\n'
              '\t\tfor (i = 0; i < r; ++i)\n'
              '\t\t\tfor (j = 0; j < c; ++j)\n'
              '\t\t\t{\n'
              '\t\t\t\ttrans[j][i] = a[i][j];\n'
              '\t\t\t}\n'
              '\t\t// Displaying the transpose\n'
              '\t\tcout << "Transpose of Matrix: " << endl;\n'
              '\t\tfor (i = 0; i < c; ++i)\n'
              '\t\t\tfor (j = 0; j < r; ++j)\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << " " << trans[i][j];\n'
              '\t\t\t\tif (j == r - 1)\n'
              '\t\t\t\t\tcout << endl\n'
              '\t\t\t\t\t\t << endl;\n'
              '\t\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "Do you want to try again? (Yes = 1, No = Any '
              'Key)\\n";\n'
              '\t\tstring respond;\n'
              '\t\tcout << "Your choice: ";\n'
              '\n'
              '\t\tcin >> respond;\n'
              '\t\tif (respond == "1")\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\ttranspose();\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tmain();\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Please input valid numbers from 1 to 5 ! " << '
              'endl;\n'
              '\t\ttranspose();\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001581',
         path='/OOP1-Lab9/Source1.cpp',
         lineno=132,
         depth=2,
         type='function_decl',
         name='sum_matrices',
         text='void sum_matrices()\n'
              '{\n'
              '\tsystem("cls");\n'
              '\tcout << "\\t\\tSUM TWO MATRICES\\n";\n'
              '\tcout << "\\tNOTE: Rows 1 = Rows 2 && Columns 1 = Columns '
              '2\\n";\n'
              '\tcout << "Please input details for the First Matrix: \\n";\n'
              '\tint row_input, col_input;\n'
              '\tcout << "Rows (max 5): ";\n'
              '\tcin >> row_input;\n'
              '\tcout << "Columns (max 5): ";\n'
              '\tcin >> col_input;\n'
              '\tint a[5][5];\n'
              '\tcout << "Now input elements of First Matrix: ";\n'
              '\tif (row_input > 0 && row_input <= 5 && col_input > 0 && '
              'col_input <= 5)\n'
              '\t{\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tcin >> a[row][col];\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\tcout << "First Matrix: \\n";\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << a[row][col] << "  ";\n'
              '\t\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Please input valid numbers from 1 to 5 ! " << '
              'endl;\n'
              '\t\tread_display();\n'
              '\t}\n'
              '\t// for the second matrix\n'
              '\tcout << endl;\n'
              '\tcout << "Please input details for the Second Matrix: \\n";\n'
              '\tint row_input2, col_input2;\n'
              '\tcout << "Rows (max 5): ";\n'
              '\tcin >> row_input2;\n'
              '\tcout << "Columns (max 5): ";\n'
              '\tcin >> col_input2;\n'
              '\tint b[5][5];\n'
              '\tcout << "Now input elements of Second Matrix: ";\n'
              '\tif (row_input2 > 0 && row_input2 <= 5 && col_input2 > 0 && '
              'col_input2 <= 5)\n'
              '\t{\n'
              '\t\tfor (int row = 0; row < row_input2; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input2; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tcin >> b[row][col];\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\tcout << "Second Matrix: \\n";\n'
              '\t\tfor (int row = 0; row < row_input2; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input2; col++)\n'
              '\t\t\t{\n'
              '\n'
              '\t\t\t\tcout << b[row][col] << "  ";\n'
              '\t\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Please input valid numbers from 1 to 5 ! " << '
              'endl;\n'
              '\t\tread_display();\n'
              '\t}\n'
              '\t// validation for adding matrices\n'
              '\tint sum[5][5];\n'
              '\tif (row_input == row_input2 && col_input == col_input2)\n'
              '\t{\n'
              '\t\t// Adding Two matrices\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tsum[row][col] = a[row][col] + b[row][col];\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\t// Displaying the resultant sum matrix.\n'
              '\t\tcout << endl\n'
              '\t\t\t << "Sum of two matrix is: " << endl;\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << sum[row][col] << "  ";\n'
              '\t\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "This Matrices cannot be added.";\n'
              '\t}\n'
              '\t// asking play again\n'
              '\tcout << endl;\n'
              '\tcout << "Do you want to try again? (Yes = 1, No = Any '
              'Key)\\n";\n'
              '\tstring respond;\n'
              '\tcout << "Your choice: ";\n'
              '\tcin >> respond;\n'
              '\tif (respond == "1")\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tsum_matrices();\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tmain();\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001582',
         path='/OOP1-Lab9/Source1.cpp',
         lineno=253,
         depth=2,
         type='function_decl',
         name='product',
         text='void product()\n'
              '{\n'
              '\tsystem("cls");\n'
              '\tcout << "\\t\\tMULTIPLY TWO MATRICES\\n";\n'
              '\tcout << "\\tNOTE: Rows 1 = Column 2 \\n";\n'
              '\tcout << "Please input details for the First Matrix: \\n";\n'
              '\tint row_input, col_input;\n'
              '\tcout << "Rows (max 5): ";\n'
              '\tcin >> row_input;\n'
              '\tcout << "Columns (max 5): ";\n'
              '\tcin >> col_input;\n'
              '\tint a[5][5];\n'
              '\tcout << "Now input elements of First Matrix: ";\n'
              '\tif (row_input > 0 && row_input <= 5 && col_input > 0 && '
              'col_input <= 5)\n'
              '\t{\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tcin >> a[row][col];\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\tcout << "First Matrix: \\n";\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << a[row][col] << "  ";\n'
              '\t\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Please input valid numbers from 1 to 5 ! " << '
              'endl;\n'
              '\t\tread_display();\n'
              '\t}\n'
              '\t// for the second matrix\n'
              '\tcout << endl;\n'
              '\tcout << "Please input details for the Second Matrix: \\n";\n'
              '\tint row_input2, col_input2;\n'
              '\tcout << "Rows (max 5): ";\n'
              '\tcin >> row_input2;\n'
              '\tcout << "Columns (max 5): ";\n'
              '\tcin >> col_input2;\n'
              '\tint b[5][5];\n'
              '\tcout << "Now input elements of Second Matrix: ";\n'
              '\tif (row_input2 > 0 && row_input2 <= 5 && col_input2 > 0 && '
              'col_input2 <= 5)\n'
              '\t{\n'
              '\t\tfor (int row = 0; row < row_input2; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input2; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tcin >> b[row][col];\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\tcout << "Second Matrix: \\n";\n'
              '\t\tfor (int row = 0; row < row_input2; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input2; col++)\n'
              '\t\t\t{\n'
              '\n'
              '\t\t\t\tcout << b[row][col] << "  ";\n'
              '\t\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Please input valid numbers from 1 to 5 ! " << '
              'endl;\n'
              '\t\tread_display();\n'
              '\t}\n'
              '\t// validation for multiplication matrices\n'
              '\tint multi[5][5];\n'
              '\tif (row_input == col_input2)\n'
              '\t{\n'
              '\t\t// initializing the matrix of multiplication\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input2; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tmulti[row][col] = 0;\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input2; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tfor (int i = 0; i < col_input; i++)\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tmulti[row][col] += a[row][col] * b[row][col];\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\t// displaying multiplication of two matrices\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "Result of Multiplication: \\n";\n'
              '\t\tfor (int row = 0; row < row_input; row++)\n'
              '\t\t{\n'
              '\t\t\tfor (int col = 0; col < col_input2; col++)\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << multi[row][col] << "  ";\n'
              '\t\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "This Matrices cannot be multiplied.";\n'
              '\t}\n'
              '\t// asking play again\n'
              '\tcout << endl;\n'
              '\tcout << "Do you want to try again? (Yes = 1, No = Any '
              'Key)\\n";\n'
              '\tstring respond;\n'
              '\tcout << "Your choice: ";\n'
              '\tcin >> respond;\n'
              '\tif (respond == "1")\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tsum_matrices();\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tmain();\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001583',
         path='/OOP1-Lab9/Source1.cpp',
         lineno=384,
         depth=2,
         type='function_decl',
         name='main_menu_view',
         text='void main_menu_view()\n'
              '{\n'
              '\tsystem("color 3F");\n'
              '\tcout << "\\t\\t\\t===============================\\n";\n'
              '\tcout << "\\t\\t\\t\\tM A I N  M E N U\\n";\n'
              '\tcout << "\\t\\t\\t===============================\\n";\n'
              '\tcout << "\\t\\t\\t[1] Read and Display Matrix\\n";\n'
              '\tcout << "\\t\\t\\t[2] Transpose\\n";\n'
              '\tcout << "\\t\\t\\t[3] Sum of two Matrices\\n";\n'
              '\tcout << "\\t\\t\\t[4] Product of two Matrices\\n\\n";\n'
              '}\n')

Fragment(uuid='NORMALIZED-001584',
         path='/OOP1-Lab9/Source1.cpp',
         lineno=395,
         depth=2,
         type='function_decl',
         name='main22',
         text='int main22()\n'
              '{\n'
              '\tmain_menu_view();\n'
              '\tcout << "\\t\\t\\tYOUR CHOICE: ";\n'
              '\tstring user_choice;\n'
              '\tcin >> user_choice;\n'
              '\t// validating the user input\n'
              '\tif (user_choice == "1" || user_choice == "2" || user_choice '
              '== "3" || user_choice == "4")\n'
              '\t{\n'
              '\t\tif (user_choice == "1")\n'
              '\t\t\tread_display();\n'
              '\t\telse if (user_choice == "2")\n'
              '\t\t\ttranspose();\n'
              '\t\telse if (user_choice == "3")\n'
              '\t\t\tsum_matrices();\n'
              '\t\telse if (user_choice == "4")\n'
              '\t\t\tproduct();\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls"); // function for the clearing the screen of '
              'console\n'
              '\t\tcout << "\\t\\tYou have inputted wrong number, please try '
              'again!\\n";\n'
              '\t\tmain();\n'
              '\t}\n'
              '\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001585',
         path='/OOP1-Lab9/Source2.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP1-Lab9/Source2.cpp\n'
              '  Functions: main, main_menu_view1, sales_sum, salesman_sum\n')

Fragment(uuid='NORMALIZED-001586',
         path='/OOP1-Lab9/Source2.cpp',
         lineno=3,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001587',
         path='/OOP1-Lab9/Source2.cpp',
         lineno=5,
         depth=2,
         type='function_decl',
         name='main_menu_view1',
         text='void main_menu_view1()\n'
              '{\n'
              '\tcout << "\\t\\t\\t\\tSALESMAN & PRODUCTS\\n";\n'
              '\tcout << '
              '"===================================================================================\\n";\n'
              '\tcout << "=           || Salesman 1 || Salesman 2 || Salesman '
              '3 || Salesman 4 || Salesman 5 =\\n";\n'
              '\tcout << '
              '"===================================================================================\\n";\n'
              '\tcout << "= Product 1 ||            ||            '
              '||            ||            ||            =\\n";\n'
              '\tcout << "= Product 2 ||            ||            '
              '||            ||            ||            =\\n";\n'
              '\tcout << "= Product 3 ||            ||            '
              '||            ||            ||            =\\n";\n'
              '\tcout << '
              '"===================================================================================\\n";\n'
              '}\n')

Fragment(uuid='NORMALIZED-001588',
         path='/OOP1-Lab9/Source2.cpp',
         lineno=17,
         depth=2,
         type='function_decl',
         name='salesman_sum',
         text='void salesman_sum(int a[3][5])\n'
              '{\n'
              '\tint row, col, sum = 0;\n'
              '\t// finding the column sum\n'
              '\tfor (row = 0; row < 5; ++row)\n'
              '\t{\n'
              '\t\tfor (col = 0; col < 3; ++col)\n'
              '\t\t{\n'
              '\n'
              '\t\t\t// Add the element\n'
              '\t\t\tsum = sum + a[col][row];\n'
              '\t\t}\n'
              '\t\t// Print the column sum\n'
              '\t\tcout << "The Total sales of Salesman  " << row + 1 << " is '
              '" << sum << endl;\n'
              '\t\t// Reset the sum\n'
              '\t\tsum = 0;\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001589',
         path='/OOP1-Lab9/Source2.cpp',
         lineno=36,
         depth=2,
         type='function_decl',
         name='sales_sum',
         text='void sales_sum(int a[3][5])\n'
              '{\n'
              '\tint sum = 0;\n'
              '\tfor (int row = 0; row < 3; row++)\n'
              '\t{\n'
              '\t\tfor (int col = 0; col < 5; col++)\n'
              '\t\t{\n'
              '\t\t\tsum += a[row][col]; // adding all arrays\n'
              '\t\t}\n'
              '\t\tcout << "The Total sales of Product " << row + 1 << " is " '
              '<< sum << endl;\n'
              '\t\tsum = 0; // reset the sum\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001590',
         path='/OOP1-Lab9/Source2.cpp',
         lineno=50,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tmain_menu_view1();\n'
              '\tint a[3][5];\n'
              '\t// inputting numbers for the 2D array\n'
              '\tcout << "Please input 5 Sales for Salesman 1, Salesman 2 and '
              'Salesman 3: \\n ";\n'
              '\tfor (int row = 0; row < 3; row++)\n'
              '\t{\n'
              '\t\tfor (int col = 0; col < 5; col++)\n'
              '\t\t{\n'
              '\t\t\tcin >> a[row][col];\n'
              '\t\t}\n'
              '\t}\n'
              '\tcout << "Main table of Salesman and Sales: \\n";\n'
              '\tfor (int row = 0; row < 3; row++)\n'
              '\t{\n'
              '\t\tfor (int col = 0; col < 5; col++)\n'
              '\t\t{\n'
              '\t\t\tcout << a[row][col] << "  ";\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\tsalesman_sum(a);\n'
              '\tcout << endl;\n'
              '\tsales_sum(a);\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001591',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2-FA/city_temperature_control.cpp\n'
              '  Classes: City, CityHumidity, CityRainFall, CityTemperature\n'
              '  Functions: CityHumidityInfo, CityRainFallInfo, '
              'CityTemperatureInfo, main\n')

Fragment(uuid='NORMALIZED-001592',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=11,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001593',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=13,
         depth=2,
         type='function_decl',
         name='main',
         text='')

Fragment(uuid='NORMALIZED-001594',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=14,
         depth=2,
         type='function_decl',
         name='CityTemperatureInfo',
         text='')

Fragment(uuid='NORMALIZED-001595',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=15,
         depth=2,
         type='function_decl',
         name='CityRainFallInfo',
         text='')

Fragment(uuid='NORMALIZED-001596',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=16,
         depth=2,
         type='function_decl',
         name='CityHumidityInfo',
         text='')

Fragment(uuid='NORMALIZED-001597',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=18,
         depth=2,
         type='class_decl',
         name='City',
         text='class City {\n'
              'protected:\n'
              '\tint cityID; \n'
              '\tstring cityName;\n'
              '\tdouble cityClimateDate[12];\n'
              '\n'
              'public:\n'
              '\t// inputing the data for ID and name\n'
              '\tvoid input() {\n'
              '\t\tcout << "Enter ID of the city: ";\n'
              '\t\tcin >> cityID;\n'
              '\t\tcout << "Enter Name of the city: ";\n'
              '\t\tcin >> cityName;\n'
              '\t}\n'
              '\n'
              '\tint getCityID() { \n'
              '\t\treturn cityID;\n'
              '\t}\n'
              '\n'
              '\tvoid setCityID(int cityID) { \n'
              '\t\tthis->cityID = cityID;\n'
              '\t}\n'
              '\n'
              '\tstring getCityName() { \n'
              '\t\treturn cityName;\n'
              '\t}\n'
              '\n'
              '\tvoid setCityName(string cityName) {\n'
              '\t\tthis->cityName = cityName;\n'
              '\t}\n'
              '\n'
              '\t// diplaying with the binary files\n'
              '\tvoid GetData() {\n'
              '\t\tcout << "ID        NAME         J   F   M   A   M   I   I   '
              'A   S   O   N   D\\n";\n'
              '\t\tcout << left << setw(10) << cityID << setw(10) << cityName '
              '<< "   ";\n'
              '\t}\n'
              '\n'
              '\tvirtual void setClimateData() = 0; // virtual functions\n'
              '\tvirtual void getClimateData() = 0;\n'
              '\n'
              '};\n')

Fragment(uuid='NORMALIZED-001598',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=60,
         depth=2,
         type='class_decl',
         name='CityTemperature',
         text='class CityTemperature : public City\n'
              '{\n'
              'protected:\n'
              '\tdouble average = 0;\n'
              '\n'
              'public:\n'
              '\n'
              '\tvoid setClimateData() {\n'
              '\t\taverage = 0;\n'
              '\t\tCity::input();\n'
              '\n'
              '\t\tcout << "Enter Temperature Degree:  " << endl;\n'
              '\n'
              '\t\tfor (int i = 0; i < 12; i++) {\n'
              '\t\t\tcout  << i+1 << " Month: ";\n'
              '\n'
              '\t\t\tcin >> cityClimateDate[i];\n'
              '\t\t\t // validation check\n'
              '\t\t\tif (cityClimateDate[i] > -60 && cityClimateDate[i] < 60) '
              '{\n'
              '\t\t\t\taverage = average + cityClimateDate[i];\n'
              '\t\t\t}\n'
              '\t\t\telse { \n'
              '\t\t\t\tcout << "Please check your input! " << endl;\n'
              '\t\t\t\ti--; // checking and returning\n'
              '\t\t\t}\n'
              '\t\t} // for ends\n'
              '\n'
              '\t}\n'
              '\n'
              '\t// for displaying from file\n'
              '\tvoid getClimateData() {\n'
              '\n'
              '\t\tCity::GetData();\n'
              '\n'
              '\t\tint array = 0;\n'
              '\t\tfor (int i = 0; i < 4; i++) {\n'
              '\t\t\tfor (int j = 0; j < 3; j++) {\n'
              '\t\t\t\tcout << cityClimateDate[array] << "   ";\n'
              '\t\t\t\tarray++;\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t\t// claculating the average temperature\n'
              '\t\tcout << "\\nAverage Temperature: " << average / 12.0 << '
              'endl << endl; \n'
              '\t\tarray = 0;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001599',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=108,
         depth=2,
         type='class_decl',
         name='CityRainFall',
         text='class CityRainFall : public City\n'
              '{\n'
              'protected:\n'
              '\tdouble average = 0; // average for calculating\n'
              '\n'
              'public:\n'
              '\n'
              '\tvoid setClimateData() {\n'
              '\t\taverage = 0;\n'
              '\t\tCity::input();\n'
              '\n'
              '\t\tcout << "Enter Rainfall Degree:  " << endl;\n'
              '\n'
              '\t\tfor (int i = 0; i < 12; i++) {\n'
              '\t\t\tcout << i+1 << " Month: ";\n'
              '\n'
              '\t\t\tcin >> cityClimateDate[i];\n'
              '\n'
              '\t\t\tif (cityClimateDate[i] > 0 && cityClimateDate[i] < 300) '
              '{\n'
              '\t\t\t\taverage = average + cityClimateDate[i];\n'
              '\t\t\t}\n'
              '\t\t\telse {\n'
              '\t\t\t\tcout << "Please check your input! " << endl;\n'
              '\t\t\t\ti--; // checking and returning\n'
              '\t\t\t}\n'
              '\t\t} // for ends\n'
              '\n'
              '\t}\n'
              '\n'
              '\tvoid getClimateData() {\n'
              '\n'
              '\t\tCity::GetData();\n'
              '\n'
              '\t\tint array = 0;\n'
              '\t\tfor (int i = 0; i < 4; i++) {\n'
              '\t\t\tfor (int j = 0; j < 3; j++) {\n'
              '\t\t\t\tcout << cityClimateDate[array] << "   ";\n'
              '\t\t\t\tarray++;\n'
              '\t\t\t}\n'
              '\t\t\t;\n'
              '\t\t}\n'
              '\t\tcout << "\\nAverage Rainfall: " << average / 12.0 << endl '
              '<< endl;\n'
              '\t\tarray = 0;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001600',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=155,
         depth=2,
         type='class_decl',
         name='CityHumidity',
         text='class CityHumidity : public City\n'
              '{\n'
              'protected:\n'
              '\tdouble average = 0;\n'
              '\n'
              'public:\n'
              '\n'
              '\tvoid setClimateData() {\n'
              '\t\taverage = 0;\n'
              '\t\tCity::input();\n'
              '\n'
              '\t\tcout << "Enter Humidity Degree:  " << endl;\n'
              '\n'
              '\t\tfor (int i = 0; i < 12; i++) {\n'
              '\t\t\tcout << i+1 << " Month: ";\n'
              '\n'
              '\t\t\tcin >> cityClimateDate[i];\n'
              '\n'
              '\t\t\tif (cityClimateDate[i] > 0 && cityClimateDate[i] < 500) '
              '{\n'
              '\t\t\t\taverage = average + cityClimateDate[i];\n'
              '\t\t\t}\n'
              '\t\t\telse {\n'
              '\t\t\t\tcout << "Please check your input! " << endl;\n'
              '\t\t\t\ti--; // checking and returning\n'
              '\t\t\t}\n'
              '\t\t} // for ends\n'
              '\n'
              '\t}\n'
              '\n'
              '\tvoid getClimateData() {\n'
              '\n'
              '\t\tCity::GetData();\n'
              '\n'
              '\t\tint array = 0;\n'
              '\t\tfor (int i = 0; i < 4; i++) {\n'
              '\t\t\tfor (int j = 0; j < 3; j++) {\n'
              '\t\t\t\tcout << cityClimateDate[array] << "   ";\n'
              '\t\t\t\tarray++;\n'
              '\t\t\t}\n'
              '\t\t\t\n'
              '\t\t}\n'
              '\t\tcout << "\\nAverage Humidity: " << average / 12.0 << endl '
              '<< endl;\n'
              '\t\tarray = 0;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001601',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=201,
         depth=2,
         type='function_decl',
         name='CityTemperatureInfo',
         text='void CityTemperatureInfo() {\n'
              '\n'
              '\tCityTemperature Temperature; // creating an object\n'
              '\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\n'
              '\t\tcout << "City Temperature Information: \\n";\n'
              '\t\tcout << "1. Add\\n";\n'
              '\t\tcout << "2. Update\\n";\n'
              '\t\tcout << "3. Delete\\n";\n'
              '\t\tcout << "0. Go Back\\n";\n'
              '\n'
              '\t\tcout << "Your choice: \\n";\n'
              '\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase '1': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "ADD DATA TO CITY\\n";\n'
              '\t\t\tcout << "Enter temperature data of city: " << endl;\n'
              '\t\t\t// Add to List\n'
              '\t\t\tofstream outTemperature("Temperature", ios::binary | '
              'ios::app); // opening a binary file\n'
              '\t\t\tTemperature.setClimateData();\n'
              '\t\t\t// writing data to file\n'
              '\t\t\toutTemperature.write((char*)&Temperature, '
              'sizeof(CityTemperature));\n'
              '\t\t\toutTemperature.close();\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '2': {\n"
              '\t\t\tsystem("cls");\n'
              '\n'
              '\t\t\tifstream inP("Temperature", ios::binary);\n'
              '\t\t\twhile (inP.read((char*)&Temperature, '
              'sizeof(CityTemperature))) {\n'
              '\t\t\t\tTemperature.getClimateData();\n'
              '\t\t\t}\n'
              '\t\t\tinP.close();\t\t\t// closing the files after execution\n'
              '\n'
              '\t\t\t// searching the city by its ID\n'
              '\t\t\tint ID;\n'
              '\t\t\tcout << "\\nEnter ID of city which you want to delete: '
              '";\n'
              '\t\t\tcin >> ID;\n'
              '\n'
              '\t\t\tifstream inTemperature1;\n'
              '\t\t\tinTemperature1.open("Temperature", ios::binary);\n'
              '\t\t\twhile (inTemperature1.read((char*)&Temperature, '
              'sizeof(CityTemperature))) {\n'
              '\t\t\t\tif (ID == Temperature.getCityID()) {\n'
              '\t\t\t\t\tTemperature.getClimateData();\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tinTemperature1.close();\n'
              '\n'
              '\t\t\tofstream inTemperatureTemp1("TemperatureTemp", '
              'ios::binary);\n'
              '\t\t\tifstream inTemperature("Temperature", ios::binary);\n'
              '\t\t\t// reading file\n'
              '\t\t\twhile (inTemperature1.read((char*)&Temperature, '
              'sizeof(CityTemperature))) {\n'
              '\t\t\t\tif (ID != Temperature.getCityID()) {\n'
              '\t\t\t\t\tinTemperatureTemp1.write((char*)&Temperature, '
              'sizeof(CityTemperature));\n'
              '\t\t\t\t}\n'
              '\n'
              '\t\t\t}\n'
              '\t\t\tinTemperature1.close();\n'
              '\t\t\tinTemperatureTemp1.close();\n'
              '\t\t\t\n'
              '\t\t\t// removing and renaming the files\n'
              '\t\t\tremove("Temperature");\n'
              '\t\t\trename("TemperatureTemp", "Temperature");\n'
              '\n'
              '\t\t\tofstream out;\n'
              '\t\t\tout.open("Temperature", ios::binary | ios::app);\n'
              '\t\t\tcout << "Update data:" << endl;\n'
              '\t\t\tTemperature.setClimateData();\n'
              '\t\t\tout.write((char*)&Temperature, sizeof(CityTemperature));\n'
              '\t\t\tout.close();\n'
              '\t\t\tcout << "\\nSuccessfully updated" << endl;\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '3': {\n"
              '\t\t\tsystem("cls");\n'
              '\n'
              '\t\t\tcout << "DELETING DATA FROM CITY\\n";\n'
              '\n'
              '\t\t\tifstream inP("Temperature", ios::binary);\n'
              '\t\t\twhile (inP.read((char*)&Temperature, '
              'sizeof(CityTemperature))) {\n'
              '\t\t\t\tTemperature.getClimateData();\n'
              '\t\t\t}\n'
              '\t\t\tinP.close();\t\t\t// closing the files after execution\n'
              '\t\t\t// searching the city by its ID\n'
              '\t\t\tint ID;\n'
              '\t\t\tcout << "Enter ID of city which you want to delete: ";\n'
              '\t\t\tcin >> ID;\n'
              '\n'
              '\t\t\tofstream outTemperatureTemp("TemperatureTemp", '
              'ios::binary);\n'
              '\t\t\tifstream inTemperature("Temperature", ios::binary);\n'
              '\t\t\twhile (inTemperature.read((char*)&Temperature, '
              'sizeof(CityTemperature))) {\n'
              '\t\t\t\tif (ID != Temperature.getCityID()) {\n'
              '\t\t\t\t\toutTemperatureTemp.write((char*)&Temperature, '
              'sizeof(CityTemperature));\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tinTemperature.close();\n'
              '\t\t\toutTemperatureTemp.close();\n'
              '\n'
              '\t\t\tremove("Temperature");\n'
              '\t\t\trename("TemperatureTemp", "Temperature");\n'
              '\n'
              '\t\t\tcout << "\\nSuccessfully deleted" << endl;\n'
              '\t\t\tcout << "The new list:\\n";\n'
              '\n'
              '\t\t\tifstream inP2("Temperature", ios::binary);\n'
              '\t\t\twhile (inP2.read((char*)&Temperature, '
              'sizeof(CityTemperature))) {\n'
              '\t\t\t\tTemperature.getClimateData();\n'
              '\t\t\t}\n'
              '\t\t\tinP2.close();\t\t\t// closing the files after execution\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '0': {\n"
              '\t\t\tmain();\n'
              '\t\t}break;\n'
              '\n'
              '\n'
              '\t\tdefault: {\n'
              '\t\t\tcout << "Your choice is not available in menu!\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t} // switch\n'
              '\n'
              '\t} // for loop\n'
              '\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-001602',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=339,
         depth=2,
         type='function_decl',
         name='CityRainFallInfo',
         text='void CityRainFallInfo() {\n'
              '\n'
              '\tCityRainFall R;\n'
              '\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\n'
              '\t\tcout << "City RainFall Information: \\n";\n'
              '\t\tcout << "1. Add\\n";\n'
              '\t\tcout << "2. Update\\n";\n'
              '\t\tcout << "3. Delete\\n";\n'
              '\t\tcout << "4. Displaying all\\n";\n'
              '\t\tcout << "0. Go Back\\n";\n'
              '\n'
              '\t\tcout << "Your choice: \\n";\n'
              '\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase '1': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "ADD DATA TO CITY\\n";\n'
              '\t\t\tcout << "Enter RainFall data of city: " << endl;\n'
              '\t\t\t// Add to List\n'
              '\t\t\tofstream outR("R", ios::binary | ios::app);\n'
              '\t\t\tR.setClimateData();\n'
              '\t\t\toutR.write((char*)&R, sizeof(CityRainFall));\n'
              '\t\t\toutR.close();\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '2': {\n"
              '\t\t\tsystem("cls");\n'
              '\n'
              '\t\t\tifstream inP("R", ios::binary);\n'
              '\t\t\twhile (inP.read((char*)&R, sizeof(CityRainFall))) {\n'
              '\t\t\t\tR.getClimateData();\n'
              '\t\t\t}\n'
              '\t\t\tinP.close();\t\t\t// closing the files after execution\n'
              '\n'
              '\t\t\t// searching the city by its ID\n'
              '\t\t\tint ID;\n'
              '\t\t\tcout << "\\nEnter ID of city which you want to delete: '
              '";\n'
              '\t\t\tcin >> ID;\n'
              '\n'
              '\t\t\tifstream inR1;\n'
              '\t\t\tinR1.open("R", ios::binary);\n'
              '\t\t\twhile (inR1.read((char*)&R, sizeof(CityRainFall))) {\n'
              '\t\t\t\tif (ID == R.getCityID()) {\n'
              '\t\t\t\t\tR.getClimateData();\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tinR1.close();\n'
              '\n'
              '\t\t\tofstream inRTemp1("RTemp", ios::binary);\n'
              '\t\t\tifstream inR("R", ios::binary);\n'
              '\t\t\twhile (inR1.read((char*)&R, sizeof(CityRainFall))) {\n'
              '\t\t\t\tif (ID != R.getCityID()) {\n'
              '\t\t\t\t\tinRTemp1.write((char*)&R, sizeof(CityRainFall));\n'
              '\t\t\t\t}\n'
              '\n'
              '\t\t\t}\n'
              '\t\t\tinR1.close();\n'
              '\t\t\tinRTemp1.close();\n'
              '\n'
              '\t\t\tremove("R");\n'
              '\t\t\trename("RTemp", "R");\n'
              '\n'
              '\t\t\tofstream out;\n'
              '\t\t\tout.open("R", ios::binary | ios::app);\n'
              '\t\t\tcout << "Update data:" << endl;\n'
              '\t\t\tR.setClimateData();\n'
              '\t\t\tout.write((char*)&R, sizeof(CityRainFall));\n'
              '\t\t\tout.close();\n'
              '\t\t\tcout << "\\nSuccessfully updated" << endl;\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '3': {\n"
              '\t\t\tsystem("cls");\n'
              '\n'
              '\t\t\tcout << "DELETING DATA FROM CITY\\n";\n'
              '\n'
              '\t\t\tifstream inP("R", ios::binary);\n'
              '\t\t\twhile (inP.read((char*)&R, sizeof(CityRainFall))) {\n'
              '\t\t\t\tR.getClimateData();\n'
              '\t\t\t}\n'
              '\t\t\tinP.close();\t\t\t// closing the files after execution\n'
              '\t\t\t// searching the city by its ID\n'
              '\t\t\tint ID;\n'
              '\t\t\tcout << "Enter ID of city which you want to delete: ";\n'
              '\t\t\tcin >> ID;\n'
              '\n'
              '\t\t\tofstream outRTemp("RTemp", ios::binary);\n'
              '\t\t\tifstream inR("R", ios::binary);\n'
              '\t\t\twhile (inR.read((char*)&R, sizeof(CityRainFall))) {\n'
              '\t\t\t\tif (ID != R.getCityID()) {\n'
              '\t\t\t\t\toutRTemp.write((char*)&R, sizeof(CityRainFall));\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tinR.close();\n'
              '\t\t\toutRTemp.close();\n'
              '\n'
              '\t\t\tremove("R");\n'
              '\t\t\trename("RTemp", "R");\n'
              '\n'
              '\t\t\tcout << "\\nSuccessfully deleted" << endl;\n'
              '\t\t\tcout << "The new list:\\n";\n'
              '\n'
              '\t\t\tifstream inP2("R", ios::binary);\n'
              '\t\t\twhile (inP2.read((char*)&R, sizeof(CityRainFall))) {\n'
              '\t\t\t\tR.getClimateData();\n'
              '\t\t\t}\n'
              '\t\t\tinP2.close();\t\t\t// closing the files after execution\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '0': {\n"
              '\t\t\tmain();\n'
              '\t\t}break;\n'
              '\n'
              '\n'
              '\t\tdefault: {\n'
              '\t\t\tcout << "Your choice is not available in menu!\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t} // switch\n'
              '\n'
              '\t} // for loop\n'
              '\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-001603',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=475,
         depth=2,
         type='function_decl',
         name='CityHumidityInfo',
         text='void CityHumidityInfo() {\n'
              '\n'
              '\tCityHumidity Humidity;\n'
              '\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\n'
              '\t\tcout << "City Humidity Information: \\n";\n'
              '\t\tcout << "1. Add\\n";\n'
              '\t\tcout << "2. Update\\n";\n'
              '\t\tcout << "3. Delete\\n";\n'
              '\t\tcout << "0. Go Back\\n";\n'
              '\n'
              '\t\tcout << "Your choice: \\n";\n'
              '\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase '1': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "ADD DATA TO CITY\\n";\n'
              '\t\t\tcout << "Enter Humidity data of city: " << endl;\n'
              '\t\t\t// Add to List\n'
              '\t\t\tofstream outHumidity("Humidity", ios::binary | '
              'ios::app);\n'
              '\t\t\tHumidity.setClimateData();\n'
              '\t\t\toutHumidity.write((char*)&Humidity, '
              'sizeof(CityHumidity));\n'
              '\t\t\toutHumidity.close();\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '2': {\n"
              '\t\t\tsystem("cls");\n'
              '\n'
              '\t\t\tifstream inP("Humidity", ios::binary);\n'
              '\t\t\twhile (inP.read((char*)&Humidity, sizeof(CityHumidity))) '
              '{\n'
              '\t\t\t\tHumidity.getClimateData();\n'
              '\t\t\t}\n'
              '\t\t\tinP.close();\t\t\t// closing the files after execution\n'
              '\n'
              '\t\t\t// searching the city by its ID\n'
              '\t\t\tint ID;\n'
              '\t\t\tcout << "\\nEnter ID of city which you want to delete: '
              '";\n'
              '\t\t\tcin >> ID;\n'
              '\n'
              '\t\t\tifstream inHumidity1;\n'
              '\t\t\tinHumidity1.open("Humidity", ios::binary);\n'
              '\t\t\twhile (inHumidity1.read((char*)&Humidity, '
              'sizeof(CityHumidity))) {\n'
              '\t\t\t\tif (ID == Humidity.getCityID()) {\n'
              '\t\t\t\t\tHumidity.getClimateData();\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tinHumidity1.close();\n'
              '\n'
              '\t\t\tofstream inHumidityTemp1("HumidityTemp", ios::binary);\n'
              '\t\t\tifstream inHumidity("Humidity", ios::binary);\n'
              '\t\t\twhile (inHumidity1.read((char*)&Humidity, '
              'sizeof(CityHumidity))) {\n'
              '\t\t\t\tif (ID != Humidity.getCityID()) {\n'
              '\t\t\t\t\tinHumidityTemp1.write((char*)&Humidity, '
              'sizeof(CityHumidity));\n'
              '\t\t\t\t}\n'
              '\n'
              '\t\t\t}\n'
              '\t\t\tinHumidity1.close();\n'
              '\t\t\tinHumidityTemp1.close();\n'
              '\n'
              '\t\t\tremove("Humidity");\n'
              '\t\t\trename("HumidityTemp", "Humidity");\n'
              '\n'
              '\t\t\tofstream out;\n'
              '\t\t\tout.open("Humidity", ios::binary | ios::app);\n'
              '\t\t\tcout << "Update data:" << endl;\n'
              '\t\t\tHumidity.setClimateData();\n'
              '\t\t\tout.write((char*)&Humidity, sizeof(CityHumidity));\n'
              '\t\t\tout.close();\n'
              '\t\t\tcout << "\\nSuccessfully updated" << endl;\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '3': {\n"
              '\t\t\tsystem("cls");\n'
              '\n'
              '\t\t\tcout << "DELETING DATA FROM CITY\\n";\n'
              '\n'
              '\t\t\tifstream inP("Humidity", ios::binary);\n'
              '\t\t\twhile (inP.read((char*)&Humidity, sizeof(CityHumidity))) '
              '{\n'
              '\t\t\t\tHumidity.getClimateData();\n'
              '\t\t\t}\n'
              '\t\t\tinP.close();\t\t\t// closing the files after execution\n'
              '\t\t\t// searching the city by its ID\n'
              '\t\t\tint ID;\n'
              '\t\t\tcout << "Enter ID of city which you want to delete: ";\n'
              '\t\t\tcin >> ID;\n'
              '\n'
              '\t\t\tofstream outHumidityTemp("HumidityTemp", ios::binary);\n'
              '\t\t\tifstream inHumidity("Humidity", ios::binary);\n'
              '\t\t\twhile (inHumidity.read((char*)&Humidity, '
              'sizeof(CityHumidity))) {\n'
              '\t\t\t\tif (ID != Humidity.getCityID()) {\n'
              '\t\t\t\t\toutHumidityTemp.write((char*)&Humidity, '
              'sizeof(CityHumidity));\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tinHumidity.close();\n'
              '\t\t\toutHumidityTemp.close();\n'
              '\n'
              '\t\t\tremove("Humidity");\n'
              '\t\t\trename("HumidityTemp", "Humidity");\n'
              '\n'
              '\t\t\tcout << "\\nSuccessfully deleted" << endl;\n'
              '\t\t\tcout << "The new list:\\n";\n'
              '\n'
              '\t\t\tifstream inP2("R", ios::binary);\n'
              '\t\t\twhile (inP2.read((char*)&Humidity, sizeof(CityRainFall))) '
              '{\n'
              '\t\t\t\tHumidity.getClimateData();\n'
              '\t\t\t}\n'
              '\t\t\tinP2.close();\t\t\t// closing the files after execution\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '0': {\n"
              '\t\t\tmain();\n'
              '\t\t}break;\n'
              '\n'
              '\n'
              '\t\tdefault: {\n'
              '\t\t\tcout << "Your choice is not available in menu!\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\t   break;\n'
              '\t\t} // switch\n'
              '\n'
              '\t} // for loop\n'
              '\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-001604',
         path='/OOP2-FA/city_temperature_control.cpp',
         lineno=610,
         depth=2,
         type='function_decl',
         name='main',
         text='int main() {\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\t\t\n'
              '\t\tcout << "Main Menu: \\n";\n'
              '\t\tcout << "1. City temperature information\\n";\n'
              '\t\tcout << "2. City rainfall information\\n";\n'
              '\t\tcout << "3. City humadity information\\n";\n'
              '\t\tcout << "4. Dispalaying all\\n";\n'
              '\t\n'
              '\t\tcout << "Your choice: \\n";\n'
              '\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\t\n'
              "\t\tcase '1': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tCityTemperatureInfo();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '2': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tCityRainFallInfo();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '3': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tCityHumidityInfo();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '4':{\n"
              '\t\tsystem("cls");\n'
              '\t\tcout << "DISPLAYING ALL\\n";\n'
              '\t\t/*CityTemperature Temperature1; // creating an object\n'
              '\t\tCityRainFall R1;\n'
              '\t\tCityHumidity Humidity1;\n'
              '\n'
              '\t\tcout << "TEMPERATURE:\\n";\n'
              '\t\tifstream inP("Temperature", ios::binary);\n'
              '\t\twhile (inP.read((char*)&Temperature1, '
              'sizeof(CityTemperature))) {\n'
              '\t\t\tTemperature1.getClimateData();\n'
              '\t\t}\n'
              '\t\tinP.close();\t\t\t// closing the files after execution\n'
              '\n'
              '\t\tcout << "RAINFALL:\\n";\n'
              '\t\tifstream inP1("R", ios::binary);\n'
              '\t\twhile (inP1.read((char*)&R1, sizeof(CityRainFall))) {\n'
              '\t\t\tR1.getClimateData();\n'
              '\t\t}\n'
              '\t\tinP1.close();\t\t\t// closing the files after execution\n'
              '\n'
              '\t\tcout << "HUMIDITY:\\n";\n'
              '\t\tifstream inP2("R", ios::binary);\n'
              '\t\twhile (inP2.read((char*)&Humidity1, sizeof(CityRainFall))) '
              '{\n'
              '\t\t\tHumidity1.getClimateData();\n'
              '\t\t}\n'
              '\t\tinP2.close();\t\t\t// closing the files after execution*/\n'
              '\n'
              '\n'
              '\t\tsystem("pause");\n'
              '\n'
              '\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\t\n'
              '\t\tdefault: {\n'
              '\t\t\tcout << "Your choice is not available in menu!\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\t\tbreak;\n'
              '\t\t} // switch\n'
              '\n'
              '\t} // for loop\n'
              '\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-001605',
         path='/OOP2-FA/e-commerce.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2-FA/e-commerce.cpp\n'
              '  Classes: FreshGroceries, Item, PackedGroceries\n'
              '  Functions: Purchase, main\n')

Fragment(uuid='NORMALIZED-001606',
         path='/OOP2-FA/e-commerce.cpp',
         lineno=17,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001607',
         path='/OOP2-FA/e-commerce.cpp',
         lineno=19,
         depth=2,
         type='function_decl',
         name='main',
         text='')

Fragment(uuid='NORMALIZED-001608',
         path='/OOP2-FA/e-commerce.cpp',
         lineno=22,
         depth=2,
         type='class_decl',
         name='Item',
         text='class Item { // class ITEM which includes the name and '
              'universal item code\n'
              'protected: \n'
              '\tstring name;\n'
              '\tstring UIC;\n'
              'public:\n'
              '\tItem() { // default constructor\n'
              '\t\tname = "Unknown";\n'
              '\t\tUIC = "Unknown";\n'
              '\t}\n'
              '\n'
              '\tItem(string name, string UIC) { // parametirized constructor\n'
              '\t\tthis->name = name;\n'
              '\t\tthis->UIC = UIC;\n'
              '\t}\n'
              '\n'
              '\tvoid set_name(string name) { // function for inputing the '
              'name of item\n'
              '\t\tthis->name = name;\n'
              '\t}\n'
              '\n'
              '\tvoid set_UIC(string UIC) {\n'
              '\t\tthis->UIC = UIC;\n'
              '\t}\n'
              '\n'
              '\tstring get_name() {\n'
              '\t\treturn name;\n'
              '\t}\n'
              '\n'
              '\tstring get_UIC() {\n'
              '\t\treturn UIC;\n'
              '\t}\n'
              '\n'
              '\tvoid virtual display() {\n'
              '\t\tcout << left << setw(20) << name << setw(15) << UIC;\n'
              '\t}\n'
              '\n'
              '\tvoid virtual input() {\n'
              '\t\tcout << "Enter the name of a new product: ";\n'
              '\t    cin >> name;\n'
              '\t\tcout << "Enter the UIC of a new product: ";\n'
              '\t\tcin >> UIC;\n'
              '\t}\n'
              '\n'
              '};\n')

Fragment(uuid='NORMALIZED-001609',
         path='/OOP2-FA/e-commerce.cpp',
         lineno=67,
         depth=2,
         type='class_decl',
         name='PackedGroceries',
         text='class PackedGroceries : public Item {\n'
              '\n'
              'private:\n'
              '\tdouble price;\n'
              '\tint quantity;\n'
              '\tint quantity_purchased;\n'
              'public:\n'
              '\t\n'
              '\tPackedGroceries() {\n'
              '\t\tprice = 0.0;\n'
              '\t\tquantity = 0;\n'
              '\t\tquantity_purchased = 0;\n'
              '\t}\n'
              '\n'
              '\tPackedGroceries(string name, string UIC, double price, int '
              'quantity, int quantity_purchased) : Item(name, UIC) {\n'
              '\t\tthis->price = price;\n'
              '\t\tthis->quantity = quantity;\n'
              '\t\tthis->quantity_purchased = quantity_purchased;\n'
              '\t}\n'
              '\n'
              '\tvoid display() {\n'
              '\t    Item::display();\n'
              '\t\tcout << left << setw(20) << price << setw(15) << quantity '
              '<< endl;\n'
              '\t}\n'
              '\n'
              '\tvoid input() {\n'
              '\t\tItem::input();\n'
              '\t\tcout << "Enter the price of a new product: ";\n'
              '\t\tcin >> price;\n'
              '\t\tcout << "Enter the quantity of a new product: ";\n'
              '\t\tcin >> quantity;\n'
              '\t}\n'
              '\n'
              '\tvoid set_quantity(int quantity) {\n'
              '\t\tthis->quantity = quantity;\n'
              '\t}\n'
              '\n'
              '\tint get_quantity() {\n'
              '\t\treturn quantity;\n'
              '\t}\n'
              '\n'
              '\tdouble get_price() {\n'
              '\t\treturn price;\n'
              '\t}\n'
              '\n'
              '\tvoid set_quantity_p(int quantity_purchased) {\n'
              '\t\tthis->quantity_purchased = quantity_purchased;\n'
              '\t}\n'
              '\n'
              '\tint get_quantity_p() {\n'
              '\t\tquantity_purchased++;\n'
              '\t\tquantity--;\n'
              '\t\treturn quantity_purchased;\n'
              '\t}\n'
              '\n'
              '};\n')

Fragment(uuid='NORMALIZED-001610',
         path='/OOP2-FA/e-commerce.cpp',
         lineno=125,
         depth=2,
         type='class_decl',
         name='FreshGroceries',
         text='class FreshGroceries : public Item {\n'
              'private:\n'
              '\tdouble price;\n'
              '\tint quantity;\n'
              '\tint quantity_purchased;\n'
              '\n'
              'public:\n'
              '\n'
              '\tFreshGroceries() {\n'
              '\t\tprice = 0.0;\n'
              '\t\tquantity = 0;\n'
              '\t\tquantity_purchased = 0;\n'
              '\t}\n'
              '\n'
              '\tFreshGroceries(string name, string UIC, double price, int '
              'quantity, int quantity_purchased) : Item(name, UIC) {\n'
              '\t\tthis->price = price;\n'
              '\t\tthis->quantity = quantity;\n'
              '\t\tthis->quantity_purchased = quantity_purchased;\n'
              '\t}\n'
              '\n'
              '\tvoid display() {\n'
              '\t\tItem::display();\n'
              '\t\tcout << left << setw(20) << price << setw(15) << quantity '
              '<< endl;\n'
              '\n'
              '\t}\n'
              '\n'
              '\tint get_quantity() {\n'
              '\t\treturn quantity;\n'
              '\t}\n'
              '\n'
              '\tdouble get_price() {\n'
              '\t\treturn price;\n'
              '\t}\n'
              '\n'
              '\tint get_quantity_p() {\n'
              '\t\tquantity--;\n'
              '\t\tquantity_purchased++;\n'
              '\t\treturn quantity_purchased;\n'
              '\t}\n'
              '\n'
              '\tvoid input() {\n'
              '\t\tItem::input();\n'
              '\t\tcout << "Enter the price of a new product: ";\n'
              '\t\tcin >> price;\n'
              '\t\tcout << "Enter the quantity of a new product: ";\n'
              '\t\tcin >> quantity;\n'
              '\t}\n'
              '\n'
              '};\n')

Fragment(uuid='NORMALIZED-001611',
         path='/OOP2-FA/e-commerce.cpp',
         lineno=175,
         depth=2,
         type='function_decl',
         name='Purchase',
         text='void Purchase(){\n'
              '\tPackedGroceries p; // declaration of object PackedGroceries\n'
              '\tFreshGroceries f; // declaration of object for class '
              'FreshGroceri\n'
              '\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\n'
              '\t\tstring UIC; // UIC for serching the product from the file\n'
              '\n'
              '\t\tofstream outBill("Bill", ios::binary | ios::app);\n'
              '\n'
              '\t\tcout << "Second Main Menu: \\n";\n'
              '\t\tcout << "1. Go to Packed Groceries\\n";\n'
              '\t\tcout << "2. Go to Fresh Groceries \\n";\n'
              '\t\tcout << "3. Bill \\n";\n'
              '\t\tcout << "0. Go Back\\n";\n'
              '\t\tcout << "Your choice: \\n";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              "\t\tcase '1': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tofstream outTempPacked("TempPacked", ios::binary | '
              'ios::app);\n'
              '\n'
              '\t\t\t// listing the products which exist\n'
              '\t\t\tifstream inPacked1("Packed", ios::binary);\n'
              '\t\t\tcout << left << setw(20) << "Name" << setw(15) << "UIC" '
              '<< setw(20) << "Price" << setw(15) << "Quantity" << endl;\n'
              '\t\t\twhile (inPacked1.read((char*)&p, '
              'sizeof(PackedGroceries))) {\n'
              '\t\t\t\tp.display();\n'
              '\t\t\t}\n'
              '\t\t\tinPacked1.close();\t\t\t// closing the files after '
              'execution\n'
              '\n'
              '\t\t\t// searching the product by its code\n'
              '\t\t\tcout << "\\nEnter the UIC of product you want to '
              'purchase: ";\n'
              '\t\t\tcin >> UIC;\n'
              '\n'
              '\t\t\tbool isFound = false; // bool for cheaking the existance '
              'of product\n'
              '\n'
              '\t\t\tifstream inPacked("Packed", ios::binary);\n'
              '\t\t\twhile (inPacked.read((char*)&p, sizeof(PackedGroceries))) '
              '{\t\n'
              '\t\t\t\t// serching from the file the product\n'
              '\t\t\t\tif (p.get_UIC() == UIC) {\n'
              '\t\t\t\t\tisFound = true;\t\n'
              '\t\t\t\t\tif (p.get_quantity() > 0) { // validation for '
              'quantity\n'
              '\t\t\t\t\t\tp.get_quantity_p(); // functions for calculating '
              'the quantities\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse if (p.get_quantity() < 0) { // quantity cannot '
              'be less than zero\n'
              '\t\t\t\t\t\tcout << "Sorry, product is over!\\n";\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\t// w\n'
              '\t\t\t\t\toutTempPacked.write((char*)&p, '
              'sizeof(PackedGroceries));\n'
              '\t\t\t\t\toutBill.write((char*)&p, sizeof(PackedGroceries));\n'
              '\n'
              '\t\t\t\t\tcout << "Successfully purchased 1 pc.\\n";\n'
              '\t\t\t\t\tcout << "Done Great\\n";\n'
              '\t\t\t\t}\t\t\n'
              '\t\t\t\telse if (p.get_UIC() != UIC) {\n'
              '\t\t\t\t\toutTempPacked.write((char*)&p, '
              'sizeof(PackedGroceries));\n'
              '\n'
              '\t\t\t\t}\n'
              '\t\t\t\telse {\n'
              '\t\t\t\t\tisFound = false;\n'
              '\t\t\t\t}\n'
              '\n'
              '\t\t\t} // switch\n'
              '\t\t\toutTempPacked.close(); // closing temp\n'
              '\t\t\tinPacked.close(); // closing packed\n'
              '\t\t\toutBill.close();\n'
              '\n'
              '\t\t\t\t\n'
              '\t\t\tif (!isFound) {\n'
              '\t\t\t\tcout << "Not Found 404 ERROR\\n";\n'
              '\t\t\t}\n'
              '\n'
              '\t\t\t// removing and renaming temp\n'
              '     \t\tremove("Packed");\n'
              '\t\t    rename("TempPacked", "Packed");\n'
              '\n'
              '\t\t\tcout << "\\n\\nThe new table: \\n";\n'
              '\t\t\t// for redisplaaying the file\n'
              '\t\t\tifstream inPacked1_2("Packed", ios::binary);\n'
              '\t\t\tcout << left << setw(20) << "Name" << setw(15) << "UIC" '
              '<< setw(20) << "Price" << setw(15) << "Quantity" << endl;\n'
              '\t\t\twhile (inPacked1_2.read((char*)&p, '
              'sizeof(PackedGroceries))) {\n'
              '\t\t\t\tp.display();\n'
              '\t\t\t}\n'
              '\t\t\tinPacked1_2.close();\t\t\t// closing the files after '
              'execution\n'
              '\t\t\tcout << endl << endl;\n'
              '\n'
              '\t\t\t\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '2': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tofstream outTempFresh("TempFresh", ios::binary | '
              'ios::app);\n'
              '\n'
              '\t\t\tifstream inFresh1("Fresh", ios::binary);\n'
              '\t\t\tcout << left << setw(20) << "Name" << setw(15) << "UIC" '
              '<< setw(20) << "Price" << setw(15) << "Quantity" << endl;\n'
              '\t\t\twhile (inFresh1.read((char*)&f, sizeof(FreshGroceries))) '
              '{\n'
              '\t\t\t\tf.display();\n'
              '\t\t\t}\n'
              '\t\t\tinFresh1.close(); \t\t\t// closing the files after '
              'execution\n'
              '\n'
              '\t\t\t// searching the product by its code\n'
              '\t\t\tcout << "\\nEnter the UIC of product you want to '
              'purchase: ";\n'
              '\t\t\tcin >> UIC;\n'
              '\n'
              '\t\t\tbool isFound2 = false;\n'
              '\t\t\tifstream inFresh("Fresh", ios::binary);\n'
              '\n'
              '\t\t\twhile (inFresh.read((char*)&f, sizeof(FreshGroceries))) '
              '{\n'
              '\t\t\t\t\tif (f.get_UIC() == UIC) {\n'
              '\t\t\t\t\t\tisFound2 = true;\n'
              '\t\t\t\t\t\tif (f.get_quantity() > 0) {\n'
              '\t\t\t\t\t\t\tf.get_quantity_p(); // functions for calculating '
              'the quantities\n'
              '\t\t\t\t\t\t}\n'
              '\t\t\t\t\t\telse if (f.get_quantity() < 0) {\n'
              '\t\t\t\t\t\t\tcout << "Sorry, product is over!\\n";\n'
              '\t\t\t\t\t\t}\n'
              '\n'
              '\t\t\t\t\t\t// storing the found data to files \n'
              '\t\t\t\t\t\t// first for Billing system\n'
              '\t\t\t\t\t\t// next for Listing\n'
              '\t\t\t\t\t    outBill.write((char*)&f, '
              'sizeof(FreshGroceries));\n'
              '\t\t\t\t\t\toutTempFresh.write((char*)&f, '
              'sizeof(FreshGroceries));\n'
              '\n'
              '\t\t\t\t\t\tcout << "Successfully purchased 1 pc.\\n";\n'
              '\t\t\t\t\t\tcout << "Done Great\\n";\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse if (f.get_UIC() != UIC) {\n'
              '\t\t\t\t\t\toutTempFresh.write((char*)&f, '
              'sizeof(FreshGroceries));\n'
              '\t\t\t\t\t}\n'
              '\t\t\t\t\telse {\n'
              '\t\t\t\t\t\tisFound2 = false;\n'
              '\t\t\t\t\t}\n'
              '\n'
              '\t\t\t\t} // switch\n'
              '\t\t\t\toutTempFresh.close(); // closing temp\n'
              '\t\t\t\tinFresh.close(); // closing packed\n'
              '\t\t\t\toutBill.close();\n'
              '\n'
              '\t\t\t\tif (!isFound2) {\n'
              '\t\t\t\t\tcout << "Not Found 404 ERROR\\n";\n'
              '\t\t\t\t}\n'
              '\n'
              '\t\t\t\t// removing and renaming temp\n'
              '\t\t\t\tremove("Fresh");\n'
              '\t\t\t\trename("TempFresh", "Fresh");\n'
              '\n'
              '\t\t\t\t// for redisplaying the table\n'
              '\t\t\t\tcout << "\\n\\nThe new table: \\n";\n'
              '\t\t\t\tifstream inFresh1_2("Fresh", ios::binary);\n'
              '\t\t\t\tcout << left << setw(20) << "Name" << setw(15) << "UIC" '
              '<< setw(20) << "Price" << setw(15) << "Quantity" << endl;\n'
              '\t\t\t\twhile (inFresh1_2.read((char*)&f, '
              'sizeof(FreshGroceries))) {\n'
              '\t\t\t\t\tf.display();\n'
              '\t\t\t\t}\n'
              '\t\t\t\tinFresh1_2.close(); \t\t\t// closing the files after '
              'execution\n'
              '\t\t\t\tcout << endl << endl;\n'
              '\n'
              '\t\t\t\t\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '3': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tdouble price_final = 0.0;\n'
              '\n'
              '\t\t\t// the billing system for Packed\n'
              '\t\t\tcout << "The billing system:\\n";\n'
              '\t\t\tifstream inBill("Bill", ios::binary);\n'
              '\t\t\tcout << left << setw(20) << "Name" << setw(15) << "UIC" '
              '<<endl;\n'
              '\t\t\twhile (inBill.read((char*)&p, sizeof(PackedGroceries))) '
              '{\n'
              '\t\t\t\tp.Item::display();\n'
              '\t\t\t\tcout << endl;\n'
              '\t\t\t\t// calculating the price\n'
              '\t\t\t\tprice_final = p.get_quantity_p() * p.get_price();\n'
              '\n'
              '\t\t\t}\n'
              '\t\t\tinBill.close();\t\t\t// closing the files after '
              'execution\n'
              '\t\t\tcout << endl << endl;\n'
              '\n'
              '\t\t\tcout << "Overall Price: " << price_final << endl << '
              'endl;\n'
              '\t\t\tcout << "Thank you for you purchase!\\n";\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '0': {\n"
              '\t\t\tmain();\n'
              '\t\t}\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\tdefault: {\n'
              '\t\t\tcout << "Your choise is not available in menu!\\nPlese, '
              'try one more time.\\n\\n";\n'
              '\t\t}\n'
              '\n'
              '\t\t} // swich ends\n'
              '\t} // for loop ends\n'
              '}\n')

Fragment(uuid='NORMALIZED-001612',
         path='/OOP2-FA/e-commerce.cpp',
         lineno=374,
         depth=2,
         type='function_decl',
         name='main',
         text='int main() {\n'
              '\tPackedGroceries p; // declaration of object PackedGroceries\n'
              '\tFreshGroceries f; // declaration of object for class '
              'FreshGroceries\n'
              '\n'
              '\tfor (int i = 0; i < 1000; i++) {\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Main Menu: \\n";\n'
              '\t\tcout << "1. List all products\\n";\n'
              '\t\tcout << "2. Add Packed Groceries \\n";\n'
              '\t\tcout << "3. Add Fresh Groceries\\n";\n'
              '\t\tcout << "4. Purchase\\n";\n'
              '\t\tcout << "Your choice: \\n";\n'
              '\n'
              '\t\tswitch (_getch()) {\n'
              "\t\tcase '1': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tifstream inPacked("Packed", ios::binary);\n'
              '\t\t\tifstream inFresh("Fresh", ios::binary);\n'
              '\n'
              '\t\t\t// displaying the list of packed products\n'
              '\t\t\tcout << left << setw(20) << "Name" << setw(15) << "UIC" '
              '<< setw(20) << "Price" << setw(15) << "Quantity" << endl;\n'
              '\t\t\twhile (inPacked.read((char*)&p, sizeof(PackedGroceries))) '
              '{\n'
              '\t\t\t\tp.display();\n'
              '\t\t\t}\n'
              '\n'
              '\t\t\t// displaying the list of fresh products\n'
              '\t\t\twhile ( inFresh.read((char*)&f, sizeof(FreshGroceries))) '
              '{\n'
              '\t\t\t\tf.display();\n'
              '\t\t\t}\n'
              '\n'
              '\t\t\t// closing the files after execution\n'
              '\t\t\tinPacked.close();\n'
              '\t\t\tinFresh.close();\t\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '2': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\t// inputing the info for the new item\n'
              '\t\t\tofstream outPacked("Packed", ios::binary | ios::app);\n'
              '\t\t\tp.input();\n'
              '\t\t\t// writing to binary file\n'
              '\t\t\toutPacked.write((char*)&p, sizeof(PackedGroceries));\n'
              '\t\t\toutPacked.close();\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '3': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tofstream outFresh("Fresh", ios::binary | ios::app);\n'
              '\t\t\t// inputing the info for the new item\n'
              '\t\t\tf.input();\n'
              '\t\t\t// writing to binary file the data inputted by user\n'
              '\t\t\toutFresh.write((char*)&f, sizeof(FreshGroceries));\n'
              '\t\t\toutFresh.close();\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '4': {\n"
              '\t\t\tPurchase(); // function for customer purchasing\n'
              '\t\t}break;\n'
              '\n'
              '\n'
              '\t\tdefault: {\n'
              '\t\t\tcout << "Your choise is not available in menu!\\nPlese, '
              'try one more time.\\n\\n";\n'
              '\t\t}\n'
              '\t\t\n'
              '\t\t} // swich ends\n'
              '\t} // for loop ends\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001613',
         path='/OOP2_Lab1/README.md',
         lineno=1,
         depth=8,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Introduction to class and object '
              'with `set()` and `get()` methods\n'
              '\n'
              '**Note: In class diagram + for public, - for private.**\n'
              '\n'
              '1. Define a class student with the following specification. \n'
              '    ```\n'
              '    Student\n'
              '    ---')

Fragment(uuid='NORMALIZED-001614',
         path='/OOP2_Lab1/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Introduction to class and object '
              'with `set()` and `get()` methods\n')

Fragment(uuid='NORMALIZED-001615',
         path='/OOP2_Lab1/README.md',
         lineno=8,
         depth=8,
         type='documentation',
         name='',
         text='\n'
              '    - Student_ID: String\n'
              '    - Student_Name: String\n'
              '    - OOP2_Score: double\n'
              '    - Maths_Score: double\n'
              '    - English_Score: double\n'
              '    - Total_Score: double\n'
              '    ---')

Fragment(uuid='NORMALIZED-001616',
         path='/OOP2_Lab1/README.md',
         lineno=15,
         depth=8,
         type='documentation',
         name='',
         text='\n'
              '    - ctotal(): Function to calculate eng + math + OOP-2 with '
              'double return type.\n'
              '    + Takedata(): Function to accept values for student id, '
              'Student Name, eng, OOP-2, maths and invoke ctotal() to '
              'calculate total.\n'
              '    + Showdata(): Function to display all the data members on '
              'the screen.\n'
              '    ```\n'
              '\n'
              '2. Write C++ header file Employee.h with class Employee with '
              'following details.\n'
              '\n'
              '    ```\n'
              '    Employee\n'
              '    ---')

Fragment(uuid='NORMALIZED-001617',
         path='/OOP2_Lab1/README.md',
         lineno=25,
         depth=8,
         type='documentation',
         name='',
         text='\n'
              '    - Employee_ID: String\n'
              '    - Employee_Name: String\n'
              '    - No_of_Hours_Work: int\n'
              '    - Rate_per_Hour: int\n'
              '    ---')

Fragment(uuid='NORMALIZED-001618',
         path='/OOP2_Lab1/README.md',
         lineno=30,
         depth=8,
         type='documentation',
         name='',
         text='\n'
              '    + setEmployee_ID(String)\n'
              '    + getEmployee_ID(): String\n'
              '    + setEmployee_Name(String)\n'
              '    + getEmployee_Name(): String\n'
              '    + setNo_of_Hours_Work(int)\n'
              '    + getNo_of_Hours_Work(): int\n'
              '    + setRate_per_Hour(int)\n'
              '    + getRate_per_Hour(): int \n'
              '    + getTotal_Monthly_Salary(): double\n'
              '    ```\n'
              '    Write C++ menu driven program to get employee details, '
              'display employee details, and display monthly salary details of '
              'employee.\n')

Fragment(uuid='NORMALIZED-001619',
         path='/OOP2_Lab1/studentCourseEvaluation.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab1/studentCourseEvaluation.cpp\n'
              '  Classes: Employee, Student\n'
              '  Functions: main\n')

Fragment(uuid='NORMALIZED-001620',
         path='/OOP2_Lab1/studentCourseEvaluation.cpp',
         lineno=4,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001621',
         path='/OOP2_Lab1/studentCourseEvaluation.cpp',
         lineno=7,
         depth=2,
         type='class_decl',
         name='Student',
         text='class Student\n'
              '{\n'
              'private:\n'
              '\tstring student_id;\n'
              '\tstring student_name;\n'
              '\tdouble OOP2_Score;\n'
              '\tdouble math_Score;\n'
              '\tdouble english_Score;\n'
              '\tdouble total_Score;\n'
              '\tdouble ctotal()\n'
              '\t{\n'
              '\t\ttotal_Score = OOP2_Score + math_Score + english_Score;\n'
              '\t\treturn total_Score;\n'
              '\t}\n'
              '\n'
              'public:\n'
              '\tvoid TakeData()\n'
              '\t{\n'
              '\t\tcout << "ID : ";\n'
              '\t\tcin >> student_id;\n'
              '\t\tcout << "Name: ";\n'
              '\t\tcin >> student_name;\n'
              '\t\tcout << "OOP2: ";\n'
              '\t\tcin >> OOP2_Score;\n'
              '\t\tcout << "Math: ";\n'
              '\t\tcin >> math_Score;\n'
              '\t\tcout << "English: ";\n'
              '\t\tcin >> english_Score;\n'
              '\t\tctotal();\n'
              '\t}\n'
              '\tvoid showData()\n'
              '\t{\n'
              '\n'
              '\t\tcout << "ID: " << student_id << endl;\n'
              '\t\tcout << "Name: " << student_name << endl;\n'
              '\t\tcout << "OOP2: " << OOP2_Score << endl;\n'
              '\t\tcout << "Math: " << math_Score << endl;\n'
              '\t\tcout << "English: " << english_Score << endl;\n'
              '\t\tcout << "Total score: " << total_Score << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001622',
         path='/OOP2_Lab1/studentCourseEvaluation.cpp',
         lineno=50,
         depth=2,
         type='class_decl',
         name='Employee',
         text='class Employee\n'
              '{\n'
              'private:\n'
              '\tstring Employee_ID;\n'
              '\tstring Employee_Name;\n'
              '\tint Hours;\n'
              '\tint Rate;\n'
              '\n'
              'public:\n'
              '\tvoid setEmployee_ID(string x)\n'
              '\t{\n'
              '\t\tEmployee_ID = x;\n'
              '\t}\n'
              '\tstring getEmployee_ID()\n'
              '\t{\n'
              '\t\treturn Employee_ID;\n'
              '\t}\n'
              '\tvoid setEmployee_Name(string y)\n'
              '\t{\n'
              '\t\tEmployee_Name = y;\n'
              '\t}\n'
              '\tstring getEmployee_Name()\n'
              '\t{\n'
              '\t\treturn Employee_Name;\n'
              '\t}\n'
              '\tvoid setHours(int z)\n'
              '\t{\n'
              '\t\tHours = z;\n'
              '\t}\n'
              '\tint getHours()\n'
              '\t{\n'
              '\t\treturn Hours;\n'
              '\t}\n'
              '\tvoid setRate(int i)\n'
              '\t{\n'
              '\t\tRate = i;\n'
              '\t}\n'
              '\tint getRate()\n'
              '\t{\n'
              '\t\treturn Rate;\n'
              '\t}\n'
              '\tdouble total_salary()\n'
              '\t{\n'
              '\t\tint total;\n'
              '\t\ttotal = Hours * Rate;\n'
              '\t\treturn total;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001623',
         path='/OOP2_Lab1/studentCourseEvaluation.cpp',
         lineno=99,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tint choice;\n'
              '\tcout << "1. Student" << endl;\n'
              '\tcout << "2. Employee" << endl;\n'
              '\tcout << "Your choice: ";\n'
              '\tcin >> choice;\n'
              '\tcout << endl;\n'
              '\n'
              '\tStudent student;   // creating an object of a class '
              '"Student"\n'
              '\tEmployee employee; // creating an object of a class '
              '"Employee"\n'
              '\tswitch (choice)\n'
              '\t{\n'
              '\tcase 1:\n'
              '\t{\n'
              '\t\tstudent.TakeData();\n'
              '\t\tcout << endl;\n'
              '\t\tstudent.showData();\n'
              '\t}\n'
              '\tbreak;\n'
              '\tcase 2:\n'
              '\t{\n'
              '\t\twhile (true)\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tint choice_employee;\n'
              '\n'
              '\t\t\tcout << "1. Input Employee Details\\n";\n'
              '\t\t\tcout << "2. Display Employee Details\\n";\n'
              '\t\t\tcout << "3. Display Salary\\n";\n'
              '\t\t\tcin >> choice_employee;\n'
              '\t\t\tswitch (choice_employee)\n'
              '\t\t\t{\n'
              '\t\t\tcase 1:\n'
              '\t\t\t{\n'
              '\t\t\t\tstring x, y;\n'
              '\t\t\t\tint z, i;\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\t\\t\\tEmployee information\\n";\n'
              '\t\t\t\tcout << "Employee_ID: ";\n'
              '\t\t\t\tcin >> x;\n'
              '\t\t\t\tcout << "Employee_Name: ";\n'
              '\t\t\t\tcin >> y;\n'
              '\t\t\t\tcout << "Number of worked Hours: ";\n'
              '\t\t\t\tcin >> z;\n'
              '\t\t\t\tcout << "Rate per Hour: ";\n'
              '\t\t\t\tcin >> i;\n'
              '\t\t\t\tcout << endl;\n'
              '\t\t\t\temployee.setEmployee_ID(x);\n'
              '\t\t\t\temployee.setEmployee_Name(y);\n'
              '\t\t\t\temployee.setHours(z);\n'
              '\t\t\t\temployee.setRate(i);\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t}\n'
              '\t\t\tbreak;\n'
              '\t\t\tcase 2:\n'
              '\t\t\t{\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "ID: " << employee.getEmployee_ID() << endl;\n'
              '\t\t\t\tcout << "Name: " << employee.getEmployee_Name() << '
              'endl;\n'
              '\t\t\t\tcout << "Hours: " << employee.getHours() << endl;\n'
              '\t\t\t\tcout << "Rate: " << employee.getRate() << endl;\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t}\n'
              '\t\t\tbreak;\n'
              '\t\t\tcase 3:\n'
              '\t\t\t{\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "Total salary: " << employee.total_salary() << '
              'endl;\n'
              '\t\t\t\tsystem("pause");\n'
              '\t\t\t}\n'
              '\t\t\tbreak;\n'
              '\t\t\tdefault:\n'
              '\t\t\t\tcout << "Incorrect input! Try again!" << endl;\n'
              '\t\t\t\tbreak;\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t}\n'
              '\tbreak;\n'
              '\tdefault:\n'
              '\t\tcout << "Incorrect input! Try again!" << endl;\n'
              '\t\tbreak;\n'
              '\t}\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001624',
         path='/OOP2_Lab10/Person.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab10/Person.cpp\n'
              '  Classes: Person\n'
              '  Functions: F_First_Program, F_Second_Program, main\n'
              '  Variable declarations: position\n')

Fragment(uuid='NORMALIZED-001625',
         path='/OOP2_Lab10/Person.cpp',
         lineno=12,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001626',
         path='/OOP2_Lab10/Person.cpp',
         lineno=15,
         depth=2,
         type='function_decl',
         name='F_First_Program',
         text='')

Fragment(uuid='NORMALIZED-001627',
         path='/OOP2_Lab10/Person.cpp',
         lineno=16,
         depth=2,
         type='function_decl',
         name='F_Second_Program',
         text='')

Fragment(uuid='NORMALIZED-001628',
         path='/OOP2_Lab10/Person.cpp',
         lineno=17,
         depth=2,
         type='function_decl',
         name='main',
         text='')

Fragment(uuid='NORMALIZED-001629',
         path='/OOP2_Lab10/Person.cpp',
         lineno=18,
         depth=2,
         type='var_decl',
         name='position',
         text='int position = 1; // global variable for numbering the list of '
              'contacts\n')

Fragment(uuid='NORMALIZED-001630',
         path='/OOP2_Lab10/Person.cpp',
         lineno=20,
         depth=2,
         type='class_decl',
         name='Person',
         text='class Person\n'
              '{\n'
              'protected:\n'
              '\tstring name;\n'
              '\tstring tell_number;\n'
              '\n'
              'public:\n'
              '\tvoid setData(string name, string tell_number)\n'
              '\t{\n'
              '\t\tthis->name = name;\n'
              '\t\tthis->tell_number = tell_number;\n'
              '\t}\n'
              '\n'
              '\tstring getName()\n'
              '\t{\n'
              '\t\treturn name;\n'
              '\t}\n'
              '\n'
              '\tstring getTellNumber()\n'
              '\t{\n'
              '\t\treturn tell_number;\n'
              '\t}\n'
              '\n'
              '\tvoid displayData()\n'
              '\t{\n'
              '\t\tcout << " " << position << ". " << left << setw(10) << name '
              '<< "\\t " << tell_number << endl;\n'
              '\t\tposition++;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001631',
         path='/OOP2_Lab10/Person.cpp',
         lineno=50,
         depth=2,
         type='function_decl',
         name='F_First_Program',
         text='void F_First_Program()\n'
              '{\n'
              '\n'
              '\tPerson p; // creating an object of a class Person\n'
              '\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << " C O N T A C T S\\n"\n'
              '\t\t\t << "------------------\\n"\n'
              '\t\t\t << " 1. Add a contact\\n"\n'
              '\t\t\t << " 2. Contacts\\n"\n'
              '\t\t\t << " 0. Back\\n"\n'
              '\t\t\t << " Your choice: \\n";\n'
              '\n'
              '\t\tstring name, tell_number; // contact info which will be '
              'inputted by user\n'
              '\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\t// case 49 is for adding a new contact into a list\n'
              '\t\tcase 49:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\n'
              '\t\t\tofstream out_contacts("contacts", ios::binary | '
              'ios::app); // creating a file | binary file | append mode\n'
              '\n'
              '\t\t\tcout << " ADD TO CONTACT '
              '\\n-----------------------------\\n Enter a contact '
              'information.\\n\\n";\n'
              '\t\t\tcout << " Enter the name: ";\n'
              '\t\t\tcin >> name;\n'
              '\t\t\tcout << " Enter the phone number: ";\n'
              '\t\t\tcin >> tell_number;\n'
              '\n'
              '\t\t\tp.setData(name, tell_number); // setting inputted data\n'
              '\n'
              '\t\t\t// storing the data in file\n'
              '\t\t\tout_contacts.write((char *)&p, sizeof(Person));\n'
              '\t\t\tout_contacts.close(); // closing the file\n'
              '\n'
              '\t\t\tcout << "\\n Successfully added!\\n\\n";\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t// case 50 lists all Contacts\n'
              '\t\tcase 50:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\n'
              '\t\t\tifstream in_contacts("contacts", ios::binary); // getting '
              'data from the file\n'
              '\n'
              '\t\t\tcout << " ALL '
              'CONTACTS\\n---------------------------\\n";\n'
              '\t\t\tcout << " Name            '
              'Phone\\n---------------------------\\n";\n'
              '\n'
              '\t\t\twhile (in_contacts.read((char *)&p, sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\t// displaying the data\n'
              '\t\t\t\tp.displayData();\n'
              '\t\t\t}\n'
              '\t\t\tposition = 1;\n'
              '\t\t\tin_contacts.close(); // closing the file\n'
              '\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t// to back to main menu\n'
              '\t\tcase 48:\n'
              '\t\t{\n'
              '\t\t\tmain();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tdefault:\n'
              '\t\t{\n'
              '\t\t\tcout << " Your choice is not available in Menu.\\n Please '
              'try one more time\\n\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\t} // switch\n'
              '\t}\t  // for loop\n'
              '}\n')

Fragment(uuid='NORMALIZED-001632',
         path='/OOP2_Lab10/Person.cpp',
         lineno=134,
         depth=2,
         type='function_decl',
         name='F_Second_Program',
         text='void F_Second_Program()\n'
              '{\n'
              '\n'
              '\tPerson p; // global object for each cases\n'
              '\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << " C O N T A C T S\\n"\n'
              '\t\t\t << "--------------------------------------\\n"\n'
              '\t\t\t << " 1. Search contact by Phone number\\n"\n'
              '\t\t\t << " 2. Search contact by Name\\n"\n'
              '\t\t\t << " 3. Delete a contact\\n"\n'
              '\t\t\t << " 4. Add a record to a specific position\\n"\n'
              '\t\t\t << " 0. Back\\n"\n'
              '\t\t\t << " Your choice: \\n";\n'
              '\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\t// case 49 for searching the contact by Phone Number\n'
              '\t\tcase 49:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << " SEARCH CONTACT BY PHONE '
              'NUMBER\\n-------------------------------\\n";\n'
              '\n'
              '\t\t\tstring search_by_tell_number;\n'
              '\t\t\tbool isFound = 0;\n'
              '\n'
              '\t\t\tifstream in_contacts_list("contacts", ios::binary); // '
              'getting data from the file\n'
              '\t\t\tcout << " List of all Contacts: \\n";\n'
              '\t\t\tcout << " Name            '
              'Phone\\n-------------------------------\\n";\n'
              '\t\t\twhile (in_contacts_list.read((char *)&p, '
              'sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\t// displaying the data\n'
              '\t\t\t\tp.displayData();\n'
              '\t\t\t}\n'
              '\t\t\tposition = 1;\n'
              '\t\t\tin_contacts_list.close();\n'
              '\n'
              '\t\t\tcout << "\\n Enter the phone number: ";\n'
              '\t\t\tcin >> search_by_tell_number;\n'
              '\n'
              '\t\t\tifstream in_contacts("contacts", ios::binary); // getting '
              'data from the file\n'
              '\t\t\t// in_contacts.seekg(0, ios::end);\n'
              '\n'
              '\t\t\t// cheaking the list for the specific data\n'
              '\t\t\tcout << " Found Contact(s): \\n";\n'
              '\t\t\twhile (in_contacts.read((char *)&p, sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\tif (search_by_tell_number == p.getTellNumber())\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tisFound = 1;\n'
              '\t\t\t\t\tp.displayData();\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tposition = 1;\n'
              '\t\t\tin_contacts.close(); // closing the file\n'
              '\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t// case 50 for searching the contact by Name\n'
              '\t\tcase 50:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << " SEARCH CONTACT BY '
              'NAME\\n-----------------------------\\n";\n'
              '\n'
              '\t\t\tstring search_by_name; // for searching the contact with '
              'his name\n'
              '\t\t\tbool isFound = 0;\n'
              '\n'
              '\t\t\tifstream in_contacts_list("contacts", ios::binary); // '
              'getting data from the file\n'
              '\t\t\tcout << " List of all Contacts: \\n";\n'
              '\t\t\tcout << " Name            '
              'Phone\\n-----------------------------\\n";\n'
              '\t\t\twhile (in_contacts_list.read((char *)&p, '
              'sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\t// displaying the data\n'
              '\t\t\t\tp.displayData();\n'
              '\t\t\t}\n'
              '\t\t\tposition = 1;\n'
              '\t\t\tin_contacts_list.close();\n'
              '\n'
              '\t\t\tcout << "\\n Enter the Name: ";\n'
              '\t\t\tcin >> search_by_name;\n'
              '\n'
              '\t\t\tifstream in_contacts("contacts", ios::binary); // getting '
              'data from the file\n'
              '\t\t\t// in_contacts.seekg(0, ios::end);\n'
              '\n'
              '\t\t\t// cheaking the list for the specific data\n'
              '\t\t\tcout << " Found Contact(s): \\n";\n'
              '\t\t\twhile (in_contacts.read((char *)&p, sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\tif (search_by_name == p.getName())\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tisFound = 1;\n'
              '\t\t\t\t\tp.displayData();\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tposition = 1;\n'
              '\t\t\tin_contacts.close(); // closing the file\n'
              '\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t// case 51 for deleting a contact\n'
              '\t\tcase 51:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << " DELETE A CONTACT\\n---------------------\\n";\n'
              '\n'
              '\t\t\tstring tell_number_for_deletion;\n'
              '\n'
              '\t\t\tifstream in_contacts_list("contacts", ios::binary); // '
              'getting data from the file\n'
              '\t\t\tcout << " List of all Contacts: \\n";\n'
              '\t\t\tcout << " Name            '
              'Phone\\n---------------------\\n";\n'
              '\t\t\twhile (in_contacts_list.read((char *)&p, '
              'sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\t// displaying the data\n'
              '\t\t\t\tp.displayData();\n'
              '\t\t\t}\n'
              '\t\t\tposition = 1;\n'
              '\t\t\tin_contacts_list.close();\n'
              '\n'
              '\t\t\tcout << endl;\n'
              '\n'
              '\t\t\tofstream out_temp("temp", ios::binary);\n'
              '\t\t\tifstream in_contacts("contacts", ios::binary);\n'
              '\n'
              '\t\t\tcout << " Enter phone number of contact to be deleted: '
              '";\n'
              '\t\t\tcin >> tell_number_for_deletion;\n'
              '\n'
              '\t\t\twhile (in_contacts.read((char *)&p, sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\tif (p.getTellNumber() != tell_number_for_deletion)\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tout_temp.write((char *)&p, sizeof(Person));\n'
              '\t\t\t\t}\n'
              '\t\t\t\telse if (p.getTellNumber() == '
              'tell_number_for_deletion)\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tcout << "\\n Successfully deleted\\n";\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\tout_temp.close();\n'
              '\t\t\tin_contacts.close();\n'
              '\n'
              '\t\t\tremove("contacts");\n'
              '\t\t\trename("temp", "contacts");\n'
              '\n'
              '\t\t\tifstream in_contacts_list2("contacts", ios::binary); // '
              'getting data from the file\n'
              '\t\t\tcout << "\\n List of all Contacts: \\n";\n'
              '\t\t\tcout << " Name            '
              'Phone\\n---------------------\\n";\n'
              '\t\t\twhile (in_contacts_list2.read((char *)&p, '
              'sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\t// displaying the data\n'
              '\t\t\t\tp.displayData();\n'
              '\t\t\t}\n'
              '\t\t\tposition = 1;\n'
              '\t\t\tin_contacts_list2.close();\n'
              '\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t// case 52 for adding a contact to a specific position\n'
              '\t\tcase 52:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << " ADD A RECORD TO A SPECIFIC '
              'POSITION\\n-------------------------------------\\n";\n'
              '\n'
              '\t\t\tifstream in_contacts_list("contacts", ios::binary); // '
              'getting data from the file\n'
              '\t\t\tcout << " List of all Contacts: \\n";\n'
              '\t\t\tcout << " Name            '
              'Phone\\n-------------------------------------\\n";\n'
              '\t\t\twhile (in_contacts_list.read((char *)&p, '
              'sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\t// displaying the data\n'
              '\t\t\t\tp.displayData();\n'
              '\t\t\t}\n'
              '\t\t\tposition = 1;\n'
              '\t\t\tin_contacts_list.close();\n'
              '\t\t\tcout << endl;\n'
              '\n'
              '\t\t\t// position which should be searched\n'
              '\t\t\tint position_of_insertion;\n'
              '\t\t\tcout << " Enter the position: ";\n'
              '\t\t\tcin >> position_of_insertion;\n'
              '\t\t\tposition_of_insertion--;\n'
              '\n'
              '\t\t\t// Adding a new contact\n'
              '\t\t\tstring name, tell_number;\n'
              '\t\t\tcout << " Enter a contact information.\\n";\n'
              '\t\t\tcout << " Enter the name: ";\n'
              '\t\t\tcin >> name;\n'
              '\t\t\tcout << " Enter the phone number: ";\n'
              '\t\t\tcin >> tell_number;\n'
              '\n'
              '\t\t\tofstream out_temp("temp", ios::binary);\n'
              '\t\t\tifstream in_contacts("contacts", ios::binary);\n'
              '\n'
              '\t\t\twhile (in_contacts.read((char *)&p, sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\tif (position_of_insertion != position)\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tout_temp.write((char *)&p, sizeof(Person));\n'
              '\t\t\t\t}\n'
              '\t\t\t\telse\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tout_temp.write((char *)&p, sizeof(Person));\n'
              '\t\t\t\t\tp.setData(name, tell_number);\n'
              '\t\t\t\t\tout_temp.write((char *)&p, sizeof(Person));\n'
              '\t\t\t\t}\n'
              '\t\t\t\tposition++;\n'
              '\t\t\t}\n'
              '\t\t\tposition = 1;\n'
              '\t\t\tout_temp.close();\n'
              '\t\t\tin_contacts.close();\n'
              '\n'
              '\t\t\tremove("contacts");\n'
              '\t\t\trename("temp", "contacts");\n'
              '\n'
              '\t\t\tifstream in_contacts_list2("contacts", ios::binary); // '
              'getting data from the file\n'
              '\t\t\tcout << "\\n List of all Contacts: \\n";\n'
              '\t\t\tcout << " Name            '
              'Phone\\n-------------------------------------\\n";\n'
              '\t\t\twhile (in_contacts_list2.read((char *)&p, '
              'sizeof(Person)))\n'
              '\t\t\t{\n'
              '\t\t\t\t// displaying the data\n'
              '\t\t\t\tp.displayData();\n'
              '\t\t\t}\n'
              '\t\t\tposition = 1;\n'
              '\t\t\tin_contacts_list2.close();\n'
              '\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t// Going back to Main Menu\n'
              '\t\tcase 48:\n'
              '\t\t{\n'
              '\t\t\tmain();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t// default case\n'
              '\t\tdefault:\n'
              '\t\t{\n'
              '\t\t\tcout << " Your choice is not available in Menu.\\n Please '
              'try one more time\\n\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\t} // switch\n'
              '\t}\t  // for loop\n'
              '}\n')

Fragment(uuid='NORMALIZED-001633',
         path='/OOP2_Lab10/Person.cpp',
         lineno=391,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << " M A I N  M E N U\\n"\n'
              '\t\t\t << "-------------------\\n"\n'
              '\t\t\t << " 1. First Program\\n"\n'
              '\t\t\t << " 2. Second Program\\n"\n'
              '\t\t\t << " Your choice: \\n";\n'
              '\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\t// First Program\n'
              '\t\tcase 49:\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_First_Program();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\t// Second Program\n'
              '\t\tcase 50:\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_Second_Program();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\tdefault:\n'
              '\t\t\tcout << " Your choice is not available in Menu.\\n Please '
              'try one more time\\n\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\t} // switch\n'
              '\t}\t  // for loop\n'
              '\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001634',
         path='/OOP2_Lab10/README.md',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - File Handling Operations\n'
              '\n'
              'Create a class Person with two private members name and '
              'telephone number\n'
              '\n'
              'Write a program that will create a data file containing name '
              'and telephone numbers of person. Use a class object to store '
              'each set of data. Read the file contents and display it on '
              'screen.\n'
              '- Write an interactive menu driven program that will access the '
              'file created in program no. 1 and implement the following '
              'tasks:\n'
              '- Determine the telephone number of the specified person.\n'
              '- Determine the name if telephone number is known.\n'
              '- Delete a record.\n'
              '- Add a record to a specific position.\n')

Fragment(uuid='NORMALIZED-001635',
         path='/OOP2_Lab10/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - File Handling Operations\n')

Fragment(uuid='NORMALIZED-001636',
         path='/OOP2_Lab2/README.md',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Separation of the interface from '
              'implementation constructors and destructors\n'
              '\n'
              '**Note: In class diagram + for public, - for private.**\n'
              '\n')

Fragment(uuid='NORMALIZED-001637',
         path='/OOP2_Lab2/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Separation of the interface from '
              'implementation constructors and destructors\n'
              '### Program 1\n'
              '### Program 2\n'
              '### Program 3\n'
              '### Program 4\n')

Fragment(uuid='NORMALIZED-001638',
         path='/OOP2_Lab2/README.md',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='### Program 1\n'
              'The class Person with private attributes name(string) and '
              'age(int).\n'
              '\n'
              'The class contains three functions.\n'
              '- One with no parameter (for initializing default value).\n'
              '- With two parameter (one parameter with default value).\n'
              '- Function to display the data.\n'
              '\n'
              '```\n'
              'Person\n'
              '---\n'
              '- Name: String\n'
              '- Age: int\n'
              '---\n'
              '+ Display()\n'
              '<constructor> + Person()\n'
              '<constructor> + Person(a: int)\n'
              '```\n'
              '\n')

Fragment(uuid='NORMALIZED-001639',
         path='/OOP2_Lab2/README.md',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='### Program 2\n'
              'Construct a class to hold personnel records class name is '
              'Records. Use the following data members, and keep them '
              'private:\n'
              '```\n'
              'string name;\n'
              'float salary;\n'
              'string date_of_birth;\n'
              '```\n'
              'Create two constructors, one to initialize the record with its '
              'necessary values and one default. \n'
              '\n'
              'Create member functions to alter the individual’s name, salary, '
              'and date of birth.\n'
              '\n'
              'Create two objects use one object to refer member function '
              'through pointer and other object will be accessing through dot '
              'operator.\n'
              '\n'
              '\n')

Fragment(uuid='NORMALIZED-001640',
         path='/OOP2_Lab2/README.md',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='### Program 3\n'
              'Write a class Account that represents your bank account. \n'
              '- It contains information like name(string), account '
              'number(string) and balance(float). (All are private)\n'
              '- Add constructors and destructors. \n'
              '- Create some objects, \n'
              '- Write a code to display message when it is created and '
              'similarly display message when it will be destroyed.\n'
              '\n'
              '\n')

Fragment(uuid='NORMALIZED-001641',
         path='/OOP2_Lab2/README.md',
         lineno=46,
         depth=6,
         type='documentation',
         name='',
         text='### Program 4\n'
              'Write C++ header file Triangle.h with class Triangle with data '
              'members and member functions as per following class diagram. In '
              'Triangle.h file only implement get and set methods. (Consider '
              'right angle Triangle)\n'
              '```')

Fragment(uuid='NORMALIZED-001642',
         path='/OOP2_Lab2/README.md',
         lineno=48,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'Triangle\n'
              '---\n'
              '- Height: double\n'
              '- Base: double\n'
              '---\n'
              '<<constructor>> + Triangle(double, double)\n'
              '<<destructor>> +~ Triangle()  # +~ stands for destructor\n'
              '+ getHeight(): double\n'
              '+ setHeight(double)\n'
              '+ getBase(): double\n'
              '+ setBase(double)\n'
              '+ getArea(): double\n'
              '+ getPerimeter(): double\n'
              '```')

Fragment(uuid='NORMALIZED-001643',
         path='/OOP2_Lab2/README.md',
         lineno=62,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'Write C++ program to include header file Triangle.h in your '
              'program. Implement constructor (with default value for height '
              'and width will be 0),  getArea() and getPerimeter() member '
              'functions of Class Triangle and write menu driven program to '
              'get Height and Width details, display measurement (Area and '
              'Perimeter) of Triangle object.')

Fragment(uuid='NORMALIZED-001644',
         path='/OOP2_Lab2/Source.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab2/Source.cpp\n'
              '  Classes: Account, Person, Records, Rectangle\n'
              '  Functions: main, main_menu_view\n')

Fragment(uuid='NORMALIZED-001645',
         path='/OOP2_Lab2/Source.cpp',
         lineno=4,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001646',
         path='/OOP2_Lab2/Source.cpp',
         lineno=7,
         depth=2,
         type='class_decl',
         name='Person',
         text='class Person\n'
              '{\n'
              'private:\n'
              '\tstring name;\n'
              '\tint age;\n'
              '\n'
              'public:\n'
              '\tPerson()\n'
              '\t{ // default constructor\n'
              '\t\tage = 17;\n'
              '\t\tname = "Rustam";\n'
              '\t}\n'
              '\tPerson(int x)\n'
              '\t{\n'
              '\t\tage = x;\n'
              '\t\tname = "Rustam";\n'
              '\t}\n'
              '\tvoid Display()\n'
              '\t{\n'
              '\t\tcout << "Name: " << name << endl;\n'
              '\t\tcout << "Age: " << age << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001647',
         path='/OOP2_Lab2/Source.cpp',
         lineno=32,
         depth=2,
         type='class_decl',
         name='Records',
         text='class Records\n'
              '{\n'
              'private:\n'
              '\tstring name;\n'
              '\tfloat salary;\n'
              '\tstring date_of_birth;\n'
              '\n'
              'public:\n'
              '\tRecords()\n'
              '\t{\n'
              '\t\tname = "Rustam";\n'
              '\t\tsalary = 1234;\n'
              '\t\tdate_of_birth = "12.34.5678";\n'
              '\t}\n'
              '\tRecords(string name1, float salary1, string date_of_birth1)\n'
              '\t{\n'
              '\t\tname = name1;\n'
              '\t\tsalary = salary1;\n'
              '\t\tdate_of_birth = date_of_birth1;\n'
              '\t}\n'
              '\tvoid Display()\n'
              '\t{\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "Name: " << name << endl;\n'
              '\t\tcout << "Salary: " << salary << endl;\n'
              '\t\tcout << "Date of Birth: " << date_of_birth << endl;\n'
              '\t}\n'
              '\tvoid alert_name()\n'
              '\t{\n'
              '\t\tcout << "New name: ";\n'
              '\t\tcin >> name;\n'
              '\t}\n'
              '\tvoid alert_salary()\n'
              '\t{\n'
              '\t\tcout << "New salary: ";\n'
              '\t\tcin >> salary;\n'
              '\t}\n'
              '\tvoid alert_date()\n'
              '\t{\n'
              '\t\tcout << "New Date of Birth: ";\n'
              '\t\tcin >> date_of_birth;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001648',
         path='/OOP2_Lab2/Source.cpp',
         lineno=77,
         depth=2,
         type='class_decl',
         name='Account',
         text='class Account\n'
              '{\n'
              'public:\n'
              '\tAccount()\n'
              '\t{\n'
              '\t\tcout << "Object is being Created" << endl;\n'
              '\t\tname = "Rustam";\n'
              '\t\tnumber = "123456789";\n'
              '\t\tbalance = 12345;\n'
              '\t}\n'
              '\t~Account()\n'
              '\t{\n'
              '\t\tcout << "Object is being Deleted" << endl;\n'
              '\t}\n'
              '\tvoid Display()\n'
              '\t{\n'
              '\t\tcout << "Name: " << name << endl\n'
              '\t\t\t << "Number: " << number << endl\n'
              '\t\t\t << "Balance: " << balance << endl;\n'
              '\t}\n'
              '\n'
              'private:\n'
              '\tstring name;\n'
              '\tstring number;\n'
              '\tfloat balance;\n'
              '};\n')

Fragment(uuid='NORMALIZED-001649',
         path='/OOP2_Lab2/Source.cpp',
         lineno=105,
         depth=2,
         type='class_decl',
         name='Rectangle',
         text='class Rectangle\n'
              '{\n'
              'private:\n'
              '\tdouble height;\n'
              '\tdouble width;\n'
              '\n'
              'public:\n'
              '\tRectangle()\n'
              '\t{\n'
              '\t\theight = 5;\n'
              '\t\twidth = 5;\n'
              '\t}\n'
              '\n'
              '\tRectangle(double height2, double width2)\n'
              '\t{\n'
              '\t\theight = height2;\n'
              '\t\twidth = width2;\n'
              '\t}\n'
              '\tvoid setHeight(double a)\n'
              '\t{\n'
              '\t\theight = a;\n'
              '\t}\n'
              '\tdouble getHeight()\n'
              '\t{\n'
              '\t\treturn height;\n'
              '\t}\n'
              '\tvoid setWidth(double b)\n'
              '\t{\n'
              '\t\twidth = b;\n'
              '\t}\n'
              '\tdouble getWidht()\n'
              '\t{\n'
              '\t\treturn width;\n'
              '\t}\n'
              '\tdouble getArea()\n'
              '\t{\n'
              '\t\treturn width * height;\n'
              '\t}\n'
              '\tdouble getPerimeter()\n'
              '\t{\n'
              '\t\treturn 2 * (width + height);\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001650',
         path='/OOP2_Lab2/Source.cpp',
         lineno=149,
         depth=2,
         type='function_decl',
         name='main_menu_view',
         text='void main_menu_view()\n'
              '{\n'
              '\tcout << "Main menu: \\n";\n'
              '\tcout << "[1] Person\'s info\\n";\n'
              '\tcout << "[2] Records\\n";\n'
              '\tcout << "[3] Account\\n";\n'
              '\tcout << "[4] Triangle\\n";\n'
              '\tcout << "[0] Exit\\n";\n'
              '\tcout << "Your Choice: ";\n'
              '}\n')

Fragment(uuid='NORMALIZED-001651',
         path='/OOP2_Lab2/Source.cpp',
         lineno=160,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\n'
              '\tstring user_choise;\n'
              '\tmain_menu_view();\n'
              '\tcin >> user_choise;\n'
              '\n'
              '\t// main_menu_validation_check\n'
              '\tif (user_choise == "1")\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tint x;\n'
              '\t\tcout << "Input Age: ";\n'
              '\t\tcin >> x;\n'
              '\t\tPerson person1, person2(x);\n'
              '\t\tperson1.Display();\n'
              '\t\tcout << endl;\n'
              '\t\tperson2.Display();\n'
              '\t}\n'
              '\telse if (user_choise == "2")\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Records: " << endl;\n'
              '\t\tstring name;\n'
              '\t\tfloat salary;\n'
              '\t\tstring date_of_birth;\n'
              '\t\tcout << "Name: ";\n'
              '\t\tcin >> name;\n'
              '\t\tcout << "Salary: ";\n'
              '\t\tcin >> salary;\n'
              '\t\tcout << "Date of birth: ";\n'
              '\t\tcin >> date_of_birth;\n'
              '\n'
              '\t\tRecords record1, record2(name, salary, date_of_birth);\n'
              '\t\trecord1.Display();\n'
              '\t\trecord2.Display();\n'
              '\t\tcout << endl;\n'
              '\n'
              '\t\tRecords *ptr = &record1;\n'
              '\t\tptr->alert_name();\n'
              '\t\tptr->alert_salary();\n'
              '\t\tptr->alert_date();\n'
              '\n'
              '\t\trecord1.Display();\n'
              '\t\trecord2.Display();\n'
              '\t}\n'
              '\telse if (user_choise == "3")\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tAccount a;\n'
              '\t\ta.Display();\n'
              '\t\ta.~Account();\n'
              '\t}\n'
              '\telse if (user_choise == "4")\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tRectangle r;\n'
              '\t\tdouble width1, height1;\n'
              '\n'
              '\t\tcout << "Enter the width fo the rectangle: ";\n'
              '\t\tcin >> width1;\n'
              '\t\tcout << "Enter the height fo the rectangle: ";\n'
              '\t\tcin >> height1;\n'
              '\n'
              '\t\tRectangle r2(height1, width1);\n'
              '\n'
              '\t\tr2.setHeight(height1);\n'
              '\t\tr2.setWidth(width1);\n'
              '\n'
              '\t\tsystem("cls");\n'
              '\n'
              '\t\tint user_choice_1;\n'
              '\t\t/*int qwerty;\n'
              '\t\tcin >> qwerty;*/\n'
              '\t\twhile (user_choice_1 >= 1)\n'
              '\t\t{\n'
              '\t\t\tcout << "Rectangle: \\n";\n'
              '\t\t\tcout << "[1]  Area\\n";\n'
              '\t\t\tcout << "[2]  Perimeter\\n";\n'
              '\t\t\tcout << "[0]  Exit\\n";\n'
              '\t\t\tcin >> user_choice_1;\n'
              '\t\t\tswitch (user_choice_1)\n'
              '\t\t\t{\n'
              '\t\t\tcase 1:\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "The Area is: (Default Constructor (5,5)) : " '
              '<< r.getArea() << endl\n'
              '\t\t\t\t\t << endl;\n'
              '\t\t\t\tcout << "The Area is: (Parametric Constructor) : " << '
              'r2.getArea() << endl;\n'
              '\t\t\t\tcout << endl;\n'
              '\n'
              '\t\t\t\tbreak;\n'
              '\t\t\tcase 2:\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "The Perimeter is: (Default Constructor(5,5) : '
              '" << r.getPerimeter() << endl\n'
              '\t\t\t\t\t << endl;\n'
              '\t\t\t\tcout << "The Perimeter is: (Parametric Constructor) : " '
              '<< r2.getPerimeter() << endl;\n'
              '\t\t\t\tbreak;\n'
              '\t\t\tcase 0:\n'
              '\t\t\t\tbreak;\n'
              '\t\t\t}\n'
              '\t\t}\n'
              '\t}\n'
              '\telse if (user_choise == "0")\n'
              '\t{\n'
              '\t\treturn 0;\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Please try again !!!\\n";\n'
              '\t\tmain();\n'
              '\t}\n'
              '\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001652',
         path='/OOP2_Lab3/README.md',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Const member function, friend '
              'function, composition, friend functions and `this` pointer\n'
              '\n'
              '**Note: In class diagram + for public, - for private.**\n'
              '\n'
              '\n')

Fragment(uuid='NORMALIZED-001653',
         path='/OOP2_Lab3/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Const member function, friend '
              'function, composition, friend functions and `this` pointer\n'
              '### Program 1\n')

Fragment(uuid='NORMALIZED-001654',
         path='/OOP2_Lab3/README.md',
         lineno=6,
         depth=6,
         type='documentation',
         name='',
         text='### Program 1\n'
              'Define a class FullName and Player with the following '
              'specifications:\n'
              '\n'
              '```')

Fragment(uuid='NORMALIZED-001655',
         path='/OOP2_Lab3/README.md',
         lineno=9,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'FullName\n'
              '---\n'
              '- FirstName: string\n'
              '- MiddleName: string\n'
              '- LastName: string\n'
              '---\n'
              '<<constructor>> + FullName()\n'
              '<<destructor>> +~ FullName()\n'
              '+ setFirstName(string)\n'
              '+ getFirstName(): string\n'
              '+ setMiddleName(string)\n'
              '+ getMiddleName(): string\n'
              '+ setLastName(string)\n'
              '+ getLastName(): string\n'
              '```')

Fragment(uuid='NORMALIZED-001656',
         path='/OOP2_Lab3/README.md',
         lineno=24,
         depth=6,
         type='documentation',
         name='',
         text='\n```')

Fragment(uuid='NORMALIZED-001657',
         path='/OOP2_Lab3/README.md',
         lineno=25,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'Player\n'
              '---\n'
              '-Player_ID: string\n'
              '-Player_Name: FullName\n'
              '-Matches_Played: int\n'
              '-Goals_Scored: int\n'
              '---\n'
              '<<constructor>> + Player()\n'
              '<<destructor>> +~ Player()\n'
              '+ setPlayer_ID(string)\n'
              '+ getPlayer_ID(): string\n'
              '+ setMatches_Played(int)\n'
              '+ getMatches_Played(): int\n'
              '+ setGoals_Scored(int)\n'
              '+ getGoals_Scored(): int\n'
              '+ setPlayer_Name(FullName)\n'
              '+ getPlayer_Name()\n'
              '<<friend>> + Increase_GoalsScored(Player, int)\n'
              '```\n')

Fragment(uuid='NORMALIZED-001658',
         path='/OOP2_Lab3/README.md',
         lineno=45,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              '`Increase_GoalsScored(int)` is friend function for Player: This '
              'function will increase Goal_scored by some int every time when '
              'called.\n'
              '\n'
              'Write C++ create object pointer(through new) to Class Player '
              'and menu driven program to add player details (allocate memory '
              'for object and get player details), display player details, '
              'increase player goal scored delete player from memory.')

Fragment(uuid='NORMALIZED-001659',
         path='/OOP2_Lab3/main.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab3/main.cpp\n'
              '  Classes: FullName, Player\n'
              '  Functions: Increse_GoalScored, main\n'
              '  Variable declarations: Goals_Scored\n')

Fragment(uuid='NORMALIZED-001660',
         path='/OOP2_Lab3/main.cpp',
         lineno=4,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001661',
         path='/OOP2_Lab3/main.cpp',
         lineno=6,
         depth=2,
         type='class_decl',
         name='FullName',
         text='class FullName\n'
              '{\n'
              'public:\n'
              '    FullName()\n'
              '    {\n'
              '        FirstName = "Rustam";\n'
              '        MiddleName = "Zokirov";\n'
              '        LastName = "Ibrohimovich";\n'
              '    }\n'
              '\n'
              '    FullName(string fName, string mName, string lName)\n'
              '    {\n'
              '        fName = FirstName;\n'
              '        mName = MiddleName;\n'
              '        lName = LastName;\n'
              '    }\n'
              '    void setFirstName(string f_Name)\n'
              '    {\n'
              '        FirstName = f_Name;\n'
              '    }\n'
              '    string getFirstName()\n'
              '    {\n'
              '        return FirstName;\n'
              '    }\n'
              '    void setMiddleName(string m_Name)\n'
              '    {\n'
              '        MiddleName = m_Name;\n'
              '    }\n'
              '    string getMiddleName()\n'
              '    {\n'
              '        return MiddleName;\n'
              '    }\n'
              '    void setLastName(string l_Name)\n'
              '    {\n'
              '        LastName = l_Name;\n'
              '    }\n'
              '    string getLastName()\n'
              '    {\n'
              '        return LastName;\n'
              '    }\n'
              '\n'
              'private:\n'
              '    string FirstName;\n'
              '    string MiddleName;\n'
              '    string LastName;\n'
              '};\n')

Fragment(uuid='NORMALIZED-001662',
         path='/OOP2_Lab3/main.cpp',
         lineno=53,
         depth=2,
         type='class_decl',
         name='Player',
         text='class Player\n'
              '{\n'
              'private:\n'
              '    string Player_ID;\n'
              '    int Matches_Played;\n'
              '    FullName Player_Name;\n'
              '\n'
              'public:\n'
              '    static int Goals_Scored;\n'
              '\n'
              '    Player()\n'
              '    {\n'
              '        Player_ID = "U1910049";\n'
              '        Matches_Played = 100;\n'
              '    }\n'
              '    Player(string id, int matches, int goals)\n'
              '    {\n'
              '        Player_ID = id;\n'
              '        Matches_Played = matches;\n'
              '    }\n'
              '    void setPlayer_ID(string ID)\n'
              '    {\n'
              '        Player_ID = ID;\n'
              '    }\n'
              '    string getPlayer_ID()\n'
              '    {\n'
              '        return Player_ID;\n'
              '    }\n'
              '    void setMatches_Played(int Matches)\n'
              '    {\n'
              '        Matches_Played = Matches;\n'
              '    }\n'
              '    int getMatches_Played()\n'
              '    {\n'
              '        return Matches_Played;\n'
              '    }\n'
              '    /* void setGoals_Scored(int Goals) {\n'
              '         Matches_Played = Goals;\n'
              '     }\n'
              '     int getGoals_Scored() {\n'
              '         return Goals_Scored;\n'
              '     }*/\n'
              '    friend void Increse_GoalScored(Player);\n'
              '};\n')

Fragment(uuid='NORMALIZED-001663',
         path='/OOP2_Lab3/main.cpp',
         lineno=98,
         depth=3,
         type='var_decl',
         name='Goals_Scored',
         text='int Player::Goals_Scored;\n')

Fragment(uuid='NORMALIZED-001664',
         path='/OOP2_Lab3/main.cpp',
         lineno=99,
         depth=2,
         type='function_decl',
         name='Increse_GoalScored',
         text='void Increse_GoalScored(Player player1)\n'
              '{\n'
              '    player1.Goals_Scored++;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001665',
         path='/OOP2_Lab3/main.cpp',
         lineno=104,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '    int choice;\n'
              '    while (1)\n'
              '    {\n'
              '\n'
              '        string firstName, middleName, lastName;\n'
              '        FullName fullName1;\n'
              '        // 2\n'
              '        string Id;\n'
              '        int goals, matches;\n'
              '        Player player1;\n'
              '        cout << "Add: First Name, Middle Name, Last Name: '
              '\\n\\n";\n'
              '        cout << "First Name: \\n";\n'
              '        cin >> firstName;\n'
              '        cout << "Middle Name: \\n";\n'
              '        cin >> middleName;\n'
              '        cout << "Last Name:\\n ";\n'
              '        cin >> lastName;\n'
              '\n'
              '        FullName fullName(firstName, middleName, lastName);\n'
              '        fullName.setFirstName(firstName);\n'
              '        fullName.setMiddleName(middleName);\n'
              '        fullName.setLastName(lastName);\n'
              '\n'
              '        cout << "Main menu: \\n";\n'
              '        cout << "[1] Add details\\n";\n'
              '        cout << "[2] Display details\\n";\n'
              '        cout << "[3] No. of goals\\n";\n'
              '        cout << "[4] Delete details\\n";\n'
              '        cout << "[0] Exit\\n";\n'
              '        cout << "Your Choice: ";\n'
              '\n'
              '        cin >> choice;\n'
              '        switch (choice)\n'
              '        {\n'
              '        case 1:\n'
              '            system("cls");\n'
              '            cout << "We have entered in the beginning!" << '
              'endl;\n'
              '            // fullName.setFirstName(firstName);\n'
              '            // fullName.setMiddleName(middleName);\n'
              '            // fullName.setLastName(lastName);\n'
              '            /* FullName fullName(firstName, middleName, '
              'lastName);\n'
              '             fullName.setFirstName(firstName);\n'
              '             fullName.setMiddleName(middleName);\n'
              '             fullName.setLastName(lastName);*/\n'
              '\n'
              '            break;\n'
              '        case 2:\n'
              '            system("cls");\n'
              '            cout << "Details of the Player: \\n";\n'
              '            cout << "Id: ";\n'
              '            cin >> Id;\n'
              '            cout << "Matches_Played: ";\n'
              '            cin >> matches;\n'
              '            player1.setPlayer_ID(Id);\n'
              '            player1.setMatches_Played(matches);\n'
              '            cout << endl;\n'
              '            cout << player1.getPlayer_ID();\n'
              '            cout << fullName.getFirstName() << " " << '
              'fullName.getLastName() << " " << fullName.getMiddleName() << '
              'endl;\n'
              '            cout << player1.getMatches_Played();\n'
              '            break;\n'
              '        case 3:\n'
              '            system("cls");\n'
              '            cout << "Number of goals: \\n";\n'
              '            Increse_GoalScored(player1);\n'
              '            break;\n'
              '        case 4:\n'
              '            system("cls");\n'
              '            cout << "Deletion for finished successfully! \\n";\n'
              '            break;\n'
              '        case 5:\n'
              '            system("exit");\n'
              '        }\n'
              '    }\n'
              '    return 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001666',
         path='/OOP2_Lab4/README.md',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Operator Overloading\n\n')

Fragment(uuid='NORMALIZED-001667',
         path='/OOP2_Lab4/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Operator Overloading\n'
              '### Program 1\n'
              '### PRogram 2\n')

Fragment(uuid='NORMALIZED-001668',
         path='/OOP2_Lab4/README.md',
         lineno=3,
         depth=6,
         type='documentation',
         name='',
         text='### Program 1\nDefine a class DayTime:\n```')

Fragment(uuid='NORMALIZED-001669',
         path='/OOP2_Lab4/README.md',
         lineno=5,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'private:\n'
              'int hour, minute, second;\n'
              'public:\n'
              '    • parameterized constructor to initialize value\n'
              '    • int getHour() const{ return hour; }\n'
              '    • int getMinute() const { return minute; }\n'
              '    • int getSecond() const { return second; }\n'
              '    • int asSeconds() const // Daytime in seconds\n'
              '    • overload increment operator to increment the value of '
              'seconds.\n'
              '    • Overload decrement operator to decrement the value of '
              'minutes.\n'
              '```')

Fragment(uuid='NORMALIZED-001670',
         path='/OOP2_Lab4/README.md',
         lineno=16,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'Write  a menu driven program and create following menu '
              'options:\n'
              '1. To Display Time.\n'
              '2. To Display Time in Seconds.\n'
              '3. To Increment seconds.\n'
              '4. To decrements minutes.\n'
              '0. To exit.\n'
              '\n')

Fragment(uuid='NORMALIZED-001671',
         path='/OOP2_Lab4/README.md',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='### PRogram 2\n'
              'Define a class Dollar:\n'
              '```\n'
              'private:\n'
              '    float currency, mktrate, offrate\n'
              'public:\n'
              '    • float getDollar() { return currency in dollar }\n'
              '    • float  getMarketSoums() { return currency in soums }\n'
              '    • float  getofficialSoums() { return currency in soums }\n'
              '    • void setRates() { // input current date market and '
              'official rates }\n'
              '    • overload operator "<<" to print the details of a Dollar.\n'
              '```\n'
              'Inside main declare one object and show the results similar to '
              'Program 1.\n')

Fragment(uuid='NORMALIZED-001672',
         path='/OOP2_Lab4/main1.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab4/main1.cpp\n'
              '  Classes: DayTime, Dollar\n'
              '  Functions: main, operator++, operator--, operator<<, '
              'operator>>, showChoicesforMainMenu, showChoicesforMainMenu2\n')

Fragment(uuid='NORMALIZED-001673',
         path='/OOP2_Lab4/main1.cpp',
         lineno=4,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001674',
         path='/OOP2_Lab4/main1.cpp',
         lineno=6,
         depth=2,
         type='class_decl',
         name='DayTime',
         text='class DayTime\n'
              '{\n'
              'private:\n'
              '\tint hour, minute, second;\n'
              '\n'
              'public:\n'
              '\tDayTime()\n'
              '\t{\n'
              '\t\thour = 0;\n'
              '\t\tminute = 0;\n'
              '\t\tsecond = 0;\n'
              '\t}\n'
              '\n'
              '\tDayTime(int h, int m, int s)\n'
              '\t{\n'
              '\t\thour = h;\n'
              '\t\tminute = m;\n'
              '\t\tsecond = s;\n'
              '\t}\n'
              '\tint getHour() const\n'
              '\t{\n'
              '\t\treturn hour;\n'
              '\t}\n'
              '\tint getMinute() const\n'
              '\t{\n'
              '\t\treturn minute;\n'
              '\t}\n'
              '\tint getSecond() const\n'
              '\t{\n'
              '\t\treturn second;\n'
              '\t}\n'
              '\n'
              '\tvoid DisplayTime()\n'
              '\t{\n'
              '\t\tcout << "HH: " << hour << endl\n'
              '\t\t\t << "MM: " << minute << endl\n'
              '\t\t\t << "SS: " << second << endl;\n'
              '\t}\n'
              '\tint asSeconds() const\n'
              '\t{\n'
              '\t\treturn (3600 * hour + 60 * minute + second);\n'
              '\t}\n'
              '\n'
              '\tfriend void operator<<(ostream &out, DayTime &h);\n'
              '\tfriend void operator>>(istream &in, DayTime &h);\n'
              '\tfriend void operator++(DayTime &MainDayTime);\n'
              '\tfriend void operator--(DayTime &MainDayTime2);\n'
              '};\n')

Fragment(uuid='NORMALIZED-001675',
         path='/OOP2_Lab4/main1.cpp',
         lineno=55,
         depth=2,
         type='function_decl',
         name='operator>>',
         text='void operator>>(istream &in, DayTime &h)\n'
              '{\n'
              '\tcout << "Input hours ( 0 , 24 ): ";\n'
              '\tin >> h.hour;\n'
              '\n'
              '\tcout << "Input minutes (0 , 60 ): ";\n'
              '\tin >> h.minute;\n'
              '\n'
              '\tcout << "Input seconds ( 0 ,60 ): ";\n'
              '\tin >> h.second;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001676',
         path='/OOP2_Lab4/main1.cpp',
         lineno=67,
         depth=2,
         type='function_decl',
         name='operator<<',
         text='void operator<<(ostream &out, DayTime &h)\n'
              '{\n'
              '\tout << "HH: " << h.hour << endl\n'
              '\t\t<< "MM: " << h.minute << endl\n'
              '\t\t<< "SS: " << h.second << endl;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001677',
         path='/OOP2_Lab4/main1.cpp',
         lineno=73,
         depth=2,
         type='function_decl',
         name='operator++',
         text='void operator++(DayTime &MainDayTime)\n'
              '{\n'
              '\tMainDayTime.second++;\n'
              '\tif (MainDayTime.second >= 60)\n'
              '\t{\n'
              '\t\tMainDayTime.second = 0;\n'
              '\t\tMainDayTime.minute++;\n'
              '\t}\n'
              '\tif (MainDayTime.minute >= 60)\n'
              '\t{\n'
              '\t\tMainDayTime.minute = 0;\n'
              '\t\tMainDayTime.hour++;\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001678',
         path='/OOP2_Lab4/main1.cpp',
         lineno=87,
         depth=2,
         type='function_decl',
         name='operator--',
         text='void operator--(DayTime &MainDayTime2)\n'
              '{\n'
              '\tMainDayTime2.minute--;\n'
              '\tif (MainDayTime2.minute < 0)\n'
              '\t{\n'
              '\t\tMainDayTime2.minute = 59;\n'
              '\t\tMainDayTime2.hour--;\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001679',
         path='/OOP2_Lab4/main1.cpp',
         lineno=98,
         depth=2,
         type='class_decl',
         name='Dollar',
         text='class Dollar\n'
              '{\n'
              'private:\n'
              '\tfloat currency, mktrate, offrate;\n'
              '\n'
              'public:\n'
              '\tDollar()\n'
              '\t{\n'
              '\t\tcurrency = 100;\n'
              '\t\tmktrate = 9000;\n'
              '\t\toffrate = 7000;\n'
              '\t}\n'
              '\tfloat getDollar()\n'
              '\t{\n'
              '\t\tcout << endl\n'
              '\t\t\t << "Currency: " << endl;\n'
              '\t\treturn currency;\n'
              '\t}\n'
              '\tfloat getMarketSoums()\n'
              '\t{\n'
              '\t\tcout << "Markent currency: " << endl;\n'
              '\t\treturn currency * mktrate;\n'
              '\t}\n'
              '\tfloat getofficialSoums()\n'
              '\t{\n'
              '\t\tcout << "Official currency:" << endl;\n'
              '\t\treturn currency * offrate;\n'
              '\t}\n'
              '\tvoid setRates()\n'
              '\t{\n'
              '\t\tcout << "Enter current market rate: " << endl;\n'
              '\t\tcin >> mktrate;\n'
              '\t\tcout << "Enter current official rate: " << endl;\n'
              '\t\tcin >> offrate;\n'
              '\t}\n'
              '\tfriend void operator<<(ostream &output, Dollar &p);\n'
              '};\n')

Fragment(uuid='NORMALIZED-001680',
         path='/OOP2_Lab4/main1.cpp',
         lineno=136,
         depth=2,
         type='function_decl',
         name='operator<<',
         text='void operator<<(ostream &output, Dollar &p)\n'
              '{\n'
              '\toutput << "Details of a dollar " << endl;\n'
              '\toutput << "Currency is " << p.currency << endl\n'
              '\t\t   << "Market rate is " << p.mktrate << endl;\n'
              '\toutput << "Official rate is " << p.offrate << endl;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001681',
         path='/OOP2_Lab4/main1.cpp',
         lineno=144,
         depth=2,
         type='function_decl',
         name='showChoicesforMainMenu',
         text='')

Fragment(uuid='NORMALIZED-001682',
         path='/OOP2_Lab4/main1.cpp',
         lineno=145,
         depth=2,
         type='function_decl',
         name='showChoicesforMainMenu2',
         text='')

Fragment(uuid='NORMALIZED-001683',
         path='/OOP2_Lab4/main1.cpp',
         lineno=147,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tint choice;\n'
              '\tDayTime t2(25, 0, 0);\n'
              '\tint hour, minute, second;\n'
              '\tdo\n'
              '\t{\n'
              '\t\tshowChoicesforMainMenu();\n'
              '\t\tcin >> choice;\n'
              '\t\tswitch (choice)\n'
              '\t\t{\n'
              '\t\t\t// for program 1\n'
              '\t\tcase 1:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tint choice2;\n'
              '\n'
              '\t\t\tDayTime h1(10, 10, 10);\n'
              '\t\t\tDayTime h2;\n'
              '\t\t\tcin >> h2;\n'
              '\n'
              '\t\t\tshowChoicesforMainMenu2();\n'
              '\n'
              '\t\t\tdo\n'
              '\t\t\t{\n'
              '\t\t\t\tcin >> choice2;\n'
              '\t\t\t\tswitch (choice2)\n'
              '\t\t\t\t{\n'
              '\t\t\t\tcase 1:\n'
              '\t\t\t\t\tcout << h2;\n'
              '\t\t\t\t\tcout << endl\n'
              '\t\t\t\t\t\t << endl;\n'
              '\t\t\t\t\tcout << "Enter your choice: ";\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 2:\n'
              '\t\t\t\t\tcout << h2.asSeconds() << endl;\n'
              '\t\t\t\t\tcout << "Enter your choice: ";\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 3:\n'
              '\t\t\t\t\t++h2;\n'
              '\t\t\t\t\th2.DisplayTime();\n'
              '\t\t\t\t\tcout << h2.asSeconds();\n'
              '\t\t\t\t\tcout << endl\n'
              '\t\t\t\t\t\t << endl;\n'
              '\t\t\t\t\tcout << "Enter your choice: ";\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 4:\n'
              '\t\t\t\t\t--h2;\n'
              '\t\t\t\t\th2.DisplayTime();\n'
              '\t\t\t\t\tcout << endl\n'
              '\t\t\t\t\t\t << endl;\n'
              '\t\t\t\t\tcout << "Enter your choice: ";\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tcase 5:\n'
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\tmain();\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tdefault:\n'
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\tcout << "Invalid input! Try again." << endl;\n'
              '\t\t\t\t}\n'
              '\n'
              '\t\t\t} while (choice2 != 5);\n'
              '\t\t\tbreak;\n'
              '\t\t}\n'
              '\t\t\t// for program 2\n'
              '\t\tcase 2:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\t[2] Currency converter" << endl;\n'
              '\t\t\tDollar money;\n'
              '\t\t\tcout << money.getDollar() << endl;\n'
              '\t\t\tcout << money.getMarketSoums() << endl;\n'
              '\t\t\tcout << money.getofficialSoums() << endl\n'
              '\t\t\t\t << endl;\n'
              '\t\t\tmoney.setRates();\n'
              '\t\t\tcout << money.getDollar() << endl;\n'
              '\t\t\tcout << money.getMarketSoums() << endl;\n'
              '\t\t\tcout << money.getofficialSoums() << endl;\n'
              '\t\t\tcout << "Overloading: " << endl\n'
              '\t\t\t\t << endl;\n'
              '\n'
              '\t\t\tcout << money;\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tcase 3:\n'
              '\t\t{\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tdefault:\n'
              '\t\t\tcout << "Invalid input! Try again." << endl;\n'
              '\t\t}\n'
              '\t} while (choice != 3);\n'
              '\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001684',
         path='/OOP2_Lab4/main1.cpp',
         lineno=246,
         depth=2,
         type='function_decl',
         name='showChoicesforMainMenu',
         text='void showChoicesforMainMenu()\n'
              '{\n'
              '\n'
              '\tcout << endl\n'
              '\t\t << endl;\n'
              '\tcout << "\\t\\t\\t   M A I N  M E N U" << endl;\n'
              '\tcout << "\\t\\t\\t1: Day Time " << endl;\n'
              '\tcout << "\\t\\t\\t2: Dollar & Soums" << endl;\n'
              '\tcout << "\\t\\t\\t3: Exit " << endl;\n'
              '\tcout << "\\t\\t\\tEnter your choice : ";\n'
              '}\n')

Fragment(uuid='NORMALIZED-001685',
         path='/OOP2_Lab4/main1.cpp',
         lineno=258,
         depth=2,
         type='function_decl',
         name='showChoicesforMainMenu2',
         text='void showChoicesforMainMenu2()\n'
              '{\n'
              '\tcout << "\\t[1] First program" << endl;\n'
              '\tcout << "\\t\\t\\t   M A I N  M E N U 2" << endl;\n'
              '\tcout << "\\t\\t\\t1. To Display Time." << endl;\n'
              '\tcout << "\\t\\t\\t2. To Display Time in Seconds." << endl;\n'
              '\tcout << "\\t\\t\\t3. To Increment seconds." << endl;\n'
              '\tcout << "\\t\\t\\t4. To decrements minutes." << endl;\n'
              '\tcout << "\\t\\t\\t5. Exit." << endl;\n'
              '\tcout << "\\t\\t\\tEnter your choice : ";\n'
              '}\n')

Fragment(uuid='NORMALIZED-001686',
         path='/OOP2_Lab5/README.md',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Binary Operator Overloading\n\n')

Fragment(uuid='NORMALIZED-001687',
         path='/OOP2_Lab5/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Binary Operator Overloading\n'
              '### Program 1\n'
              '### Program 2\n')

Fragment(uuid='NORMALIZED-001688',
         path='/OOP2_Lab5/README.md',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='### Program 1\n'
              '```\n'
              'Create a class Rectangle.\n'
              'Private members of class Rectangle: Length, breadth.\n'
              'Create Member function: \n'
              '    Public:\n'
              '        double getArea()\n'
              '        void setLength(double)\n'
              '        void setBreadth(double)\n'
              '```\n'
              'Declare overloading function use **(+)** operator to add two '
              'Rectangle objects.\n'
              'In the `main()` function set rectangle length, breadth with '
              'member functions and use area function to print area of each '
              'rectangle. \n'
              'Then declare a third object use overloading function to get '
              'area of third object.\n'
              '\n')

Fragment(uuid='NORMALIZED-001689',
         path='/OOP2_Lab5/README.md',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='### Program 2\n'
              '```\n'
              'Create a class Distance.\n'
              'Private members of class Distance: Kilometer, meter.\n'
              'Create default constructor and parameter constructor.\n'
              'Create Member function: \n'
              '    void showDistance()\n'
              '```\n'
              'Declare overloading function use **(==)** operator to compare '
              'two distances. \n'
              'In the `main()` function set Distance  kilometer, meter and use '
              'show distance to print of each distance.\n'
              'Then use overloading function to get difference of two '
              'distances.\n')

Fragment(uuid='NORMALIZED-001690',
         path='/OOP2_Lab5/Source.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab5/Source.cpp\n'
              '  Classes: Distance, Rectangle\n'
              '  Functions: DistanceSecond, RectangleFirst, main\n')

Fragment(uuid='NORMALIZED-001691',
         path='/OOP2_Lab5/Source.cpp',
         lineno=3,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001692',
         path='/OOP2_Lab5/Source.cpp',
         lineno=6,
         depth=2,
         type='class_decl',
         name='Rectangle',
         text='class Rectangle\n'
              '{\n'
              'private:\n'
              '\tdouble length, breadth;\n'
              '\n'
              'public:\n'
              '\tdouble getArea()\n'
              '\t{\n'
              '\t\treturn length * breadth;\n'
              '\t}\n'
              '\tvoid setLength(double length)\n'
              '\t{\n'
              '\t\tthis->length = length;\n'
              '\t}\n'
              '\tvoid setBreadth(double breadth)\n'
              '\t{\n'
              '\t\tthis->breadth = breadth;\n'
              '\t}\n'
              '\tRectangle operator+(Rectangle &r2)\n'
              '\t{\n'
              '\t\tRectangle temp;\n'
              '\t\ttemp.setLength(length + r2.length);\n'
              '\t\ttemp.setBreadth(breadth + r2.breadth);\n'
              '\t\treturn temp;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001693',
         path='/OOP2_Lab5/Source.cpp',
         lineno=33,
         depth=2,
         type='function_decl',
         name='RectangleFirst',
         text='void RectangleFirst()\n'
              '{\n'
              '\tRectangle r3, r1, r2;\n'
              '\tint temp;\n'
              '\tcout << "Rectangle 1" << endl;\n'
              '\tcout << "Length: ";\n'
              '\tcin >> temp;\n'
              '\tr1.setLength(temp);\n'
              '\tcout << "Breadth: ";\n'
              '\tcin >> temp;\n'
              '\tr1.setBreadth(temp);\n'
              '\tcout << "Area: " << r1.getArea() << endl\n'
              '\t\t << endl;\n'
              '\n'
              '\tcout << "Rectangle 2" << endl;\n'
              '\tcout << "Length: ";\n'
              '\tcin >> temp;\n'
              '\tr2.setLength(temp);\n'
              '\tcout << "Breadth: ";\n'
              '\tcin >> temp;\n'
              '\tr2.setBreadth(temp);\n'
              '\tcout << "Area: " << r2.getArea() << endl\n'
              '\t\t << endl;\n'
              '\n'
              '\tr3 = r1 + r2; // overloading by the binary operator\n'
              '\tcout << "Rectangle 3 Area: " << r3.getArea() << endl;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001694',
         path='/OOP2_Lab5/Source.cpp',
         lineno=61,
         depth=2,
         type='class_decl',
         name='Distance',
         text='class Distance\n'
              '{\n'
              'private:\n'
              '\tfloat Km, M;\n'
              '\n'
              'public:\n'
              '\tvoid setKm(int Km)\n'
              '\t{\n'
              '\t\tthis->Km = Km;\n'
              '\t}\n'
              '\tvoid setM(int M)\n'
              '\t{\n'
              '\t\tthis->M = M;\n'
              '\t}\n'
              '\tDistance operator==(Distance &d)\n'
              '\t{\n'
              '\t\tif ((Km == d.Km) && (M == d.M))\n'
              '\t\t{\n'
              '\t\t\tcout << "They are EQUAL.\\n";\n'
              '\t\t\treturn *this;\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tcout << "NOT EQUAL.\\n";\n'
              '\t\t\treturn *this;\n'
              '\t\t}\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001695',
         path='/OOP2_Lab5/Source.cpp',
         lineno=89,
         depth=2,
         type='function_decl',
         name='DistanceSecond',
         text='void DistanceSecond()\n'
              '{\n'
              '\tDistance d1, d2;\n'
              '\tfloat k1, m1, k2, m2;\n'
              '\tcout << "First distance: \\n";\n'
              '\tcout << "Kilometers: ";\n'
              '\tcin >> k1;\n'
              '\tcout << "Meters: ";\n'
              '\tcin >> m1;\n'
              '\tif (m1 > 1000)\n'
              '\t{\n'
              '\t\tk1 = m1 / 1000;\n'
              '\t}\n'
              '\tcout << endl\n'
              '\t\t << endl;\n'
              '\n'
              '\tcout << "Second distance: \\n";\n'
              '\tcout << "Kilometers: ";\n'
              '\tcin >> k2;\n'
              '\tcout << "Meters: ";\n'
              '\tcin >> m2;\n'
              '\tif (m2 > 1000)\n'
              '\t{\n'
              '\t\tk2 = m2 / 1000;\n'
              '\t}\n'
              '\td1 == d2;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001696',
         path='/OOP2_Lab5/Source.cpp',
         lineno=116,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tint choice;\n'
              '\n'
              '\tdo\n'
              '\t{\n'
              '\n'
              '\t\tcout << "1. Rectangle" << endl\n'
              '\t\t\t << "2. Distance" << endl\n'
              '\t\t\t << "3. Exit" << endl\n'
              '\t\t\t << "Your choice: ";\n'
              '\t\tcin >> choice;\n'
              '\t\tswitch (choice)\n'
              '\t\t{\n'
              '\t\tcase 1:\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tRectangleFirst();\n'
              '\t\t\tsystem("pause");\n'
              '\t\tcase 2:\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tDistanceSecond();\n'
              '\t\t\tsystem("pause");\n'
              '\t\tdefault:\n'
              '\t\t\tbreak;\n'
              '\t\t}\n'
              '\t} while (choice != 3);\n'
              '\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001697',
         path='/OOP2_Lab6/README.md',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Inheritance\n\n')

Fragment(uuid='NORMALIZED-001698',
         path='/OOP2_Lab6/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Inheritance\n'
              '### Program 1\n'
              '### Program 2\n')

Fragment(uuid='NORMALIZED-001699',
         path='/OOP2_Lab6/README.md',
         lineno=3,
         depth=10,
         type='documentation',
         name='',
         text='### Program 1\n'
              'Imagine a publishing company that markets both book and audio '
              'cassette version of its works. Create a class Publication that '
              'stores the `title` (a string) and `price` (type float) of a '
              'publication. \n')

Fragment(uuid='NORMALIZED-001700',
         path='/OOP2_Lab6/README.md',
         lineno=5,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'From this class derive two classes: \n'
              '- `Book`, which adds a page count (type int). \n'
              '- `Tape`, which add playing time in minutes (type float). \n')

Fragment(uuid='NORMALIZED-001701',
         path='/OOP2_Lab6/README.md',
         lineno=9,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Each of these three classes should have: \n'
              '- `getdata() function to display its data \n'
              '- `setdata()` function to get its data from the user at the '
              'keyboard.\n')

Fragment(uuid='NORMALIZED-001702',
         path='/OOP2_Lab6/README.md',
         lineno=13,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Write a main() program to test the Book and Tape classes by '
              'creating instances of them, asking the user to fill with data '
              'with `setdata()`, and then displaying the data with '
              '`getdata()`.\n'
              '\n')

Fragment(uuid='NORMALIZED-001703',
         path='/OOP2_Lab6/README.md',
         lineno=16,
         depth=10,
         type='documentation',
         name='',
         text='### Program 2\n'
              'Assume that a bank maintains two kinds of accounts for '
              'customers, one called as saving and the other called as current '
              'account.  \n')

Fragment(uuid='NORMALIZED-001704',
         path='/OOP2_Lab6/README.md',
         lineno=18,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'The saving account provides interest and withdrawal facilities '
              'but no cheque book facility. \n')

Fragment(uuid='NORMALIZED-001705',
         path='/OOP2_Lab6/README.md',
         lineno=20,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'The current account provides cheque book facility but no '
              'interest. Current account holders should also maintain a '
              'minimum balance and if the balance falls below this level a '
              'service charge is imposed.\n')

Fragment(uuid='NORMALIZED-001706',
         path='/OOP2_Lab6/README.md',
         lineno=22,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Create a class `ACCOUNT` that stores customer name, account '
              'number and type of account. \n')

Fragment(uuid='NORMALIZED-001707',
         path='/OOP2_Lab6/README.md',
         lineno=24,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'From this derive the classes `CURR_ACCT` and `SAV_ACCT` to make '
              'them more specific to their requirements. \n')

Fragment(uuid='NORMALIZED-001708',
         path='/OOP2_Lab6/README.md',
         lineno=26,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Do not use any constructors. Use member functions to initialize '
              'the class members. Include necessary member functions in order '
              'to achieve all the tasks:\n')

Fragment(uuid='NORMALIZED-001709',
         path='/OOP2_Lab6/README.md',
         lineno=28,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Design a menu based program where user selects the type of '
              'account and perform the following tasks:\n'
              '- Accept deposit from a customer and update the balance.\n'
              '- Display the balance.\n'
              '- Compute and deposit interest.\n'
              '- Permit withdrawal and update the balance.\n'
              '- Check for the minimum balance, impose penalty, necessary and '
              'upload the balance.\n')

Fragment(uuid='NORMALIZED-001710',
         path='/OOP2_Lab6/README.md',
         lineno=35,
         depth=10,
         type='documentation',
         name='',
         text='\n```')

Fragment(uuid='NORMALIZED-001711',
         path='/OOP2_Lab6/README.md',
         lineno=36,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'CURR_ACCT:\n'
              '---\n'
              'amount, penalty\n'
              '---\n'
              'Deposit() – will deposit the money and update amount\n'
              'Balance() - will display the balance of account\n'
              'Withdraw() – will allow to withdraw from account (check if '
              'withdrawal amount is less than balance and update balance)\n'
              'Penalty() – apply penalty of USD 2 for maintaining balance less '
              'than 100 USD\n'
              '```')

Fragment(uuid='NORMALIZED-001712',
         path='/OOP2_Lab6/README.md',
         lineno=45,
         depth=6,
         type='documentation',
         name='',
         text='\n```')

Fragment(uuid='NORMALIZED-001713',
         path='/OOP2_Lab6/README.md',
         lineno=46,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'SAV_ACCT:\n'
              '---\n'
              'amount\n'
              '---\n'
              'Deposit() – will deposit the money and update amount\n'
              'Balance() - will display the balance of account\n'
              'Compute_Interest() – calculate interest based on given '
              'condition [ROI is 4% per annum]\n'
              'Withdraw() – will allow to withdraw from account (check if '
              'withdrawal amount is less than balance and update balance)\n'
              '```')

Fragment(uuid='NORMALIZED-001714',
         path='/OOP2_Lab6/Source.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab6/Source.cpp\n'
              '  Classes: ACCOUNT, Book, CURR_ACCT, Publication, SAV_ACCT, '
              'Tape\n'
              '  Functions: F_First_Program, F_Second_Program, main\n')

Fragment(uuid='NORMALIZED-001715',
         path='/OOP2_Lab6/Source.cpp',
         lineno=4,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001716',
         path='/OOP2_Lab6/Source.cpp',
         lineno=8,
         depth=2,
         type='function_decl',
         name='F_First_Program',
         text='')

Fragment(uuid='NORMALIZED-001717',
         path='/OOP2_Lab6/Source.cpp',
         lineno=9,
         depth=2,
         type='function_decl',
         name='F_Second_Program',
         text='')

Fragment(uuid='NORMALIZED-001718',
         path='/OOP2_Lab6/Source.cpp',
         lineno=12,
         depth=2,
         type='class_decl',
         name='Publication',
         text='class Publication\n'
              "{ // base class for classes 'Book' and 'Tape'\n"
              'private:\n'
              '\tstring title;\n'
              '\tfloat price;\n'
              '\n'
              'public:\n'
              '\tvoid getdata()\n'
              '\t{\n'
              '\t\tcout << " Book title: ";\n'
              '\t\tcin >> title;\n'
              '\t\tcout << " Price \'USA $\': ";\n'
              '\t\tcin >> price;\n'
              '\t}\n'
              '\tvoid showdata()\n'
              '\t{\n'
              '\t\tcout << " Book title: \'" << title << "\'" << endl;\n'
              '\t\tcout << " Price: " << price << "$" << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001719',
         path='/OOP2_Lab6/Source.cpp',
         lineno=33,
         depth=2,
         type='class_decl',
         name='Book',
         text='class Book : public Publication\n'
              '{ // derived class from Publication\n'
              'private:\n'
              '\tint page_count;\n'
              '\n'
              'public:\n'
              '\tvoid getdata()\n'
              '\t{\n'
              '\t\tPublication::getdata(); // getdata() of class Publicaton\n'
              '\t\tcout << " Number of pages: ";\n'
              '\t\tcin >> page_count;\n'
              '\t}\n'
              '\tvoid showdata()\n'
              '\t{\n'
              '\t\tPublication::showdata(); // showdata() of class '
              'Publication\n'
              '\t\tcout << " Number of pages: " << page_count << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001720',
         path='/OOP2_Lab6/Source.cpp',
         lineno=52,
         depth=2,
         type='class_decl',
         name='Tape',
         text='class Tape : public Publication\n'
              '{ // derived class from Publication\n'
              'private:\n'
              '\tfloat playing_time;\n'
              '\n'
              'public:\n'
              '\tvoid getdata()\n'
              '\t{\n'
              '\t\tPublication::getdata();\n'
              '\t\tcout << " Playing time of audiobook: ";\n'
              '\t\tcin >> playing_time;\n'
              '\t}\n'
              '\tvoid showdata()\n'
              '\t{\n'
              '\t\tPublication::showdata();\n'
              '\t\tcout << " Playing time of audionbook: " << playing_time << '
              'endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001721',
         path='/OOP2_Lab6/Source.cpp',
         lineno=72,
         depth=2,
         type='class_decl',
         name='ACCOUNT',
         text='class ACCOUNT\n'
              '{\n'
              'private:\n'
              '\t// customer name, account number and type of account.\n'
              '\tstring name;\n'
              '\tstring account_number;\n'
              '\tstring type_account;\n'
              '\n'
              'public:\n'
              '\tvoid getdata()\n'
              '\t{\n'
              '\t\tcout << " Name: ";\n'
              '\t\tcin >> name;\n'
              '\t\tcout << " Account Number: ";\n'
              '\t\tcin >> account_number;\n'
              '\t\tcout << " Type of Account: ";\n'
              '\t\tcin >> type_account;\n'
              '\t}\n'
              '\n'
              '\tvoid showdata()\n'
              '\t{\n'
              '\t\tcout << " Name: " << name << endl;\n'
              '\t\tcout << " Account Number: " << account_number << endl;\n'
              '\t\tcout << " Type of Account: " << type_account << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001722',
         path='/OOP2_Lab6/Source.cpp',
         lineno=99,
         depth=2,
         type='class_decl',
         name='CURR_ACCT',
         text='class CURR_ACCT : public ACCOUNT\n'
              '{\n'
              'private:\n'
              '\tint amount;\n'
              '\tint penalty = 2;\n'
              '\tint balance = 0;\n'
              '\tint withdraw;\n'
              '\n'
              'public:\n'
              '\tvoid Deposit()\n'
              '\t{\n'
              '\t\tcout << " Enter your deposit balance: ";\n'
              '\t\tcin >> amount;\n'
              '\n'
              '\t\tif (amount >= 100)\n'
              '\t\t{\n'
              '\t\t\tbalance = balance + amount;\n'
              '\t\t\tcout << " Successfully added!\\n\\n";\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tcout << " Deposit cannot be less than 100$\\n\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tDeposit();\n'
              '\t\t}\n'
              '\t}\n'
              '\n'
              '\tvoid Balance()\n'
              '\t{\n'
              '\t\tACCOUNT::showdata();\n'
              '\t\tcout << " Balance: " << balance << endl\n'
              '\t\t\t << endl;\n'
              '\t}\n'
              '\n'
              '\tvoid Withdraw()\n'
              '\t{\n'
              '\t\tcout << " Enter the balance you want to withdraw: ";\n'
              '\t\tcin >> withdraw;\n'
              '\t}\n'
              '\n'
              '\tvoid Penalty()\n'
              '\t{\n'
              '\t\tif (balance - withdraw > 100)\n'
              '\t\t{\n'
              '\t\t\tbalance = balance - withdraw;\n'
              '\t\t\tcout << " Successfully done!\\n\\n";\n'
              '\t\t}\n'
              '\t\telse if (balance - withdraw < 0)\n'
              '\t\t{\n'
              '\t\t\tcout << " You do not have such balance of money in your '
              'account!\\n";\n'
              '\t\t\tcout << " Your balance is " << balance << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tWithdraw();\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tcout << " Your account balance is less than 100$.\\n You '
              'got penalty -2$.\\n\\n";\n'
              '\t\t\tbalance = balance - withdraw - penalty;\n'
              '\t\t}\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001723',
         path='/OOP2_Lab6/Source.cpp',
         lineno=163,
         depth=2,
         type='class_decl',
         name='SAV_ACCT',
         text='class SAV_ACCT : public ACCOUNT\n'
              '{\n'
              'private:\n'
              '\tint amount;\n'
              '\tint balance = 0;\n'
              '\tint withdraw;\n'
              '\tfloat year;\n'
              '\n'
              'public:\n'
              '\tvoid Deposit()\n'
              '\t{\n'
              '\t\tcout << " Enter your deposit balance: ";\n'
              '\t\tcin >> amount;\n'
              '\t\tbalance = balance + amount;\n'
              '\t}\n'
              '\n'
              '\tvoid Balance()\n'
              '\t{\n'
              '\t\tACCOUNT::showdata();\n'
              '\t\tcout << " Balance: " << balance << endl\n'
              '\t\t\t << endl;\n'
              '\t}\n'
              '\n'
              '\tvoid Withdraw()\n'
              '\t{\n'
              '\t\tcout << " Enter the balance you want to withdraw: ";\n'
              '\t\tcin >> withdraw;\n'
              '\t\tif (balance - withdraw > 100)\n'
              '\t\t{\n'
              '\t\t\tbalance = balance - withdraw;\n'
              '\t\t\tcout << " Successfully done!\\n\\n";\n'
              '\t\t}\n'
              '\t\telse if (balance - withdraw < 0)\n'
              '\t\t{\n'
              '\t\t\tcout << " You do not have such balance of money in your '
              'account!\\n";\n'
              '\t\t\tcout << " Your balance is " << balance << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tWithdraw();\n'
              '\t\t}\n'
              '\t}\n'
              '\n'
              '\tvoid Compute_Interest()\n'
              '\t{\n'
              '\t\tBalance();\n'
              '\t\tcout << " ROI (Return on Investment) = 4%\\n";\n'
              '\t\tcout << " Enter the year of investment: ";\n'
              '\t\tcin >> year;\n'
              '\t\tcout << " Your balance after " << year << " year(s) will be '
              '" << balance * pow(1.04, year) << "\\n\\n";\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001724',
         path='/OOP2_Lab6/Source.cpp',
         lineno=215,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "\\n\\t\\t 1. First program (Books)\\n\\t\\t 2. '
              'Second program (Bank account) \\n\\t\\t 0. Exit \\n\\n\\t Your '
              'choice: ";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\t\t// case '1' for the first program\n"
              "\t\tcase '1':\n"
              '\t\t\tF_First_Program();\n'
              '\t\t\tbreak;\n'
              "\t\t\t// case '2' for the second program\n"
              "\t\tcase '2':\n"
              '\t\t\tF_Second_Program();\n'
              '\t\t\tbreak;\n'
              "\t\t\t// case '0' to exit\n"
              "\t\tcase '0':\n"
              '\t\t\tk = 1000;\n'
              '\t\t\tbreak;\n'
              '\t\tdefault:\n'
              '\t\t\tcout << "\\tYour choice is not available in Menu. \\n\\t '
              'Please try one more time.\\n";\n'
              '\t\t\tbreak;\n'
              '\t\t}\n'
              '\t}\n'
              '\tcout << endl;\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001725',
         path='/OOP2_Lab6/Source.cpp',
         lineno=247,
         depth=2,
         type='function_decl',
         name='F_First_Program',
         text='void F_First_Program()\n'
              '{\n'
              '\tsystem("cls");\n'
              '\n'
              '\tBook book;\n'
              '\tTape tape;\n'
              '\n'
              '\tfor (int j = 0; j < 1000; j++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << " Welcome to Bookshop \'AliBooks\' \\n 1. Paper '
              'version \\n 2. Audiobook \\n 0. Go back\\n Your choice: ";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\t\t// case 1 for the first program\n'
              "\t\tcase '1':\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tbook.getdata();\n'
              '\t\t\tcout << "\\n\\n Your given info:\\n";\n'
              '\t\t\tbook.showdata();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\t\t// case 2 for the second program\n'
              "\t\tcase '2':\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\ttape.getdata();\n'
              '\t\t\tcout << "\\n\\nYour given info:\\n";\n'
              '\t\t\ttape.showdata();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\t\t// case 0 to exit\n'
              "\t\tcase '0':\n"
              '\t\t\tj = 1000;\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\tdefault:\n'
              '\t\t\tcout << "\\t Your choice is not available in Menu. \\n\\t '
              'Please try one more time.\\n";\n'
              '\t\t\tbreak;\n'
              '\t\t} // switch\n'
              '\t}\t  // for loop\n'
              '}\n')

Fragment(uuid='NORMALIZED-001726',
         path='/OOP2_Lab6/Source.cpp',
         lineno=290,
         depth=2,
         type='function_decl',
         name='F_Second_Program',
         text='void F_Second_Program()\n'
              '{\n'
              '\tsystem("cls");\n'
              '\n'
              '\tCURR_ACCT account1;\n'
              '\tSAV_ACCT account2;\n'
              '\n'
              '\tfor (int i = 0; i < 1000; i++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "\\t WELCOME TO \'AliBank\' \\n Chooce your account '
              'rate: \\n 1. Current account\\n 2. Saving account\\n 0. Go back '
              '\\n Your choice: ";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\t\t// current account\n'
              "\t\tcase '1':\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\taccount1.getdata(); // calling the function from base '
              'class\n'
              '\t\t\tfor (int l = 0; l < 1000; l++)\n'
              '\t\t\t{\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << " 1. Deposit \\n 2. Display the balance \\n 3. '
              'Withdraw money \\n 0. Go back \\n Your choice: ";\n'
              '\t\t\t\tswitch (_getch())\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\t// case 1 for the first program\n'
              "\t\t\t\tcase '1':\n"
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\taccount1.Deposit();\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\t\t// case 2 for the second program\n'
              "\t\t\t\tcase '2':\n"
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\taccount1.Balance();\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\tcase '3':\n"
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\taccount1.Withdraw();\n'
              '\t\t\t\t\taccount1.Penalty();\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\tcase '0':\n"
              '\t\t\t\t\tl = 1000;\n'
              '\t\t\t\t\tF_Second_Program();\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tdefault:\n'
              '\t\t\t\t\tcout << "\\tYour choice is not available in Menu. '
              '\\n\\t Please try one more time.\\n";\n'
              '\t\t\t\t\tbreak;\n'
              '\n'
              '\t\t\t\t} // switch\n'
              '\t\t\t}\t  // for loop\n'
              '\n'
              '\t\t\t// saving account\n'
              "\t\tcase '2':\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\taccount2.getdata(); // calling the function from base '
              'class\n'
              '\t\t\tfor (int j = 0; j < 1000; j++)\n'
              '\t\t\t{\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << " 1. Deposit \\n 2. Display the balance \\n 3. '
              'Withdraw money \\n 4. Compute Interest \\n 0. Go back \\n Your '
              'choice: ";\n'
              '\t\t\t\tswitch (_getch())\n'
              '\t\t\t\t{\n'
              "\t\t\t\tcase '1':\n"
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\taccount2.Deposit();\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\tcase '2':\n"
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\taccount2.Balance();\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\tcase '3':\n"
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\taccount2.Withdraw();\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\tcase '4':\n"
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\taccount2.Compute_Interest();\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t\tbreak;\n'
              "\t\t\t\tcase '0':\n"
              '\t\t\t\t\tj = 1000;\n'
              '\t\t\t\t\tF_Second_Program();\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\tdefault:\n'
              '\t\t\t\t\tcout << "\\tYour choice is not available in Menu. '
              '\\n\\t Please try one more time.\\n";\n'
              '\t\t\t\t\tbreak;\n'
              '\t\t\t\t}\n'
              '\t\t\t}\n'
              '\t\t\t// go back to start\n'
              "\t\tcase '0':\n"
              '\t\t\ti = 1000;\n'
              '\t\t\tbreak;\n'
              '\t\t\t// default case for big switch\n'
              '\t\tdefault:\n'
              '\t\t\tcout << "\\tYour choice is not available in Menu. \\n\\t '
              'Please try one more time.\\n";\n'
              '\t\t\tbreak;\n'
              '\t\t} // big switch\n'
              '\t}\t  // big for\n'
              '}\n')

Fragment(uuid='NORMALIZED-001727',
         path='/OOP2_Lab7/Source.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab7/Source.cpp\n'
              '  Classes: Account, Admin, Casual_Typist, Master, Officer, '
              'Person, Regular_Typist, Staff, Teacher, Typist\n'
              '  Functions: F_First_Program_Menu, F_Second_Program_Menu, main\n')

Fragment(uuid='NORMALIZED-001728',
         path='/OOP2_Lab7/Source.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001729',
         path='/OOP2_Lab7/Source.cpp',
         lineno=10,
         depth=2,
         type='function_decl',
         name='F_First_Program_Menu',
         text='')

Fragment(uuid='NORMALIZED-001730',
         path='/OOP2_Lab7/Source.cpp',
         lineno=11,
         depth=2,
         type='function_decl',
         name='F_Second_Program_Menu',
         text='')

Fragment(uuid='NORMALIZED-001731',
         path='/OOP2_Lab7/Source.cpp',
         lineno=14,
         depth=2,
         type='class_decl',
         name='Staff',
         text='class Staff\n'
              '{\n'
              'protected:\n'
              '\tstring code;\n'
              '\tstring name;\n'
              '\n'
              'public:\n'
              '\tStaff()\n'
              '\t{\n'
              '\t\tcode = "0000";\n'
              '\t\tname = "Unknown";\n'
              '\t}\n'
              '\t/*void set_code(string code) {\n'
              '\t\tthis->code = code;\n'
              '\t}\n'
              '\tstring get_code() {\n'
              '\t\treturn code;\n'
              '\t}\n'
              '\tvoid set_name(string name) {\n'
              '\t\tthis->name = name;\n'
              '\t}\n'
              '\n'
              '\tstring get_name() {\n'
              '\t\treturn name;\n'
              '\t}\n'
              '\t*/\n'
              '\tvoid getdata_name()\n'
              '\t{\n'
              '\t\tcout << " Enter employee name: ";\n'
              '\t\tcin >> name;\n'
              '\t}\n'
              '\tvoid getdata_code()\n'
              '\t{\n'
              '\t\tcout << " Enter employee code: ";\n'
              '\t\tcin >> code;\n'
              '\t}\n'
              '\tvoid showdata_name()\n'
              '\t{\n'
              '\t\tcout << " Name: " << name << endl;\n'
              '\t}\n'
              '\tvoid showdata_code()\n'
              '\t{\n'
              '\t\tcout << " Code: " << code << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001732',
         path='/OOP2_Lab7/Source.cpp',
         lineno=60,
         depth=2,
         type='class_decl',
         name='Teacher',
         text='class Teacher : public Staff\n'
              '{\n'
              'protected:\n'
              '\tstring subject;\n'
              '\tint publications;\n'
              '\n'
              'public:\n'
              '\tTeacher()\n'
              '\t{\n'
              '\t\tsubject = "Unknown";\n'
              '\t\tpublications = 0;\n'
              '\t}\n'
              '\tvoid getdata()\n'
              '\t{\n'
              '\t\tStaff::getdata_code();\n'
              '\t\tStaff::getdata_name();\n'
              '\t\tcout << " Enter subject: ";\n'
              '\t\tcin >> subject;\n'
              '\t\tcout << " Enter number of publications: ";\n'
              '\t\tcin >> publications;\n'
              '\t}\n'
              '\tvoid showdata()\n'
              '\t{\n'
              '\t\tStaff::showdata_code();\n'
              '\t\tStaff::showdata_name();\n'
              '\t\tcout << " Subject: " << subject << endl\n'
              '\t\t\t << " Publications: " << publications << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001733',
         path='/OOP2_Lab7/Source.cpp',
         lineno=90,
         depth=2,
         type='class_decl',
         name='Officer',
         text='class Officer : public Staff\n'
              '{\n'
              'protected:\n'
              '\tfloat grade;\n'
              '\n'
              'public:\n'
              '\tOfficer()\n'
              '\t{\n'
              '\t\tgrade = 0.0;\n'
              '\t}\n'
              '\tvoid getdata()\n'
              '\t{\n'
              '\t\tStaff::getdata_code();\n'
              '\t\tStaff::getdata_name();\n'
              '\t\tcout << " Enter the grade: ";\n'
              '\t\tcin >> grade;\n'
              '\t}\n'
              '\tvoid showdata()\n'
              '\t{\n'
              '\t\tStaff::showdata_code();\n'
              '\t\tStaff::showdata_name();\n'
              '\t\tcout << " Grade: " << grade << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001734',
         path='/OOP2_Lab7/Source.cpp',
         lineno=115,
         depth=2,
         type='class_decl',
         name='Typist',
         text='class Typist : public Staff\n'
              '{\n'
              'protected:\n'
              '\tint speed;\n'
              '\n'
              'public:\n'
              '\tTypist()\n'
              '\t{\n'
              '\t\tspeed = 0;\n'
              '\t}\n'
              '\tvoid getdata()\n'
              '\t{\n'
              '\t\tStaff::getdata_code();\n'
              '\t\tStaff::getdata_name();\n'
              '\t\tcout << " Enter the speed (wprds/min): ";\n'
              '\t\tcin >> speed;\n'
              '\t}\n'
              '\tvoid showdata()\n'
              '\t{\n'
              '\t\tStaff::showdata_code();\n'
              '\t\tStaff::showdata_name();\n'
              '\t\tcout << " Speed (words/min): " << speed << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001735',
         path='/OOP2_Lab7/Source.cpp',
         lineno=140,
         depth=2,
         type='class_decl',
         name='Regular_Typist',
         text='class Regular_Typist : public Typist\n'
              '{\n'
              'protected:\n'
              '\tfloat monthly_salary;\n'
              '\n'
              'public:\n'
              '\tRegular_Typist()\n'
              '\t{\n'
              '\t\tmonthly_salary = 0.0;\n'
              '\t}\n'
              '\tvoid getdata()\n'
              '\t{\n'
              '\t\tTypist::getdata();\n'
              '\t\tcout << " Enter the monthly salary: ";\n'
              '\t\tcin >> monthly_salary;\n'
              '\t}\n'
              '\tvoid showdata()\n'
              '\t{\n'
              '\t\tTypist::showdata();\n'
              '\t\tcout << " Monthly salary: " << monthly_salary << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001736',
         path='/OOP2_Lab7/Source.cpp',
         lineno=163,
         depth=2,
         type='class_decl',
         name='Casual_Typist',
         text='class Casual_Typist : public Typist\n'
              '{\n'
              'protected:\n'
              '\tfloat daily_wage;\n'
              '\n'
              'public:\n'
              '\tCasual_Typist()\n'
              '\t{\n'
              '\t\tdaily_wage = 0.0;\n'
              '\t}\n'
              '\tvoid getdata()\n'
              '\t{\n'
              '\t\tTypist::getdata();\n'
              '\t\tcout << " Enter the daily wage: ";\n'
              '\t\tcin >> daily_wage;\n'
              '\t}\n'
              '\tvoid showdata()\n'
              '\t{\n'
              '\t\tTypist::showdata();\n'
              '\t\tcout << " Daily wage: " << daily_wage << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001737',
         path='/OOP2_Lab7/Source.cpp',
         lineno=188,
         depth=2,
         type='class_decl',
         name='Person',
         text='class Person\n'
              '{\n'
              'protected:\n'
              '\tstring name;\n'
              '\tstring code;\n'
              '\n'
              'public:\n'
              '\tPerson()\n'
              '\t{\n'
              '\t\tname = "Unknown";\n'
              '\t\tcode = "Unknown";\n'
              '\t}\n'
              '\tvoid getdetails()\n'
              '\t{\n'
              '\t\tcout << " Enter name: ";\n'
              '\t\tcin >> name;\n'
              '\t\tcout << " Enter code: ";\n'
              '\t\tcin >> code;\n'
              '\t}\n'
              '\tvoid showdetails()\n'
              '\t{\n'
              '\t\tcout << " NAME: " << name << endl;\n'
              '\t\tcout << " CODE: " << code << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001738',
         path='/OOP2_Lab7/Source.cpp',
         lineno=214,
         depth=2,
         type='class_decl',
         name='Account',
         text='class Account : virtual public Person\n'
              '{\n'
              'protected:\n'
              '\tfloat pay;\n'
              '\n'
              'public:\n'
              '\tAccount()\n'
              '\t{\n'
              '\t\tpay = 0.0;\n'
              '\t}\n'
              '\tvoid getpay()\n'
              '\t{\n'
              '\t\tcout << " Enter pay amount: ";\n'
              '\t\tcin >> pay;\n'
              '\t}\n'
              '\tvoid showpay()\n'
              '\t{\n'
              '\t\tcout << " PAY: " << pay << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001739',
         path='/OOP2_Lab7/Source.cpp',
         lineno=235,
         depth=2,
         type='class_decl',
         name='Admin',
         text='class Admin : virtual public Person\n'
              '{\n'
              'protected:\n'
              '\tint experience;\n'
              '\n'
              'public:\n'
              '\tAdmin()\n'
              '\t{\n'
              '\t\texperience = 0;\n'
              '\t}\n'
              '\tvoid getexpr()\n'
              '\t{\n'
              '\t\tcout << " Enter experience in years: ";\n'
              '\t\tcin >> experience;\n'
              '\t}\n'
              '\tvoid showexpr()\n'
              '\t{\n'
              '\t\tcout << " EXPERIENCE: " << experience << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001740',
         path='/OOP2_Lab7/Source.cpp',
         lineno=256,
         depth=2,
         type='class_decl',
         name='Master',
         text='class Master : public Account, public Admin\n'
              '{\n'
              'public:\n'
              '\tvoid create()\n'
              '\t{\n'
              '\t\tgetdetails();\n'
              '\t\tgetpay();\n'
              '\t\tgetexpr();\n'
              '\t}\n'
              '\n'
              '\tvoid display()\n'
              '\t{\n'
              '\t\tshowdetails();\n'
              '\t\tshowpay();\n'
              '\t\tshowexpr();\n'
              '\t}\n'
              '\n'
              '\tvoid update()\n'
              '\t{\n'
              '\t\tfor (int i = 0; i < 1000; i++)\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\t U P D A T E  D E T A I L S\\n";\n'
              '\t\t\tcout << "=========================================\\n";\n'
              '\t\t\tcout << " Choose detail you want to update\\n";\n'
              '\t\t\tcout << " 1. NAME\\n";\n'
              '\t\t\tcout << " 2. CODE\\n";\n'
              '\t\t\tcout << " 3. EXPERIENCE\\n";\n'
              '\t\t\tcout << " 4. PAY\\n";\n'
              '\t\t\tcout << " 0. Back\\n";\n'
              '\t\t\tcout << " Your choice: ";\n'
              '\n'
              '\t\t\tswitch (_getch())\n'
              '\t\t\t{\n'
              '\t\t\tcase 49:\n'
              '\t\t\t\tcout << "\\n\\n Enter name: ";\n'
              '\t\t\t\tcin >> name;\n'
              '\t\t\t\tcout << " Successfully Updated!\\n";\n'
              '\t\t\t\tSleep(0700);\n'
              '\t\t\t\tSleep(0700);\n'
              '\t\t\t\tbreak;\n'
              '\t\t\tcase 50:\n'
              '\t\t\t\tcout << "\\n\\n Enter code: ";\n'
              '\t\t\t\tcin >> code;\n'
              '\t\t\t\tcout << " Successfully Updated!\\n";\n'
              '\t\t\t\tSleep(0700);\n'
              '\t\t\t\tSleep(0700);\n'
              '\t\t\t\tbreak;\n'
              '\t\t\tcase 51:\n'
              '\t\t\t\tcout << "\\n\\n Enter Expereince: ";\n'
              '\t\t\t\tcin >> experience;\n'
              '\t\t\t\tcout << " Successfully Updated!\\n";\n'
              '\t\t\t\tSleep(0700);\n'
              '\t\t\t\tSleep(0700);\n'
              '\t\t\t\tbreak;\n'
              '\t\t\tcase 52:\n'
              '\t\t\t\tcout << "\\n\\n Enter pay: ";\n'
              '\t\t\t\tcin >> pay;\n'
              '\t\t\t\tcout << " Successfully Updated!\\n";\n'
              '\t\t\t\tSleep(0700);\n'
              '\t\t\t\tSleep(0700);\n'
              '\t\t\t\tbreak;\n'
              '\t\t\tcase 48:\n'
              '\t\t\t\ti = 1000;\n'
              '\t\t\t\tbreak;\n'
              '\t\t\tdefault:\n'
              '\t\t\t\tcout << endl\n'
              '\t\t\t\t\t << endl;\n'
              '\t\t\t\tcout << "\\t\\t Your choice is not abailable in Menu. '
              '\\n\\t\\t Please try one more time.\\n";\n'
              '\t\t\t\tSleep(0700);\n'
              '\t\t\t\tSleep(0700);\n'
              '\t\t\t} // switch\n'
              '\t\t}\n'
              '\t} // for loop\n'
              '};\n')

Fragment(uuid='NORMALIZED-001741',
         path='/OOP2_Lab7/Source.cpp',
         lineno=332,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "\\tM A I N  M E N U\\n";\n'
              '\t\tcout << "      =====================\\n";\n'
              '\t\tcout << "      1. First program\\n";\n'
              '\t\tcout << "      2. Second program\\n";\n'
              '\t\tcout << "      0. Exit\\n";\n'
              '\t\tcout << "      Your choice: \\n";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase '1':\n"
              '\t\t{\n'
              '\t\t\tcout << "\\t Educational institution database\\n";\n'
              '\t\t\t// calling the menu of first program\n'
              '\t\t\tF_First_Program_Menu();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              "\t\tcase '2':\n"
              '\t\t{\n'
              '\t\t\tcout << "\\t Second program\\n";\n'
              '\t\t\t// calling the menu of second program\n'
              '\t\t\tF_Second_Program_Menu();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              "\t\tcase '0':\n"
              '\t\t{\n'
              '\t\t\treturn 0;\n'
              '\t\t\tbreak;\n'
              '\t\t}\n'
              '\t\tdefault:\n'
              '\t\t{\n'
              '\t\t\tcout << endl\n'
              '\t\t\t\t << endl;\n'
              '\t\t\tcout << "\\t\\t Your choice is not abailable in Menu. '
              '\\n\\t\\t Please try one more time.\\n";\n'
              '\t\t\tSleep(0700);\n'
              '\t\t\tSleep(0700);\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t} // switch\n'
              '\t}\t  // for loop\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001742',
         path='/OOP2_Lab7/Source.cpp',
         lineno=381,
         depth=2,
         type='function_decl',
         name='F_First_Program_Menu',
         text='void F_First_Program_Menu()\n'
              '{\n'
              '\t// objects\n'
              '\tTeacher teacher;\n'
              '\tOfficer officer;\n'
              '\tRegular_Typist regular;\n'
              '\tCasual_Typist casual;\n'
              '\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "\\tM A I N  M E N U\\n";\n'
              '\t\tcout << "      =====================\\n";\n'
              '\t\tcout << " 1. TEACHER\\n";\n'
              '\t\tcout << " 2. OFFICER\\n";\n'
              '\t\tcout << " 3. TYPIST\\n";\n'
              '\t\tcout << " 0. Back\\n";\n'
              '\t\tcout << " Your choice: \\n";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase '1':\n"
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\t T E A C H E R\\n";\n'
              '\t\t\tcout << "===================================\\n";\n'
              '\t\t\tteacher.getdata();\n'
              '\t\t\tcout << "\\n\\n\\tThe given information:\\n";\n'
              '\t\t\tcout << "===================================\\n";\n'
              '\t\t\tteacher.showdata();\n'
              '\t\t\tcout << endl\n'
              '\t\t\t\t << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              "\t\tcase '2':\n"
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\t O F F I C E R\\n";\n'
              '\t\t\tcout << "===================================\\n";\n'
              '\t\t\tofficer.getdata();\n'
              '\t\t\tcout << "\\n\\n\\tThe given information:\\n";\n'
              '\t\t\tcout << "===================================\\n";\n'
              '\t\t\tofficer.showdata();\n'
              '\t\t\tcout << endl\n'
              '\t\t\t\t << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              "\t\tcase '3':\n"
              '\t\t{\n'
              '\t\t\tfor (int l = 0; l < 1000; l++)\n'
              '\t\t\t{\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\t T Y P I S T\\n";\n'
              '\t\t\t\tcout << "===================================\\n";\n'
              '\t\t\t\tcout << " 1. Regular typist\\n";\n'
              '\t\t\t\tcout << " 2. Casual typist\\n";\n'
              '\t\t\t\tcout << " 0. Back\\n";\n'
              '\t\t\t\tcout << " Your choice: \\n";\n'
              '\t\t\t\tswitch (_getch())\n'
              '\t\t\t\t{\n'
              "\t\t\t\tcase '1':\n"
              '\t\t\t\t{\n'
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\tcout << "\\t R E G U L A R  T Y P I S T\\n";\n'
              '\t\t\t\t\tcout << "===================================\\n";\n'
              '\t\t\t\t\tregular.getdata();\n'
              '\t\t\t\t\tcout << "\\n\\n\\tThe given information:\\n";\n'
              '\t\t\t\t\tcout << "===================================\\n";\n'
              '\t\t\t\t\tregular.showdata();\n'
              '\t\t\t\t\tcout << endl\n'
              '\t\t\t\t\t\t << endl;\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\n'
              "\t\t\t\tcase '2':\n"
              '\t\t\t\t{\n'
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\tcout << "\\t C A S U A L  T Y P I S T\\n";\n'
              '\t\t\t\t\tcout << "===================================\\n";\n'
              '\t\t\t\t\tcasual.getdata();\n'
              '\t\t\t\t\tcout << "\\n\\n\\tThe given information:\\n";\n'
              '\t\t\t\t\tcout << "===================================\\n";\n'
              '\t\t\t\t\tcasual.showdata();\n'
              '\t\t\t\t\tcout << endl\n'
              '\t\t\t\t\t\t << endl;\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t}\n'
              '\t\t\t\tbreak;\n'
              "\t\t\t\tcase '0':\n"
              '\t\t\t\t{\n'
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\tl = 1000;\n'
              '\t\t\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\t\t\tdefault:\n'
              '\t\t\t\t{\n'
              '\t\t\t\t\tcout << endl\n'
              '\t\t\t\t\t\t << endl;\n'
              '\t\t\t\t\tcout << "\\t\\t Your choice is not abailable in Menu. '
              '\\n\\t\\t Please try one more time.\\n";\n'
              '\t\t\t\t\tSleep(0700);\n'
              '\t\t\t\t\tSleep(0700);\n'
              '\t\t\t\t}\n'
              '\t\t\t\tbreak;\n'
              '\t\t\t\t} // switch\n'
              '\t\t\t}\t  // for\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              "\t\tcase '0':\n"
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tk = 1000;\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\tdefault:\n'
              '\t\t{\n'
              '\t\t\tcout << endl\n'
              '\t\t\t\t << endl;\n'
              '\t\t\tcout << "\\t\\t Your choice is not abailable in Menu. '
              '\\n\\t\\t Please try one more time.\\n";\n'
              '\t\t\tSleep(0700);\n'
              '\t\t\tSleep(0700);\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\t} // switch\n'
              '\t}\t  // for loop\n'
              '}\n')

Fragment(uuid='NORMALIZED-001743',
         path='/OOP2_Lab7/Source.cpp',
         lineno=511,
         depth=2,
         type='function_decl',
         name='F_Second_Program_Menu',
         text='void F_Second_Program_Menu()\n'
              '{\n'
              '\tMaster master1; // object\n'
              '\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "\\t M A S T E R\'S  D A T A B A S E\\n";\n'
              '\t\tcout << "      ====================================\\n";\n'
              '\t\tcout << " 1. Create  Record\\n";\n'
              '\t\tcout << " 2. Display Record\\n";\n'
              '\t\tcout << " 3. Update  Record\\n";\n'
              '\t\tcout << " 0. Back\\n";\n'
              '\t\tcout << " Your choice: \\n";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase '1':\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\t C R E A T E  A  R E C O R D\\n";\n'
              '\t\t\tcout << '
              '"===========================================\\n";\n'
              '\t\t\tmaster1.create();\n'
              '\t\t\tcout << endl\n'
              '\t\t\t\t << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              "\t\tcase '2':\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\t D I S P L A Y  D E T A I L S\\n";\n'
              '\t\t\tcout << "==========================================\\n";\n'
              '\t\t\tmaster1.display();\n'
              '\t\t\tcout << endl\n'
              '\t\t\t\t << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              "\t\tcase '3':\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tmaster1.update();\n'
              '\t\t\tcout << endl\n'
              '\t\t\t\t << endl;\n'
              '\t\t\t// system("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              "\t\tcase '0':\n"
              '\t\t\tk = 1000;\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\tdefault:\n'
              '\t\t\tcout << "\\t\\t Your choice is not abailable in Menu. '
              '\\n\\t\\t Please try one more time.\\n";\n'
              '\t\t\tSleep(0700);\n'
              '\t\t\tSleep(0700);\n'
              '\t\t\tbreak;\n'
              '\t\t} // switch\n'
              '\t}\t  // for loop\n'
              '}\n')

Fragment(uuid='NORMALIZED-001744',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab7_Extra/Education.cpp\n'
              '  Classes: Casual_Typist, Education, Officer, Regular_Typist, '
              'Staff, Teacher, Typist\n'
              '  Functions: F_First_Program_Menu, main\n')

Fragment(uuid='NORMALIZED-001745',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=7,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001746',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=10,
         depth=2,
         type='function_decl',
         name='F_First_Program_Menu',
         text='')

Fragment(uuid='NORMALIZED-001747',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=12,
         depth=2,
         type='class_decl',
         name='Education',
         text='class Education {\n'
              'protected:\n'
              '\tint HPQ;\n'
              'public:\n'
              '\tEducation() {\n'
              '\t\tHPQ = 0;\n'
              '\t}\n'
              '\tvoid getdata() {\n'
              '\t\t\tcout << "\\n1. Undergraduate     2. Graduate     3. '
              'Masters Degree     4. PHD\\n";\n'
              '\t\t\tcout << "Enter Educational Qualification: " ;\n'
              '\t\t\tcin >> HPQ;\n'
              '\t\t\tif (HPQ == 1 || HPQ == 2 || HPQ == 3 || HPQ == 4) {\n'
              '\t\t\t}\n'
              '\t\t\telse {\n'
              '\t\t\t\tcout << "Invalid Educational Qualification. Try one '
              'more time.\\n";\n'
              '\t\t\t\t//Sleep(0700); Sleep(0700);\n'
              '\t\t\t\tEducation::getdata();\n'
              '\t\t\t}\n'
              '\t}\n'
              '\n'
              '\tvoid showdata() {\n'
              '\t\tif (HPQ == 1) {\n'
              '\t\t\tcout << "Educational Qualification: Undergraduate\\n";\n'
              '\t\t}\n'
              '\t\telse if (HPQ == 2) {\n'
              '\t\t\tcout << "Educational Qualification: Graduate\\n";\n'
              '\t\t}\n'
              '\t\telse if (HPQ == 3) {\n'
              '\t\t\tcout << "Educational Qualification: Masters Degree\\n";\n'
              '\t\t}\n'
              '\t\telse if (HPQ == 4) {\n'
              '\t\t\tcout << "Educational Qualification: PHD\\n";\n'
              '\t\t}\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001748',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=48,
         depth=2,
         type='class_decl',
         name='Staff',
         text='class Staff {\n'
              'protected:\n'
              '\tstring code;\n'
              '\tstring name;\n'
              'public:\n'
              '\tStaff() {\n'
              '\t\tcode = "0000";\n'
              '\t\tname = "Unknown";\n'
              '\t}\n'
              '\tvoid getdata_name() {\n'
              '\t\tcout << "Enter employee name: " ; cin >> name;\n'
              '\t}\n'
              '\tvoid getdata_code() {\n'
              '\t\tcout << "Enter employee code: " ; cin >> code;\n'
              '\t}\n'
              '\tvoid showdata_name() {\n'
              '\t\tcout << "Employee name: " << name << endl;\n'
              '\t}\n'
              '\tvoid showdata_code() {\n'
              '\t\tcout << "Employee code: " << code << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001749',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=71,
         depth=2,
         type='class_decl',
         name='Teacher',
         text='class Teacher : public Staff, public Education {\n'
              'protected:\n'
              '\tstring subject;\n'
              '\tint publications;\n'
              'public:\n'
              '\n'
              '\tTeacher() {\n'
              '\t\tsubject = "Unknown";\n'
              '\t\tpublications = 0;\n'
              '\t}\n'
              '\tvoid getdata() {\n'
              '\t\tStaff::getdata_code();\n'
              '\t\tStaff::getdata_name();\n'
              '\t\tEducation::getdata();\n'
              '\t\tcout << "Enter subject: " ; cin >> subject;\n'
              '\t\tcout << "Enter number of publications: " ; cin >> '
              'publications;\n'
              '\t}\n'
              '\tvoid showdata() {\n'
              '\t\tStaff::showdata_code();\n'
              '\t\tStaff::showdata_name();\n'
              '\t\tEducation::showdata();\n'
              '\t\tcout << "Subject: " << subject << endl << "Publications: " '
              '<< publications << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001750',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=96,
         depth=2,
         type='class_decl',
         name='Officer',
         text='class Officer : public Staff, public Education {\n'
              'protected:\n'
              '\tfloat grade;\n'
              'public:\n'
              '\tOfficer() {\n'
              '\t\tgrade = 0.0;\n'
              '\t}\n'
              '\tvoid getdata() {\n'
              '\t\tStaff::getdata_code();\n'
              '\t\tStaff::getdata_name();\n'
              '\t\tEducation::getdata();\n'
              '\t\tcout << "Enter the grade: ";  cin >> grade;\n'
              '\t}\n'
              '\tvoid showdata() {\n'
              '\t\tStaff::showdata_code();\n'
              '\t\tStaff::showdata_name();\n'
              '\t\tEducation::showdata();\n'
              '\t\tcout << "Officer Grade: " << grade << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001751',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=117,
         depth=2,
         type='class_decl',
         name='Typist',
         text='class Typist : public Staff {\n'
              'protected:\n'
              '\tint speed;\n'
              'public:\n'
              '\tTypist() {\n'
              '\t\tspeed = 0;\n'
              '\t}\n'
              '\tvoid getdata() {\n'
              '\t\tStaff::getdata_code();\n'
              '\t\tStaff::getdata_name();\n'
              '\t\tcout << "Enter the speed (wprds/min): "; cin >> speed;\n'
              '\t}\n'
              '\tvoid showdata() {\n'
              '\t\tStaff::showdata_code();\n'
              '\t\tStaff::showdata_name();\n'
              '\t\tcout << "Speed (words/min): " << speed << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001752',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=136,
         depth=2,
         type='class_decl',
         name='Regular_Typist',
         text='class Regular_Typist : public Typist {\n'
              'protected:\n'
              '\tfloat monthly_salary;\n'
              'public:\n'
              '\tRegular_Typist() {\n'
              '\t\tmonthly_salary = 0.0;\n'
              '\t}\n'
              '\tvoid getdata() {\n'
              '\t\tTypist::getdata();\n'
              '\t\tcout << "Enter the monthly salary: "; cin >> '
              'monthly_salary;\n'
              '\t}\n'
              '\tvoid showdata() {\n'
              '\t\tTypist::showdata();\n'
              '\t\tcout << "Monthly salary: " << monthly_salary << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001753',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=153,
         depth=2,
         type='class_decl',
         name='Casual_Typist',
         text='class Casual_Typist : public Typist {\n'
              'protected:\n'
              '\tfloat daily_wage;\n'
              'public:\n'
              '\tCasual_Typist() {\n'
              '\t\tdaily_wage = 0.0;\n'
              '\t}\n'
              '\tvoid getdata() {\n'
              '\t\tTypist::getdata();\n'
              '\t\tcout << "Enter the daily wage: "; cin >> daily_wage;\n'
              '\t}\n'
              '\tvoid showdata() {\n'
              '\t\tTypist::showdata();\n'
              '\t\tcout << "Daily wage: " << daily_wage << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001754',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=170,
         depth=2,
         type='function_decl',
         name='main',
         text='int main() {\n'
              '\t//\n'
              '\tF_First_Program_Menu();\n'
              '\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001755',
         path='/OOP2_Lab7_Extra/Education.cpp',
         lineno=177,
         depth=2,
         type='function_decl',
         name='F_First_Program_Menu',
         text='void F_First_Program_Menu() {\n'
              '\t// objects\n'
              '\tTeacher teacher;\n'
              '\tOfficer officer;\n'
              '\tRegular_Typist regular;\n'
              '\tCasual_Typist casual;\n'
              '\n'
              '\tfor (int k = 0; k < 1000; k++) {\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "\\tM A I N  M E N U\\n";\n'
              '\t\tcout << "      =====================\\n";\n'
              '\t\tcout << " 1. Teacher\\n";\n'
              '\t\tcout << " 2. Officer\\n";\n'
              '\t\tcout << " 3. Typist\\n";\n'
              '\t\tcout << " 0. Back\\n";\n'
              '\t\tcout << " Your choice: \\n";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase '1': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\t T E A C H E R\\n";\n'
              '\t\t\tcout << "===================================\\n";\n'
              '\t\t\tteacher.getdata();\n'
              '\t\t\tcout << "\\n\\n\\tThe given information:\\n";\n'
              '\t\t\tcout << "===================================\\n";\n'
              '\t\t\tteacher.showdata();\n'
              '\t\t\tcout << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '2': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "\\t O F F I C E R\\n";\n'
              '\t\t\tcout << "===================================\\n";\n'
              '\t\t\tofficer.getdata();\n'
              '\t\t\tcout << "\\n\\n\\tThe given information:\\n";\n'
              '\t\t\tcout << "===================================\\n";\n'
              '\t\t\tofficer.showdata();\n'
              '\t\t\tcout << endl << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}break;\n'
              '\n'
              "\t\tcase '3': {\n"
              '\t\t\tfor (int l = 0; l < 1000; l++) {\n'
              '\t\t\t\tsystem("cls");\n'
              '\t\t\t\tcout << "\\t T Y P I S T\\n";\n'
              '\t\t\t\tcout << "===================================\\n";\n'
              '\t\t\t\tcout << " 1. Regular typist\\n"; cout << " 2. Casual '
              'typist\\n"; cout << " 0. Back\\n"; cout << " Your choice: '
              '\\n";\n'
              '\t\t\t\tswitch (_getch())\n'
              '\t\t\t\t{\n'
              "\t\t\t\tcase '1': {\n"
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\tcout << "\\t R E G U L A R  T Y P I S T\\n";\n'
              '\t\t\t\t\tcout << "===================================\\n";\n'
              '\t\t\t\t\tregular.getdata();\n'
              '\t\t\t\t\tcout << "\\n\\n\\tThe given information:\\n";\n'
              '\t\t\t\t\tcout << "===================================\\n";\n'
              '\t\t\t\t\tregular.showdata();\n'
              '\t\t\t\t\tcout << endl << endl;\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t}\n'
              '\t\t\t\t\t\tbreak;\n'
              '\n'
              "\t\t\t\tcase '2': {\n"
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\tcout << "\\t C A S U A L  T Y P I S T\\n";\n'
              '\t\t\t\t\tcout << "===================================\\n";\n'
              '\t\t\t\t\tcasual.getdata();\n'
              '\t\t\t\t\tcout << "\\n\\n\\tThe given information:\\n";\n'
              '\t\t\t\t\tcout << "===================================\\n";\n'
              '\t\t\t\t\tcasual.showdata();\n'
              '\t\t\t\t\tcout << endl << endl;\n'
              '\t\t\t\t\tsystem("pause");\n'
              '\t\t\t\t}\n'
              '\t\t\t\t\t\tbreak;\n'
              "\t\t\t\tcase '0': {\n"
              '\t\t\t\t\tsystem("cls");\n'
              '\t\t\t\t\tl = 1000;\n'
              '\t\t\t\t}break;\n'
              '\t\t\t\tdefault: {cout << endl << endl;\n'
              '\t\t\t\t\tcout << "\\t\\t Your choice is not abailable in Menu. '
              '\\n\\t\\t Please try one more time.\\n";\n'
              '\t\t\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t\t\t}break;\n'
              '\t\t\t\t} // switch\n'
              '\t\t\t} // for\n'
              '\t\t}break;\n'
              "\t\tcase '0': {\n"
              '\t\t\tsystem("cls");\n'
              '\t\t\tk = 1000;\n'
              '\t\t} break;\n'
              '\t\tdefault: { cout << endl << endl;\n'
              '\t\t\tcout << "\\t\\t Your choice is not abailable in Menu. '
              '\\n\\t\\t Please try one more time.\\n";\n'
              '\t\t\tSleep(0700); Sleep(0700);\n'
              '\t\t}break;\n'
              '\t\t} // switch \n'
              '\t} // for loop\n'
              '}\n')

Fragment(uuid='NORMALIZED-001756',
         path='/OOP2_Lab8/README.md',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - Virtual function\n\n')

Fragment(uuid='NORMALIZED-001757',
         path='/OOP2_Lab8/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - Virtual function\n'
              '### Program 1\n'
              '### Program 1a\n')

Fragment(uuid='NORMALIZED-001758',
         path='/OOP2_Lab8/README.md',
         lineno=3,
         depth=6,
         type='documentation',
         name='',
         text='### Program 1\n'
              'Create a base class called shape.\n'
              '\n'
              'Use this class to store two double type values that could be '
              'used to compute the area of figures.\n'
              '\n'
              'Add to the base class, a member function:\n'
              '``` ')

Fragment(uuid='NORMALIZED-001759',
         path='/OOP2_Lab8/README.md',
         lineno=9,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'get_data(): to initialize base class data members.\n'
              'display_area(): to compute and display area of figures. \n'
              '```')

Fragment(uuid='NORMALIZED-001760',
         path='/OOP2_Lab8/README.md',
         lineno=12,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'Make display area as a virtual function and override this '
              'function into the derived classes to suit their requirements.\n'
              '\n'
              'Derive two classes called triangle and rectangle from the base '
              'shape.\n'
              '\n'
              'Using these three classes, design a program that will accept '
              'dimension of a triangle or a rectangle interactively, and '
              'display the area.\n'
              '\n'
              '(Remember the two values given as input will be treated as '
              'length of two sides in case of rectangles, and as base and '
              'heights in the case of triangles.)\n'
              '\n')

Fragment(uuid='NORMALIZED-001761',
         path='/OOP2_Lab8/README.md',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='### Program 1a\n'
              'Extend the above program to display area of circles. \n'
              '\n'
              'This requires addition of a new derived class ‘circle’ that '
              'computes the area of a circle. \n'
              '\n'
              'Remember, for a circle we need only one value its radius, but '
              'the get_data function in the base class requires two values to '
              'be passed.\n')

Fragment(uuid='NORMALIZED-001762',
         path='/OOP2_Lab8/main.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab8/main.cpp\n'
              '  Classes: Circle, Rectanglee, Shape, Triangle\n'
              '  Functions: F_First, F_Second, main\n'
              '  Variable declarations: b, h\n')

Fragment(uuid='NORMALIZED-001763',
         path='/OOP2_Lab8/main.cpp',
         lineno=6,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001764',
         path='/OOP2_Lab8/main.cpp',
         lineno=8,
         depth=2,
         type='var_decl',
         name='b',
         text='double b;\n')

Fragment(uuid='NORMALIZED-001765',
         path='/OOP2_Lab8/main.cpp',
         lineno=9,
         depth=2,
         type='var_decl',
         name='h',
         text='double h; // global variables for base and height\n')

Fragment(uuid='NORMALIZED-001766',
         path='/OOP2_Lab8/main.cpp',
         lineno=12,
         depth=2,
         type='function_decl',
         name='F_First',
         text='')

Fragment(uuid='NORMALIZED-001767',
         path='/OOP2_Lab8/main.cpp',
         lineno=13,
         depth=2,
         type='function_decl',
         name='F_Second',
         text='')

Fragment(uuid='NORMALIZED-001768',
         path='/OOP2_Lab8/main.cpp',
         lineno=16,
         depth=2,
         type='class_decl',
         name='Shape',
         text='class Shape\n'
              '{ // Abstract class\n'
              'protected:\n'
              '\tdouble base;\n'
              '\tdouble height;\n'
              '\n'
              'public:\n'
              '\tvoid get_data(double base, double height)\n'
              '\t{\n'
              '\t\tthis->base = base;\n'
              '\t\tthis->height = height;\n'
              '\t}\n'
              '\tvoid virtual display_area() = 0; // pure virtual function\n'
              '};\n')

Fragment(uuid='NORMALIZED-001769',
         path='/OOP2_Lab8/main.cpp',
         lineno=32,
         depth=2,
         type='class_decl',
         name='Triangle',
         text='class Triangle : public Shape\n'
              '{\n'
              'public:\n'
              '\tvoid display_area()\n'
              '\t{\n'
              '\t\tcout << "Area of triangle: " << 0.5 * base * height << '
              'endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001770',
         path='/OOP2_Lab8/main.cpp',
         lineno=42,
         depth=2,
         type='class_decl',
         name='Rectanglee',
         text='class Rectanglee : public Shape\n'
              '{\n'
              'public:\n'
              '\tvoid display_area()\n'
              '\t{\n'
              '\t\tcout << "Area of Rectangle: " << base * height << endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001771',
         path='/OOP2_Lab8/main.cpp',
         lineno=51,
         depth=2,
         type='class_decl',
         name='Circle',
         text='class Circle : public Shape\n'
              '{\n'
              'public:\n'
              '\tvoid display_area()\n'
              '\t{\n'
              '\t\tcout << "Area of Circle: " << base * base * 3.1415 << '
              'endl;\n'
              '\t}\n'
              '};\n')

Fragment(uuid='NORMALIZED-001772',
         path='/OOP2_Lab8/main.cpp',
         lineno=60,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "       M A I N  M E N U\\n"\n'
              '\t\t\t << "-------------------------------\\n"\n'
              '\t\t\t << "1. First program\\n"\n'
              '\t\t\t << "2. Second program\\n"\n'
              '\t\t\t << "0. Exit\\n"\n'
              '\t\t\t << "-------------------------------\\n"\n'
              '\t\t\t << "Your choice: \\n";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\t\t// First program\n'
              '\t\tcase 49:\n'
              '\t\t\tF_First();\n'
              '\t\t\tbreak;\n'
              '\t\t\t// second program\n'
              '\t\tcase 50:\n'
              '\t\t\tF_Second();\n'
              '\t\t\tbreak;\n'
              '\t\tdefault:\n'
              '\t\t\tcout << "     Your choice is not available in '
              'Menu.\\n     Please, enter one more time.\\n";\n'
              '\t\t\tSleep(0700);\n'
              '\t\t\tSleep(0700);\n'
              '\t\t\tbreak;\n'
              '\t\tcase 48:\n'
              '\t\t\treturn 0;\n'
              '\t\t\tbreak;\n'
              '\t\t} // Switch\n'
              '\t}\t  // For loop\n'
              '\tsystem("pause");\n'
              '}\n')

Fragment(uuid='NORMALIZED-001773',
         path='/OOP2_Lab8/main.cpp',
         lineno=95,
         depth=2,
         type='function_decl',
         name='F_First',
         text='void F_First()\n'
              '{\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "      C A L C U L A T I N G  A R E A S\\n"\n'
              '\t\t\t << "-------------------------------------------\\n"\n'
              '\t\t\t << "1. Triangle\\n"\n'
              '\t\t\t << "2. Rectangle\\n"\n'
              '\t\t\t << "0. Back\\n"\n'
              '\t\t\t << "Your choice: \\n";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\t\t// Case to Exit from the program\n'
              '\t\tcase 48:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tmain();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t\t// First program\n'
              '\t\tcase 49:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "       T R I A N G L E \\n";\n'
              '\t\t\tcout << "----------------------------------\\n";\n'
              '\t\t\tShape *shape; //\n'
              '\t\t\tTriangle triangle;\n'
              '\t\t\tshape = &triangle; // overriding functions for triangle\n'
              '\t\t\tcout << "Enter the base: ";\n'
              '\t\t\tcin >> b;\n'
              '\t\t\tcout << "Entet the height: ";\n'
              '\t\t\tcin >> h;\n'
              '\t\t\tshape->get_data(b, h);\n'
              '\t\t\tshape->display_area();\n'
              '\t\t\tcout << "-----------------------------------\\n\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t\t// second program\n'
              '\t\tcase 50:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "      R E C T A N G L E \\n";\n'
              '\t\t\tcout << "----------------------------------\\n";\n'
              '\t\t\tShape *shape; //\n'
              '\t\t\tRectanglee rectangle;\n'
              '\t\t\tshape = &rectangle;\n'
              '\t\t\tcout << "Enter the base: ";\n'
              '\t\t\tcin >> b;\n'
              '\t\t\tcout << "Entet the height: ";\n'
              '\t\t\tcin >> h;\n'
              '\t\t\tshape->get_data(b, h);\n'
              '\t\t\tshape->display_area();\n'
              '\t\t\tcout << "------------------------------------\\n\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tdefault:\n'
              '\t\t{\n'
              '\t\t\tcout << "Your choice is not available in Menu.\\nPlease, '
              'enter one more time.\\n";\n'
              '\t\t\tSleep(0700);\n'
              '\t\t\tSleep(0700);\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\t} // Switch\n'
              '\t}\t  // For loop\n'
              '\tsystem("pause");\n'
              '}\n')

Fragment(uuid='NORMALIZED-001774',
         path='/OOP2_Lab8/main.cpp',
         lineno=168,
         depth=2,
         type='function_decl',
         name='F_Second',
         text='void F_Second()\n'
              '{\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "      S E C O N D  P R O G R A M\\n"\n'
              '\t\t\t << "-------------------------------------\\n"\n'
              '\t\t\t << "1. Triangle\\n"\n'
              '\t\t\t << "2. Rectangle\\n"\n'
              '\t\t\t << "3. Circle\\n"\n'
              '\t\t\t << "0. Back\\n"\n'
              '\t\t\t << "Your choice: \\n";\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\t\t// Case to Exit from the program\n'
              '\t\tcase 48:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tmain();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t\t// First program\n'
              '\t\tcase 49:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "       T R I A N G L E \\n";\n'
              '\t\t\tcout << "----------------------------------\\n";\n'
              '\t\t\tShape *shape; //\n'
              '\t\t\tTriangle triangle;\n'
              '\t\t\tshape = &triangle; // overriding functions for triangle\n'
              '\t\t\tcout << "Enter the base: ";\n'
              '\t\t\tcin >> b;\n'
              '\t\t\tcout << "Entet the height: ";\n'
              '\t\t\tcin >> h;\n'
              '\t\t\tshape->get_data(b, h);\n'
              '\t\t\tshape->display_area();\n'
              '\t\t\tcout << "-----------------------------------\\n\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\t\t// second program\n'
              '\t\tcase 50:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "      R E C T A N G L E \\n";\n'
              '\t\t\tcout << "----------------------------------\\n";\n'
              '\t\t\tShape *shape; //\n'
              '\t\t\tRectanglee rectangle;\n'
              '\t\t\tshape = &rectangle;\n'
              '\t\t\tcout << "Enter the base: ";\n'
              '\t\t\tcin >> b;\n'
              '\t\t\tcout << "Entet the height: ";\n'
              '\t\t\tcin >> h;\n'
              '\t\t\tshape->get_data(b, h);\n'
              '\t\t\tshape->display_area();\n'
              '\t\t\tcout << "------------------------------------\\n\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\t\t// Third program\n'
              '\t\tcase 51:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "         C I R C L E \\n";\n'
              '\t\t\tcout << "----------------------------------\\n";\n'
              '\t\t\tShape *shape; //\n'
              '\t\t\tCircle circle1;\n'
              '\t\t\tshape = &circle1;\n'
              '\t\t\tcout << "Enter the radius: ";\n'
              '\t\t\tcin >> b;\n'
              '\t\t\tshape->get_data(b, 0.0);\n'
              '\t\t\tshape->display_area();\n'
              '\t\t\tcout << "------------------------------------\\n\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tdefault:\n'
              '\t\t{\n'
              '\t\t\tcout << "Your choice is not available in Menu.\\nPlease, '
              'enter one more time.\\n";\n'
              '\t\t\tSleep(0700);\n'
              '\t\t\tSleep(0700);\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\t} // Switch\n'
              '\t}\t  // For loop\n'
              '\tsystem("pause");\n'
              '}\n')

Fragment(uuid='NORMALIZED-001775',
         path='/OOP2_Lab9/README.md',
         lineno=1,
         depth=10,
         type='documentation',
         name='',
         text='# Practical Lab Assignment - File Handling\n')

Fragment(uuid='NORMALIZED-001776',
         path='/OOP2_Lab9/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Practical Lab Assignment - File Handling\n')

Fragment(uuid='NORMALIZED-001777',
         path='/OOP2_Lab9/README.md',
         lineno=2,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '1. Create two file “one.txt” and “two.txt” which contains first '
              '10 even numbers and first ten multiples of 5 respectively; Read '
              'the two files, find the sum of all the number of these two '
              'files and store it in the variable TOTAL. Write this value in '
              'third file named “total.txt”.\n')

Fragment(uuid='NORMALIZED-001778',
         path='/OOP2_Lab9/README.md',
         lineno=4,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '2. A  file contains a  list of telephone numbers in the '
              'following form:\n'
              '    ```\n'
              '    John    23456\n'
              '    Ahmed\t9876\n'
              '    ...     ...\n'
              '    ```\n'
              '    The names contain only one word and the names and telephone '
              'numbers are separated by white spaces. Write a program to read '
              'the file and output the list in the two columns.\n')

Fragment(uuid='NORMALIZED-001779',
         path='/OOP2_Lab9/README.md',
         lineno=12,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '3. Enter 20 numbers in a file named “Numbers.txt”. Ask user to '
              'enter any number and search if it exists in the file or not.\n')

Fragment(uuid='NORMALIZED-001780',
         path='/OOP2_Lab9/contacts.txt',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='Rustam      \t985\n')

Fragment(uuid='NORMALIZED-001781',
         path='/OOP2_Lab9/contacts.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /OOP2_Lab9/contacts.txt\n')

Fragment(uuid='NORMALIZED-001782',
         path='/OOP2_Lab9/main.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /OOP2_Lab9/main.cpp\n'
              '  Functions: F_First_Program, F_Second_Program, '
              'F_Third_Program, main\n')

Fragment(uuid='NORMALIZED-001783',
         path='/OOP2_Lab9/main.cpp',
         lineno=12,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001784',
         path='/OOP2_Lab9/main.cpp',
         lineno=14,
         depth=2,
         type='function_decl',
         name='main',
         text='')

Fragment(uuid='NORMALIZED-001785',
         path='/OOP2_Lab9/main.cpp',
         lineno=16,
         depth=2,
         type='function_decl',
         name='F_First_Program',
         text='void F_First_Program()\n'
              '{\n'
              '\n'
              '\t// creating a text file one.txt\n'
              '\tofstream out_one;\n'
              '\tout_one.open("one.txt");\n'
              '\tfor (int i = 2; i <= 2 * 10; i = i + 2)\n'
              '\t{\n'
              '\t\tout_one << i << endl; // writing to file first ten even '
              'numbers\n'
              '\t}\n'
              '\tout_one.close(); // closing the file\n'
              '\n'
              '\t// creating a text file one.txt\n'
              '\tofstream out_two;\n'
              '\tout_two.open("two.txt");\n'
              '\tfor (int i = 5; i <= 5 * 10; i = i + 5)\n'
              '\t{\n'
              '\t\tout_two << i << endl; // writing to file first ten '
              'multiples of five\n'
              '\t}\n'
              '\tout_two.close(); // closing the file\n'
              '\n'
              '\t// calculting the sum\n'
              '\tifstream in_one;\n'
              '\tifstream in_two;\n'
              '\tin_one.open("one.txt"); // opening files\n'
              '\tin_two.open("two.txt");\n'
              '\n'
              '\tint total = 0;\n'
              '\tint num1 = 0;\n'
              '\tint num2 = 0;\n'
              '\n'
              '\twhile (in_one && in_two)\n'
              '\t{\n'
              '\t\ttotal += num1 + num2; // calculating the total\n'
              '\t\tin_one >> num1;\n'
              '\t\tin_two >> num2;\n'
              '\t}\n'
              '\tin_one.close(); // closing the files\n'
              '\tin_two.close();\n'
              '\n'
              '\t'
              '///////////////////////////////////////////////////////////////////\n'
              '\t// creating a file total for storingthe total sum of numbers\n'
              '\tofstream out_total("total.txt");\n'
              '\tout_total << total << endl;\n'
              '\tout_total.close();\n'
              '\n'
              '\t// reading the file and outputing it on the screen\n'
              '\tifstream in_total;\n'
              '\tin_total.open("total.txt");\n'
              '\n'
              '\tcout << "All three Files are created!\\n";\n'
              '\n'
              '\tin_total >> total;\n'
              '\tcout << "TOTAL: " << total << "\\n\\n"; // displaying the '
              'total in console\n'
              '\n'
              '\tin_total.close(); // closing the file after executing\n'
              '}\n')

Fragment(uuid='NORMALIZED-001786',
         path='/OOP2_Lab9/main.cpp',
         lineno=74,
         depth=2,
         type='function_decl',
         name='F_Second_Program',
         text='void F_Second_Program()\n'
              '{\n'
              '\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "C O N T A C T S\\n"\n'
              '\t\t\t << "------------------\\n"\n'
              '\t\t\t << "1. Add a contact\\n"\n'
              '\t\t\t << "2. Contacts\\n"\n'
              '\t\t\t << "0. Back\\n"\n'
              '\t\t\t << "Your choice: \\n";\n'
              '\n'
              '\t\tofstream out_contacts("contacts.txt", ios::app);\n'
              '\n'
              '\t\tstring name, phone;\n'
              '\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\t\t// case 49 is for adding a new contact into a list\n'
              '\t\tcase 49:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "Adding a new contact. Input a contact '
              'info:\\n\\n";\n'
              '\n'
              '\t\t\tcout << "Enter the name: ";\n'
              '\t\t\tcin >> name;\n'
              '\t\t\tcout << "Enter the phone number: ";\n'
              '\t\t\tcin >> phone;\n'
              '\n'
              '\t\t\t// storing the data in file\n'
              '\t\t\tout_contacts << left << setw(12) << name << "\\t" << '
              'phone << "\\n";\n'
              '\t\t\tout_contacts.close(); // closing the file\n'
              '\n'
              '\t\t\tcout << "Successfully added!\\n\\n";\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tcase 50:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tifstream in_contacts("contacts.txt"); // getting data '
              'from the file\n'
              '\t\t\twhile (in_contacts >> name >> phone)\n'
              '\t\t\t{\n'
              '\t\t\t\t// displaying the data\n'
              '\t\t\t\tcout << left << setw(12) << name << "\\t" << phone << '
              'endl;\n'
              '\t\t\t}\n'
              '\t\t\tin_contacts.close(); // closing the file\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tcase 48:\n'
              '\t\t{\n'
              '\t\t\tmain(); // to back to main menu\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tdefault:\n'
              '\t\t{\n'
              '\t\t\tcout << "Your choice is not available in Menu.\\nPlease '
              'try one more time\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\t} // switch\n'
              '\t}\t  // for loop\n'
              '}\n')

Fragment(uuid='NORMALIZED-001787',
         path='/OOP2_Lab9/main.cpp',
         lineno=144,
         depth=2,
         type='function_decl',
         name='F_Third_Program',
         text='void F_Third_Program()\n'
              '{\n'
              '\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "S E A R C H I N G  F O R  N U M B E R \\n"\n'
              '\t\t\t << "------------------------------------\\n"\n'
              '\t\t\t << "1. Add numbers\\n"\n'
              '\t\t\t << "2. Search for number\\n"\n'
              '\t\t\t << "0. Back\\n"\n'
              '\t\t\t << "Your choice: \\n";\n'
              '\n'
              '\t\tofstream out_numbers("numbers.txt", ios::app); // the list '
              'could be contiunied after the program execution\n'
              '\n'
              '\t\tint numbers;\n'
              '\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\tcase 49:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << "ENYER NUMBERS\\n";\n'
              '\n'
              '\t\t\t// inputing numbers\n'
              '\t\t\tfor (int i = 1; i <= 20; i++)\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << "[ " << i << " ] -> ";\n'
              '\t\t\t\tcin >> numbers;\n'
              '\t\t\t\tout_numbers << numbers << endl;\n'
              '\t\t\t}\n'
              '\t\t\tout_numbers.close(); // closing the file\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tcase 50:\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tifstream in_numbers("numbers.txt");\n'
              '\n'
              '\t\t\tcout << "SEARCHING A NUMBER\\n";\n'
              '\n'
              '\t\t\tint search_number;\n'
              '\t\t\tbool isAnswerHere = 0; // for finding the searching '
              'number from available list\n'
              '\t\t\tcout << "Enter the number to search: ";\n'
              '\t\t\tcin >> search_number;\n'
              '\n'
              '\t\t\twhile (in_numbers)\n'
              '\t\t\t{\n'
              '\t\t\t\tin_numbers >> numbers;\n'
              '\t\t\t\tif (search_number == numbers)\n'
              '\t\t\t\t\tisAnswerHere = 1;\n'
              '\t\t\t} // while loop\n'
              '\n'
              '\t\t\tif (isAnswerHere == 1)\n'
              '\t\t\t\tcout << "\\nThe number is available in list.\\n\\n";\n'
              '\t\t\telse\n'
              '\t\t\t\tcout << "\\nThe number is NOT in list\\n\\n";\n'
              '\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tcase 48:\n'
              '\t\t{\n'
              '\t\t\tmain();\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\n'
              '\t\tdefault:\n'
              '\t\t{\n'
              '\t\t\tcout << "Your choice is not available in Menu.\\nPlease '
              'try one more time\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t}\n'
              '\t\tbreak;\n'
              '\t\t} // switch\n'
              '\t}\t  // for loop\n'
              '}\n')

Fragment(uuid='NORMALIZED-001788',
         path='/OOP2_Lab9/main.cpp',
         lineno=225,
         depth=2,
         type='function_decl',
         name='main',
         text='int main()\n'
              '{\n'
              '\tfor (int k = 0; k < 1000; k++)\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "M A I N  M E N U\\n"\n'
              '\t\t\t << "-------------------\\n"\n'
              '\t\t\t << "1. First Program\\n"\n'
              '\t\t\t << "2. Second Program\\n"\n'
              '\t\t\t << "3. Third Program\\n"\n'
              '\t\t\t << "Your choice: \\n";\n'
              '\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              '\t\tcase 49:\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_First_Program();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\tcase 50:\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_Second_Program();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\tcase 51:\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tF_Third_Program();\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\tcase 48:\n'
              '\t\t\treturn 0;\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\tdefault:\n'
              '\t\t\tcout << "Your choice is not available in Menu.\\nPlease '
              'try one more time\\n";\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tbreak;\n'
              '\n'
              '\t\t} // switch\n'
              '\t}\t  // for loop\n'
              '\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001789',
         path='/OOP2_Lab9/numbers.txt',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='1\n'
              '2\n'
              '11\n'
              '111\n'
              '1111\n'
              '1111\n'
              '1\n'
              '1\n'
              '1\n'
              '1\n'
              '1\n'
              '1\n'
              '1\n'
              '1\n'
              '1\n'
              '1\n'
              '122\n'
              '22\n'
              '2\n'
              '2\n')

Fragment(uuid='NORMALIZED-001790',
         path='/OOP2_Lab9/numbers.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /OOP2_Lab9/numbers.txt\n')

Fragment(uuid='NORMALIZED-001791',
         path='/OOP2_Lab9/one.txt',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n')

Fragment(uuid='NORMALIZED-001792',
         path='/OOP2_Lab9/one.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /OOP2_Lab9/one.txt\n')

Fragment(uuid='NORMALIZED-001793',
         path='/OOP2_Lab9/total.txt',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='385\n')

Fragment(uuid='NORMALIZED-001794',
         path='/OOP2_Lab9/total.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /OOP2_Lab9/total.txt\n')

Fragment(uuid='NORMALIZED-001795',
         path='/OOP2_Lab9/two.txt',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='5\n10\n15\n20\n25\n30\n35\n40\n45\n50\n')

Fragment(uuid='NORMALIZED-001796',
         path='/OOP2_Lab9/two.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /OOP2_Lab9/two.txt\n')

Fragment(uuid='NORMALIZED-001797',
         path='/Quiz Game/quiz-game-with-oop.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Quiz Game/quiz-game-with-oop.cpp\n'
              '  Classes: Question\n'
              '  Methods: askQuestion, setValues\n'
              '  Functions: main, main_menu_view\n'
              '  Variable declarations: Guess, Total\n')

Fragment(uuid='NORMALIZED-001798',
         path='/Quiz Game/quiz-game-with-oop.cpp',
         lineno=5,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001799',
         path='/Quiz Game/quiz-game-with-oop.cpp',
         lineno=7,
         depth=2,
         type='var_decl',
         name='Guess',
         text='int Guess;\n')

Fragment(uuid='NORMALIZED-001800',
         path='/Quiz Game/quiz-game-with-oop.cpp',
         lineno=8,
         depth=2,
         type='var_decl',
         name='Total',
         text='int Total;\n')

Fragment(uuid='NORMALIZED-001801',
         path='/Quiz Game/quiz-game-with-oop.cpp',
         lineno=10,
         depth=2,
         type='class_decl',
         name='Question',
         text='class Question {\n'
              'private :\n'
              '\tstring Question_Text;\n'
              '\tstring  Answer_1;\n'
              '\tstring Answer_2;\n'
              '\tstring Answer_3;\n'
              '\tstring Answer_4;\n'
              '\tint Correct_Answer;\n'
              '\tint Question_Score;\n'
              '\n'
              'public:\n'
              '\tvoid setValues(string, string, string, string, string, int, '
              'int);\n'
              '\tvoid askQuestion();\n'
              '\n'
              '};\n')

Fragment(uuid='NORMALIZED-001802',
         path='/Quiz Game/quiz-game-with-oop.cpp',
         lineno=26,
         depth=2,
         type='function_decl',
         name='main_menu_view',
         text='int main_menu_view() {\n'
              '\tsystem("color 3F");\n'
              '\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\tcout << '
              '"\\t\\t*****                                                                           '
              '*****" << endl;\n'
              '\tcout << "\\t\\t*****               H E L L O !  W E L C O M '
              'E  T O  T H E \'Q U I Z L E T\'      *****" << endl;\n'
              '\tcout << "\\t\\t*****                  = = = = = = = = = = = = '
              '= = = = = = = = = = = =          *****" << endl;\n'
              '\tcout << "\\t\\t*****                            = = = = = = = '
              '= = = = =                        *****" << endl;\n'
              '\tcout << "\\t\\t*****                                     B '
              'Y                                   *****" << endl;\n'
              '\tcout << "\\t\\t*****                         R U S T A M    Z '
              'O K I R O V                      *****" << endl;\n'
              '\tcout << '
              '"\\t\\t*****                                                                           '
              '*****" << endl;\n'
              '\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\tcout << endl;\n'
              '\tcout << "Please press enter to start a game..." << endl;\n'
              '\tcin.get();\n'
              '\tsystem("cls");\n'
              '\tcout << "Please enter your information" << endl;\n'
              '\tstring Name;\n'
              '\tstring Age;\n'
              '\tcout << "What is your name? ";\n'
              '\tgetline(cin, Name);\n'
              '\tcout << "How old are you? ";\n'
              '\tcin >> Age;\n'
              '\tstring Respond;\n'
              '\tcout << "Are you ready to take the Quiz " << Name << " ? '
              'Yes/No. " << endl;\n'
              '\tcout << "Your choice: ";\n'
              '\tcin >> Respond;\n'
              '\tif (Respond == "yes" || Respond == "Yes") \n'
              '\t{\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "OK, Good Like!!! " << endl;\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << "OK. Goodbye." << endl;\n'
              '\t\treturn 0;\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001803',
         path='/Quiz Game/quiz-game-with-oop.cpp',
         lineno=65,
         depth=2,
         type='function_decl',
         name='main',
         text='int main() {\n'
              '\tmain_menu_view();\n'
              '\n'
              '\tQuestion q1;\n'
              '\tQuestion q2;\n'
              '\tQuestion q3;\n'
              '\tQuestion q4;\n'
              '\tQuestion q5;\n'
              '\tQuestion q6;\n'
              '\tQuestion q7;\n'
              '\tQuestion q8;\n'
              '\tQuestion q9;\n'
              '\tQuestion q10;\n'
              '\n'
              '\tq1.setValues("What is my name?", "Rustam", "Sardor", '
              '"Bekhzod", "Hello World", 1, 10);\n'
              '\t\n'
              '\tq2.setValues("What is my name?", "Rustam", "Sardor", '
              '"Bekhzod", "Hello World", 1, 10);\n'
              '\n'
              '\tq3.setValues("What is my name?", "Rustam", "Sardor", '
              '"Bekhzod", "Hello World", 1, 10);\n'
              '\t\n'
              '\tq4.setValues("What is my name?", "Rustam", "Sardor", '
              '"Bekhzod", "Hello World", 1, 10);\n'
              '\t\n'
              '\tq5.setValues("What is my name?", "Rustam", "Sardor", '
              '"Bekhzod", "Hello World", 1, 10);\n'
              '\n'
              '\tq6.setValues("What is my name?", "Rustam", "Sardor", '
              '"Bekhzod", "Hello World", 1, 10);\n'
              '\t\n'
              '\tq7.setValues("What is my name?", "Rustam", "Sardor", '
              '"Bekhzod", "Hello World", 1, 10);\n'
              '\n'
              '\tq8.setValues("What is my name?", "Rustam", "Sardor", '
              '"Bekhzod", "Hello World", 1, 10);\n'
              '\t\n'
              '\tq9.setValues("What is my name?", "Rustam", "Sardor", '
              '"Bekhzod", "Hello World", 1, 10);\n'
              '\t\n'
              '\tq10.setValues("What is my name?", "Rustam", "Sardor", '
              '"Bekhzod", "Hello World", 1, 10);\n'
              '\n'
              '\n'
              '\tq1.askQuestion();\n'
              '\t\n'
              '\tq2.askQuestion();\n'
              '\tq3.askQuestion();\n'
              '\tq4.askQuestion();\n'
              '\tq5.askQuestion();\n'
              '\tq6.askQuestion();\n'
              '\tq7.askQuestion();\n'
              '\tq8.askQuestion();\n'
              '\tq9.askQuestion();\n'
              '\tq10.askQuestion();\n'
              '\n'
              '\tsystem("cls");\n'
              '\n'
              '\tcout << "Your Total Score is " << Total << " points out of '
              '100." << endl;\n'
              '\n'
              '\tif (Total >= 70)\n'
              '\t{\n'
              '\t\tcout << "Great you passed the Quiz!!!" << endl;\n'
              '\t\tcout << "C O N G R A T U L A T I O N S !!!" << endl;\n'
              '\n'
              '\t}        //end of the game\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << "Sorry, you failed the Quiz!" << endl;\n'
              '\t\tcout << "Do you want to try again ? Yes/No " << endl;\n'
              '\t\tstring play_again;\n'
              '\t\tcout << "Your choice: ";\n'
              '\t\tcin >> play_again;\n'
              '\t\tif (play_again == "yes" || play_again == "Yes")\n'
              '\t\t{\n'
              '\t\t\tmain();\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tcout << "OK. Goodbye." << endl;\n'
              '\t\t\treturn 0;\n'
              '\t\t}\n'
              '\n'
              '\t}                 \n'
              '\n'
              '\tsystem("pause");\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001804',
         path='/Quiz Game/quiz-game-with-oop.cpp',
         lineno=145,
         depth=3,
         type='cxx_method',
         name='setValues',
         text='void Question::setValues(string q, string a1, string a2, string '
              'a3, string a4, int ca, int pa) \n'
              '{\n'
              '\tQuestion_Text = q;\n'
              '\tAnswer_1 = a1;\n'
              '\tAnswer_2 = a2;\n'
              '\tAnswer_3 = a3;\n'
              '\tAnswer_4 = a4;\n'
              '\tCorrect_Answer = ca;\n'
              '\tQuestion_Score = pa;\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-001805',
         path='/Quiz Game/quiz-game-with-oop.cpp',
         lineno=157,
         depth=3,
         type='cxx_method',
         name='askQuestion',
         text='void Question::askQuestion() {\n'
              '\tcout << endl;\n'
              '\tcout << Question_Text << endl;\n'
              '\tcout << "1. " << Answer_1 << endl;\n'
              '\tcout << "2. " << Answer_2 << endl;\n'
              '\tcout << "3. " << Answer_3 << endl;\n'
              '\tcout << "4. " << Answer_4 << endl;\n'
              '\tcout << endl;\n'
              '\n'
              '\n'
              '\tcout << "Answer: ";\n'
              '\tcin >> Guess;\n'
              '\n'
              '\tif (Guess == Correct_Answer) \n'
              '\t{\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "Great! You are Correct." << endl;\n'
              '\t\tTotal += Question_Score;\n'
              '\t\tcout << "Score: " << Question_Score << " Out of " << '
              'Question_Score << " !" << endl;\n'
              '\t\t\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "Oh, NO. You are Wrong." << endl;\n'
              '\t\tcout<<"Score: 0"<<" Out of "<<Question_Score<< " !" << '
              'endl;\n'
              '\t\tcout << "The correct answer is " << Correct_Answer << '
              'endl;\n'
              '\t\tcout<<endl;\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001806',
         path='/Quiz Game/quiz-game.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Quiz Game/quiz-game.cpp\n'
              '  Functions: after_game, hints, main, main_menu_view, '
              'question1, question10, question2, question3, question4, '
              'question5, question6, question7, question8, question9, '
              'scores_table\n'
              '  Variable declarations: Name, correct_answer, hints_used, '
              'level, total_score\n')

Fragment(uuid='NORMALIZED-001807',
         path='/Quiz Game/quiz-game.cpp',
         lineno=5,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001808',
         path='/Quiz Game/quiz-game.cpp',
         lineno=7,
         depth=2,
         type='var_decl',
         name='total_score',
         text='int total_score=0;\n')

Fragment(uuid='NORMALIZED-001809',
         path='/Quiz Game/quiz-game.cpp',
         lineno=8,
         depth=2,
         type='var_decl',
         name='correct_answer',
         text='int correct_answer = 0;\n')

Fragment(uuid='NORMALIZED-001810',
         path='/Quiz Game/quiz-game.cpp',
         lineno=9,
         depth=2,
         type='var_decl',
         name='hints_used',
         text='int hints_used = 0;\n')

Fragment(uuid='NORMALIZED-001811',
         path='/Quiz Game/quiz-game.cpp',
         lineno=10,
         depth=2,
         type='var_decl',
         name='Name',
         text='string Name[5];\n')

Fragment(uuid='NORMALIZED-001812',
         path='/Quiz Game/quiz-game.cpp',
         lineno=11,
         depth=2,
         type='var_decl',
         name='level',
         text='string level;\n')

Fragment(uuid='NORMALIZED-001813',
         path='/Quiz Game/quiz-game.cpp',
         lineno=14,
         depth=2,
         type='function_decl',
         name='main_menu_view',
         text='int main_menu_view()\n'
              '{\n'
              '\tsystem("color 3F");\n'
              '\tcout << "\\t\\t  '
              '*************************************************************************************" '
              '<< endl;\n'
              '\tcout << "\\t\\t  '
              '*****                                                                           '
              '*****" << endl;\n'
              '\tcout << "\\t\\t  *****           H E L L O !  W E L C O M E  '
              'T O  T H E  \'Q U I Z L E T\'         *****" << endl;\n'
              '\tcout << "\\t\\t  *****                = = = = = = = = = = = = '
              '= = = = = = = = = = = =            *****" << endl;\n'
              '\tcout << "\\t\\t  *****                          = = = = = = = '
              '= = = = =                          *****" << endl;\n'
              '\tcout << "\\t\\t  *****                                   B '
              'Y                                     *****" << endl;\n'
              '\tcout << "\\t\\t  *****                       R U S T A M    Z '
              'O K I R O V                        *****" << endl;\n'
              '\tcout << "\\t\\t  '
              '*****                                                                           '
              '*****" << endl;\n'
              '\tcout << "\\t\\t  '
              '*************************************************************************************" '
              '<< endl;\n'
              '\tcout << endl;\n'
              '\n'
              '\tcout << "\\t\\t\\t\\t\\t\\tH O W  T O  P L A Y\\n\\n";\n'
              '\tcout << "\\t\\t1. IN THIS QUIZ GAME YOU WILL BE GIVEN 10 '
              '\'C++ PROGRAMMING LANGUAGE\' RELATED QUESTIONS.\\n\\n";\n'
              '\tcout << "\\t\\t2. IF YOU PRESS INCORRECT KEY, THE PROGRAM '
              'WILL AGAIN ASK YOU TO INPUT CORRECT VALUE.\\n\\n";\n'
              '\tcout << "\\t\\t3. ADDITIONALLY YOU WILL HAVE SOME HINTS WHICH '
              'YOU CAN USE FROM the 8TH QUESTION.\\n\\n";\n'
              '\tcout << "\\t\\t4. YOU WILL LOSE \'5\' POINTS FROM YOUR '
              'OVERALL SCORE IF YOU WILL USE HINTS.\\n\\n\\n\\n";\n'
              '\tcout << "\\t\\t\\t\\t\\tPRESS THE \'ENTER\' KEY TO START A '
              'QUIZ... ";\n'
              "\tif (cin.get() == '\\n') {\n"
              '\t\tsystem("cls");\n'
              '\t\tcout << "\\t\\t\\t\\t\\tI N F O R M A T I O N   T A B L '
              'E\\n\\n";\n'
              '\t\tcout << "What is your name? ";\n'
              '\t\tgetline(cin, Name[0]);\n'
              '\t\tcout << "What is your level of C++?"<<endl;\n'
              '\t\tcout << "[1]. Junior" << endl;\n'
              '\t\tcout << "[2]. Middle" << endl;\n'
              '\t\tcout << "[3]. Senior" << endl;\n'
              '\t\tdo {\n'
              '\t\t\tcout << "Choose the level of difficulty: ";\n'
              '\t\t\tcin >> level;\n'
              '\t\t\tcin.clear();\n'
              '\t\t} while (level != "1"&&level!="2"&&level!="3");\n'
              '\t\tstring Respond;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "Are you ready to take the Quiz " << Name[0] << " ? '
              'Yes = \'Yes\'/No = \'Any key\'. " << endl;\n'
              '\t\tcout << "Your choice: ";\n'
              '\t\tcin >> Respond;\n'
              '\t\tif (Respond == "yes" || Respond == "Yes")\n'
              '\t\t{\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tcout << "OK, Good Like!!! " << endl;\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\treturn 1;\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tcout << "OK. Goodbye." << endl;\n'
              '\t\t\tsystem("exit");\n'
              '\t\t\treturn 0;\n'
              '\t\t}\n'
              '\t}\n'
              '\telse\n'
              '\t\tcout << "I meant ONLY the ENTER key... Oh well.\\n";\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001814',
         path='/Quiz Game/quiz-game.cpp',
         lineno=72,
         depth=2,
         type='function_decl',
         name='hints',
         text='void hints()\n'
              '{\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '**   A: Audience help            **" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '**   B: 50:50                    **" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '**   C: Room for mistake         **" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '**   D: Change the question      **" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001815',
         path='/Quiz Game/quiz-game.cpp',
         lineno=82,
         depth=2,
         type='function_decl',
         name='question1',
         text='void question1() {\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '*****      TOTAL SCORE:" << total_score << "      *****" << '
              'endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl; \n'
              '\tcout << "\\t\\t\\t\\t\\t  Q U E S T I O N  No. 1"<< endl;\n'
              '\t\tcout << "What is the correct value to return to the '
              'operating system upon the successful completion of a program?" '
              '<< endl;\n'
              '\t\tcout << "[1] -1"<<endl;\n'
              '\t\tcout << "[2]  1" << endl;\n'
              '\t\tcout << "[3]  0" << endl;\n'
              '\t\tcout << "[4] Programs do not return a value" << endl;\n'
              '\t\tstring answer;\n'
              '\t\tcout << endl;\n'
              '    \tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\t\tcin >> answer;\n'
              '\t\t//limiting the answers of the user\n'
              '\t\tif (answer == "1" || answer == "2" || answer == "3" || '
              'answer == "4")\n'
              '\t\t{\n'
              '\t\t\tif (answer == "3")\n'
              '\t\t\t{\n'
              '\t\t\t\ttotal_score += 10;\n'
              '\t\t\t\tcorrect_answer += 1;\n'
              '\t\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\t\tcout << "You got 10 points out of 10." << endl;\n'
              '\t\t\t}\n'
              '\t\t\telse if (answer == "1" || answer == "2" || answer == '
              '"4")\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\t\tcout << "You got 0 points out of 10." << endl;\n'
              '\t\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t\t}\n'
              '\t\telse \n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t****           P L E A S E  I N P U T  C O '
              'R R E C T  V A L U E !                ****" << endl;\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tquestion1();\n'
              '\t\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001816',
         path='/Quiz Game/quiz-game.cpp',
         lineno=125,
         depth=2,
         type='function_decl',
         name='question2',
         text='void question2() {\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '*****      TOTAL SCORE:" << total_score << "     *****" << '
              'endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\t  Q U E S T I O N  No. 2" << endl;\n'
              '\tcout << "What is the only function all C++ programs must '
              'contain?" << endl;\n'
              '\tcout << "[1] start()" << endl;\n'
              '\tcout << "[2] system()" << endl;\n'
              '\tcout << "[3] program()" << endl;\n'
              '\tcout << "[4] main()" << endl;\n'
              '\tstring answer;\n'
              '\tcout<<endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\tcin >> answer;\n'
              '\tif (answer == "1" || answer == "2" || answer == "3" || answer '
              '== "4")\n'
              '\t{\n'
              '\t\tif (answer == "4")\n'
              '\t\t{\n'
              '\t\t\ttotal_score += 10;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 10 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\telse if (answer == "1" || answer == "2" || answer == "3")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t****           P L E A S E  I N P U T  C O '
              'R R E C T  V A L U E !                ****" << endl;\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tquestion2();\n'
              '\t}\n'
              '\t\n'
              '}\n')

Fragment(uuid='NORMALIZED-001817',
         path='/Quiz Game/quiz-game.cpp',
         lineno=168,
         depth=2,
         type='function_decl',
         name='question3',
         text='void question3() {\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '*****      TOTAL SCORE:" << total_score << "     *****" << '
              'endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\t  Q U E S T I O N  No. 3" << endl;\n'
              '\tcout << "Which of the following is a correct comment?" << '
              'endl;\n'
              '\tcout << "[1] / Comment /" << endl;\n'
              '\tcout << "[2] ** Comment **" << endl;\n'
              '\tcout << "[3] { Comment }" << endl;\n'
              '\tcout << "[4]  //comment" << endl;\n'
              '\tstring answer;\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\tcin >> answer;\n'
              '\tif (answer == "1" || answer == "2" || answer == "3" || answer '
              '== "4")\n'
              '\t{\n'
              '\t\tif (answer == "4") {\n'
              '\t\t\ttotal_score += 10;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 10 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\telse if (answer == "1" || answer == "2" || answer == "3")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t****           P L E A S E  I N P U T  C O '
              'R R E C T  V A L U E !                ****" << endl;\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tquestion3();\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001818',
         path='/Quiz Game/quiz-game.cpp',
         lineno=209,
         depth=2,
         type='function_decl',
         name='question4',
         text='void question4() {\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '*****      TOTAL SCORE:" << total_score << "     *****" << '
              'endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\t  Q U E S T I O N  No. 4" << endl; \n'
              '\tcout << "Which of the following is the correct operator to '
              'compare two variables?" << endl;\n'
              '\tcout << "[1] = =" << endl;\n'
              '\tcout << "[2] :=" << endl;\n'
              '\tcout << "[3] =" << endl;\n'
              '\tcout << "[4] ==" << endl;\n'
              '\tstring answer;\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\tcin >> answer;\n'
              '\tif (answer == "1" || answer == "2" || answer == "3" || answer '
              '== "4")\n'
              '\t{\n'
              '\t\tif (answer == "4") {\n'
              '\t\t\ttotal_score += 10;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 10 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\telse if (answer == "1" || answer == "2" || answer == "3")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t****           P L E A S E  I N P U T  C O '
              'R R E C T  V A L U E !                ****" << endl;\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tquestion4();\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001819',
         path='/Quiz Game/quiz-game.cpp',
         lineno=250,
         depth=2,
         type='function_decl',
         name='question5',
         text='void question5() {\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '*****      TOTAL SCORE:" << total_score << "     *****" << '
              'endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\t  Q U E S T I O N  No. 5" << endl; \n'
              '\tcout << "Which of the following is a complete function?" << '
              'endl;\n'
              '\tcout << "[1] int funct();" << endl;\n'
              '\tcout << "[2] int funct(int x) {return x=x+1;}" << endl;\n'
              '\tcout << "[3] void funct(int) {cout<<\'Hello\'}" << endl;\n'
              '\tcout << "[4] void funct(x) {cout<<\'Hello\'}" << endl;\n'
              '\tstring answer;\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\tcin >> answer;\n'
              '\tif (answer == "1" || answer == "2" || answer == "3" || answer '
              '== "4")\n'
              '\t{\n'
              '\t\tif (answer == "2") {\n'
              '\t\t\ttotal_score += 10;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 10 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\telse if (answer == "1" || answer == "3" || answer == "4")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t****           P L E A S E  I N P U T  C O '
              'R R E C T  V A L U E !                ****" << endl;\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tquestion5();\n'
              '\t\t}\n'
              '\t\n'
              '}\n')

Fragment(uuid='NORMALIZED-001820',
         path='/Quiz Game/quiz-game.cpp',
         lineno=292,
         depth=2,
         type='function_decl',
         name='question6',
         text='void question6() {\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '*****      TOTAL SCORE:" << total_score << "     *****" << '
              'endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\t  Q U E S T I O N  No. 6" << endl;\n'
              '\tcout << "Which is not a proper prototype?" << endl;\n'
              '\tcout << "[1] int funct(char x, char y);" << endl;\n'
              '\tcout << "[2] double funct(char x)" << endl;\n'
              '\tcout << "[3] void funct();" << endl;\n'
              '\tcout << "[4] char x();" << endl;\n'
              '\tstring answer;\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\tcin >> answer;\n'
              '\tif (answer == "1" || answer == "2" || answer == "3" || answer '
              '== "4")\n'
              '\t{\n'
              '\t\tif (answer == "2") \n'
              '\t\t{\n'
              '\t\t\ttotal_score += 10;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 10 points out of 10." << endl;\n'
              '\t\t\t\n'
              '\t\t}\n'
              '\t\telse if (answer == "1" || answer == "3" || answer == "4")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 10." << endl;\n'
              '\t\t\t\n'
              '\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t****           P L E A S E  I N P U T  C O '
              'R R E C T  V A L U E !                ****" << endl;\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tquestion6();\n'
              '\t\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001821',
         path='/Quiz Game/quiz-game.cpp',
         lineno=336,
         depth=2,
         type='function_decl',
         name='question7',
         text='void question7() {\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '*****      TOTAL SCORE:" << total_score << "     *****" << '
              'endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\t  Q U E S T I O N  No. 7" << endl;  \n'
              '\tcout << "Which of the following is a two-dimensional array?" '
              '<< endl;\n'
              '\tcout << "[1] array anarray[20][20];" << endl;\n'
              '\tcout << "[2] int anarray[20][20];" << endl;\n'
              '\tcout << "[3] int array[20, 20];" << endl;\n'
              '\tcout << "[4] char array[20];" << endl;\n'
              '\tstring answer;\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\tcin >> answer;\n'
              '\tif (answer == "1" || answer == "2" || answer == "3" || answer '
              '== "4")\n'
              '\t{\n'
              '\t\tif (answer == "2") {\n'
              '\t\t\ttotal_score += 10;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 10 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\telse if (answer == "1" || answer == "3" || answer == "4")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 10." << endl;\n'
              '\t\t\t\n'
              '\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t****           P L E A S E  I N P U T  C O '
              'R R E C T  V A L U E !                ****" << endl;\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tquestion7();\n'
              '\t\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001822',
         path='/Quiz Game/quiz-game.cpp',
         lineno=378,
         depth=2,
         type='function_decl',
         name='question8',
         text='void question8() {\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '*****      TOTAL SCORE:" << total_score << "     *****" << '
              'endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\thints();\n'
              '\tcout << "\\t\\t\\t\\t\\t  Q U E S T I O N  No. 8" << endl;\n'
              '\tcout << "Evaluate !(1 && !(0 || 1))." << endl;\n'
              '\tcout << "[1] True" << endl;\n'
              '\tcout << "[2] False" << endl;\n'
              '\tcout << "[3] Unevaluatable" << endl;\n'
              '\tstring answer;\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\tcin >> answer;\n'
              '\t//limiting the answers of the user\n'
              '\tif (answer == "1" || answer == "2" || answer == "3" )\n'
              '\t{\n'
              '\t\tif (answer == "1") {\n'
              '\t\t\ttotal_score += 10;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 10 points out of 10." << endl;\n'
              '\t\t\t\n'
              '\t\t}\n'
              '\t\telse if (answer == "2" || answer == "3")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 10." << endl;\n'
              '\t\t\t\n'
              '\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t}\n'
              '\t//if cases for the hints\n'
              '\telse if (answer == "A" || answer == "a")\n'
              '\t{\n'
              '\t\thints_used++;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "Audience prediction is...  " << endl;\n'
              '\t\tcout << "[1] 42%" << endl;\n'
              '\t\tcout << "[2] 38%" << endl;\n'
              '\t\tcout << "[3] 20%" << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\t\tcin >> answer;\n'
              '\t\tif (answer == "1") {\n'
              '\t\t\ttotal_score += 5;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 10 points out of 5." << endl;\n'
              '\n'
              '\t\t}\n'
              '\t\telse if (answer == "2" || answer == "3")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 5." << endl;\n'
              '\n'
              '\t\t}\n'
              '\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\telse if (answer == "B" || answer == "b")\n'
              '\t{\n'
              '\t\thints_used++;\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Now you have chance to choose two answers. If one '
              'of them will correct you will take 5 points." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tQ U E S T I O N  No. 8" << endl;\n'
              '\t\tcout << "Evaluate !(1 && !(0 || 1))." << endl;\n'
              '\t\tcout << "[1] True" << endl;\n'
              '\t\tcout << "[2] False" << endl;\n'
              '\t\tcout << "[3] Unevaluatable" << endl;\n'
              '\t\tstring answer1, answer2;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR FIRST CHOICE: ";\n'
              '\t\tcin >> answer1;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR SECOND CHOICE: ";\n'
              '\t\tcin >> answer2;\n'
              '\t\tif (answer1 == "1" || answer2 == "1")\n'
              '\t\t{\n'
              '\t\t\ttotal_score += 5;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 5 points out of 5." << endl; \n'
              '\t\t}\n'
              '\t\telse \n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 5." << endl;\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\telse if (answer == "C" || answer == "c")\n'
              '\t{\n'
              '\t\thints_used++;\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Now you have chance to answer incorrectly. You '
              'will take 5 points for this question." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tQ U E S T I O N  No. 8" << endl;\n'
              '\t\tcout << "Evaluate !(1 && !(0 || 1))." << endl;\n'
              '\t\tcout << "[1] True" << endl;\n'
              '\t\tcout << "[2] False" << endl;\n'
              '\t\tcout << "[3] Unevaluatable" << endl;\n'
              '\t\tstring answer;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\t\tcin >> answer;\n'
              '\t    total_score += 5;\n'
              '\t    correct_answer += 1;\n'
              '\t\tif(answer=="1")\n'
              '\t    cout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t    cout << "You got 5 points out of 5." << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\telse if (answer == "D" || answer == "d") \n'
              '    {\n'
              '         hints_used++;\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "\\t T H I S   I S  A  N E W   Q U E S T I O N. Y O '
              'U  W I L L  G E T  5  P O I N T S. " << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "When did INHA UNivercity in TAshkent '
              'established?." << endl;\n'
              '\t\tcout << "[1] 2014" << endl;\n'
              '\t\tcout << "[2] 1968" << endl;\n'
              '\t\tcout << "[3] 2015" << endl;\n'
              '\t\tstring answer;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\t\tcin >> answer;\n'
              '\t\t\tif (answer == "1") {\n'
              '\t\t\t\ttotal_score += 5;\n'
              '\t\t\t\tcorrect_answer += 1;\n'
              '\t\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\t\tcout << "You got 5 points out of 5." << endl;\n'
              '\n'
              '\t\t\t}\n'
              '\t\t\telse if (answer == "2" || answer == "3")\n'
              '\t\t\t{\n'
              '\t\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\t\tcout << "You got 0 points out of 5." << endl;\n'
              '\n'
              '\t\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\n'
              '\telse\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t****           P L E A S E  I N P U T  C O '
              'R R E C T  V A L U E !                ****" << endl;\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tquestion8();\n'
              '\t\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001823',
         path='/Quiz Game/quiz-game.cpp',
         lineno=539,
         depth=2,
         type='function_decl',
         name='question9',
         text='void question9() {\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '*****      TOTAL SCORE:" << total_score << "     *****" << '
              'endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\thints();\n'
              '\tcout << "\\t\\t\\t\\t\\t  Q U E S T I O N  No. 9" << endl;\n'
              '\tcout << "What is the result of the program below?" << endl;\n'
              '\tcout << " int x = 10; " << endl;\n'
              '\tcout << " int y = 70; " << endl;\n'
              '\tcout << " x = x + y; " << endl;\n'
              '\tcout << " y = x - y;  " << endl;\n'
              '\tcout << " x = x - y;  " << endl;\n'
              '\tcout << endl;\n'
              '\tcout << "[1] x=70, y=10" << endl;\n'
              '\tcout << "[2] x=10, y=70" << endl;\n'
              '\tcout << "[3] x=60, y=20" << endl;\n'
              '\tcout << "[4] x=20, y=60" << endl;\n'
              '\tstring answer;\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\tcin >> answer;\n'
              '\tif (answer == "1" || answer == "2" || answer == "3" || answer '
              '== "4")\n'
              '\t{\n'
              '\t\tif (answer == "1") {\n'
              '\t\t\ttotal_score += 10;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 10 points out of 10." << endl;\n'
              '\t\t\t\n'
              '\t\t}\n'
              '\t\telse if (answer == "2" || answer == "3" || answer == "4")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 10." << endl;\n'
              '\t\t\t\n'
              '\t\t}\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tsystem("pause");\n'
              '\t\t\tsystem("cls");\n'
              '\t}\n'
              '\telse if (answer == "A" || answer == "a")\n'
              '\t{\n'
              '\t\thints_used++;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "Audience prediction is...  " << endl;\n'
              '\t\tcout << "[1] 30%" << endl;\n'
              '\t\tcout << "[2] 25%" << endl;\n'
              '\t\tcout << "[3] 20%" << endl;\n'
              '\t\tcout << "[4] 25%" << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\t\tcin >> answer;\n'
              '\t\tif (answer == "1") {\n'
              '\t\t\ttotal_score += 5;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 5 points out of 5." << endl;\n'
              '\n'
              '\t\t}\n'
              '\t\telse if (answer == "2" || answer == "3" || answer == "4")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 5." << endl;\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\telse if (answer == "B" || answer == "b")\n'
              '\t{\n'
              '\t\thints_used++;\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Now you have chance to choose two answers. If one '
              'of them will correct you will take 5 points." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tQ U E S T I O N  No. 9" << endl;\n'
              '\t\tcout << "What is the result of the program below?" << '
              'endl;\n'
              '\t\tcout << " int x = 10; " << endl;\n'
              '\t\tcout << " int y = 70; " << endl;\n'
              '\t\tcout << " x = x + y; " << endl;\n'
              '\t\tcout << " y = x - y;  " << endl;\n'
              '\t\tcout << " x = x - y;  " << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "[1] x=70, y=10" << endl;\n'
              '\t\tcout << "[2] x=10, y=70" << endl;\n'
              '\t\tcout << "[3] x=60, y=20" << endl;\n'
              '\t\tcout << "[4] x=20, y=60" << endl;\n'
              '\t\tstring answer1, answer2;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR FIRST CHOICE: ";\n'
              '\t\tcin >> answer1;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR SECOND CHOICE: ";\n'
              '\t\tcin >> answer2;\n'
              '\t\tif (answer1 == "1" || answer2 == "1")\n'
              '\t\t{\n'
              '\t\t\ttotal_score += 5;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 5 points out of 5." << endl;\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 5." << endl;\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t\t\n'
              '\t}\n'
              '\telse if (answer == "C" || answer == "c")\n'
              '\t{\n'
              '\t\thints_used++;\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Now you have chance to answer incorrectly. You '
              'will take 5 points for this question." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tQ U E S T I O N  No. 9" << endl;\n'
              '\t\tcout << "What is the result of the program below?" << '
              'endl;\n'
              '\t\tcout << " int x = 10; " << endl;\n'
              '\t\tcout << " int y = 70; " << endl;\n'
              '\t\tcout << " x = x + y; " << endl;\n'
              '\t\tcout << " y = x - y;  " << endl;\n'
              '\t\tcout << " x = x - y;  " << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "[1] x=70, y=10" << endl;\n'
              '\t\tcout << "[2] x=10, y=70" << endl;\n'
              '\t\tcout << "[3] x=60, y=20" << endl;\n'
              '\t\tcout << "[4] x=20, y=60" << endl;\n'
              '\t\tstring answer;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\t\tcin >> answer;\n'
              '\t\ttotal_score += 5;\n'
              '\t\tcorrect_answer += 1;\n'
              '\t\tif (answer == "1")\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\tcout << "You got 5 points out of 5." << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t\t\n'
              '\t}\n'
              '\telse if (answer == "D" || answer == "d") {\n'
              '\thints_used++;\n'
              '\tsystem("cls");\n'
              '\tcout << "\\t T H I S   I S  A  N E W   Q U E S T I O N. Y O '
              'U  W I L L  G E T  5  P O I N T S. " << endl;\n'
              '\tcout << endl;\n'
              '\tcout << "When did INHA UNivercity in TAshkent established?." '
              '<< endl;\n'
              '\tcout << "[1] 2014" << endl;\n'
              '\tcout << "[2] 1968" << endl;\n'
              '\tcout << "[3] 2015" << endl;\n'
              '\tstring answer;\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\tcin >> answer;\n'
              '\tif (answer == "1") {\n'
              '\t\ttotal_score += 5;\n'
              '\t\tcorrect_answer += 1;\n'
              '\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\tcout << "You got 5 points out of 5." << endl;\n'
              '\n'
              '\t}\n'
              '\telse if (answer == "2" || answer == "3")\n'
              '\t{\n'
              '\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\tcout << "You got 0 points out of 5." << endl;\n'
              '\n'
              '\t}\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\telse\n'
              '\t\t{\n'
              '\t\t\tsystem("cls");\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << "\\t\\t****           P L E A S E  I N P U T  C O '
              'R R E C T  V A L U E !                ****" << endl;\n'
              '\t\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\t\tcout << endl;\n'
              '\t\t\tquestion9();\n'
              '\t\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001824',
         path='/Quiz Game/quiz-game.cpp',
         lineno=718,
         depth=2,
         type='function_decl',
         name='question10',
         text='void question10() {\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\tcout << '
              '"                                                                                     '
              '*****      TOTAL SCORE:" << total_score << "     *****" << '
              'endl;\n'
              '\tcout << '
              '"                                                                                     '
              '***********************************" << endl;\n'
              '\thints(); \n'
              '\tcout << "\\t\\t\\t\\t\\t  Q U E S T I O N  No. 10" << endl;\n'
              '\tcout << "What will i and j equal after the code below is '
              'executed?" << endl;\n'
              '\tcout << "int i = 5;" << endl;\n'
              '\tcout << "int j = i++;" << endl;\n'
              '\tcout << "[1] i=5, j=5 " << endl;\n'
              '\tcout << "[2] i=5, j=4" << endl;\n'
              '\tcout << "[3] i=5, j=6" << endl;\n'
              '\tcout << "[4] ERROR" << endl;\n'
              '\tstring answer;\n'
              '\tcout << endl;\n'
              '\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\tcin >> answer;\n'
              '\tif (answer == "1" || answer == "2" || answer == "3" || answer '
              '== "4")\n'
              '\t{\n'
              '\t\tif (answer == "3") {\n'
              '\t\t\ttotal_score += 10;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 10 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\telse if (answer == "1" || answer == "2" || answer == "4")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 10." << endl;\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\telse if (answer == "A" || answer == "a")\n'
              '\t{\n'
              '\t\thints_used++;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "Audience prediction is...  " << endl;\n'
              '\t\tcout << "[1] 30%" << endl;\n'
              '\t\tcout << "[2] 25%" << endl;\n'
              '\t\tcout << "[3] 20%" << endl;\n'
              '\t\tcout << "[4] 25%" << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\t\tcin >> answer;\n'
              '\t\tif (answer == "3") {\n'
              '\t\t\ttotal_score += 5;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 5 points out of 5." << endl;\n'
              '\t\t}\n'
              '\t\telse if (answer == "1" || answer == "2" || answer == "4")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 5." << endl;\n'
              '\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\telse if (answer == "B" || answer == "b")\n'
              '\t{\n'
              '\t\thints_used++;\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Now you have chance to choose two answers. If one '
              'of them will correct you will take 5 points." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tQ U E S T I O N  No. 10" << endl;\n'
              '\t\tcout << "What will i and j equal after the code below is '
              'executed?" << endl;\n'
              '\t\tcout << "int i = 5;" << endl;\n'
              '\t\tcout << "int j = i++;" << endl;\n'
              '\t\tcout << "[1] i=5, j=5 " << endl;\n'
              '\t\tcout << "[2] i=5, j=4" << endl;\n'
              '\t\tcout << "[3] i=5, j=6" << endl;\n'
              '\t\tcout << "[4] ERROR" << endl;\n'
              '\t\tstring answer1, answer2;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR FIRST CHOICE: ";\n'
              '\t\tcin >> answer1;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR SECOND CHOICE: ";\n'
              '\t\tcin >> answer2;\n'
              '\t\tif (answer1 == "3" || answer2 == "3")\n'
              '\t\t{\n'
              '\t\t\ttotal_score += 5;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 5 points out of 5." << endl;\n'
              '\t\t}\n'
              '\t\telse\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 5." << endl;\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\telse if (answer == "C" || answer == "c")\n'
              '\t{\n'
              '\t\thints_used++;\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "Now you have chance to answer incorrectly. You '
              'will take 5 points for this question." << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tQ U E S T I O N  No. 10" << endl;\n'
              '\t\tcout << "What will i and j equal after the code below is '
              'executed?" << endl;\n'
              '\t\tcout << "int i = 5;" << endl;\n'
              '\t\tcout << "int j = i++;" << endl;\n'
              '\t\tcout << "[1] i=5, j=5 " << endl;\n'
              '\t\tcout << "[2] i=5, j=4" << endl;\n'
              '\t\tcout << "[3] i=5, j=6" << endl;\n'
              '\t\tcout << "[4] ERROR" << endl;\n'
              '\t\tstring answer;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\t\tcin >> answer;\n'
              '\t\ttotal_score += 5;\n'
              '\t\tcorrect_answer += 1;\n'
              '\t\tif (answer == "3")\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\tcout << "You got 5 points out of 5." << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\n'
              '\t}\n'
              '\telse if (answer == "D" || answer == "d") {\n'
              '\thints_used++;\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << "\\t T H I S   I S  A  N E W   Q U E S T I O N. Y O '
              'U  W I L L  G E T  \'5\'  P O I N T S. " << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "When did INHA UNivercity in TAshkent '
              'established?." << endl;\n'
              '\t\tcout << "[1] 2014" << endl;\n'
              '\t\tcout << "[2] 1968" << endl;\n'
              '\t\tcout << "[3] 2015" << endl;\n'
              '\t\tstring answer;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "\\t\\t\\t\\t\\tENTER YOUR CHOICE: ";\n'
              '\t\tcin >> answer;\n'
              '\t\tif (answer == "1") {\n'
              '\t\t\ttotal_score += 5;\n'
              '\t\t\tcorrect_answer += 1;\n'
              '\t\t\tcout << "C O R R E C T   A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 5 points out of 5." << endl;\n'
              '\n'
              '\t\t}\n'
              '\t\telse if (answer == "2" || answer == "3")\n'
              '\t\t{\n'
              '\t\t\tcout << "W R O N G  A N S W E R !!!" << endl;\n'
              '\t\t\tcout << "You got 0 points out of 5." << endl;\n'
              '\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t\tsystem("pause");\n'
              '\t\tsystem("cls");\n'
              '\t}\n'
              '\telse\n'
              '\t{\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\tcout << "\\t\\t****           P L E A S E  I N P U T  C O R '
              'R E C T  V A L U E !                ****" << endl;\n'
              '\t\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\t\tcout << endl;\n'
              '\t\tquestion10();\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-001825',
         path='/Quiz Game/quiz-game.cpp',
         lineno=883,
         depth=2,
         type='function_decl',
         name='after_game',
         text='void after_game() {\n'
              '\tsystem("cls");\n'
              '\tsystem("color 0A");\n'
              '\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\tcout << '
              '"\\t\\t*****                                                                           '
              '*****" << endl;\n'
              '\tcout << "\\t\\t*****                       C O N G R A T U L '
              'A T I O N S ! ! !                 *****" << endl;\n'
              '\tcout << "\\t\\t*****                = = = = = = = = = = = = = '
              '= = = = = = = = = = =            *****" << endl;\n'
              '\tcout << "\\t\\t*****                            = = = = = = = '
              '= = = =                          *****" << endl;\n'
              '\tcout << '
              '"\\t\\t*****                                                                           '
              '*****" << endl;\n'
              '\tcout << '
              '"\\t\\t*****                                                                           '
              '*****" << endl;\n'
              '\tcout << '
              '"\\t\\t*****                                                                           '
              '*****" << endl;\n'
              '\tcout << '
              '"\\t\\t*************************************************************************************" '
              '<< endl;\n'
              '\tcout << endl;\n'
              '\tcout << "\\tTOTAL SCORE: " << total_score << endl;\n'
              '\tcout << "\\tYOU HAVE ANSWERED FOR \'" << correct_answer << '
              '"\' QUESTIONS OUT OF 10." << endl;\n'
              '\tcout << "\\tYOU HAVE USED "<<hints_used<<" HINTS DURING THE '
              'GAME."<<endl;\n'
              '\tsystem("pause");\n'
              '}\n')

Fragment(uuid='NORMALIZED-001826',
         path='/Quiz Game/quiz-game.cpp',
         lineno=902,
         depth=2,
         type='function_decl',
         name='scores_table',
         text='')

Fragment(uuid='NORMALIZED-001827',
         path='/Quiz Game/quiz-game.cpp',
         lineno=904,
         depth=2,
         type='function_decl',
         name='main',
         text='int main() {\n'
              '\tint user_choice;\n'
              '\tuser_choice = main_menu_view();\n'
              '\tif (user_choice) {\n'
              '\t\tquestion1();\n'
              '\t\tquestion2();\n'
              '\t\tquestion3();\n'
              '\t\tquestion4();\n'
              '\t\tquestion5();\n'
              '\t\tquestion6();\n'
              '\t\tquestion7();\n'
              '\t\tquestion8();\n'
              '\t\tquestion9();\n'
              '\t\tquestion10();\n'
              '\t\tafter_game();\n'
              '\t\tscores_table();\n'
              '\t\treturn 0;\n'
              '\t}\n'
              '\telse {\n'
              '\t\treturn 0;\n'
              '\t}\n'
              '\treturn 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001828',
         path='/Quiz Game/quiz-game.cpp',
         lineno=928,
         depth=2,
         type='function_decl',
         name='scores_table',
         text='void scores_table()\n'
              '{\n'
              '\tsystem("cls");\n'
              '\tcout << "\\t\\tH I G H E S T   S C O R E S" << endl;\n'
              '\tcout << '
              '"*********************************************************************" '
              '<< endl;\n'
              '\tcout << "***** 1 Rustam Zokirov  ***" << "              ***  '
              '" << "100" <<"  *****"<< endl;\n'
              '\tcout << "***** 2 Alimov 8        ***" << "              ***  '
              '" << "80" << "   *****" << endl;\n'
              '\tcout << "***** 3 " << Name[0] << "     ***" << "              '
              '***  " << total_score << "    *****" << endl;\n'
              '\tcout << "***** 4 " << Name[1] << "                ***" << '
              '"              ***  " << total_score << "   *****" << endl;\n'
              '\tcout << "***** 5 " << Name[2] << "                ***" << '
              '"              ***  " << total_score << "   *****" << endl;\n'
              '\t \n'
              '\tcout << endl; \n'
              '\tcout << "Do you want to start a QUIZ again? (Yes/No)" << '
              'endl;\n'
              '\tstring play_again;\n'
              '\tcin >> play_again;\n'
              '\tif (play_again == "Yes" || play_again == "yes")\n'
              '\t{\n'
              '\t\ttotal_score = 0;\n'
              '\t\tmain();\n'
              '\t}\n'
              '\telse\n'
              '\t\tcout << "OK, Goodbye! ";\n'
              '}\n')

Fragment(uuid='NORMALIZED-001829',
         path='/README.md',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# C++ Programming\n\n\n')

Fragment(uuid='NORMALIZED-001830',
         path='/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# C++ Programming\n'
              '## Contents\n'
              '## Keep These Tips in Mind While Learning Programming\n'
              '## Computer Science Basics\n'
              '## Learning Resources\n'
              '## Problem Solving\n'
              '## Projects Ideas\n')

Fragment(uuid='NORMALIZED-001831',
         path='/README.md',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='## Contents\n'
              '- [Tips](#keep-these-tips-in-mind-while-learning-programming)\n'
              '- [Computer Science Basics](#computer-science-basics)\n'
              '- [Learning Resources](#learning-resources)\n'
              '- [Problem Solving](#problem-solving)\n'
              '- [Projects Ideas](#projects-ideas)\n'
              '\n'
              '\n')

Fragment(uuid='NORMALIZED-001832',
         path='/README.md',
         lineno=12,
         depth=6,
         type='documentation',
         name='',
         text='## Keep These Tips in Mind While Learning Programming\n```')

Fragment(uuid='NORMALIZED-001833',
         path='/README.md',
         lineno=13,
         depth=11,
         type='documentation',
         name='',
         text='\n1. Learn and code every day, consistency is important.')

Fragment(uuid='NORMALIZED-001834',
         path='/README.md',
         lineno=14,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '2. Write it down - plan your code before you start coding and '
              'understand the input to your program and the output from your '
              'code.')

Fragment(uuid='NORMALIZED-001835',
         path='/README.md',
         lineno=15,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '3. Learn to debug your code - look at the code line by line to '
              'see how it works.')

Fragment(uuid='NORMALIZED-001836',
         path='/README.md',
         lineno=16,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '4. Surround yourself with other people who are learning. Teach '
              'each other.')

Fragment(uuid='NORMALIZED-001837',
         path='/README.md',
         lineno=17,
         depth=11,
         type='documentation',
         name='',
         text='\n5. Learn taking notes.')

Fragment(uuid='NORMALIZED-001838',
         path='/README.md',
         lineno=18,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '6. Build something, anything. For example, simple calculator, '
              'or program to save and read data from TXT files.')

Fragment(uuid='NORMALIZED-001839',
         path='/README.md',
         lineno=19,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '7. Focus on 1 thing! Take small steps, but every day, '
              'consistency is very important again.')

Fragment(uuid='NORMALIZED-001840',
         path='/README.md',
         lineno=20,
         depth=11,
         type='documentation',
         name='',
         text='\n8. Learn to ask GOOD questions to others:')

Fragment(uuid='NORMALIZED-001841',
         path='/README.md',
         lineno=21,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '  - G: Give context on what you are trying to do, clearly '
              'describing the problem.')

Fragment(uuid='NORMALIZED-001842',
         path='/README.md',
         lineno=22,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '  - O: Outline the things you have already tried to fix the '
              'issue.')

Fragment(uuid='NORMALIZED-001843',
         path='/README.md',
         lineno=23,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '  - O: Offer your best guess as to what the problem might be. '
              'It helps the person who is helping you not only know what '
              "you're thinking, but also know that you've thought of something "
              'yourself.')

Fragment(uuid='NORMALIZED-001844',
         path='/README.md',
         lineno=24,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              "  - D: Demonstrate what's going on. Include the code, the "
              'tracing error message, and an explanation of the steps you '
              'followed that resulted in the error. That way, the person '
              "helping doesn't have to try to recreate the problem.")

Fragment(uuid='NORMALIZED-001845',
         path='/README.md',
         lineno=25,
         depth=11,
         type='documentation',
         name='',
         text='\n```')

Fragment(uuid='NORMALIZED-001846',
         path='/README.md',
         lineno=26,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001847',
         path='/README.md',
         lineno=27,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001848',
         path='/README.md',
         lineno=28,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001849',
         path='/README.md',
         lineno=29,
         depth=11,
         type='documentation',
         name='',
         text='## Computer Science Basics')

Fragment(uuid='NORMALIZED-001850',
         path='/README.md',
         lineno=29,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- [Harvard '
              'CS50](https://youtube.com/playlist?list=PLhQjrBD2T383f9scHRNYJkior2VvYjpSL) '
              '- Scratch, C, Arrays, Algorithms, Memory, Data structures, '
              'Python, SQL, HTML, CSS, JavaScript, Flask')

Fragment(uuid='NORMALIZED-001851',
         path='/README.md',
         lineno=30,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- `Optional` [Crash Course Computer '
              'Science](https://www.youtube.com/playlist?list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo)')

Fragment(uuid='NORMALIZED-001852',
         path='/README.md',
         lineno=31,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- [Computer Science for '
              'Everyone](https://www.youtube.com/playlist?list=PLrC-HcVNfULbGKkhJSgfqvqmaFAZvfHes) ')

Fragment(uuid='NORMALIZED-001853',
         path='/README.md',
         lineno=32,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001854',
         path='/README.md',
         lineno=33,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001855',
         path='/README.md',
         lineno=34,
         depth=11,
         type='documentation',
         name='',
         text='## Learning Resources')

Fragment(uuid='NORMALIZED-001856',
         path='/README.md',
         lineno=34,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- EN [C++ for beginners — '
              'CodeBeauty](https://www.youtube.com/playlist?list=PL43pGnjiVwgQHLPnuH9ch-LhZdwckM8Tq)')

Fragment(uuid='NORMALIZED-001857',
         path='/README.md',
         lineno=35,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- EN [C++ Programming Tutorial — '
              'thenewboston](https://www.youtube.com/playlist?list=PLAE85DE8440AA6B83)')

Fragment(uuid='NORMALIZED-001858',
         path='/README.md',
         lineno=36,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- EN [C++ by The '
              'Cherno](https://www.youtube.com/watch?v=18c3MTX0PK0&list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb)')

Fragment(uuid='NORMALIZED-001859',
         path='/README.md',
         lineno=37,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- EN [C++ by '
              'freeCodeCamp.org](https://www.youtube.com/watch?v=vLnPwxZdW4Y)')

Fragment(uuid='NORMALIZED-001860',
         path='/README.md',
         lineno=38,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- RU [C++ by Denis '
              'Markov](https://www.youtube.com/playlist?list=PLbmlzoDQrXVFC13GjpPrJxl6mzTiX65gs)')

Fragment(uuid='NORMALIZED-001861',
         path='/README.md',
         lineno=39,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- RU [C++ Уроки - Гоша '
              'Дударь](https://www.youtube.com/watch?v=qSHP98i9mDU&list=PL0lO_mIqDDFXNfqIL9PHQM7Wg_kOtDZsW)')

Fragment(uuid='NORMALIZED-001862',
         path='/README.md',
         lineno=40,
         depth=11,
         type='documentation',
         name='',
         text='\n- To read:')

Fragment(uuid='NORMALIZED-001863',
         path='/README.md',
         lineno=41,
         depth=11,
         type='documentation',
         name='',
         text='\n  - [cplusplus.com](https://cplusplus.com/doc/tutorial/)')

Fragment(uuid='NORMALIZED-001864',
         path='/README.md',
         lineno=42,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '  - [w3schools.com](https://www.w3schools.com/cpp/default.asp) ')

Fragment(uuid='NORMALIZED-001865',
         path='/README.md',
         lineno=43,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '  - '
              '[tutorialspoint.com](https://www.tutorialspoint.com/cplusplus/index.htm)')

Fragment(uuid='NORMALIZED-001866',
         path='/README.md',
         lineno=44,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '  - '
              '[GeegsForGeeks.org](https://www.geeksforgeeks.org/c-plus-plus/):')

Fragment(uuid='NORMALIZED-001867',
         path='/README.md',
         lineno=45,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001868',
         path='/README.md',
         lineno=46,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001869',
         path='/README.md',
         lineno=47,
         depth=6,
         type='documentation',
         name='',
         text='## Problem Solving\n```')

Fragment(uuid='NORMALIZED-001870',
         path='/README.md',
         lineno=48,
         depth=11,
         type='documentation',
         name='',
         text='\n1. C++ Program to print "Hello, World!"')

Fragment(uuid='NORMALIZED-001871',
         path='/README.md',
         lineno=49,
         depth=11,
         type='documentation',
         name='',
         text='\n2. C++ Program to Print an Integer (Entered by the User)')

Fragment(uuid='NORMALIZED-001872',
         path='/README.md',
         lineno=50,
         depth=11,
         type='documentation',
         name='',
         text='\n3. C++ Program to Add Two Integers')

Fragment(uuid='NORMALIZED-001873',
         path='/README.md',
         lineno=51,
         depth=11,
         type='documentation',
         name='',
         text='\n4. C++ Program to Multiply two Floating Point Numbers')

Fragment(uuid='NORMALIZED-001874',
         path='/README.md',
         lineno=52,
         depth=11,
         type='documentation',
         name='',
         text='\n5. C++ Program to Find ASCII Value of a Character')

Fragment(uuid='NORMALIZED-001875',
         path='/README.md',
         lineno=53,
         depth=11,
         type='documentation',
         name='',
         text='\n6. C++ Program to Compute Quotient and Remainder')

Fragment(uuid='NORMALIZED-001876',
         path='/README.md',
         lineno=54,
         depth=11,
         type='documentation',
         name='',
         text='\n7. C++ Program to Find the Size of int, float, double and char')

Fragment(uuid='NORMALIZED-001877',
         path='/README.md',
         lineno=55,
         depth=11,
         type='documentation',
         name='',
         text='\n8. C++ Program to Demonstrate the Working of Keyword long')

Fragment(uuid='NORMALIZED-001878',
         path='/README.md',
         lineno=56,
         depth=11,
         type='documentation',
         name='',
         text='\n9. C++ Program to Swap Two Numbers')

Fragment(uuid='NORMALIZED-001879',
         path='/README.md',
         lineno=57,
         depth=11,
         type='documentation',
         name='',
         text='\n10. C++ Program to Check Whether a Number is Even or Odd')

Fragment(uuid='NORMALIZED-001880',
         path='/README.md',
         lineno=58,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '11. C++ Program to Check Whether a Character is Vowel or '
              'Consonant')

Fragment(uuid='NORMALIZED-001881',
         path='/README.md',
         lineno=59,
         depth=11,
         type='documentation',
         name='',
         text='\n12. C++ Program to Find the Largest Number Among Three Numbers')

Fragment(uuid='NORMALIZED-001882',
         path='/README.md',
         lineno=60,
         depth=11,
         type='documentation',
         name='',
         text='\n13. C++ Program to Find all Roots of a Quadratic equation')

Fragment(uuid='NORMALIZED-001883',
         path='/README.md',
         lineno=61,
         depth=11,
         type='documentation',
         name='',
         text='\n14. C++ Program to Check Leap Year')

Fragment(uuid='NORMALIZED-001884',
         path='/README.md',
         lineno=62,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '15. C++ Program to Check Whether a Number is Positive or '
              'Negative')

Fragment(uuid='NORMALIZED-001885',
         path='/README.md',
         lineno=63,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '16. C++ Program to Check Whether a Character is an Alphabet or '
              'not')

Fragment(uuid='NORMALIZED-001886',
         path='/README.md',
         lineno=64,
         depth=11,
         type='documentation',
         name='',
         text='\n17. C++ Program to Calculate the Sum of Natural Numbers')

Fragment(uuid='NORMALIZED-001887',
         path='/README.md',
         lineno=65,
         depth=11,
         type='documentation',
         name='',
         text='\n18. C++ Program to Find Factorial of a Number')

Fragment(uuid='NORMALIZED-001888',
         path='/README.md',
         lineno=66,
         depth=11,
         type='documentation',
         name='',
         text='\n19. C++ Program to Generate Multiplication Table')

Fragment(uuid='NORMALIZED-001889',
         path='/README.md',
         lineno=67,
         depth=11,
         type='documentation',
         name='',
         text='\n20. C++ Program to Display Fibonacci Sequence')

Fragment(uuid='NORMALIZED-001890',
         path='/README.md',
         lineno=68,
         depth=11,
         type='documentation',
         name='',
         text='\n21. C++ Program to Find GCD of two Numbers')

Fragment(uuid='NORMALIZED-001891',
         path='/README.md',
         lineno=69,
         depth=11,
         type='documentation',
         name='',
         text='\n22. C++ Program to Find LCM of two Numbers')

Fragment(uuid='NORMALIZED-001892',
         path='/README.md',
         lineno=70,
         depth=11,
         type='documentation',
         name='',
         text='\n23. C++ Program to Display Characters from A to Z Using Loop')

Fragment(uuid='NORMALIZED-001893',
         path='/README.md',
         lineno=71,
         depth=11,
         type='documentation',
         name='',
         text='\n24. C++ Program to Count Number of Digits in an Integer')

Fragment(uuid='NORMALIZED-001894',
         path='/README.md',
         lineno=72,
         depth=11,
         type='documentation',
         name='',
         text='\n25. C++ Program to Reverse a Number')

Fragment(uuid='NORMALIZED-001895',
         path='/README.md',
         lineno=73,
         depth=11,
         type='documentation',
         name='',
         text='\n26. C++ Program to Calculate the Power of a Number')

Fragment(uuid='NORMALIZED-001896',
         path='/README.md',
         lineno=74,
         depth=11,
         type='documentation',
         name='',
         text='\n27. C++ Program to Check Whether a Number is Palindrome or Not')

Fragment(uuid='NORMALIZED-001897',
         path='/README.md',
         lineno=75,
         depth=11,
         type='documentation',
         name='',
         text='\n28. C++ Program to Check Whether a Number is Prime or Not')

Fragment(uuid='NORMALIZED-001898',
         path='/README.md',
         lineno=76,
         depth=11,
         type='documentation',
         name='',
         text='\n29. C++ Program to Display Prime Numbers Between Two Intervals')

Fragment(uuid='NORMALIZED-001899',
         path='/README.md',
         lineno=77,
         depth=11,
         type='documentation',
         name='',
         text='\n30. C++ Program to Check Armstrong Number')

Fragment(uuid='NORMALIZED-001900',
         path='/README.md',
         lineno=78,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '31. C++ Program to Display Armstrong Number Between Two '
              'Intervals')

Fragment(uuid='NORMALIZED-001901',
         path='/README.md',
         lineno=79,
         depth=11,
         type='documentation',
         name='',
         text='\n32. C++ Program to Display Factors of a Number')

Fragment(uuid='NORMALIZED-001902',
         path='/README.md',
         lineno=80,
         depth=11,
         type='documentation',
         name='',
         text='\n33. C++ Programming Code To Create Pyramid and Structure')

Fragment(uuid='NORMALIZED-001903',
         path='/README.md',
         lineno=81,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '34. C++ Program to Make a Simple Calculator Using switch...case')

Fragment(uuid='NORMALIZED-001904',
         path='/README.md',
         lineno=82,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '35. C++ Program to Display Prime Numbers Between Intervals '
              'Using Function')

Fragment(uuid='NORMALIZED-001905',
         path='/README.md',
         lineno=83,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '36. C++ Program to Check Prime or Armstrong Number Using '
              'User-defined Function')

Fragment(uuid='NORMALIZED-001906',
         path='/README.md',
         lineno=84,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '37. C++ Program to Check Whether a Number can be Expressed as '
              'Sum of Two Prime Numbers')

Fragment(uuid='NORMALIZED-001907',
         path='/README.md',
         lineno=85,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '38. C++ Program to Find the Sum of Natural Numbers using '
              'Recursion')

Fragment(uuid='NORMALIZED-001908',
         path='/README.md',
         lineno=86,
         depth=11,
         type='documentation',
         name='',
         text='\n39. C++ Program to Find Factorial of a Number Using Recursion')

Fragment(uuid='NORMALIZED-001909',
         path='/README.md',
         lineno=87,
         depth=11,
         type='documentation',
         name='',
         text='\n40. C++ Program to Find G.C.D Using Recursion')

Fragment(uuid='NORMALIZED-001910',
         path='/README.md',
         lineno=88,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '41. C++ Program to Convert Binary Number to Decimal and '
              'vice-versa')

Fragment(uuid='NORMALIZED-001911',
         path='/README.md',
         lineno=89,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '42. C++ Program to Convert Octal Number to Decimal and '
              'vice-versa')

Fragment(uuid='NORMALIZED-001912',
         path='/README.md',
         lineno=90,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '43. C++ Program to Convert Binary Number to Octal and vice-versa')

Fragment(uuid='NORMALIZED-001913',
         path='/README.md',
         lineno=91,
         depth=11,
         type='documentation',
         name='',
         text='\n44. C++ Program to Reverse a Sentence Using Recursion')

Fragment(uuid='NORMALIZED-001914',
         path='/README.md',
         lineno=92,
         depth=11,
         type='documentation',
         name='',
         text='\n45. C++ Program to calculate the power using recursion')

Fragment(uuid='NORMALIZED-001915',
         path='/README.md',
         lineno=93,
         depth=11,
         type='documentation',
         name='',
         text='\n46. C++ Program to Calculate Average Using Arrays')

Fragment(uuid='NORMALIZED-001916',
         path='/README.md',
         lineno=94,
         depth=11,
         type='documentation',
         name='',
         text='\n47. C++ Program to Find Largest Element of an Array')

Fragment(uuid='NORMALIZED-001917',
         path='/README.md',
         lineno=95,
         depth=11,
         type='documentation',
         name='',
         text='\n48. C++ Program to Calculate Standard Deviation')

Fragment(uuid='NORMALIZED-001918',
         path='/README.md',
         lineno=96,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '49. C++ Program to Add Two Matrix Using Multi-dimensional Arrays')

Fragment(uuid='NORMALIZED-001919',
         path='/README.md',
         lineno=97,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '50. C++ Program to Multiply to Matrix Using Multi-dimensional '
              'Arrays')

Fragment(uuid='NORMALIZED-001920',
         path='/README.md',
         lineno=98,
         depth=11,
         type='documentation',
         name='',
         text='\n51. C++ Program to Find Transpose of a Matrix')

Fragment(uuid='NORMALIZED-001921',
         path='/README.md',
         lineno=99,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '52. C++ Program to Multiply two Matrices by Passing Matrix to a '
              'Function')

Fragment(uuid='NORMALIZED-001922',
         path='/README.md',
         lineno=100,
         depth=11,
         type='documentation',
         name='',
         text='\n53. C++ Program to Access Elements of an Array Using Pointer')

Fragment(uuid='NORMALIZED-001923',
         path='/README.md',
         lineno=101,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '54. C++ Program Swap Numbers in Cyclic Order Using Call by '
              'Reference')

Fragment(uuid='NORMALIZED-001924',
         path='/README.md',
         lineno=102,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '55. C++ Program to Find Largest Number Using Dynamic Memory '
              'Allocation')

Fragment(uuid='NORMALIZED-001925',
         path='/README.md',
         lineno=103,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '56. C++ Program to Find the Frequency of Characters in a String')

Fragment(uuid='NORMALIZED-001926',
         path='/README.md',
         lineno=104,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '57. C++ Program to count the number of vowels, consonants and '
              'so on')

Fragment(uuid='NORMALIZED-001927',
         path='/README.md',
         lineno=105,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '58. C++ Program to Remove all Characters in a String Except '
              'Alphabet')

Fragment(uuid='NORMALIZED-001928',
         path='/README.md',
         lineno=106,
         depth=11,
         type='documentation',
         name='',
         text='\n59. C++ Program to Find the Length of a String')

Fragment(uuid='NORMALIZED-001929',
         path='/README.md',
         lineno=107,
         depth=11,
         type='documentation',
         name='',
         text='\n60. C++ Program to Concatenate Two Strings')

Fragment(uuid='NORMALIZED-001930',
         path='/README.md',
         lineno=108,
         depth=11,
         type='documentation',
         name='',
         text='\n61. C++ Program to Copy String Without Using strcpy()')

Fragment(uuid='NORMALIZED-001931',
         path='/README.md',
         lineno=109,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '62. C++ Program to Sort Elements in Lexicographical Order '
              '(Dictionary Order)')

Fragment(uuid='NORMALIZED-001932',
         path='/README.md',
         lineno=110,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '63. C++ Program to Store Information(name, roll and marks) of a '
              'Student Using Structure')

Fragment(uuid='NORMALIZED-001933',
         path='/README.md',
         lineno=111,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '64. C++ Program to Add Two Distances (in inch-feet) System '
              'Using Structures')

Fragment(uuid='NORMALIZED-001934',
         path='/README.md',
         lineno=112,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '65. C++ Program to Add Two Complex Numbers by Passing Structure '
              'to a Function')

Fragment(uuid='NORMALIZED-001935',
         path='/README.md',
         lineno=113,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '66. C++ Program to Calculate Difference Between Two Time Periods')

Fragment(uuid='NORMALIZED-001936',
         path='/README.md',
         lineno=114,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '67. C++ Program to Store Information of Students Using Structure')

Fragment(uuid='NORMALIZED-001937',
         path='/README.md',
         lineno=115,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '68. C++ Program to Store Information Using Structures with '
              'Dynamically Memory Allocation')

Fragment(uuid='NORMALIZED-001938',
         path='/README.md',
         lineno=116,
         depth=11,
         type='documentation',
         name='',
         text='\n69. C++ Program to Write a Sentence to a File')

Fragment(uuid='NORMALIZED-001939',
         path='/README.md',
         lineno=117,
         depth=11,
         type='documentation',
         name='',
         text='\n70. C++ Program to Read a Line From a File and Display it')

Fragment(uuid='NORMALIZED-001940',
         path='/README.md',
         lineno=118,
         depth=11,
         type='documentation',
         name='',
         text='\n71. C++ Program to Display its own Source Code as Output')

Fragment(uuid='NORMALIZED-001941',
         path='/README.md',
         lineno=119,
         depth=11,
         type='documentation',
         name='',
         text='\n72. C++ Programming Code To Create Pyramid and Pattern')

Fragment(uuid='NORMALIZED-001942',
         path='/README.md',
         lineno=120,
         depth=11,
         type='documentation',
         name='',
         text='\n```')

Fragment(uuid='NORMALIZED-001943',
         path='/README.md',
         lineno=121,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001944',
         path='/README.md',
         lineno=122,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001945',
         path='/README.md',
         lineno=123,
         depth=6,
         type='documentation',
         name='',
         text='## Projects Ideas\n```')

Fragment(uuid='NORMALIZED-001946',
         path='/README.md',
         lineno=124,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '1. Banking system with all banking facilities like – deposit, '
              'withdrawal, foreign exchange to any currency, availability of '
              'loans for purchasing vehicles, apartments, houses, setting up '
              'business, education loan, management of ATMs and all other '
              'features.')

Fragment(uuid='NORMALIZED-001947',
         path='/README.md',
         lineno=125,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '2. Airline flight reservation system (online booking of tickets '
              'in different flights for different destinations all over the '
              'world, cancellation of tickets, clear display of cancellation '
              'amount, refund of amount after cancellation, showing  '
              'availability of all flights, showing flights timings for all 7 '
              'days of a week, seats availability, seat selection for '
              'travelers by giving the complete layout of the seating '
              'arrangement inside the flights, food '
              'availability/non-availability inside the flights, change of '
              'travel dates and amount charged.)')

Fragment(uuid='NORMALIZED-001948',
         path='/README.md',
         lineno=126,
         depth=11,
         type='documentation',
         name='',
         text='\n3. Taxi/cab sharing')

Fragment(uuid='NORMALIZED-001949',
         path='/README.md',
         lineno=127,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '4. University education portal (providing all information about '
              'under-graduate, post graduate and doctoral programs offered, '
              'facilities available, location & map, fee structure in all the '
              'universities)')

Fragment(uuid='NORMALIZED-001950',
         path='/README.md',
         lineno=128,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '5. Online exam management system (with total security of '
              'identifying the students during exam, monitoring the students’ '
              'activities during the exam, selection of different questions '
              'for each student, development of a large question bank '
              'containing hundreds of questions in each subject considering '
              'all courses taught at the university)')

Fragment(uuid='NORMALIZED-001951',
         path='/README.md',
         lineno=129,
         depth=11,
         type='documentation',
         name='',
         text='\n6. Library management system')

Fragment(uuid='NORMALIZED-001952',
         path='/README.md',
         lineno=130,
         depth=11,
         type='documentation',
         name='',
         text='\n7. E-content management system ')

Fragment(uuid='NORMALIZED-001953',
         path='/README.md',
         lineno=131,
         depth=11,
         type='documentation',
         name='',
         text='\n8. Plagiarism checker & file management system')

Fragment(uuid='NORMALIZED-001954',
         path='/README.md',
         lineno=132,
         depth=11,
         type='documentation',
         name='',
         text='\n9. Hotel reservation & management portal')

Fragment(uuid='NORMALIZED-001955',
         path='/README.md',
         lineno=133,
         depth=11,
         type='documentation',
         name='',
         text='\n10. Restaurant management')

Fragment(uuid='NORMALIZED-001956',
         path='/README.md',
         lineno=134,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '11. Healthcare consulting system (doctors with different '
              'specializations for consultation, hospitals with all facilities '
              'for treating different diseases & abroad - one stop portal for '
              'all consultations and treatments)')

Fragment(uuid='NORMALIZED-001957',
         path='/README.md',
         lineno=135,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '12. Electronic health record management system with builtin '
              'security ')

Fragment(uuid='NORMALIZED-001958',
         path='/README.md',
         lineno=136,
         depth=11,
         type='documentation',
         name='',
         text='\n13. Pharmacy - medical store management ')

Fragment(uuid='NORMALIZED-001959',
         path='/README.md',
         lineno=137,
         depth=11,
         type='documentation',
         name='',
         text='\n14. Blood bank system')

Fragment(uuid='NORMALIZED-001960',
         path='/README.md',
         lineno=138,
         depth=11,
         type='documentation',
         name='',
         text='\n15. Online shopping and delivery system (like amazon)')

Fragment(uuid='NORMALIZED-001961',
         path='/README.md',
         lineno=139,
         depth=11,
         type='documentation',
         name='',
         text='\n16. Online car shopping ')

Fragment(uuid='NORMALIZED-001962',
         path='/README.md',
         lineno=140,
         depth=11,
         type='documentation',
         name='',
         text='\n17. Tourism portal')

Fragment(uuid='NORMALIZED-001963',
         path='/README.md',
         lineno=141,
         depth=11,
         type='documentation',
         name='',
         text='\n18. World tourism portal')

Fragment(uuid='NORMALIZED-001964',
         path='/README.md',
         lineno=142,
         depth=11,
         type='documentation',
         name='',
         text='\n19. Higher education abroad portal')

Fragment(uuid='NORMALIZED-001965',
         path='/README.md',
         lineno=143,
         depth=11,
         type='documentation',
         name='',
         text='\n20. Job search/recruitment portal')

Fragment(uuid='NORMALIZED-001966',
         path='/README.md',
         lineno=144,
         depth=11,
         type='documentation',
         name='',
         text='\n21. Company resource management system')

Fragment(uuid='NORMALIZED-001967',
         path='/README.md',
         lineno=145,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '22. Attendance monitoring system with fingerprints verification')

Fragment(uuid='NORMALIZED-001968',
         path='/README.md',
         lineno=146,
         depth=11,
         type='documentation',
         name='',
         text='\n23. Face recognition - based attendance checking system')

Fragment(uuid='NORMALIZED-001969',
         path='/README.md',
         lineno=147,
         depth=11,
         type='documentation',
         name='',
         text='\n24. Aircraft communication and monitoring system')

Fragment(uuid='NORMALIZED-001970',
         path='/README.md',
         lineno=148,
         depth=11,
         type='documentation',
         name='',
         text='\n25. Ticket booking management system for concert ceremonies')

Fragment(uuid='NORMALIZED-001971',
         path='/README.md',
         lineno=149,
         depth=11,
         type='documentation',
         name='',
         text='\n26. All store stock management (inventory control)')

Fragment(uuid='NORMALIZED-001972',
         path='/README.md',
         lineno=150,
         depth=11,
         type='documentation',
         name='',
         text='\n27. Multiplayer gaming applications')

Fragment(uuid='NORMALIZED-001973',
         path='/README.md',
         lineno=151,
         depth=11,
         type='documentation',
         name='',
         text='\n28. City traffic monitoring and control system')

Fragment(uuid='NORMALIZED-001974',
         path='/README.md',
         lineno=152,
         depth=11,
         type='documentation',
         name='',
         text='\n29. Police traffic violation reporting & control system')

Fragment(uuid='NORMALIZED-001975',
         path='/README.md',
         lineno=153,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '30. The marriage function hall booking & food/music arrangement '
              'system')

Fragment(uuid='NORMALIZED-001976',
         path='/README.md',
         lineno=154,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '31. Any vehicle (car, bus, heavy vehicles for parties, '
              'functions, family picnics, long distance travel) booking portal')

Fragment(uuid='NORMALIZED-001977',
         path='/README.md',
         lineno=155,
         depth=11,
         type='documentation',
         name='',
         text='\n32. Teacher assisted program writing environment for students')

Fragment(uuid='NORMALIZED-001978',
         path='/README.md',
         lineno=156,
         depth=11,
         type='documentation',
         name='',
         text='\n33. Doctors reservation system for patients')

Fragment(uuid='NORMALIZED-001979',
         path='/README.md',
         lineno=157,
         depth=11,
         type='documentation',
         name='',
         text='\n34. Bus reservation & tracking system')

Fragment(uuid='NORMALIZED-001980',
         path='/README.md',
         lineno=158,
         depth=11,
         type='documentation',
         name='',
         text='\n35. Railway booking and train tracking system')

Fragment(uuid='NORMALIZED-001981',
         path='/README.md',
         lineno=159,
         depth=11,
         type='documentation',
         name='',
         text='\n36. Warehouse management system')

Fragment(uuid='NORMALIZED-001982',
         path='/README.md',
         lineno=160,
         depth=11,
         type='documentation',
         name='',
         text='\n37. Courier tracking, cargo and freight transportation')

Fragment(uuid='NORMALIZED-001983',
         path='/README.md',
         lineno=161,
         depth=11,
         type='documentation',
         name='',
         text='\n38. Online code testing system')

Fragment(uuid='NORMALIZED-001984',
         path='/README.md',
         lineno=162,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '39. Online quiz system (with total security of identifying the '
              'students during the quiz, monitoring the students’ activities '
              'during the quiz, selection of different quiz questions for each '
              'student, development of a large quiz question bank containing '
              'hundreds of quiz questions in each subject considering all '
              'courses taught at the university)')

Fragment(uuid='NORMALIZED-001985',
         path='/README.md',
         lineno=163,
         depth=11,
         type='documentation',
         name='',
         text='\n40. Land/house/apartment rental & purchase portal')

Fragment(uuid='NORMALIZED-001986',
         path='/README.md',
         lineno=164,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '41. Housecleaning, plumbing, electricity service & maintenance '
              'system')

Fragment(uuid='NORMALIZED-001987',
         path='/README.md',
         lineno=165,
         depth=11,
         type='documentation',
         name='',
         text='\n42. Human organ transplantation management system')

Fragment(uuid='NORMALIZED-001988',
         path='/README.md',
         lineno=166,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '43. Covid-19 tracking, testing, treatment & hospital management '
              'system')

Fragment(uuid='NORMALIZED-001989',
         path='/README.md',
         lineno=167,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '44. Cryptocurrency trading portal (exchange) allowing trading '
              'of all crypto coins using security, confidentiality and '
              'authentication')

Fragment(uuid='NORMALIZED-001990',
         path='/README.md',
         lineno=168,
         depth=11,
         type='documentation',
         name='',
         text='\n45. Parking management system')

Fragment(uuid='NORMALIZED-001991',
         path='/README.md',
         lineno=169,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '46. Online food delivery system (linked to all restaurants in '
              'different districts in different regions in some country)')

Fragment(uuid='NORMALIZED-001992',
         path='/README.md',
         lineno=170,
         depth=11,
         type='documentation',
         name='',
         text='\n```')

Fragment(uuid='NORMALIZED-001993',
         path='/README.md',
         lineno=171,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001994',
         path='/Snake Game/snake-game.cpp',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /Snake Game/snake-game.cpp\n'
              '  Enums: Direction\n'
              '  Functions: Init, Input, Logic, Map, incorrectChoice, '
              'instructions, lostgame, main, record, startGame, welcome, win\n'
              '  Variable declarations: dir, fx, fy, game, hConsole, height, '
              'nt, score, tx, ty, width, x, y\n')

Fragment(uuid='NORMALIZED-001995',
         path='/Snake Game/snake-game.cpp',
         lineno=5,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-001996',
         path='/Snake Game/snake-game.cpp',
         lineno=7,
         depth=2,
         type='var_decl',
         name='hConsole',
         text='HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);\n')

Fragment(uuid='NORMALIZED-001997',
         path='/Snake Game/snake-game.cpp',
         lineno=9,
         depth=2,
         type='function_decl',
         name='welcome',
         text='')

Fragment(uuid='NORMALIZED-001998',
         path='/Snake Game/snake-game.cpp',
         lineno=10,
         depth=2,
         type='function_decl',
         name='instructions',
         text='')

Fragment(uuid='NORMALIZED-001999',
         path='/Snake Game/snake-game.cpp',
         lineno=11,
         depth=2,
         type='function_decl',
         name='record',
         text='')

Fragment(uuid='NORMALIZED-002000',
         path='/Snake Game/snake-game.cpp',
         lineno=12,
         depth=2,
         type='function_decl',
         name='incorrectChoice',
         text='')

Fragment(uuid='NORMALIZED-002001',
         path='/Snake Game/snake-game.cpp',
         lineno=13,
         depth=2,
         type='function_decl',
         name='lostgame',
         text='')

Fragment(uuid='NORMALIZED-002002',
         path='/Snake Game/snake-game.cpp',
         lineno=14,
         depth=2,
         type='function_decl',
         name='win',
         text='')

Fragment(uuid='NORMALIZED-002003',
         path='/Snake Game/snake-game.cpp',
         lineno=19,
         depth=2,
         type='var_decl',
         name='game',
         text='bool game = false;\n')

Fragment(uuid='NORMALIZED-002004',
         path='/Snake Game/snake-game.cpp',
         lineno=20,
         depth=2,
         type='var_decl',
         name='width',
         text='const int width = 50;\n')

Fragment(uuid='NORMALIZED-002005',
         path='/Snake Game/snake-game.cpp',
         lineno=21,
         depth=2,
         type='var_decl',
         name='height',
         text='const int height = 20;\n')

Fragment(uuid='NORMALIZED-002006',
         path='/Snake Game/snake-game.cpp',
         lineno=24,
         depth=2,
         type='var_decl',
         name='x',
         text='int x, y, fx, fy, score;\n')

Fragment(uuid='NORMALIZED-002007',
         path='/Snake Game/snake-game.cpp',
         lineno=24,
         depth=2,
         type='var_decl',
         name='y',
         text='int x, y, fx, fy, score;\n')

Fragment(uuid='NORMALIZED-002008',
         path='/Snake Game/snake-game.cpp',
         lineno=24,
         depth=2,
         type='var_decl',
         name='fx',
         text='int x, y, fx, fy, score;\n')

Fragment(uuid='NORMALIZED-002009',
         path='/Snake Game/snake-game.cpp',
         lineno=24,
         depth=2,
         type='var_decl',
         name='fy',
         text='int x, y, fx, fy, score;\n')

Fragment(uuid='NORMALIZED-002010',
         path='/Snake Game/snake-game.cpp',
         lineno=24,
         depth=2,
         type='var_decl',
         name='score',
         text='int x, y, fx, fy, score;\n')

Fragment(uuid='NORMALIZED-002011',
         path='/Snake Game/snake-game.cpp',
         lineno=27,
         depth=2,
         type='var_decl',
         name='tx',
         text='int tx[100], ty[100];\n')

Fragment(uuid='NORMALIZED-002012',
         path='/Snake Game/snake-game.cpp',
         lineno=27,
         depth=2,
         type='var_decl',
         name='ty',
         text='int tx[100], ty[100];\n')

Fragment(uuid='NORMALIZED-002013',
         path='/Snake Game/snake-game.cpp',
         lineno=28,
         depth=2,
         type='var_decl',
         name='nt',
         text='int nt;\n')

Fragment(uuid='NORMALIZED-002014',
         path='/Snake Game/snake-game.cpp',
         lineno=31,
         depth=2,
         type='enum_decl',
         name='Direction',
         text='enum Direction { STOP = 0, LEFT, RIGHT, UP, DOWN };\n')

Fragment(uuid='NORMALIZED-002015',
         path='/Snake Game/snake-game.cpp',
         lineno=32,
         depth=2,
         type='var_decl',
         name='dir',
         text='Direction dir;\n')

Fragment(uuid='NORMALIZED-002016',
         path='/Snake Game/snake-game.cpp',
         lineno=37,
         depth=2,
         type='function_decl',
         name='Init',
         text='void Init() {\n'
              '\tgame = true;\n'
              '\tdir = STOP;\n'
              '\tx = width / 2;\n'
              '\ty = height / 2;\n'
              '\tfx = rand() % width;\n'
              '\tfy = rand() % height;\n'
              '\tscore = 0;\n'
              '\ttx[100] = {};\n'
              '\tty[100] = {};\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-002017',
         path='/Snake Game/snake-game.cpp',
         lineno=51,
         depth=2,
         type='function_decl',
         name='Map',
         text='void Map() {\n'
              '\tsystem("cls");\n'
              '\tSetConsoleTextAttribute(hConsole, 180);\n'
              '\tfor (int i = 0; i < width + 2; i++)\n'
              '\t\tcout << "#";\n'
              '\tcout << endl;\n'
              '\n'
              '\tfor (int i = 0; i < height; i++)\n'
              '\t{\n'
              '\t\tfor (int j = 0; j < width; j++)\n'
              '\t\t{\n'
              '\t\t\tif (j == 0)\n'
              '\t\t\t\tcout << "#";\n'
              '\t\t\tif (i == y && j == x)\n'
              '\t\t\t\tcout << "O";\n'
              '\t\t\telse if (i == fy && j == fx)\n'
              '\t\t\t\tcout << "X";\n'
              '\t\t\telse\n'
              '\t\t\t{\n'
              '\t\t\t\tbool print = false;\n'
              '\t\t\t\tfor (int k = 0; k < nt; k++) {\n'
              '\t\t\t\t\tif (tx[k] == j && ty[k] == i)\n'
              '\t\t\t\t\t{\n'
              '\t\t\t\t\t\tcout << "o";\n'
              '\t\t\t\t\t\tprint = true;\n'
              '\t\t\t\t\t}\n'
              '\n'
              '\t\t\t\t}\n'
              '\t\t\t\tif (!print)\n'
              '\t\t\t\t\tcout << " ";\n'
              '\t\t\t}\n'
              '\n'
              '\t\t\tif (j == width - 1)\n'
              '\t\t\t\tcout << "#";\n'
              '\t\t}\n'
              '\t\tcout << endl;\n'
              '\t}\n'
              '\n'
              '\tfor (int i = 0; i < width + 2; i++)\n'
              '\t\tcout << "#";\n'
              '\tcout << endl;\n'
              '\tcout << "Score is " << score << endl;\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-002018',
         path='/Snake Game/snake-game.cpp',
         lineno=96,
         depth=2,
         type='function_decl',
         name='Input',
         text='void Input() {\n'
              '\tif (_kbhit())\n'
              '\t{\n'
              '\t\tswitch (_getch())\n'
              '\t\t{\n'
              "\t\tcase 'a':\n"
              '\t\t\tdir = LEFT;\n'
              '\t\t\tbreak;\n'
              "\t\tcase 'd':\n"
              '\t\t\tdir = RIGHT;\n'
              '\t\t\tbreak;\n'
              "\t\tcase 'w':\n"
              '\t\t\tdir = UP;\n'
              '\t\t\tbreak;\n'
              "\t\tcase 's':\n"
              '\t\t\tdir = DOWN;\n'
              '\t\t\tbreak;\n'
              "\t\tcase 'x':\n"
              '\t\t\tgame = false;\n'
              '\t\t\tbreak;\n'
              "\t\tcase 'r':\n"
              '\t\t\tdir = STOP;\n'
              '\t\t\twelcome();\n'
              '\t\tdefault:\n'
              '\t\t\tbreak;\n'
              '\t}\n'
              '\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-002019',
         path='/Snake Game/snake-game.cpp',
         lineno=126,
         depth=2,
         type='function_decl',
         name='Logic',
         text='void Logic() {\n'
              '\n'
              '\tint prevx = tx[0];\n'
              '\tint prevy = ty[0];\n'
              '\tint prev2x, prev2y;\n'
              '\ttx[0] = x;\n'
              '\tty[0] = y;\n'
              '\tfor (int i = 1; i < nt; i++) {\n'
              '\t\tprev2x = tx[i];\n'
              '\t\tprev2y = ty[i];\n'
              '\t\ttx[i] = prevx;\n'
              '\t\tty[i] = prevy;\n'
              '\t\tprevx = prev2x;\n'
              '\t\tprevy = prev2y;\n'
              '\t}\n'
              '\n'
              '\n'
              '\n'
              '\tswitch (dir)\n'
              '\t{\n'
              '\tcase UP:\n'
              '\t\ty--;\n'
              '\t\tbreak;\n'
              '\tcase DOWN:\n'
              '\t\ty++;\n'
              '\t\tbreak;\n'
              '\tcase LEFT:\n'
              '\t\tx--;\n'
              '\t\tbreak;\n'
              '\tcase RIGHT:\n'
              '\t\tx++;\n'
              '\t\tbreak;\n'
              '\n'
              '\tdefault:\n'
              '\t\tbreak;\n'
              '\t}\n'
              '\tif (x >= width) x = 0; else if (x < 0) x = width - 1;\n'
              '\tif (y >= height) y = 0; else if (y < 0) y = height - 1;\n'
              '\n'
              '\tfor (int i = 0; i < nt; i++) {\n'
              '\t\tif (tx[i] == x && ty[i] == y) {\n'
              '\t\t\tlostgame();\n'
              '\t\t}\n'
              '\n'
              '\t}\n'
              '\n'
              '\tif (x == fx && y == fy) {\n'
              '\t\tscore += 1;\n'
              '\t\tnt++;\n'
              '\t\tfx = rand() % width;\n'
              '\t\tfy = rand() % height;\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-002020',
         path='/Snake Game/snake-game.cpp',
         lineno=180,
         depth=2,
         type='function_decl',
         name='win',
         text='void win() {\n'
              '\tif (score == 100) {\n'
              '\t\tsystem("cls");\n'
              '\t\tcout << endl << endl << endl << endl << endl;\n'
              '\t\tcout << "                               ";\n'
              '\t\tcout << "Congratulations you won the game " << endl;\n'
              '\t\tcout << endl;\n'
              '\t\tcout << "                               ";\n'
              '\t\tcout << "To go back please enter any key" << endl;\n'
              '\t\tchar back;\n'
              '\t\tcin >> back;\n'
              '\t\tif (back) {\n'
              '\t\t\twelcome();\n'
              '\t\t\tgame = false;\n'
              '\t\t}\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-002021',
         path='/Snake Game/snake-game.cpp',
         lineno=198,
         depth=2,
         type='function_decl',
         name='startGame',
         text='void startGame() {\n'
              '\tInit();\n'
              '\twhile (game) {\n'
              '\t\tMap();\n'
              '\t\tInput();\n'
              '\t\tLogic();\n'
              '\t\twin();\n'
              '\t\tSleep(10);\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-002022',
         path='/Snake Game/snake-game.cpp',
         lineno=209,
         depth=2,
         type='function_decl',
         name='welcome',
         text='void welcome() {\n'
              '\tsystem("cls");\n'
              '\tcout << endl << endl << endl << endl << endl << endl << '
              'endl;\n'
              '\tcout << "                               ";\n'
              '\tcout << "Welcome to the snake game!" << endl;\n'
              '\tcout << "                               " << "1. If you want '
              'to start game press 1" << endl;\n'
              '\tcout << "                               " << "2. To see '
              'instruction press 2" << endl;\n'
              '\tcout << "                               " << "3. To see '
              'record press 3" << endl;\n'
              '\tchar choice;\n'
              '\tcin >> choice;\n'
              '\tswitch (choice) {\n'
              "\tcase '1':\n"
              '\t\tsystem("cls");\n'
              '\t\tstartGame();\n'
              "\tcase '2':\n"
              '\t\tinstructions();\n'
              "\tcase '3':\n"
              '\t\trecord();\n'
              '\tdefault:\n'
              '\t\tincorrectChoice();\n'
              '\t}\n'
              '}\n')

Fragment(uuid='NORMALIZED-002023',
         path='/Snake Game/snake-game.cpp',
         lineno=232,
         depth=2,
         type='function_decl',
         name='instructions',
         text='void instructions() {\n'
              '\tsystem("cls");\n'
              '\tcout << endl << endl << endl << endl << endl << endl << '
              'endl;\n'
              '\tcout << "                               ";\n'
              '\tcout << "Welcome to the snake game!" << endl;\n'
              '\tcout << endl;\n'
              '\tcout << "                               " << "Here are '
              'instructions" << endl;\n'
              '\tcout << "                               " << "1. If you reach '
              'current record you won the game" << endl;\n'
              '\tcout << endl;\n'
              '\tcout << "                               " << "2. When you '
              'grow up in size you cannot touch yourself, " << endl << '
              '"                               " << "if you touch you will '
              'lose the game" << endl;\n'
              '\tcout << endl;\n'
              '\tcout << "                               " << "3. When you '
              'grow up in size you cannot touch yourself," << endl << '
              '"                               " << "if you move backwards '
              'when you body is backward" << endl << '
              '"                               " << "you automatically lose '
              'the game" << endl;\n'
              '\tcout << endl;\n'
              '\tchar back;\n'
              '\tcout << "                               " << "To go back '
              'press any key" << endl;\n'
              '\tcin >> back;\n'
              '\tif (back) welcome();\n'
              '}\n')

Fragment(uuid='NORMALIZED-002024',
         path='/Snake Game/snake-game.cpp',
         lineno=251,
         depth=2,
         type='function_decl',
         name='record',
         text='void record() {\n'
              '\tsystem("cls");\n'
              '\tcout << endl << endl << endl << endl << endl << endl << '
              'endl;\n'
              '\tcout << "                               ";\n'
              '\tcout << "Welcome to the snake game!" << endl;\n'
              '\tcout << endl;\n'
              '\tcout << "                               " << "Current record '
              'is 100" << endl;\n'
              '\tcout << endl;\n'
              '\tcout << "                               " << "If you reach '
              '100 you will win the game" << endl;\n'
              '\tchar back;\n'
              '\tcout << endl;\n'
              '\tcout << "                               " << "To go back '
              'press any key" << endl;\n'
              '\tcin >> back;\n'
              '\tif (back) welcome();\n'
              '}\n')

Fragment(uuid='NORMALIZED-002025',
         path='/Snake Game/snake-game.cpp',
         lineno=267,
         depth=2,
         type='function_decl',
         name='incorrectChoice',
         text='void incorrectChoice() {\n'
              '\tcout << "Please try again next time" << endl;\n'
              '\tcout << endl;\n'
              '\tchar back;\n'
              '\tcout << "To go back press any key" << endl;\n'
              '\tcin >> back;\n'
              '\tif (back) welcome();\n'
              '}\n')

Fragment(uuid='NORMALIZED-002026',
         path='/Snake Game/snake-game.cpp',
         lineno=275,
         depth=2,
         type='function_decl',
         name='lostgame',
         text='void lostgame() {\n'
              '\tgame = false;\n'
              '\tsystem("cls");\n'
              '\tcout << endl << endl << endl << endl << endl << endl << '
              'endl;\n'
              '\tcout << "                               ";\n'
              '\tcout << "Sorry you lost the game " << endl;\n'
              '\tcout << "                               " << "Your score was '
              '" << score << endl;\n'
              '\tcout << "                               ";\n'
              '\tcout << "To to back press any button" << endl;\n'
              '\tchar back;\n'
              '\tcin >> back;\n'
              '\tif (back) {\n'
              '\t\tgame = false;\n'
              '\t\twelcome();\n'
              '\t}\n'
              '\n'
              '}\n')

Fragment(uuid='NORMALIZED-002027',
         path='/Snake Game/snake-game.cpp',
         lineno=293,
         depth=2,
         type='function_decl',
         name='main',
         text='int main() {\n'
              '\tSetConsoleTextAttribute(hConsole, 116);\n'
              '\twelcome();\n'
              '\treturn 0;\n'
              '}\n')