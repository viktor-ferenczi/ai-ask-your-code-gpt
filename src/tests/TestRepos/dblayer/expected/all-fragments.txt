Fragment(uuid='11a0204f-0178-460b-b1ce-b9f0724e1b19',
         path='/.gitignore',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='.idea\n'
              '__pycache__\n'
              '*.py[co]\n'
              '*,cover\n'
              '*.coverage\n'
              '*.bak\n'
              '*.log\n'
              '*~\n'
              '\n'
              '# Specific directories and files\n'
              'var\n'
              'var/*\n'
              'lib/build\n'
              'lib/build/*\n'
              'lib/dist\n'
              'lib/dist/*\n'
              'lib/dblayer.egg-info\n'
              'lib/dblayer.egg-info/*\n'
              'etc/config.py\n'
              '\n'
              '# Generated files\n'
              'lib/dblayer/test/abstraction.py\n'
              'lib/dblayer/test/model.gml\n'
              'lib/dblayer/test/inspected_*.py\n')

Fragment(uuid='b8f6d2b0-4927-4778-acaa-5d26639a4382',
         path='/.gitignore',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /.gitignore\n')

Fragment(uuid='1d4b96b4-87b4-4fb7-8bf1-7177383ab772',
         path='/README.md',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# Database Abstraction Layer Generator\n'
              '\n'
              'Database server support: PostgreSQL\n'
              '\n'
              '# Installation\n'
              '\n'
              '* Using pip: ```pip install dblayer```\n'
              '* From source: ```python setup.py install```\n'
              '\n'
              '# How it works\n'
              '\n')

Fragment(uuid='5d35e9e1-3114-437d-9d6e-c58f5b83231b',
         path='/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Database Abstraction Layer Generator\n'
              '# Installation\n'
              '# How it works\n'
              '## Abstraction layer\n'
              '## Lightweight usage\n'
              '## Features\n'
              '# Remarks\n'
              '## Performance\n'
              '## Limitations\n')

Fragment(uuid='36950d5a-1366-4ff7-b716-5e3227d94c9a',
         path='/README.md',
         lineno=12,
         depth=1,
         type='documentation',
         name='',
         text='## Abstraction layer\n'
              '\n'
              'Generates source code of a module implementing row classes with '
              'slots and a \n'
              'single database abstraction layer class. These classes can be '
              'used as is or \n'
              'extended by inheritance to fit your specific needs. It is also '
              'possible to \n'
              'extend the row classes to provide properties or helper methods. '
              'The generated \n'
              'code provides Python IDEs as much information as possible to '
              'make code \n'
              'completion useful. \n'
              '\n')

Fragment(uuid='2d3df487-a47c-428c-84d4-0b605c2fe991',
         path='/README.md',
         lineno=21,
         depth=1,
         type='documentation',
         name='',
         text='## Lightweight usage\n'
              '\n'
              'The generated abstraction layer works like an ORM (Object '
              'Relational Mapper), \n'
              'but without a direct mapping of row instances to the '
              'corresponding database \n'
              'rows. It makes this approach more lightweight than a full-blown '
              'ORM. Database \n'
              'sessions and transactions must be initiated explicitly, but '
              'there are context \n'
              'managers defined to simplify your code.\n'
              '\n')

Fragment(uuid='3ec1cdce-6a88-4c27-a9f0-b4ca00fb4005',
         path='/README.md',
         lineno=29,
         depth=10,
         type='documentation',
         name='',
         text='## Features\n')

Fragment(uuid='cf9727fc-d9a6-4db3-a406-4523821d7b4c',
         path='/README.md',
         lineno=30,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Tables, indexes and constraints are defined in a very clean way '
              'by just \n'
              'writing Python classes. Everything is defined explicitly, no '
              'automatic \n'
              'discovery of classes. Queries on multiple tables (joins) can '
              'also be defined \n'
              'in a clean way. Table aliasing is automatic and natural, since '
              'all the \n'
              'participating tables must be given an unique name in order to '
              'build the query \n'
              'definition. Highly complex queries can be build up gradually by '
              'simple Python \n'
              'class inheritance, which helps reducing code redundancy in real '
              'world use \n'
              'cases.\n')

Fragment(uuid='f7cc7ebd-dd02-4856-8fac-38b37e312e4d',
         path='/README.md',
         lineno=39,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Constraints are enforced on the database server, not by Python '
              'code. It is \n'
              'also possible to add record finalization and validation code in '
              'Python if \n'
              'needed. There is support for defining efficient full text '
              'search indexes in a \n'
              'very simple way, so searching rows based on their textual '
              'contents is easy to \n'
              'implement.\n')

Fragment(uuid='dd085a86-be36-4e30-a0c2-4adca6bffaf7',
         path='/README.md',
         lineno=45,
         depth=10,
         type='documentation',
         name='',
         text='\n# Remarks\n\n')

Fragment(uuid='99ec59d3-06c6-4c1f-826a-0ef16481a3ae',
         path='/README.md',
         lineno=48,
         depth=1,
         type='documentation',
         name='',
         text='## Performance\n'
              '\n'
              'Most of the SQL is generated at compile time to reduce the '
              'runtime overhead as \n'
              'much as possible. Despite this it is possible to add runtime '
              'conditions, even \n'
              'building up complex conditions at runtime, but it will not slow '
              'down the \n'
              'simple use cases. Literal values are escaped automatically. The '
              'abstraction \n'
              'layer always returns unicode objects. You can pass str objects '
              'as literal \n'
              'values, the default encoding is UTF-8 in this case.\n'
              '\n')

Fragment(uuid='fb7fef20-ea38-4740-a7a1-13e84ef14355',
         path='/README.md',
         lineno=57,
         depth=1,
         type='documentation',
         name='',
         text='## Limitations\n'
              '\n'
              'The only supported database server is PostgreSQL via the '
              'psycopg2 \n'
              'extension. The generated code works with gevent-psycopg2 as '
              'well. \n'
              '\n'
              'No support for defining database views, tablespaces and other \n'
              'database servers yet. \n'
              '\n'
              'No support for inspecting databases (generating the classes '
              'defining and \n'
              'existing database) yet. \n'
              '\n'
              'The unit test coverage is still not 100%.\n')

Fragment(uuid='c42632e3-942c-4265-9684-fc639343fbee',
         path='/lib/MANIFEST.in',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='recursive-include dblayer/generator/template *\n')

Fragment(uuid='79625eae-0b25-4a89-82a3-46a154282c09',
         path='/lib/MANIFEST.in',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /lib/MANIFEST.in\n')

Fragment(uuid='3ec235ae-f645-408d-9d1f-7be49cfe34ee',
         path='/lib/PKG-INFO',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='Metadata-Version: 1.1')

Fragment(uuid='a1761598-2441-4436-9cbf-ec5a47a46e9a',
         path='/lib/PKG-INFO',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\nName: dblayer')

Fragment(uuid='696c69a3-1d52-4349-a0cd-b166d7fcfd79',
         path='/lib/PKG-INFO',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /lib/PKG-INFO\n')

Fragment(uuid='9b78c2f4-373b-46cf-afd7-fc0a9bb1a96b',
         path='/lib/PKG-INFO',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\nVersion: 0.7.0')

Fragment(uuid='9cf373fb-1596-4d61-9d1c-5f7adbac93a9',
         path='/lib/PKG-INFO',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\nSummary: Database Abstraction Layer Generator')

Fragment(uuid='ba561ae0-3b1c-4c7f-ac25-782f07b86daa',
         path='/lib/PKG-INFO',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\nHome-page: http://code.google.com/p/dblayer')

Fragment(uuid='0225b738-79e2-4a7a-b7eb-efb045be6794',
         path='/lib/PKG-INFO',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\nAuthor: Viktor Ferenczi')

Fragment(uuid='d88f81a0-eaa9-435c-815f-1180b02009e7',
         path='/lib/PKG-INFO',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\nAuthor-email: viktor@ferenczi.eu')

Fragment(uuid='961c013e-3de7-4dcd-a23b-62efdeca2690',
         path='/lib/PKG-INFO',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\nLicense: MIT')

Fragment(uuid='b544d203-b89e-4c5b-b9f4-1403113352eb',
         path='/lib/PKG-INFO',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Description: Generates database abstraction layer in Python '
              'based on a')

Fragment(uuid='91476959-6c3b-4bf6-9523-58e5210dc377',
         path='/lib/PKG-INFO',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        readable definition written as Python classes. Supports')

Fragment(uuid='dd6b7bda-5964-40be-874e-f6bbe6222f6b',
         path='/lib/PKG-INFO',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n        defining of tables, basic column types, indexes,')

Fragment(uuid='1db756cf-57f4-44f3-b89f-7f79d5dfc60f',
         path='/lib/PKG-INFO',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n        constraints, full text search and complex queries.')

Fragment(uuid='1a522953-bfab-4dd0-8a22-0d2cd3d16c58',
         path='/lib/PKG-INFO',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        Provides a light-weight approach of database access with')

Fragment(uuid='d6e90e0e-e3b8-4937-830c-3a586378c649',
         path='/lib/PKG-INFO',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        minimal runtime overhead and without any kind of hidden')

Fragment(uuid='b0039e42-8859-4bb4-b2b8-7950df7fe659',
         path='/lib/PKG-INFO',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n        magic, metaclasses or so. Provides maximum possible')

Fragment(uuid='fa8e7189-b55e-4873-83d4-136d35feb8a7',
         path='/lib/PKG-INFO',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n        support for auto completion in Python IDEs.')

Fragment(uuid='1593859f-8d2e-4d0d-9ade-31f4a73de963',
         path='/lib/PKG-INFO',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Keywords: python database orm postgresql abstraction layer '
              'generator codegeneration performance')

Fragment(uuid='893d3122-15a5-41c7-9b60-9dd0b48f024a',
         path='/lib/PKG-INFO',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\nPlatform: UNKNOWN')

Fragment(uuid='338891a0-c303-4282-91b0-82613e40b246',
         path='/lib/PKG-INFO',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: Development Status :: 3 - Alpha')

Fragment(uuid='f5a63c90-3d80-42ee-9779-40138e32548e',
         path='/lib/PKG-INFO',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: Operating System :: OS Independent')

Fragment(uuid='26931d20-7a0f-4cdf-bdca-753a51a7d3d3',
         path='/lib/PKG-INFO',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: Intended Audience :: Developers')

Fragment(uuid='f069be97-7fae-4974-b593-8f86044c829c',
         path='/lib/PKG-INFO',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: License :: OSI Approved :: MIT License')

Fragment(uuid='c9686042-e7d4-4bab-ae7a-0b073cce869f',
         path='/lib/PKG-INFO',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Classifier: Topic :: Software Development :: Libraries :: '
              'Python Modules')

Fragment(uuid='b7870aa9-e5fd-4067-a095-1271ba0d63b3',
         path='/lib/PKG-INFO',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: Topic :: Database')

Fragment(uuid='cd36dda5-15fa-403a-afce-247a8205d6be',
         path='/lib/PKG-INFO',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: Topic :: Software Development :: Code Generators')

Fragment(uuid='8d0e95b5-512a-4af1-9650-94b4fa1cc2de',
         path='/lib/PKG-INFO',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='e43c1a1e-3e7b-49b0-8b57-57b6525e346f',
         path='/lib/dblayer/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" DBLayer - Database Abstraction Layer Generator\n'
              '"""\n'
              '\n'
              '# FIXME: Require the first column to be the primary key one in '
              'all writable tables (not views).\n')

Fragment(uuid='040187d4-15b5-4384-a31f-413553bae14a',
         path='/lib/dblayer/backend/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Database backends\n'
              '\n'
              'The base subpackage contains generic implementation can be '
              'reused by \n'
              'the SQL server specific backend implementations.\n'
              '\n'
              'All the other subpackages contain SQL server specific '
              'implementations.\n'
              '\n'
              '"""\n')

Fragment(uuid='101d98d0-398a-4d85-9fc8-ab7bf7f50825',
         path='/lib/dblayer/backend/base/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Subpackage for implementing database backends\n"""\n')

Fragment(uuid='6e784c77-bfbe-4462-b368-66f77e2f4aca',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Data structures for preparing SQL queries\n'
              '"""\n'
              '\n'
              'from dblayer import constants\n')

Fragment(uuid='c4a8ba7e-22d0-47f4-ac1c-b63c46e2e840',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/base/clauses.py\n'
              '  Classes: Clauses\n'
              '  Methods: __eq__ __hash__ __init__ __repr__ get_tuple\n'
              '  Variables: __slots__ __str__ self.field_list self.group_by '
              'self.hash_value self.having self.limit self.offset '
              'self.order_by self.table_list self.where\n'
              '  Usages: DEBUG __class__ __module__ __name__ constants dblayer '
              'field_list group_by hash hash_value having int isinstance join '
              'limit list name offset order_by other rsplit self str '
              'table_list tuple value where zip\n')

Fragment(uuid='25d84a12-80f4-4161-ba3a-48ec03c54a50',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import constants')

Fragment(uuid='43f44211-9782-4b1b-8cea-dac00e722df5',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Clauses:\n'
              '    """ Hashable clauses for a single query\n'
              '    """\n'
              '\n'
              '    __slots__ = (\n'
              '        # List of source tables. Possible items:\n'
              '        # table_name for non-aliased and single tables\n'
              '        # (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        # (table_name, alias_name, join_type, join_condition) '
              'to continue a group.\n'
              "        'table_list',\n"
              '\n'
              '        # List of field expressions, each item must be a '
              'string\n'
              "        'field_list',\n"
              '\n'
              '        # Optional list of where conditions, they are joined by '
              'the AND operator\n'
              "        'where',\n"
              '\n'
              '        # Optional list of ')

Fragment(uuid='5ef019d1-4c46-4c0c-9d14-5b97734a0d65',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=7,
         depth=0,
         type='class',
         name='Clauses',
         text='class Clauses:\n'
              '    """ Hashable clauses for a single query\n'
              '    """\n'
              '\n'
              '    __slots__ = (\n'
              '        # List of source tables. Possible items:\n'
              '        # table_name for non-aliased and single tables\n'
              '        # (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        # (table_name, alias_name, join_type, join_condition) '
              'to continue a group.\n'
              "        'table_list',\n"
              '\n'
              '        # List of field expressions, each item must be a '
              'string\n'
              "        'field_list',\n"
              '\n'
              '        # Optional list of where conditions, they are joined by '
              'the AND operator\n'
              "        'where',\n"
              '\n'
              '        # Optional list of g')

Fragment(uuid='fa24993e-4b49-41fc-ac85-f4ee61c6fb03',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=11,
         depth=2,
         type='variable',
         name='__slots__',
         text='__slots__ = (\n'
              '        # List of source tables. Possible items:\n'
              '        # table_name for non-aliased and single tables\n'
              '        # (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        # (table_name, alias_name, join_type, join_condition) '
              'to continue a group.\n'
              "        'table_list',\n"
              '\n'
              '        # List of field expressions, each item must be a '
              'string\n'
              "        'field_list',\n"
              '\n'
              '        # Optional list of where conditions, they are joined by '
              'the AND operator\n'
              "        'where',\n"
              '\n'
              '        # Optional list of group by expressions, each item must')

Fragment(uuid='9fdfeaf9-5a29-4f46-b283-6efa29ca9ccf',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=24,
         depth=0,
         type='module',
         name='',
         text='group by expressions, each item must be a string\n'
              "        'group_by',\n"
              '\n'
              '        # Optional list of having conditions, each item must be '
              'a string, they are joined by the AND operator\n'
              "        'having',\n"
              '\n'
              '        # Optional list of order by expressions, each item must '
              'be a string\n'
              "        'order_by',\n"
              '\n'
              '        # Optional integer limit for the number of records '
              'returned\n'
              "        'limit',\n"
              '\n'
              '        # Optional integer offset to shift the limit window '
              'over the result set\n'
              "        'offset',\n"
              '\n'
              '        # Hash value calculated from all the above for caching '
              'SQL statements\n'
              "        'hash_value')\n")

Fragment(uuid='a359fb79-3529-482e-9617-8824409be17a',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=24,
         depth=0,
         type='class',
         name='Clauses',
         text='roup by expressions, each item must be a string\n'
              "        'group_by',\n"
              '\n'
              '        # Optional list of having conditions, each item must be '
              'a string, they are joined by the AND operator\n'
              "        'having',\n"
              '\n'
              '        # Optional list of order by expressions, each item must '
              'be a string\n'
              "        'order_by',\n"
              '\n'
              '        # Optional integer limit for the number of records '
              'returned\n'
              "        'limit',\n"
              '\n'
              '        # Optional integer offset to shift the limit window '
              'over the result set\n'
              "        'offset',\n"
              '\n'
              '        # Hash value calculated from all the above for caching '
              'SQL statements\n'
              "        'hash_value')\n")

Fragment(uuid='cfe53cdb-24a5-4dc3-abb8-2b997fe71771',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=24,
         depth=2,
         type='variable',
         name='__slots__',
         text=' be a string\n'
              "        'group_by',\n"
              '\n'
              '        # Optional list of having conditions, each item must be '
              'a string, they are joined by the AND operator\n'
              "        'having',\n"
              '\n'
              '        # Optional list of order by expressions, each item must '
              'be a string\n'
              "        'order_by',\n"
              '\n'
              '        # Optional integer limit for the number of records '
              'returned\n'
              "        'limit',\n"
              '\n'
              '        # Optional integer offset to shift the limit window '
              'over the result set\n'
              "        'offset',\n"
              '\n'
              '        # Hash value calculated from all the above for caching '
              'SQL statements\n'
              "        'hash_value')")

Fragment(uuid='af15e138-64e5-4053-bdca-100788be1dab',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(\n'
              '            self,\n'
              '            table_list=(),\n'
              '            field_list=(),\n'
              "            where='',\n"
              '            group_by=(),\n'
              "            having='',\n"
              '            order_by=(),\n'
              '            limit=None,\n'
              '            offset=None):\n')

Fragment(uuid='b2946dc3-56d8-403f-9e2c-c168e8c655b5',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=41,
         depth=0,
         type='class',
         name='Clauses',
         text='\n'
              '    def __init__(\n'
              '            self,\n'
              '            table_list=(),\n'
              '            field_list=(),\n'
              "            where='',\n"
              '            group_by=(),\n'
              "            having='',\n"
              '            order_by=(),\n'
              '            limit=None,\n'
              '            offset=None):\n')

Fragment(uuid='a49c918e-7e29-4bdc-a1da-2a51d54c9988',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=42,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(\n'
              '            self,\n'
              '            table_list=(),\n'
              '            field_list=(),\n'
              "            where='',\n"
              '            group_by=(),\n'
              "            having='',\n"
              '            order_by=(),\n'
              '            limit=None,\n'
              '            offset=None):\n')

Fragment(uuid='e2be450e-2e5d-46fa-b5d2-384acff342cb',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=52,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(table_list, (tuple, list))\n'
              '            assert isinstance(field_list, (tuple, list))\n'
              '            assert isinstance(where, str)\n'
              '            assert isinstance(group_by, (tuple, list))\n'
              '            assert isinstance(having, str)\n'
              '            assert isinstance(order_by, (tuple, list))\n'
              '\n'
              '        self.table_list = tuple(table_list)\n'
              '        self.field_list = tuple(field_list)\n'
              '        self.where = str(where)\n'
              '        self.group_by = tuple(group_by)\n'
              '        self.having = str(having)\n'
              '        self.order_by = tuple(order_by)\n'
              '        self.limit = None if limit is None else int(limit)\n'
              '        self.offset = None if offset is None else int(offset)\n'
              '\n'
              '        self.hash_value = None\n')

Fragment(uuid='5f0b550b-a427-4a7f-ab20-3964e35ac52c',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=52,
         depth=0,
         type='class',
         name='Clauses',
         text='\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(table_list, (tuple, list))\n'
              '            assert isinstance(field_list, (tuple, list))\n'
              '            assert isinstance(where, str)\n'
              '            assert isinstance(group_by, (tuple, list))\n'
              '            assert isinstance(having, str)\n'
              '            assert isinstance(order_by, (tuple, list))\n'
              '\n'
              '        self.table_list = tuple(table_list)\n'
              '        self.field_list = tuple(field_list)\n'
              '        self.where = str(where)\n'
              '        self.group_by = tuple(group_by)\n'
              '        self.having = str(having)\n'
              '        self.order_by = tuple(order_by)\n'
              '        self.limit = None if limit is None else int(limit)\n'
              '        self.offset = None if offset is None else int(offset)\n'
              '\n'
              '        self.hash_value = None\n')

Fragment(uuid='38fcd08f-2181-45da-b642-febdd97512a4',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=52,
         depth=2,
         type='function',
         name='__init__',
         text='\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(table_list, (tuple, list))\n'
              '            assert isinstance(field_list, (tuple, list))\n'
              '            assert isinstance(where, str)\n'
              '            assert isinstance(group_by, (tuple, list))\n'
              '            assert isinstance(having, str)\n'
              '            assert isinstance(order_by, (tuple, list))\n'
              '\n'
              '        self.table_list = tuple(table_list)\n'
              '        self.field_list = tuple(field_list)\n'
              '        self.where = str(where)\n'
              '        self.group_by = tuple(group_by)\n'
              '        self.having = str(having)\n'
              '        self.order_by = tuple(order_by)\n'
              '        self.limit = None if limit is None else int(limit)\n'
              '        self.offset = None if offset is None else int(offset)\n'
              '\n'
              '        self.hash_value = None')

Fragment(uuid='029f5c99-b1c4-4996-b4fc-aebc468436c6',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=61,
         depth=4,
         type='variable',
         name='self.table_list',
         text='self.table_list = tuple(table_list)')

Fragment(uuid='c47699e1-ac88-4f35-9044-3d95fc140d6c',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=62,
         depth=4,
         type='variable',
         name='self.field_list',
         text='self.field_list = tuple(field_list)')

Fragment(uuid='8af2757b-8dce-41ad-a3cd-40814e8f8707',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=63,
         depth=4,
         type='variable',
         name='self.where',
         text='self.where = str(where)')

Fragment(uuid='4ded6ede-2a62-4ccb-9d8e-27f5d39126ff',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=64,
         depth=4,
         type='variable',
         name='self.group_by',
         text='self.group_by = tuple(group_by)')

Fragment(uuid='13f56ced-f287-42a8-b0b8-c5e52f42de20',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=65,
         depth=4,
         type='variable',
         name='self.having',
         text='self.having = str(having)')

Fragment(uuid='7acdf40c-ab3d-4ab8-8cb0-fc6009c5c0ca',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=66,
         depth=4,
         type='variable',
         name='self.order_by',
         text='self.order_by = tuple(order_by)')

Fragment(uuid='57fc9fdb-637e-464d-8bd6-0a3923d3d00a',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=67,
         depth=4,
         type='variable',
         name='self.limit',
         text='self.limit = None if limit is None else int(limit)')

Fragment(uuid='86f7fb86-8ea9-4b7b-8f5c-043cb4e1864a',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=68,
         depth=4,
         type='variable',
         name='self.offset',
         text='self.offset = None if offset is None else int(offset)')

Fragment(uuid='164bbdea-7433-4acb-a30d-0d0560ccbdd7',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=70,
         depth=4,
         type='variable',
         name='self.hash_value',
         text='self.hash_value = None')

Fragment(uuid='22df8c91-cacf-469c-896d-a8f4a22b57e3',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=71,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in zip(self.__slots__, '
              'self.get_tuple())))\n'
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='6f554829-396e-4b59-93aa-b3bd97f6278b',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=71,
         depth=0,
         type='class',
         name='Clauses',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in zip(self.__slots__, '
              'self.get_tuple())))\n'
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='d1c9967d-bf26-45b8-82a7-529e31e3d2b7',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=72,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in zip(self.__slots__, '
              'self.get_tuple())))')

Fragment(uuid='f749c293-9906-4afe-ba57-615a708b11ae',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=80,
         depth=2,
         type='variable',
         name='__str__',
         text='__str__ = __repr__')

Fragment(uuid='ea74a44b-88f5-4cce-964d-8681b994b901',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=81,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_tuple(self):\n'
              '        return (\n'
              '            self.table_list,\n'
              '            self.field_list,\n'
              '            self.where,\n'
              '            self.group_by,\n'
              '            self.having,\n'
              '            self.order_by,\n'
              '            self.limit,\n'
              '            self.offset)\n')

Fragment(uuid='90620f38-167e-4e89-b314-f6b14614694f',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=81,
         depth=0,
         type='class',
         name='Clauses',
         text='\n'
              '    def get_tuple(self):\n'
              '        return (\n'
              '            self.table_list,\n'
              '            self.field_list,\n'
              '            self.where,\n'
              '            self.group_by,\n'
              '            self.having,\n'
              '            self.order_by,\n'
              '            self.limit,\n'
              '            self.offset)\n')

Fragment(uuid='9c9e8f03-6fda-41a0-ad58-2d948a4fa045',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=82,
         depth=2,
         type='function',
         name='get_tuple',
         text='def get_tuple(self):\n'
              '        return (\n'
              '            self.table_list,\n'
              '            self.field_list,\n'
              '            self.where,\n'
              '            self.group_by,\n'
              '            self.having,\n'
              '            self.order_by,\n'
              '            self.limit,\n'
              '            self.offset)')

Fragment(uuid='2390bcb2-d772-47de-9791-605c7845b388',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __hash__(self):\n'
              '        if self.hash_value is None:\n'
              '            self.hash_value = hash(self.get_tuple())\n'
              '        elif constants.DEBUG:\n'
              '            assert self.hash_value == hash(self.get_tuple()), '
              "'Clauses instance has been changed since its hash calculated "
              "the last time!'\n"
              '        return self.hash_value\n')

Fragment(uuid='56a10b80-c1cc-4031-b97f-3aac63e62fa3',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=92,
         depth=0,
         type='class',
         name='Clauses',
         text='\n'
              '    def __hash__(self):\n'
              '        if self.hash_value is None:\n'
              '            self.hash_value = hash(self.get_tuple())\n'
              '        elif constants.DEBUG:\n'
              '            assert self.hash_value == hash(self.get_tuple()), '
              "'Clauses instance has been changed since its hash calculated "
              "the last time!'\n"
              '        return self.hash_value\n')

Fragment(uuid='8c04eaae-5e36-4b9c-bc71-87c4eb886f33',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=93,
         depth=2,
         type='function',
         name='__hash__',
         text='def __hash__(self):\n'
              '        if self.hash_value is None:\n'
              '            self.hash_value = hash(self.get_tuple())\n'
              '        elif constants.DEBUG:\n'
              '            assert self.hash_value == hash(self.get_tuple()), '
              "'Clauses instance has been changed since its hash calculated "
              "the last time!'\n"
              '        return self.hash_value')

Fragment(uuid='064a3f7d-99d3-4855-b3d9-2a4d31e63140',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=95,
         depth=6,
         type='variable',
         name='self.hash_value',
         text='self.hash_value = hash(self.get_tuple())')

Fragment(uuid='3f66d6f4-68f3-4a89-8a11-d722e0f025b9',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=99,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __eq__(self, other):\n'
              '        if not isinstance(other, Clauses):\n'
              '            return False\n'
              '        if hash(self) != hash(other):\n'
              '            return False\n'
              '        return self.get_tuple() == other.get_tuple()\n')

Fragment(uuid='cb629eed-6041-466f-9d3f-1cd37279ae58',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=99,
         depth=0,
         type='class',
         name='Clauses',
         text='\n'
              '    def __eq__(self, other):\n'
              '        if not isinstance(other, Clauses):\n'
              '            return False\n'
              '        if hash(self) != hash(other):\n'
              '            return False\n'
              '        return self.get_tuple() == other.get_tuple()')

Fragment(uuid='294e577e-edb6-4b5f-b102-f312be592627',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=100,
         depth=2,
         type='function',
         name='__eq__',
         text='def __eq__(self, other):\n'
              '        if not isinstance(other, Clauses):\n'
              '            return False\n'
              '        if hash(self) != hash(other):\n'
              '            return False\n'
              '        return self.get_tuple() == other.get_tuple()')

Fragment(uuid='edf2ffa6-4915-4605-a8f5-65ba8a7eaf05',
         path='/lib/dblayer/backend/base/database.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Base class for generated database abstraction layers\n'
              '"""\n'
              '\n'
              'import contextlib\n'
              'import itertools\n'
              '\n'
              'import dblayer\n'
              'from dblayer import constants, util\n')

Fragment(uuid='9e0285a2-ca4c-4182-adcc-c0a633d5178f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/base/database.py\n'
              '  Classes: DatabaseAbstraction\n'
              '  Methods: __del__ _connect add_record add_record_list close '
              'commit connect connected create_language cursor delete_record '
              'delete_record_list disable_transactions enable_transactions '
              'execute execute_and_fetch_dict_iter execute_and_fetch_iter '
              'execute_and_fetch_one execute_statement_list executemany '
              'get_last_value_of_last_sequence_used get_record get_record_iter '
              'get_record_list is_primary_key_conflict log_analysis rollback '
              'session transaction update_record update_record_list\n'
              '  Variables: _SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT '
              '_SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT '
              '_SQL_IDENTITY_INSERT_SAVEPOINT _format clauses connection '
              'cursor cursor.arraysize cursor_name field_name_list first_id '
              'last_id parameter_tuple parameter_tuple_list record.id row '
              'row_list self.connection self.named_cursor_counter split_index '
              'sql statement_list table_name truncate_id\n'
              '  Usages: CURSOR_ARRAYSIZE Clauses DEBUG Error Exception '
              'IntegrityError LOG_SQL_RESULT_ROWS LOG_SQL_STATEMENTS '
              'MAX_INSERT_RETRY_COUNT NotImplementedError ProgrammingError '
              'Record _column_name_list _table_name arraysize backend base '
              'column constants contextlib contextmanager count dblayer '
              'description dict dsn enumerate fetchall fetchmany fetchone '
              'field_list finalize format_delete format_insert '
              'format_release_savepoint format_rollback_to_savepoint '
              'format_savepoint format_select format_update generate_id '
              'get_random_id ignore_errors isinstance isolation_level '
              'issubclass itertools join language len list log name named '
              'named_cursor_counter next property quote_name range reason '
              'record record_class record_index record_list record_or_id '
              'record_or_id_list retry self serial set_isolation_level '
              'startswith str table_list tuple util where zip\n')

Fragment(uuid='edd4a4aa-01ad-455f-8630-7e72a3869891',
         path='/lib/dblayer/backend/base/database.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import contextlib')

Fragment(uuid='b7f07bee-e025-49b4-b694-da1a891f239b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='import itertools')

Fragment(uuid='2a593988-5542-48bd-803d-9fff3c5c59a1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=7,
         depth=0,
         type='dependency',
         name='',
         text='import dblayer')

Fragment(uuid='f5a325b2-75d7-4432-95ab-872cfa8f7b98',
         path='/lib/dblayer/backend/base/database.py',
         lineno=8,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import constants, util')

Fragment(uuid='bb2b5fe1-fc19-4c12-9d91-c8be3170a215',
         path='/lib/dblayer/backend/base/database.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class DatabaseAbstraction:\n'
              '    """ Base class for generated database abstraction layers\n'
              '    """\n'
              '\n'
              '    # SQL server specific backend module implementing the '
              'formatting of SQL statements\n'
              '    _format = None\n'
              '\n'
              '    # SQL statement for the savepoint set before each identity '
              'insert statement\n'
              "    _SQL_IDENTITY_INSERT_SAVEPOINT = ''\n"
              '\n'
              '    # SQL statement to release a savepoint after a successful '
              'identity insert\n'
              "    _SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT = ''\n"
              '\n'
              '    # SQL statement for rolling back to the savepoint after a '
              'failing identity insert statement\n'
              "    _SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT = ''\n"
              '\n'
              '    # Database connection\n'
              '    connection = None\n'
              '\n'
              '    ### Connecting and disconnecting\n')

Fragment(uuid='fc861da1-b048-4ae1-b71a-90a3880f063e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=11,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='class DatabaseAbstraction:\n'
              '    """ Base class for generated database abstraction layers\n'
              '    """\n'
              '\n'
              '    # SQL server specific backend module implementing the '
              'formatting of SQL statements\n'
              '    _format = None\n'
              '\n'
              '    # SQL statement for the savepoint set before each identity '
              'insert statement\n'
              "    _SQL_IDENTITY_INSERT_SAVEPOINT = ''\n"
              '\n'
              '    # SQL statement to release a savepoint after a successful '
              'identity insert\n'
              "    _SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT = ''\n"
              '\n'
              '    # SQL statement for rolling back to the savepoint after a '
              'failing identity insert statement\n'
              "    _SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT = ''\n"
              '\n'
              '    # Database connection\n'
              '    connection = None\n'
              '\n'
              '    ### Connecting and disconnecting\n')

Fragment(uuid='3963f62d-55c1-4863-ab0f-d36a8a1a2bdd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=16,
         depth=2,
         type='variable',
         name='_format',
         text='_format = None')

Fragment(uuid='f4c8f619-3ead-4121-9965-373cec5aa8e5',
         path='/lib/dblayer/backend/base/database.py',
         lineno=19,
         depth=2,
         type='variable',
         name='_SQL_IDENTITY_INSERT_SAVEPOINT',
         text="_SQL_IDENTITY_INSERT_SAVEPOINT = ''")

Fragment(uuid='28fb8479-6b26-43e6-a8ef-050fcbd6f0ef',
         path='/lib/dblayer/backend/base/database.py',
         lineno=22,
         depth=2,
         type='variable',
         name='_SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT',
         text="_SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT = ''")

Fragment(uuid='e119d209-ca14-48a7-8dbd-aebc77d1031c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=25,
         depth=2,
         type='variable',
         name='_SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT',
         text="_SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT = ''")

Fragment(uuid='0cd3ed01-cf76-4ba1-8c6d-88aee56c1d1c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=28,
         depth=2,
         type='variable',
         name='connection',
         text='connection = None')

Fragment(uuid='158d7a76-655c-4488-b3b9-23aadddeb297',
         path='/lib/dblayer/backend/base/database.py',
         lineno=31,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def connect(self, dsn):\n'
              '        """ Connects to the database\n'
              '        """\n'
              "        assert self.connection is None, 'Already connected.'\n"
              '        self._connect(dsn)\n'
              '        assert self.connection is not None\n'
              '        self.named_cursor_counter = itertools.count()\n')

Fragment(uuid='714c4ee5-9c68-4da4-9b18-a42fe681cde1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=31,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def connect(self, dsn):\n'
              '        """ Connects to the database\n'
              '        """\n'
              "        assert self.connection is None, 'Already connected.'\n"
              '        self._connect(dsn)\n'
              '        assert self.connection is not None\n'
              '        self.named_cursor_counter = itertools.count()\n')

Fragment(uuid='c7f0ab43-a300-4989-b365-ddf2f37cb605',
         path='/lib/dblayer/backend/base/database.py',
         lineno=32,
         depth=2,
         type='function',
         name='connect',
         text='def connect(self, dsn):\n'
              '        """ Connects to the database\n'
              '        """\n'
              "        assert self.connection is None, 'Already connected.'\n"
              '        self._connect(dsn)\n'
              '        assert self.connection is not None\n'
              '        self.named_cursor_counter = itertools.count()')

Fragment(uuid='d7b8cff8-6e64-4bb3-ac30-2b809333c3cd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=38,
         depth=4,
         type='variable',
         name='self.named_cursor_counter',
         text='self.named_cursor_counter = itertools.count()')

Fragment(uuid='480f67e7-bfd7-4938-965b-b96d677fd3b2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def _connect(self, dsn):\n'
              '        """ Actually connects to the database\n'
              '        \n'
              '        Sets self.connection to a DBAPI2 compatible connection '
              'object.\n'
              '        \n'
              '        """\n'
              '        raise NotImplementedError()\n')

Fragment(uuid='929f2464-e11c-4d3e-a6f5-2db72229dde2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=39,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def _connect(self, dsn):\n'
              '        """ Actually connects to the database\n'
              '        \n'
              '        Sets self.connection to a DBAPI2 compatible connection '
              'object.\n'
              '        \n'
              '        """\n'
              '        raise NotImplementedError()\n')

Fragment(uuid='6b426697-c6c4-433c-b9c8-715269d54b0a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=40,
         depth=2,
         type='function',
         name='_connect',
         text='def _connect(self, dsn):\n'
              '        """ Actually connects to the database\n'
              '        \n'
              '        Sets self.connection to a DBAPI2 compatible connection '
              'object.\n'
              '        \n'
              '        """\n'
              '        raise NotImplementedError()')

Fragment(uuid='367bc9ba-de80-42f7-b062-594e8d15f156',
         path='/lib/dblayer/backend/base/database.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def close(self):\n'
              '        """ Closes the database connection if any\n'
              '        """\n'
              '        if self.connection is None:\n'
              '            return\n'
              '        self.connection.close()\n'
              '        self.connection = None\n'
              '        self.named_cursor_counter = None\n')

Fragment(uuid='d872b838-8fec-4d39-932d-0a403068e0fe',
         path='/lib/dblayer/backend/base/database.py',
         lineno=47,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def close(self):\n'
              '        """ Closes the database connection if any\n'
              '        """\n'
              '        if self.connection is None:\n'
              '            return\n'
              '        self.connection.close()\n'
              '        self.connection = None\n'
              '        self.named_cursor_counter = None\n')

Fragment(uuid='8ec8a3de-9b48-475c-be57-77c195a3ee89',
         path='/lib/dblayer/backend/base/database.py',
         lineno=48,
         depth=2,
         type='function',
         name='close',
         text='def close(self):\n'
              '        """ Closes the database connection if any\n'
              '        """\n'
              '        if self.connection is None:\n'
              '            return\n'
              '        self.connection.close()\n'
              '        self.connection = None\n'
              '        self.named_cursor_counter = None')

Fragment(uuid='d5fa4f94-1797-4487-af6d-65de9a267b3a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=54,
         depth=4,
         type='variable',
         name='self.connection',
         text='self.connection = None')

Fragment(uuid='6d29598a-3d19-4796-a59f-e0532b7d8ce0',
         path='/lib/dblayer/backend/base/database.py',
         lineno=55,
         depth=4,
         type='variable',
         name='self.named_cursor_counter',
         text='self.named_cursor_counter = None')

Fragment(uuid='afc5bf43-5fff-4039-808b-c254248beccc',
         path='/lib/dblayer/backend/base/database.py',
         lineno=56,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __del__(self):\n'
              '        """ Try to close the connection when the object is '
              'deallocated, but silence all known errors\n'
              '        """\n'
              '        try:\n'
              '            self.close()\n'
              '        except self.Error:\n'
              '            pass\n'
              '\n'
              '    @property\n')

Fragment(uuid='3d3d10db-7ed8-496b-8a7e-1e8e1796517e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=56,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def __del__(self):\n'
              '        """ Try to close the connection when the object is '
              'deallocated, but silence all known errors\n'
              '        """\n'
              '        try:\n'
              '            self.close()\n'
              '        except self.Error:\n'
              '            pass\n'
              '\n'
              '    @property\n')

Fragment(uuid='584ba88a-32de-4de4-8ef2-2cf29e231af3',
         path='/lib/dblayer/backend/base/database.py',
         lineno=57,
         depth=2,
         type='function',
         name='__del__',
         text='def __del__(self):\n'
              '        """ Try to close the connection when the object is '
              'deallocated, but silence all known errors\n'
              '        """\n'
              '        try:\n'
              '            self.close()\n'
              '        except self.Error:\n'
              '            pass')

Fragment(uuid='2a211308-5a0d-475a-bdc6-2f28bcb69c19',
         path='/lib/dblayer/backend/base/database.py',
         lineno=66,
         depth=0,
         type='module',
         name='',
         text='    def connected(self):\n'
              '        return self.connection is not None\n'
              '\n'
              '    ### Database session context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='9b86bef6-003f-4ff1-9198-40070eda9d8f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=66,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='    def connected(self):\n'
              '        return self.connection is not None\n'
              '\n'
              '    ### Database session context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='845a7fcd-3186-43eb-a228-94649eba5f7a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=66,
         depth=3,
         type='function',
         name='connected',
         text='def connected(self):\n        return self.connection is not None')

Fragment(uuid='e52b532d-3098-4367-bad9-cfb11191179a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='    def session(self, dsn):\n'
              '        self.connect(dsn)\n'
              '        try:\n'
              '            yield\n'
              '        finally:\n'
              '            self.close()\n'
              '\n'
              '    ### Transaction setup and helpers\n')

Fragment(uuid='a05852bb-040b-4d25-b95b-5af485ee12db',
         path='/lib/dblayer/backend/base/database.py',
         lineno=72,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='    def session(self, dsn):\n'
              '        self.connect(dsn)\n'
              '        try:\n'
              '            yield\n'
              '        finally:\n'
              '            self.close()\n'
              '\n'
              '    ### Transaction setup and helpers\n')

Fragment(uuid='e3c019e3-8457-4311-b784-21a694169576',
         path='/lib/dblayer/backend/base/database.py',
         lineno=72,
         depth=3,
         type='function',
         name='session',
         text='def session(self, dsn):\n'
              '        self.connect(dsn)\n'
              '        try:\n'
              '            yield\n'
              '        finally:\n'
              '            self.close()')

Fragment(uuid='f992801b-6081-4251-aa4f-4fed4fcf9838',
         path='/lib/dblayer/backend/base/database.py',
         lineno=80,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def enable_transactions(self, isolation_level=1):\n'
              '        """ Enables database transactions and sets the '
              'isolation level\n'
              '        """\n'
              '        self.connection.set_isolation_level(isolation_level)\n'
              '        self.connection.rollback()\n')

Fragment(uuid='ea38296b-2d24-4f1f-a7d6-907fa41d369f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=80,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def enable_transactions(self, isolation_level=1):\n'
              '        """ Enables database transactions and sets the '
              'isolation level\n'
              '        """\n'
              '        self.connection.set_isolation_level(isolation_level)\n'
              '        self.connection.rollback()\n')

Fragment(uuid='be1171c1-bd58-4f0e-aa03-779e59788a94',
         path='/lib/dblayer/backend/base/database.py',
         lineno=81,
         depth=2,
         type='function',
         name='enable_transactions',
         text='def enable_transactions(self, isolation_level=1):\n'
              '        """ Enables database transactions and sets the '
              'isolation level\n'
              '        """\n'
              '        self.connection.set_isolation_level(isolation_level)\n'
              '        self.connection.rollback()')

Fragment(uuid='8b147c58-f5ea-4a72-ac66-2a4a7832b2aa',
         path='/lib/dblayer/backend/base/database.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def disable_transactions(self):\n'
              '        """ Disables transactions, switches back to auto commit '
              'mode\n'
              '        """\n'
              '        self.connection.rollback()\n'
              '        self.connection.set_isolation_level(0)\n')

Fragment(uuid='9645aea3-0cba-4b13-8118-78b928e4899e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=86,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def disable_transactions(self):\n'
              '        """ Disables transactions, switches back to auto commit '
              'mode\n'
              '        """\n'
              '        self.connection.rollback()\n'
              '        self.connection.set_isolation_level(0)\n')

Fragment(uuid='b6c3e110-f07b-45c4-af6b-ce326a69aaef',
         path='/lib/dblayer/backend/base/database.py',
         lineno=87,
         depth=2,
         type='function',
         name='disable_transactions',
         text='def disable_transactions(self):\n'
              '        """ Disables transactions, switches back to auto commit '
              'mode\n'
              '        """\n'
              '        self.connection.rollback()\n'
              '        self.connection.set_isolation_level(0)')

Fragment(uuid='b955ec65-5555-43d2-a8a4-6448afb0e917',
         path='/lib/dblayer/backend/base/database.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def commit(self):\n'
              '        """ Commits the current transaction\n'
              '        """\n'
              '        self.connection.commit()\n')

Fragment(uuid='a179c113-eea9-4577-a4a3-9c536cdbd449',
         path='/lib/dblayer/backend/base/database.py',
         lineno=92,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def commit(self):\n'
              '        """ Commits the current transaction\n'
              '        """\n'
              '        self.connection.commit()\n')

Fragment(uuid='3d799d75-e7cf-4ecf-b6ea-357ef2cdeb63',
         path='/lib/dblayer/backend/base/database.py',
         lineno=93,
         depth=2,
         type='function',
         name='commit',
         text='def commit(self):\n'
              '        """ Commits the current transaction\n'
              '        """\n'
              '        self.connection.commit()')

Fragment(uuid='73f08223-9e3b-41ed-be7e-af225ef5151e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=97,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def rollback(self):\n'
              '        """ Rolls back the current transaction\n'
              '        """\n'
              '        self.connection.rollback()\n'
              '\n'
              '    ### Transaction context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='9baa3767-b485-41b7-aff1-b94a3bd29c4e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=97,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def rollback(self):\n'
              '        """ Rolls back the current transaction\n'
              '        """\n'
              '        self.connection.rollback()\n'
              '\n'
              '    ### Transaction context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='aaef1b8e-a300-45fe-8379-9f5c227933bd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=98,
         depth=2,
         type='function',
         name='rollback',
         text='def rollback(self):\n'
              '        """ Rolls back the current transaction\n'
              '        """\n'
              '        self.connection.rollback()')

Fragment(uuid='ef9937cf-7128-4fa6-8a92-cbdfe1a27bba',
         path='/lib/dblayer/backend/base/database.py',
         lineno=106,
         depth=0,
         type='module',
         name='',
         text='    def transaction(self):\n'
              '        """ Context manager to encapsualte a transaction\n'
              '        """\n'
              '        try:\n'
              '            yield\n'
              '        except Exception:\n'
              '            self.connection.rollback()\n'
              '            raise\n'
              '        else:\n'
              '            self.connection.commit()\n'
              '\n'
              '    ### Cursor context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='308d4ad7-b39f-4138-a947-e856d0be4bd8',
         path='/lib/dblayer/backend/base/database.py',
         lineno=106,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='    def transaction(self):\n'
              '        """ Context manager to encapsualte a transaction\n'
              '        """\n'
              '        try:\n'
              '            yield\n'
              '        except Exception:\n'
              '            self.connection.rollback()\n'
              '            raise\n'
              '        else:\n'
              '            self.connection.commit()\n'
              '\n'
              '    ### Cursor context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='83fba5fa-8cc7-4d81-9c19-44f78bca32ce',
         path='/lib/dblayer/backend/base/database.py',
         lineno=106,
         depth=3,
         type='function',
         name='transaction',
         text='def transaction(self):\n'
              '        """ Context manager to encapsualte a transaction\n'
              '        """\n'
              '        try:\n'
              '            yield\n'
              '        except Exception:\n'
              '            self.connection.rollback()\n'
              '            raise\n'
              '        else:\n'
              '            self.connection.commit()')

Fragment(uuid='7a96c046-52cb-41a9-8bc9-d5f6534f5c85',
         path='/lib/dblayer/backend/base/database.py',
         lineno=120,
         depth=0,
         type='module',
         name='',
         text='    def cursor(self, named=False):\n'
              '        """ Context manager for a single database cursor\n'
              '        """\n'
              '        # See this forum thread on why we need to use named '
              'cursors as well as unnamed ones:\n'
              '        # '
              'http://www.velocityreviews.com/forums/t649192-psycopg2-and-large-queries.html\n')

Fragment(uuid='10c4c51b-fe85-4cef-a2b1-44e96dd894c6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=120,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='    def cursor(self, named=False):\n'
              '        """ Context manager for a single database cursor\n'
              '        """\n'
              '        # See this forum thread on why we need to use named '
              'cursors as well as unnamed ones:\n'
              '        # '
              'http://www.velocityreviews.com/forums/t649192-psycopg2-and-large-queries.html\n')

Fragment(uuid='3efa7390-ab28-40ec-a5c7-7a4527aa77ae',
         path='/lib/dblayer/backend/base/database.py',
         lineno=120,
         depth=3,
         type='function',
         name='cursor',
         text='def cursor(self, named=False):\n'
              '        """ Context manager for a single database cursor\n'
              '        """\n'
              '        # See this forum thread on why we need to use named '
              'cursors as well as unnamed ones:\n'
              '        # '
              'http://www.velocityreviews.com/forums/t649192-psycopg2-and-large-queries.html\n')

Fragment(uuid='43cb0184-d323-4949-a9c8-cab9f5cc89b4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=125,
         depth=0,
         type='module',
         name='',
         text='        if named:\n'
              "            cursor_name = 'cursor_%d' % "
              'next(self.named_cursor_counter)\n'
              '            cursor = self.connection.cursor(cursor_name)\n'
              '        else:\n'
              '            cursor = self.connection.cursor()\n'
              '\n'
              '        try:\n'
              '            yield cursor\n'
              '        finally:\n'
              '            try:\n'
              '                cursor.close()\n'
              '            except self.Error:\n'
              '                # Closing a cursor in a broken transaction '
              'state can cause an extra exception here.\n'
              '                # It can be safely suppressed, since we already '
              'have an error condition anyway.\n'
              '                pass\n'
              '\n'
              '    ### Execute helpers\n')

Fragment(uuid='d270cc2c-64ca-4758-ab85-ed60b4459dff',
         path='/lib/dblayer/backend/base/database.py',
         lineno=125,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='        if named:\n'
              "            cursor_name = 'cursor_%d' % "
              'next(self.named_cursor_counter)\n'
              '            cursor = self.connection.cursor(cursor_name)\n'
              '        else:\n'
              '            cursor = self.connection.cursor()\n'
              '\n'
              '        try:\n'
              '            yield cursor\n'
              '        finally:\n'
              '            try:\n'
              '                cursor.close()\n'
              '            except self.Error:\n'
              '                # Closing a cursor in a broken transaction '
              'state can cause an extra exception here.\n'
              '                # It can be safely suppressed, since we already '
              'have an error condition anyway.\n'
              '                pass\n'
              '\n'
              '    ### Execute helpers\n')

Fragment(uuid='4e6f8d7c-59b1-4594-959c-7f4d69bd7c72',
         path='/lib/dblayer/backend/base/database.py',
         lineno=125,
         depth=3,
         type='function',
         name='cursor',
         text='        if named:\n'
              "            cursor_name = 'cursor_%d' % "
              'next(self.named_cursor_counter)\n'
              '            cursor = self.connection.cursor(cursor_name)\n'
              '        else:\n'
              '            cursor = self.connection.cursor()\n'
              '\n'
              '        try:\n'
              '            yield cursor\n'
              '        finally:\n'
              '            try:\n'
              '                cursor.close()\n'
              '            except self.Error:\n'
              '                # Closing a cursor in a broken transaction '
              'state can cause an extra exception here.\n'
              '                # It can be safely suppressed, since we already '
              'have an error condition anyway.\n'
              '                pass')

Fragment(uuid='76031347-991e-466f-b303-fe152da10f33',
         path='/lib/dblayer/backend/base/database.py',
         lineno=126,
         depth=7,
         type='variable',
         name='cursor_name',
         text="cursor_name = 'cursor_%d' % next(self.named_cursor_counter)")

Fragment(uuid='340e430b-78c1-424f-a4d7-9b8119d446ed',
         path='/lib/dblayer/backend/base/database.py',
         lineno=127,
         depth=7,
         type='variable',
         name='cursor',
         text='cursor = self.connection.cursor(cursor_name)')

Fragment(uuid='c1f3ba61-3e8f-405e-a45c-2056a20fc6d2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=129,
         depth=8,
         type='variable',
         name='cursor',
         text='cursor = self.connection.cursor()')

Fragment(uuid='a33cd16d-ba31-4756-916a-88ab3e487177',
         path='/lib/dblayer/backend/base/database.py',
         lineno=142,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def execute(self, cursor, sql, parameter_tuple=()):\n'
              '        """ Executes a single SQL statement on the given '
              'cursor \n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute(%r, %r)', sql, "
              'parameter_tuple)\n'
              '\n'
              '        cursor.execute(sql, parameter_tuple)\n')

Fragment(uuid='22a7561e-1738-4694-85f9-56c123a6bf4c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=142,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def execute(self, cursor, sql, parameter_tuple=()):\n'
              '        """ Executes a single SQL statement on the given '
              'cursor \n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute(%r, %r)', sql, "
              'parameter_tuple)\n'
              '\n'
              '        cursor.execute(sql, parameter_tuple)\n')

Fragment(uuid='edda088c-cf01-412c-9244-fcbc42a49d08',
         path='/lib/dblayer/backend/base/database.py',
         lineno=143,
         depth=2,
         type='function',
         name='execute',
         text='def execute(self, cursor, sql, parameter_tuple=()):\n'
              '        """ Executes a single SQL statement on the given '
              'cursor \n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute(%r, %r)', sql, "
              'parameter_tuple)\n'
              '\n'
              '        cursor.execute(sql, parameter_tuple)')

Fragment(uuid='c00cf53b-a900-4da9-a54c-2b6f6dd02fda',
         path='/lib/dblayer/backend/base/database.py',
         lineno=154,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def executemany(self, cursor, sql, parameter_tuple_list):\n'
              '        """ Executes a single SQL statement on the given cursor '
              'for each parameter_tuple\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if not parameter_tuple_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: executemany(%r, %r)', sql, "
              'parameter_tuple_list)\n'
              '\n'
              '        cursor.executemany(sql, parameter_tuple_list)\n')

Fragment(uuid='90fe831d-0dc1-472b-b30e-0f0e950367ce',
         path='/lib/dblayer/backend/base/database.py',
         lineno=154,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def executemany(self, cursor, sql, parameter_tuple_list):\n'
              '        """ Executes a single SQL statement on the given cursor '
              'for each parameter_tuple\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if not parameter_tuple_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: executemany(%r, %r)', sql, "
              'parameter_tuple_list)\n'
              '\n'
              '        cursor.executemany(sql, parameter_tuple_list)\n')

Fragment(uuid='3b66e7c7-6875-4e2a-a7f3-a88e7c177e1c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=155,
         depth=2,
         type='function',
         name='executemany',
         text='def executemany(self, cursor, sql, parameter_tuple_list):\n'
              '        """ Executes a single SQL statement on the given cursor '
              'for each parameter_tuple\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if not parameter_tuple_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: executemany(%r, %r)', sql, "
              'parameter_tuple_list)\n'
              '\n'
              '        cursor.executemany(sql, parameter_tuple_list)')

Fragment(uuid='29707749-1560-4e81-b962-7fc8b8199c9b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=169,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def execute_statement_list(self, cursor, statement_list, '
              'ignore_errors=False):\n'
              '        """ Executes a list of SQL statements on the given '
              'cursor \n'
              '        \n'
              '        statement_list = [(sql, parameter_tuple)*]\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statements.\n'
              '        \n'
              '        """\n'
              '        if not statement_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_statement_list(%r)', statement_list)\n"
              '\n'
              '        if ignore_errors:\n')

Fragment(uuid='a2d022dc-454a-495e-b335-ceb1978f0684',
         path='/lib/dblayer/backend/base/database.py',
         lineno=169,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def execute_statement_list(self, cursor, statement_list, '
              'ignore_errors=False):\n'
              '        """ Executes a list of SQL statements on the given '
              'cursor \n'
              '        \n'
              '        statement_list = [(sql, parameter_tuple)*]\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statements.\n'
              '        \n'
              '        """\n'
              '        if not statement_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_statement_list(%r)', statement_list)\n"
              '\n'
              '        if ignore_errors:\n')

Fragment(uuid='b2edcc10-568f-43d3-a468-dc41185e8b4d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=170,
         depth=2,
         type='function',
         name='execute_statement_list',
         text='def execute_statement_list(self, cursor, statement_list, '
              'ignore_errors=False):\n'
              '        """ Executes a list of SQL statements on the given '
              'cursor \n'
              '        \n'
              '        statement_list = [(sql, parameter_tuple)*]\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statements.\n'
              '        \n'
              '        """\n'
              '        if not statement_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_statement_list(%r)', statement_list)\n"
              '\n'
              '        if ignore_errors:\n')

Fragment(uuid='b94d5175-c19c-4681-9fff-fe5d67b8186f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=186,
         depth=0,
         type='module',
         name='',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                try:\n'
              '                    '
              "cursor.execute(self._format.format_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                    cursor.execute(sql, parameter_tuple)\n'
              '                except self.ProgrammingError as reason:\n'
              "                    if str(reason).startswith('syntax error'):\n"
              '                        raise\n'
              '                    '
              "cursor.execute(self._format.format_rollback_to_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                else:\n'
              '                    '
              "cursor.execute(self._format.format_release_savepoint('execute_statement_list_ignoring_errors'))\n"
              '        else:\n')

Fragment(uuid='cbf47859-cd89-4e50-9610-cd8314694a16',
         path='/lib/dblayer/backend/base/database.py',
         lineno=186,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                try:\n'
              '                    '
              "cursor.execute(self._format.format_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                    cursor.execute(sql, parameter_tuple)\n'
              '                except self.ProgrammingError as reason:\n'
              "                    if str(reason).startswith('syntax error'):\n"
              '                        raise\n'
              '                    '
              "cursor.execute(self._format.format_rollback_to_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                else:\n'
              '                    '
              "cursor.execute(self._format.format_release_savepoint('execute_statement_list_ignoring_errors'))\n"
              '        else:\n')

Fragment(uuid='bbebdabb-9fec-4beb-91ee-46ecb6b07ee1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=186,
         depth=2,
         type='function',
         name='execute_statement_list',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                try:\n'
              '                    '
              "cursor.execute(self._format.format_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                    cursor.execute(sql, parameter_tuple)\n'
              '                except self.ProgrammingError as reason:\n'
              "                    if str(reason).startswith('syntax error'):\n"
              '                        raise\n'
              '                    '
              "cursor.execute(self._format.format_rollback_to_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                else:\n'
              '                    '
              "cursor.execute(self._format.format_release_savepoint('execute_statement_list_ignoring_errors'))\n"
              '        else:\n')

Fragment(uuid='c7997aee-ad88-415a-ab82-6385a8af0384',
         path='/lib/dblayer/backend/base/database.py',
         lineno=197,
         depth=0,
         type='module',
         name='',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                cursor.execute(sql, parameter_tuple)\n')

Fragment(uuid='42faf44a-fb09-42b4-99c2-462334c6c0d0',
         path='/lib/dblayer/backend/base/database.py',
         lineno=197,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                cursor.execute(sql, parameter_tuple)\n')

Fragment(uuid='49be477c-bce1-4d7a-b511-5c7035337ceb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=197,
         depth=2,
         type='function',
         name='execute_statement_list',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                cursor.execute(sql, parameter_tuple)')

Fragment(uuid='63843a2e-6385-4f45-a321-18652da289ec',
         path='/lib/dblayer/backend/base/database.py',
         lineno=199,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def execute_and_fetch_one(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'returns the first row of result set if any\n'
              '        \n'
              '        Returns the first row of the result set or None in the '
              'case of an empty result set.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_one(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '        row = cursor.fetchone()\n'
              '\n'
              '        if constants.LOG_SQL_RESULT_ROWS:\n'
              "            util.log('Returning SQL result row: %r' % (row,))\n"
              '\n'
              '        return row\n')

Fragment(uuid='cc142dc2-ce9d-45d4-ab68-0844c93bbbdc',
         path='/lib/dblayer/backend/base/database.py',
         lineno=199,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def execute_and_fetch_one(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'returns the first row of result set if any\n'
              '        \n'
              '        Returns the first row of the result set or None in the '
              'case of an empty result set.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_one(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '        row = cursor.fetchone()\n'
              '\n'
              '        if constants.LOG_SQL_RESULT_ROWS:\n'
              "            util.log('Returning SQL result row: %r' % (row,))\n"
              '\n'
              '        return row\n')

Fragment(uuid='fcc53881-8d19-4f1c-84b7-18d957e4c3d7',
         path='/lib/dblayer/backend/base/database.py',
         lineno=200,
         depth=2,
         type='function',
         name='execute_and_fetch_one',
         text='def execute_and_fetch_one(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'returns the first row of result set if any\n'
              '        \n'
              '        Returns the first row of the result set or None in the '
              'case of an empty result set.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_one(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '        row = cursor.fetchone()\n'
              '\n'
              '        if constants.LOG_SQL_RESULT_ROWS:\n'
              "            util.log('Returning SQL result row: %r' % (row,))\n"
              '\n'
              '        return row')

Fragment(uuid='4ed409e0-92f6-4eda-bea8-0db9132f4d91',
         path='/lib/dblayer/backend/base/database.py',
         lineno=210,
         depth=4,
         type='variable',
         name='row',
         text='row = cursor.fetchone()')

Fragment(uuid='de767b26-c137-479e-a849-a9564e35bf0a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=216,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def execute_and_fetch_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_iter(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row: %r' % "
              '(row,))\n'
              '\n'
              '                yield row\n')

Fragment(uuid='4f4b128c-0921-4571-b35d-f3330b61d170',
         path='/lib/dblayer/backend/base/database.py',
         lineno=216,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def execute_and_fetch_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_iter(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row: %r' % "
              '(row,))\n'
              '\n'
              '                yield row\n')

Fragment(uuid='99f6d167-7e06-4596-911a-2a5b85f168e7',
         path='/lib/dblayer/backend/base/database.py',
         lineno=217,
         depth=2,
         type='function',
         name='execute_and_fetch_iter',
         text='def execute_and_fetch_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_iter(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row: %r' % "
              '(row,))\n'
              '\n'
              '                yield row')

Fragment(uuid='ff18cb12-c5c4-4f48-a05e-703e055c08c9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=223,
         depth=4,
         type='variable',
         name='cursor.arraysize',
         text='cursor.arraysize = constants.CURSOR_ARRAYSIZE')

Fragment(uuid='ee53577a-1b70-4d3a-8e44-082e0a9dbc8d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=227,
         depth=6,
         type='variable',
         name='row_list',
         text='row_list = cursor.fetchmany()')

Fragment(uuid='39feebd2-c315-4674-90e2-21d65e7e66a4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=238,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def execute_and_fetch_dict_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set as a dict\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_and_fetch_dict_iter(%r, %r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        field_name_list = None\n')

Fragment(uuid='13158f5f-ec48-4419-a6d5-cb11a0cc55a7',
         path='/lib/dblayer/backend/base/database.py',
         lineno=238,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def execute_and_fetch_dict_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set as a dict\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_and_fetch_dict_iter(%r, %r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        field_name_list = None\n')

Fragment(uuid='5aab51b8-5a98-4695-a82c-7e56fdafc528',
         path='/lib/dblayer/backend/base/database.py',
         lineno=239,
         depth=2,
         type='function',
         name='execute_and_fetch_dict_iter',
         text='def execute_and_fetch_dict_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set as a dict\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_and_fetch_dict_iter(%r, %r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        field_name_list = None\n')

Fragment(uuid='bed1ff47-dc97-41ca-a16c-aec8b4920eb1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=245,
         depth=4,
         type='variable',
         name='cursor.arraysize',
         text='cursor.arraysize = constants.CURSOR_ARRAYSIZE')

Fragment(uuid='6fb6c49c-aff0-40aa-ab7f-5eb7a8f4f25f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=248,
         depth=4,
         type='variable',
         name='field_name_list',
         text='field_name_list = None')

Fragment(uuid='a04e7adc-a06a-4f67-ba03-1418aa7a775b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=249,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            if field_name_list is None:\n'
              '                field_name_list = [column.name for column in '
              'cursor.description]\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                row = dict(zip(field_name_list, row))\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row as dict: "
              "%r' % (row,))\n"
              '\n'
              '                yield row\n'
              '\n'
              '    ### Select query helpers\n')

Fragment(uuid='013fa20b-e7fd-4ffc-b0a6-8710aea7d1da',
         path='/lib/dblayer/backend/base/database.py',
         lineno=249,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            if field_name_list is None:\n'
              '                field_name_list = [column.name for column in '
              'cursor.description]\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                row = dict(zip(field_name_list, row))\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row as dict: "
              "%r' % (row,))\n"
              '\n'
              '                yield row\n'
              '\n'
              '    ### Select query helpers\n')

Fragment(uuid='153169b4-6fb8-411c-930e-d29a85eebf9e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=249,
         depth=2,
         type='function',
         name='execute_and_fetch_dict_iter',
         text='\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            if field_name_list is None:\n'
              '                field_name_list = [column.name for column in '
              'cursor.description]\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                row = dict(zip(field_name_list, row))\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row as dict: "
              "%r' % (row,))\n"
              '\n'
              '                yield row')

Fragment(uuid='1ead9ff6-5ef1-4bc9-9db3-dcb47d021042',
         path='/lib/dblayer/backend/base/database.py',
         lineno=251,
         depth=6,
         type='variable',
         name='row_list',
         text='row_list = cursor.fetchmany()')

Fragment(uuid='ae6c3864-51b1-4478-be02-013e61c4b4ed',
         path='/lib/dblayer/backend/base/database.py',
         lineno=257,
         depth=8,
         type='variable',
         name='field_name_list',
         text='field_name_list = [column.name for column in cursor.description]')

Fragment(uuid='a533a2b7-8ae7-4e08-9d60-5cc51df1808f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=261,
         depth=8,
         type='variable',
         name='row',
         text='row = dict(zip(field_name_list, row))')

Fragment(uuid='d84f1bff-44e2-41ca-9bb0-47637a22fc7d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=269,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_record(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a single record form the database or None '
              'if no record found\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '\n'
              '        if row is None:\n'
              '            return None\n'
              '\n'
              '        return record_class(*row)\n')

Fragment(uuid='003481bb-92dc-4e6b-9438-d4f770a8c060',
         path='/lib/dblayer/backend/base/database.py',
         lineno=269,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def get_record(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a single record form the database or None '
              'if no record found\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '\n'
              '        if row is None:\n'
              '            return None\n'
              '\n'
              '        return record_class(*row)\n')

Fragment(uuid='bd9f653e-f1cc-4022-836b-13afe700bf8a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=270,
         depth=2,
         type='function',
         name='get_record',
         text='def get_record(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a single record form the database or None '
              'if no record found\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '\n'
              '        if row is None:\n'
              '            return None\n'
              '\n'
              '        return record_class(*row)')

Fragment(uuid='85663203-4e36-4f20-a911-e399bedf13bd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=278,
         depth=4,
         type='variable',
         name='sql',
         text='sql = self._format.format_select(clauses)')

Fragment(uuid='e3e7dc34-bd7a-4e33-b766-197c28ce4456',
         path='/lib/dblayer/backend/base/database.py',
         lineno=281,
         depth=6,
         type='variable',
         name='row',
         text='row = self.execute_and_fetch_one(cursor, sql, parameter_tuple)')

Fragment(uuid='2ad67262-0274-46a5-bbe3-b026e2fbbb7d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=287,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_record_list(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a list of records form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            return [\n'
              '                record_class(*row)\n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n')

Fragment(uuid='cc3dafc4-257e-4fe0-9d8e-85ba604fa8a3',
         path='/lib/dblayer/backend/base/database.py',
         lineno=287,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def get_record_list(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a list of records form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            return [\n'
              '                record_class(*row)\n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n')

Fragment(uuid='31a40d53-c46a-45d4-bfc8-f62652f049fd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=288,
         depth=2,
         type='function',
         name='get_record_list',
         text='def get_record_list(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a list of records form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            return [\n'
              '                record_class(*row)\n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]')

Fragment(uuid='b0e647ee-e26e-4324-bce6-50d4877598c9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=296,
         depth=4,
         type='variable',
         name='sql',
         text='sql = self._format.format_select(clauses)')

Fragment(uuid='1c18090b-77b1-432d-b39b-6873f985d766',
         path='/lib/dblayer/backend/base/database.py',
         lineno=302,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_record_iter(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Yields records retrieved form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)\n'
              '\n'
              '    ### Insert query helpers\n')

Fragment(uuid='c857bd43-0bd6-4ee4-9ef6-aa46c31d4400',
         path='/lib/dblayer/backend/base/database.py',
         lineno=302,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def get_record_iter(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Yields records retrieved form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)\n'
              '\n'
              '    ### Insert query helpers\n')

Fragment(uuid='93a2eacd-7c71-4c1a-a30b-4cdfe5201f53',
         path='/lib/dblayer/backend/base/database.py',
         lineno=303,
         depth=2,
         type='function',
         name='get_record_iter',
         text='def get_record_iter(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Yields records retrieved form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)')

Fragment(uuid='b88c5c7e-4609-42b1-acfc-524e842a891a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=311,
         depth=4,
         type='variable',
         name='sql',
         text='sql = self._format.format_select(clauses)')

Fragment(uuid='8708bf1e-10af-429c-b4f8-54633d1ba612',
         path='/lib/dblayer/backend/base/database.py',
         lineno=318,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def is_primary_key_conflict(self, reason):\n'
              '        """ Returns True if the exception object might be due '
              'to the attempted\n'
              '        insertion of a conflicting primary key value. It can '
              'give false positives\n'
              '        without problems, those only degrade performance in '
              'rare exception cases\n'
              '        only.\n'
              '        """\n'
              "        return '__pk' in str(reason)\n")

Fragment(uuid='0388aad9-c584-455e-9148-9ba191d4a4c4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=318,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def is_primary_key_conflict(self, reason):\n'
              '        """ Returns True if the exception object might be due '
              'to the attempted\n'
              '        insertion of a conflicting primary key value. It can '
              'give false positives\n'
              '        without problems, those only degrade performance in '
              'rare exception cases\n'
              '        only.\n'
              '        """\n'
              "        return '__pk' in str(reason)\n")

Fragment(uuid='13205bdb-b4eb-4b1f-bd94-34c6ad9ef4ab',
         path='/lib/dblayer/backend/base/database.py',
         lineno=319,
         depth=2,
         type='function',
         name='is_primary_key_conflict',
         text='def is_primary_key_conflict(self, reason):\n'
              '        """ Returns True if the exception object might be due '
              'to the attempted\n'
              '        insertion of a conflicting primary key value. It can '
              'give false positives\n'
              '        without problems, those only degrade performance in '
              'rare exception cases\n'
              '        only.\n'
              '        """\n'
              "        return '__pk' in str(reason)")

Fragment(uuid='4015268d-3805-430f-9769-fa8660d0e37e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=326,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_last_value_of_last_sequence_used(self, cursor):\n'
              '        """ Returns the last value returned by the last '
              'sequence used\n'
              '        """\n'
              "        return self.execute_and_fetch_one(cursor, 'SELECT "
              "lastval();')[0]\n")

Fragment(uuid='50d8255c-2b3f-4ed8-9d71-c70847ce8a04',
         path='/lib/dblayer/backend/base/database.py',
         lineno=326,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def get_last_value_of_last_sequence_used(self, cursor):\n'
              '        """ Returns the last value returned by the last '
              'sequence used\n'
              '        """\n'
              "        return self.execute_and_fetch_one(cursor, 'SELECT "
              "lastval();')[0]\n")

Fragment(uuid='12090464-2856-41f1-97bd-5f6569c9b361',
         path='/lib/dblayer/backend/base/database.py',
         lineno=327,
         depth=2,
         type='function',
         name='get_last_value_of_last_sequence_used',
         text='def get_last_value_of_last_sequence_used(self, cursor):\n'
              '        """ Returns the last value returned by the last '
              'sequence used\n'
              '        """\n'
              "        return self.execute_and_fetch_one(cursor, 'SELECT "
              "lastval();')[0]")

Fragment(uuid='33e0dc83-885e-4219-8919-dd6ebbd9a307',
         path='/lib/dblayer/backend/base/database.py',
         lineno=331,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def add_record(self, record_class, record, generate_id, '
              'serial):\n'
              '        """ Inserts new record into the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='96e5b577-ad08-4ff9-a06e-935489259d6f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=331,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def add_record(self, record_class, record, generate_id, '
              'serial):\n'
              '        """ Inserts new record into the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='29bfede1-ac9d-45bd-b7a9-57c3d8426f57',
         path='/lib/dblayer/backend/base/database.py',
         lineno=332,
         depth=2,
         type='function',
         name='add_record',
         text='def add_record(self, record_class, record, generate_id, '
              'serial):\n'
              '        """ Inserts new record into the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='0451122a-6bf3-4e27-8d51-c55b353cf04f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=341,
         depth=4,
         type='variable',
         name='table_name',
         text='table_name = record_class._table_name')

Fragment(uuid='b4eb471c-5515-4db8-b9dd-c1c4c9259239',
         path='/lib/dblayer/backend/base/database.py',
         lineno=342,
         depth=4,
         type='variable',
         name='truncate_id',
         text='truncate_id = 1 if serial else 0')

Fragment(uuid='760fa24f-adf5-47b8-a51f-4218d53d6d3a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=343,
         depth=4,
         type='variable',
         name='clauses',
         text='clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])')

Fragment(uuid='84bf5872-d299-4b96-9bcb-a7a0fa523ea9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=346,
         depth=4,
         type='variable',
         name='sql',
         text='sql = self._format.format_insert(clauses)')

Fragment(uuid='3c3ab913-126b-4da8-a1ce-a7df964295f1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=347,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We might need to generate another ID, so the '
              'retry loop\n')

Fragment(uuid='09b42cda-99a5-43e0-aa7f-8a9b25a1b1cb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=347,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We might need to generate another ID, so the '
              'retry loop\n')

Fragment(uuid='c8f27b11-eb6f-47f2-a76c-7320bfc7337d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=347,
         depth=2,
         type='function',
         name='add_record',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We might need to generate another ID, so the '
              'retry loop\n')

Fragment(uuid='215b5088-e7ef-4a50-ab74-8277f796e4fb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=351,
         depth=0,
         type='module',
         name='',
         text='            for retry in range(1, '
              'constants.MAX_INSERT_RETRY_COUNT):\n'
              '\n'
              '                try:\n')

Fragment(uuid='ec051afc-a735-4c6b-b3e7-439b9b6d7ff4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=351,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='            for retry in range(1, '
              'constants.MAX_INSERT_RETRY_COUNT):\n'
              '\n'
              '                try:\n')

Fragment(uuid='5c0f5a89-7388-4222-af19-c3eb9e30e147',
         path='/lib/dblayer/backend/base/database.py',
         lineno=351,
         depth=2,
         type='function',
         name='add_record',
         text='            for retry in range(1, '
              'constants.MAX_INSERT_RETRY_COUNT):\n'
              '\n'
              '                try:\n')

Fragment(uuid='6e265e56-f389-4e11-9a32-15c4cef3fca6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=354,
         depth=0,
         type='module',
         name='',
         text='                    if not serial:\n')

Fragment(uuid='057ddd02-57a3-426f-9928-a05deb29be00',
         path='/lib/dblayer/backend/base/database.py',
         lineno=354,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='                    if not serial:\n')

Fragment(uuid='dfc3ecac-3f7e-488d-8eef-1c71627e8a5f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=354,
         depth=2,
         type='function',
         name='add_record',
         text='                    if not serial:\n')

Fragment(uuid='e885bcf3-abcd-4bf0-b394-7e4ff7c8282c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=355,
         depth=0,
         type='module',
         name='',
         text='                        if generate_id:\n'
              '                            record.id = util.get_random_id()\n'
              '                        elif constants.DEBUG:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                    parameter_tuple = '
              'record.tuple[truncate_id:]\n')

Fragment(uuid='c6eff0d1-333d-471e-93e8-532ca8ccef1e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=355,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='                        if generate_id:\n'
              '                            record.id = util.get_random_id()\n'
              '                        elif constants.DEBUG:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                    parameter_tuple = '
              'record.tuple[truncate_id:]\n')

Fragment(uuid='79e81bd7-8414-4db2-a738-aeca81abbdc9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=355,
         depth=2,
         type='function',
         name='add_record',
         text='                        if generate_id:\n'
              '                            record.id = util.get_random_id()\n'
              '                        elif constants.DEBUG:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                    parameter_tuple = '
              'record.tuple[truncate_id:]\n')

Fragment(uuid='88515147-ab9a-4df5-b7eb-064470a836fa',
         path='/lib/dblayer/backend/base/database.py',
         lineno=356,
         depth=14,
         type='variable',
         name='record.id',
         text='record.id = util.get_random_id()')

Fragment(uuid='56f03ae6-3d98-4105-ab66-01e4f5f7b4a6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=360,
         depth=10,
         type='variable',
         name='parameter_tuple',
         text='parameter_tuple = record.tuple[truncate_id:]')

Fragment(uuid='a1712ea0-966c-40e5-bb17-d5c18265b019',
         path='/lib/dblayer/backend/base/database.py',
         lineno=361,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                    if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                    self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '                except self.IntegrityError as reason:\n')

Fragment(uuid='dfbbf1b5-2df7-4021-ae76-f674169813b7',
         path='/lib/dblayer/backend/base/database.py',
         lineno=361,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                    if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                    self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '                except self.IntegrityError as reason:\n')

Fragment(uuid='a9f56e80-38b0-4c0f-8181-0ae90e765000',
         path='/lib/dblayer/backend/base/database.py',
         lineno=361,
         depth=2,
         type='function',
         name='add_record',
         text='\n'
              '                    if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                    self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '                except self.IntegrityError as reason:\n')

Fragment(uuid='ec5b8419-6d0e-44ce-8501-ac81053216ab',
         path='/lib/dblayer/backend/base/database.py',
         lineno=368,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                    if not '
              'self.is_primary_key_conflict(reason):\n'
              '                        raise\n')

Fragment(uuid='9e203037-9940-4945-94c4-6540d95d9175',
         path='/lib/dblayer/backend/base/database.py',
         lineno=368,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                    if not '
              'self.is_primary_key_conflict(reason):\n'
              '                        raise\n')

Fragment(uuid='57f5182f-5f22-41a7-acfe-cfd068b08b62',
         path='/lib/dblayer/backend/base/database.py',
         lineno=368,
         depth=2,
         type='function',
         name='add_record',
         text='\n'
              '                    if not '
              'self.is_primary_key_conflict(reason):\n'
              '                        raise\n')

Fragment(uuid='1e7ddf85-6e9a-4965-bac6-095102965f96',
         path='/lib/dblayer/backend/base/database.py',
         lineno=371,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                    if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                else:\n')

Fragment(uuid='4485ef0a-835e-4716-b4ba-22bc6879b24c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=371,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                    if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                else:\n')

Fragment(uuid='e36ecb80-55c3-4b11-8d56-945a9714d744',
         path='/lib/dblayer/backend/base/database.py',
         lineno=371,
         depth=2,
         type='function',
         name='add_record',
         text='\n'
              '                    if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                else:\n')

Fragment(uuid='17aa7ed2-8ae5-4760-9bb6-fa2a648b5f8b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=376,
         depth=0,
         type='module',
         name='',
         text='                    if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '                    # Fill in id field of record object\n')

Fragment(uuid='4c160e12-84aa-4dda-a3df-e3f95680be3d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=376,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='                    if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '                    # Fill in id field of record object\n')

Fragment(uuid='a38c8fb8-9a6d-4a31-8915-cb8c00d814f1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=376,
         depth=2,
         type='function',
         name='add_record',
         text='                    if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '                    # Fill in id field of record object\n')

Fragment(uuid='44457a7f-f47e-4d3e-b279-8aeb2dd56c87',
         path='/lib/dblayer/backend/base/database.py',
         lineno=380,
         depth=0,
         type='module',
         name='',
         text='                    if serial:\n'
              '                        record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '\n'
              '                    return\n'
              '\n'
              '            # Reproduce the error, it will re-raise the '
              'exception\n'
              '            self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '            # Fill in id field of record object\n')

Fragment(uuid='80b82389-2281-4630-bce4-4d797ff75628',
         path='/lib/dblayer/backend/base/database.py',
         lineno=380,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='                    if serial:\n'
              '                        record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '\n'
              '                    return\n'
              '\n'
              '            # Reproduce the error, it will re-raise the '
              'exception\n'
              '            self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '            # Fill in id field of record object\n')

Fragment(uuid='423dbb5c-889b-4eac-ba99-cb26c595b833',
         path='/lib/dblayer/backend/base/database.py',
         lineno=380,
         depth=2,
         type='function',
         name='add_record',
         text='                    if serial:\n'
              '                        record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '\n'
              '                    return\n'
              '\n'
              '            # Reproduce the error, it will re-raise the '
              'exception\n'
              '            self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '            # Fill in id field of record object\n')

Fragment(uuid='e70352a4-4b45-4672-8092-28245143f054',
         path='/lib/dblayer/backend/base/database.py',
         lineno=381,
         depth=13,
         type='variable',
         name='record.id',
         text='record.id = self.get_last_value_of_last_sequence_used(cursor)')

Fragment(uuid='b724a926-445e-448f-97a4-33be7ec05d06',
         path='/lib/dblayer/backend/base/database.py',
         lineno=389,
         depth=0,
         type='module',
         name='',
         text='            if serial:\n'
              '                record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n')

Fragment(uuid='5beb5d29-7124-48f0-99f0-7e23d9f76d8d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=389,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='            if serial:\n'
              '                record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n')

Fragment(uuid='6a4f70e3-9a36-4da3-be9e-b0733cadef71',
         path='/lib/dblayer/backend/base/database.py',
         lineno=389,
         depth=2,
         type='function',
         name='add_record',
         text='            if serial:\n'
              '                record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)')

Fragment(uuid='aa9d0233-50e7-4836-8faa-b6d38e546352',
         path='/lib/dblayer/backend/base/database.py',
         lineno=390,
         depth=8,
         type='variable',
         name='record.id',
         text='record.id = self.get_last_value_of_last_sequence_used(cursor)')

Fragment(uuid='55b72493-2735-47a8-b8fe-55ab1fbbe1df',
         path='/lib/dblayer/backend/base/database.py',
         lineno=391,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def add_record_list(self, record_class, record_list, '
              'generate_id, serial):\n'
              '        """ Inserts a list of records of the same type into the '
              'database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.add_record(record_class, record_list[0], '
              'generate_id, serial)\n'
              '            return\n')

Fragment(uuid='e219ef8e-aeca-4212-9531-44edaae9257b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=391,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def add_record_list(self, record_class, record_list, '
              'generate_id, serial):\n'
              '        """ Inserts a list of records of the same type into the '
              'database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.add_record(record_class, record_list[0], '
              'generate_id, serial)\n'
              '            return\n')

Fragment(uuid='23cf697d-2a80-4e37-b82e-a944bb25b4aa',
         path='/lib/dblayer/backend/base/database.py',
         lineno=392,
         depth=2,
         type='function',
         name='add_record_list',
         text='def add_record_list(self, record_class, record_list, '
              'generate_id, serial):\n'
              '        """ Inserts a list of records of the same type into the '
              'database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.add_record(record_class, record_list[0], '
              'generate_id, serial)\n'
              '            return\n')

Fragment(uuid='c67b279e-dbc4-4ea6-bd67-821af806fa06',
         path='/lib/dblayer/backend/base/database.py',
         lineno=404,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '            record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='20cfaf17-72a1-439c-88a5-8e44c27fcc9d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=404,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '            record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='a073f437-b602-48bc-83ca-e8c082701a3a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=404,
         depth=2,
         type='function',
         name='add_record_list',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '            record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='0ec0a2b4-1bd3-452a-8a52-021145239c77',
         path='/lib/dblayer/backend/base/database.py',
         lineno=410,
         depth=4,
         type='variable',
         name='table_name',
         text='table_name = record_class._table_name')

Fragment(uuid='f045d895-7baf-4e7c-b45d-56ac2599f6f1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=411,
         depth=4,
         type='variable',
         name='truncate_id',
         text='truncate_id = 1 if serial else 0')

Fragment(uuid='66d49e7c-1feb-45e5-97b3-15fc1f2cdbc0',
         path='/lib/dblayer/backend/base/database.py',
         lineno=412,
         depth=4,
         type='variable',
         name='clauses',
         text='clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])')

Fragment(uuid='16f9f8ad-7ab8-48ea-a670-f7d06d2d1c03',
         path='/lib/dblayer/backend/base/database.py',
         lineno=415,
         depth=4,
         type='variable',
         name='sql',
         text='sql = self._format.format_insert(clauses)')

Fragment(uuid='6d871141-7c31-4bb0-aa64-f2643b3fb70a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=416,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We need to catch conflicting ID values (rare, but '
              'possible)\n'
              '            try:\n'
              '                if not serial:\n'
              '                    if generate_id:\n')

Fragment(uuid='a8bd8cb3-bcb1-4251-8ffa-6acb136e2b33',
         path='/lib/dblayer/backend/base/database.py',
         lineno=416,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We need to catch conflicting ID values (rare, but '
              'possible)\n'
              '            try:\n'
              '                if not serial:\n'
              '                    if generate_id:\n')

Fragment(uuid='00bbda0d-cf5d-48d0-9e67-851107a8a307',
         path='/lib/dblayer/backend/base/database.py',
         lineno=416,
         depth=2,
         type='function',
         name='add_record_list',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We need to catch conflicting ID values (rare, but '
              'possible)\n'
              '            try:\n'
              '                if not serial:\n'
              '                    if generate_id:\n')

Fragment(uuid='bf2c9388-c5f0-424b-afec-b25f78208d2b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=423,
         depth=0,
         type='module',
         name='',
         text='                        for record in record_list:\n'
              '                            record.id = util.get_random_id()\n'
              '                    elif constants.DEBUG:\n')

Fragment(uuid='28a61aa0-66f7-4e04-8807-b8f9fef552a6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=423,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='                        for record in record_list:\n'
              '                            record.id = util.get_random_id()\n'
              '                    elif constants.DEBUG:\n')

Fragment(uuid='0513b7a5-38ce-4a8b-b806-6245af8b3969',
         path='/lib/dblayer/backend/base/database.py',
         lineno=423,
         depth=2,
         type='function',
         name='add_record_list',
         text='                        for record in record_list:\n'
              '                            record.id = util.get_random_id()\n'
              '                    elif constants.DEBUG:\n')

Fragment(uuid='aff068bf-ab96-4e32-96c7-2db0fae2ae4e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=424,
         depth=14,
         type='variable',
         name='record.id',
         text='record.id = util.get_random_id()')

Fragment(uuid='645a897a-8921-444b-bf87-4933b65bae75',
         path='/lib/dblayer/backend/base/database.py',
         lineno=426,
         depth=0,
         type='module',
         name='',
         text='                        for record in record_list:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                parameter_tuple_list = '
              '[record.tuple[truncate_id:] for record in record_list]\n')

Fragment(uuid='a15c6985-ae91-4313-bc90-163b9b14686b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=426,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='                        for record in record_list:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                parameter_tuple_list = '
              '[record.tuple[truncate_id:] for record in record_list]\n')

Fragment(uuid='637a5ab6-150d-480b-a26b-9e99b7df3e68',
         path='/lib/dblayer/backend/base/database.py',
         lineno=426,
         depth=2,
         type='function',
         name='add_record_list',
         text='                        for record in record_list:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                parameter_tuple_list = '
              '[record.tuple[truncate_id:] for record in record_list]\n')

Fragment(uuid='273e168a-aec2-487d-91c6-5f4b81cc4946',
         path='/lib/dblayer/backend/base/database.py',
         lineno=429,
         depth=8,
         type='variable',
         name='parameter_tuple_list',
         text='parameter_tuple_list = [record.tuple[truncate_id:] for record '
              'in record_list]')

Fragment(uuid='9ee406bf-7129-4bbb-8308-b3800c1c3b2c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=430,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '            except self.IntegrityError:\n')

Fragment(uuid='ae6d7acc-dd1a-443d-8ae3-00572e00de43',
         path='/lib/dblayer/backend/base/database.py',
         lineno=430,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '            except self.IntegrityError:\n')

Fragment(uuid='49b3ccfb-af7d-4eba-bab2-7f4e49ffc37e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=430,
         depth=2,
         type='function',
         name='add_record_list',
         text='\n'
              '                if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '            except self.IntegrityError:\n')

Fragment(uuid='d10d7460-f04b-4c1c-9949-3f602b2c16cd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=437,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                # Split the record list into two parts and try '
              'again\n'
              '                split_index = len(record_list) // 2\n'
              '                self.add_record_list(record_class, '
              'record_list[:split_index], generate_id, serial)\n'
              '                self.add_record_list(record_class, '
              'record_list[split_index:], generate_id, serial)\n'
              '\n'
              '            else:\n')

Fragment(uuid='ea4bb3f3-45d0-4508-9752-fb2bb151fb6c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=437,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                # Split the record list into two parts and try '
              'again\n'
              '                split_index = len(record_list) // 2\n'
              '                self.add_record_list(record_class, '
              'record_list[:split_index], generate_id, serial)\n'
              '                self.add_record_list(record_class, '
              'record_list[split_index:], generate_id, serial)\n'
              '\n'
              '            else:\n')

Fragment(uuid='5c87dbad-7c31-4281-82a0-ab7f8a4e9f9e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=437,
         depth=2,
         type='function',
         name='add_record_list',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                # Split the record list into two parts and try '
              'again\n'
              '                split_index = len(record_list) // 2\n'
              '                self.add_record_list(record_class, '
              'record_list[:split_index], generate_id, serial)\n'
              '                self.add_record_list(record_class, '
              'record_list[split_index:], generate_id, serial)\n'
              '\n'
              '            else:\n')

Fragment(uuid='b53ebb0e-3968-4b3f-8e6c-a3ee5c35ee7d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=442,
         depth=9,
         type='variable',
         name='split_index',
         text='split_index = len(record_list) // 2')

Fragment(uuid='03516210-73b3-416f-b457-e978299ab208',
         path='/lib/dblayer/backend/base/database.py',
         lineno=447,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '            # Fill in id field of each record object\n')

Fragment(uuid='8a78bcef-5380-40c7-8d0c-430ea360f8fb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=447,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '            # Fill in id field of each record object\n')

Fragment(uuid='ce14f1cd-b942-414d-a536-4ff496c5ace1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=447,
         depth=2,
         type='function',
         name='add_record_list',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '            # Fill in id field of each record object\n')

Fragment(uuid='2310ca62-030e-4db5-8f94-6bdafd6c10e4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=452,
         depth=0,
         type='module',
         name='',
         text='            if serial:\n'
              '                last_id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '                first_id = last_id - len(record_list) + 1\n')

Fragment(uuid='f3f91476-5d14-4355-9222-91eac1972fe2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=452,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='            if serial:\n'
              '                last_id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '                first_id = last_id - len(record_list) + 1\n')

Fragment(uuid='b687827e-b9be-4f31-8d9a-87730ce049e6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=452,
         depth=2,
         type='function',
         name='add_record_list',
         text='            if serial:\n'
              '                last_id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '                first_id = last_id - len(record_list) + 1\n')

Fragment(uuid='ff1f103f-d93d-40bf-b6c9-c6cf3b0a3c4d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=453,
         depth=8,
         type='variable',
         name='last_id',
         text='last_id = self.get_last_value_of_last_sequence_used(cursor)')

Fragment(uuid='47a06ef4-a4b6-40f3-9940-7c603afebe75',
         path='/lib/dblayer/backend/base/database.py',
         lineno=454,
         depth=8,
         type='variable',
         name='first_id',
         text='first_id = last_id - len(record_list) + 1')

Fragment(uuid='342ce6ed-c5f4-480e-935b-ae7668ed4137',
         path='/lib/dblayer/backend/base/database.py',
         lineno=455,
         depth=0,
         type='module',
         name='',
         text='                for record_index, record in '
              'enumerate(record_list):\n'
              '                    record.id = first_id + record_index\n'
              '\n'
              '    ### Update query helpers\n')

Fragment(uuid='10ec79c4-2054-488b-bbe3-1fc57a217508',
         path='/lib/dblayer/backend/base/database.py',
         lineno=455,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='                for record_index, record in '
              'enumerate(record_list):\n'
              '                    record.id = first_id + record_index\n'
              '\n'
              '    ### Update query helpers\n')

Fragment(uuid='fa870695-c5c2-4d9e-aa69-55410c56c81d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=455,
         depth=2,
         type='function',
         name='add_record_list',
         text='                for record_index, record in '
              'enumerate(record_list):\n'
              '                    record.id = first_id + record_index')

Fragment(uuid='21941df7-eedc-4200-b146-dc159abc126a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=456,
         depth=10,
         type='variable',
         name='record.id',
         text='record.id = first_id + record_index')

Fragment(uuid='0703d31d-7bdf-4cac-8b1e-0ff2d622025d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=459,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def update_record(self, record_class, record):\n'
              '        """ Updates a record already in the database\n'
              '        """\n')

Fragment(uuid='b533720c-8bce-4973-978a-ec91263b674a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=459,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def update_record(self, record_class, record):\n'
              '        """ Updates a record already in the database\n'
              '        """\n')

Fragment(uuid='da569251-4419-41fa-b92d-e4a83bf108e7',
         path='/lib/dblayer/backend/base/database.py',
         lineno=460,
         depth=2,
         type='function',
         name='update_record',
         text='def update_record(self, record_class, record):\n'
              '        """ Updates a record already in the database\n'
              '        """\n')

Fragment(uuid='790683db-ada1-468b-891a-44c653fba07c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=463,
         depth=0,
         type='module',
         name='',
         text='        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "            assert record.id is not None, 'Cannot update record "
              "which has not been added to the database!'\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple = record.tuple[1:] + (record.id,)\n')

Fragment(uuid='120800e6-77ff-4b3d-a998-16705d372d2d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=463,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "            assert record.id is not None, 'Cannot update record "
              "which has not been added to the database!'\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple = record.tuple[1:] + (record.id,)\n')

Fragment(uuid='63a58ae2-ef1d-474a-885d-bc41c9c285c3',
         path='/lib/dblayer/backend/base/database.py',
         lineno=463,
         depth=2,
         type='function',
         name='update_record',
         text='        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "            assert record.id is not None, 'Cannot update record "
              "which has not been added to the database!'\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple = record.tuple[1:] + (record.id,)\n')

Fragment(uuid='940dc3b5-75cc-4b77-af13-b0b6d662bbb1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=470,
         depth=4,
         type='variable',
         name='clauses',
         text='clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')")

Fragment(uuid='6d5ce1ea-c0dd-4b5e-89c0-6b8e3f11f1b7',
         path='/lib/dblayer/backend/base/database.py',
         lineno=474,
         depth=4,
         type='variable',
         name='sql',
         text='sql = self._format.format_update(clauses)')

Fragment(uuid='b1aefee8-b509-420a-a389-3a4289dfb915',
         path='/lib/dblayer/backend/base/database.py',
         lineno=476,
         depth=4,
         type='variable',
         name='parameter_tuple',
         text='parameter_tuple = record.tuple[1:] + (record.id,)')

Fragment(uuid='228d9d1f-6a9b-4061-bf61-4043a447e513',
         path='/lib/dblayer/backend/base/database.py',
         lineno=477,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)\n')

Fragment(uuid='2ae1f4cd-2e26-43ae-b432-dc9f0a51591c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=477,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)\n')

Fragment(uuid='e4685020-8155-4a02-8cb1-670807ccf5ed',
         path='/lib/dblayer/backend/base/database.py',
         lineno=477,
         depth=2,
         type='function',
         name='update_record',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)')

Fragment(uuid='da2a19fc-836b-4537-84c5-758aaf43b900',
         path='/lib/dblayer/backend/base/database.py',
         lineno=480,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def update_record_list(self, record_class, record_list):\n'
              '        """ Updates a list of records already in the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.update_record(record_class, record_list[0])\n'
              '            return\n')

Fragment(uuid='600c80dd-0f31-4ebb-8666-a7c7cf89b3ee',
         path='/lib/dblayer/backend/base/database.py',
         lineno=480,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def update_record_list(self, record_class, record_list):\n'
              '        """ Updates a list of records already in the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.update_record(record_class, record_list[0])\n'
              '            return\n')

Fragment(uuid='fd95991b-c00a-4c78-8bab-e13549b9c7e6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=481,
         depth=2,
         type='function',
         name='update_record_list',
         text='def update_record_list(self, record_class, record_list):\n'
              '        """ Updates a list of records already in the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.update_record(record_class, record_list[0])\n'
              '            return\n')

Fragment(uuid='584352d5-34b9-4a31-bf06-0d0d44961f83',
         path='/lib/dblayer/backend/base/database.py',
         lineno=493,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "                assert record.id is not None, 'Cannot update "
              "record which has not been added to the database!'\n"
              '            record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            record.tuple[1:] + (record.id,)\n')

Fragment(uuid='604cc967-50ff-4b90-850d-6a259d92c1a7',
         path='/lib/dblayer/backend/base/database.py',
         lineno=493,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "                assert record.id is not None, 'Cannot update "
              "record which has not been added to the database!'\n"
              '            record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            record.tuple[1:] + (record.id,)\n')

Fragment(uuid='fc2e37e9-bff2-47f5-98e7-88ca639ee55a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=493,
         depth=2,
         type='function',
         name='update_record_list',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "                assert record.id is not None, 'Cannot update "
              "record which has not been added to the database!'\n"
              '            record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            record.tuple[1:] + (record.id,)\n')

Fragment(uuid='275e9a8b-632e-42e4-862f-41ce274c0a14',
         path='/lib/dblayer/backend/base/database.py',
         lineno=500,
         depth=4,
         type='variable',
         name='clauses',
         text='clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')")

Fragment(uuid='6c9e727a-3521-476d-8fc3-9695fe7f5be3',
         path='/lib/dblayer/backend/base/database.py',
         lineno=504,
         depth=4,
         type='variable',
         name='sql',
         text='sql = self._format.format_update(clauses)')

Fragment(uuid='c6e7cfa0-d441-453b-9c9e-202c96847a2e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=506,
         depth=4,
         type='variable',
         name='parameter_tuple_list',
         text='parameter_tuple_list = [\n'
              '            record.tuple[1:] + (record.id,)\n'
              '            for record in record_list]')

Fragment(uuid='781c6ee4-d267-4841-a209-b9d6c090b984',
         path='/lib/dblayer/backend/base/database.py',
         lineno=508,
         depth=0,
         type='module',
         name='',
         text='            for record in record_list]\n')

Fragment(uuid='8437f49f-02fa-4a0f-b9d3-952c694a3930',
         path='/lib/dblayer/backend/base/database.py',
         lineno=508,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='            for record in record_list]\n')

Fragment(uuid='8e4f22bb-04c8-443b-8b84-81497a309930',
         path='/lib/dblayer/backend/base/database.py',
         lineno=508,
         depth=2,
         type='function',
         name='update_record_list',
         text='            for record in record_list]\n')

Fragment(uuid='977daacb-f045-46b3-8c0c-ec63fa8e7eeb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=509,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '    ### Delete query helpers\n')

Fragment(uuid='063457dd-0d4b-4983-9ccb-3b8ce52abea2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=509,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '    ### Delete query helpers\n')

Fragment(uuid='f04b03f0-12f6-4675-bfe5-f2236a6973d3',
         path='/lib/dblayer/backend/base/database.py',
         lineno=509,
         depth=2,
         type='function',
         name='update_record_list',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, parameter_tuple_list)')

Fragment(uuid='0e53b339-ab75-4c86-a220-a8392979900e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=514,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def delete_record(self, record_class, record_or_id):\n'
              '        """ Deletes a record from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple = (record_or_id.id if '
              'isinstance(record_or_id, record_class) else record_or_id,)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)\n')

Fragment(uuid='0baaadaa-6129-45b7-9393-5e572c57ca13',
         path='/lib/dblayer/backend/base/database.py',
         lineno=514,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def delete_record(self, record_class, record_or_id):\n'
              '        """ Deletes a record from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple = (record_or_id.id if '
              'isinstance(record_or_id, record_class) else record_or_id,)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)\n')

Fragment(uuid='75fcb4e0-6911-4891-a6fc-0ad4c4f6b07e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=515,
         depth=2,
         type='function',
         name='delete_record',
         text='def delete_record(self, record_class, record_or_id):\n'
              '        """ Deletes a record from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple = (record_or_id.id if '
              'isinstance(record_or_id, record_class) else record_or_id,)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)')

Fragment(uuid='436c3097-7ccf-41aa-87ed-355ca48cf27c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=521,
         depth=4,
         type='variable',
         name='clauses',
         text='clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')")

Fragment(uuid='7fba5b74-a96b-4366-94c4-58a050669370',
         path='/lib/dblayer/backend/base/database.py',
         lineno=524,
         depth=4,
         type='variable',
         name='sql',
         text='sql = self._format.format_delete(clauses)')

Fragment(uuid='4d7ef0d8-4397-4a07-af12-6db91a8c17d6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=526,
         depth=4,
         type='variable',
         name='parameter_tuple',
         text='parameter_tuple = (record_or_id.id if isinstance(record_or_id, '
              'record_class) else record_or_id,)')

Fragment(uuid='4a68b634-423a-478f-91af-7701a1181d42',
         path='/lib/dblayer/backend/base/database.py',
         lineno=530,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def delete_record_list(self, record_class, '
              'record_or_id_list):\n'
              '        """ Deletes a list of records from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            (record_or_id.id if isinstance(record_or_id, '
              'record_class) else record_or_id,)\n'
              '            for record_or_id in record_or_id_list]\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '    ### Create helpers\n')

Fragment(uuid='5b7bd658-939f-4137-9db5-66e6ee742f2c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=530,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def delete_record_list(self, record_class, '
              'record_or_id_list):\n'
              '        """ Deletes a list of records from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            (record_or_id.id if isinstance(record_or_id, '
              'record_class) else record_or_id,)\n'
              '            for record_or_id in record_or_id_list]\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '    ### Create helpers\n')

Fragment(uuid='f792e341-350d-43b7-9d4d-f938dc09f19f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=531,
         depth=2,
         type='function',
         name='delete_record_list',
         text='def delete_record_list(self, record_class, record_or_id_list):\n'
              '        """ Deletes a list of records from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            (record_or_id.id if isinstance(record_or_id, '
              'record_class) else record_or_id,)\n'
              '            for record_or_id in record_or_id_list]\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, parameter_tuple_list)')

Fragment(uuid='6dadd0cb-6263-4e73-b659-185b3dddcc30',
         path='/lib/dblayer/backend/base/database.py',
         lineno=537,
         depth=4,
         type='variable',
         name='clauses',
         text='clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')")

Fragment(uuid='b7594fbc-88a1-4367-9943-ab06e55afe18',
         path='/lib/dblayer/backend/base/database.py',
         lineno=540,
         depth=4,
         type='variable',
         name='sql',
         text='sql = self._format.format_delete(clauses)')

Fragment(uuid='764c299f-95a8-47bb-a006-3a8e060a79c2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=542,
         depth=4,
         type='variable',
         name='parameter_tuple_list',
         text='parameter_tuple_list = [\n'
              '            (record_or_id.id if isinstance(record_or_id, '
              'record_class) else record_or_id,)\n'
              '            for record_or_id in record_or_id_list]')

Fragment(uuid='ef498bc5-330f-489b-afb5-0b78656c168c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=550,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def create_language(self, language, ignore_errors=True):\n'
              '        """ Creates a procedural language\n'
              '        """\n'
              '        with self.cursor() as cursor:\n'
              "            statement_list = [('CREATE LANGUAGE %s' % "
              'self._format.quote_name(language), ())]\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '\n'
              '    ### Debug helpers\n')

Fragment(uuid='3ff73a38-8ae7-4ac9-98ba-8f5b3a409caa',
         path='/lib/dblayer/backend/base/database.py',
         lineno=550,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def create_language(self, language, ignore_errors=True):\n'
              '        """ Creates a procedural language\n'
              '        """\n'
              '        with self.cursor() as cursor:\n'
              "            statement_list = [('CREATE LANGUAGE %s' % "
              'self._format.quote_name(language), ())]\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '\n'
              '    ### Debug helpers\n')

Fragment(uuid='b054fa5f-51a0-4ebe-adf9-c2515b4467db',
         path='/lib/dblayer/backend/base/database.py',
         lineno=551,
         depth=2,
         type='function',
         name='create_language',
         text='def create_language(self, language, ignore_errors=True):\n'
              '        """ Creates a procedural language\n'
              '        """\n'
              '        with self.cursor() as cursor:\n'
              "            statement_list = [('CREATE LANGUAGE %s' % "
              'self._format.quote_name(language), ())]\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='972798c6-9a87-4691-b05f-e90db325d603',
         path='/lib/dblayer/backend/base/database.py',
         lineno=555,
         depth=6,
         type='variable',
         name='statement_list',
         text="statement_list = [('CREATE LANGUAGE %s' % "
              'self._format.quote_name(language), ())]')

Fragment(uuid='62189c38-f319-498e-8697-33ab8f8a51fe',
         path='/lib/dblayer/backend/base/database.py',
         lineno=559,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def log_analysis(self, cursor, sql, parameter_tuple):\n'
              '        """ Logs analysis of an SQL statement\n'
              '        """\n'
              "        cursor.execute('EXPLAIN ' + sql, parameter_tuple)\n"
              '        util.log(\n'
              "            'Analyzing query:\\n'\n"
              "            '%s\\n'\n"
              "            'With parameters: %r\\n'\n"
              "            '%s',\n"
              '            sql,\n'
              '            parameter_tuple,\n'
              "            '\\n'.join(row[0] for row in cursor.fetchall()))\n")

Fragment(uuid='bb907d47-1e18-43d8-9333-e5f8266635fe',
         path='/lib/dblayer/backend/base/database.py',
         lineno=559,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def log_analysis(self, cursor, sql, parameter_tuple):\n'
              '        """ Logs analysis of an SQL statement\n'
              '        """\n'
              "        cursor.execute('EXPLAIN ' + sql, parameter_tuple)\n"
              '        util.log(\n'
              "            'Analyzing query:\\n'\n"
              "            '%s\\n'\n"
              "            'With parameters: %r\\n'\n"
              "            '%s',\n"
              '            sql,\n'
              '            parameter_tuple,\n'
              "            '\\n'.join(row[0] for row in cursor.fetchall()))")

Fragment(uuid='ea5918c8-225c-4fae-b54f-f89712688c39',
         path='/lib/dblayer/backend/base/database.py',
         lineno=560,
         depth=2,
         type='function',
         name='log_analysis',
         text='def log_analysis(self, cursor, sql, parameter_tuple):\n'
              '        """ Logs analysis of an SQL statement\n'
              '        """\n'
              "        cursor.execute('EXPLAIN ' + sql, parameter_tuple)\n"
              '        util.log(\n'
              "            'Analyzing query:\\n'\n"
              "            '%s\\n'\n"
              "            'With parameters: %r\\n'\n"
              "            '%s',\n"
              '            sql,\n'
              '            parameter_tuple,\n'
              "            '\\n'.join(row[0] for row in cursor.fetchall()))")

Fragment(uuid='e9ef95b1-2625-4796-8468-27432c1e564f',
         path='/lib/dblayer/backend/base/error.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Exception classes (errors)\n"""\n')

Fragment(uuid='8ef688ef-49a4-4d39-a0d7-93d4b2a21b72',
         path='/lib/dblayer/backend/base/error.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/base/error.py\n'
              '  Classes: DataError DatabaseError Error IntegrityError '
              'InterfaceError InternalError NotSupportedError OperationalError '
              'ProgrammingError Warning\n'
              '  Usages: Exception\n')

Fragment(uuid='850e113a-c651-49b1-8abf-86b73e731e12',
         path='/lib/dblayer/backend/base/error.py',
         lineno=3,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Warning(Exception):\n'
              '    """ Database warning\n'
              '    """\n')

Fragment(uuid='1b7074d1-3b28-4c99-91aa-3444f488ae43',
         path='/lib/dblayer/backend/base/error.py',
         lineno=5,
         depth=0,
         type='class',
         name='Warning',
         text='class Warning(Exception):\n    """ Database warning\n    """')

Fragment(uuid='23b28e7f-d776-4c8e-a7bf-91042dd25a97',
         path='/lib/dblayer/backend/base/error.py',
         lineno=8,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Error(Exception):\n'
              '    """ Base class for error exceptions\n'
              '    """\n')

Fragment(uuid='ffebc5a9-1108-4c36-a307-a30acfbb9d1b',
         path='/lib/dblayer/backend/base/error.py',
         lineno=10,
         depth=0,
         type='class',
         name='Error',
         text='class Error(Exception):\n'
              '    """ Base class for error exceptions\n'
              '    """')

Fragment(uuid='0002b419-ef8f-4973-8e6d-8c4fc01f8dbd',
         path='/lib/dblayer/backend/base/error.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class InterfaceError(Error):\n'
              '    """ Error related to the database interface\n'
              '    """\n')

Fragment(uuid='a784a15f-13b2-41d7-a75e-fd5dab802ff1',
         path='/lib/dblayer/backend/base/error.py',
         lineno=15,
         depth=0,
         type='class',
         name='InterfaceError',
         text='class InterfaceError(Error):\n'
              '    """ Error related to the database interface\n'
              '    """')

Fragment(uuid='8e0f963a-20d5-4a34-b14d-4b6ee513238b',
         path='/lib/dblayer/backend/base/error.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class DatabaseError(Error):\n'
              '    """ Error related to the database engine\n'
              '    """\n')

Fragment(uuid='2b330f2b-6fac-4731-be43-d05a915f2463',
         path='/lib/dblayer/backend/base/error.py',
         lineno=20,
         depth=0,
         type='class',
         name='DatabaseError',
         text='class DatabaseError(Error):\n'
              '    """ Error related to the database engine\n'
              '    """')

Fragment(uuid='d247b191-cf1b-4cfe-a3a0-1b9b7411a7f7',
         path='/lib/dblayer/backend/base/error.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class DataError(DatabaseError):\n'
              '    """ Error related to problems with the processed data\n'
              '    """\n')

Fragment(uuid='cca2d7a9-f57a-4393-a595-08c9e837a152',
         path='/lib/dblayer/backend/base/error.py',
         lineno=25,
         depth=0,
         type='class',
         name='DataError',
         text='class DataError(DatabaseError):\n'
              '    """ Error related to problems with the processed data\n'
              '    """')

Fragment(uuid='67f13d97-7aea-4be5-873e-97b37f8a90a1',
         path='/lib/dblayer/backend/base/error.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class OperationalError(DatabaseError):\n'
              '    """ Error related to database operation (disconnect, memory '
              'allocation etc)\n'
              '    """\n')

Fragment(uuid='1bffcf18-5e2f-47f1-86d5-c67addd5c73a',
         path='/lib/dblayer/backend/base/error.py',
         lineno=30,
         depth=0,
         type='class',
         name='OperationalError',
         text='class OperationalError(DatabaseError):\n'
              '    """ Error related to database operation (disconnect, memory '
              'allocation etc)\n'
              '    """')

Fragment(uuid='22352256-5459-4e66-8d21-4d99e2f97d15',
         path='/lib/dblayer/backend/base/error.py',
         lineno=33,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class IntegrityError(DatabaseError):\n'
              '    """ Error related to database integrity\n'
              '    """\n')

Fragment(uuid='b7dc3926-8f11-4eca-bf50-08214be15233',
         path='/lib/dblayer/backend/base/error.py',
         lineno=35,
         depth=0,
         type='class',
         name='IntegrityError',
         text='class IntegrityError(DatabaseError):\n'
              '    """ Error related to database integrity\n'
              '    """')

Fragment(uuid='d27eef0e-aa3a-4473-b71b-39a612d0d700',
         path='/lib/dblayer/backend/base/error.py',
         lineno=38,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class InternalError(DatabaseError):\n'
              '    """ The database encountered an internal error\n'
              '    """\n')

Fragment(uuid='e2e12f8e-2cf3-4dc1-99ce-e639e259f2be',
         path='/lib/dblayer/backend/base/error.py',
         lineno=40,
         depth=0,
         type='class',
         name='InternalError',
         text='class InternalError(DatabaseError):\n'
              '    """ The database encountered an internal error\n'
              '    """')

Fragment(uuid='09c15b0e-7019-4bdf-92f7-8bf2eb9880f4',
         path='/lib/dblayer/backend/base/error.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class ProgrammingError(DatabaseError):\n'
              '    """ Error related to database programming (SQL error, table '
              'not found etc)\n'
              '    """\n')

Fragment(uuid='0be2e958-4ddb-4a7b-8a2b-c9ee77d15fbd',
         path='/lib/dblayer/backend/base/error.py',
         lineno=45,
         depth=0,
         type='class',
         name='ProgrammingError',
         text='class ProgrammingError(DatabaseError):\n'
              '    """ Error related to database programming (SQL error, table '
              'not found etc)\n'
              '    """')

Fragment(uuid='16d8eb4c-6cc9-4696-b9b0-3c34f2697ca4',
         path='/lib/dblayer/backend/base/error.py',
         lineno=48,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class NotSupportedError(DatabaseError):\n'
              '    """ A method or database API was used which is not '
              'supported by the database\n'
              '    """\n')

Fragment(uuid='a45665dd-65d9-4142-b62f-46b14713bace',
         path='/lib/dblayer/backend/base/error.py',
         lineno=50,
         depth=0,
         type='class',
         name='NotSupportedError',
         text='class NotSupportedError(DatabaseError):\n'
              '    """ A method or database API was used which is not '
              'supported by the database\n'
              '    """')

Fragment(uuid='b17e3f9d-7322-4357-8848-39c0dc7d1801',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Functions formatting pieces of SQL statements\n'
              '"""\n'
              '\n'
              'import datetime\n'
              '\n'
              'import dblayer\n'
              'from dblayer import constants\n'
              '\n'
              'NA = constants.NA\n'
              '\n'
              '\n'
              '### Quoting and escaping\n')

Fragment(uuid='d9025a04-c631-48c3-9f43-8235f21c5670',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/base/format.py\n'
              '  Functions: format_add_function format_and_function '
              'format_avg_aggregate format_boolean_column '
              'format_check_constraint format_coalesce_function format_column '
              'format_concat_function format_constraint '
              'format_contains_function format_count_aggregate '
              'format_create_btree_index format_create_full_text_search_index '
              'format_create_index format_create_procedure format_create_table '
              'format_create_trigger format_cross_join_group_list '
              'format_custom_column format_custom_function format_date_column '
              'format_datetime_column format_decimal_column '
              'format_default_not_null format_delete format_div_function '
              'format_drop_btree_index format_drop_full_text_search_index '
              'format_drop_index format_drop_procedure format_drop_table '
              'format_drop_trigger format_eq_condition format_equal_function '
              'format_expression format_float_column format_foreign_key_column '
              'format_foreign_key_constraint format_full_text_search_function '
              'format_function format_ge_condition '
              'format_greater_than_function '
              'format_greater_than_or_equal_function format_gt_condition '
              'format_in_condition format_in_function format_insert '
              'format_integer_column format_le_condition format_left_function '
              'format_less_than_function format_less_than_or_equal_function '
              'format_like_condition format_like_function format_lt_condition '
              'format_match_condition format_match_function '
              'format_max_aggregate format_min_aggregate format_mul_function '
              'format_ne_condition format_neg_function '
              'format_not_equal_function format_not_function '
              'format_not_in_condition format_not_in_function '
              'format_not_in_range_condition format_not_like_condition '
              'format_not_like_function format_not_match_condition '
              'format_not_match_function format_not_similar_to_condition '
              'format_or_function format_order_by format_primary_key_column '
              'format_primary_key_constraint format_query '
              'format_query_condition format_query_condition_map '
              'format_query_order_by_map format_range_condition '
              'format_release_savepoint format_result format_right_function '
              'format_rollback_to_savepoint format_savepoint '
              'format_search_condition format_search_document_column '
              'format_select format_similar_to_condition format_sub_function '
              'format_substring_function format_sum_aggregate '
              'format_table_column_condition format_table_condition_map '
              'format_table_order_by_map format_text_column '
              'format_truncate_table format_truncate_table_list '
              'format_unique_constraint format_update format_var_function '
              'quote_alias_name quote_literal_value quote_name '
              'quote_table_column_name replace_parameter_placeholders\n'
              '  Variables: (table_name, COLUMN_FORMATTER_MAP '
              'CONSTRAINT_FORMATTER_MAP CREATE_INDEX_FORMATTER_MAP '
              'DROP_INDEX_FORMATTER_MAP FUNCTION_FORMATTER_MAP NA '
              'QUERY_CONDITION_OPERATOR_LIST TRIGGER_FORMATTER_MAP '
              'argument_name cache[clauses] clause clauses condition '
              'condition_map create_index_sql create_procedure_sql '
              'create_trigger_sql cross_join_group_list definition, '
              'definition_list document_expression fk_column fk_column_name '
              'formatted_order_by formatter from_list having '
              'having_condition_map index_name join_group lower_limit, name '
              "order_by_map order_by_map['+' order_by_map['-' "
              'order_by_map[name] parameter_list pk_column procedure_name '
              'quoted_table_name referenced_table split_sql split_sql[i] sql '
              'sql_expression sql_expression, statements suffix, table '
              'table_name table_name, timing, trigger_name value '
              'value_expression variables where where_condition_map\n'
              '  Usages: Add AfterDeleteRow AfterDeleteStatement '
              'AfterInsertOrUpdateRow AfterInsertOrUpdateStatement '
              'AfterInsertRow AfterInsertStatement AfterUpdateRow '
              'AfterUpdateStatement And Avg BaseColumn BaseConstraint '
              'BaseFunction BaseIndex BaseProcedure BaseQueryResult '
              'BaseTrigger BeforeDeleteRow BeforeDeleteStatement '
              'BeforeInsertOrUpdateRow BeforeInsertOrUpdateStatement '
              'BeforeInsertRow BeforeInsertStatement BeforeUpdateRow '
              'BeforeUpdateStatement Boolean Check Clauses Coalesce Concat '
              'Contains Count Custom DEBUG Date Datetime Decimal Div Equal '
              'Float ForeignKey FullTextSearch FullTextSearchIndex GreaterThan '
              'GreaterThanOrEqual In Index Integer JOIN_TYPES Left LessThan '
              'LessThanOrEqual Like Match Max Min Mul Neg Not NotEqual NotIn '
              'NotLike NotMatch Or PrimaryKey Result Right SearchDocument Sub '
              'Substring Sum Table Text TypeError Unique ValueError Var '
              '__class__ __name__ _column_list _condition_list '
              '_constraint_list _index_list _name _primary_key _writable '
              'abstract_sql_column_type after_group_by alias alias_name append '
              'args argument_list backend base body bool cache cascade column '
              'column_name columns constaint constants constraint database '
              'date datetime days dblayer default definition dict digits '
              'double event expression extend field_list fk_field_name float '
              'formatting_function function get getattr group_by id_field_name '
              'index int isinstance isoformat items join join_type language '
              'len limit list lower_limit map maxlength microseconds model '
              'new_parameters null offset order_by parameter_tuple precision '
              'procedure procedure_parameters query query_result range '
              'referer_table_name replace repr result runtime_conditions '
              'runtime_having_condition runtime_where_condition scale scope '
              'search_document_column_name seconds serial source split '
              'sql_parameters sql_type str suffix table_class table_list time '
              'timedelta timing trigger tuple update upper_limit\n')

Fragment(uuid='cd43b4c6-3bef-43e4-881c-83c1759c4e79',
         path='/lib/dblayer/backend/base/format.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import datetime')

Fragment(uuid='90b1b5ae-f12f-4029-8b33-20de3b8e2f52',
         path='/lib/dblayer/backend/base/format.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='import dblayer')

Fragment(uuid='6d912d41-54de-4c6a-8be0-7c98570e354a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=7,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import constants')

Fragment(uuid='4010d4ac-96df-48ef-b49f-9fdbafcd3acc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=9,
         depth=0,
         type='variable',
         name='NA',
         text='NA = constants.NA')

Fragment(uuid='7d3939d0-5336-4bb0-a9cf-ae7836ff1dd2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def quote_name(name):\n'
              '    """ Quotes a table or field name for use in SQL statements\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert \'"\' not in name, \'Names must not contain '
              "double quotes!'\n"
              "        assert '\\\\' not in repr(name), (\n"
              "            'Names must not contain special characters which "
              "need to be escaped!')\n"
              '    return \'"%s"\' % name\n')

Fragment(uuid='f768adf3-2467-4eaa-a7fc-88983daaaf0d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=14,
         depth=0,
         type='function',
         name='quote_name',
         text='def quote_name(name):\n'
              '    """ Quotes a table or field name for use in SQL statements\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert \'"\' not in name, \'Names must not contain '
              "double quotes!'\n"
              "        assert '\\\\' not in repr(name), (\n"
              "            'Names must not contain special characters which "
              "need to be escaped!')\n"
              '    return \'"%s"\' % name')

Fragment(uuid='9a959ca9-904a-4d48-992d-5cacc616fa96',
         path='/lib/dblayer/backend/base/format.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def quote_alias_name(name, alias):\n'
              '    """ Quotes aliased table or field name for use in SQL '
              'statements\n'
              '    """\n'
              "    return '%s AS %s' % (quote_name(name), quote_name(alias))\n")

Fragment(uuid='ea182ea2-0e37-4dc7-beab-c15a9bf5f7cc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=24,
         depth=0,
         type='function',
         name='quote_alias_name',
         text='def quote_alias_name(name, alias):\n'
              '    """ Quotes aliased table or field name for use in SQL '
              'statements\n'
              '    """\n'
              "    return '%s AS %s' % (quote_name(name), quote_name(alias))")

Fragment(uuid='59fb55ad-da18-469a-8222-1a6f15027d67',
         path='/lib/dblayer/backend/base/format.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def quote_table_column_name(table_name, column_name):\n'
              '    """ Quotes a column reference\n'
              '    """\n'
              "    return '%s.%s' % (quote_name(table_name), "
              'quote_name(column_name))\n')

Fragment(uuid='68baee8a-e4ff-4e2b-be25-e8392f13ebb5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=30,
         depth=0,
         type='function',
         name='quote_table_column_name',
         text='def quote_table_column_name(table_name, column_name):\n'
              '    """ Quotes a column reference\n'
              '    """\n'
              "    return '%s.%s' % (quote_name(table_name), "
              'quote_name(column_name))')

Fragment(uuid='155ee5ed-da3d-435e-bea9-e3bd47055eb7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def quote_literal_value(value):\n'
              '    """ Quotes a literal value for use in SQL statements\n'
              '    """\n')

Fragment(uuid='7ce3d57f-21bc-421a-bb1f-8a03b2d5ce10',
         path='/lib/dblayer/backend/base/format.py',
         lineno=36,
         depth=0,
         type='function',
         name='quote_literal_value',
         text='def quote_literal_value(value):\n'
              '    """ Quotes a literal value for use in SQL statements\n'
              '    """\n')

Fragment(uuid='49f8e8bb-d2a4-43db-8e68-90e2a5f14e62',
         path='/lib/dblayer/backend/base/format.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text="    if value is None:\n        return 'NULL'\n")

Fragment(uuid='d82384b0-16d2-4b7f-9a8f-efa75a4690f2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=39,
         depth=0,
         type='function',
         name='quote_literal_value',
         text="    if value is None:\n        return 'NULL'\n")

Fragment(uuid='9040db0a-c553-461e-b008-1beec4ea080c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, str):\n'
              '        return "E\'%s\'" % repr(value)[2: -1].replace("\'", '
              '"\'\'")\n')

Fragment(uuid='9b9ecc93-13ad-4968-9ebc-804b3877af0c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=41,
         depth=0,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, str):\n'
              '        return "E\'%s\'" % repr(value)[2: -1].replace("\'", '
              '"\'\'")\n')

Fragment(uuid='7f27d36d-2e41-4202-99e7-88b1031ac5a9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, bool):\n'
              "        return 'true' if value else 'false'\n")

Fragment(uuid='21e57bf4-dd7c-4c34-a440-c585368e443d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=43,
         depth=0,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, bool):\n'
              "        return 'true' if value else 'false'\n")

Fragment(uuid='25db230f-7f04-4104-b07a-b7b2231c5273',
         path='/lib/dblayer/backend/base/format.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, (int, float)):\n'
              '        return str(value)\n')

Fragment(uuid='0b3a0c3b-1339-4b10-94f0-e539440af28b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=45,
         depth=0,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, (int, float)):\n'
              '        return str(value)\n')

Fragment(uuid='526e3269-fae8-451b-9a34-8e72dc92a4b1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, (datetime.time, datetime.date, '
              'datetime.datetime)):\n'
              '        return repr(value.isoformat())\n')

Fragment(uuid='1f657258-0ab4-423f-a00e-41c8f1345ac5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=47,
         depth=0,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, (datetime.time, datetime.date, '
              'datetime.datetime)):\n'
              '        return repr(value.isoformat())\n')

Fragment(uuid='9fab2008-33a8-430c-b586-cb93fcb8eb93',
         path='/lib/dblayer/backend/base/format.py',
         lineno=49,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, datetime.timedelta):\n'
              "        return repr('%d day %f sec' % (value.days, "
              'value.seconds + 1e-6 * value.microseconds))\n')

Fragment(uuid='2117e28e-5dca-42df-a6cc-529534166369',
         path='/lib/dblayer/backend/base/format.py',
         lineno=49,
         depth=0,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, datetime.timedelta):\n'
              "        return repr('%d day %f sec' % (value.days, "
              'value.seconds + 1e-6 * value.microseconds))\n')

Fragment(uuid='88427379-3a34-4151-bd8b-1adbbd13d0fb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=51,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, (tuple, list)):\n'
              "        return '(%s)' % (', '.join(map(quote_literal_value, "
              'value)))\n'
              "    raise ValueError('Cannot quote literal value: %r' % "
              '(value,))\n'
              '\n'
              '\n'
              '### Handling of parameter placeholders\n')

Fragment(uuid='bd0a3f4d-610e-49d7-9810-9a28a4f6e630',
         path='/lib/dblayer/backend/base/format.py',
         lineno=51,
         depth=0,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, (tuple, list)):\n'
              "        return '(%s)' % (', '.join(map(quote_literal_value, "
              'value)))\n'
              "    raise ValueError('Cannot quote literal value: %r' % "
              '(value,))')

Fragment(uuid='d02ad95b-30cd-4136-9f3c-b0ee45c264bd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=57,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def replace_parameter_placeholders(sql):\n'
              '    """ Replaces ? with the parameter placeholder acceptable by '
              'the database server\n'
              '    """\n'
              '    # NOTE: It does not replace inside string literals\n'
              '    split_sql = sql.split("\'")\n'
              '    for i in range(0, len(split_sql), 2):\n'
              "        split_sql[i] = split_sql[i].replace('?', '%s')\n"
              '    return "\'".join(split_sql)\n'
              '\n'
              '\n'
              '### Formatting of column definitions based on the database '
              'model\n')

Fragment(uuid='857ef1d2-17f6-4662-89bc-8ca4cd081a22',
         path='/lib/dblayer/backend/base/format.py',
         lineno=58,
         depth=0,
         type='function',
         name='replace_parameter_placeholders',
         text='def replace_parameter_placeholders(sql):\n'
              '    """ Replaces ? with the parameter placeholder acceptable by '
              'the database server\n'
              '    """\n'
              '    # NOTE: It does not replace inside string literals\n'
              '    split_sql = sql.split("\'")\n'
              '    for i in range(0, len(split_sql), 2):\n'
              "        split_sql[i] = split_sql[i].replace('?', '%s')\n"
              '    return "\'".join(split_sql)')

Fragment(uuid='3f028856-e8e1-4990-a041-bed0395488f4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=62,
         depth=2,
         type='variable',
         name='split_sql',
         text='split_sql = sql.split("\'")')

Fragment(uuid='25196481-5f2f-4d81-8ea5-e7362584ff09',
         path='/lib/dblayer/backend/base/format.py',
         lineno=64,
         depth=4,
         type='variable',
         name='split_sql[i]',
         text="split_sql[i] = split_sql[i].replace('?', '%s')")

Fragment(uuid='4bc6e23d-b48e-4970-99d8-142c38420b16',
         path='/lib/dblayer/backend/base/format.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_default_not_null(column, sql, parameter_list):\n'
              '    """ Appends the DEFAULT and NOT NULL common type modifiers '
              'as needed\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.BaseColumn)\n'
              '\n'
              '    if column.default is not None:\n'
              '        if isinstance(column.default, '
              'dblayer.model.function.BaseFunction):\n'
              "            sql.append('DEFAULT %s' % "
              'format_expression(column.default))\n'
              '        else:\n'
              "            sql.append('DEFAULT ?')\n"
              '            parameter_list.append(column.default)\n'
              '\n'
              '    if not column.null:\n'
              "        sql.append('NOT NULL')\n")

Fragment(uuid='a8c11326-547e-45a6-bdb4-503946d68a6e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=70,
         depth=0,
         type='function',
         name='format_default_not_null',
         text='def format_default_not_null(column, sql, parameter_list):\n'
              '    """ Appends the DEFAULT and NOT NULL common type modifiers '
              'as needed\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.BaseColumn)\n'
              '\n'
              '    if column.default is not None:\n'
              '        if isinstance(column.default, '
              'dblayer.model.function.BaseFunction):\n'
              "            sql.append('DEFAULT %s' % "
              'format_expression(column.default))\n'
              '        else:\n'
              "            sql.append('DEFAULT ?')\n"
              '            parameter_list.append(column.default)\n'
              '\n'
              '    if not column.null:\n'
              "        sql.append('NOT NULL')")

Fragment(uuid='7172f40f-0d76-4231-9b35-f7a849277b3b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=85,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_custom_column(column):\n'
              '    """ Returns column type definition for the given custom '
              'column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Custom)\n'
              '\n'
              '    return (column.sql_type, ())\n')

Fragment(uuid='bb8c4e3c-8492-4a00-b68b-e5f1073103a8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=87,
         depth=0,
         type='function',
         name='format_custom_column',
         text='def format_custom_column(column):\n'
              '    """ Returns column type definition for the given custom '
              'column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Custom)\n'
              '\n'
              '    return (column.sql_type, ())')

Fragment(uuid='0aa0f581-ac1b-42d6-86f7-57593f00b8b2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=94,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_primary_key_column(column):\n'
              '    """ Returns column type definition for the given primary '
              'key column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.PrimaryKey)\n'
              '\n'
              '    if column.serial:\n'
              "        return ('BIGSERIAL PRIMARY KEY', ())\n"
              '\n'
              "    return ('BIGINT NOT NULL', ())\n")

Fragment(uuid='c244c514-8a07-4558-9091-925e05191733',
         path='/lib/dblayer/backend/base/format.py',
         lineno=96,
         depth=0,
         type='function',
         name='format_primary_key_column',
         text='def format_primary_key_column(column):\n'
              '    """ Returns column type definition for the given primary '
              'key column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.PrimaryKey)\n'
              '\n'
              '    if column.serial:\n'
              "        return ('BIGSERIAL PRIMARY KEY', ())\n"
              '\n'
              "    return ('BIGINT NOT NULL', ())")

Fragment(uuid='21d8b2ea-5300-4dea-b2ce-82ef25a5409d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=106,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_foreign_key_column(column):\n'
              '    """ Returns column type definition for the given foreign '
              'key column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.ForeignKey)\n'
              '\n'
              "    sql = ['BIGINT']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='26c9c490-b45b-4025-843b-35754a5673fb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=108,
         depth=0,
         type='function',
         name='format_foreign_key_column',
         text='def format_foreign_key_column(column):\n'
              '    """ Returns column type definition for the given foreign '
              'key column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.ForeignKey)\n'
              '\n'
              "    sql = ['BIGINT']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='4d9b6564-642e-4e89-8a93-5b23460c44b9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=114,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ['BIGINT']")

Fragment(uuid='d969b729-cb40-4075-a419-e8af24b34c6b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=115,
         depth=2,
         type='variable',
         name='parameter_list',
         text='parameter_list = []')

Fragment(uuid='4dad67b3-d75c-42e1-8f85-933db3288957',
         path='/lib/dblayer/backend/base/format.py',
         lineno=117,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql)")

Fragment(uuid='71c852d8-0a65-4de7-9786-34b3b8931c3a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=119,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_boolean_column(column):\n'
              '    """ Returns the column type definition for the given '
              'boolean column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Boolean)\n'
              '\n'
              "    sql = ['BOOLEAN']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='9bad30c6-9a17-463b-b05f-d5118e396a5b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=121,
         depth=0,
         type='function',
         name='format_boolean_column',
         text='def format_boolean_column(column):\n'
              '    """ Returns the column type definition for the given '
              'boolean column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Boolean)\n'
              '\n'
              "    sql = ['BOOLEAN']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='2bc52170-8e17-430f-bd3f-67b10d9121ce',
         path='/lib/dblayer/backend/base/format.py',
         lineno=127,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ['BOOLEAN']")

Fragment(uuid='d431cf5b-c5e0-4bc2-b427-01e0971e2a13',
         path='/lib/dblayer/backend/base/format.py',
         lineno=128,
         depth=2,
         type='variable',
         name='parameter_list',
         text='parameter_list = []')

Fragment(uuid='fa5bc523-1376-4553-95ef-fdeeebc2ce0c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=130,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql)")

Fragment(uuid='3f6091b4-6773-4fd5-b9a0-c5cdd66adafb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=132,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_integer_column(column):\n'
              '    """ Returns the column type definition for the given '
              'integer column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Integer)\n'
              '\n'
              '    parameter_list = []\n'
              '    if not column.digits or column.digits <= 9:\n'
              "        sql = ['INTEGER']\n"
              '    elif column.digits <= 18:\n'
              "        sql = ['BIGINT']\n"
              '    else:\n'
              "        sql = ['NUMERIC(%d)' % column.digits]\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='2de3847d-3d47-4f23-8fb7-93ee0fdec52e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=134,
         depth=0,
         type='function',
         name='format_integer_column',
         text='def format_integer_column(column):\n'
              '    """ Returns the column type definition for the given '
              'integer column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Integer)\n'
              '\n'
              '    parameter_list = []\n'
              '    if not column.digits or column.digits <= 9:\n'
              "        sql = ['INTEGER']\n"
              '    elif column.digits <= 18:\n'
              "        sql = ['BIGINT']\n"
              '    else:\n'
              "        sql = ['NUMERIC(%d)' % column.digits]\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='e4adb424-4f61-4369-b667-0ff34393c983',
         path='/lib/dblayer/backend/base/format.py',
         lineno=140,
         depth=2,
         type='variable',
         name='parameter_list',
         text='parameter_list = []')

Fragment(uuid='feb669b5-a4e7-4cde-9565-6883be2827db',
         path='/lib/dblayer/backend/base/format.py',
         lineno=142,
         depth=4,
         type='variable',
         name='sql',
         text="sql = ['INTEGER']")

Fragment(uuid='c36b5f3e-b3c5-42be-8900-46c93b5cd66e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=144,
         depth=5,
         type='variable',
         name='sql',
         text="sql = ['BIGINT']")

Fragment(uuid='57d62f12-7904-4d95-b318-f8c401368dff',
         path='/lib/dblayer/backend/base/format.py',
         lineno=146,
         depth=5,
         type='variable',
         name='sql',
         text="sql = ['NUMERIC(%d)' % column.digits]")

Fragment(uuid='69dadaba-25f6-4daa-9723-a83f99fbf3b0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=148,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql)")

Fragment(uuid='d10afa50-f363-41db-aa64-9ad2607ae6d5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=150,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_float_column(column):\n'
              '    """ Returns the column type definition for the given float '
              'or double column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Float)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.double:\n'
              "        sql = ['DOUBLE PRECISION']\n"
              '    else:\n'
              "        sql = ['REAL']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='98f88ab6-96e7-4a7b-a563-ec2573780866',
         path='/lib/dblayer/backend/base/format.py',
         lineno=152,
         depth=0,
         type='function',
         name='format_float_column',
         text='def format_float_column(column):\n'
              '    """ Returns the column type definition for the given float '
              'or double column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Float)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.double:\n'
              "        sql = ['DOUBLE PRECISION']\n"
              '    else:\n'
              "        sql = ['REAL']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='097b47f9-6ce8-4487-b382-db0eded8b918',
         path='/lib/dblayer/backend/base/format.py',
         lineno=158,
         depth=2,
         type='variable',
         name='sql',
         text='sql = []')

Fragment(uuid='aa4cf0ee-4647-4595-9f4e-514b5bf1b2c5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=159,
         depth=2,
         type='variable',
         name='parameter_list',
         text='parameter_list = []')

Fragment(uuid='8d197352-fd14-4743-b4a8-df001bf6b57b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=161,
         depth=4,
         type='variable',
         name='sql',
         text="sql = ['DOUBLE PRECISION']")

Fragment(uuid='ca7a1fd1-fb67-439a-b2f4-92a190db871b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=163,
         depth=5,
         type='variable',
         name='sql',
         text="sql = ['REAL']")

Fragment(uuid='da7e8a27-34ce-499b-a384-f223b7e74538',
         path='/lib/dblayer/backend/base/format.py',
         lineno=165,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql)")

Fragment(uuid='1651e67b-6725-483c-80b2-0c0f70a8142a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=167,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_decimal_column(column):\n'
              '    """ Returns the column type definition for the given '
              'decimal column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Decimal)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.precision is not None:\n'
              '        if column.scale is not None:\n'
              "            sql = ['NUMERIC(%d, %d)' % (column.precision, "
              'column.scale)]\n'
              '        else:\n'
              "            sql = ['NUMERIC(%d)' % column.precision]\n"
              '    else:\n'
              '        assert not column.scale\n'
              "        sql = ['NUMERIC']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='384ccfd2-9f06-4e15-95a5-eff2db6284be',
         path='/lib/dblayer/backend/base/format.py',
         lineno=169,
         depth=0,
         type='function',
         name='format_decimal_column',
         text='def format_decimal_column(column):\n'
              '    """ Returns the column type definition for the given '
              'decimal column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Decimal)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.precision is not None:\n'
              '        if column.scale is not None:\n'
              "            sql = ['NUMERIC(%d, %d)' % (column.precision, "
              'column.scale)]\n'
              '        else:\n'
              "            sql = ['NUMERIC(%d)' % column.precision]\n"
              '    else:\n'
              '        assert not column.scale\n'
              "        sql = ['NUMERIC']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='88cb48ff-3eab-4ff2-a4d4-6deb11ad72e3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=175,
         depth=2,
         type='variable',
         name='sql',
         text='sql = []')

Fragment(uuid='7181fe1f-08ca-4179-882e-7893efb1895c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=176,
         depth=2,
         type='variable',
         name='parameter_list',
         text='parameter_list = []')

Fragment(uuid='1d09c5a3-f297-4cc6-85e9-1bd4453b6146',
         path='/lib/dblayer/backend/base/format.py',
         lineno=179,
         depth=6,
         type='variable',
         name='sql',
         text="sql = ['NUMERIC(%d, %d)' % (column.precision, column.scale)]")

Fragment(uuid='a5c1f781-24fc-450e-8a65-37bc852e82df',
         path='/lib/dblayer/backend/base/format.py',
         lineno=181,
         depth=7,
         type='variable',
         name='sql',
         text="sql = ['NUMERIC(%d)' % column.precision]")

Fragment(uuid='b9c79db9-7777-41eb-ade1-80e25a2ec7d4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=184,
         depth=5,
         type='variable',
         name='sql',
         text="sql = ['NUMERIC']")

Fragment(uuid='d6e6427d-7d0a-48e7-aa3f-3ec8a446496d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=186,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql)")

Fragment(uuid='2052e92b-f26f-4e62-8e13-8c0bb3c69586',
         path='/lib/dblayer/backend/base/format.py',
         lineno=188,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_text_column(column):\n'
              '    """ Returns the column type definition for the given '
              'boolean column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Text)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.maxlength:\n'
              "        sql = ['VARCHAR(%d)' % column.maxlength]\n"
              '    else:\n'
              "        sql = ['TEXT']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='7d165aaf-34da-4382-9583-4ed5c4623301',
         path='/lib/dblayer/backend/base/format.py',
         lineno=190,
         depth=0,
         type='function',
         name='format_text_column',
         text='def format_text_column(column):\n'
              '    """ Returns the column type definition for the given '
              'boolean column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Text)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.maxlength:\n'
              "        sql = ['VARCHAR(%d)' % column.maxlength]\n"
              '    else:\n'
              "        sql = ['TEXT']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='e9ffcc9d-f0a9-4d36-b9e4-2600d7dadc24',
         path='/lib/dblayer/backend/base/format.py',
         lineno=196,
         depth=2,
         type='variable',
         name='sql',
         text='sql = []')

Fragment(uuid='d7c5c7e5-3ab4-4220-a221-404b07fceda9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=197,
         depth=2,
         type='variable',
         name='parameter_list',
         text='parameter_list = []')

Fragment(uuid='f4ed35ff-fe79-4a1e-a177-460da138bded',
         path='/lib/dblayer/backend/base/format.py',
         lineno=199,
         depth=4,
         type='variable',
         name='sql',
         text="sql = ['VARCHAR(%d)' % column.maxlength]")

Fragment(uuid='83343c12-a3cc-44cb-9827-583304122c98',
         path='/lib/dblayer/backend/base/format.py',
         lineno=201,
         depth=5,
         type='variable',
         name='sql',
         text="sql = ['TEXT']")

Fragment(uuid='1c12f8f9-6a45-46af-b0af-b295b6d708f6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=203,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql)")

Fragment(uuid='a3fbf379-b472-4d9a-9142-1a803c942c93',
         path='/lib/dblayer/backend/base/format.py',
         lineno=205,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_date_column(column):\n'
              '    """ Returns the column type definition for the given date '
              'column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Date)\n'
              '\n'
              "    sql = ['DATE']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='134f6b5d-eb43-4fa2-bc2d-f48d8ae2e6d8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=207,
         depth=0,
         type='function',
         name='format_date_column',
         text='def format_date_column(column):\n'
              '    """ Returns the column type definition for the given date '
              'column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Date)\n'
              '\n'
              "    sql = ['DATE']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='aa401260-676c-4785-b29e-f997e258e760',
         path='/lib/dblayer/backend/base/format.py',
         lineno=213,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ['DATE']")

Fragment(uuid='fef5f9a1-6b31-448f-b549-ab1079fe2f0c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=214,
         depth=2,
         type='variable',
         name='parameter_list',
         text='parameter_list = []')

Fragment(uuid='fbd26e6e-51bd-4721-b3b0-022e4508c55d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=216,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql)")

Fragment(uuid='eed616d5-70bf-45a7-89bf-035fcd370953',
         path='/lib/dblayer/backend/base/format.py',
         lineno=218,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_datetime_column(column):\n'
              '    """ Returns the column type definition for the given '
              'datetime column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Datetime)\n'
              '\n'
              "    sql = ['TIMESTAMP WITHOUT TIME ZONE']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='635d1cd9-b164-4b3b-b35e-26b4354c2af0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=220,
         depth=0,
         type='function',
         name='format_datetime_column',
         text='def format_datetime_column(column):\n'
              '    """ Returns the column type definition for the given '
              'datetime column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Datetime)\n'
              '\n'
              "    sql = ['TIMESTAMP WITHOUT TIME ZONE']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='2229b5e5-7f54-4f8c-ad35-51ec9226e091',
         path='/lib/dblayer/backend/base/format.py',
         lineno=226,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ['TIMESTAMP WITHOUT TIME ZONE']")

Fragment(uuid='4ba71841-e554-48ff-880a-26cc1e4fb515',
         path='/lib/dblayer/backend/base/format.py',
         lineno=227,
         depth=2,
         type='variable',
         name='parameter_list',
         text='parameter_list = []')

Fragment(uuid='742ab541-6a05-47f3-92b3-4a4829f04582',
         path='/lib/dblayer/backend/base/format.py',
         lineno=229,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql)")

Fragment(uuid='21fac11b-462a-4fee-9536-38913302e281',
         path='/lib/dblayer/backend/base/format.py',
         lineno=231,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_search_document_column(column):\n'
              '    """ Returns the column type definition for the given search '
              'document column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.SearchDocument)\n'
              '\n'
              "    return ('tsvector', ())\n")

Fragment(uuid='5ed47a19-1a2f-4d06-b1e4-f27539367ec3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=233,
         depth=0,
         type='function',
         name='format_search_document_column',
         text='def format_search_document_column(column):\n'
              '    """ Returns the column type definition for the given search '
              'document column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.SearchDocument)\n'
              '\n'
              "    return ('tsvector', ())")

Fragment(uuid='62071bea-cd2e-4430-b52a-63839b8fb497',
         path='/lib/dblayer/backend/base/format.py',
         lineno=240,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_column(column):\n'
              '    """ Returns the column type definition for the given '
              'column\n'
              '    """\n')

Fragment(uuid='95694626-f258-4e7d-b518-ba8343ee5568',
         path='/lib/dblayer/backend/base/format.py',
         lineno=242,
         depth=0,
         type='function',
         name='format_column',
         text='def format_column(column):\n'
              '    """ Returns the column type definition for the given '
              'column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.BaseColumn)\n'
              '\n'
              '    formatter = '
              'COLUMN_FORMATTER_MAP[column.abstract_sql_column_type]\n'
              '    return formatter(column)')

Fragment(uuid='06234ca0-0a28-44a2-95ec-25a8c7d02779',
         path='/lib/dblayer/backend/base/format.py',
         lineno=245,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.BaseColumn)\n'
              '\n'
              '    formatter = '
              'COLUMN_FORMATTER_MAP[column.abstract_sql_column_type]\n'
              '    return formatter(column)\n'
              '\n'
              '\n'
              'COLUMN_FORMATTER_MAP = dict(\n'
              '    # Table columns\n'
              '    Custom=format_custom_column,\n'
              '    PrimaryKey=format_primary_key_column,\n'
              '    ForeignKey=format_foreign_key_column,\n'
              '    Boolean=format_boolean_column,\n'
              '    Integer=format_integer_column,\n'
              '    Float=format_float_column,\n'
              '    Decimal=format_decimal_column,\n'
              '    Text=format_text_column,\n'
              '    Date=format_date_column,\n'
              '    Datetime=format_datetime_column,\n'
              '    SearchDocument=format_search_document_column,\n'
              ')\n'
              '\n'
              '\n'
              '### Formatting of index creation based on the database model\n')

Fragment(uuid='ebf75a08-7e60-47a9-be48-65e4c2c0c86a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=248,
         depth=2,
         type='variable',
         name='formatter',
         text='formatter = '
              'COLUMN_FORMATTER_MAP[column.abstract_sql_column_type]')

Fragment(uuid='437d419b-f6fd-4294-b016-7de139310068',
         path='/lib/dblayer/backend/base/format.py',
         lineno=252,
         depth=0,
         type='variable',
         name='COLUMN_FORMATTER_MAP',
         text='COLUMN_FORMATTER_MAP = dict(\n'
              '    # Table columns\n'
              '    Custom=format_custom_column,\n'
              '    PrimaryKey=format_primary_key_column,\n'
              '    ForeignKey=format_foreign_key_column,\n'
              '    Boolean=format_boolean_column,\n'
              '    Integer=format_integer_column,\n'
              '    Float=format_float_column,\n'
              '    Decimal=format_decimal_column,\n'
              '    Text=format_text_column,\n'
              '    Date=format_date_column,\n'
              '    Datetime=format_datetime_column,\n'
              '    SearchDocument=format_search_document_column,\n'
              ')')

Fragment(uuid='2ae2e31b-1f43-4662-bfad-9deff5228958',
         path='/lib/dblayer/backend/base/format.py',
         lineno=269,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_create_btree_index(index):\n'
              '    """ Returns the definition of a regular B-Tree based index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              "    sql = 'CREATE INDEX %s ON %s USING btree(%s);' % (\n"
              "        quote_name('%s_%s' % (index.table._name, index.name)),\n"
              '        quote_name(index.table._name),\n'
              "        ', '.join(quote_name(column.name) for column in "
              'index.columns))\n'
              '    return [(sql, ())]\n')

Fragment(uuid='e04eb676-4b2a-4e5c-a2df-384e70c8e889',
         path='/lib/dblayer/backend/base/format.py',
         lineno=270,
         depth=0,
         type='function',
         name='format_create_btree_index',
         text='def format_create_btree_index(index):\n'
              '    """ Returns the definition of a regular B-Tree based index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              "    sql = 'CREATE INDEX %s ON %s USING btree(%s);' % (\n"
              "        quote_name('%s_%s' % (index.table._name, index.name)),\n"
              '        quote_name(index.table._name),\n'
              "        ', '.join(quote_name(column.name) for column in "
              'index.columns))\n'
              '    return [(sql, ())]')

Fragment(uuid='b4181d70-aea2-4248-8ace-4eb226ed76eb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=276,
         depth=2,
         type='variable',
         name='sql',
         text="sql = 'CREATE INDEX %s ON %s USING btree(%s);' % (\n"
              "        quote_name('%s_%s' % (index.table._name, index.name)),\n"
              '        quote_name(index.table._name),\n'
              "        ', '.join(quote_name(column.name) for column in "
              'index.columns))')

Fragment(uuid='cdd7562a-895a-4919-99f1-931f821e6933',
         path='/lib/dblayer/backend/base/format.py',
         lineno=281,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_create_full_text_search_index(index):\n'
              '    """ Returns the definition of a full text search index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.FullTextSearchIndex)\n'
              '\n'
              '    document_expression = " || \' \' || ".join(\n'
              '        ("COALESCE(new.%s, \'\')" if column.null else "new.%s") '
              '% quote_name(column.name)\n')

Fragment(uuid='5f944c8d-4813-46aa-a656-78ce42356c57',
         path='/lib/dblayer/backend/base/format.py',
         lineno=283,
         depth=0,
         type='function',
         name='format_create_full_text_search_index',
         text='def format_create_full_text_search_index(index):\n'
              '    """ Returns the definition of a full text search index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.FullTextSearchIndex)\n'
              '\n'
              '    document_expression = " || \' \' || ".join(\n'
              '        ("COALESCE(new.%s, \'\')" if column.null else "new.%s") '
              '% quote_name(column.name)\n')

Fragment(uuid='3bba2fc7-c350-4bfd-bcbb-b5ad4bedc8f5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=289,
         depth=2,
         type='variable',
         name='document_expression',
         text='document_expression = " || \' \' || ".join(\n'
              '        ("COALESCE(new.%s, \'\')" if column.null else "new.%s") '
              '% quote_name(column.name)\n'
              '        for column in index.columns)')

Fragment(uuid='89f93367-892d-4d64-834e-0c753c33af00',
         path='/lib/dblayer/backend/base/format.py',
         lineno=291,
         depth=0,
         type='module',
         name='',
         text='        for column in index.columns)\n'
              '\n'
              '    variables = dict(\n'
              '        table_name=quote_name(index.table._name),\n'
              "        index_name=quote_name('%s_%s' % (index.table._name, "
              'index.name)),\n'
              "        trigger_name=quote_name('%s_%s_update_trigger' % "
              '(index.table._name, index.name)),\n'
              "        procedure_name=quote_name('fn_%s_%s_update_trigger' % "
              '(index.table._name, index.name)),\n'
              '        '
              'search_document_column_name=quote_name(index.name[:-6]),\n'
              '        document_expression=document_expression)\n'
              '\n'
              "    create_procedure_sql = '''\\\n"
              'CREATE FUNCTION %(procedure_name)s () RETURNS trigger AS $$\n'
              'BEGIN\n'
              '  new.')

Fragment(uuid='fd58a2f4-acab-41ea-9f10-8de82adf325a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=291,
         depth=0,
         type='function',
         name='format_create_full_text_search_index',
         text='        for column in index.columns)\n'
              '\n'
              '    variables = dict(\n'
              '        table_name=quote_name(index.table._name),\n'
              "        index_name=quote_name('%s_%s' % (index.table._name, "
              'index.name)),\n'
              "        trigger_name=quote_name('%s_%s_update_trigger' % "
              '(index.table._name, index.name)),\n'
              "        procedure_name=quote_name('fn_%s_%s_update_trigger' % "
              '(index.table._name, index.name)),\n'
              '        '
              'search_document_column_name=quote_name(index.name[:-6]),\n'
              '        document_expression=document_expression)\n'
              '\n'
              "    create_procedure_sql = '''\\\n"
              'CREATE FUNCTION %(procedure_name)s () RETURNS trigger AS $$\n'
              'BEGIN\n'
              '  new')

Fragment(uuid='3ed80054-c381-486b-9849-5b34c5d77d6b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=293,
         depth=2,
         type='variable',
         name='variables',
         text='variables = dict(\n'
              '        table_name=quote_name(index.table._name),\n'
              "        index_name=quote_name('%s_%s' % (index.table._name, "
              'index.name)),\n'
              "        trigger_name=quote_name('%s_%s_update_trigger' % "
              '(index.table._name, index.name)),\n'
              "        procedure_name=quote_name('fn_%s_%s_update_trigger' % "
              '(index.table._name, index.name)),\n'
              '        '
              'search_document_column_name=quote_name(index.name[:-6]),\n'
              '        document_expression=document_expression)')

Fragment(uuid='46aa6247-a9da-4e87-85fd-113572b7b459',
         path='/lib/dblayer/backend/base/format.py',
         lineno=301,
         depth=2,
         type='variable',
         name='create_procedure_sql',
         text="create_procedure_sql = '''\\\n"
              'CREATE FUNCTION %(procedure_name)s () RETURNS trigger AS $$\n'
              'BEGIN\n'
              '  new.%(search_document_column_name)s := '
              'to_tsvector(%(document_expression)s);\n'
              '  RETURN new;\n'
              'END\n'
              "$$ LANGUAGE plpgsql;''' % variables")

Fragment(uuid='e8a1b72a-b31a-4aca-b8d2-d41f6239df01',
         path='/lib/dblayer/backend/base/format.py',
         lineno=304,
         depth=0,
         type='module',
         name='',
         text='%(search_document_column_name)s := '
              'to_tsvector(%(document_expression)s);\n'
              '  RETURN new;\n'
              'END\n'
              "$$ LANGUAGE plpgsql;''' % variables\n"
              '\n'
              "    create_index_sql = '''\\\n"
              'CREATE INDEX %(index_name)s ON %(table_name)s \\\n'
              "USING gin(%(search_document_column_name)s);''' % variables\n"
              '\n'
              "    create_trigger_sql = '''\\\n"
              'CREATE TRIGGER %(trigger_name)s \\\n'
              'BEFORE INSERT OR UPDATE \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH ROW \\\n'
              "EXECUTE PROCEDURE %(procedure_name)s ();''' % variables\n"
              '\n'
              '    statements = [\n'
              '        (create_procedure_sql, ()),\n'
              '        (create_index_sql, ()),\n'
              '        (create_trigger_sql, ())]\n'
              '\n'
              '    return statements\n')

Fragment(uuid='774f5f1e-109c-48a1-8246-50badf55e3c3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=304,
         depth=0,
         type='function',
         name='format_create_full_text_search_index',
         text='.%(search_document_column_name)s := '
              'to_tsvector(%(document_expression)s);\n'
              '  RETURN new;\n'
              'END\n'
              "$$ LANGUAGE plpgsql;''' % variables\n"
              '\n'
              "    create_index_sql = '''\\\n"
              'CREATE INDEX %(index_name)s ON %(table_name)s \\\n'
              "USING gin(%(search_document_column_name)s);''' % variables\n"
              '\n'
              "    create_trigger_sql = '''\\\n"
              'CREATE TRIGGER %(trigger_name)s \\\n'
              'BEFORE INSERT OR UPDATE \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH ROW \\\n'
              "EXECUTE PROCEDURE %(procedure_name)s ();''' % variables\n"
              '\n'
              '    statements = [\n'
              '        (create_procedure_sql, ()),\n'
              '        (create_index_sql, ()),\n'
              '        (create_trigger_sql, ())]\n'
              '\n'
              '    return statements')

Fragment(uuid='6e0990f0-0be5-4a90-843a-564563ffff02',
         path='/lib/dblayer/backend/base/format.py',
         lineno=309,
         depth=2,
         type='variable',
         name='create_index_sql',
         text="create_index_sql = '''\\\n"
              'CREATE INDEX %(index_name)s ON %(table_name)s \\\n'
              "USING gin(%(search_document_column_name)s);''' % variables")

Fragment(uuid='6126ec0e-6d5c-414c-bc3a-d60f0fe3abe0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=313,
         depth=2,
         type='variable',
         name='create_trigger_sql',
         text="create_trigger_sql = '''\\\n"
              'CREATE TRIGGER %(trigger_name)s \\\n'
              'BEFORE INSERT OR UPDATE \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH ROW \\\n'
              "EXECUTE PROCEDURE %(procedure_name)s ();''' % variables")

Fragment(uuid='d7940d2d-95b8-44d2-9a4d-8d332ed12fdd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=320,
         depth=2,
         type='variable',
         name='statements',
         text='statements = [\n'
              '        (create_procedure_sql, ()),\n'
              '        (create_index_sql, ()),\n'
              '        (create_trigger_sql, ())]')

Fragment(uuid='d73e0e6f-5ece-44e1-8f3d-f3b167a761b3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=326,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_create_index(index):\n'
              '    """ Returns the definition of an index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              '    formatter = '
              'CREATE_INDEX_FORMATTER_MAP[index.__class__.__name__]\n'
              '    return formatter(index)\n'
              '\n'
              '\n'
              'CREATE_INDEX_FORMATTER_MAP = dict(\n'
              '    Index=format_create_btree_index,\n'
              '    FullTextSearchIndex=format_create_full_text_search_index,\n'
              ')\n'
              '\n'
              '\n'
              '### Formatting of index removal based on the database model\n')

Fragment(uuid='09c5a0fc-f9cb-46ad-8d94-5b06780f73bd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=328,
         depth=0,
         type='function',
         name='format_create_index',
         text='def format_create_index(index):\n'
              '    """ Returns the definition of an index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              '    formatter = '
              'CREATE_INDEX_FORMATTER_MAP[index.__class__.__name__]\n'
              '    return formatter(index)')

Fragment(uuid='c94ffb3c-0a3a-43ea-9569-acd753e843f2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=334,
         depth=2,
         type='variable',
         name='formatter',
         text='formatter = CREATE_INDEX_FORMATTER_MAP[index.__class__.__name__]')

Fragment(uuid='02c5b3c3-2103-4807-99e1-f284a4bf56e8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=338,
         depth=0,
         type='variable',
         name='CREATE_INDEX_FORMATTER_MAP',
         text='CREATE_INDEX_FORMATTER_MAP = dict(\n'
              '    Index=format_create_btree_index,\n'
              '    FullTextSearchIndex=format_create_full_text_search_index,\n'
              ')')

Fragment(uuid='dca6424c-6e1d-4694-b21e-e3fe9c6366bb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=345,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_drop_btree_index(index):\n'
              '    """ Returns the statements to drop a regular B-Tree based '
              'index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              "    sql = 'DROP INDEX %s;' % quote_name('%s_%s' % "
              '(index.table._name, index.name))\n'
              '    return [(sql, ())]\n')

Fragment(uuid='af62a10a-ba1c-4a1a-8843-316a2aaa39f2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=346,
         depth=0,
         type='function',
         name='format_drop_btree_index',
         text='def format_drop_btree_index(index):\n'
              '    """ Returns the statements to drop a regular B-Tree based '
              'index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              "    sql = 'DROP INDEX %s;' % quote_name('%s_%s' % "
              '(index.table._name, index.name))\n'
              '    return [(sql, ())]')

Fragment(uuid='4250730f-2f21-470d-96a2-b21aded3a450',
         path='/lib/dblayer/backend/base/format.py',
         lineno=352,
         depth=2,
         type='variable',
         name='sql',
         text="sql = 'DROP INDEX %s;' % quote_name('%s_%s' % "
              '(index.table._name, index.name))')

Fragment(uuid='ec29ecc9-1749-493a-8fda-dbed06ced878',
         path='/lib/dblayer/backend/base/format.py',
         lineno=354,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_drop_full_text_search_index(index):\n'
              '    """ Returns the statements to drop a full text search '
              'index\n'
              '    """\n')

Fragment(uuid='5181ae68-5e25-469d-a98b-e92d640de4be',
         path='/lib/dblayer/backend/base/format.py',
         lineno=356,
         depth=0,
         type='function',
         name='format_drop_full_text_search_index',
         text='def format_drop_full_text_search_index(index):\n'
              '    """ Returns the statements to drop a full text search '
              'index\n'
              '    """\n')

Fragment(uuid='5929a40a-3438-45a3-9bc7-d41731eb4cc2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=359,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.FullTextSearchIndex)\n'
              '\n'
              '    table_name = quote_name(index.table._name)\n'
              "    index_name = quote_name('%s_%s' % (index.table._name, "
              'index.name))\n'
              "    trigger_name = quote_name('%s_%s_update_trigger' % "
              '(index.table._name, index.name))')

Fragment(uuid='e5c29cab-e697-465c-acaa-7fe6c983a9b8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=359,
         depth=0,
         type='function',
         name='format_drop_full_text_search_index',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.FullTextSearchIndex)\n'
              '\n'
              '    table_name = quote_name(index.table._name)\n'
              "    index_name = quote_name('%s_%s' % (index.table._name, "
              'index.name))\n'
              "    trigger_name = quote_name('%s_%s_update_trigger' % "
              '(index.table._name, index.name))')

Fragment(uuid='acad56d4-3ce1-4e30-a4d1-9e58254294e3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=362,
         depth=2,
         type='variable',
         name='table_name',
         text='table_name = quote_name(index.table._name)')

Fragment(uuid='a76a97a5-e183-4911-b2e3-0992f7b82a70',
         path='/lib/dblayer/backend/base/format.py',
         lineno=363,
         depth=2,
         type='variable',
         name='index_name',
         text="index_name = quote_name('%s_%s' % (index.table._name, "
              'index.name))')

Fragment(uuid='f0a55404-3e7d-40cd-8d81-d838b63155d8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=364,
         depth=0,
         type='module',
         name='',
         text='\n'
              "    procedure_name = quote_name('fn_%s_%s_update_trigger' % "
              '(index.table._name, index.name))\n'
              '\n'
              '    statements = [\n'
              "        ('DROP TRIGGER %s ON %s;' % (trigger_name, table_name), "
              '()),\n'
              "        ('DROP INDEX %s;' % index_name, ()),\n"
              "        ('DROP FUNCTION %s();' % procedure_name, ())]\n"
              '\n'
              '    return statements\n')

Fragment(uuid='fbef0968-2537-4ee9-a0c6-e804888b2676',
         path='/lib/dblayer/backend/base/format.py',
         lineno=364,
         depth=0,
         type='function',
         name='format_drop_full_text_search_index',
         text='\n'
              "    procedure_name = quote_name('fn_%s_%s_update_trigger' % "
              '(index.table._name, index.name))\n'
              '\n'
              '    statements = [\n'
              "        ('DROP TRIGGER %s ON %s;' % (trigger_name, table_name), "
              '()),\n'
              "        ('DROP INDEX %s;' % index_name, ()),\n"
              "        ('DROP FUNCTION %s();' % procedure_name, ())]\n"
              '\n'
              '    return statements')

Fragment(uuid='58a42d62-1d0b-4b84-9ef6-d30e427d8ff3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=364,
         depth=2,
         type='variable',
         name='trigger_name',
         text="trigger_name = quote_name('%s_%s_update_trigger' % "
              '(index.table._name, index.name))')

Fragment(uuid='a9dd66d5-d56d-417b-a0ff-70bebfafd029',
         path='/lib/dblayer/backend/base/format.py',
         lineno=365,
         depth=2,
         type='variable',
         name='procedure_name',
         text="procedure_name = quote_name('fn_%s_%s_update_trigger' % "
              '(index.table._name, index.name))')

Fragment(uuid='91988725-7cac-43d2-8fdb-a63b2ba235ab',
         path='/lib/dblayer/backend/base/format.py',
         lineno=367,
         depth=2,
         type='variable',
         name='statements',
         text='statements = [\n'
              "        ('DROP TRIGGER %s ON %s;' % (trigger_name, table_name), "
              '()),\n'
              "        ('DROP INDEX %s;' % index_name, ()),\n"
              "        ('DROP FUNCTION %s();' % procedure_name, ())]")

Fragment(uuid='a3eb4ce9-2bff-4033-801a-5b70c40176fe',
         path='/lib/dblayer/backend/base/format.py',
         lineno=373,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_drop_index(index):\n'
              '    """ Returns the definition of an index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              '    formatter = '
              'DROP_INDEX_FORMATTER_MAP[index.__class__.__name__]\n'
              '    return formatter(index)\n'
              '\n'
              '\n'
              'DROP_INDEX_FORMATTER_MAP = dict(\n'
              '    Index=format_drop_btree_index,\n'
              '    FullTextSearchIndex=format_drop_full_text_search_index,\n'
              ')\n'
              '\n'
              '\n'
              '### Formatting of procedure definitions based on the database '
              'model\n')

Fragment(uuid='20bab2a8-3a8d-4e8a-ba5d-3da5139c06e7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=375,
         depth=0,
         type='function',
         name='format_drop_index',
         text='def format_drop_index(index):\n'
              '    """ Returns the definition of an index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              '    formatter = '
              'DROP_INDEX_FORMATTER_MAP[index.__class__.__name__]\n'
              '    return formatter(index)')

Fragment(uuid='cf93c14e-3cfa-43b0-a067-31ed213aadc9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=381,
         depth=2,
         type='variable',
         name='formatter',
         text='formatter = DROP_INDEX_FORMATTER_MAP[index.__class__.__name__]')

Fragment(uuid='783de1f1-6bd4-492f-b361-9d7d299185f9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=385,
         depth=0,
         type='variable',
         name='DROP_INDEX_FORMATTER_MAP',
         text='DROP_INDEX_FORMATTER_MAP = dict(\n'
              '    Index=format_drop_btree_index,\n'
              '    FullTextSearchIndex=format_drop_full_text_search_index,\n'
              ')')

Fragment(uuid='e1aafc15-5330-48ed-a8c1-89ca9c6901c2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=392,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_create_procedure(procedure):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a stored procedure\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(procedure, '
              'dblayer.model.procedure.BaseProcedure)\n'
              '\n'
              '    variables = dict(\n'
              '        name=quote_name(procedure.name),\n'
              '        language=quote_name(procedure.language),\n'
              "        argument_list=', '.join(procedure.argument_list),\n"
              '        result=procedure.result,\n'
              '        body=procedure.body)\n'
              '\n'
              "    sql = '''\\\n"
              'CREATE FUNCTION %(name)s (%(argument_list)s) RETURNS '
              '%(result)s\n'
              'BEGIN\n'
              '  %(body)s\n'
              'END\n'
              "$$ LANGUAGE %(language)s;''' % variables\n"
              '\n'
              '    return [(sql, ())]\n')

Fragment(uuid='aa894642-dc29-4544-be8f-4c1d375c7d1e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=393,
         depth=0,
         type='function',
         name='format_create_procedure',
         text='def format_create_procedure(procedure):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a stored procedure\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(procedure, '
              'dblayer.model.procedure.BaseProcedure)\n'
              '\n'
              '    variables = dict(\n'
              '        name=quote_name(procedure.name),\n'
              '        language=quote_name(procedure.language),\n'
              "        argument_list=', '.join(procedure.argument_list),\n"
              '        result=procedure.result,\n'
              '        body=procedure.body)\n'
              '\n'
              "    sql = '''\\\n"
              'CREATE FUNCTION %(name)s (%(argument_list)s) RETURNS '
              '%(result)s\n'
              'BEGIN\n'
              '  %(body)s\n'
              'END\n'
              "$$ LANGUAGE %(language)s;''' % variables\n"
              '\n'
              '    return [(sql, ())]')

Fragment(uuid='bbffd15b-1862-40d3-88ce-984fad2b4092',
         path='/lib/dblayer/backend/base/format.py',
         lineno=399,
         depth=2,
         type='variable',
         name='variables',
         text='variables = dict(\n'
              '        name=quote_name(procedure.name),\n'
              '        language=quote_name(procedure.language),\n'
              "        argument_list=', '.join(procedure.argument_list),\n"
              '        result=procedure.result,\n'
              '        body=procedure.body)')

Fragment(uuid='25ab7ab1-bda2-47e2-9390-d296e5f96d2e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=406,
         depth=2,
         type='variable',
         name='sql',
         text="sql = '''\\\n"
              'CREATE FUNCTION %(name)s (%(argument_list)s) RETURNS '
              '%(result)s\n'
              'BEGIN\n'
              '  %(body)s\n'
              'END\n'
              "$$ LANGUAGE %(language)s;''' % variables")

Fragment(uuid='59e88953-effa-46ff-beec-a3e51c50cfe3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=414,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_drop_procedure(procedure, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a stored procedure\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(procedure, '
              'dblayer.model.procedure.BaseProcedure)\n'
              '\n'
              "    sql = 'DROP FUNCTION %s (%s);' % (\n"
              '        quote_name(procedure.name),\n'
              "        ', '.join(procedure.argument_list))\n"
              '    return [(sql, ())]\n'
              '\n'
              '\n'
              '### Formatting of trigger definitions based on the database '
              'model\n')

Fragment(uuid='c68738b2-1cea-4992-8ac5-84b28311f182',
         path='/lib/dblayer/backend/base/format.py',
         lineno=416,
         depth=0,
         type='function',
         name='format_drop_procedure',
         text='def format_drop_procedure(procedure, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a stored procedure\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(procedure, '
              'dblayer.model.procedure.BaseProcedure)\n'
              '\n'
              "    sql = 'DROP FUNCTION %s (%s);' % (\n"
              '        quote_name(procedure.name),\n'
              "        ', '.join(procedure.argument_list))\n"
              '    return [(sql, ())]')

Fragment(uuid='15bc85d5-769e-49c6-aa68-c1a274be3c6e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=422,
         depth=2,
         type='variable',
         name='sql',
         text="sql = 'DROP FUNCTION %s (%s);' % (\n"
              '        quote_name(procedure.name),\n'
              "        ', '.join(procedure.argument_list))")

Fragment(uuid='3d92ee3d-5b83-49c8-b6fa-bb1586f17323',
         path='/lib/dblayer/backend/base/format.py',
         lineno=429,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_create_trigger(trigger):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a trigger\n'
              '    """\n')

Fragment(uuid='c9c99885-bc4f-4a31-b2bc-331826c1c2b5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=430,
         depth=0,
         type='function',
         name='format_create_trigger',
         text='def format_create_trigger(trigger):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a trigger\n'
              '    """\n')

Fragment(uuid='03fa1e80-942b-47ca-b333-60f4979bfd6f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=433,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(trigger, '
              'dblayer.model.trigger.BaseTrigger)\n'
              '\n'
              '    timing, event, scope = '
              'TRIGGER_FORMATTER_MAP[trigger.__class__.__name__]\n'
              '\n'
              '    variables = dict(\n'
              '        trigger_name=quote_name(trigger.name),\n'
              '        timing=timing,\n'
              '        event=event,\n'
              '        scope=scope,\n'
              '        table_name=quote_name(trigger.table._name),\n'
              '        procedure_name=quote_name(trigger.procedure_name),\n'
              '      ')

Fragment(uuid='4c197b5c-ff12-4e81-8ee7-68ff6072dcc8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=433,
         depth=0,
         type='function',
         name='format_create_trigger',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(trigger, '
              'dblayer.model.trigger.BaseTrigger)\n'
              '\n'
              '    timing, event, scope = '
              'TRIGGER_FORMATTER_MAP[trigger.__class__.__name__]\n'
              '\n'
              '    variables = dict(\n'
              '        trigger_name=quote_name(trigger.name),\n'
              '        timing=timing,\n'
              '        event=event,\n'
              '        scope=scope,\n'
              '        table_name=quote_name(trigger.table._name),\n'
              '     ')

Fragment(uuid='1bbc54fa-6288-455e-bede-d1cecb8d47a4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=436,
         depth=2,
         type='variable',
         name='timing,',
         text='timing, event, scope = '
              'TRIGGER_FORMATTER_MAP[trigger.__class__.__name__]')

Fragment(uuid='8208108a-1f13-4b52-980c-87962868cf7b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=438,
         depth=2,
         type='variable',
         name='variables',
         text='variables = dict(\n'
              '        trigger_name=quote_name(trigger.name),\n'
              '        timing=timing,\n'
              '        event=event,\n'
              '        scope=scope,\n'
              '        table_name=quote_name(trigger.table._name),\n'
              '        procedure_name=quote_name(trigger.procedure_name),\n'
              "        procedure_parameters=', '.join(map(format_expression, "
              'trigger.procedure_parameters)))')

Fragment(uuid='9c6394da-2088-4aa2-9ea1-ef7faaf9575e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=444,
         depth=0,
         type='function',
         name='format_create_trigger',
         text='   procedure_name=quote_name(trigger.procedure_name),\n'
              "        procedure_parameters=', '.join(map(format_expression, "
              'trigger.procedure_parameters)))\n'
              '\n'
              "    sql = '''\\\n"
              'CREATE TRIGGER %(trigger_name)s \\\n'
              '%(timing)s %(event)s \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH %(scope)s \\\n'
              'EXECUTE PROCEDURE %(procedure_name)s '
              "(%(procedure_parameters)s);''' % variables\n"
              '    return [(sql, ())]')

Fragment(uuid='18df0509-7c45-45d1-b1ad-5f37ae2aab07',
         path='/lib/dblayer/backend/base/format.py',
         lineno=445,
         depth=0,
         type='module',
         name='',
         text="  procedure_parameters=', '.join(map(format_expression, "
              'trigger.procedure_parameters)))\n'
              '\n'
              "    sql = '''\\\n"
              'CREATE TRIGGER %(trigger_name)s \\\n'
              '%(timing)s %(event)s \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH %(scope)s \\\n'
              'EXECUTE PROCEDURE %(procedure_name)s '
              "(%(procedure_parameters)s);''' % variables\n"
              '    return [(sql, ())]\n'
              '\n'
              '\n'
              'TRIGGER_FORMATTER_MAP = dict(\n'
              "    BeforeInsertRow=('BEFORE', 'INSERT', 'ROW'),\n"
              "    BeforeUpdateRow=('BEFORE', 'UPDATE'")

Fragment(uuid='7b178b5d-179a-4106-b39d-24ccec54a60f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=447,
         depth=2,
         type='variable',
         name='sql',
         text="sql = '''\\\n"
              'CREATE TRIGGER %(trigger_name)s \\\n'
              '%(timing)s %(event)s \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH %(scope)s \\\n'
              'EXECUTE PROCEDURE %(procedure_name)s '
              "(%(procedure_parameters)s);''' % variables")

Fragment(uuid='a3638e30-ba75-442e-9cc3-ce8999ba375b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=456,
         depth=0,
         type='variable',
         name='TRIGGER_FORMATTER_MAP',
         text='TRIGGER_FORMATTER_MAP = dict(\n'
              "    BeforeInsertRow=('BEFORE', 'INSERT', 'ROW'),\n"
              "    BeforeUpdateRow=('BEFORE', 'UPDATE', 'ROW'),\n"
              "    BeforeInsertOrUpdateRow=('BEFORE', 'INSERT OR UPDATE', "
              "'ROW'),\n"
              "    BeforeDeleteRow=('BEFORE', 'DELETE', 'ROW'),\n"
              "    BeforeInsertStatement=('BEFORE', 'INSERT', 'STATEMENT'),\n"
              "    BeforeUpdateStatement=('BEFORE', 'UPDATE', 'STATEMENT'),\n"
              "    BeforeInsertOrUpdateStatement=('BEFORE', 'INSERT OR "
              "UPDATE', 'STATEMENT'),\n"
              "    BeforeDeleteStatement=('BEFORE', '")

Fragment(uuid='2cab86a4-cc57-4d6c-bb66-648deff4c064',
         path='/lib/dblayer/backend/base/format.py',
         lineno=458,
         depth=0,
         type='module',
         name='',
         text=", 'ROW'),\n"
              "    BeforeInsertOrUpdateRow=('BEFORE', 'INSERT OR UPDATE', "
              "'ROW'),\n"
              "    BeforeDeleteRow=('BEFORE', 'DELETE', 'ROW'),\n"
              "    BeforeInsertStatement=('BEFORE', 'INSERT', 'STATEMENT'),\n"
              "    BeforeUpdateStatement=('BEFORE', 'UPDATE', 'STATEMENT'),\n"
              "    BeforeInsertOrUpdateStatement=('BEFORE', 'INSERT OR "
              "UPDATE', 'STATEMENT'),\n"
              "    BeforeDeleteStatement=('BEFORE', 'DELETE', 'STATEMENT'),\n"
              "    AfterInsertRow=('AFTER', 'INSERT'")

Fragment(uuid='0d4e5b22-f55a-4b04-b824-c37bfa264e89',
         path='/lib/dblayer/backend/base/format.py',
         lineno=464,
         depth=0,
         type='variable',
         name='TRIGGER_FORMATTER_MAP',
         text="DELETE', 'STATEMENT'),\n"
              "    AfterInsertRow=('AFTER', 'INSERT', 'ROW'),\n"
              "    AfterUpdateRow=('AFTER', 'UPDATE', 'ROW'),\n"
              "    AfterInsertOrUpdateRow=('AFTER', 'INSERT OR UPDATE', "
              "'ROW'),\n"
              "    AfterDeleteRow=('AFTER', 'DELETE', 'ROW'),\n"
              "    AfterInsertStatement=('AFTER', 'INSERT', 'STATEMENT'),\n"
              "    AfterUpdateStatement=('AFTER', 'UPDATE', 'STATEMENT'),\n"
              "    AfterInsertOrUpdateStatement=('AFTER', 'INSERT OR UPDATE', "
              "'STATEMENT'),\n"
              "    AfterDeleteStatement=('AFTER', 'DELETE', 'STATEMENT'),\n"
              ')')

Fragment(uuid='f6e941df-3321-4a59-b816-be59d77445ed',
         path='/lib/dblayer/backend/base/format.py',
         lineno=465,
         depth=0,
         type='module',
         name='',
         text=", 'ROW'),\n"
              "    AfterUpdateRow=('AFTER', 'UPDATE', 'ROW'),\n"
              "    AfterInsertOrUpdateRow=('AFTER', 'INSERT OR UPDATE', "
              "'ROW'),\n"
              "    AfterDeleteRow=('AFTER', 'DELETE', 'ROW'),\n"
              "    AfterInsertStatement=('AFTER', 'INSERT', 'STATEMENT'),\n"
              "    AfterUpdateStatement=('AFTER', 'UPDATE', 'STATEMENT'),\n"
              "    AfterInsertOrUpdateStatement=('AFTER', 'INSERT OR UPDATE', "
              "'STATEMENT'),\n"
              "    AfterDeleteStatement=('AFTER', 'DELETE', 'STATEMENT'),\n"
              ')\n')

Fragment(uuid='8d37cfa4-74df-47f0-ac66-fae75a0815ba',
         path='/lib/dblayer/backend/base/format.py',
         lineno=474,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_drop_trigger(trigger, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a trigger\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(trigger, '
              'dblayer.model.trigger.BaseTrigger)\n'
              '\n'
              "    sql = 'DROP TRIGGER %s ON %s%s;' % (\n"
              '        quote_name(trigger.name),\n'
              '        quote_name(trigger.table._name),\n'
              "        ' CASCADE' if cascade else '')\n"
              '    return [(sql, ())]\n'
              '\n'
              '\n'
              '### Formatting of constraint definitions based on the database '
              'model\n')

Fragment(uuid='a1125f86-08c4-4c2a-a18a-dd5ce1845111',
         path='/lib/dblayer/backend/base/format.py',
         lineno=476,
         depth=0,
         type='function',
         name='format_drop_trigger',
         text='def format_drop_trigger(trigger, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a trigger\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(trigger, '
              'dblayer.model.trigger.BaseTrigger)\n'
              '\n'
              "    sql = 'DROP TRIGGER %s ON %s%s;' % (\n"
              '        quote_name(trigger.name),\n'
              '        quote_name(trigger.table._name),\n'
              "        ' CASCADE' if cascade else '')\n"
              '    return [(sql, ())]')

Fragment(uuid='b8b7086a-d304-4c80-9e38-d0263a65460b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=482,
         depth=2,
         type='variable',
         name='sql',
         text="sql = 'DROP TRIGGER %s ON %s%s;' % (\n"
              '        quote_name(trigger.name),\n'
              '        quote_name(trigger.table._name),\n'
              "        ' CASCADE' if cascade else '')")

Fragment(uuid='a3a79cac-f2a3-4e73-947f-1a7b01440d53',
         path='/lib/dblayer/backend/base/format.py',
         lineno=490,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_primary_key_constraint(constraint):\n'
              '    """ Returns the definition of a primary key constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.PrimaryKey)\n'
              '\n'
              "    sql = 'PRIMARY KEY (%s)' % (', "
              "'.join(quote_name(column.name) for column in "
              'constraint.columns))\n'
              '    return (sql, ())\n')

Fragment(uuid='055689cf-930a-4291-ac53-c4fae69fc097',
         path='/lib/dblayer/backend/base/format.py',
         lineno=491,
         depth=0,
         type='function',
         name='format_primary_key_constraint',
         text='def format_primary_key_constraint(constraint):\n'
              '    """ Returns the definition of a primary key constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.PrimaryKey)\n'
              '\n'
              "    sql = 'PRIMARY KEY (%s)' % (', "
              "'.join(quote_name(column.name) for column in "
              'constraint.columns))\n'
              '    return (sql, ())')

Fragment(uuid='deeccc5e-9985-4824-9ab1-f7159f2a40fd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=497,
         depth=2,
         type='variable',
         name='sql',
         text="sql = 'PRIMARY KEY (%s)' % (', '.join(quote_name(column.name) "
              'for column in constraint.columns))')

Fragment(uuid='fc19c4a4-17ee-4902-86c3-f92b54067a5b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=499,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_foreign_key_constraint(constraint):\n'
              '    """ Returns the definition of a foreign key constraint\n'
              '    """\n')

Fragment(uuid='d3d3040d-c31d-4feb-8644-2e3fb7046220',
         path='/lib/dblayer/backend/base/format.py',
         lineno=501,
         depth=0,
         type='function',
         name='format_foreign_key_constraint',
         text='def format_foreign_key_constraint(constraint):\n'
              '    """ Returns the definition of a foreign key constraint\n'
              '    """\n')

Fragment(uuid='c98daeff-1ba4-4db6-a64b-0c4e5f85b9d0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=504,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.ForeignKey)\n'
              '\n'
              '    table = constraint.table\n'
              '\n'
              '    # NOTE: We need to look up the cloned foreign key column by '
              'name to get the right object here\n'
              '    fk_column_name = constraint.columns[0].name\n'
              '    fk_column = getattr(table, fk_column_name)\n'
              '\n'
              '    referenced_table = fk_column.referenced_table\n'
              "    assert referenced_table, 'The referenced table for foreign "
              "key column %s.%s has not been determined!' % (fk_col")

Fragment(uuid='0721876a-584e-4050-8b58-2c75ddb93826',
         path='/lib/dblayer/backend/base/format.py',
         lineno=504,
         depth=0,
         type='function',
         name='format_foreign_key_constraint',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.ForeignKey)\n'
              '\n'
              '    table = constraint.table\n'
              '\n'
              '    # NOTE: We need to look up the cloned foreign key column by '
              'name to get the right object here\n'
              '    fk_column_name = constraint.columns[0].name\n'
              '    fk_column = getattr(table, fk_column_name)\n'
              '\n'
              '    referenced_table = fk_column.referenced_table\n'
              "    assert referenced_table, 'The referenced table for foreign "
              "key column %s.%s has not been determined!' % (fk_co")

Fragment(uuid='9cb9d26f-4107-43c3-9fd4-a04d86e1f2c7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=507,
         depth=2,
         type='variable',
         name='table',
         text='table = constraint.table')

Fragment(uuid='afd2f6ae-b11b-459f-abce-98dca3f8b817',
         path='/lib/dblayer/backend/base/format.py',
         lineno=510,
         depth=2,
         type='variable',
         name='fk_column_name',
         text='fk_column_name = constraint.columns[0].name')

Fragment(uuid='26259ae1-b359-40b7-95ca-0501b6fb240f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=511,
         depth=2,
         type='variable',
         name='fk_column',
         text='fk_column = getattr(table, fk_column_name)')

Fragment(uuid='46f9a250-2a73-4d2f-bb37-e49aad9bffbd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=513,
         depth=2,
         type='variable',
         name='referenced_table',
         text='referenced_table = fk_column.referenced_table')

Fragment(uuid='4ae9b631-b6d9-4979-a39b-02b135b0fcf0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=514,
         depth=0,
         type='module',
         name='',
         text='umn.table_class.__name__, fk_column.name)\n'
              '    pk_column = referenced_table._primary_key\n'
              "    assert pk_column, 'Referenced table %r does not have a "
              "primary key column!' % referenced_table._name\n"
              '    sql = (\n'
              "            'FOREIGN KEY (%s) REFERENCES %s (%s) MATCH SIMPLE "
              "'\n"
              "            'ON UPDATE NO ACTION ON DELETE NO ACTION' % (\n"
              '                quote_name(fk_column.name),\n'
              '                quote_name(referenced_table._name),\n'
              '                quote_name(pk_column.name)))\n'
              '    return (sql, ())\n')

Fragment(uuid='43e1e9fc-1445-4602-8b8e-6db9ce23dea9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=514,
         depth=0,
         type='function',
         name='format_foreign_key_constraint',
         text='lumn.table_class.__name__, fk_column.name)\n'
              '    pk_column = referenced_table._primary_key\n'
              "    assert pk_column, 'Referenced table %r does not have a "
              "primary key column!' % referenced_table._name\n"
              '    sql = (\n'
              "            'FOREIGN KEY (%s) REFERENCES %s (%s) MATCH SIMPLE "
              "'\n"
              "            'ON UPDATE NO ACTION ON DELETE NO ACTION' % (\n"
              '                quote_name(fk_column.name),\n'
              '                quote_name(referenced_table._name),\n'
              '                quote_name(pk_column.name)))\n'
              '    return (sql, ())')

Fragment(uuid='2d51e80b-f60a-4307-9adf-971604c0617a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=515,
         depth=2,
         type='variable',
         name='pk_column',
         text='pk_column = referenced_table._primary_key')

Fragment(uuid='5ddafecf-bf49-4c5e-b273-db22e07a01ad',
         path='/lib/dblayer/backend/base/format.py',
         lineno=517,
         depth=2,
         type='variable',
         name='sql',
         text='sql = (\n'
              "            'FOREIGN KEY (%s) REFERENCES %s (%s) MATCH SIMPLE "
              "'\n"
              "            'ON UPDATE NO ACTION ON DELETE NO ACTION' % (\n"
              '                quote_name(fk_column.name),\n'
              '                quote_name(referenced_table._name),\n'
              '                quote_name(pk_column.name)))')

Fragment(uuid='ed86cf5d-f306-4802-8060-5fb0223acc33',
         path='/lib/dblayer/backend/base/format.py',
         lineno=524,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_unique_constraint(constraint):\n'
              '    """ Returns the definition of a unique index constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.Unique)\n'
              '\n'
              "    sql = 'UNIQUE (%s)' % (', '.join(quote_name(column.name) "
              'for column in constraint.columns))\n'
              '    return (sql, ())\n')

Fragment(uuid='17660cbf-a54d-4cd1-9052-63f98c182543',
         path='/lib/dblayer/backend/base/format.py',
         lineno=526,
         depth=0,
         type='function',
         name='format_unique_constraint',
         text='def format_unique_constraint(constraint):\n'
              '    """ Returns the definition of a unique index constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.Unique)\n'
              '\n'
              "    sql = 'UNIQUE (%s)' % (', '.join(quote_name(column.name) "
              'for column in constraint.columns))\n'
              '    return (sql, ())')

Fragment(uuid='3e51047a-6011-4860-995d-f7344581a070',
         path='/lib/dblayer/backend/base/format.py',
         lineno=532,
         depth=2,
         type='variable',
         name='sql',
         text="sql = 'UNIQUE (%s)' % (', '.join(quote_name(column.name) for "
              'column in constraint.columns))')

Fragment(uuid='899367e7-25a9-428c-aa73-972a97c6f64f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=534,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_check_constraint(constraint):\n'
              '    """ Returns the definition of a check constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.Check)\n'
              '\n'
              "    sql = 'CHECK %s' % "
              'format_expression(constraint.expression)\n'
              '    return (sql, ())\n')

Fragment(uuid='3314c079-2eb9-4af9-a37b-47b8562b6436',
         path='/lib/dblayer/backend/base/format.py',
         lineno=536,
         depth=0,
         type='function',
         name='format_check_constraint',
         text='def format_check_constraint(constraint):\n'
              '    """ Returns the definition of a check constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.Check)\n'
              '\n'
              "    sql = 'CHECK %s' % "
              'format_expression(constraint.expression)\n'
              '    return (sql, ())')

Fragment(uuid='987bf894-b1ad-42fe-8bc7-553cd173852e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=542,
         depth=2,
         type='variable',
         name='sql',
         text="sql = 'CHECK %s' % format_expression(constraint.expression)")

Fragment(uuid='60a9173b-6de6-48eb-a5c4-319c8f8505e8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=544,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_constraint(constraint):\n'
              '    """ Returns the definition of a constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.BaseConstraint)\n'
              '\n'
              '    formatter = '
              'CONSTRAINT_FORMATTER_MAP[constraint.__class__.__name__]\n'
              '    return formatter(constraint)\n'
              '\n'
              '\n'
              'CONSTRAINT_FORMATTER_MAP = dict(\n'
              '    PrimaryKey=format_primary_key_constraint,\n'
              '    ForeignKey=format_foreign_key_constraint,\n'
              '    Unique=format_unique_constraint,\n'
              '    Check=format_check_constraint,\n'
              ')\n'
              '\n'
              '\n'
              '### Formatting of SQL statements based on the database model\n')

Fragment(uuid='2cabe194-45f1-40f3-9f60-5d76864ff1bd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=546,
         depth=0,
         type='function',
         name='format_constraint',
         text='def format_constraint(constraint):\n'
              '    """ Returns the definition of a constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.BaseConstraint)\n'
              '\n'
              '    formatter = '
              'CONSTRAINT_FORMATTER_MAP[constraint.__class__.__name__]\n'
              '    return formatter(constraint)')

Fragment(uuid='d612db22-dfff-47c1-baac-6b3a32e2b963',
         path='/lib/dblayer/backend/base/format.py',
         lineno=552,
         depth=2,
         type='variable',
         name='formatter',
         text='formatter = '
              'CONSTRAINT_FORMATTER_MAP[constraint.__class__.__name__]')

Fragment(uuid='4ee42aa1-859e-4d09-9612-d01ed7a6de69',
         path='/lib/dblayer/backend/base/format.py',
         lineno=556,
         depth=0,
         type='variable',
         name='CONSTRAINT_FORMATTER_MAP',
         text='CONSTRAINT_FORMATTER_MAP = dict(\n'
              '    PrimaryKey=format_primary_key_constraint,\n'
              '    ForeignKey=format_foreign_key_constraint,\n'
              '    Unique=format_unique_constraint,\n'
              '    Check=format_check_constraint,\n'
              ')')

Fragment(uuid='88c8efea-f003-4533-bfe7-a829317e9980',
         path='/lib/dblayer/backend/base/format.py',
         lineno=565,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_create_table(table, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              '    quoted_table_name = quote_name(table._name)\n'
              '\n'
              '    definition_list = []\n'
              '    parameter_list = []\n'
              '\n'
              '    # Collect list of column definitions\n')

Fragment(uuid='05ad015f-4ed8-4824-a661-9e38f770da9d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=566,
         depth=0,
         type='function',
         name='format_create_table',
         text='def format_create_table(table, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              '    quoted_table_name = quote_name(table._name)\n'
              '\n'
              '    definition_list = []\n'
              '    parameter_list = []\n'
              '\n'
              '    # Collect list of column definitions\n')

Fragment(uuid='76f16b37-7c7e-45d3-af75-2de030f5eaf4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=572,
         depth=2,
         type='variable',
         name='quoted_table_name',
         text='quoted_table_name = quote_name(table._name)')

Fragment(uuid='dd94f707-f77e-46c0-9c2b-066f7b90fe10',
         path='/lib/dblayer/backend/base/format.py',
         lineno=574,
         depth=2,
         type='variable',
         name='definition_list',
         text='definition_list = []')

Fragment(uuid='2365d52e-19d5-41a8-81aa-4a950303c873',
         path='/lib/dblayer/backend/base/format.py',
         lineno=575,
         depth=2,
         type='variable',
         name='parameter_list',
         text='parameter_list = []')

Fragment(uuid='7616b7be-7a73-435b-aac0-c8f3401a3b02',
         path='/lib/dblayer/backend/base/format.py',
         lineno=578,
         depth=0,
         type='module',
         name='',
         text='    for column in table._column_list:\n'
              '        definition, new_parameters = format_column(column)\n'
              '        definition_list.append(\n'
              "            '%s %s' % (\n"
              '                quote_name(column.name),\n'
              '                definition))\n'
              '        parameter_list.extend(new_parameters)\n'
              '\n'
              '    # Collect list of constraint definitions\n')

Fragment(uuid='54bb79cc-6a30-4327-868e-3185f7f00cf6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=578,
         depth=0,
         type='function',
         name='format_create_table',
         text='    for column in table._column_list:\n'
              '        definition, new_parameters = format_column(column)\n'
              '        definition_list.append(\n'
              "            '%s %s' % (\n"
              '                quote_name(column.name),\n'
              '                definition))\n'
              '        parameter_list.extend(new_parameters)\n'
              '\n'
              '    # Collect list of constraint definitions\n')

Fragment(uuid='f9f69de8-931b-46b7-b778-a0d3b406693a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=579,
         depth=4,
         type='variable',
         name='definition,',
         text='definition, new_parameters = format_column(column)')

Fragment(uuid='c308e6bc-91f6-41f0-8879-fd90add6fceb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=587,
         depth=0,
         type='module',
         name='',
         text='    for constaint in table._constraint_list:\n'
              '        definition, new_parameters = '
              'format_constraint(constaint)\n'
              '        definition_list.append(\n'
              "            'CONSTRAINT %s %s' % (\n"
              "                quote_name('%s__%s' % (table._name, "
              'constaint.name)),\n'
              '                definition))\n'
              '        parameter_list.extend(new_parameters)\n'
              '\n'
              '    # SQL CREATE TABLE statement and parameter_tuple\n'
              "    sql = 'CREATE TABLE %s (\\n%s) WITH (OIDS=FALSE);' % (\n"
              "        quote_name(table._name), ',\\n'.join(definition_list))\n"
              '    statements = [(sql, tuple(parameter_list))]\n'
              '\n'
              '    # Format CREATE INDEX statements\n')

Fragment(uuid='25b1068d-e46e-490f-9e7e-dbcc88d33e71',
         path='/lib/dblayer/backend/base/format.py',
         lineno=587,
         depth=0,
         type='function',
         name='format_create_table',
         text='    for constaint in table._constraint_list:\n'
              '        definition, new_parameters = '
              'format_constraint(constaint)\n'
              '        definition_list.append(\n'
              "            'CONSTRAINT %s %s' % (\n"
              "                quote_name('%s__%s' % (table._name, "
              'constaint.name)),\n'
              '                definition))\n'
              '        parameter_list.extend(new_parameters)\n'
              '\n'
              '    # SQL CREATE TABLE statement and parameter_tuple\n'
              "    sql = 'CREATE TABLE %s (\\n%s) WITH (OIDS=FALSE);' % (\n"
              "        quote_name(table._name), ',\\n'.join(definition_list))\n"
              '    statements = [(sql, tuple(parameter_list))]\n'
              '\n'
              '    # Format CREATE INDEX statements\n')

Fragment(uuid='b6d448ec-c404-4d3b-af33-d00d383c72bf',
         path='/lib/dblayer/backend/base/format.py',
         lineno=588,
         depth=4,
         type='variable',
         name='definition,',
         text='definition, new_parameters = format_constraint(constaint)')

Fragment(uuid='4f30f7cf-b31b-4cbb-a95b-23b344a4b111',
         path='/lib/dblayer/backend/base/format.py',
         lineno=596,
         depth=2,
         type='variable',
         name='sql',
         text="sql = 'CREATE TABLE %s (\\n%s) WITH (OIDS=FALSE);' % (\n"
              "        quote_name(table._name), ',\\n'.join(definition_list))")

Fragment(uuid='68b0350d-74d2-44fb-a4df-c9c653e49714',
         path='/lib/dblayer/backend/base/format.py',
         lineno=598,
         depth=2,
         type='variable',
         name='statements',
         text='statements = [(sql, tuple(parameter_list))]')

Fragment(uuid='8251cb14-28b9-45b3-9bf0-97c1bd10dbb8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=601,
         depth=0,
         type='module',
         name='',
         text='    for index in table._index_list:\n'
              '        statements.extend(format_create_index(index))\n'
              '\n'
              '    # Prepare the parameter placeholders\n'
              '    statements = [\n'
              '        (replace_parameter_placeholders(sql), parameter_tuple)\n')

Fragment(uuid='0b38ad6a-f550-430d-a6b5-ab0f23ac4714',
         path='/lib/dblayer/backend/base/format.py',
         lineno=601,
         depth=0,
         type='function',
         name='format_create_table',
         text='    for index in table._index_list:\n'
              '        statements.extend(format_create_index(index))\n'
              '\n'
              '    # Prepare the parameter placeholders\n'
              '    statements = [\n'
              '        (replace_parameter_placeholders(sql), parameter_tuple)\n')

Fragment(uuid='183087e1-1642-45b0-bdea-c1cfc47b1645',
         path='/lib/dblayer/backend/base/format.py',
         lineno=605,
         depth=2,
         type='variable',
         name='statements',
         text='statements = [\n'
              '        (replace_parameter_placeholders(sql), parameter_tuple)\n'
              '        for sql, parameter_tuple in statements]')

Fragment(uuid='08921770-b906-4c79-bb42-6c0dbd779e42',
         path='/lib/dblayer/backend/base/format.py',
         lineno=607,
         depth=0,
         type='module',
         name='',
         text='        for sql, parameter_tuple in statements]\n'
              '\n'
              '    return statements\n')

Fragment(uuid='f422ff45-cfd8-452b-b707-5bf9e29c4c9a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=607,
         depth=0,
         type='function',
         name='format_create_table',
         text='        for sql, parameter_tuple in statements]\n'
              '\n'
              '    return statements')

Fragment(uuid='9f73ea9e-68f0-4a19-bbcb-b687770a467a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=610,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_drop_table(table, database, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              '    statements = []\n'
              '\n'
              '    # Format DROP INDEX statements\n'
              '    for index in table._index_list:\n'
              '        statements.extend(format_drop_index(index))\n'
              '\n'
              '    # Format statements to drop the table\n'
              "    sql = 'DROP TABLE %s%s;' % (\n"
              '        quote_name(table._name),\n'
              "        ' CASCADE' if cascade else '')\n"
              '    statements.append((sql, ()))\n'
              '\n'
              '    return statements\n')

Fragment(uuid='0b82cb2f-5f8f-496e-b24d-f7032c410117',
         path='/lib/dblayer/backend/base/format.py',
         lineno=612,
         depth=0,
         type='function',
         name='format_drop_table',
         text='def format_drop_table(table, database, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              '    statements = []\n'
              '\n'
              '    # Format DROP INDEX statements\n'
              '    for index in table._index_list:\n'
              '        statements.extend(format_drop_index(index))\n'
              '\n'
              '    # Format statements to drop the table\n'
              "    sql = 'DROP TABLE %s%s;' % (\n"
              '        quote_name(table._name),\n'
              "        ' CASCADE' if cascade else '')\n"
              '    statements.append((sql, ()))\n'
              '\n'
              '    return statements')

Fragment(uuid='6726c01b-4ee7-4b89-9f8c-d0ae623683b6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=618,
         depth=2,
         type='variable',
         name='statements',
         text='statements = []')

Fragment(uuid='b318959e-d410-4d4a-90c7-376c0fc03c63',
         path='/lib/dblayer/backend/base/format.py',
         lineno=625,
         depth=2,
         type='variable',
         name='sql',
         text="sql = 'DROP TABLE %s%s;' % (\n"
              '        quote_name(table._name),\n'
              "        ' CASCADE' if cascade else '')")

Fragment(uuid='a44fd9ed-8044-4c08-b8c8-5c142282c722',
         path='/lib/dblayer/backend/base/format.py',
         lineno=631,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_truncate_table(table, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to truncate a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              "    return [('TRUNCATE TABLE %s' % quote_name(table._name), "
              '())]\n')

Fragment(uuid='1f3b5e4a-41ca-40ef-961c-a59b63f23625',
         path='/lib/dblayer/backend/base/format.py',
         lineno=633,
         depth=0,
         type='function',
         name='format_truncate_table',
         text='def format_truncate_table(table, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to truncate a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              "    return [('TRUNCATE TABLE %s' % quote_name(table._name), ())]")

Fragment(uuid='b76c43b6-22c3-4998-a390-9cdc8d8f4d43',
         path='/lib/dblayer/backend/base/format.py',
         lineno=640,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_truncate_table_list(table_list, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to truncate multiple tables\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        for table in table_list:\n'
              '            assert isinstance(table, '
              'dblayer.model.table.Table)\n'
              '\n'
              "    return [('TRUNCATE TABLE %s' % ', "
              "'.join(quote_name(table._name) for table in table_list if "
              'table._writable), ())]\n'
              '\n'
              '\n'
              '### Formatting SQL statements runtime (no database model '
              'available, only the record classes)\n')

Fragment(uuid='bb093924-baef-4231-8c29-762bd883f0c1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=642,
         depth=0,
         type='function',
         name='format_truncate_table_list',
         text='def format_truncate_table_list(table_list, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to truncate multiple tables\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        for table in table_list:\n'
              '            assert isinstance(table, '
              'dblayer.model.table.Table)\n'
              '\n'
              "    return [('TRUNCATE TABLE %s' % ', "
              "'.join(quote_name(table._name) for table in table_list if "
              'table._writable), ())]')

Fragment(uuid='4083d003-4f88-4141-91bb-8457c80ed4c6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=653,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_cross_join_group_list(clauses):\n'
              '    """ Formats the FROM clause of SQL SELECT statements\n'
              '    \n'
              '    Considers JOINs of all supported kind. Returns list of '
              'cross joined groups.\n'
              '    \n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '\n'
              '    from_list = []\n'
              '    join_group = []\n')

Fragment(uuid='ed567e43-cee2-4e59-9036-5f9560bb5bda',
         path='/lib/dblayer/backend/base/format.py',
         lineno=654,
         depth=0,
         type='function',
         name='format_cross_join_group_list',
         text='def format_cross_join_group_list(clauses):\n'
              '    """ Formats the FROM clause of SQL SELECT statements\n'
              '    \n'
              '    Considers JOINs of all supported kind. Returns list of '
              'cross joined groups.\n'
              '    \n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '\n'
              '    from_list = []\n'
              '    join_group = []\n')

Fragment(uuid='123baf63-ff1d-4f1b-8590-f29218cf81c8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=663,
         depth=2,
         type='variable',
         name='from_list',
         text='from_list = []')

Fragment(uuid='f49c91fd-b5fe-4e46-b232-fd6f16dbccf8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=664,
         depth=2,
         type='variable',
         name='join_group',
         text='join_group = []')

Fragment(uuid='b91978d1-0af8-4226-a6d0-051109b62c22',
         path='/lib/dblayer/backend/base/format.py',
         lineno=665,
         depth=0,
         type='module',
         name='',
         text='\n    for source in clauses.table_list:\n')

Fragment(uuid='2ff47649-c60d-455e-9ac8-7e9144ff80e2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=665,
         depth=0,
         type='function',
         name='format_cross_join_group_list',
         text='\n    for source in clauses.table_list:\n')

Fragment(uuid='0ab5eff8-b42c-42d2-bfe1-426c3baacde4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=667,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        if isinstance(source, str):\n'
              '            # Single table, no aliases\n')

Fragment(uuid='9f17d5f2-a7df-4dc2-8460-c26f901a0e16',
         path='/lib/dblayer/backend/base/format.py',
         lineno=667,
         depth=0,
         type='function',
         name='format_cross_join_group_list',
         text='\n'
              '        if isinstance(source, str):\n'
              '            # Single table, no aliases\n')

Fragment(uuid='f8a52d48-af6d-4d2c-9a23-e89def78c796',
         path='/lib/dblayer/backend/base/format.py',
         lineno=670,
         depth=0,
         type='module',
         name='',
         text='            if join_group:\n'
              "                from_list.append(' '.join(join_group))\n"
              '            join_group = [quote_name(source)]\n'
              '\n'
              '        elif len(source) == 2:\n'
              '            # New cross join group\n'
              '            table_name, alias_name = source\n')

Fragment(uuid='da2cfaa7-6463-4e50-ae9e-dee69443e11f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=670,
         depth=0,
         type='function',
         name='format_cross_join_group_list',
         text='            if join_group:\n'
              "                from_list.append(' '.join(join_group))\n"
              '            join_group = [quote_name(source)]\n'
              '\n'
              '        elif len(source) == 2:\n'
              '            # New cross join group\n'
              '            table_name, alias_name = source\n')

Fragment(uuid='34c8165a-8a4a-4b26-a4a8-cfa18d49a352',
         path='/lib/dblayer/backend/base/format.py',
         lineno=672,
         depth=6,
         type='variable',
         name='join_group',
         text='join_group = [quote_name(source)]')

Fragment(uuid='f0134141-ada5-4f0e-8a6d-11b168b2c62e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=676,
         depth=7,
         type='variable',
         name='table_name,',
         text='table_name, alias_name = source')

Fragment(uuid='f23c3268-762c-415f-b014-5ebed9fbe2b0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=677,
         depth=0,
         type='module',
         name='',
         text='            if join_group:\n'
              "                from_list.append(' '.join(join_group))\n"
              '            join_group = [quote_alias_name(table_name, '
              'alias_name)]\n'
              '\n'
              '        else:\n'
              '            # Join to an existing cross join group\n'
              '            (table_name,\n'
              '             alias_name,\n'
              '             join_type,\n'
              '             id_field_name,\n'
              '             referer_table_name,\n'
              '             fk_field_name) = source\n')

Fragment(uuid='58da1825-a91b-4df6-b0dc-1e6cdd34f60d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=677,
         depth=0,
         type='function',
         name='format_cross_join_group_list',
         text='            if join_group:\n'
              "                from_list.append(' '.join(join_group))\n"
              '            join_group = [quote_alias_name(table_name, '
              'alias_name)]\n'
              '\n'
              '        else:\n'
              '            # Join to an existing cross join group\n'
              '            (table_name,\n'
              '             alias_name,\n'
              '             join_type,\n'
              '             id_field_name,\n'
              '             referer_table_name,\n'
              '             fk_field_name) = source\n')

Fragment(uuid='73824960-24cb-4f8c-86b9-50643fd15dd8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=679,
         depth=7,
         type='variable',
         name='join_group',
         text='join_group = [quote_alias_name(table_name, alias_name)]')

Fragment(uuid='50f5c35a-e19a-4a32-9d1c-90f6d896f25f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=683,
         depth=7,
         type='variable',
         name='(table_name,',
         text='(table_name,\n'
              '             alias_name,\n'
              '             join_type,\n'
              '             id_field_name,\n'
              '             referer_table_name,\n'
              '             fk_field_name) = source')

Fragment(uuid='c78607e9-84e5-427a-865c-d5acd626b786',
         path='/lib/dblayer/backend/base/format.py',
         lineno=689,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if constants.DEBUG:\n'
              '                assert join_type in constants.JOIN_TYPES, '
              "'Unknown join type: %r' % (join_type,)\n"
              "                assert join_group, 'Trying to append a new join "
              "to an empty cross join group!'\n"
              '\n'
              "            join_group.append('%s %s ON %s = %s' % (\n"
              '                join_type,\n'
              '                quote_alias_name(table_name, alias_name),\n'
              '                quote_table_column_name(table_name, '
              'id_field_name),\n'
              '                quote_table_column_name(referer_table_name, '
              'fk_field_name)))\n'
              '\n'
              "    from_list.append(' '.join(join_group))\n"
              '\n'
              '    return from_list\n')

Fragment(uuid='dbd88788-40af-4809-a390-0012cb98c02f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=689,
         depth=0,
         type='function',
         name='format_cross_join_group_list',
         text='\n'
              '            if constants.DEBUG:\n'
              '                assert join_type in constants.JOIN_TYPES, '
              "'Unknown join type: %r' % (join_type,)\n"
              "                assert join_group, 'Trying to append a new join "
              "to an empty cross join group!'\n"
              '\n'
              "            join_group.append('%s %s ON %s = %s' % (\n"
              '                join_type,\n'
              '                quote_alias_name(table_name, alias_name),\n'
              '                quote_table_column_name(table_name, '
              'id_field_name),\n'
              '                quote_table_column_name(referer_table_name, '
              'fk_field_name)))\n'
              '\n'
              "    from_list.append(' '.join(join_group))\n"
              '\n'
              '    return from_list')

Fragment(uuid='aaa34e1d-9c07-4db4-876d-cfabc41ecbf7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=703,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_select(clauses, cache={}):\n'
              '    """ Formats a SELECT SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='e78eb15c-00b0-4ec8-94cd-79ed35a253c2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=705,
         depth=0,
         type='function',
         name='format_select',
         text='def format_select(clauses, cache={}):\n'
              '    """ Formats a SELECT SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='9d293d8a-1762-4ec5-ad89-cfaeb85d3e71',
         path='/lib/dblayer/backend/base/format.py',
         lineno=711,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL SELECT statements must "
              "have a field list!'\n"
              "        assert clauses.table_list, 'SQL SELECT statements must "
              "have source table(s) to select from!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='9655da0d-ac63-4852-8937-79f3a769b744',
         path='/lib/dblayer/backend/base/format.py',
         lineno=711,
         depth=0,
         type='function',
         name='format_select',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL SELECT statements must "
              "have a field list!'\n"
              "        assert clauses.table_list, 'SQL SELECT statements must "
              "have source table(s) to select from!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='9b0d2736-548e-45a3-a831-9a8433636ab1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=716,
         depth=2,
         type='variable',
         name='sql',
         text='sql = cache.get(clauses)')

Fragment(uuid='2940cd16-1f81-43f8-a825-45ff4bd0133c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=717,
         depth=0,
         type='module',
         name='',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    cross_join_group_list = '
              'format_cross_join_group_list(clauses)\n'
              '\n'
              '    sql = [\n'
              "        'SELECT',\n"
              "        ', '.join(clauses.field_list),\n"
              "        'FROM',\n"
              "        ', '.join(cross_join_group_list)]\n")

Fragment(uuid='f4001254-c803-4b56-93a7-0f65ff7343b8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=717,
         depth=0,
         type='function',
         name='format_select',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    cross_join_group_list = '
              'format_cross_join_group_list(clauses)\n'
              '\n'
              '    sql = [\n'
              "        'SELECT',\n"
              "        ', '.join(clauses.field_list),\n"
              "        'FROM',\n"
              "        ', '.join(cross_join_group_list)]\n")

Fragment(uuid='d43965c4-e6fe-4250-a278-c384f487961e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=720,
         depth=2,
         type='variable',
         name='cross_join_group_list',
         text='cross_join_group_list = format_cross_join_group_list(clauses)')

Fragment(uuid='074fb9e7-e51c-4822-b8d2-d5a5e4fa21e1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=722,
         depth=2,
         type='variable',
         name='sql',
         text='sql = [\n'
              "        'SELECT',\n"
              "        ', '.join(clauses.field_list),\n"
              "        'FROM',\n"
              "        ', '.join(cross_join_group_list)]")

Fragment(uuid='d032bda6-8df8-46ff-bb94-4fbecd4ebb37',
         path='/lib/dblayer/backend/base/format.py',
         lineno=727,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.where:\n'
              "        sql.extend(('WHERE', clauses.where))\n")

Fragment(uuid='0fc4c85d-aab3-4b57-b268-010c2ed5650e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=727,
         depth=0,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.where:\n'
              "        sql.extend(('WHERE', clauses.where))\n")

Fragment(uuid='b0b5903c-a69e-4d0c-9fb8-41fa5b506637',
         path='/lib/dblayer/backend/base/format.py',
         lineno=730,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.group_by:\n'
              "        sql.extend(('GROUP BY', ', '.join(clauses.group_by)))\n")

Fragment(uuid='3b7266ca-72f4-44ae-a6fc-f92aae78b892',
         path='/lib/dblayer/backend/base/format.py',
         lineno=730,
         depth=0,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.group_by:\n'
              "        sql.extend(('GROUP BY', ', '.join(clauses.group_by)))\n")

Fragment(uuid='1bcee5f3-72a0-429a-91dc-897522838294',
         path='/lib/dblayer/backend/base/format.py',
         lineno=733,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.having:\n'
              "        sql.extend(('HAVING', clauses.having))\n")

Fragment(uuid='99708e80-e6d5-4cc3-acab-f818fc02b821',
         path='/lib/dblayer/backend/base/format.py',
         lineno=733,
         depth=0,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.having:\n'
              "        sql.extend(('HAVING', clauses.having))\n")

Fragment(uuid='84643cf2-4dc7-4895-b92d-a21ca0118055',
         path='/lib/dblayer/backend/base/format.py',
         lineno=736,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.order_by:\n'
              "        sql.extend(('ORDER BY', ', '.join(clauses.order_by)))\n")

Fragment(uuid='14704763-e3b2-48e5-a030-296f92087b53',
         path='/lib/dblayer/backend/base/format.py',
         lineno=736,
         depth=0,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.order_by:\n'
              "        sql.extend(('ORDER BY', ', '.join(clauses.order_by)))\n")

Fragment(uuid='b4078411-1680-4774-9439-f0fee24fabbc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=739,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.limit:\n'
              "        sql.extend(('LIMIT', str(clauses.limit)))\n")

Fragment(uuid='9f8ab4df-139d-444c-856e-ac819e773f64',
         path='/lib/dblayer/backend/base/format.py',
         lineno=739,
         depth=0,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.limit:\n'
              "        sql.extend(('LIMIT', str(clauses.limit)))\n")

Fragment(uuid='aea056db-66a3-456c-ac16-30b61f2c0c1a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=742,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.offset:\n'
              "        sql.extend(('OFFSET', str(clauses.offset)))\n"
              '\n'
              "    sql = ' '.join(sql)\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              "    return sql + ';'\n")

Fragment(uuid='debd1889-daa2-42c4-9f13-524a45af59eb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=742,
         depth=0,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.offset:\n'
              "        sql.extend(('OFFSET', str(clauses.offset)))\n"
              '\n'
              "    sql = ' '.join(sql)\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              "    return sql + ';'")

Fragment(uuid='69b7445d-a4f6-4116-9218-f2825c5ef6c4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=746,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql)")

Fragment(uuid='dcecd53a-4a6e-4e33-bec5-e7f623752c53',
         path='/lib/dblayer/backend/base/format.py',
         lineno=747,
         depth=2,
         type='variable',
         name='sql',
         text='sql = replace_parameter_placeholders(sql)')

Fragment(uuid='60b7bfe6-d2e0-43e5-84c6-ae4702f1f653',
         path='/lib/dblayer/backend/base/format.py',
         lineno=749,
         depth=2,
         type='variable',
         name='cache[clauses]',
         text='cache[clauses] = sql')

Fragment(uuid='fbd473dc-7684-40f6-93da-381749c17a04',
         path='/lib/dblayer/backend/base/format.py',
         lineno=751,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_insert(clauses, cache={}):\n'
              '    """ Formats a INSERT SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='defa0925-7651-4fc9-bb33-614428a012fb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=753,
         depth=0,
         type='function',
         name='format_insert',
         text='def format_insert(clauses, cache={}):\n'
              '    """ Formats a INSERT SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='df27c679-2222-4eef-8154-92627f55c25c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=759,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL INSERT statements must "
              "have a field list!'\n"
              "        assert not clauses.where, 'SQL INSERT statements do not "
              "have a where clause!'\n"
              "        assert not clauses.group_by, 'SQL INSERT statements do "
              "not have a group_by clause!'\n"
              "        assert not clauses.having, 'SQL INSERT statements do "
              'not ')

Fragment(uuid='67176678-bc6c-48f4-848d-74830a55de70',
         path='/lib/dblayer/backend/base/format.py',
         lineno=759,
         depth=0,
         type='function',
         name='format_insert',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL INSERT statements must "
              "have a field list!'\n"
              "        assert not clauses.where, 'SQL INSERT statements do not "
              "have a where clause!'\n"
              "        assert not clauses.group_by, 'SQL INSERT statements do "
              "not have a group_by clause!'\n"
              "        assert not clauses.having, 'SQL INSERT statements do "
              'not ')

Fragment(uuid='4e1473d8-4425-4924-8482-e52029f09f88',
         path='/lib/dblayer/backend/base/format.py',
         lineno=764,
         depth=0,
         type='module',
         name='',
         text="have a having clause!'\n"
              "        assert not clauses.order_by, 'SQL INSERT statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL INSERT statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL INSERT statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL INSERT "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='bc7d4b22-3f3f-4b1c-a8df-3d421cf4e413',
         path='/lib/dblayer/backend/base/format.py',
         lineno=764,
         depth=0,
         type='function',
         name='format_insert',
         text="have a having clause!'\n"
              "        assert not clauses.order_by, 'SQL INSERT statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL INSERT statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL INSERT statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL INSERT "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='dfef1109-fbd7-4f17-9775-29df5a6b186d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=770,
         depth=2,
         type='variable',
         name='sql',
         text='sql = cache.get(clauses)')

Fragment(uuid='3ec925e1-49c6-406d-8a51-2f859422a544',
         path='/lib/dblayer/backend/base/format.py',
         lineno=771,
         depth=0,
         type='module',
         name='',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'INSERT INTO',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        '(%s)' % ', '.join(map(quote_name, "
              'clauses.field_list)),\n'
              "        'VALUES',\n"
              "        '(%s)' % ', '.join('?' * len(clauses.field_list))]\n"
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql\n')

Fragment(uuid='5d066fc6-1d9a-4907-9594-671e500d23f8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=771,
         depth=0,
         type='function',
         name='format_insert',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'INSERT INTO',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        '(%s)' % ', '.join(map(quote_name, "
              'clauses.field_list)),\n'
              "        'VALUES',\n"
              "        '(%s)' % ', '.join('?' * len(clauses.field_list))]\n"
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql')

Fragment(uuid='ef298f24-beb1-46a7-9e1a-3706d458c820',
         path='/lib/dblayer/backend/base/format.py',
         lineno=774,
         depth=2,
         type='variable',
         name='sql',
         text='sql = [\n'
              "        'INSERT INTO',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        '(%s)' % ', '.join(map(quote_name, "
              'clauses.field_list)),\n'
              "        'VALUES',\n"
              "        '(%s)' % ', '.join('?' * len(clauses.field_list))]")

Fragment(uuid='b517c2fe-3991-49b6-98c8-f3e532e4178a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=781,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql) + ';'")

Fragment(uuid='99768053-3f82-4f26-8067-15aea2d1c153',
         path='/lib/dblayer/backend/base/format.py',
         lineno=782,
         depth=2,
         type='variable',
         name='sql',
         text='sql = replace_parameter_placeholders(sql)')

Fragment(uuid='517ea038-61e2-4517-a3f3-63f4b4709a28',
         path='/lib/dblayer/backend/base/format.py',
         lineno=784,
         depth=2,
         type='variable',
         name='cache[clauses]',
         text='cache[clauses] = sql')

Fragment(uuid='87386bf3-a496-49da-a3a3-7f10e29a3667',
         path='/lib/dblayer/backend/base/format.py',
         lineno=786,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_update(clauses, cache={}):\n'
              '    """ Formats a UPDATE SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='8710cb51-5380-4597-8d82-e16fcf0532a9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=788,
         depth=0,
         type='function',
         name='format_update',
         text='def format_update(clauses, cache={}):\n'
              '    """ Formats a UPDATE SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='a7bd2403-806e-4a16-8f68-696c00a7183d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=794,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL UPDATE statements must "
              "have a field list!'\n"
              "        assert clauses.where, 'SQL UPDATE statements should "
              'have a where clause! (Otherwise they would be dangerous.) Use a '
              'TRUE condition if you intentionally want to update all the '
              "records.'\n"
              "        assert not clauses.group_by, 'SQL UPDATE statements do "
              "not have a group_by clause!'\n"
              '        ass')

Fragment(uuid='65d0d5c0-b749-45ae-9cfd-d9d2ebbcf33f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=794,
         depth=0,
         type='function',
         name='format_update',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL UPDATE statements must "
              "have a field list!'\n"
              "        assert clauses.where, 'SQL UPDATE statements should "
              'have a where clause! (Otherwise they would be dangerous.) Use a '
              'TRUE condition if you intentionally want to update all the '
              "records.'\n"
              "        assert not clauses.group_by, 'SQL UPDATE statements do "
              "not have a group_by clause!'\n"
              '        ass')

Fragment(uuid='98e73eeb-0dc2-4d9b-93bf-dc969b3ea73a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=799,
         depth=0,
         type='module',
         name='',
         text="ert not clauses.having, 'SQL UPDATE statements do not have a "
              "having clause!'\n"
              "        assert not clauses.order_by, 'SQL UPDATE statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL UPDATE statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL UPDATE statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL UPDATE "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='f25d7646-5c90-41b9-84f0-49454801fc6a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=799,
         depth=0,
         type='function',
         name='format_update',
         text="ert not clauses.having, 'SQL UPDATE statements do not have a "
              "having clause!'\n"
              "        assert not clauses.order_by, 'SQL UPDATE statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL UPDATE statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL UPDATE statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL UPDATE "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='ba1e2b69-14c6-4a2f-a486-ed01a1232d82',
         path='/lib/dblayer/backend/base/format.py',
         lineno=805,
         depth=2,
         type='variable',
         name='sql',
         text='sql = cache.get(clauses)')

Fragment(uuid='08374fc4-6077-4036-994f-e74f26394c98',
         path='/lib/dblayer/backend/base/format.py',
         lineno=806,
         depth=0,
         type='module',
         name='',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'UPDATE',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        'SET',\n"
              "        ', '.join('%s=?' % quote_name(name) for name in "
              'clauses.field_list),\n'
              "        'WHERE',\n"
              '        clauses.where]\n'
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql\n')

Fragment(uuid='6c5464c4-bec3-4b9b-af47-0f5bd796bbe4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=806,
         depth=0,
         type='function',
         name='format_update',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'UPDATE',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        'SET',\n"
              "        ', '.join('%s=?' % quote_name(name) for name in "
              'clauses.field_list),\n'
              "        'WHERE',\n"
              '        clauses.where]\n'
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql')

Fragment(uuid='8cdec800-dbf7-4cc3-bcf2-a2f57c6090b8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=809,
         depth=2,
         type='variable',
         name='sql',
         text='sql = [\n'
              "        'UPDATE',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        'SET',\n"
              "        ', '.join('%s=?' % quote_name(name) for name in "
              'clauses.field_list),\n'
              "        'WHERE',\n"
              '        clauses.where]')

Fragment(uuid='2242f1b6-4e2d-44ad-8d78-fe951af03ba2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=817,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql) + ';'")

Fragment(uuid='fa290464-fa66-4967-bc18-85ad5564c839',
         path='/lib/dblayer/backend/base/format.py',
         lineno=818,
         depth=2,
         type='variable',
         name='sql',
         text='sql = replace_parameter_placeholders(sql)')

Fragment(uuid='b6d0faad-6986-4c04-9dcf-0db39168c58e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=820,
         depth=2,
         type='variable',
         name='cache[clauses]',
         text='cache[clauses] = sql')

Fragment(uuid='9c14ec96-6b89-47c7-9b61-28042d4e89f0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=822,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_delete(clauses, cache={}):\n'
              '    """ Formats a DELETE SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='c8c43e32-95a5-4676-bee3-4ad671fd2bf9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=824,
         depth=0,
         type='function',
         name='format_delete',
         text='def format_delete(clauses, cache={}):\n'
              '    """ Formats a DELETE SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='4f089634-f2be-4351-9aad-1af1f62d7821',
         path='/lib/dblayer/backend/base/format.py',
         lineno=830,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert not clauses.field_list, 'SQL DELETE statements "
              "do not have a field list!'\n"
              "        assert clauses.where, 'SQL DELETE statements should "
              'have a where clause! (Otherwise they would be dangerous.) Use a '
              'TRUE condition if you intentionally want to delete all the '
              "records or truncate the table instead.'\n"
              "        assert not clauses.group_by, 'SQL DELETE statements do "
              'not have a group_by cl')

Fragment(uuid='61fc130e-ecbe-492e-88d3-e68983f6ab8d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=830,
         depth=0,
         type='function',
         name='format_delete',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert not clauses.field_list, 'SQL DELETE statements "
              "do not have a field list!'\n"
              "        assert clauses.where, 'SQL DELETE statements should "
              'have a where clause! (Otherwise they would be dangerous.) Use a '
              'TRUE condition if you intentionally want to delete all the '
              "records or truncate the table instead.'\n"
              "        assert not clauses.group_by, 'SQL DELETE statements do "
              'not have a group_by cl')

Fragment(uuid='37081682-b8dc-48f0-af99-6c0f8272c6c5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=834,
         depth=0,
         type='module',
         name='',
         text="ause!'\n"
              "        assert not clauses.having, 'SQL DELETE statements do "
              "not have a having clause!'\n"
              "        assert not clauses.order_by, 'SQL DELETE statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL DELETE statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL DELETE statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL DELETE "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='5532a79a-ac00-4bf2-b78c-2f5fa9803aa4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=834,
         depth=0,
         type='function',
         name='format_delete',
         text="ause!'\n"
              "        assert not clauses.having, 'SQL DELETE statements do "
              "not have a having clause!'\n"
              "        assert not clauses.order_by, 'SQL DELETE statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL DELETE statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL DELETE statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL DELETE "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='2e1024c0-7970-44c5-845f-1bcac0777959',
         path='/lib/dblayer/backend/base/format.py',
         lineno=841,
         depth=2,
         type='variable',
         name='sql',
         text='sql = cache.get(clauses)')

Fragment(uuid='41858bec-fade-4eaa-869e-6ba46eb9c9dc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=842,
         depth=0,
         type='module',
         name='',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'DELETE FROM',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        'WHERE',\n"
              '        clauses.where]\n'
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql\n'
              '\n'
              '\n'
              '### Savepoints\n'
              '\n'
              '# NOTE: These functions should return None for SQL servers not '
              'needing\n'
              '# a savepoint to restore from an aborted transaction after '
              'failing queries\n')

Fragment(uuid='d37aced7-9c77-4208-a939-62ba52996f45',
         path='/lib/dblayer/backend/base/format.py',
         lineno=842,
         depth=0,
         type='function',
         name='format_delete',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'DELETE FROM',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        'WHERE',\n"
              '        clauses.where]\n'
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql')

Fragment(uuid='360b8838-ffb0-43aa-b435-9efa3043044d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=845,
         depth=2,
         type='variable',
         name='sql',
         text='sql = [\n'
              "        'DELETE FROM',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        'WHERE',\n"
              '        clauses.where]')

Fragment(uuid='0ea4f16c-a745-4d55-9d74-7663239d5bcc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=851,
         depth=2,
         type='variable',
         name='sql',
         text="sql = ' '.join(sql) + ';'")

Fragment(uuid='aa7a4958-46cc-4b7c-a010-671931a3ba03',
         path='/lib/dblayer/backend/base/format.py',
         lineno=852,
         depth=2,
         type='variable',
         name='sql',
         text='sql = replace_parameter_placeholders(sql)')

Fragment(uuid='12110558-ef32-478c-a3b6-daf156a63ef8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=854,
         depth=2,
         type='variable',
         name='cache[clauses]',
         text='cache[clauses] = sql')

Fragment(uuid='085a01db-49cc-45fa-a26e-ef2c4ca6ff80',
         path='/lib/dblayer/backend/base/format.py',
         lineno=862,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_savepoint(name):\n'
              '    """ Formats a SAVEPOINT statement to preserve the current '
              'transaction state\n'
              '    """\n'
              "    return 'SAVEPOINT ' + quote_name(name);\n")

Fragment(uuid='e32f88d4-0bb4-4ac9-b2a1-f1927709ed5d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=863,
         depth=0,
         type='function',
         name='format_savepoint',
         text='def format_savepoint(name):\n'
              '    """ Formats a SAVEPOINT statement to preserve the current '
              'transaction state\n'
              '    """\n'
              "    return 'SAVEPOINT ' + quote_name(name);")

Fragment(uuid='a1e55c09-749c-46a9-b9ad-a5091c682f53',
         path='/lib/dblayer/backend/base/format.py',
         lineno=867,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_release_savepoint(name):\n'
              '    """ Formats a RELEASE SAVEPOINT statement to free up '
              'resources for a\n'
              "    savepoint we don't want to rollback to anymore\n"
              '    \n'
              '    """\n'
              "    return 'RELEASE SAVEPOINT ' + quote_name(name);\n")

Fragment(uuid='4506f966-5a9b-4141-bd56-0e5edc8584a4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=869,
         depth=0,
         type='function',
         name='format_release_savepoint',
         text='def format_release_savepoint(name):\n'
              '    """ Formats a RELEASE SAVEPOINT statement to free up '
              'resources for a\n'
              "    savepoint we don't want to rollback to anymore\n"
              '    \n'
              '    """\n'
              "    return 'RELEASE SAVEPOINT ' + quote_name(name);")

Fragment(uuid='a91d3aa5-b00b-492c-98a9-357cd0a0a648',
         path='/lib/dblayer/backend/base/format.py',
         lineno=875,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_rollback_to_savepoint(name):\n'
              '    """ Formats a ROLLBACK TO SAVEPOINT statement to roll back '
              'the\n'
              '    current transaction to a previous savepoint\n'
              '    \n'
              '    """\n'
              "    return 'ROLLBACK TO SAVEPOINT ' + quote_name(name);\n"
              '\n'
              '\n'
              '### Query results\n')

Fragment(uuid='18e7eb70-401b-490e-9a0d-e01093694b0f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=877,
         depth=0,
         type='function',
         name='format_rollback_to_savepoint',
         text='def format_rollback_to_savepoint(name):\n'
              '    """ Formats a ROLLBACK TO SAVEPOINT statement to roll back '
              'the\n'
              '    current transaction to a previous savepoint\n'
              '    \n'
              '    """\n'
              "    return 'ROLLBACK TO SAVEPOINT ' + quote_name(name);")

Fragment(uuid='4972034e-2b87-4e56-a24b-0a95c470db86',
         path='/lib/dblayer/backend/base/format.py',
         lineno=886,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_result(result):\n'
              '    """ Formats a query result expression and defines its alias '
              'name\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(result, '
              'dblayer.model.query.BaseQueryResult)\n'
              '\n'
              "    return '%s AS %s' % (format_expression(result.expression), "
              'quote_name(result.name))\n'
              '\n'
              '\n'
              '### Functions and aggregates\n')

Fragment(uuid='99956e86-d727-4902-bd7c-e0e824581c75',
         path='/lib/dblayer/backend/base/format.py',
         lineno=887,
         depth=0,
         type='function',
         name='format_result',
         text='def format_result(result):\n'
              '    """ Formats a query result expression and defines its alias '
              'name\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(result, '
              'dblayer.model.query.BaseQueryResult)\n'
              '\n'
              "    return '%s AS %s' % (format_expression(result.expression), "
              'quote_name(result.name))')

Fragment(uuid='a527fbca-4cef-4117-8ef8-3d90bc6e54c4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=897,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_custom_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              '    return function.args[0]\n')

Fragment(uuid='31a03fd5-a320-44ef-8ce6-a271d83fb403',
         path='/lib/dblayer/backend/base/format.py',
         lineno=898,
         depth=0,
         type='function',
         name='format_custom_function',
         text='def format_custom_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              '    return function.args[0]')

Fragment(uuid='efb5d75d-5d3c-46b5-81a6-396bf628bd10',
         path='/lib/dblayer/backend/base/format.py',
         lineno=904,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_var_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              '    return quote_name(function.args[0])\n')

Fragment(uuid='3e3dad52-64c8-45b1-a3bc-20c109dfda13',
         path='/lib/dblayer/backend/base/format.py',
         lineno=906,
         depth=0,
         type='function',
         name='format_var_function',
         text='def format_var_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              '    return quote_name(function.args[0])')

Fragment(uuid='0ffe0737-0dd3-4777-b3a7-ad012de960a1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=912,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return '(NOT %s)' % format_expression(function.args[0])\n")

Fragment(uuid='76781ed1-d3af-4c60-94e5-64dd242011ea',
         path='/lib/dblayer/backend/base/format.py',
         lineno=914,
         depth=0,
         type='function',
         name='format_not_function',
         text='def format_not_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return '(NOT %s)' % format_expression(function.args[0])")

Fragment(uuid='8e4853d0-d0a2-470a-a388-575647a5ad29',
         path='/lib/dblayer/backend/base/format.py',
         lineno=920,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_and_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return '(%s)' % ' AND '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='d16028ab-573d-48a4-a284-b4dc6b937fbf',
         path='/lib/dblayer/backend/base/format.py',
         lineno=922,
         depth=0,
         type='function',
         name='format_and_function',
         text='def format_and_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return '(%s)' % ' AND '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='3c6e6149-0184-4820-90e4-d798b4852f55',
         path='/lib/dblayer/backend/base/format.py',
         lineno=928,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_or_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return '(%s)' % ' OR '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='240b880f-e4df-4fa8-a46c-635d02d92d73',
         path='/lib/dblayer/backend/base/format.py',
         lineno=930,
         depth=0,
         type='function',
         name='format_or_function',
         text='def format_or_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return '(%s)' % ' OR '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='b927b973-0653-4678-87fa-95f7e5130774',
         path='/lib/dblayer/backend/base/format.py',
         lineno=936,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s = %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='383674ac-4587-4eff-9d3c-b84a6e244bb6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=938,
         depth=0,
         type='function',
         name='format_equal_function',
         text='def format_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s = %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='dc852df4-ce1e-4f79-993a-b8e8a46bb243',
         path='/lib/dblayer/backend/base/format.py',
         lineno=944,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s <> %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='eaf48e10-0d88-49be-b77e-32cbcc19143d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=946,
         depth=0,
         type='function',
         name='format_not_equal_function',
         text='def format_not_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s <> %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='b13068c5-de22-4c5c-82ce-ff5fbba76d5c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=952,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_less_than_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s < %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='2889afc2-b2c2-44dc-a3c9-1f9971cb8ba9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=954,
         depth=0,
         type='function',
         name='format_less_than_function',
         text='def format_less_than_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s < %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='3730c41e-5974-48ce-bc28-53ea77e884e0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=960,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_less_than_or_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s <= %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='3b06ca35-c658-4334-b6a1-016a98f78a6a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=962,
         depth=0,
         type='function',
         name='format_less_than_or_equal_function',
         text='def format_less_than_or_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s <= %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='e6bbfe16-5403-4e3a-8122-fdfb2276061e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=968,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_greater_than_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s > %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='c81d0bd2-416b-40a9-b219-98597e2ceae4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=970,
         depth=0,
         type='function',
         name='format_greater_than_function',
         text='def format_greater_than_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s > %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='dad5ba80-35d0-4e9d-854c-c8c98920ed64',
         path='/lib/dblayer/backend/base/format.py',
         lineno=976,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_greater_than_or_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s >= %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='4e152633-88e1-4afc-9455-5255bc483375',
         path='/lib/dblayer/backend/base/format.py',
         lineno=978,
         depth=0,
         type='function',
         name='format_greater_than_or_equal_function',
         text='def format_greater_than_or_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s >= %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='87de161f-3159-4949-8894-b51a1436920b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=984,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_in_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              '    a, b = function.args\n'
              '    b = tuple(b)\n'
              '    if b:\n'
              "        return '(%s IN %s)' % (format_expression(a), "
              'quote_literal_value(b))\n'
              "    return 'FALSE'\n")

Fragment(uuid='450b566c-c69a-4c33-8b14-fbc723b5ef92',
         path='/lib/dblayer/backend/base/format.py',
         lineno=986,
         depth=0,
         type='function',
         name='format_in_function',
         text='def format_in_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              '    a, b = function.args\n'
              '    b = tuple(b)\n'
              '    if b:\n'
              "        return '(%s IN %s)' % (format_expression(a), "
              'quote_literal_value(b))\n'
              "    return 'FALSE'")

Fragment(uuid='03b07865-436e-44c1-be52-ba21b1756931',
         path='/lib/dblayer/backend/base/format.py',
         lineno=991,
         depth=2,
         type='variable',
         name='a,',
         text='a, b = function.args')

Fragment(uuid='28a6b617-b93c-4474-b5ac-9021f60caa92',
         path='/lib/dblayer/backend/base/format.py',
         lineno=992,
         depth=2,
         type='variable',
         name='b',
         text='b = tuple(b)')

Fragment(uuid='e2d7324a-0032-47b8-b505-6b3c1c02ae7f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=996,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_in_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              '    a, b = function.args\n'
              '    b = tuple(b)\n'
              '    if b:\n'
              "        return '(%s NOT IN %s)' % (format_expression(a), "
              'quote_literal_value(b))\n'
              "    return 'TRUE'\n")

Fragment(uuid='d0422c45-c81e-4e98-9bf1-bae5be9a59d0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=998,
         depth=0,
         type='function',
         name='format_not_in_function',
         text='def format_not_in_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              '    a, b = function.args\n'
              '    b = tuple(b)\n'
              '    if b:\n'
              "        return '(%s NOT IN %s)' % (format_expression(a), "
              'quote_literal_value(b))\n'
              "    return 'TRUE'")

Fragment(uuid='9dbf50b0-4453-45dc-8414-83b4e17a25b2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1003,
         depth=2,
         type='variable',
         name='a,',
         text='a, b = function.args')

Fragment(uuid='0732424f-1afb-485c-aa16-be7bd035f26f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1004,
         depth=2,
         type='variable',
         name='b',
         text='b = tuple(b)')

Fragment(uuid='a35436e0-357e-4aab-8e2c-d6bf517548b5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1008,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_neg_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return '(-%s)' % format_expression(function.args[0])\n")

Fragment(uuid='3ffcc88c-05f7-409c-a5d0-b19c048ef0d3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1010,
         depth=0,
         type='function',
         name='format_neg_function',
         text='def format_neg_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return '(-%s)' % format_expression(function.args[0])")

Fragment(uuid='bf56e481-7679-40f2-bad2-602bcddc5808',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1016,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_add_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' + '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='2f4252c5-2376-4643-bfef-16559bc7d45d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1018,
         depth=0,
         type='function',
         name='format_add_function',
         text='def format_add_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' + '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='4793eede-c221-419c-bb67-261e1eaea0ed',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1024,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_sub_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' - '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='b207995b-e455-486d-a552-318d07671c45',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1026,
         depth=0,
         type='function',
         name='format_sub_function',
         text='def format_sub_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' - '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='8daefd38-9ea8-46eb-9221-88c29ccecf7f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1032,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_mul_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' * '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='ddd4ee11-c76d-455c-a364-81d679bdb360',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1034,
         depth=0,
         type='function',
         name='format_mul_function',
         text='def format_mul_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' * '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='c79abdc1-6f51-46e7-a03a-88808961b5ec',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1040,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_div_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' / '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='97c597dd-050e-4093-ac45-510a0ead5366',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1042,
         depth=0,
         type='function',
         name='format_div_function',
         text='def format_div_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' / '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='48fee911-3d9d-442f-a8a9-3598acc63f94',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1048,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_concat_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return 'CONCAT(%s)' % ', '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='b6be274c-83fb-4a48-b676-d28e35b8d42d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1050,
         depth=0,
         type='function',
         name='format_concat_function',
         text='def format_concat_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return 'CONCAT(%s)' % ', '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='3d784556-f320-427e-b9d7-4c56d6da4a83',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1056,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_left_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return 'LEFT(%s, %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='ac9f72ea-747c-4ee4-9791-da2c14cf57a3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1058,
         depth=0,
         type='function',
         name='format_left_function',
         text='def format_left_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return 'LEFT(%s, %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='3ca96cb1-20bc-4c0d-b46e-0643978152e5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1064,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_right_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return 'RIGHT(%s, %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='bbeda233-63a7-408d-bbed-18f637e1cb8c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1066,
         depth=0,
         type='function',
         name='format_right_function',
         text='def format_right_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return 'RIGHT(%s, %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='62ee30ce-ca12-436e-aacb-d6044263fb6d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1072,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_substring_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert 2 <= len(function.args) <= 3\n'
              '\n'
              "    return 'SUBSTR(%s)' % ', '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='cf82985b-240b-4879-b42f-2cd5cbe58278',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1074,
         depth=0,
         type='function',
         name='format_substring_function',
         text='def format_substring_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert 2 <= len(function.args) <= 3\n'
              '\n'
              "    return 'SUBSTR(%s)' % ', '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='82324975-2bdf-45e7-9ee5-4abccc813656',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1080,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_contains_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(STRPOS(%s, %s) > 0)' % "
              'tuple(map(format_expression, function.args))\n')

Fragment(uuid='279feb0f-4d70-496d-a6cf-de598be1a8c0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1082,
         depth=0,
         type='function',
         name='format_contains_function',
         text='def format_contains_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(STRPOS(%s, %s) > 0)' % "
              'tuple(map(format_expression, function.args))')

Fragment(uuid='6c11d8a4-190d-4036-83ba-90b65f96bdd8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1088,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_like_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s LIKE %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='e4150f6d-0960-4dca-9ebd-16c2655e9828',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1090,
         depth=0,
         type='function',
         name='format_like_function',
         text='def format_like_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s LIKE %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='c3152a4e-aefa-4d1e-b82c-ce6c4fe03b0e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1096,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_like_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s NOT LIKE %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='6c286c16-de24-4bd6-ad80-99758a77d64f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1098,
         depth=0,
         type='function',
         name='format_not_like_function',
         text='def format_not_like_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s NOT LIKE %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='1a153d7f-ee4f-4f5c-b374-7390f8b9e350',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1104,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_match_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s ~ %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='b6a16a25-4b79-4cc9-9765-ce79fe8b2ddd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1106,
         depth=0,
         type='function',
         name='format_match_function',
         text='def format_match_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s ~ %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='49460029-b1fe-4859-99b2-648d467933e2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1112,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_match_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s !~ %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='430414d7-bab0-4314-9b46-32e6860602b3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1114,
         depth=0,
         type='function',
         name='format_not_match_function',
         text='def format_not_match_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s !~ %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='007b1923-ddcd-4916-aecd-2a7c1b749666',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1120,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_full_text_search_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s @@ %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='5211c37b-d754-4750-be8c-298616615aa5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1122,
         depth=0,
         type='function',
         name='format_full_text_search_function',
         text='def format_full_text_search_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s @@ %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='ab62a196-4902-4fcf-b530-56a8cf1787b7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1128,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_coalesce_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return 'COALESCE(%s)' % ', "
              "'.join(tuple(map(format_expression, function.args)))\n")

Fragment(uuid='044950ca-fa8b-480d-9006-3ee1932b7829',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1130,
         depth=0,
         type='function',
         name='format_coalesce_function',
         text='def format_coalesce_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return 'COALESCE(%s)' % ', "
              "'.join(tuple(map(format_expression, function.args)))")

Fragment(uuid='867e987d-b25f-47af-85ef-c97b756cd062',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1136,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_count_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'COUNT(%s)' % format_expression(function.args[0])\n")

Fragment(uuid='8a16716d-ddb4-4d58-98d2-5e3a001f0677',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1138,
         depth=0,
         type='function',
         name='format_count_aggregate',
         text='def format_count_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'COUNT(%s)' % format_expression(function.args[0])")

Fragment(uuid='a97a6e1d-9a51-4f51-94ee-59ff52b767e8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1144,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_min_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'MIN(%s)' % format_expression(function.args[0])\n")

Fragment(uuid='245e98ad-2ae5-45ea-9e2f-be0c18a1dc47',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1146,
         depth=0,
         type='function',
         name='format_min_aggregate',
         text='def format_min_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'MIN(%s)' % format_expression(function.args[0])")

Fragment(uuid='d6e909de-878e-4a33-851a-bfee57025f3d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1152,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_max_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'MAX(%s)' % format_expression(function.args[0])\n")

Fragment(uuid='e457993b-1067-4de4-bcef-f17dcbbffeb5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1154,
         depth=0,
         type='function',
         name='format_max_aggregate',
         text='def format_max_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'MAX(%s)' % format_expression(function.args[0])")

Fragment(uuid='e5fc30a7-1a82-4138-952d-56f221e5e11e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1160,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_sum_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'SUM(%s)' % format_expression(function.args[0])\n")

Fragment(uuid='f676443f-9e1e-4da5-9858-049bf9e7f9ff',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1162,
         depth=0,
         type='function',
         name='format_sum_aggregate',
         text='def format_sum_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'SUM(%s)' % format_expression(function.args[0])")

Fragment(uuid='26f1958d-3915-48ed-87fa-d5c248f53268',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1168,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_avg_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'AVG(%s)' % format_expression(function.args[0])\n")

Fragment(uuid='51b5b9ca-7814-4315-8efc-ab344c9617a1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1170,
         depth=0,
         type='function',
         name='format_avg_aggregate',
         text='def format_avg_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'AVG(%s)' % format_expression(function.args[0])")

Fragment(uuid='fec14cb8-b833-4436-bf26-3be747e9b838',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1176,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_function(function):\n'
              '    """ Formats an SQL function or aggregate\n'
              '    """\n')

Fragment(uuid='1d43ff1e-3060-471e-88a2-e31ed8d6da4d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1178,
         depth=0,
         type='function',
         name='format_function',
         text='def format_function(function):\n'
              '    """ Formats an SQL function or aggregate\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '\n'
              '    formatter = '
              'FUNCTION_FORMATTER_MAP[function.__class__.__name__]\n'
              '    return formatter(function)')

Fragment(uuid='34609350-d632-4926-8fd3-3ff82de232a4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1181,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '\n'
              '    formatter = '
              'FUNCTION_FORMATTER_MAP[function.__class__.__name__]\n'
              '    return formatter(function)\n'
              '\n'
              '\n'
              'FUNCTION_FORMATTER_MAP = dict(\n'
              '\n'
              '    # Functions\n'
              '    Custom=format_custom_function,\n'
              '    Var=format_var_function,\n'
              '    Not=format_not_function,\n'
              '    And=format_and_function,\n'
              '    Or=format_or_function,\n'
              '    Equal=format_equal_function,\n'
              '    NotEqual=format_not_equal_function,\n'
              '    LessThan=format_less_than_function,\n'
              '    LessThanOrEqual=format_less_than_or_equal_function,\n'
              '    GreaterThan=format_greater_than_function,\n'
              '    GreaterThanOrEqual=format_greater_than_or_equal_function,\n'
              '    In=format_in_function,\n'
              '    NotIn=format_not_in_function,')

Fragment(uuid='755e6a67-df75-4117-b0c7-7b470c23f237',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1184,
         depth=2,
         type='variable',
         name='formatter',
         text='formatter = FUNCTION_FORMATTER_MAP[function.__class__.__name__]')

Fragment(uuid='584b6185-9e06-4493-bcc2-e87333643880',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1188,
         depth=0,
         type='variable',
         name='FUNCTION_FORMATTER_MAP',
         text='FUNCTION_FORMATTER_MAP = dict(\n'
              '\n'
              '    # Functions\n'
              '    Custom=format_custom_function,\n'
              '    Var=format_var_function,\n'
              '    Not=format_not_function,\n'
              '    And=format_and_function,\n'
              '    Or=format_or_function,\n'
              '    Equal=format_equal_function,\n'
              '    NotEqual=format_not_equal_function,\n'
              '    LessThan=format_less_than_function,\n'
              '    LessThanOrEqual=format_less_than_or_equal_function,\n'
              '    GreaterThan=format_greater_than_function,\n'
              '    GreaterThanOrEqual=format_greater_than_or_equal_function,\n'
              '    In=format_in_function,\n'
              '    NotIn=format_not_in_function,\n'
              '    Neg=format_neg_function,\n'
              '    Add=format_add_function,\n'
              '    Sub=format_sub_function,\n'
              '    Mul=for')

Fragment(uuid='434f6d60-4b00-47f3-aa72-f726bc6a118a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1203,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    Neg=format_neg_function,\n'
              '    Add=format_add_function,\n'
              '    Sub=format_sub_function,\n'
              '    Mul=format_mul_function,\n'
              '    Div=format_div_function,\n'
              '    Concat=format_concat_function,\n'
              '    Left=format_left_function,\n'
              '    Right=format_right_function,\n'
              '    Substring=format_substring_function,\n'
              '    Contains=format_contains_function,\n'
              '    Like=format_like_function,\n'
              '    NotLik')

Fragment(uuid='55755d4f-7bd3-485d-a285-e893c162e494',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1207,
         depth=0,
         type='variable',
         name='FUNCTION_FORMATTER_MAP',
         text='mat_mul_function,\n'
              '    Div=format_div_function,\n'
              '    Concat=format_concat_function,\n'
              '    Left=format_left_function,\n'
              '    Right=format_right_function,\n'
              '    Substring=format_substring_function,\n'
              '    Contains=format_contains_function,\n'
              '    Like=format_like_function,\n'
              '    NotLike=format_not_like_function,\n'
              '    Match=format_match_function,\n'
              '    NotMatch=format_not_match_function,\n'
              '    FullTextSearch=format_full_text_search_function,\n'
              '    Coalesce=format_coalesce_function,\n'
              '\n'
              '    # Aggregates\n'
              '    Count=format_count_aggregate,\n'
              '    Min=format_min_aggregate,\n'
              '    Max=format_max_aggregate,\n'
              '    Sum=format_sum_aggregate,\n'
              '    Avg=format_avg_aggregate,\n'
              ')')

Fragment(uuid='dbbfa2b3-3b9b-48ff-aa3e-3fc1833075d6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1215,
         depth=0,
         type='module',
         name='',
         text='e=format_not_like_function,\n'
              '    Match=format_match_function,\n'
              '    NotMatch=format_not_match_function,\n'
              '    FullTextSearch=format_full_text_search_function,\n'
              '    Coalesce=format_coalesce_function,\n'
              '\n'
              '    # Aggregates\n'
              '    Count=format_count_aggregate,\n'
              '    Min=format_min_aggregate,\n'
              '    Max=format_max_aggregate,\n'
              '    Sum=format_sum_aggregate,\n'
              '    Avg=format_avg_aggregate,\n'
              ')\n')

Fragment(uuid='19e98620-72f1-4264-b0d5-e882ac0e2c38',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1228,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_expression(expression):\n'
              '    """ Formats an expression, which is either a column '
              'reference of a function\n'
              '    """\n'
              '    if isinstance(expression, '
              'dblayer.model.column.BaseColumn):\n'
              '        if expression.table is None:\n'
              '            return quote_name(expression.name)\n'
              '        return quote_table_column_name(expression.table._name, '
              'expression.name)\n'
              '\n'
              '    if isinstance(expression, '
              'dblayer.model.index.FullTextSearchIndex):\n'
              '        return quote_table_column_name(expression.table._name, '
              "expression.name + '_document')\n"
              '\n'
              '    if isinstance(expression, '
              'dblayer.model.function.BaseFunction):\n'
              '        return format_function(expression)\n'
              '\n'
              '    return quote_literal_value(expression)\n'
              '\n'
              '\n'
              '### Formatting query conditions at runtime\n')

Fragment(uuid='3bc401cc-73d8-4786-ae0c-a96377971f1c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1230,
         depth=0,
         type='function',
         name='format_expression',
         text='def format_expression(expression):\n'
              '    """ Formats an expression, which is either a column '
              'reference of a function\n'
              '    """\n'
              '    if isinstance(expression, '
              'dblayer.model.column.BaseColumn):\n'
              '        if expression.table is None:\n'
              '            return quote_name(expression.name)\n'
              '        return quote_table_column_name(expression.table._name, '
              'expression.name)\n'
              '\n'
              '    if isinstance(expression, '
              'dblayer.model.index.FullTextSearchIndex):\n'
              '        return quote_table_column_name(expression.table._name, '
              "expression.name + '_document')\n"
              '\n'
              '    if isinstance(expression, '
              'dblayer.model.function.BaseFunction):\n'
              '        return format_function(expression)\n'
              '\n'
              '    return quote_literal_value(expression)')

Fragment(uuid='a2bdcca4-ac61-4f9e-9c00-8225f1713b4c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1248,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_eq_condition(sql_expression, value):\n'
              '    if value is None:\n'
              "        return ('%s IS NULL' % sql_expression, ())\n"
              "    return ('%s = ?' % sql_expression, (value,))\n")

Fragment(uuid='fc9022c8-890c-4b51-ae9d-df5ce7c32861',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1249,
         depth=0,
         type='function',
         name='format_eq_condition',
         text='def format_eq_condition(sql_expression, value):\n'
              '    if value is None:\n'
              "        return ('%s IS NULL' % sql_expression, ())\n"
              "    return ('%s = ?' % sql_expression, (value,))")

Fragment(uuid='049fb69a-c7af-4eb3-aa40-cdce9eb714ad',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1253,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_ne_condition(sql_expression, value):\n'
              '    if value is None:\n'
              "        return ('%s IS NOT NULL' % sql_expression, ())\n"
              "    return ('%s <> ?' % sql_expression, (value,))\n")

Fragment(uuid='7956657b-40ba-4903-b5d8-b4accf260925',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1255,
         depth=0,
         type='function',
         name='format_ne_condition',
         text='def format_ne_condition(sql_expression, value):\n'
              '    if value is None:\n'
              "        return ('%s IS NOT NULL' % sql_expression, ())\n"
              "    return ('%s <> ?' % sql_expression, (value,))")

Fragment(uuid='b40e7e66-ed4f-46ea-84cb-b849dbe871d3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1259,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_gt_condition(sql_expression, value):\n'
              "    return ('%s > ?' % sql_expression, (value,))\n")

Fragment(uuid='e39fdef6-1e4c-42a0-a295-080abe8338fe',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1261,
         depth=0,
         type='function',
         name='format_gt_condition',
         text='def format_gt_condition(sql_expression, value):\n'
              "    return ('%s > ?' % sql_expression, (value,))")

Fragment(uuid='dfd0d54d-ef05-4ccf-b703-d8bf743dc2e6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1263,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_lt_condition(sql_expression, value):\n'
              "    return ('%s < ?' % sql_expression, (value,))\n")

Fragment(uuid='f4b6b4d2-10a6-453f-9927-e5a761b862c5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1265,
         depth=0,
         type='function',
         name='format_lt_condition',
         text='def format_lt_condition(sql_expression, value):\n'
              "    return ('%s < ?' % sql_expression, (value,))")

Fragment(uuid='5e20ace8-5029-47f0-a1d0-6b265e638464',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1267,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_ge_condition(sql_expression, value):\n'
              "    return ('%s >= ?' % sql_expression, (value,))\n")

Fragment(uuid='df359b7d-3a0f-4014-b3b9-5b0b577bc13d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1269,
         depth=0,
         type='function',
         name='format_ge_condition',
         text='def format_ge_condition(sql_expression, value):\n'
              "    return ('%s >= ?' % sql_expression, (value,))")

Fragment(uuid='707b4c02-4375-4485-bb80-8781eb03eef1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1271,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_le_condition(sql_expression, value):\n'
              "    return ('%s <= ?' % sql_expression, (value,))\n")

Fragment(uuid='c277ee1b-6c33-4796-a3f9-78f4c045bac9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1273,
         depth=0,
         type='function',
         name='format_le_condition',
         text='def format_le_condition(sql_expression, value):\n'
              "    return ('%s <= ?' % sql_expression, (value,))")

Fragment(uuid='8bc77926-af84-40b8-acc3-00eb2cf0a199',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1275,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_range_condition(sql_expression, value):\n'
              '    # NOTE: It can only be used with an sql_expression without '
              'parameter placeholders.\n'
              '    lower_limit, upper_limit = value\n'
              '    return (\n'
              "        '%s >= ? AND %s < ?' % (sql_expression, "
              'sql_expression),\n'
              '        (lower_limit, upper_limit))\n')

Fragment(uuid='ae2fc42f-6c51-4cc9-ac32-83cdd3954a39',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1277,
         depth=0,
         type='function',
         name='format_range_condition',
         text='def format_range_condition(sql_expression, value):\n'
              '    # NOTE: It can only be used with an sql_expression without '
              'parameter placeholders.\n'
              '    lower_limit, upper_limit = value\n'
              '    return (\n'
              "        '%s >= ? AND %s < ?' % (sql_expression, "
              'sql_expression),\n'
              '        (lower_limit, upper_limit))')

Fragment(uuid='2d3f927f-a5ca-4fae-8a8a-ae7744be1ce3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1279,
         depth=2,
         type='variable',
         name='lower_limit,',
         text='lower_limit, upper_limit = value')

Fragment(uuid='c2552608-65d2-418d-989a-e05e8fd59c3d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1283,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_in_range_condition(sql_expression, value):\n'
              '    # NOTE: It can only be used with an sql_expression without '
              'parameter placeholders.\n'
              '    lower_limit, upper_limit = value\n'
              '    return (\n'
              "        '(%s < ? OR %s > ?)' % (sql_expression, "
              'sql_expression),\n'
              '        (lower_limit, upper_limit))\n')

Fragment(uuid='efd44fef-5351-4672-8db3-2522c8fd0ea3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1285,
         depth=0,
         type='function',
         name='format_not_in_range_condition',
         text='def format_not_in_range_condition(sql_expression, value):\n'
              '    # NOTE: It can only be used with an sql_expression without '
              'parameter placeholders.\n'
              '    lower_limit, upper_limit = value\n'
              '    return (\n'
              "        '(%s < ? OR %s > ?)' % (sql_expression, "
              'sql_expression),\n'
              '        (lower_limit, upper_limit))')

Fragment(uuid='7b7c3dcd-5040-45b0-9e9b-8580fce589c0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1287,
         depth=2,
         type='variable',
         name='lower_limit,',
         text='lower_limit, upper_limit = value')

Fragment(uuid='29b9f26e-f7c4-4e7b-970a-3ed045a5701f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1291,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_in_condition(sql_expression, value):\n'
              '    value = tuple(value)\n'
              '    if not value:\n'
              "        return ('FALSE', ())\n"
              "    return ('%s IN ?' % sql_expression, (value,))\n")

Fragment(uuid='1f54988e-659a-49c0-80cb-e6832c976285',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1293,
         depth=0,
         type='function',
         name='format_in_condition',
         text='def format_in_condition(sql_expression, value):\n'
              '    value = tuple(value)\n'
              '    if not value:\n'
              "        return ('FALSE', ())\n"
              "    return ('%s IN ?' % sql_expression, (value,))")

Fragment(uuid='87cb186e-4ff0-4d81-b06a-e230ae396dc1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1294,
         depth=2,
         type='variable',
         name='value',
         text='value = tuple(value)')

Fragment(uuid='293d4444-f632-4981-b441-14dd094cb929',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1298,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_in_condition(sql_expression, value):\n'
              '    value = tuple(value)\n'
              '    if not value:\n'
              "        return ('TRUE', ())\n"
              "    return ('%s NOT IN ?' % sql_expression, (value,))\n")

Fragment(uuid='ee3417da-15c2-432f-9171-276d2630883b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1300,
         depth=0,
         type='function',
         name='format_not_in_condition',
         text='def format_not_in_condition(sql_expression, value):\n'
              '    value = tuple(value)\n'
              '    if not value:\n'
              "        return ('TRUE', ())\n"
              "    return ('%s NOT IN ?' % sql_expression, (value,))")

Fragment(uuid='7d3043ca-6f29-42d6-bdb9-07ff9b4a5d67',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1301,
         depth=2,
         type='variable',
         name='value',
         text='value = tuple(value)')

Fragment(uuid='64303692-4c62-44d4-937f-9ac5eb59f644',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1305,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_like_condition(sql_expression, value):\n'
              "    return ('%s LIKE ?' % sql_expression, (value,))\n")

Fragment(uuid='b33226b1-5e9c-462f-8a35-4a2b20fc6d7a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1307,
         depth=0,
         type='function',
         name='format_like_condition',
         text='def format_like_condition(sql_expression, value):\n'
              "    return ('%s LIKE ?' % sql_expression, (value,))")

Fragment(uuid='02b0628c-cd69-456e-8ccb-70d821e84999',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1309,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_like_condition(sql_expression, value):\n'
              "    return ('%s NOT LIKE ?' % sql_expression, (value,))\n")

Fragment(uuid='2bcf2d37-985a-4382-8248-dcabd95ac390',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1311,
         depth=0,
         type='function',
         name='format_not_like_condition',
         text='def format_not_like_condition(sql_expression, value):\n'
              "    return ('%s NOT LIKE ?' % sql_expression, (value,))")

Fragment(uuid='e4465067-4cbb-4c2c-87ce-b865e8703f44',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1313,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_similar_to_condition(sql_expression, value):\n'
              "    return ('%s SIMILAR TO ?' % sql_expression, (value,))\n")

Fragment(uuid='501094fa-7ac5-49bd-a810-1e85c7f9915c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1315,
         depth=0,
         type='function',
         name='format_similar_to_condition',
         text='def format_similar_to_condition(sql_expression, value):\n'
              "    return ('%s SIMILAR TO ?' % sql_expression, (value,))")

Fragment(uuid='11e7e101-b547-4424-8de1-3aa32dd7b468',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1317,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_similar_to_condition(sql_expression, value):\n'
              "    return ('%s NOT SIMILAR TO ?' % sql_expression, (value,))\n")

Fragment(uuid='4039b5d5-8d85-444b-be1a-1356f88d3be8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1319,
         depth=0,
         type='function',
         name='format_not_similar_to_condition',
         text='def format_not_similar_to_condition(sql_expression, value):\n'
              "    return ('%s NOT SIMILAR TO ?' % sql_expression, (value,))")

Fragment(uuid='aecd82a3-d216-4136-b604-e083e1bab9e4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1321,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_match_condition(sql_expression, value):\n'
              "    return ('%s ~ ?' % sql_expression, (value,))\n")

Fragment(uuid='2509b9d2-c5ff-4442-817e-5c5754190705',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1323,
         depth=0,
         type='function',
         name='format_match_condition',
         text='def format_match_condition(sql_expression, value):\n'
              "    return ('%s ~ ?' % sql_expression, (value,))")

Fragment(uuid='918e6397-82f7-4ca5-bf8f-f3d70d619484',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1325,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_match_condition(sql_expression, value):\n'
              "    return ('%s !~ ?' % sql_expression, (value,))\n")

Fragment(uuid='0cd3397a-2842-4c61-8b29-facfe42be033',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1327,
         depth=0,
         type='function',
         name='format_not_match_condition',
         text='def format_not_match_condition(sql_expression, value):\n'
              "    return ('%s !~ ?' % sql_expression, (value,))")

Fragment(uuid='e457d1f4-a326-4bcb-852a-9f850cf542d2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1329,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_search_condition(sql_expression, value):\n'
              "    return ('%s @@ plainto_tsquery(?)' % sql_expression, "
              '(value,))\n'
              '\n'
              '\n'
              '# Keyword argument suffixes, SQL template and function to '
              'prepare\n'
              '# the expressions passed as parameters\n'
              'QUERY_CONDITION_OPERATOR_LIST = (\n'
              "    ('', format_eq_condition),\n"
              "    ('_eq', format_eq_condition),\n"
              "    ('_ne', format_ne_condition),\n"
              "    ('_gt', format_gt_condition),\n"
              "    ('_lt', format_lt_condition),\n"
              "    ('_ge', format_ge_condition),\n"
              "    ('_le', format_le_condition),\n"
              "    ('_range', ")

Fragment(uuid='91ebe636-3104-42f0-92f0-0ab01a2985ba',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1331,
         depth=0,
         type='function',
         name='format_search_condition',
         text='def format_search_condition(sql_expression, value):\n'
              "    return ('%s @@ plainto_tsquery(?)' % sql_expression, "
              '(value,))')

Fragment(uuid='19363694-23c0-4b5a-9f59-e67392448dcc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1337,
         depth=0,
         type='variable',
         name='QUERY_CONDITION_OPERATOR_LIST',
         text='QUERY_CONDITION_OPERATOR_LIST = (\n'
              "    ('', format_eq_condition),\n"
              "    ('_eq', format_eq_condition),\n"
              "    ('_ne', format_ne_condition),\n"
              "    ('_gt', format_gt_condition),\n"
              "    ('_lt', format_lt_condition),\n"
              "    ('_ge', format_ge_condition),\n"
              "    ('_le', format_le_condition),\n"
              "    ('_range', format_range_condition),\n"
              "    ('_not_in_range', format_not_in_range_condition),\n"
              "    ('_in', format")

Fragment(uuid='b4a7fa39-2443-4ae3-aefa-5d5e9b188fa6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1345,
         depth=0,
         type='module',
         name='',
         text='format_range_condition),\n'
              "    ('_not_in_range', format_not_in_range_condition),\n"
              "    ('_in', format_in_condition),\n"
              "    ('_not_in', format_not_in_condition),\n"
              "    ('_like', format_like_condition),\n"
              "    ('_not_like', format_not_like_condition),\n"
              "    ('_similar_to', format_similar_to_condition),\n"
              "    ('_not_similar_to', format_not_similar_to_condition),\n"
              "    ('_match', format_match_condition),\n"
              "    ('_not_match', format_not_match_condition),\n"
              "    ('_search', format_search_condition),\n"
              ')\n'
              '\n'
              '\n'
              '### Formatting query conditions\n')

Fragment(uuid='3e910f93-86b5-42ba-81dd-446356646bf9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1347,
         depth=0,
         type='variable',
         name='QUERY_CONDITION_OPERATOR_LIST',
         text='_in_condition),\n'
              "    ('_not_in', format_not_in_condition),\n"
              "    ('_like', format_like_condition),\n"
              "    ('_not_like', format_not_like_condition),\n"
              "    ('_similar_to', format_similar_to_condition),\n"
              "    ('_not_similar_to', format_not_similar_to_condition),\n"
              "    ('_match', format_match_condition),\n"
              "    ('_not_match', format_not_match_condition),\n"
              "    ('_search', format_search_condition),\n"
              ')')

Fragment(uuid='6fe6763a-030e-4a70-9406-36427fe3872e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1360,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_query_condition(condition):\n'
              '    """ Returns formatted query condition\n'
              '    \n'
              '    Yields (argument_name, (suffix, formatting_function_name, '
              'value_expression))\n'
              '    tuples for each operator.\n'
              '    \n'
              '    """\n'
              '    if 0:\n'
              '        assert isinstance(condition, '
              'dblayer.model.query.Result)\n'
              '\n'
              '    value_expression = format_expression(condition.expression)\n'
              '\n'
              '    # Equals to a given value\n'
              '    for suffix, formatting_function in '
              'QUERY_CONDITION_OPERATOR_LIST:\n'
              '        # Name of the argument for this operator\n'
              '        argument_name = condition.name + suffix\n'
              '\n'
              '        # Yield SQL argument name and SQL expression for this '
              'operator\n'
              '        yield (argument_name, (suffix, '
              'formatting_function.__name__, value_expression))\n')

Fragment(uuid='e7112605-d4d4-4592-ae76-b0677db19d78',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1361,
         depth=0,
         type='function',
         name='format_query_condition',
         text='def format_query_condition(condition):\n'
              '    """ Returns formatted query condition\n'
              '    \n'
              '    Yields (argument_name, (suffix, formatting_function_name, '
              'value_expression))\n'
              '    tuples for each operator.\n'
              '    \n'
              '    """\n'
              '    if 0:\n'
              '        assert isinstance(condition, '
              'dblayer.model.query.Result)\n'
              '\n'
              '    value_expression = format_expression(condition.expression)\n'
              '\n'
              '    # Equals to a given value\n'
              '    for suffix, formatting_function in '
              'QUERY_CONDITION_OPERATOR_LIST:\n'
              '        # Name of the argument for this operator\n'
              '        argument_name = condition.name + suffix\n'
              '\n'
              '        # Yield SQL argument name and SQL expression for this '
              'operator\n'
              '        yield (argument_name, (suffix, '
              'formatting_function.__name__, value_expression))')

Fragment(uuid='038c115c-bf82-4980-81fc-a950419fed0e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1371,
         depth=2,
         type='variable',
         name='value_expression',
         text='value_expression = format_expression(condition.expression)')

Fragment(uuid='491dbfc8-9e84-45f0-a077-cd1df4fcbc4e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1376,
         depth=4,
         type='variable',
         name='argument_name',
         text='argument_name = condition.name + suffix')

Fragment(uuid='00efa8ca-4d04-4898-baa9-389fa625623c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1380,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_query_condition_map(query):\n'
              '    """ Returns dictionaries mapping names of all possible '
              'query conditions\n'
              '    to the formatted SQL condition and parameter_tuple\n'
              '    \n'
              '    Returns (where_condition_map, having_condition_map)\n'
              '    \n'
              '    The returned dictionaries map all possible keyword argument '
              'names to\n'
              '    (suffix, sql_expression, prepare_value_function_name) '
              'tuples.\n'
              '    \n'
              '    """\n'
              '    # Process all the query conditions\n'
              '    where_condition_map = {}\n'
              '    having_condition_map = {}\n')

Fragment(uuid='cb6047ad-a70c-4b67-98cc-391a3f720fe6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1382,
         depth=0,
         type='function',
         name='format_query_condition_map',
         text='def format_query_condition_map(query):\n'
              '    """ Returns dictionaries mapping names of all possible '
              'query conditions\n'
              '    to the formatted SQL condition and parameter_tuple\n'
              '    \n'
              '    Returns (where_condition_map, having_condition_map)\n'
              '    \n'
              '    The returned dictionaries map all possible keyword argument '
              'names to\n'
              '    (suffix, sql_expression, prepare_value_function_name) '
              'tuples.\n'
              '    \n'
              '    """\n'
              '    # Process all the query conditions\n'
              '    where_condition_map = {}\n'
              '    having_condition_map = {}\n')

Fragment(uuid='1935d872-ed8d-4a11-810f-9fa3dcb3c1ff',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1393,
         depth=2,
         type='variable',
         name='where_condition_map',
         text='where_condition_map = {}')

Fragment(uuid='e3dd0c6b-05c4-4467-a8c1-b7d72ec38401',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1394,
         depth=2,
         type='variable',
         name='having_condition_map',
         text='having_condition_map = {}')

Fragment(uuid='4fcacbf0-c33f-44cf-9759-495e4420cc9d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1395,
         depth=0,
         type='module',
         name='',
         text='    for condition in query._column_list + '
              'query._condition_list:\n'
              '\n'
              '        # Select the appropriate condition map\n'
              '        if condition.after_group_by:\n'
              '            condition_map = having_condition_map\n'
              '        else:\n'
              '            condition_map = where_condition_map\n'
              '\n'
              '        # Append each possible operator for this condition\n'
              '        '
              'condition_map.update(format_query_condition(condition))\n'
              '\n'
              '    return (where_condition_map, having_condition_map)\n')

Fragment(uuid='27c5508d-0130-441c-8847-f24590d91c16',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1395,
         depth=0,
         type='function',
         name='format_query_condition_map',
         text='    for condition in query._column_list + '
              'query._condition_list:\n'
              '\n'
              '        # Select the appropriate condition map\n'
              '        if condition.after_group_by:\n'
              '            condition_map = having_condition_map\n'
              '        else:\n'
              '            condition_map = where_condition_map\n'
              '\n'
              '        # Append each possible operator for this condition\n'
              '        '
              'condition_map.update(format_query_condition(condition))\n'
              '\n'
              '    return (where_condition_map, having_condition_map)')

Fragment(uuid='31ca9926-d46b-4fcb-9efc-99b0608cd809',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1399,
         depth=6,
         type='variable',
         name='condition_map',
         text='condition_map = having_condition_map')

Fragment(uuid='d6fc10c8-c3f5-4355-b333-061ec54c55ab',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1401,
         depth=7,
         type='variable',
         name='condition_map',
         text='condition_map = where_condition_map')

Fragment(uuid='93a8bfbe-2e84-473e-8f13-4981bc8ab7d1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1407,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_query_order_by_map(query):\n'
              '    """ Returns a dictionary mapping all the possible ascending '
              'and descending \n'
              '    order by fields to their SQL expression\n'
              '    """\n'
              '    order_by_map = {}\n'
              '    for query_result in query._column_list + '
              'query._condition_list:\n'
              '        name = query_result.name\n'
              '        sql_expression = '
              'format_expression(query_result.expression)\n'
              '        order_by_map[name] = sql_expression\n'
              "        order_by_map['+' + name] = sql_expression\n"
              "        order_by_map['-' + name] = sql_expression + ' DESC'\n"
              '    return order_by_map\n')

Fragment(uuid='9d1a0c66-b13b-4d0c-ac8a-2ed16b4129f4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1409,
         depth=0,
         type='function',
         name='format_query_order_by_map',
         text='def format_query_order_by_map(query):\n'
              '    """ Returns a dictionary mapping all the possible ascending '
              'and descending \n'
              '    order by fields to their SQL expression\n'
              '    """\n'
              '    order_by_map = {}\n'
              '    for query_result in query._column_list + '
              'query._condition_list:\n'
              '        name = query_result.name\n'
              '        sql_expression = '
              'format_expression(query_result.expression)\n'
              '        order_by_map[name] = sql_expression\n'
              "        order_by_map['+' + name] = sql_expression\n"
              "        order_by_map['-' + name] = sql_expression + ' DESC'\n"
              '    return order_by_map')

Fragment(uuid='66adb499-6400-4c97-a7e3-c12aef880596',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1413,
         depth=2,
         type='variable',
         name='order_by_map',
         text='order_by_map = {}')

Fragment(uuid='48d07378-6010-4ceb-9e03-6a1e3cf5e550',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1415,
         depth=4,
         type='variable',
         name='name',
         text='name = query_result.name')

Fragment(uuid='950fd204-c5ba-4b40-9793-8da4a1e11da6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1416,
         depth=4,
         type='variable',
         name='sql_expression',
         text='sql_expression = format_expression(query_result.expression)')

Fragment(uuid='32853a6e-87f0-444f-83ff-8fb82bc447dc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1417,
         depth=4,
         type='variable',
         name='order_by_map[name]',
         text='order_by_map[name] = sql_expression')

Fragment(uuid='cd4b2266-bf75-4d9e-9b81-be1ff4a34dd4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1418,
         depth=4,
         type='variable',
         name="order_by_map['+'",
         text="order_by_map['+' + name] = sql_expression")

Fragment(uuid='7dfd1596-2022-4c55-9a12-d170a16ec9e2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1419,
         depth=4,
         type='variable',
         name="order_by_map['-'",
         text="order_by_map['-' + name] = sql_expression + ' DESC'")

Fragment(uuid='33c6c2f3-334a-4493-9ebd-6c926b67712d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1421,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_table_column_condition(column):\n'
              '    """ Returns formatted table column condition\n'
              '    \n'
              '    Yields (argument_name, (suffix, formatting_function_name, '
              'value_expression))\n'
              '    tuples for each operator.\n'
              '    \n'
              '    """\n'
              '    if 0:\n'
              '        assert isinstance(condition, '
              'dblayer.model.query.BaseColumn)\n'
              '\n'
              '    value_expression = format_expression(column)\n'
              '\n'
              '    # Equals to a given value\n'
              '    for suffix, formatting_function in '
              'QUERY_CONDITION_OPERATOR_LIST:\n'
              '        # Name of the argument for this operator\n'
              '        argument_name = column.name + suffix\n'
              '\n'
              '        # Yield SQL argument name and SQL expression for this '
              'operator\n'
              '        yield (argument_name, (suffix, '
              'formatting_function.__name__, value_expression))\n')

Fragment(uuid='2880493c-025a-4977-8d6a-f1695ff2e22f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1423,
         depth=0,
         type='function',
         name='format_table_column_condition',
         text='def format_table_column_condition(column):\n'
              '    """ Returns formatted table column condition\n'
              '    \n'
              '    Yields (argument_name, (suffix, formatting_function_name, '
              'value_expression))\n'
              '    tuples for each operator.\n'
              '    \n'
              '    """\n'
              '    if 0:\n'
              '        assert isinstance(condition, '
              'dblayer.model.query.BaseColumn)\n'
              '\n'
              '    value_expression = format_expression(column)\n'
              '\n'
              '    # Equals to a given value\n'
              '    for suffix, formatting_function in '
              'QUERY_CONDITION_OPERATOR_LIST:\n'
              '        # Name of the argument for this operator\n'
              '        argument_name = column.name + suffix\n'
              '\n'
              '        # Yield SQL argument name and SQL expression for this '
              'operator\n'
              '        yield (argument_name, (suffix, '
              'formatting_function.__name__, value_expression))')

Fragment(uuid='19642a50-f9c1-4cd9-9462-056066f7aac5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1433,
         depth=2,
         type='variable',
         name='value_expression',
         text='value_expression = format_expression(column)')

Fragment(uuid='572903ed-fcb6-45b9-a0d2-a2ae0e8d8188',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1438,
         depth=4,
         type='variable',
         name='argument_name',
         text='argument_name = column.name + suffix')

Fragment(uuid='cd93373e-472e-4ac3-b14c-b0ac6d4b6ff4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1442,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_table_condition_map(table):\n'
              '    """ Returns dictionary mapping names of all possible column '
              'conditions\n'
              '    to the formatted SQL condition and parameter_tuple\n'
              '    \n'
              '    The returned dictionary maps all possible keyword argument '
              'names to\n'
              '    (suffix, sql_expression, prepare_value_function_name) '
              'tuples.\n'
              '    \n'
              '    """\n'
              '    # Process all the query conditions\n'
              '    condition_map = {}\n'
              '    for column in table._column_list:\n'
              '        # Append each possible operator for this condition\n'
              '        '
              'condition_map.update(format_table_column_condition(column))\n'
              '\n'
              '    return condition_map\n')

Fragment(uuid='c34c3359-a4be-48f8-a3c5-0e84434e22ef',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1444,
         depth=0,
         type='function',
         name='format_table_condition_map',
         text='def format_table_condition_map(table):\n'
              '    """ Returns dictionary mapping names of all possible column '
              'conditions\n'
              '    to the formatted SQL condition and parameter_tuple\n'
              '    \n'
              '    The returned dictionary maps all possible keyword argument '
              'names to\n'
              '    (suffix, sql_expression, prepare_value_function_name) '
              'tuples.\n'
              '    \n'
              '    """\n'
              '    # Process all the query conditions\n'
              '    condition_map = {}\n'
              '    for column in table._column_list:\n'
              '        # Append each possible operator for this condition\n'
              '        '
              'condition_map.update(format_table_column_condition(column))\n'
              '\n'
              '    return condition_map')

Fragment(uuid='109f99d4-6772-44ab-a05c-203d81229a56',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1453,
         depth=2,
         type='variable',
         name='condition_map',
         text='condition_map = {}')

Fragment(uuid='8df68956-d7b8-4da4-b073-203688dcdd87',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1459,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_table_order_by_map(table):\n'
              '    """ Returns a dictionary mapping all the possible ascending '
              'and descending \n'
              '    order by columns to their SQL expression\n'
              '    """\n'
              '    order_by_map = {}\n'
              '    for column in table._column_list:\n'
              '        name = column.name\n'
              '        sql_expression = format_expression(column)\n'
              '        order_by_map[name] = sql_expression\n'
              "        order_by_map['+' + name] = sql_expression\n"
              "        order_by_map['-' + name] = sql_expression + ' DESC'\n"
              '    return order_by_map\n'
              '\n'
              '\n'
              '### Formatting queries at runtime\n')

Fragment(uuid='f537e05a-2fde-4916-a53c-2daccf44312f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1461,
         depth=0,
         type='function',
         name='format_table_order_by_map',
         text='def format_table_order_by_map(table):\n'
              '    """ Returns a dictionary mapping all the possible ascending '
              'and descending \n'
              '    order by columns to their SQL expression\n'
              '    """\n'
              '    order_by_map = {}\n'
              '    for column in table._column_list:\n'
              '        name = column.name\n'
              '        sql_expression = format_expression(column)\n'
              '        order_by_map[name] = sql_expression\n'
              "        order_by_map['+' + name] = sql_expression\n"
              "        order_by_map['-' + name] = sql_expression + ' DESC'\n"
              '    return order_by_map')

Fragment(uuid='0df4d08f-a4cf-4c29-bd93-ff4907aa728a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1465,
         depth=2,
         type='variable',
         name='order_by_map',
         text='order_by_map = {}')

Fragment(uuid='7d84f6aa-fceb-4b64-acf3-73f90e809eb5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1467,
         depth=4,
         type='variable',
         name='name',
         text='name = column.name')

Fragment(uuid='4165faaf-98d1-425e-9ae0-fbc1d1e45e85',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1468,
         depth=4,
         type='variable',
         name='sql_expression',
         text='sql_expression = format_expression(column)')

Fragment(uuid='38a3541c-698c-4a12-b49e-7d5533cac59b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1469,
         depth=4,
         type='variable',
         name='order_by_map[name]',
         text='order_by_map[name] = sql_expression')

Fragment(uuid='aac1eebe-1eac-470d-be28-e8b037dc18a0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1470,
         depth=4,
         type='variable',
         name="order_by_map['+'",
         text="order_by_map['+' + name] = sql_expression")

Fragment(uuid='51444b52-a725-4110-b0bf-76f64d3b6ca4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1471,
         depth=4,
         type='variable',
         name="order_by_map['-'",
         text="order_by_map['-' + name] = sql_expression + ' DESC'")

Fragment(uuid='6b18294b-b571-4731-af59-412f8c813aa9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1476,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_query(\n'
              '        table_list,\n'
              '        field_list,\n'
              '        where_condition_map,\n'
              '        having_condition_map,\n'
              '        group_by,\n'
              '        order_by_map,\n'
              '        runtime_where_condition,\n'
              '        runtime_having_condition,\n'
              '        runtime_conditions,\n'
              '        order_by,\n'
              '        limit,\n'
              '        offset):\n'
              '    """ Formats a SELECT SQL statement at runtime for the '
              'actual conditions\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    Partial caching is done b')

Fragment(uuid='d901e8bb-a363-44f9-9f7d-934d7bd12e81',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1477,
         depth=0,
         type='function',
         name='format_query',
         text='def format_query(\n'
              '        table_list,\n'
              '        field_list,\n'
              '        where_condition_map,\n'
              '        having_condition_map,\n'
              '        group_by,\n'
              '        order_by_map,\n'
              '        runtime_where_condition,\n'
              '        runtime_having_condition,\n'
              '        runtime_conditions,\n'
              '        order_by,\n'
              '        limit,\n'
              '        offset):\n'
              '    """ Formats a SELECT SQL statement at runtime for the '
              'actual conditions\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    Partial caching is done by')

Fragment(uuid='c3e4f980-e47a-4450-b79b-e5a62ac5e2bd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1494,
         depth=0,
         type='module',
         name='',
         text='y the format_select function, but the evaluation\n'
              '    of the dynamic conditions cannot be cached. The actual '
              'runtime conditions\n'
              '    are the keywords parameters passed to the query method on '
              'the database\n'
              '    abstraction layer.\n'
              '    \n'
              '    Passing a tuple in the order_by parameter defines the '
              'record ordering.\n'
              "    Values can be condition names. Use '-' prefix for "
              'descending sort.\n'
              "    You can also use a redundant '+' prefix for ascending "
              'short.\n'
              '    \n'
              '    """\n')

Fragment(uuid='ae6b4ae3-526e-4436-ba41-3ad6f941687c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1494,
         depth=0,
         type='function',
         name='format_query',
         text=' the format_select function, but the evaluation\n'
              '    of the dynamic conditions cannot be cached. The actual '
              'runtime conditions\n'
              '    are the keywords parameters passed to the query method on '
              'the database\n'
              '    abstraction layer.\n'
              '    \n'
              '    Passing a tuple in the order_by parameter defines the '
              'record ordering.\n'
              "    Values can be condition names. Use '-' prefix for "
              'descending sort.\n'
              "    You can also use a redundant '+' prefix for ascending "
              'short.\n'
              '    \n'
              '    """\n')

Fragment(uuid='15a83101-3cab-46c3-8ce7-7c5a5abd8d72',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1504,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(runtime_conditions, dict)\n'
              '        assert isinstance(where_condition_map, dict)\n'
              '        assert isinstance(having_condition_map, dict)\n'
              '        assert isinstance(group_by, (tuple, list))\n'
              '\n'
              '    # Parse keyword parameters (actual runtime conditions) '
              'passed\n'
              '    where = []\n'
              '    having = []\n'
              '    parameter_list = []\n')

Fragment(uuid='f7042bba-3f0d-47b0-9bdf-e13b24f083b2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1504,
         depth=0,
         type='function',
         name='format_query',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(runtime_conditions, dict)\n'
              '        assert isinstance(where_condition_map, dict)\n'
              '        assert isinstance(having_condition_map, dict)\n'
              '        assert isinstance(group_by, (tuple, list))\n'
              '\n'
              '    # Parse keyword parameters (actual runtime conditions) '
              'passed\n'
              '    where = []\n'
              '    having = []\n'
              '    parameter_list = []\n')

Fragment(uuid='24397dc9-4fe0-41e6-8801-d9dca85e13cc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1511,
         depth=2,
         type='variable',
         name='where',
         text='where = []')

Fragment(uuid='85b088d5-01b6-4ace-bf3e-c803160f6beb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1512,
         depth=2,
         type='variable',
         name='having',
         text='having = []')

Fragment(uuid='0c97aef2-f328-49bd-86e2-7ae32096cdb3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1513,
         depth=2,
         type='variable',
         name='parameter_list',
         text='parameter_list = []')

Fragment(uuid='57f9a0a9-b880-4999-b6ea-9c132e75514b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1514,
         depth=0,
         type='module',
         name='',
         text='    for name, value in runtime_conditions.items():\n')

Fragment(uuid='17f93ee4-906a-4566-aa3b-16a32102aaeb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1514,
         depth=0,
         type='function',
         name='format_query',
         text='    for name, value in runtime_conditions.items():\n')

Fragment(uuid='e79384c5-b848-490d-9634-e124a194184e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1515,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        if value is NA:\n'
              '            continue\n'
              '\n'
              '        # Find the condition by name\n'
              '        condition = where_condition_map.get(name)\n')

Fragment(uuid='aee8195d-c002-4a0c-b51d-1295f876c157',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1515,
         depth=0,
         type='function',
         name='format_query',
         text='\n'
              '        if value is NA:\n'
              '            continue\n'
              '\n'
              '        # Find the condition by name\n'
              '        condition = where_condition_map.get(name)\n')

Fragment(uuid='09ffd5b4-b4b8-43d6-8a79-198a6a51989a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1520,
         depth=4,
         type='variable',
         name='condition',
         text='condition = where_condition_map.get(name)')

Fragment(uuid='a263aed4-7966-400b-92e6-6db7db6fafb6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1521,
         depth=0,
         type='module',
         name='',
         text='        if condition:\n'
              '            clause = where\n'
              '        else:\n'
              '            condition = having_condition_map.get(name)\n')

Fragment(uuid='60badadc-af34-4a58-bbc7-a60738cff539',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1521,
         depth=0,
         type='function',
         name='format_query',
         text='        if condition:\n'
              '            clause = where\n'
              '        else:\n'
              '            condition = having_condition_map.get(name)\n')

Fragment(uuid='8a74d3c1-9e3c-495b-a0af-d7ec7f7824fa',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1522,
         depth=6,
         type='variable',
         name='clause',
         text='clause = where')

Fragment(uuid='d861dcb8-f13b-49d1-a4e5-fa90d8f89212',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1524,
         depth=7,
         type='variable',
         name='condition',
         text='condition = having_condition_map.get(name)')

Fragment(uuid='584b40a7-b3dc-47b9-9d09-7c1963109421',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1525,
         depth=0,
         type='module',
         name='',
         text='            if condition:\n'
              '                clause = having\n'
              '            else:\n'
              '                raise TypeError(\n'
              "                    'Query method received unknown condition: "
              "%s=%r' %\n"
              '                    (name, value))\n'
              '\n'
              '        # Format the condition\n'
              '        suffix, formatting_function, value_expression = '
              'condition\n'
              '        sql_expression, sql_parameters = '
              'formatting_function(value_expression, value)\n'
              '\n'
              '        # Append it to the clause\n'
              '        clause.append(sql_expression)\n'
              '        parameter_list.extend(sql_parameters)\n'
              '\n'
              '    # Where condition built up runtime\n')

Fragment(uuid='ebc21d11-90ff-4522-a381-651213af6b90',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1525,
         depth=0,
         type='function',
         name='format_query',
         text='            if condition:\n'
              '                clause = having\n'
              '            else:\n'
              '                raise TypeError(\n'
              "                    'Query method received unknown condition: "
              "%s=%r' %\n"
              '                    (name, value))\n'
              '\n'
              '        # Format the condition\n'
              '        suffix, formatting_function, value_expression = '
              'condition\n'
              '        sql_expression, sql_parameters = '
              'formatting_function(value_expression, value)\n'
              '\n'
              '        # Append it to the clause\n'
              '        clause.append(sql_expression)\n'
              '        parameter_list.extend(sql_parameters)\n'
              '\n'
              '    # Where condition built up runtime\n')

Fragment(uuid='bc77966d-9466-43d8-b2a0-8a9d8e2da08d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1526,
         depth=9,
         type='variable',
         name='clause',
         text='clause = having')

Fragment(uuid='9c111e9d-9cdc-44b0-a245-8ee8572a0136',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1533,
         depth=4,
         type='variable',
         name='suffix,',
         text='suffix, formatting_function, value_expression = condition')

Fragment(uuid='8cdf3e58-1bd3-4ca5-9573-c64b6d3054b1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1534,
         depth=4,
         type='variable',
         name='sql_expression,',
         text='sql_expression, sql_parameters = '
              'formatting_function(value_expression, value)')

Fragment(uuid='28bc4b3c-8b52-40b1-8e95-230ed8cdfc94',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1541,
         depth=0,
         type='module',
         name='',
         text='    if runtime_where_condition is not None:\n'
              '        sql_expression = '
              'format_expression(runtime_where_condition)\n'
              '        where.append(sql_expression)\n'
              '\n'
              '    # Having condition built up runtime\n')

Fragment(uuid='ae48791b-2738-4b19-8ffe-69c325bb36d4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1541,
         depth=0,
         type='function',
         name='format_query',
         text='    if runtime_where_condition is not None:\n'
              '        sql_expression = '
              'format_expression(runtime_where_condition)\n'
              '        where.append(sql_expression)\n'
              '\n'
              '    # Having condition built up runtime\n')

Fragment(uuid='90e63604-ccaf-49f3-9a7d-ee6bc9059260',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1542,
         depth=4,
         type='variable',
         name='sql_expression',
         text='sql_expression = format_expression(runtime_where_condition)')

Fragment(uuid='981cf730-6fd7-45ab-a6ca-8e57e3f66c40',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1546,
         depth=0,
         type='module',
         name='',
         text='    if runtime_having_condition is not None:\n'
              '        sql_expression = '
              'format_expression(runtime_having_condition)\n'
              '        having.append(sql_expression)\n'
              '\n'
              '    # Join the conditions together\n'
              "    where = ' AND '.join(where)\n"
              "    having = ' AND '.join(having)\n"
              '\n'
              '    # NOTE: The group_by expressions are formatted while the '
              'abstraction layer is generated.\n'
              '\n'
              '    # Format order by items\n'
              '    for')

Fragment(uuid='72d5da51-3250-4e8e-a488-69f220d4839f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1546,
         depth=0,
         type='function',
         name='format_query',
         text='    if runtime_having_condition is not None:\n'
              '        sql_expression = '
              'format_expression(runtime_having_condition)\n'
              '        having.append(sql_expression)\n'
              '\n'
              '    # Join the conditions together\n'
              "    where = ' AND '.join(where)\n"
              "    having = ' AND '.join(having)\n"
              '\n'
              '    # NOTE: The group_by expressions are formatted while the '
              'abstraction layer is generated.\n'
              '\n'
              '    # Format order by items\n'
              '    for')

Fragment(uuid='efa53713-2d8c-411a-907b-a4e40c522230',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1547,
         depth=4,
         type='variable',
         name='sql_expression',
         text='sql_expression = format_expression(runtime_having_condition)')

Fragment(uuid='da580a86-28e4-492a-935b-a6d423364b64',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1551,
         depth=2,
         type='variable',
         name='where',
         text="where = ' AND '.join(where)")

Fragment(uuid='653a6fed-8031-4934-8bfa-7bb09fbe7c72',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1552,
         depth=2,
         type='variable',
         name='having',
         text="having = ' AND '.join(having)")

Fragment(uuid='18b4d901-eef4-4e60-8708-538779398787',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1557,
         depth=0,
         type='module',
         name='',
         text='matted_order_by = format_order_by(order_by_map, order_by)\n'
              '\n'
              '    clauses = dblayer.backend.base.clauses.Clauses(\n'
              '        table_list=table_list,\n'
              '        field_list=field_list,\n'
              '        where=where,\n'
              '        group_by=group_by,\n'
              '        having=having,\n'
              '        order_by=formatted_order_by,\n'
              '        limit=limit,\n'
              '        offset=offset)\n'
              '\n'
              '    return (format_select(clauses), tuple(parameter_list))\n')

Fragment(uuid='0356019d-8e3f-4168-973d-25e95b716661',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1557,
         depth=0,
         type='function',
         name='format_query',
         text='matted_order_by = format_order_by(order_by_map, order_by)\n'
              '\n'
              '    clauses = dblayer.backend.base.clauses.Clauses(\n'
              '        table_list=table_list,\n'
              '        field_list=field_list,\n'
              '        where=where,\n'
              '        group_by=group_by,\n'
              '        having=having,\n'
              '        order_by=formatted_order_by,\n'
              '        limit=limit,\n'
              '        offset=offset)\n'
              '\n'
              '    return (format_select(clauses), tuple(parameter_list))')

Fragment(uuid='9f7617c9-54cb-4ab1-9c9f-91c582a23fe7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1557,
         depth=2,
         type='variable',
         name='formatted_order_by',
         text='formatted_order_by = format_order_by(order_by_map, order_by)')

Fragment(uuid='2b47f2c8-2fed-429a-af4f-5e6e3ce1e3bb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1559,
         depth=2,
         type='variable',
         name='clauses',
         text='clauses = dblayer.backend.base.clauses.Clauses(\n'
              '        table_list=table_list,\n'
              '        field_list=field_list,\n'
              '        where=where,\n'
              '        group_by=group_by,\n'
              '        having=having,\n'
              '        order_by=formatted_order_by,\n'
              '        limit=limit,\n'
              '        offset=offset)')

Fragment(uuid='97ac3f15-ca59-4d0c-bb69-c81f2ce9890c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1570,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_order_by(order_by_map, order_by):\n'
              '    """ Formats the items of an ORDER BY clause\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(order_by_map, dict)\n'
              '        assert isinstance(order_by, (tuple, list))\n'
              '\n'
              '    formatted_order_by = list(map(order_by_map.get, order_by))\n'
              '\n'
              '    if None in formatted_order_by:\n'
              '        raise ValueError(\n'
              "            'Unparsable column order: %r' %\n"
              '            order_by[formatted_order_by.index(None)])\n'
              '\n'
              '    return formatted_order_by\n')

Fragment(uuid='910e3296-26e5-44ef-9afb-e705efb541c9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1572,
         depth=0,
         type='function',
         name='format_order_by',
         text='def format_order_by(order_by_map, order_by):\n'
              '    """ Formats the items of an ORDER BY clause\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(order_by_map, dict)\n'
              '        assert isinstance(order_by, (tuple, list))\n'
              '\n'
              '    formatted_order_by = list(map(order_by_map.get, order_by))\n'
              '\n'
              '    if None in formatted_order_by:\n'
              '        raise ValueError(\n'
              "            'Unparsable column order: %r' %\n"
              '            order_by[formatted_order_by.index(None)])\n'
              '\n'
              '    return formatted_order_by')

Fragment(uuid='45c1899b-baac-4b12-8727-b8a7533fc8c8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1579,
         depth=2,
         type='variable',
         name='formatted_order_by',
         text='formatted_order_by = list(map(order_by_map.get, order_by))')

Fragment(uuid='96588a4b-02a9-41fa-bc45-2f3df4c253bf',
         path='/lib/dblayer/backend/base/record.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Base class for the generated record classes\n"""\n')

Fragment(uuid='863a76dc-3be9-4a5b-9bdf-31b1e19276a5',
         path='/lib/dblayer/backend/base/record.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/base/record.py\n'
              '  Classes: Record\n'
              '  Methods: __eq__ __repr__ finalize\n'
              '  Variables: __slots__ __str__ _column_default_map '
              '_column_name_list _nullable_column_name_set _table_name '
              'get_default_field_value\n'
              '  Usages: __class__ __module__ __name__ get getattr join name '
              'other rsplit self set\n')

Fragment(uuid='aa939501-8a20-4686-9f0e-43db536242ac',
         path='/lib/dblayer/backend/base/record.py',
         lineno=3,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Record:\n'
              '    """ Base class for the generated record classes\n'
              '    """\n'
              '\n'
              '    # Name of the corresponding database table storing the '
              'actual records\n'
              "    _table_name = ''\n"
              '\n'
              '    ### Runtime column information\n'
              '\n'
              '    # List of column names\n'
              '    _column_name_list = ()\n'
              '\n'
              '    # Set of names of nullable columns\n'
              '    _nullable_column_name_set = set()\n'
              '\n'
              "    # Map of column names to default field values (if there's "
              'one)\n'
              '    _column_default_map = {}\n'
              '\n'
              '    ### Optimization\n'
              '\n'
              '    # Subclasses will define record fields as slots\n'
              '    __slots__ = ()\n'
              '\n'
              '    ### Textual representation for logging and debugging\n')

Fragment(uuid='7d6cf1d9-accb-42d6-9aa1-6a6936d5821e',
         path='/lib/dblayer/backend/base/record.py',
         lineno=5,
         depth=0,
         type='class',
         name='Record',
         text='class Record:\n'
              '    """ Base class for the generated record classes\n'
              '    """\n'
              '\n'
              '    # Name of the corresponding database table storing the '
              'actual records\n'
              "    _table_name = ''\n"
              '\n'
              '    ### Runtime column information\n'
              '\n'
              '    # List of column names\n'
              '    _column_name_list = ()\n'
              '\n'
              '    # Set of names of nullable columns\n'
              '    _nullable_column_name_set = set()\n'
              '\n'
              "    # Map of column names to default field values (if there's "
              'one)\n'
              '    _column_default_map = {}\n'
              '\n'
              '    ### Optimization\n'
              '\n'
              '    # Subclasses will define record fields as slots\n'
              '    __slots__ = ()\n'
              '\n'
              '    ### Textual representation for logging and debugging\n')

Fragment(uuid='8e51f072-bb38-4f61-8d9f-1c45571e9e98',
         path='/lib/dblayer/backend/base/record.py',
         lineno=10,
         depth=2,
         type='variable',
         name='_table_name',
         text="_table_name = ''")

Fragment(uuid='208adfba-86cb-4dd2-8b06-666ae744781f',
         path='/lib/dblayer/backend/base/record.py',
         lineno=15,
         depth=2,
         type='variable',
         name='_column_name_list',
         text='_column_name_list = ()')

Fragment(uuid='7c463b72-3848-4d11-90ee-dcdd174931ed',
         path='/lib/dblayer/backend/base/record.py',
         lineno=18,
         depth=2,
         type='variable',
         name='_nullable_column_name_set',
         text='_nullable_column_name_set = set()')

Fragment(uuid='c271e869-59e2-4cd9-b55c-37d517a7bff8',
         path='/lib/dblayer/backend/base/record.py',
         lineno=21,
         depth=2,
         type='variable',
         name='_column_default_map',
         text='_column_default_map = {}')

Fragment(uuid='19272faf-1485-4dde-8e02-88c4b49cb558',
         path='/lib/dblayer/backend/base/record.py',
         lineno=26,
         depth=2,
         type='variable',
         name='__slots__',
         text='__slots__ = ()')

Fragment(uuid='5da5e124-3745-4e4f-9bd9-4b73d8a3e076',
         path='/lib/dblayer/backend/base/record.py',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              '        get_default_field_value = self._column_default_map.get\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, getattr(self, name))\n"
              '                for name in self._column_name_list\n'
              '                if getattr(self, name) is not '
              'get_default_field_value(name)))\n'
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='694a903c-9099-4347-a996-7484688a6099',
         path='/lib/dblayer/backend/base/record.py',
         lineno=29,
         depth=0,
         type='class',
         name='Record',
         text='\n'
              '    def __repr__(self):\n'
              '        get_default_field_value = self._column_default_map.get\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, getattr(self, name))\n"
              '                for name in self._column_name_list\n'
              '                if getattr(self, name) is not '
              'get_default_field_value(name)))\n'
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='87691ccb-bce0-40c9-a18d-e534eea4be71',
         path='/lib/dblayer/backend/base/record.py',
         lineno=30,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              '        get_default_field_value = self._column_default_map.get\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, getattr(self, name))\n"
              '                for name in self._column_name_list\n'
              '                if getattr(self, name) is not '
              'get_default_field_value(name)))')

Fragment(uuid='af05986f-fd6f-4b4d-becf-4ee074d4f374',
         path='/lib/dblayer/backend/base/record.py',
         lineno=31,
         depth=4,
         type='variable',
         name='get_default_field_value',
         text='get_default_field_value = self._column_default_map.get')

Fragment(uuid='7b89a6bb-8d25-48fe-a9f6-6c93b5d797f1',
         path='/lib/dblayer/backend/base/record.py',
         lineno=40,
         depth=2,
         type='variable',
         name='__str__',
         text='__str__ = __repr__')

Fragment(uuid='ced444c5-0a24-46d9-a016-7574ffffcae4',
         path='/lib/dblayer/backend/base/record.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __eq__(self, other):\n'
              '        if other.__class__ is not self.__class__:\n'
              '            return False\n'
              '        for name in self._column_name_list:\n'
              '            if getattr(self, name) != getattr(other, name):\n'
              '                return False\n'
              '        return True\n')

Fragment(uuid='9c7e1f95-4a35-4043-9476-7362591f20b3',
         path='/lib/dblayer/backend/base/record.py',
         lineno=41,
         depth=0,
         type='class',
         name='Record',
         text='\n'
              '    def __eq__(self, other):\n'
              '        if other.__class__ is not self.__class__:\n'
              '            return False\n'
              '        for name in self._column_name_list:\n'
              '            if getattr(self, name) != getattr(other, name):\n'
              '                return False\n'
              '        return True\n')

Fragment(uuid='8a283877-7a8a-4d69-8514-09665e5b054f',
         path='/lib/dblayer/backend/base/record.py',
         lineno=42,
         depth=2,
         type='function',
         name='__eq__',
         text='def __eq__(self, other):\n'
              '        if other.__class__ is not self.__class__:\n'
              '            return False\n'
              '        for name in self._column_name_list:\n'
              '            if getattr(self, name) != getattr(other, name):\n'
              '                return False\n'
              '        return True')

Fragment(uuid='0d8c983b-caef-44d2-b775-bcfa40acb7eb',
         path='/lib/dblayer/backend/base/record.py',
         lineno=49,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def finalize(self):\n'
              '        """ Finalizes the record\n'
              '        \n'
              '        Override in your subclass to provide calculated field '
              'values\n'
              '        right before storing or updating the record into the '
              'database.\n'
              '        Finalization should not raise exceptions normally.\n'
              '        \n'
              '        This method should only access this single record,\n'
              '        it must not execute queries for its operation.\n'
              '        \n'
              '        """\n')

Fragment(uuid='1ec1bfac-2211-4e7f-9d5b-cd63dafe17e9',
         path='/lib/dblayer/backend/base/record.py',
         lineno=49,
         depth=0,
         type='class',
         name='Record',
         text='\n'
              '    def finalize(self):\n'
              '        """ Finalizes the record\n'
              '        \n'
              '        Override in your subclass to provide calculated field '
              'values\n'
              '        right before storing or updating the record into the '
              'database.\n'
              '        Finalization should not raise exceptions normally.\n'
              '        \n'
              '        This method should only access this single record,\n'
              '        it must not execute queries for its operation.\n'
              '        \n'
              '        """')

Fragment(uuid='31ee578d-eba0-4d7a-890e-67c1854d9ea4',
         path='/lib/dblayer/backend/base/record.py',
         lineno=50,
         depth=2,
         type='function',
         name='finalize',
         text='def finalize(self):\n'
              '        """ Finalizes the record\n'
              '        \n'
              '        Override in your subclass to provide calculated field '
              'values\n'
              '        right before storing or updating the record into the '
              'database.\n'
              '        Finalization should not raise exceptions normally.\n'
              '        \n'
              '        This method should only access this single record,\n'
              '        it must not execute queries for its operation.\n'
              '        \n'
              '        """')

Fragment(uuid='abfb41c1-13f9-4fae-9d5c-53fc4833f186',
         path='/lib/dblayer/backend/postgresql/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" PostgreSQL database backend\n"""\n')

Fragment(uuid='5c954663-a9a6-4b82-abf2-8b9f9d7d894e',
         path='/lib/dblayer/backend/postgresql/clauses.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# noinspection PyUnresolvedReferences\n'
              'from dblayer.backend.base.clauses import Clauses\n')

Fragment(uuid='5d3a1c68-90f6-41f7-b30b-c4029007ef2d',
         path='/lib/dblayer/backend/postgresql/clauses.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/clauses.py\n'
              '  Usages: Clauses backend base clauses dblayer\n')

Fragment(uuid='870bb144-9e7d-46aa-8ffd-5b210f0826a2',
         path='/lib/dblayer/backend/postgresql/clauses.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.backend.base.clauses import Clauses')

Fragment(uuid='08c19bcc-5784-4722-9acd-f366e5b4c77a',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import psycopg2\n'
              'import psycopg2.extensions\n'
              '\n'
              'from dblayer.backend.base import database\n'
              '\n'
              '### Force returning of unicode string from the database\n'
              'psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)\n'
              'psycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)\n'
              '\n'
              '\n'
              'class DatabaseAbstraction(database.DatabaseAbstraction):\n'
              '\n'
              "    def _connect(self, dsn, client_encoding='UTF8'):\n"
              '        self.connection = psycopg2.connect(dsn)\n'
              '        self.connection.set_client_encoding(client_encoding)\n')

Fragment(uuid='184af332-65fa-4d03-be38-875f51fb1787',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import psycopg2')

Fragment(uuid='f01f6f37-205a-40d3-ba88-5b5a48d41757',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/database.py\n'
              '  Classes: DatabaseAbstraction\n'
              '  Methods: _connect\n'
              '  Variables: self.connection\n'
              '  Usages: UNICODE UNICODEARRAY backend base client_encoding '
              'connect connection database dblayer dsn extensions psycopg2 '
              'register_type self set_client_encoding\n')

Fragment(uuid='023cf81a-b7cb-46b1-b342-6eeb77c2c0ce',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import psycopg2.extensions')

Fragment(uuid='3add270d-322b-4606-8cda-62f5d3fc8042',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.backend.base import database')

Fragment(uuid='b7281b62-4b08-4d17-96b7-e00542368202',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=11,
         depth=0,
         type='class',
         name='DatabaseAbstraction',
         text='class DatabaseAbstraction(database.DatabaseAbstraction):\n'
              '\n'
              "    def _connect(self, dsn, client_encoding='UTF8'):\n"
              '        self.connection = psycopg2.connect(dsn)\n'
              '        self.connection.set_client_encoding(client_encoding)')

Fragment(uuid='109a38fb-14b2-430f-8278-f0d163021a92',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=13,
         depth=2,
         type='function',
         name='_connect',
         text="def _connect(self, dsn, client_encoding='UTF8'):\n"
              '        self.connection = psycopg2.connect(dsn)\n'
              '        self.connection.set_client_encoding(client_encoding)')

Fragment(uuid='62dc2d30-0133-4b00-8a77-da8894514c92',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=14,
         depth=4,
         type='variable',
         name='self.connection',
         text='self.connection = psycopg2.connect(dsn)')

Fragment(uuid='7e54d1a5-9949-4838-96e4-1884fa94df31',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import psycopg2\n'
              '\n'
              'Warning = psycopg2.Warning\n'
              'Error = psycopg2.Error\n'
              'InterfaceError = psycopg2.InterfaceError\n'
              'DatabaseError = psycopg2.DatabaseError\n'
              'DataError = psycopg2.DataError\n'
              'OperationalError = psycopg2.OperationalError\n'
              'IntegrityError = psycopg2.IntegrityError\n'
              'InternalError = psycopg2.IntegrityError\n'
              'ProgrammingError = psycopg2.ProgrammingError\n'
              'NotSupportedError = psycopg2.NotSupportedError\n')

Fragment(uuid='62299b8f-83ec-44f1-909a-24dce46f98e7',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import psycopg2')

Fragment(uuid='17dbaebf-9d64-419b-b9dd-f4214b97712e',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/error.py\n'
              '  Variables: DataError DatabaseError Error IntegrityError '
              'InterfaceError InternalError NotSupportedError OperationalError '
              'ProgrammingError Warning\n'
              '  Usages: psycopg2\n')

Fragment(uuid='1754d881-9ae2-49f1-bd85-a0f236dea385',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=3,
         depth=0,
         type='variable',
         name='Warning',
         text='Warning = psycopg2.Warning')

Fragment(uuid='4330f0cc-c7bf-4a4e-abaa-aac294095595',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=4,
         depth=0,
         type='variable',
         name='Error',
         text='Error = psycopg2.Error')

Fragment(uuid='dd81b98f-ba7f-4eca-8b86-dda669ffaa15',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=5,
         depth=0,
         type='variable',
         name='InterfaceError',
         text='InterfaceError = psycopg2.InterfaceError')

Fragment(uuid='16977077-c19e-45c7-bce9-bf9ff956f123',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=6,
         depth=0,
         type='variable',
         name='DatabaseError',
         text='DatabaseError = psycopg2.DatabaseError')

Fragment(uuid='4a70c689-b117-4f0e-93ac-6640cec4e272',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=7,
         depth=0,
         type='variable',
         name='DataError',
         text='DataError = psycopg2.DataError')

Fragment(uuid='b6b9fdf0-1359-4c04-8c30-38c2ecaa5c5f',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=8,
         depth=0,
         type='variable',
         name='OperationalError',
         text='OperationalError = psycopg2.OperationalError')

Fragment(uuid='bc5173d6-8869-4bdd-9dc0-ad2d610b24b0',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=9,
         depth=0,
         type='variable',
         name='IntegrityError',
         text='IntegrityError = psycopg2.IntegrityError')

Fragment(uuid='6eee8d57-247e-4c7e-aab5-164f24752331',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=10,
         depth=0,
         type='variable',
         name='InternalError',
         text='InternalError = psycopg2.IntegrityError')

Fragment(uuid='5acba9b0-5feb-4bb5-8b91-5c473cdb5537',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=11,
         depth=0,
         type='variable',
         name='ProgrammingError',
         text='ProgrammingError = psycopg2.ProgrammingError')

Fragment(uuid='341f4c7d-5a11-4fe1-bb40-c9d82243cfea',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=12,
         depth=0,
         type='variable',
         name='NotSupportedError',
         text='NotSupportedError = psycopg2.NotSupportedError')

Fragment(uuid='20cb96ad-2a2e-499a-bb7b-6f84bf822eac',
         path='/lib/dblayer/backend/postgresql/format.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='from dblayer.backend.base.format import *\n')

Fragment(uuid='f2c22205-84e2-487d-b935-cba531cf5b3f',
         path='/lib/dblayer/backend/postgresql/format.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.backend.base.format import *')

Fragment(uuid='00bbb95c-47f8-46a6-bfa9-aa6558ccb50c',
         path='/lib/dblayer/backend/postgresql/format.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/format.py\n'
              '  Usages: backend base dblayer format\n')

Fragment(uuid='03580aa8-0e88-444a-b621-d0228ac9302a',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Database inspector for PostgreSQL\n'
              '"""\n'
              '\n'
              'from dblayer import util\n'
              '\n'
              'from dblayer.backend.postgresql import database as '
              'postgresql_database\n'
              'from dblayer.model import database, table, column, function\n')

Fragment(uuid='1dd1ce47-a8b1-4495-ba14-4a5bb2589ec8',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/inspector.py\n'
              '  Classes: ColumnInfo DatabaseInspector\n'
              '  Methods: __init__ __repr__ convert_table_name_to_python '
              'define_bigint_column define_boolean_column define_custom_column '
              'define_date_column define_double_column define_integer_column '
              'define_numeric_column define_primary_key_column '
              'define_real_column define_text_column define_timestamp_column '
              'define_tsvector_column define_varchar_column inspect '
              'inspect_tables load_information_schema\n'
              '  Variables: __slots__ __str__ class_dict '
              'class_dict[table_class._table_name] class_name '
              'column_definition column_factory column_info database_class '
              'default get_column_factory name_value_list '
              'self.COLUMN_FACTORY_MAP self.character_maximum_length '
              'self.column_default self.column_name self.data_type '
              'self.is_nullable self.numeric_precision '
              'self.numeric_precision_radix self.numeric_scale '
              'self.primary_key_column_name_set self.primary_key_columns '
              'self.table_name serial sql table_class table_class._table_name '
              'table_class_list table_class_map '
              'table_class_map[column_info.table_name] table_pk_columns\n'
              '  Usages: BaseColumn Boolean COLUMN_FACTORY_MAP Custom Database '
              'DatabaseAbstraction Date Datetime Decimal Float Integer '
              'NotImplementedError PrimaryKey SearchDocument Table Text '
              'ValueError __class__ __name__ _table_name backend capitalize '
              'character_maximum_length column column_default column_name '
              'cursor data_type database database_class_name dblayer digits '
              'double dsn execute_and_fetch_dict_iter function get getattr '
              'implicit is_nullable isinstance issubclass join log lower '
              'maxlength model name null numeric_precision '
              'numeric_precision_radix numeric_scale postgresql '
              'postgresql_database precision primary_key_column_name_set '
              'primary_key_columns row scale self session setattr split '
              'sql_type str table table_name type util value values word\n')

Fragment(uuid='1ebe49ac-8ee8-4bff-b390-7ac843c8a6a5',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import util')

Fragment(uuid='c16539f0-4ffe-439b-9ec3-b3ea4c4635f7',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.backend.postgresql import database as '
              'postgresql_database')

Fragment(uuid='048bbccd-5fda-40db-912e-c93311b9fc7f',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=7,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.model import database, table, column, function')

Fragment(uuid='86246441-7e6f-445f-be55-78202f28df0c',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=8,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class ColumnInfo:\n'
              '    __slots__ = (\n'
              "        'table_name',\n"
              "        'column_name',\n"
              "        'data_type',\n"
              "        'column_default',\n"
              "        'is_nullable',\n"
              "        'character_maximum_length',\n"
              "        'numeric_precision',\n"
              "        'numeric_precision_radix',\n"
              "        'numeric_scale',\n"
              '    )\n')

Fragment(uuid='4f1761c2-0afb-4d61-958d-4e0ee3490664',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=10,
         depth=0,
         type='class',
         name='ColumnInfo',
         text='class ColumnInfo:\n'
              '    __slots__ = (\n'
              "        'table_name',\n"
              "        'column_name',\n"
              "        'data_type',\n"
              "        'column_default',\n"
              "        'is_nullable',\n"
              "        'character_maximum_length',\n"
              "        'numeric_precision',\n"
              "        'numeric_precision_radix',\n"
              "        'numeric_scale',\n"
              '    )\n')

Fragment(uuid='cb88aaa5-2493-41f6-9d09-36b26ec9c855',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=11,
         depth=2,
         type='variable',
         name='__slots__',
         text='__slots__ = (\n'
              "        'table_name',\n"
              "        'column_name',\n"
              "        'data_type',\n"
              "        'column_default',\n"
              "        'is_nullable',\n"
              "        'character_maximum_length',\n"
              "        'numeric_precision',\n"
              "        'numeric_precision_radix',\n"
              "        'numeric_scale',\n"
              '    )')

Fragment(uuid='e7f296e5-95e9-47db-b5b5-8c2d0adb357c',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, table_name=None, column_name=None, '
              'data_type=None, column_default=None,\n'
              '                 is_nullable=None, '
              'character_maximum_length=None, numeric_precision=None,\n'
              '                 numeric_scale=None, '
              'numeric_precision_radix=None):\n'
              '        self.table_name = table_name\n'
              '        self.column_name = column_name\n'
              '        self.data_type = data_type\n'
              '        self.column_default = column_default\n'
              '        self.is_nullable = is_nullable\n'
              '        self.character_maximum_length = '
              'character_maximum_length\n'
              '        self.numeric_precision = numeric_precision\n'
              '        self.numeric_scale = numeric_scale\n'
              '        self.numeric_precision_radix = numeric_precision_radix\n')

Fragment(uuid='45b96915-1559-42d8-80f6-7b0961b016cb',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=22,
         depth=0,
         type='class',
         name='ColumnInfo',
         text='\n'
              '    def __init__(self, table_name=None, column_name=None, '
              'data_type=None, column_default=None,\n'
              '                 is_nullable=None, '
              'character_maximum_length=None, numeric_precision=None,\n'
              '                 numeric_scale=None, '
              'numeric_precision_radix=None):\n'
              '        self.table_name = table_name\n'
              '        self.column_name = column_name\n'
              '        self.data_type = data_type\n'
              '        self.column_default = column_default\n'
              '        self.is_nullable = is_nullable\n'
              '        self.character_maximum_length = '
              'character_maximum_length\n'
              '        self.numeric_precision = numeric_precision\n'
              '        self.numeric_scale = numeric_scale\n'
              '        self.numeric_precision_radix = numeric_precision_radix\n')

Fragment(uuid='f2fd91f8-b51c-44b4-9dca-fe1b657a6731',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=23,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, table_name=None, column_name=None, '
              'data_type=None, column_default=None,\n'
              '                 is_nullable=None, '
              'character_maximum_length=None, numeric_precision=None,\n'
              '                 numeric_scale=None, '
              'numeric_precision_radix=None):\n'
              '        self.table_name = table_name\n'
              '        self.column_name = column_name\n'
              '        self.data_type = data_type\n'
              '        self.column_default = column_default\n'
              '        self.is_nullable = is_nullable\n'
              '        self.character_maximum_length = '
              'character_maximum_length\n'
              '        self.numeric_precision = numeric_precision\n'
              '        self.numeric_scale = numeric_scale\n'
              '        self.numeric_precision_radix = numeric_precision_radix')

Fragment(uuid='cb0c1906-390d-40c7-ab46-3aea6788a621',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=26,
         depth=4,
         type='variable',
         name='self.table_name',
         text='self.table_name = table_name')

Fragment(uuid='92a3c369-5c75-4250-b988-9e15a0d40f92',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=27,
         depth=4,
         type='variable',
         name='self.column_name',
         text='self.column_name = column_name')

Fragment(uuid='7d24cf07-125b-48d6-9211-e36fcbeef5ec',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=28,
         depth=4,
         type='variable',
         name='self.data_type',
         text='self.data_type = data_type')

Fragment(uuid='0cdb3f58-6736-4df3-9eaa-902673b5d4df',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=29,
         depth=4,
         type='variable',
         name='self.column_default',
         text='self.column_default = column_default')

Fragment(uuid='c2d94308-da7d-4407-b92b-278b109116e5',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=30,
         depth=4,
         type='variable',
         name='self.is_nullable',
         text='self.is_nullable = is_nullable')

Fragment(uuid='0934da9d-5a99-4f8a-aa52-e3da08c2f19b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=31,
         depth=4,
         type='variable',
         name='self.character_maximum_length',
         text='self.character_maximum_length = character_maximum_length')

Fragment(uuid='a659fbcc-9db5-4ca8-85a8-697b9ad6bfb9',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=32,
         depth=4,
         type='variable',
         name='self.numeric_precision',
         text='self.numeric_precision = numeric_precision')

Fragment(uuid='334488a4-8dd0-486a-832e-d335b723ace2',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=33,
         depth=4,
         type='variable',
         name='self.numeric_scale',
         text='self.numeric_scale = numeric_scale')

Fragment(uuid='7e467267-81e9-48db-9696-9ff6e10fc1e6',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=34,
         depth=4,
         type='variable',
         name='self.numeric_precision_radix',
         text='self.numeric_precision_radix = numeric_precision_radix')

Fragment(uuid='f4d2e0fa-db3e-4be0-9d86-6be9111928b1',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def load_information_schema(self, row):\n'
              '        """ Loads column information from a row selected from '
              'information_schema.columns table\n'
              '        """\n'
              '        for name in self.__slots__:\n'
              '            setattr(self, name, row[name])\n')

Fragment(uuid='5eb67116-c516-49cd-9aaa-c593353d9c7d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=35,
         depth=0,
         type='class',
         name='ColumnInfo',
         text='\n'
              '    def load_information_schema(self, row):\n'
              '        """ Loads column information from a row selected from '
              'information_schema.columns table\n'
              '        """\n'
              '        for name in self.__slots__:\n'
              '            setattr(self, name, row[name])\n')

Fragment(uuid='dfbd8910-7ea8-4b5b-93e9-fc98ab3e9f0a',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=36,
         depth=2,
         type='function',
         name='load_information_schema',
         text='def load_information_schema(self, row):\n'
              '        """ Loads column information from a row selected from '
              'information_schema.columns table\n'
              '        """\n'
              '        for name in self.__slots__:\n'
              '            setattr(self, name, row[name])')

Fragment(uuid='2f994477-7e56-40e0-aca0-f34ccc2d5862',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              '        name_value_list = [(name, getattr(self, name)) for name '
              'in self.__slots__]\n'
              "        return '%s(%s)' % (\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in name_value_list\n'
              '                if value is not None))\n'
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='5b6567df-9816-4435-8fe1-1d4278443af2',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=41,
         depth=0,
         type='class',
         name='ColumnInfo',
         text='\n'
              '    def __repr__(self):\n'
              '        name_value_list = [(name, getattr(self, name)) for name '
              'in self.__slots__]\n'
              "        return '%s(%s)' % (\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in name_value_list\n'
              '                if value is not None))\n'
              '\n'
              '    __str__ = __repr__')

Fragment(uuid='ccc86570-0d8b-4740-97c5-1293ef4910de',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=42,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              '        name_value_list = [(name, getattr(self, name)) for name '
              'in self.__slots__]\n'
              "        return '%s(%s)' % (\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in name_value_list\n'
              '                if value is not None))')

Fragment(uuid='06933d67-5ad4-410a-beef-374d22a7db1d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=43,
         depth=4,
         type='variable',
         name='name_value_list',
         text='name_value_list = [(name, getattr(self, name)) for name in '
              'self.__slots__]')

Fragment(uuid='0b4d1b21-76ae-4be6-8f71-2770cebeaa72',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=51,
         depth=2,
         type='variable',
         name='__str__',
         text='__str__ = __repr__')

Fragment(uuid='28d94ff7-fc8a-499b-a0a3-6b661200080c',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=52,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class '
              'DatabaseInspector(postgresql_database.DatabaseAbstraction):\n')

Fragment(uuid='b0ecc1a3-0295-4a8c-aeb6-a88903df7f5a',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=54,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='class '
              'DatabaseInspector(postgresql_database.DatabaseAbstraction):\n')

Fragment(uuid='d653a818-f5a1-4017-989c-a24e0340f240',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=55,
         depth=0,
         type='module',
         name='',
         text='\n'
              "    def __init__(self, primary_key_column_name_set=('id',), "
              'primary_key_columns={}):\n'
              '        """ Database inspector\n'
              '        \n'
              '        Inspects an existing PostgreSQL database and builds up '
              'the database model classes runtime.\n'
              '        \n'
              '        primary_key_column_name_set: set of primary key column '
              "names, defaults to ('id', )\n"
              '        \n'
              '        primary_key_columns: primary key names by table: '
              '{table_name: primary_key_column_name_set}\n'
              '        \n'
              '        """\n'
              '        postgresql_database.DatabaseAbstraction.__init__(self)\n'
              '\n'
              '        self.primary_key_column_name_set = '
              'primary_key_column_name_set\n'
              '        self.primary_key_columns = primary_key_c')

Fragment(uuid='a05bf6c7-3a27-4924-9608-6a448a77bebb',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=55,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              "    def __init__(self, primary_key_column_name_set=('id',), "
              'primary_key_columns={}):\n'
              '        """ Database inspector\n'
              '        \n'
              '        Inspects an existing PostgreSQL database and builds up '
              'the database model classes runtime.\n'
              '        \n'
              '        primary_key_column_name_set: set of primary key column '
              "names, defaults to ('id', )\n"
              '        \n'
              '        primary_key_columns: primary key names by table: '
              '{table_name: primary_key_column_name_set}\n'
              '        \n'
              '        """\n'
              '        postgresql_database.DatabaseAbstraction.__init__(self)\n'
              '\n'
              '        self.primary_key_column_name_set = '
              'primary_key_column_name_set\n'
              '        self.primary_key_columns = primary_key_c')

Fragment(uuid='98efe8cf-aad5-419f-9ce3-5428074dcbfc',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=56,
         depth=2,
         type='function',
         name='__init__',
         text="def __init__(self, primary_key_column_name_set=('id',), "
              'primary_key_columns={}):\n'
              '        """ Database inspector\n'
              '        \n'
              '        Inspects an existing PostgreSQL database and builds up '
              'the database model classes runtime.\n'
              '        \n'
              '        primary_key_column_name_set: set of primary key column '
              "names, defaults to ('id', )\n"
              '        \n'
              '        primary_key_columns: primary key names by table: '
              '{table_name: primary_key_column_name_set}\n'
              '        \n'
              '        """\n'
              '        postgresql_database.DatabaseAbstraction.__init__(self)\n'
              '\n'
              '        self.primary_key_column_name_set = '
              'primary_key_column_name_set\n'
              '        self.primary_key_columns = primary_key_col')

Fragment(uuid='c544607a-ab00-47b8-9940-73c1183d832e',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=68,
         depth=4,
         type='variable',
         name='self.primary_key_column_name_set',
         text='self.primary_key_column_name_set = primary_key_column_name_set')

Fragment(uuid='6026b514-c713-4de7-8729-bfd496ad8b96',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='olumns\n'
              '\n'
              '        self.COLUMN_FACTORY_MAP = {\n'
              "            'bigint': self.define_bigint_column,\n"
              "            'boolean': self.define_boolean_column,\n"
              "            'character varying': self.define_varchar_column,\n"
              "            'date': self.define_date_column,\n"
              "            'integer': self.define_integer_column,\n"
              "            'real': self.define_real_column,\n"
              "            'double precision': self.define_double_column,\n"
              "            'numeric': self.define_numeric_column,\n"
              "            'text': self.define_text_column,\n"
              "            'timestamp without time zone': "
              'self.define_timestamp_column,\n'
              "            'tsvector': self.define_tsvector_column,\n"
              '        }\n')

Fragment(uuid='85603038-86c3-481e-b41e-de628263a931',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=69,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='olumns\n'
              '\n'
              '        self.COLUMN_FACTORY_MAP = {\n'
              "            'bigint': self.define_bigint_column,\n"
              "            'boolean': self.define_boolean_column,\n"
              "            'character varying': self.define_varchar_column,\n"
              "            'date': self.define_date_column,\n"
              "            'integer': self.define_integer_column,\n"
              "            'real': self.define_real_column,\n"
              "            'double precision': self.define_double_column,\n"
              "            'numeric': self.define_numeric_column,\n"
              "            'text': self.define_text_column,\n"
              "            'timestamp without time zone': "
              'self.define_timestamp_column,\n'
              "            'tsvector': self.define_tsvector_column,\n"
              '        }\n')

Fragment(uuid='3fc73db0-38b6-4ffd-b966-4b64002b792b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=69,
         depth=2,
         type='function',
         name='__init__',
         text='umns\n'
              '\n'
              '        self.COLUMN_FACTORY_MAP = {\n'
              "            'bigint': self.define_bigint_column,\n"
              "            'boolean': self.define_boolean_column,\n"
              "            'character varying': self.define_varchar_column,\n"
              "            'date': self.define_date_column,\n"
              "            'integer': self.define_integer_column,\n"
              "            'real': self.define_real_column,\n"
              "            'double precision': self.define_double_column,\n"
              "            'numeric': self.define_numeric_column,\n"
              "            'text': self.define_text_column,\n"
              "            'timestamp without time zone': "
              'self.define_timestamp_column,\n'
              "            'tsvector': self.define_tsvector_column,\n"
              '        }')

Fragment(uuid='731fbb4c-94dc-4928-acd2-be1289922c35',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=69,
         depth=4,
         type='variable',
         name='self.primary_key_columns',
         text='self.primary_key_columns = primary_key_columns')

Fragment(uuid='7f7c6b25-85d2-443f-83ae-97e90f74cfa7',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=71,
         depth=4,
         type='variable',
         name='self.COLUMN_FACTORY_MAP',
         text='self.COLUMN_FACTORY_MAP = {\n'
              "            'bigint': self.define_bigint_column,\n"
              "            'boolean': self.define_boolean_column,\n"
              "            'character varying': self.define_varchar_column,\n"
              "            'date': self.define_date_column,\n"
              "            'integer': self.define_integer_column,\n"
              "            'real': self.define_real_column,\n"
              "            'double precision': self.define_double_column,\n"
              "            'numeric': self.define_numeric_column,\n"
              "            'text': self.define_text_column,\n"
              "            'timestamp without time zone': "
              'self.define_timestamp_column,\n'
              "            'tsvector': self.define_tsvector_column,\n"
              '        }')

Fragment(uuid='e115d8b0-310a-4195-8cc7-bfbdbf88c2ec',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=84,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def inspect(self, dsn, database_class_name):\n'
              '        """ Inspects a database and returns database model '
              'class\n'
              '        \n'
              '        You can use the pretty_format_class() class method on '
              'the database model class returned\n'
              '        to generate source code for the model.\n'
              '        \n'
              '        """\n'
              '        with self.session(dsn):\n'
              '            table_class_list = self.inspect_tables()\n'
              '\n'
              '        class_dict = {}\n'
              '        for table_class in table_class_list:\n'
              '            assert issubclass(table_class, table.Table)\n'
              '            class_dict[table_class._table_name] = '
              'table_class()\n'
              '\n'
              '        database_class = type(database_class_name, '
              '(database.Database,), class_dict)\n'
              '        assert issubclass(database_class, database.Database)\n'
              '\n'
              '        return database_class\n')

Fragment(uuid='00a0f7f7-6b20-4446-b17a-59590e148eed',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=84,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def inspect(self, dsn, database_class_name):\n'
              '        """ Inspects a database and returns database model '
              'class\n'
              '        \n'
              '        You can use the pretty_format_class() class method on '
              'the database model class returned\n'
              '        to generate source code for the model.\n'
              '        \n'
              '        """\n'
              '        with self.session(dsn):\n'
              '            table_class_list = self.inspect_tables()\n'
              '\n'
              '        class_dict = {}\n'
              '        for table_class in table_class_list:\n'
              '            assert issubclass(table_class, table.Table)\n'
              '            class_dict[table_class._table_name] = '
              'table_class()\n'
              '\n'
              '        database_class = type(database_class_name, '
              '(database.Database,), class_dict)\n'
              '        assert issubclass(database_class, database.Database)\n'
              '\n'
              '        return database_class\n')

Fragment(uuid='ba62746f-2708-4998-a8be-39ae9ff42c0b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=85,
         depth=2,
         type='function',
         name='inspect',
         text='def inspect(self, dsn, database_class_name):\n'
              '        """ Inspects a database and returns database model '
              'class\n'
              '        \n'
              '        You can use the pretty_format_class() class method on '
              'the database model class returned\n'
              '        to generate source code for the model.\n'
              '        \n'
              '        """\n'
              '        with self.session(dsn):\n'
              '            table_class_list = self.inspect_tables()\n'
              '\n'
              '        class_dict = {}\n'
              '        for table_class in table_class_list:\n'
              '            assert issubclass(table_class, table.Table)\n'
              '            class_dict[table_class._table_name] = '
              'table_class()\n'
              '\n'
              '        database_class = type(database_class_name, '
              '(database.Database,), class_dict)\n'
              '        assert issubclass(database_class, database.Database)\n'
              '\n'
              '        return database_class')

Fragment(uuid='5c989cce-7f0b-4199-bc95-37e4b73afb3d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=93,
         depth=6,
         type='variable',
         name='table_class_list',
         text='table_class_list = self.inspect_tables()')

Fragment(uuid='9e8dae8a-e8e6-4cec-bb58-8aa1f78d050b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=95,
         depth=4,
         type='variable',
         name='class_dict',
         text='class_dict = {}')

Fragment(uuid='21746045-2c87-4fc0-8df3-ed7200b40d92',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=98,
         depth=6,
         type='variable',
         name='class_dict[table_class._table_name]',
         text='class_dict[table_class._table_name] = table_class()')

Fragment(uuid='ac9ac010-44aa-4499-a236-44619f1fc6de',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=100,
         depth=4,
         type='variable',
         name='database_class',
         text='database_class = type(database_class_name, '
              '(database.Database,), class_dict)')

Fragment(uuid='0b9fa58c-6087-4f1a-89df-e84235c2c413',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=104,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def inspect_tables(self):\n'
              '        """ Inspects database tables and returns list of table '
              'definition classes\n'
              '        """\n'
              '        raise NotImplementedError()\n')

Fragment(uuid='bb08fadf-7d0f-4bb2-82bf-363ea2ea774d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=104,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def inspect_tables(self):\n'
              '        """ Inspects database tables and returns list of table '
              'definition classes\n'
              '        """\n'
              '        raise NotImplementedError()\n')

Fragment(uuid='9345dbf3-76a0-47e6-a31a-d443483663cb',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=105,
         depth=2,
         type='function',
         name='inspect_tables',
         text='def inspect_tables(self):\n'
              '        """ Inspects database tables and returns list of table '
              'definition classes\n'
              '        """\n'
              '        raise NotImplementedError()')

Fragment(uuid='f2cf6ad4-e4b6-4ff6-9966-bcbcd366ce64',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=109,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def convert_table_name_to_python(self, table_name):\n'
              '        """ Converts underscore table name used in the database '
              'to CapitalizedWords format\n'
              '        """\n'
              "        return ''.join(word.capitalize() for word in "
              "table_name.split('_'))\n")

Fragment(uuid='62aec839-a5b1-43ba-8011-119fdf9f8106',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=109,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def convert_table_name_to_python(self, table_name):\n'
              '        """ Converts underscore table name used in the database '
              'to CapitalizedWords format\n'
              '        """\n'
              "        return ''.join(word.capitalize() for word in "
              "table_name.split('_'))\n")

Fragment(uuid='0ea173f2-2733-4313-b247-7f4b0feb3557',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=110,
         depth=2,
         type='function',
         name='convert_table_name_to_python',
         text='def convert_table_name_to_python(self, table_name):\n'
              '        """ Converts underscore table name used in the database '
              'to CapitalizedWords format\n'
              '        """\n'
              "        return ''.join(word.capitalize() for word in "
              "table_name.split('_'))")

Fragment(uuid='c2c24114-6b92-4e28-b396-a3c0f90bf4ff',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=114,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def inspect_tables(self):\n'
              '\n'
              "        sql = '''\n"
              'SELECT * \n'
              'FROM information_schema.columns \n'
              "WHERE table_schema = 'public'\n"
              'ORDER BY table_name, ordinal_position;\n'
              "'''\n"
              '\n'
              '        get_column_factory = self.COLUMN_FACTORY_MAP.get\n'
              '\n'
              '        table_class_map = {}\n')

Fragment(uuid='ebe3b789-8f8c-468a-95c0-92be852dd523',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=114,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def inspect_tables(self):\n'
              '\n'
              "        sql = '''\n"
              'SELECT * \n'
              'FROM information_schema.columns \n'
              "WHERE table_schema = 'public'\n"
              'ORDER BY table_name, ordinal_position;\n'
              "'''\n"
              '\n'
              '        get_column_factory = self.COLUMN_FACTORY_MAP.get\n'
              '\n'
              '        table_class_map = {}\n')

Fragment(uuid='7b0bdbc6-b172-4ed0-9db6-2c27ad97dabd',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=115,
         depth=2,
         type='function',
         name='inspect_tables',
         text='def inspect_tables(self):\n'
              '\n'
              "        sql = '''\n"
              'SELECT * \n'
              'FROM information_schema.columns \n'
              "WHERE table_schema = 'public'\n"
              'ORDER BY table_name, ordinal_position;\n'
              "'''\n"
              '\n'
              '        get_column_factory = self.COLUMN_FACTORY_MAP.get\n'
              '\n'
              '        table_class_map = {}\n')

Fragment(uuid='f172b25f-8f47-4c31-80bd-14fc0d23f494',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=117,
         depth=4,
         type='variable',
         name='sql',
         text="sql = '''\n"
              'SELECT * \n'
              'FROM information_schema.columns \n'
              "WHERE table_schema = 'public'\n"
              'ORDER BY table_name, ordinal_position;\n'
              "'''")

Fragment(uuid='08126140-811d-4d34-959d-cf2b96db7a7b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=124,
         depth=4,
         type='variable',
         name='get_column_factory',
         text='get_column_factory = self.COLUMN_FACTORY_MAP.get')

Fragment(uuid='a097edf9-e4da-44d5-81d2-09ade22dcaa6',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=126,
         depth=4,
         type='variable',
         name='table_class_map',
         text='table_class_map = {}')

Fragment(uuid='494f94ae-b088-440e-978d-11482489a7ce',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=127,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor() as cursor:\n')

Fragment(uuid='fbabc084-0cf9-4fd0-b175-e2de978e56cf',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=127,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='        with self.cursor() as cursor:\n')

Fragment(uuid='69bc5946-5099-4494-9b66-11cc2f847dce',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=127,
         depth=2,
         type='function',
         name='inspect_tables',
         text='        with self.cursor() as cursor:\n')

Fragment(uuid='9480995a-4a66-4710-830a-b92f30b4d034',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=128,
         depth=0,
         type='module',
         name='',
         text='            for row in self.execute_and_fetch_dict_iter(cursor, '
              'sql):\n'
              '\n'
              '                column_info = ColumnInfo()\n'
              '                column_info.load_information_schema(row)\n'
              '\n'
              '                table_class = '
              'table_class_map.get(column_info.table_name)\n')

Fragment(uuid='1a0ed79c-cbe8-4fa7-8f8a-c0c45ddcb58b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=128,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='            for row in self.execute_and_fetch_dict_iter(cursor, '
              'sql):\n'
              '\n'
              '                column_info = ColumnInfo()\n'
              '                column_info.load_information_schema(row)\n'
              '\n'
              '                table_class = '
              'table_class_map.get(column_info.table_name)\n')

Fragment(uuid='d9291982-53d5-44d2-b958-4b4cd05c02dd',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=128,
         depth=2,
         type='function',
         name='inspect_tables',
         text='            for row in self.execute_and_fetch_dict_iter(cursor, '
              'sql):\n'
              '\n'
              '                column_info = ColumnInfo()\n'
              '                column_info.load_information_schema(row)\n'
              '\n'
              '                table_class = '
              'table_class_map.get(column_info.table_name)\n')

Fragment(uuid='6f592c29-6b07-4d8b-ab3a-a0299ef980e0',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=130,
         depth=8,
         type='variable',
         name='column_info',
         text='column_info = ColumnInfo()')

Fragment(uuid='9fd4b793-f5f2-4d3c-aed7-9ca9604eba00',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=133,
         depth=8,
         type='variable',
         name='table_class',
         text='table_class = table_class_map.get(column_info.table_name)')

Fragment(uuid='da108cb5-e0d4-41a6-913f-3f4cd669a3f7',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=134,
         depth=0,
         type='module',
         name='',
         text='                if table_class is None:\n'
              '                    class_name = '
              'str(self.convert_table_name_to_python(column_info.table_name))\n'
              '                    table_class = type(class_name, '
              '(table.Table,), {})\n'
              '                    table_class._table_name = '
              'column_info.table_name\n'
              '                    table_class_map[column_info.table_name] = '
              'table_class\n'
              '\n'
              '                table_pk_columns = '
              'self.primary_key_columns.get(column_info.column_name, ())\n')

Fragment(uuid='54543ef2-962e-46af-b940-935ee2dc4806',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=134,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='                if table_class is None:\n'
              '                    class_name = '
              'str(self.convert_table_name_to_python(column_info.table_name))\n'
              '                    table_class = type(class_name, '
              '(table.Table,), {})\n'
              '                    table_class._table_name = '
              'column_info.table_name\n'
              '                    table_class_map[column_info.table_name] = '
              'table_class\n'
              '\n'
              '                table_pk_columns = '
              'self.primary_key_columns.get(column_info.column_name, ())\n')

Fragment(uuid='cb0b71f1-64a9-4c6c-96ab-3be079b86332',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=134,
         depth=2,
         type='function',
         name='inspect_tables',
         text='                if table_class is None:\n'
              '                    class_name = '
              'str(self.convert_table_name_to_python(column_info.table_name))\n'
              '                    table_class = type(class_name, '
              '(table.Table,), {})\n'
              '                    table_class._table_name = '
              'column_info.table_name\n'
              '                    table_class_map[column_info.table_name] = '
              'table_class\n'
              '\n'
              '                table_pk_columns = '
              'self.primary_key_columns.get(column_info.column_name, ())\n')

Fragment(uuid='b4f52854-85c3-47d3-961b-d60bdc5e4096',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=135,
         depth=10,
         type='variable',
         name='class_name',
         text='class_name = '
              'str(self.convert_table_name_to_python(column_info.table_name))')

Fragment(uuid='5584d003-eaa7-42af-b3b9-9f74a3ac4d06',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=136,
         depth=10,
         type='variable',
         name='table_class',
         text='table_class = type(class_name, (table.Table,), {})')

Fragment(uuid='da67dd3e-f8ca-429d-afcd-cbacebffe147',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=137,
         depth=10,
         type='variable',
         name='table_class._table_name',
         text='table_class._table_name = column_info.table_name')

Fragment(uuid='505b9c72-d456-4d4d-96e4-5bfc3d43dcdb',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=138,
         depth=10,
         type='variable',
         name='table_class_map[column_info.table_name]',
         text='table_class_map[column_info.table_name] = table_class')

Fragment(uuid='aa3ca6b6-0a1e-4a2b-a58b-d743934b2295',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=140,
         depth=8,
         type='variable',
         name='table_pk_columns',
         text='table_pk_columns = '
              'self.primary_key_columns.get(column_info.column_name, ())')

Fragment(uuid='df2f515a-28c5-41c0-a1c1-e46ce406bab9',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=141,
         depth=0,
         type='module',
         name='',
         text='                if (column_info.column_name in '
              'self.primary_key_column_name_set or\n'
              '                        column_info.column_name in '
              'table_pk_columns):\n'
              '                    column_factory = '
              'self.define_primary_key_column\n'
              '                else:\n'
              '                    column_factory = get_column_factory(\n'
              '                        column_info.data_type, '
              'self.define_custom_column)\n'
              '\n'
              '                try:\n'
              '                    column_definition = '
              'column_factory(column_info)\n'
              '                except ValueError:\n'
              '                    util.log(\n'
              "                        'WARNING: Skipping column due to "
              "unparsable column info: %r' % column_info)\n"
              '                    continue\n'
              '                assert isinstance(column_definition, '
              'column.BaseColumn)\n'
              '\n'
              '                setattr(table_class, column_info.column_name, '
              'column_definition)\n'
              '\n'
              '        return table_class_map.values()\n')

Fragment(uuid='95b11eee-c079-40a3-87d1-57d6d4be937d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=141,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='                if (column_info.column_name in '
              'self.primary_key_column_name_set or\n'
              '                        column_info.column_name in '
              'table_pk_columns):\n'
              '                    column_factory = '
              'self.define_primary_key_column\n'
              '                else:\n'
              '                    column_factory = get_column_factory(\n'
              '                        column_info.data_type, '
              'self.define_custom_column)\n'
              '\n'
              '                try:\n'
              '                    column_definition = '
              'column_factory(column_info)\n'
              '                except ValueError:\n'
              '                    util.log(\n'
              "                        'WARNING: Skipping column due to "
              "unparsable column info: %r' % column_info)\n"
              '                    continue\n'
              '                assert isinstance(column_definition, '
              'column.BaseColumn)\n'
              '\n'
              '                setattr(table_class, column_info.column_name, '
              'column_definition)\n'
              '\n'
              '        return table_class_map.values()\n')

Fragment(uuid='21a3a0bd-047b-4dfd-9acf-0a2a10f7f672',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=141,
         depth=2,
         type='function',
         name='inspect_tables',
         text='                if (column_info.column_name in '
              'self.primary_key_column_name_set or\n'
              '                        column_info.column_name in '
              'table_pk_columns):\n'
              '                    column_factory = '
              'self.define_primary_key_column\n'
              '                else:\n'
              '                    column_factory = get_column_factory(\n'
              '                        column_info.data_type, '
              'self.define_custom_column)\n'
              '\n'
              '                try:\n'
              '                    column_definition = '
              'column_factory(column_info)\n'
              '                except ValueError:\n'
              '                    util.log(\n'
              "                        'WARNING: Skipping column due to "
              "unparsable column info: %r' % column_info)\n"
              '                    continue\n'
              '                assert isinstance(column_definition, '
              'column.BaseColumn)\n'
              '\n'
              '                setattr(table_class, column_info.column_name, '
              'column_definition)\n'
              '\n'
              '        return table_class_map.values()')

Fragment(uuid='66ada34b-9202-4e34-8a2d-65e8936069cd',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=143,
         depth=10,
         type='variable',
         name='column_factory',
         text='column_factory = self.define_primary_key_column')

Fragment(uuid='498427e2-27ca-48fb-9f6e-1ff8e72495f2',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=145,
         depth=11,
         type='variable',
         name='column_factory',
         text='column_factory = get_column_factory(\n'
              '                        column_info.data_type, '
              'self.define_custom_column)')

Fragment(uuid='3dc4499e-2ea2-4b9b-b32d-905ca429e79f',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=149,
         depth=10,
         type='variable',
         name='column_definition',
         text='column_definition = column_factory(column_info)')

Fragment(uuid='45c14a5b-94dd-460e-979e-61d8428579f7',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=159,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_custom_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Custom(\n'
              '            sql_type=column_info.data_type,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='7a3a2a49-4600-4b87-b03a-625fc97ba385',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=159,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_custom_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Custom(\n'
              '            sql_type=column_info.data_type,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='d67d147d-569d-4bf6-8fe6-053e2edd4c55',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=160,
         depth=2,
         type='function',
         name='define_custom_column',
         text='def define_custom_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Custom(\n'
              '            sql_type=column_info.data_type,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='3e5f7c73-ea82-4ca7-9ef3-6fdbc393049c',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=162,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.Custom(\n'
              '            sql_type=column_info.data_type,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)')

Fragment(uuid='775ea251-bb84-49f7-a8de-be5491c8e3f3',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=167,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_primary_key_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              "        serial = 'nextval' in (column_info.column_default or "
              "'').lower()\n"
              '        column_definition = column.PrimaryKey(serial=serial)\n'
              '        return column_definition\n')

Fragment(uuid='136cb8af-2e7d-42aa-ba3e-c708729ce688',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=167,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_primary_key_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              "        serial = 'nextval' in (column_info.column_default or "
              "'').lower()\n"
              '        column_definition = column.PrimaryKey(serial=serial)\n'
              '        return column_definition\n')

Fragment(uuid='4f8a3c4b-1ae3-4963-882b-28196478629f',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=168,
         depth=2,
         type='function',
         name='define_primary_key_column',
         text='def define_primary_key_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              "        serial = 'nextval' in (column_info.column_default or "
              "'').lower()\n"
              '        column_definition = column.PrimaryKey(serial=serial)\n'
              '        return column_definition')

Fragment(uuid='3192852a-3f3a-4ca2-8aea-cef1ed57be50',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=170,
         depth=4,
         type='variable',
         name='serial',
         text="serial = 'nextval' in (column_info.column_default or '').lower()")

Fragment(uuid='7c2d25c5-20bd-47c4-b637-829713399f47',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=171,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.PrimaryKey(serial=serial)')

Fragment(uuid='34b5c896-532b-47b0-b207-47a33d6d1cdf',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=173,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_bigint_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Integer(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='07c28b71-cf4f-49e5-8a48-da626b578fd1',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=173,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_bigint_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Integer(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='a38f41e4-b79f-44c3-a125-b827454ef9a6',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=174,
         depth=2,
         type='function',
         name='define_bigint_column',
         text='def define_bigint_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Integer(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='4175b7cc-a02f-44d6-ba03-e37c45ae1196',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=176,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.Integer(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)')

Fragment(uuid='f34d0ebd-7191-4586-bf5c-804de693937f',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=180,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_boolean_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Boolean(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='3a7e8fb5-fc2e-4a3c-b0b5-6848af0aa421',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=180,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_boolean_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Boolean(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='bd09b323-b04b-4322-9679-6f9c52a79f9f',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=181,
         depth=2,
         type='function',
         name='define_boolean_column',
         text='def define_boolean_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Boolean(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='e252089b-6989-44d3-be48-7e8de3b43890',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=183,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.Boolean(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)')

Fragment(uuid='3f2d54e9-acac-4885-bdd1-b3e778544e15',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=187,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_varchar_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='e1327849-f612-4850-ac20-17b55cae884c',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=187,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_varchar_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='5f13e26c-0672-48b6-ae7d-23b90e12ba57',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=188,
         depth=2,
         type='function',
         name='define_varchar_column',
         text='def define_varchar_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='b597fac3-f844-4985-81ca-9d158aa31a22',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=190,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            null=column_info.is_nullable)')

Fragment(uuid='2a824442-a5ba-4cdf-a87c-e8ed028c7c6d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=194,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_date_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Date(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='7fa0b73f-3e74-4524-a5c5-f9a0842c8805',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=194,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_date_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Date(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='5c2fbe59-2132-42a5-9c94-7d4aa1611122',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=195,
         depth=2,
         type='function',
         name='define_date_column',
         text='def define_date_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Date(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='a583da60-ab3c-41c7-bdd0-6408494390d7',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=197,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.Date(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)')

Fragment(uuid='22765aba-fe6b-4de8-8026-9757d13b9e37',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=201,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_integer_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if isinstance(column_info.column_default, str):\n'
              '            default = '
              'function.Custom(column_info.column_default)\n'
              '        else:\n'
              '            default = column_info.column_default\n'
              '        column_definition = column.Integer(\n'
              '            default=default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='49060d5b-00f3-410b-918e-1b3daf44162e',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=201,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_integer_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if isinstance(column_info.column_default, str):\n'
              '            default = '
              'function.Custom(column_info.column_default)\n'
              '        else:\n'
              '            default = column_info.column_default\n'
              '        column_definition = column.Integer(\n'
              '            default=default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='eefe2996-2370-4ef7-bc53-febe3fb0edb3',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=202,
         depth=2,
         type='function',
         name='define_integer_column',
         text='def define_integer_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if isinstance(column_info.column_default, str):\n'
              '            default = '
              'function.Custom(column_info.column_default)\n'
              '        else:\n'
              '            default = column_info.column_default\n'
              '        column_definition = column.Integer(\n'
              '            default=default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='611478c8-0b6a-4495-ba43-5688be8799ca',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=205,
         depth=6,
         type='variable',
         name='default',
         text='default = function.Custom(column_info.column_default)')

Fragment(uuid='2f184d81-8df5-4bbd-b5fe-ba0aa74791a6',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=207,
         depth=7,
         type='variable',
         name='default',
         text='default = column_info.column_default')

Fragment(uuid='590df430-f058-492f-96ba-7842232fa102',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=208,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.Integer(\n'
              '            default=default,\n'
              '            null=column_info.is_nullable)')

Fragment(uuid='60311569-dba7-4753-9927-ad706f5d1d71',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=212,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_real_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=False,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='2f175eb1-a5ba-417c-9c33-f79cf9a23781',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=212,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_real_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=False,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='908ca324-6cdf-4277-b84a-175ed59f8bb1',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=213,
         depth=2,
         type='function',
         name='define_real_column',
         text='def define_real_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=False,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='389bd63a-b3fe-4441-957a-f6ae1a2858ce',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=215,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.Float(\n'
              '            double=False,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)')

Fragment(uuid='52f384b9-4291-462f-8dba-c035e699ebb5',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=220,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_double_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=True,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='3cba37d7-dbb6-4a5a-860e-f4c3655b0f72',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=220,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_double_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=True,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='58d483fd-4752-43b9-845e-d2bff192592e',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=221,
         depth=2,
         type='function',
         name='define_double_column',
         text='def define_double_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=True,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='bff39c46-2f4d-4974-8336-9616d4e6c833',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=223,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.Float(\n'
              '            double=True,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)')

Fragment(uuid='1b2d9dfa-4698-4dc1-9be8-b821cd27a2ee',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=228,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_numeric_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if column_info.numeric_precision_radix != 10:\n'
              '            raise NotImplementedError()\n'
              '        if not column_info.numeric_scale:\n'
              '            column_definition = column.Integer(\n'
              '                digits=column_info.numeric_precision,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        else:\n'
              '            assert column_info.numeric_precision is not None\n'
              '            column_definition = column.Decimal(\n'
              '                precision=column_info.numeric_precision,\n'
              '                scale=column_info.numeric_scale,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='173c622a-05c2-467f-b8e8-b5b6da75385d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=228,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_numeric_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if column_info.numeric_precision_radix != 10:\n'
              '            raise NotImplementedError()\n'
              '        if not column_info.numeric_scale:\n'
              '            column_definition = column.Integer(\n'
              '                digits=column_info.numeric_precision,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        else:\n'
              '            assert column_info.numeric_precision is not None\n'
              '            column_definition = column.Decimal(\n'
              '                precision=column_info.numeric_precision,\n'
              '                scale=column_info.numeric_scale,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='27feb79c-f966-44ca-85bc-df9c9efcf447',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=229,
         depth=2,
         type='function',
         name='define_numeric_column',
         text='def define_numeric_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if column_info.numeric_precision_radix != 10:\n'
              '            raise NotImplementedError()\n'
              '        if not column_info.numeric_scale:\n'
              '            column_definition = column.Integer(\n'
              '                digits=column_info.numeric_precision,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        else:\n'
              '            assert column_info.numeric_precision is not None\n'
              '            column_definition = column.Decimal(\n'
              '                precision=column_info.numeric_precision,\n'
              '                scale=column_info.numeric_scale,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='e941b42d-29e5-445b-839d-6f822f7653f1',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=234,
         depth=6,
         type='variable',
         name='column_definition',
         text='column_definition = column.Integer(\n'
              '                digits=column_info.numeric_precision,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)')

Fragment(uuid='daf75d9c-127f-4adc-a976-2598e6297523',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=240,
         depth=7,
         type='variable',
         name='column_definition',
         text='column_definition = column.Decimal(\n'
              '                precision=column_info.numeric_precision,\n'
              '                scale=column_info.numeric_scale,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)')

Fragment(uuid='b4c78310-cbdf-4ff2-aaca-299d4d922f70',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=246,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_text_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='e262fd76-e4a0-4686-8ff9-548c5d16b765',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=246,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_text_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='6e968a0d-fd4c-475c-be03-9ba18f80edd6',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=247,
         depth=2,
         type='function',
         name='define_text_column',
         text='def define_text_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='da23c271-128a-4e8c-8c64-0bde2e684736',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=249,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)')

Fragment(uuid='79625c2e-e6cf-4115-9fc3-a345c0f9c454',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=254,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_timestamp_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Datetime(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='f721ba58-103e-4379-9b15-695b53b18985',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=254,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_timestamp_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Datetime(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='3070a84b-b641-4e7e-b15d-72b59796e66c',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=255,
         depth=2,
         type='function',
         name='define_timestamp_column',
         text='def define_timestamp_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Datetime(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='c6a65aee-2913-458c-8f01-42a7e8ad047a',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=257,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.Datetime(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)')

Fragment(uuid='e545ce99-229d-410b-8e1e-255dabd039bc',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=261,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_tsvector_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = '
              'column.SearchDocument(implicit=False)\n'
              '        return column_definition\n')

Fragment(uuid='fb9af1e1-2409-48ac-b79f-c8337bcf1297',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=261,
         depth=0,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_tsvector_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = '
              'column.SearchDocument(implicit=False)\n'
              '        return column_definition')

Fragment(uuid='114404c1-f890-4788-927c-41c6c42f991b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=262,
         depth=2,
         type='function',
         name='define_tsvector_column',
         text='def define_tsvector_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = '
              'column.SearchDocument(implicit=False)\n'
              '        return column_definition')

Fragment(uuid='0645be0d-1761-43b4-8609-0525c0cabc3e',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=264,
         depth=4,
         type='variable',
         name='column_definition',
         text='column_definition = column.SearchDocument(implicit=False)')

Fragment(uuid='43bc750d-09ea-4ac7-b311-b1b685c593ec',
         path='/lib/dblayer/backend/postgresql/record.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# noinspection PyUnresolvedReferences\n'
              'from dblayer.backend.base.record import Record\n')

Fragment(uuid='26abb042-09ac-4e8f-9ff5-66c13719558d',
         path='/lib/dblayer/backend/postgresql/record.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/record.py\n'
              '  Usages: Record backend base dblayer record\n')

Fragment(uuid='e0b227e6-51a8-4d95-b66e-d64f127d89fd',
         path='/lib/dblayer/backend/postgresql/record.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.backend.base.record import Record')

Fragment(uuid='a7ecb46a-29c0-4ac9-b261-fa30aec6ca81',
         path='/lib/dblayer/constants.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Constants\n'
              '"""\n'
              '\n'
              'import os\n'
              '\n'
              '# Enables various sanity checks useful for development\n'
              "DEBUG = int(os.environ.get('DBLAYER_DEBUG', 0))\n"
              '\n'
              '# Encoding used to convert strings to unicode whenever needed\n'
              "ENCODING = 'utf8'\n"
              '\n'
              '# Full pathname of the code generator template directory\n'
              'GENERATOR_TEMPLATE_DIRECTORY_PATH = os.path.join(\n'
              "    os.path.dirname(__file__), 'generator', 'template')\n"
              '\n'
              '# Range of database ID values (actual values are chosen '
              'randomly)\n'
              'DATABASE_ID_RANGE = (2 ** 62, 2 ** 63)\n'
              '\n'
              '# Number of rows should be loaded from the database at once\n'
              'CURSOR_ARRAYSIZE = 12')

Fragment(uuid='f3d3c23a-c0c8-4841-9842-297cfa108f1b',
         path='/lib/dblayer/constants.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/constants.py\n'
              '  Classes: NA\n'
              '  Methods: __repr__\n'
              '  Variables: CURSOR_ARRAYSIZE DATABASE_ID_RANGE DEBUG ENCODING '
              'GENERATOR_TEMPLATE_DIRECTORY_PATH INNER_JOIN JOIN_TYPES '
              'LEFT_JOIN LOG_SQL_ANALYSIS LOG_SQL_RESULT_ROWS '
              'LOG_SQL_STATEMENTS MAX_INSERT_RETRY_COUNT NA PROFILE_QUERIES '
              '__str__\n'
              '  Usages: __file__ dirname environ get int join path self\n')

Fragment(uuid='a98519d0-8a7d-4e74-90a9-514533904a29',
         path='/lib/dblayer/constants.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='7767110e-29bf-4da8-9485-1190b75b04b0',
         path='/lib/dblayer/constants.py',
         lineno=7,
         depth=0,
         type='variable',
         name='DEBUG',
         text="DEBUG = int(os.environ.get('DBLAYER_DEBUG', 0))")

Fragment(uuid='2dc127f8-3aff-4fe8-991f-49ff4d41071e',
         path='/lib/dblayer/constants.py',
         lineno=10,
         depth=0,
         type='variable',
         name='ENCODING',
         text="ENCODING = 'utf8'")

Fragment(uuid='a724b500-193a-4567-998c-3a94493bea13',
         path='/lib/dblayer/constants.py',
         lineno=13,
         depth=0,
         type='variable',
         name='GENERATOR_TEMPLATE_DIRECTORY_PATH',
         text='GENERATOR_TEMPLATE_DIRECTORY_PATH = os.path.join(\n'
              "    os.path.dirname(__file__), 'generator', 'template')")

Fragment(uuid='bc180943-e508-45b9-8bcf-7e2172fa0b95',
         path='/lib/dblayer/constants.py',
         lineno=17,
         depth=0,
         type='variable',
         name='DATABASE_ID_RANGE',
         text='DATABASE_ID_RANGE = (2 ** 62, 2 ** 63)')

Fragment(uuid='80c0fa6a-0659-4921-8582-7fc1656e50e0',
         path='/lib/dblayer/constants.py',
         lineno=20,
         depth=0,
         type='module',
         name='',
         text='8\n'
              '\n'
              '# Logging\n'
              'LOG_SQL_STATEMENTS = DEBUG and True\n'
              'LOG_SQL_RESULT_ROWS = DEBUG and False\n'
              '\n'
              '# Log analysis of SQL statements before executing them\n'
              'LOG_SQL_ANALYSIS = DEBUG and True\n'
              '\n'
              '# Measure the wall clock execution time of queries\n'
              'PROFILE_QUERIES = DEBUG and True\n'
              '\n'
              '# Maximum number of retries on a failing single row INSERT '
              'query\n'
              'MAX_INSERT_RETRY_COUNT = 100\n'
              '\n'
              '# Join types\n'
              "INNER_JOIN = 'INNER JOIN'\n"
              "LEFT_JOIN = 'LEFT JOIN'\n"
              'JOIN_TYPES = (INNER_JOIN, LEFT_JOIN)\n'
              '\n'
              '\n'
              '# Undefined singleton, used to detect missing parameters\n'
              '# while allowing None as a valid value\n'
              'class NA:\n')

Fragment(uuid='01633aba-4d17-474a-945b-e38234ae298d',
         path='/lib/dblayer/constants.py',
         lineno=20,
         depth=0,
         type='variable',
         name='CURSOR_ARRAYSIZE',
         text='CURSOR_ARRAYSIZE = 128')

Fragment(uuid='7220f2f4-8099-4bde-80c1-f12ebd2211b9',
         path='/lib/dblayer/constants.py',
         lineno=23,
         depth=0,
         type='variable',
         name='LOG_SQL_STATEMENTS',
         text='LOG_SQL_STATEMENTS = DEBUG and True')

Fragment(uuid='37772f8f-291d-4e29-8b77-cf4342370b3f',
         path='/lib/dblayer/constants.py',
         lineno=24,
         depth=0,
         type='variable',
         name='LOG_SQL_RESULT_ROWS',
         text='LOG_SQL_RESULT_ROWS = DEBUG and False')

Fragment(uuid='a605ab1e-de30-4604-be61-9166042d9c1b',
         path='/lib/dblayer/constants.py',
         lineno=27,
         depth=0,
         type='variable',
         name='LOG_SQL_ANALYSIS',
         text='LOG_SQL_ANALYSIS = DEBUG and True')

Fragment(uuid='67e05e2a-206d-4b2e-8581-f06340f329d9',
         path='/lib/dblayer/constants.py',
         lineno=30,
         depth=0,
         type='variable',
         name='PROFILE_QUERIES',
         text='PROFILE_QUERIES = DEBUG and True')

Fragment(uuid='782fbc94-9605-42da-a175-0050577258c0',
         path='/lib/dblayer/constants.py',
         lineno=33,
         depth=0,
         type='variable',
         name='MAX_INSERT_RETRY_COUNT',
         text='MAX_INSERT_RETRY_COUNT = 100')

Fragment(uuid='6f2bc6cf-d682-4bef-b2b2-81158199b198',
         path='/lib/dblayer/constants.py',
         lineno=36,
         depth=0,
         type='variable',
         name='INNER_JOIN',
         text="INNER_JOIN = 'INNER JOIN'")

Fragment(uuid='180a1d17-e5b4-4db6-88be-4fcc79691f3b',
         path='/lib/dblayer/constants.py',
         lineno=37,
         depth=0,
         type='variable',
         name='LEFT_JOIN',
         text="LEFT_JOIN = 'LEFT JOIN'")

Fragment(uuid='3c336554-755c-4f68-91ba-77fb5757289b',
         path='/lib/dblayer/constants.py',
         lineno=38,
         depth=0,
         type='variable',
         name='JOIN_TYPES',
         text='JOIN_TYPES = (INNER_JOIN, LEFT_JOIN)')

Fragment(uuid='82148a5f-9b3e-411d-985d-d9af64af4aa7',
         path='/lib/dblayer/constants.py',
         lineno=43,
         depth=0,
         type='class',
         name='NA',
         text='class NA:\n'
              '    def __repr__(self):\n'
              "        return 'NA'\n"
              '\n'
              '    __str__ = __repr__')

Fragment(uuid='ffbadf00-ddde-4bb7-84bb-f739e46e50e1',
         path='/lib/dblayer/constants.py',
         lineno=44,
         depth=0,
         type='module',
         name='',
         text='    def __repr__(self):\n'
              "        return 'NA'\n"
              '\n'
              '    __str__ = __repr__\n'
              '\n'
              '\n'
              'NA = NA()\n')

Fragment(uuid='8950369b-e619-4d63-9c27-6838d9f1f2bb',
         path='/lib/dblayer/constants.py',
         lineno=44,
         depth=2,
         type='function',
         name='__repr__',
         text="def __repr__(self):\n        return 'NA'")

Fragment(uuid='8750a2bf-ecc0-411b-aa05-c1827fbd9b04',
         path='/lib/dblayer/constants.py',
         lineno=47,
         depth=2,
         type='variable',
         name='__str__',
         text='__str__ = __repr__')

Fragment(uuid='ead27253-a2dd-4ac0-8683-d21829d81836',
         path='/lib/dblayer/constants.py',
         lineno=50,
         depth=0,
         type='variable',
         name='NA',
         text='NA = NA()')

Fragment(uuid='e5061784-2d17-4969-84ea-c27d75b90317',
         path='/lib/dblayer/generator/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Database abstraction layer generator\n"""\n')

Fragment(uuid='d5848cf8-437b-4ce2-9edf-a2af6ce6d083',
         path='/lib/dblayer/generator/generator.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Database abstraction layer code generator\n'
              '"""\n'
              '\n'
              'import datetime\n'
              '\n'
              'import bottle\n'
              'from dblayer import constants\n')

Fragment(uuid='09734929-bf71-4c92-bcda-65fa080c98ae',
         path='/lib/dblayer/generator/generator.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/generator/generator.py\n'
              '  Functions: generate\n'
              '  Classes: GeneratorOptions\n'
              '  Variables: create delete drop format insert options update\n'
              '  Usages: GENERATOR_TEMPLATE_DIRECTORY_PATH __import__ __name__ '
              'abstraction_class_name backend bottle constants database '
              'datetime dblayer dict fromlist isinstance join noescape now '
              'template template_lookup template_settings\n')

Fragment(uuid='77889564-9ae1-432c-96a7-64bcf50e8bad',
         path='/lib/dblayer/generator/generator.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import datetime')

Fragment(uuid='b33e8c36-560a-4fc7-8dec-bde7f0cfc50d',
         path='/lib/dblayer/generator/generator.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='import bottle')

Fragment(uuid='1ffb0da5-e537-410e-b1f6-5a2f86b3af2c',
         path='/lib/dblayer/generator/generator.py',
         lineno=7,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import constants')

Fragment(uuid='222de06e-7dd7-4a44-baee-42c92756acd4',
         path='/lib/dblayer/generator/generator.py',
         lineno=8,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class GeneratorOptions:\n'
              '    """ Code generation options\n'
              '    """\n'
              '    # Generate code for the following operations only\n'
              '    insert = True\n'
              '    update = True\n'
              '    delete = True\n'
              '    create = True\n'
              '    drop = True\n')

Fragment(uuid='d2129981-9eec-464d-b7f0-6999fc331a6e',
         path='/lib/dblayer/generator/generator.py',
         lineno=10,
         depth=0,
         type='class',
         name='GeneratorOptions',
         text='class GeneratorOptions:\n'
              '    """ Code generation options\n'
              '    """\n'
              '    # Generate code for the following operations only\n'
              '    insert = True\n'
              '    update = True\n'
              '    delete = True\n'
              '    create = True\n'
              '    drop = True')

Fragment(uuid='f368fffc-c92a-4aab-b8b9-962f30470b72',
         path='/lib/dblayer/generator/generator.py',
         lineno=14,
         depth=2,
         type='variable',
         name='insert',
         text='insert = True')

Fragment(uuid='2d30f040-e35f-43a3-a60b-5231b6f5d406',
         path='/lib/dblayer/generator/generator.py',
         lineno=15,
         depth=2,
         type='variable',
         name='update',
         text='update = True')

Fragment(uuid='bc716bab-6517-474e-8c57-c806421d2008',
         path='/lib/dblayer/generator/generator.py',
         lineno=16,
         depth=2,
         type='variable',
         name='delete',
         text='delete = True')

Fragment(uuid='280ad8b9-6f5d-4870-9578-ae93d732c549',
         path='/lib/dblayer/generator/generator.py',
         lineno=17,
         depth=2,
         type='variable',
         name='create',
         text='create = True')

Fragment(uuid='99fe1d3e-6ed9-421f-bb05-aaf4e0ed58cf',
         path='/lib/dblayer/generator/generator.py',
         lineno=18,
         depth=2,
         type='variable',
         name='drop',
         text='drop = True')

Fragment(uuid='aa4fe7cb-92e5-4f43-8884-36b41866f4d5',
         path='/lib/dblayer/generator/generator.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def generate(database, backend, abstraction_class_name, '
              'options=None):\n'
              '    """ Generates database abstraction layer code for the given '
              'database\n'
              '    model using the given database server specific backend '
              'module\n'
              '    """\n')

Fragment(uuid='cf669275-9f03-4f56-8f81-697f4d069e6c',
         path='/lib/dblayer/generator/generator.py',
         lineno=21,
         depth=0,
         type='function',
         name='generate',
         text='def generate(database, backend, abstraction_class_name, '
              'options=None):\n'
              '    """ Generates database abstraction layer code for the given '
              'database\n'
              '    model using the given database server specific backend '
              'module\n'
              '    """\n')

Fragment(uuid='a4011ff0-118a-4d9e-ae43-b3c2ab5ba0d2',
         path='/lib/dblayer/generator/generator.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text='    if options is None:\n'
              '        options = GeneratorOptions()\n'
              '    else:\n'
              '        assert isinstance(options, GeneratorOptions)\n'
              '\n'
              '    format = __import__(backend.__name__, '
              "fromlist=('format',)).format\n"
              '\n'
              "    return ''.join(bottle.template(\n"
              "        'database',\n"
              '        '
              'template_lookup=[constants.GENERATOR_TEMPLATE_DIRECTORY_PATH],\n'
              '        template_settings=dict(noescape=True),\n'
              '        constants=constants,\n'
              '        database=database,\n'
              '        backend=backend,\n'
              '        options=options,\n'
              '        format=format,\n'
              '        abstraction_class_name=abstraction_class_name,\n'
              '        now=datetime.datetime.now()))\n')

Fragment(uuid='46e4a7fe-aec9-4c59-b18e-58102acfe06a',
         path='/lib/dblayer/generator/generator.py',
         lineno=25,
         depth=0,
         type='function',
         name='generate',
         text='    if options is None:\n'
              '        options = GeneratorOptions()\n'
              '    else:\n'
              '        assert isinstance(options, GeneratorOptions)\n'
              '\n'
              '    format = __import__(backend.__name__, '
              "fromlist=('format',)).format\n"
              '\n'
              "    return ''.join(bottle.template(\n"
              "        'database',\n"
              '        '
              'template_lookup=[constants.GENERATOR_TEMPLATE_DIRECTORY_PATH],\n'
              '        template_settings=dict(noescape=True),\n'
              '        constants=constants,\n'
              '        database=database,\n'
              '        backend=backend,\n'
              '        options=options,\n'
              '        format=format,\n'
              '        abstraction_class_name=abstraction_class_name,\n'
              '        now=datetime.datetime.now()))')

Fragment(uuid='d83ca3c0-b929-4857-b953-490d332c148f',
         path='/lib/dblayer/generator/generator.py',
         lineno=26,
         depth=4,
         type='variable',
         name='options',
         text='options = GeneratorOptions()')

Fragment(uuid='f1fbd8ce-2032-4721-a083-3c8226594e7f',
         path='/lib/dblayer/generator/generator.py',
         lineno=30,
         depth=2,
         type='variable',
         name='format',
         text='format = __import__(backend.__name__, '
              "fromlist=('format',)).format")

Fragment(uuid='27edd889-f8a8-406d-97c6-5f7b2f7b2a68',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" {{abstraction_class_name}} - generated database abstraction '
              'layer\n'
              '\n'
              'Database model: {{database.__class__.__name__}}\n'
              'Backend server: {{backend.__name__}}\n'
              "Generated   on: {{now.isoformat(' ').rsplit('.', 1)[0]}}\n"
              '\n'
              'NOTE: It is a generated database abstraction layer. Please do '
              'not modify.\n'
              '      All your changes will be lost next time this code is '
              'generated!\n'
              '      Please add your code in a subclass.\n'
              '\n'
              '"""\n'
              '\n'
              'import time\n'
              '\n'
              'import dblayer\n'
              'from dblayer import constants, util\n'
              'from {{backe')

Fragment(uuid='6c7e0919-d7ec-4b38-884d-1685a09d83d2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/generator/template/database.tpl\n'
              '  Methods: _count _iter _list _name create_all_languages '
              'create_all_procedures create_all_tables create_all_triggers '
              'create_procedure_ create_structure create_table_ '
              'create_trigger_ delete_ dict drop_all_procedures '
              'drop_all_tables drop_all_triggers drop_procedure_ '
              'drop_structure drop_table_ drop_trigger_ truncate_ '
              'truncate_all_tables tuple update_\n'
              '  Variables: NA _CONDITION_MAP _FIELD_LIST _GROUP_BY '
              '_SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT '
              '_SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT '
              '_SQL_IDENTITY_INSERT_SAVEPOINT _TABLE_LIST _WHERE_CONDITION_MAP '
              '__slots__ _column_default_map _column_name_list '
              '_nullable_column_name_set _quoted_column_name_list _table_name '
              'accessible_column_list clauses condition_name_list '
              'constants.LOG_SQL_ANALYSIS: else: end_time formatted_order_by '
              'having language_set limit offset order_by parameter_tuple query '
              'query_constant_prefix query_field_list query_group_by '
              'query_name query_order_by_map query_table_list '
              'query_where_condition_map, record record_class record_list row '
              'row_list runtime_conditions): '
              'runtime_conditions[{{repr(name)}}] sql sql, start_time '
              'statement_list suffix, table._name}} table_column_name_list '
              'table_condition_map table_constant_prefix table_name '
              'table_order_by_map table_quoted_column_list where\n'
              '  Usages: Clauses DEBUG DataError DatabaseAbstraction '
              'DatabaseError Error IntegrityError InterfaceError InternalError '
              'LOG_SQL_ANALYSIS NotSupportedError OperationalError '
              'PROFILE_QUERIES ProgrammingError Record ValueError Warning '
              '_HAVING_CONDITION_MAP _ORDER_BY_MAP __class__ __init__ __name__ '
              '_column_list _condition_list _creatable _format _group_by '
              '_order_by _primary_key _procedure_list _table_list '
              '_trigger_list _writable abstraction_class_name accessible add_ '
              'add_record add_record_list argument_name backend column '
              'condition_info constants create create_language cursor database '
              'dblayer default delete delete_record delete_record_list drop '
              'else end error execute_and_fetch_iter execute_and_fetch_one '
              'execute_statement_list field_info field_list find_ for format '
              'format_create_procedure format_create_table '
              'format_create_trigger format_drop_procedure format_drop_table '
              'format_drop_trigger format_expression format_order_by '
              'format_query format_query_condition_map '
              'format_query_order_by_map format_release_savepoint '
              'format_result format_rollback_to_savepoint format_savepoint '
              'format_select format_table_condition_map '
              'format_table_order_by_map format_truncate_table '
              'format_truncate_table_list formatting_function_name generate_id '
              'get_ get_record get_record_iter get_record_list get_table_list '
              'has_custom_default ignore_errors import insert int isinstance '
              'items join language list log log_analysis map name named new_ '
              'options procedure property query_ query_having_condition_map '
              'query_where_condition_map quote_name record_or_id '
              'record_or_id_list repr reversed runtime_conditions self serial '
              'set sorted sql_expression str suffix table table_info '
              'table_list time trigger update update_record update_record_list '
              'upper util value_expression\n')

Fragment(uuid='e53b0afe-522e-40fd-a2bd-3de9b6a2f6f9',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=13,
         depth=1,
         type='dependency',
         name='',
         text='import time')

Fragment(uuid='616ec78e-9dc9-47d2-9b01-fe4c70c9f245',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=15,
         depth=1,
         type='dependency',
         name='',
         text='import dblayer')

Fragment(uuid='8fc133b6-7a34-4225-ad77-959665f216f2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=16,
         depth=1,
         type='dependency',
         name='',
         text='from dblayer import constants, util')

Fragment(uuid='5e9f26df-7e37-41e6-9022-13538df8bc7c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='nd.__name__}} import database, record\n'
              '\n'
              'NA = constants.NA\n'
              '\n'
              '### Record classes\n'
              '\n'
              '%for table in database._table_list:\n'
              '%accessible_column_list = [column for column in '
              'table._column_list if column.accessible]\n'
              'class {{table.__class__.__name__}}Record(record.Record):\n'
              '    """ {{table.__class__.__name__}} record\n'
              '    \n'
              '    %for column in accessible_column_list:\n'
              '    %if column.doc:\n'
              '    * {{column.name}}: {{column.doc}}\n'
              '    %else:\n'
              '    * {{column.name}}: Undocumented\n'
              '    %end\n'
              '      %if column')

Fragment(uuid='198a8dd9-aa3e-4e2c-ac80-5773351974ca',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=19,
         depth=1,
         type='variable',
         name='NA',
         text='NA = constants.NA')

Fragment(uuid='9c7dedd4-6eef-45bc-8f7c-4c8b6e1bddf0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=24,
         depth=1,
         type='variable',
         name='accessible_column_list',
         text='accessible_column_list = [column for column in '
              'table._column_list if column.accessible]')

Fragment(uuid='98889853-c811-4385-b4ee-803b015d95b2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='.null:\n'
              '      Nullable, default: {{repr(column.default)}}\n'
              '      %else:\n'
              '      %if column.default is None:\n'
              '      Required\n'
              '      %else:\n'
              '      Required, default: {{repr(column.default)}}\n'
              '      %end\n'
              '      %end\n'
              '    \n'
              '    %end\n'
              '    """\n'
              '    \n'
              '    ### Runtime model information\n'
              '    \n'
              '    # Name of the corresponding database table storing the '
              'actual records\n'
              '    _table_name = {{repr(table._name)}}\n'
              '    \n'
              '    # Column information\n'
              '    _column_name_list = {{tuple(column.name for column in '
              'accessible')

Fragment(uuid='2748bc4f-390e-4fd4-bcca-ff9a3755624f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=50,
         depth=1,
         type='variable',
         name='_table_name',
         text='_table_name = {{repr(table._name)}}')

Fragment(uuid='1fe854ca-4e56-47af-8db9-664854cdf701',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=53,
         depth=0,
         type='module',
         name='',
         text='_column_list)}}\n'
              '    _quoted_column_name_list = '
              '{{tuple(format.quote_name(column.name) for column in '
              'accessible_column_list)}}\n'
              '    _nullable_column_name_set = set({{tuple(column.name for '
              'column in accessible_column_list)}})\n'
              '    _column_default_map = {{dict((column.name, column.default) '
              'for column in accessible_column_list if column.default is not '
              'None and not column.has_custom_default)}}\n'
              '    \n'
              '    ### Optimization\n'
              '    \n'
              '    __slots__ = _column_name_list\n'
              '    \n'
              '    ### Implementation\n')

Fragment(uuid='a12031a3-9b31-4d18-a4ea-3f461e0f7d0a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=53,
         depth=1,
         type='variable',
         name='_column_name_list',
         text='_column_name_list = {{tuple(column.name for column in '
              'accessible_column_list)}}')

Fragment(uuid='920ba357-ac75-4fee-8c60-eb9615dfa6b2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=54,
         depth=1,
         type='variable',
         name='_quoted_column_name_list',
         text='_quoted_column_name_list = '
              '{{tuple(format.quote_name(column.name) for column in '
              'accessible_column_list)}}')

Fragment(uuid='ce3c1cad-5ce4-49a5-b856-1d4de6ef11ad',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=55,
         depth=1,
         type='variable',
         name='_nullable_column_name_set',
         text='_nullable_column_name_set = set({{tuple(column.name for column '
              'in accessible_column_list)}})')

Fragment(uuid='ff012b5e-da74-4852-9bf2-3a2f4fb15b2a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=56,
         depth=1,
         type='variable',
         name='_column_default_map',
         text='_column_default_map = {{dict((column.name, column.default) for '
              'column in accessible_column_list if column.default is not None '
              'and not column.has_custom_default)}}')

Fragment(uuid='ca854512-a4e4-41a9-a46c-a33d83b76820',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=60,
         depth=1,
         type='variable',
         name='__slots__',
         text='__slots__ = _column_name_list')

Fragment(uuid='d2212104-4f64-4f4e-a883-f4ac4fde2aba',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=63,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def __init__(\n'
              '        self,\n'
              "        {{',\\n        '.join('%s=%r' % (column.name, (None if "
              'column.has_custom_default else column.default)) for column in '
              'accessible_column_list)}}):\n'
              '        """ Creates {{table.__class__.__name__}} record in '
              'memory\n'
              '        \n'
              '        %for column in accessible_column_list:\n'
              '        %if column.doc:\n'
              '        * {{column.name}}: {{column.doc}}\n'
              '        %else:\n'
              '        * {{column.name}}: Undocumented')

Fragment(uuid='edcd159f-9470-43bb-87d0-c1ebb4cc3021',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        %end\n'
              '          %if column.null:\n'
              '          Nullable, default: {{repr(column.default)}}\n'
              '          %else:\n'
              '          %if column.default is None:\n'
              '          Required\n'
              '          %else:\n'
              '          Required, default: {{repr(column.default)}}\n'
              '          %end\n'
              '          %end\n'
              '        \n'
              '        %end\n'
              '        """\n'
              "        {{'\\n        '.join('self.%s = %s' % (column.name, "
              'column.name) for column in accessible_column_list)}}\n'
              '\n'
              '    @property\n')

Fragment(uuid='b9155045-309b-41f8-95e2-be0cec58ef07',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=90,
         depth=0,
         type='module',
         name='',
         text='    def tuple(self):\n'
              '        """ Returns a tuple with the field values of this '
              '{{table.__class__.__name__}} record\n'
              '        """\n'
              '        return (\n'
              "            {{',\\n            '.join('self.%s' % column.name "
              'for column in accessible_column_list)}})\n'
              '    \n'
              '    @property\n')

Fragment(uuid='6a1b48dc-0bf3-47ac-9008-39a3b1f34e65',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=90,
         depth=1,
         type='function',
         name='tuple',
         text='def tuple(self):\n'
              '        """ Returns a tuple with the field values of this '
              '{{table.__class__.__name__}} record\n'
              '        """\n'
              '        return (\n'
              "            {{',\\n            '.join('self.%s' % column.name "
              'for column in accessible_column_list)}})')

Fragment(uuid='1d1e28af-8988-447d-a71d-e3ef5f2751ac',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=97,
         depth=0,
         type='module',
         name='',
         text='    def dict(self):\n'
              '        """ Returns a dictionary with the field values of this '
              '{{table.__class__.__name__}} record\n'
              '        """\n'
              '        return dict(\n'
              "            {{',\\n            '.join('%s=self.%s' % "
              '(column.name, column.name) for column in '
              'accessible_column_list)}})\n'
              '\n'
              '%end\n'
              '### Database abstraction\n')

Fragment(uuid='9e484aa6-e764-49b6-997d-4b70393f4657',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=97,
         depth=2,
         type='function',
         name='dict',
         text='def dict(self):\n'
              '        """ Returns a dictionary with the field values of this '
              '{{table.__class__.__name__}} record\n'
              '        """\n'
              '        return dict(\n'
              "            {{',\\n            '.join('%s=self.%s' % "
              '(column.name, column.name) for column in '
              'accessible_column_list)}})')

Fragment(uuid='8632cc1c-c277-4fbb-bfeb-73ef9f033261',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=105,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class '
              '{{abstraction_class_name}}(database.DatabaseAbstraction):\n'
              '    """ Database abstraction layer\n'
              '    \n'
              '    Database model: {{database.__class__.__name__}}\n'
              '    Backend server: {{backend.__name__}}\n'
              "    Generated   on: {{now.isoformat(' ').rsplit('.', 1)[0]}}\n"
              '    \n'
              '    """\n'
              '\n'
              '    # Database backend module, required by the methods in the '
              'DatabaseAbstraction base class\n'
              '    import {{backend.__name__}}.format as _format\n'
              '    \n'
              '    # Classes\n'
              '    from {{backend.__name__}}.clauses import Clauses\n'
              '    from {{backend.__name__}}.error impor')

Fragment(uuid='4121057e-325a-4226-afef-811af9017281',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=119,
         depth=1,
         type='dependency',
         name='',
         text='import Clauses')

Fragment(uuid='de4015cd-4464-46fe-8b92-2e4435111948',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=120,
         depth=0,
         type='module',
         name='',
         text='t (\n'
              '        Warning, Error, InterfaceError, DatabaseError, '
              'DataError, OperationalError, \n'
              '        IntegrityError, InternalError, ProgrammingError, '
              'NotSupportedError)\n'
              '    \n'
              '    # Constants\n'
              '    \n'
              '    # SQL statement for the savepoint set before each indentity '
              'insert statement\n'
              '    _SQL_IDENTITY_INSERT_SAVEPOINT = '
              "{{repr(format.format_savepoint('before_identity_insert'))}}\n"
              '    \n'
              '    # SQL statement to release a savepoint after a successful '
              'identity insert\n'
              '    _SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT = '
              '{{repr(format.format_release_sav')

Fragment(uuid='630e2076-2fa7-439f-866d-8db60ac44f17',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=127,
         depth=1,
         type='variable',
         name='_SQL_IDENTITY_INSERT_SAVEPOINT',
         text='_SQL_IDENTITY_INSERT_SAVEPOINT = '
              "{{repr(format.format_savepoint('before_identity_insert'))}}")

Fragment(uuid='b808be9f-d895-4be4-bf2d-4cf190da6e05',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=130,
         depth=0,
         type='module',
         name='',
         text="epoint('before_identity_insert'))}}\n"
              '    \n'
              '    # SQL statement for rolling back to the savepoint after a '
              'failing insert statement\n'
              '    _SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT = '
              "{{repr(format.format_rollback_to_savepoint('before_identity_insert'))}}\n"
              '    \n'
              '    ### Creating in-memory records - override them to provide '
              'custom record classes\n'
              '    \n'
              '    %for table in database._table_list:\n'
              '    new_{{table._name}} = {{table.__class__.__name__}}Record\n'
              '    %end\n'
              '    \n'
              '    ### Selecting from the database\n'
              '    \n'
              '    %for table in database._table')

Fragment(uuid='2fe96faf-dfa6-4ceb-a1f3-94ced0b4c184',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=130,
         depth=1,
         type='variable',
         name='_SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT',
         text='_SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT = '
              "{{repr(format.format_release_savepoint('before_identity_insert'))}}")

Fragment(uuid='3c69e37f-01eb-418c-a254-b6ae184bf8a3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=133,
         depth=1,
         type='variable',
         name='_SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT',
         text='_SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT = '
              "{{repr(format.format_rollback_to_savepoint('before_identity_insert'))}}")

Fragment(uuid='2cc172f5-64db-48b5-b004-0e141667cd45',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=138,
         depth=2,
         type='variable',
         name='table._name}}',
         text='table._name}} = {{table.__class__.__name__}}')

Fragment(uuid='35cd7630-2f59-45e3-a29e-cc799ad0a83d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=143,
         depth=0,
         type='module',
         name='',
         text='_list:\n'
              '    %table_name = table._name\n'
              "    %table_constant_prefix = '_%s' % table_name.upper()\n"
              '    %accessible_column_list = tuple(column for column in '
              'table._column_list if column.accessible)\n'
              '    %table_column_name_list = tuple(column.name for column in '
              'accessible_column_list)\n'
              '    %table_quoted_column_list = '
              'list(map(format.format_expression, accessible_column_list))\n'
              '    %table_order_by_map = '
              'format.format_table_order_by_map(table)\n'
              '    %table_condition_map = '
              'format.format_table_condition_map(table)\n'
              '    %if table._creatable:\n')

Fragment(uuid='3b37e72e-faaa-475d-8b7b-b16498d38db2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=144,
         depth=1,
         type='variable',
         name='table_name',
         text='table_name = table._name')

Fragment(uuid='19b84002-889e-4f7a-b016-accc8ec2faf2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=145,
         depth=1,
         type='variable',
         name='table_constant_prefix',
         text="table_constant_prefix = '_%s' % table_name.upper()")

Fragment(uuid='e6169928-873f-4f91-a9fa-d5250ba6e4bb',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=146,
         depth=1,
         type='variable',
         name='accessible_column_list',
         text='accessible_column_list = tuple(column for column in '
              'table._column_list if column.accessible)')

Fragment(uuid='acb134b5-09c3-45df-8a4d-81afd9e56c97',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=147,
         depth=1,
         type='variable',
         name='table_column_name_list',
         text='table_column_name_list = tuple(column.name for column in '
              'accessible_column_list)')

Fragment(uuid='4a01dcb3-7a02-4bf4-aeb8-b580d8628015',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=148,
         depth=1,
         type='variable',
         name='table_quoted_column_list',
         text='table_quoted_column_list = list(map(format.format_expression, '
              'accessible_column_list))')

Fragment(uuid='3ffbd6a1-e2eb-4ea5-9d5e-062fa794d6c6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=149,
         depth=1,
         type='variable',
         name='table_order_by_map',
         text='table_order_by_map = format.format_table_order_by_map(table)')

Fragment(uuid='41ab6bc5-6db6-464a-bac3-257a66ba4038',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=150,
         depth=1,
         type='variable',
         name='table_condition_map',
         text='table_condition_map = format.format_table_condition_map(table)')

Fragment(uuid='9f78c0b5-ac96-4de3-be9d-db3e1ac75ab1',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=152,
         depth=0,
         type='module',
         name='',
         text='    def get_{{table._name}}(\n'
              '        self,\n'
              '        id=None,\n'
              '        where=None,\n'
              '        parameter_tuple=(),\n'
              '        order_by=(),\n'
              '        offset=None):\n'
              '        """ Retrieves a {{table.__class__.__name__}} record or '
              'None if not found\n'
              '        """\n')

Fragment(uuid='4e41eb4f-3b85-4ce4-aefc-67dc6a791e23',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=152,
         depth=1,
         type='function',
         name='_name',
         text='def get_{{table._name}}(\n'
              '        self,\n'
              '        id=None,\n'
              '        where=None,\n'
              '        parameter_tuple=(),\n'
              '        order_by=(),\n'
              '        offset=None):\n'
              '        """ Retrieves a {{table.__class__.__name__}} record or '
              'None if not found\n'
              '        """\n')

Fragment(uuid='228cb2d0-6048-497a-ad18-3dc99a10093d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=161,
         depth=0,
         type='module',
         name='',
         text='        if id is not None:\n'
              '            %if table._primary_key is None:\n'
              "            raise ValueError('The {{table.__class__.__name__}} "
              'table does not have a primary key, so no way to find a record '
              "by primary key value!')\n"
              '            %else:\n'
              '            %if constants.DEBUG:\n')

Fragment(uuid='7481bd2b-5f6f-4409-b2a0-0424fafd6c1f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=161,
         depth=1,
         type='function',
         name='_name',
         text='        if id is not None:\n'
              '            %if table._primary_key is None:\n'
              "            raise ValueError('The {{table.__class__.__name__}} "
              'table does not have a primary key, so no way to find a record '
              "by primary key value!')\n"
              '            %else:\n'
              '            %if constants.DEBUG:\n')

Fragment(uuid='2da2e220-1d93-4d18-9f9d-d0ae5d34623c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=166,
         depth=0,
         type='module',
         name='',
         text='            if where is not None:\n'
              "                raise ValueError('Cannot pass a where condition "
              "while searching for a record by its primary key value (id)!')\n")

Fragment(uuid='7e8939a1-f38a-4bdd-92c8-da7b3e851888',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=166,
         depth=1,
         type='function',
         name='_name',
         text='            if where is not None:\n'
              "                raise ValueError('Cannot pass a where condition "
              "while searching for a record by its primary key value (id)!')\n")

Fragment(uuid='c1a9a5d4-1b1e-46da-a5d6-46e7080862e6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=168,
         depth=0,
         type='module',
         name='',
         text='            if parameter_tuple:\n'
              "                raise ValueError('Cannot pass parameter_tuple "
              "while searching for a record by its primary key value (id)!')\n"
              '            %end\n'
              '            parameter_tuple = (id, )\n'
              '            where = '
              "'{{format.quote_name(table._primary_key.name)}} = %s'\n"
              '            %end\n'
              '        else:\n')

Fragment(uuid='9dc71b9f-f135-4bef-8ff7-791a77e7b1f4',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=168,
         depth=1,
         type='function',
         name='_name',
         text='            if parameter_tuple:\n'
              "                raise ValueError('Cannot pass parameter_tuple "
              "while searching for a record by its primary key value (id)!')\n"
              '            %end\n'
              '            parameter_tuple = (id, )\n'
              '            where = '
              "'{{format.quote_name(table._primary_key.name)}} = %s'\n"
              '            %end')

Fragment(uuid='170abdbc-dae3-4ee5-9ff7-95279f826bd6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=171,
         depth=3,
         type='variable',
         name='parameter_tuple',
         text='parameter_tuple = (id, )')

Fragment(uuid='84dfc11e-6253-4816-8d95-de07dfab0c65',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=172,
         depth=3,
         type='variable',
         name='where',
         text="where = '{{format.quote_name(table._primary_key.name)}} = %s'")

Fragment(uuid='ad77f4ef-c300-4160-a5b8-199327a41a63',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=174,
         depth=1,
         type='variable',
         name='else:',
         text='else:\n'
              '            if not isinstance(where, str):\n'
              '                where = self._format.format_expression(where)')

Fragment(uuid='78c34db1-82d6-4169-a0e8-d8ea4188958c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=175,
         depth=0,
         type='module',
         name='',
         text='            if not isinstance(where, str):\n'
              '                where = self._format.format_expression(where)\n'
              '                \n'
              '        formatted_order_by = '
              'self._format.format_order_by(self.{{table_constant_prefix}}_ORDER_BY_MAP, '
              'order_by)\n'
              '        \n'
              '        clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              '            '
              'field_list=self.new_{{table._name}}._quoted_column_name_list,\n'
              '            where=where,\n'
              '            order_by=formatted_order_by,\n'
              '            limit=1,\n'
              '            offset=offset)\n'
              '            \n'
              '        record = self.get_record(\n'
              '            self.new_{{table._name}},\n'
              '            clauses,\n'
              '            parameter_tuple)\n')

Fragment(uuid='706b8462-660c-4a95-ad21-3017d84565fc',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=180,
         depth=1,
         type='variable',
         name='clauses',
         text='clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              '            '
              'field_list=self.new_{{table._name}}._quoted_column_name_list,\n'
              '            where=where,\n'
              '            order_by=formatted_order_by,\n'
              '            limit=1,\n'
              '            offset=offset)')

Fragment(uuid='0612bd75-ecce-477e-9937-9d360659648f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=188,
         depth=1,
         type='variable',
         name='record',
         text='record = self.get_record(\n'
              '            self.new_{{table._name}},\n'
              '            clauses,\n'
              '            parameter_tuple)')

Fragment(uuid='b8ad9a7b-706e-4eb3-a91c-f981180c617f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=192,
         depth=0,
         type='module',
         name='',
         text='            \n'
              '        if 0:\n'
              '            assert isinstance(record, '
              '{{table.__class__.__name__}}Record)\n'
              '            \n'
              '        return record\n')

Fragment(uuid='0f0f4224-a7b0-416c-9f9f-d55d8bd283c3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=197,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def get_{{table._name}}_list(\n'
              '        self,\n'
              "        where='',\n"
              '        parameter_tuple=(),\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None):\n'
              '        """ Retrieves list of {{table.__class__.__name__}} '
              'records\n'
              '        """\n'
              '        formatted_order_by = '
              'self._format.format_order_by(self.{{table_constant_prefix}}_ORDER_BY_MAP, '
              'order_by)\n'
              '        \n'
              '        clauses = self.Cl')

Fragment(uuid='2e410801-e588-4106-9873-325af41df0db',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=207,
         depth=1,
         type='variable',
         name='formatted_order_by',
         text='formatted_order_by = '
              'self._format.format_order_by(self.{{table_constant_prefix}}_ORDER_BY_MAP, '
              'order_by)')

Fragment(uuid='e7007f08-7a5d-4428-b16b-e5cab810270d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=209,
         depth=0,
         type='module',
         name='',
         text='auses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              '            '
              'field_list=self.new_{{table._name}}._quoted_column_name_list,\n'
              '            where=where,\n'
              '            order_by=formatted_order_by,\n'
              '            limit=limit,\n'
              '            offset=offset)\n'
              '            \n'
              '        return self.get_record_list(\n'
              '            self.new_{{table._name}},\n'
              '            clauses,\n'
              '            parameter_tuple)\n')

Fragment(uuid='e3c38250-b319-4509-b4df-d146c465bb21',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=209,
         depth=1,
         type='variable',
         name='clauses',
         text='clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              '            '
              'field_list=self.new_{{table._name}}._quoted_column_name_list,\n'
              '            where=where,\n'
              '            order_by=formatted_order_by,\n'
              '            limit=limit,\n'
              '            offset=offset)')

Fragment(uuid='5de1bcd9-e2b6-4979-bd41-c3b42053784e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=221,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def get_{{table._name}}_iter(\n'
              '        self,\n'
              "        where='',\n"
              '        parameter_tuple=(),\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None):\n'
              '        """ Iterates on {{table.__class__.__name__}} records\n'
              '        """\n')

Fragment(uuid='b85b07f4-2149-4fe6-a97b-a410238672e3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=231,
         depth=0,
         type='module',
         name='',
         text='        if not isinstance(where, str):\n'
              '            where = self._format.format_expression(where)\n'
              '        \n'
              '        formatted_order_by = '
              'self._format.format_order_by(self.{{table_constant_prefix}}_ORDER_BY_MAP, '
              'order_by)\n'
              '        \n'
              '        clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              '            '
              'field_list=self.new_{{table._name}}._quoted_column_name_list,\n'
              '            where=where,\n'
              '            order_by=formatted_order_by,\n'
              '            limit=limit,\n'
              '            offset=offset)\n')

Fragment(uuid='07bc1d38-fe89-49b6-a822-f6e344c95362',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=232,
         depth=3,
         type='variable',
         name='where',
         text='where = self._format.format_expression(where)')

Fragment(uuid='ba20fe2a-d2c1-40b6-a4b4-676eab09c6df',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=234,
         depth=1,
         type='variable',
         name='formatted_order_by',
         text='formatted_order_by = '
              'self._format.format_order_by(self.{{table_constant_prefix}}_ORDER_BY_MAP, '
              'order_by)')

Fragment(uuid='c4822c88-de42-412b-8cc8-f137a15e9076',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=236,
         depth=1,
         type='variable',
         name='clauses',
         text='clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              '            '
              'field_list=self.new_{{table._name}}._quoted_column_name_list,\n'
              '            where=where,\n'
              '            order_by=formatted_order_by,\n'
              '            limit=limit,\n'
              '            offset=offset)')

Fragment(uuid='4f31d031-1363-4cdb-a09e-5375c59105ee',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=243,
         depth=0,
         type='module',
         name='',
         text='            \n'
              '        for record in self.get_record_iter(\n'
              '                self.new_{{table._name}},\n'
              '                clauses,\n'
              '                parameter_tuple):\n'
              '            \n'
              '            yield record\n')

Fragment(uuid='9cee8b3f-d0bf-479d-9782-b9123f47959f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=250,
         depth=0,
         type='module',
         name='',
         text='            \n'
              '    def get_{{table._name}}_count(\n'
              '        self,\n'
              "        where='',\n"
              '        parameter_tuple=()):\n'
              '        """ Counts {{table.__class__.__name__}} records in the '
              'database\n'
              '        """\n'
              '        if not isinstance(where, str):\n'
              '            where = self._format.format_expression(where)\n'
              '        \n'
              '        clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              "            field_list=('COUNT(*)', ),\n"
              '            where=where)\n'
              '            \n'
              '        sql = self._format.format_select(clauses)\n')

Fragment(uuid='6ca7d816-6f16-458c-8f0e-930442f87e56',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=251,
         depth=1,
         type='function',
         name='_count',
         text='def get_{{table._name}}_count(\n'
              '        self,\n'
              "        where='',\n"
              '        parameter_tuple=()):\n'
              '        """ Counts {{table.__class__.__name__}} records in the '
              'database\n'
              '        """\n'
              '        if not isinstance(where, str):\n'
              '            where = self._format.format_expression(where)\n'
              '        \n'
              '        clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              "            field_list=('COUNT(*)', ),\n"
              '            where=where)\n'
              '            \n'
              '        sql = self._format.format_select(clauses)\n'
              '        \n'
              '        with self.cursor() as cursor:\n'
              '            return self.execute_and_fetch_one(cursor, sql)[0]')

Fragment(uuid='1c66bbbf-9413-4a1c-a901-25bce829c610',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=258,
         depth=5,
         type='variable',
         name='where',
         text='where = self._format.format_expression(where)')

Fragment(uuid='5fa26963-8e18-4036-9838-234bbbc66e20',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=260,
         depth=3,
         type='variable',
         name='clauses',
         text='clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              "            field_list=('COUNT(*)', ),\n"
              '            where=where)')

Fragment(uuid='e0af480b-f752-438c-817f-664d7e45bef7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=265,
         depth=3,
         type='variable',
         name='sql',
         text='sql = self._format.format_select(clauses)')

Fragment(uuid='37849ae9-ebd2-4876-8230-4d478e80f236',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=266,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '        with self.cursor() as cursor:\n'
              '            return self.execute_and_fetch_one(cursor, sql)[0]\n'
              '            \n'
              '    {{table_constant_prefix}}_TABLE_LIST = [\n'
              '        ({{repr(table._table_name)}}, {{repr(table_name)}})]\n'
              '        \n'
              '    {{table_constant_prefix}}_FIELD_LIST = [\n'
              '        %for field_info in table_quoted_column_list:\n'
              '        {{repr(field_info)}},\n'
              '        %end\n'
              '        ]\n'
              '        \n'
              '    {{table_constant_prefix}}_ORDER_BY_MAP = {\n'
              '        %for name, sql_express')

Fragment(uuid='f07fa057-806b-4fcb-a8b7-8c6eb1b46296',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=270,
         depth=1,
         type='variable',
         name='_TABLE_LIST',
         text='_TABLE_LIST = [\n'
              '        ({{repr(table._table_name)}}, {{repr(table_name)}})]')

Fragment(uuid='52392b00-c8cb-41a8-bbeb-8b7c2b616b81',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=273,
         depth=1,
         type='variable',
         name='_FIELD_LIST',
         text='_FIELD_LIST = [\n'
              '        %for field_info in table_quoted_column_list:\n'
              '        {{repr(field_info)}},\n'
              '        %end\n'
              '        ]')

Fragment(uuid='93a29c04-e2a7-48a2-891d-cd1a266e238e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=280,
         depth=0,
         type='module',
         name='',
         text='ion in sorted(table_order_by_map.items()):\n'
              '        {{repr(name)}}: {{repr(sql_expression)}},\n'
              '        %end\n'
              '        }\n'
              '        \n'
              '    {{table_constant_prefix}}_CONDITION_MAP = {\n'
              '        %for argument_name, condition_info in '
              'sorted(table_condition_map.items()):\n'
              '        %suffix, formatting_function_name, value_expression = '
              'condition_info\n'
              '        {{repr(argument_name)}}: ({{repr(suffix)}}, '
              '_format.{{formatting_function_name}}, '
              '{{repr(value_expression)}}),\n'
              '        %end\n'
              '        }\n')

Fragment(uuid='e7170a62-438a-417e-8edb-f54c260b22c3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=285,
         depth=1,
         type='variable',
         name='_CONDITION_MAP',
         text='_CONDITION_MAP = {\n'
              '        %for argument_name, condition_info in '
              'sorted(table_condition_map.items()):\n'
              '        %suffix, formatting_function_name, value_expression = '
              'condition_info\n'
              '        {{repr(argument_name)}}: ({{repr(suffix)}}, '
              '_format.{{formatting_function_name}}, '
              '{{repr(value_expression)}}),\n'
              '        %end\n'
              '        }')

Fragment(uuid='c85731cb-b53a-42dd-ae8b-493e98b4c5d5',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=291,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def find_{{table_name}}(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=(),\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):\n'
              '        """ Finds {{table.__class__.__name__}} record by field '
              'values, returns None if not found\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        runtime_conditions[{{repr(name)}}]')

Fragment(uuid='26ec53aa-13b5-4b06-9d8a-c25863407536',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=307,
         depth=0,
         type='module',
         name='',
         text=' = {{name}}\n'
              '        %end\n'
              '        \n'
              '        %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{table_constant_prefix}}_FIELD_LIST,\n'
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            self.{{table_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            1,\n'
              '            offset)\n')

Fragment(uuid='d7750b4b-8bef-49a7-9d45-2bf780c82126',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=307,
         depth=1,
         type='variable',
         name='runtime_conditions[{{repr(name)}}]',
         text='runtime_conditions[{{repr(name)}}] = {{name}}')

Fragment(uuid='6e340de9-0db2-4e29-8cf0-b5257fa51a28',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=311,
         depth=1,
         type='variable',
         name='sql,',
         text='sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{table_constant_prefix}}_FIELD_LIST,\n'
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            self.{{table_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            1,\n'
              '            offset)')

Fragment(uuid='82e8f741-f8b3-47a9-a80a-6fefd7b55bd6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=324,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        if row is None:\n'
              '            return None\n'
              '            \n'
              '        return self.new_{{table_name}}(*row)\n')

Fragment(uuid='b6e72bd5-60ff-4fb8-ab84-40748d90773d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=330,
         depth=3,
         type='variable',
         name='start_time',
         text='start_time = time.time()')

Fragment(uuid='afa9677e-dc92-427d-b56f-dae085ae3841',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=332,
         depth=3,
         type='variable',
         name='row',
         text='row = self.execute_and_fetch_one(cursor, sql, parameter_tuple)')

Fragment(uuid='b0d5b04c-ce57-49eb-adff-d53f776a7b87',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=334,
         depth=3,
         type='variable',
         name='end_time',
         text='end_time = time.time()')

Fragment(uuid='a335c5a6-8e19-485c-9471-c548e9efe9bd',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=342,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def find_{{table_name}}_list(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):\n'
              '        """ Finds {{table.__class__.__name__}} records by field '
              'values\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '      ')

Fragment(uuid='cbf31141-43ae-4b5a-b5bd-cf3b797758a5',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=359,
         depth=1,
         type='variable',
         name='runtime_conditions[{{repr(name)}}]',
         text='runtime_conditions[{{repr(name)}}] = {{name}}')

Fragment(uuid='12647a74-bbbb-4b40-a002-b73be5972f3c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=361,
         depth=0,
         type='module',
         name='',
         text='  \n'
              '        %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{table_constant_prefix}}_FIELD_LIST,\n'
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            self.{{table_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{table_name}}    \n')

Fragment(uuid='08542085-4f27-4f6e-ab79-d49737d3db89',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=363,
         depth=1,
         type='variable',
         name='sql,',
         text='sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{table_constant_prefix}}_FIELD_LIST,\n'
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            self.{{table_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)')

Fragment(uuid='fdcc48ad-663a-4c4b-bd10-2e1ade4edf69',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=377,
         depth=1,
         type='variable',
         name='record_class',
         text='record_class = self.new_{{table_name}}    \n'
              '        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            record_list = [\n'
              '                record_class(*row) \n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return record_list\n')

Fragment(uuid='54cda433-3894-45d5-9ed7-28f37468f012',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=378,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            record_list = [\n'
              '                record_class(*row) \n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return record_list\n')

Fragment(uuid='c018384c-39a6-4976-abd4-55f736ce4ebe',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=394,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def find_{{table_name}}_iter(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):\n'
              '        """ Finds {{table.__class__.__name__}} records by field '
              'values and iterates on them\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '    ')

Fragment(uuid='8416ed2b-f3b6-4a3e-9b86-500350c93f2f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=394,
         depth=1,
         type='variable',
         name='record_class',
         text='        \n'
              '    def find_{{table_name}}_iter(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):\n'
              '        """ Finds {{table.__class__.__name__}} records by field '
              'values and iterates on them\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '    ')

Fragment(uuid='b491f5b6-72ce-4447-a779-c40e8207652f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=414,
         depth=0,
         type='module',
         name='',
         text='    %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{table_constant_prefix}}_FIELD_LIST,\n'
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            self.{{table_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{table_name}}\n'
              '        %if constants.LOG_SQL_ANALYSIS:\n')

Fragment(uuid='c37e48d5-3987-46ce-80aa-ad8da0df1e6e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=414,
         depth=1,
         type='variable',
         name='record_class',
         text='    %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{table_constant_prefix}}_FIELD_LIST,\n'
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            self.{{table_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{table_name}}\n'
              '        %if constants.LOG_SQL_ANALYSIS:\n')

Fragment(uuid='1dd319aa-701a-411b-84a2-50939bb8b55f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=431,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor() as cursor:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '        %else:\n')

Fragment(uuid='aa709b07-d250-43e7-8531-41fdc5ed9e24',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=431,
         depth=1,
         type='variable',
         name='record_class',
         text='        with self.cursor() as cursor:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '        %else:\n')

Fragment(uuid='10f95956-aec7-49e1-b403-ce48f6164aa0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=434,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor(named=True) as cursor:\n'
              '        %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            row_list = list(self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple))\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            for row in row_list:\n'
              '                yield record_class(*row)\n'
              '            %else:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)\n'
              '            %end\n')

Fragment(uuid='6ae1283c-9261-4447-9cde-f4fcf01bc2ba',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=434,
         depth=1,
         type='variable',
         name='record_class',
         text='        with self.cursor(named=True) as cursor')

Fragment(uuid='36f6ae09-3b87-4362-8750-89c333f62d9a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=437,
         depth=1,
         type='variable',
         name='start_time',
         text='start_time = time.time()')

Fragment(uuid='7ac3e883-56c5-47c1-b81f-7bb5da94c62a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=438,
         depth=1,
         type='variable',
         name='row_list',
         text='row_list = list(self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple))')

Fragment(uuid='304371d6-5404-4619-bdb5-d2027614ac15',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=439,
         depth=1,
         type='variable',
         name='end_time',
         text='end_time = time.time()')

Fragment(uuid='177d2117-6342-4fdb-952b-a1051b9c07f3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=447,
         depth=0,
         type='module',
         name='',
         text='            \n'
              '    def find_{{table_name}}_count(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=None,\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):\n'
              '        """ Counds {{table.__class__.__name__}} records by '
              'field values\n'
              '\n'
              '        The record ordering is ignored, but can be passed to '
              'provide\n'
              '        compatible method signature with the actual find '
              'methods.\n'
              '        \n'
              '        """')

Fragment(uuid='f61dfe91-6b16-4f5e-a90b-57d997f8c2dd',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=465,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '\n'
              '        %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              "            ('COUNT(*)', ),\n"
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            {},\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            (),\n'
              '            limit,\n'
              '            offset)\n')

Fragment(uuid='e3c53533-de5b-4522-8779-3a7bae562b81',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=468,
         depth=1,
         type='variable',
         name='runtime_conditions[{{repr(name)}}]',
         text='runtime_conditions[{{repr(name)}}] = {{name}}')

Fragment(uuid='5fb223d1-8315-456b-bafd-9234e83be565',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=472,
         depth=1,
         type='variable',
         name='sql,',
         text='sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              "            ('COUNT(*)', ),\n"
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            {},\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            (),\n'
              '            limit,\n'
              '            offset)')

Fragment(uuid='1160323c-2251-4e91-9b74-5f6ad36cd728',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=485,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return row[0]\n'
              '        \n'
              '    %else:\n'
              '    %query = table\n'
              '    %query_name = query._name\n'
              '  ')

Fragment(uuid='70d89978-9510-41a0-8744-c90d8cb22a40',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=491,
         depth=3,
         type='variable',
         name='start_time',
         text='start_time = time.time()')

Fragment(uuid='8f099598-229f-4ffa-ae5f-ed444fc088a5',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=493,
         depth=3,
         type='variable',
         name='row',
         text='row = self.execute_and_fetch_one(cursor, sql, parameter_tuple)')

Fragment(uuid='d8352a2e-759a-4ac6-9115-202ee171c61d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=495,
         depth=3,
         type='variable',
         name='end_time',
         text='end_time = time.time()')

Fragment(uuid='fec0142f-10d7-4060-985d-f70dff3c73d3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=502,
         depth=1,
         type='variable',
         name='query',
         text='query = table')

Fragment(uuid='0d76eb09-0d7a-492e-9684-3b70255d40bd',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=503,
         depth=1,
         type='variable',
         name='query_name',
         text='query_name = query._name')

Fragment(uuid='51142dcd-c1bb-4fa0-b729-89c54cc0ac2e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=504,
         depth=0,
         type='module',
         name='',
         text="  %query_constant_prefix = '_%s' % query_name.upper()\n"
              '    %query_table_list = query.get_table_list()\n'
              '    %query_field_list = list(map(format.format_result, '
              'query._column_list))\n'
              '    %query_group_by = list(map(format.format_expression, '
              'query._group_by))\n'
              '    %query_order_by_map = '
              'format.format_query_order_by_map(query)\n'
              '    %query_where_condition_map, query_having_condition_map = '
              'format.format_query_condition_map(query)\n'
              '    %condition_name_list = [column.name for column in '
              'query._column_list + query._condition_list]\n'
              '    {{query_constant_prefix}}_TABLE_LIST = [\n'
              '        %for table_info in query_table_list:\n'
              '        {{repr(table_info)}}')

Fragment(uuid='9e6b6d8d-42cf-44a9-95a2-585f01ea697b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=504,
         depth=1,
         type='variable',
         name='query_constant_prefix',
         text="query_constant_prefix = '_%s' % query_name.upper()")

Fragment(uuid='f3f69e8f-4c16-4403-a5e0-35d46ac083f5',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=505,
         depth=1,
         type='variable',
         name='query_table_list',
         text='query_table_list = query.get_table_list()')

Fragment(uuid='92ccf9cb-1f8e-4a82-9f3f-415848dbb187',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=506,
         depth=1,
         type='variable',
         name='query_field_list',
         text='query_field_list = list(map(format.format_result, '
              'query._column_list))')

Fragment(uuid='0a9a1d5c-cd3d-459f-a3b9-225ce44f851b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=507,
         depth=1,
         type='variable',
         name='query_group_by',
         text='query_group_by = list(map(format.format_expression, '
              'query._group_by))')

Fragment(uuid='7dc85d78-75b4-47bf-b73d-35605af40f3d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=508,
         depth=1,
         type='variable',
         name='query_order_by_map',
         text='query_order_by_map = format.format_query_order_by_map(query)')

Fragment(uuid='5cb430d2-e229-44cd-849e-45100f89f9e0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=509,
         depth=1,
         type='variable',
         name='query_where_condition_map,',
         text='query_where_condition_map, query_having_condition_map = '
              'format.format_query_condition_map(query)')

Fragment(uuid='b88d6902-c64a-4109-be60-3c4d270a2984',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=510,
         depth=1,
         type='variable',
         name='condition_name_list',
         text='condition_name_list = [column.name for column in '
              'query._column_list + query._condition_list]')

Fragment(uuid='de92061d-f439-4264-9644-411b47491996',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=511,
         depth=1,
         type='variable',
         name='_TABLE_LIST',
         text='_TABLE_LIST = [\n'
              '        %for table_info in query_table_list:\n'
              '        {{repr(table_info)}},\n'
              '        %end\n'
              '        ]')

Fragment(uuid='ad632772-092c-4e48-a4a1-4da8d5f1515e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=513,
         depth=0,
         type='module',
         name='',
         text=',\n'
              '        %end\n'
              '        ]\n'
              '        \n'
              '    {{query_constant_prefix}}_FIELD_LIST = [\n'
              '        %for field_info in query_field_list:\n'
              '        {{repr(field_info)}},\n'
              '        %end\n'
              '        ]\n'
              '        \n'
              '    {{query_constant_prefix}}_GROUP_BY = [\n'
              '        %for field_info in query_group_by:\n'
              '        {{repr(field_info)}},\n'
              '        %end\n'
              '        ]\n'
              '        \n'
              '    {{query_constant_prefix}}_ORDER_BY_MAP = {\n'
              '        %for name, sql_expression in '
              'sorted(query_order_by_map.items()):\n'
              '        {{repr(name)}}: {{repr(sql_expression)}},\n'
              '        %end\n'
              '        }\n'
              '        \n'
              '    {{query_constant_prefix}}_WHERE_CONDITION_MAP = {\n'
              '        %for argument_name, condition_info in')

Fragment(uuid='51c461e2-f748-4fbf-b6ac-83f3d03e5b54',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=523,
         depth=1,
         type='variable',
         name='_GROUP_BY',
         text='_GROUP_BY = [\n'
              '        %for field_info in query_group_by:\n'
              '        {{repr(field_info)}},\n'
              '        %end\n'
              '        ]')

Fragment(uuid='4204dddb-2735-4538-997a-682fef0e2c35',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=535,
         depth=1,
         type='variable',
         name='_WHERE_CONDITION_MAP',
         text='_WHERE_CONDITION_MAP = {\n'
              '        %for argument_name, condition_info in '
              'sorted(query_where_condition_map.items()):\n'
              '        %suffix, formatting_function_name, value_expression = '
              'condition_info\n'
              '        {{repr(argument_name)}}: ({{repr(suffix)}}, '
              '_format.{{formatting_function_name}}, '
              '{{repr(value_expression)}}),\n'
              '        %end\n'
              '        }')

Fragment(uuid='daa36515-9d3e-4e43-b4fd-700c79249ce4',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=536,
         depth=0,
         type='module',
         name='',
         text=' sorted(query_where_condition_map.items()):\n'
              '        %suffix, formatting_function_name, value_expression = '
              'condition_info\n'
              '        {{repr(argument_name)}}: ({{repr(suffix)}}, '
              '_format.{{formatting_function_name}}, '
              '{{repr(value_expression)}}),\n'
              '        %end\n'
              '        }\n'
              '        \n'
              '    {{query_constant_prefix}}_HAVING_CONDITION_MAP = {\n'
              '        %for argument_name, condition_info in '
              'sorted(query_having_condition_map.items()):\n'
              '        %suffix, formatting_function_name, value_expression = '
              'condition_info\n'
              '        {{repr(argument_name)}}: ({{repr(suffix)}}, '
              '_format.{{formatting_function_name}}, '
              '{{repr(value_expression)}}),\n'
              '        %end\n'
              '        }\n')

Fragment(uuid='1cf53710-8548-488b-8859-299576840ef6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=544,
         depth=3,
         type='variable',
         name='suffix,',
         text='suffix, formatting_function_name, value_expression = '
              'condition_info')

Fragment(uuid='9e8bcb7e-1209-4b7f-983c-5357953d3d3f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=548,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def query_{{query_name}}_list(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by={{repr(query._order_by)}},\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'returns the resulting records\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '        %end\n'
              '  ')

Fragment(uuid='8bd9cf49-0a15-4bca-8c50-7a87d848086e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=549,
         depth=1,
         type='function',
         name='_list',
         text='def query_{{query_name}}_list(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by={{repr(query._order_by)}},\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'returns the resulting records\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '        %end\n'
              '      ')

Fragment(uuid='73edeb5c-c9ed-43b1-8f30-5127ac07cdbe',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=556,
         depth=3,
         type='variable',
         name='order_by',
         text='order_by={{repr(query._order_by)}},')

Fragment(uuid='c6022e60-7bb6-4dfb-9ad4-d28524a259a8',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=557,
         depth=3,
         type='variable',
         name='limit',
         text='limit=None,')

Fragment(uuid='0ef96767-c30b-4ac4-8517-ff728f9c9648',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=558,
         depth=3,
         type='variable',
         name='offset',
         text='offset=None,')

Fragment(uuid='e027107b-040b-48bf-a305-cdc82297d49f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=559,
         depth=3,
         type='variable',
         name='where',
         text='where=None,')

Fragment(uuid='f03c9eb6-da6a-4d48-a69b-b7a6dc468d65',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=560,
         depth=3,
         type='variable',
         name='having',
         text='having=None,')

Fragment(uuid='9471aa10-1c5a-4c49-a0fe-3c98e72caeea',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=561,
         depth=3,
         type='variable',
         name='runtime_conditions):',
         text='runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'returns the resulting records\n'
              '        """')

Fragment(uuid='c61530a9-dd88-403f-8b83-1d651e5295f2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=566,
         depth=3,
         type='variable',
         name='runtime_conditions[{{repr(name)}}]',
         text='runtime_conditions[{{repr(name)}}] = {{name}}')

Fragment(uuid='942d73d9-8545-41e9-9612-71315fabbc33',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=570,
         depth=0,
         type='module',
         name='',
         text='      sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{query_constant_prefix}}_FIELD_LIST,\n'
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            self.{{query_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{query_name}}    \n')

Fragment(uuid='621961f2-1370-4705-af3c-f3e762534bb3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=570,
         depth=1,
         type='function',
         name='_list',
         text='  sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{query_constant_prefix}}_FIELD_LIST,\n'
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            self.{{query_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{query_name}}    \n')

Fragment(uuid='d5c685f3-c67c-4fc9-a494-ef8f13353b15',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=570,
         depth=3,
         type='variable',
         name='sql,',
         text='sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{query_constant_prefix}}_FIELD_LIST,\n'
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            self.{{query_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)')

Fragment(uuid='ecb8f409-1b83-4b6a-adaa-4a207b39b53e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=584,
         depth=3,
         type='variable',
         name='record_class',
         text='record_class = self.new_{{query_name}}    \n'
              '        with self.cursor() as cursor:\n'
              '            %if')

Fragment(uuid='69090b28-a424-46ff-9764-2a4d1b5d0c71',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=585,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            record_list = [\n'
              '                record_class(*row) \n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return record_list\n')

Fragment(uuid='ac5ce999-58eb-4d7e-af1e-c66b2ff46500',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=585,
         depth=1,
         type='function',
         name='_list',
         text='        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            record_list = [\n'
              '                record_class(*row) \n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return record_list')

Fragment(uuid='725eea78-32f3-4d8a-9c1c-d48e8458d76a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=586,
         depth=3,
         type='variable',
         name='constants.LOG_SQL_ANALYSIS:',
         text='constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)')

Fragment(uuid='b4164598-6787-4b3d-981d-ad25ed70c7a2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=590,
         depth=5,
         type='variable',
         name='start_time',
         text='start_time = time.time()')

Fragment(uuid='b8a68f71-f4b0-4097-96c6-830f606e2301',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=592,
         depth=5,
         type='variable',
         name='record_list',
         text='record_list = [\n'
              '                record_class(*row) \n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]')

Fragment(uuid='cd0757cc-ad1b-4367-b6ca-9ae5ae136c4c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=596,
         depth=5,
         type='variable',
         name='end_time',
         text='end_time = time.time()')

Fragment(uuid='8edfdfcf-e31b-4025-9516-92e463c6574d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=601,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def query_{{query_name}}_iter(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by={{repr(query._order_by)}},\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'iterates on the resulting records\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '        %end\n'
              '        sql, par')

Fragment(uuid='0f23acdb-8be2-4eef-b0a2-a7e149c68e12',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=602,
         depth=1,
         type='function',
         name='_iter',
         text='def query_{{query_name}}_iter(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by={{repr(query._order_by)}},\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'iterates on the resulting records\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '        %end\n'
              '        sql, parameter')

Fragment(uuid='946cd8cd-9518-4269-b199-4c60aa754575',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=609,
         depth=3,
         type='variable',
         name='order_by',
         text='order_by={{repr(query._order_by)}},')

Fragment(uuid='08a1222b-43d3-4096-916e-772d3faf297e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=610,
         depth=3,
         type='variable',
         name='limit',
         text='limit=None,')

Fragment(uuid='7d16bb54-0284-4a6e-b686-51f303e10461',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=611,
         depth=3,
         type='variable',
         name='offset',
         text='offset=None,')

Fragment(uuid='ceb9c702-0703-4784-8682-c5ab95a54550',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=612,
         depth=3,
         type='variable',
         name='where',
         text='where=None,')

Fragment(uuid='75f5fc19-53ce-469a-a44f-872aa420a287',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=613,
         depth=3,
         type='variable',
         name='having',
         text='having=None,')

Fragment(uuid='36b22eff-62b9-47f2-9377-523f2a2c9250',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=614,
         depth=3,
         type='variable',
         name='runtime_conditions):',
         text='runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'iterates on the resulting records\n'
              '        """')

Fragment(uuid='bddb7b54-ea9d-4c26-be56-4229e4836d54',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=619,
         depth=3,
         type='variable',
         name='runtime_conditions[{{repr(name)}}]',
         text='runtime_conditions[{{repr(name)}}] = {{name}}')

Fragment(uuid='1bade46e-238b-42fe-81a6-fad4bea48ab7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=623,
         depth=0,
         type='module',
         name='',
         text='ameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{query_constant_prefix}}_FIELD_LIST,\n'
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            self.{{query_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{query_name}}\n'
              '        %if constants.LOG_SQL_ANALYSIS:\n')

Fragment(uuid='91c33359-7560-41b6-a0ec-5a6be254401a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=623,
         depth=1,
         type='function',
         name='_iter',
         text='_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{query_constant_prefix}}_FIELD_LIST,\n'
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            self.{{query_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{query_name}}\n'
              '        %if constants.LOG_SQL_ANALYSIS:\n')

Fragment(uuid='79df704a-ee32-4552-b0d1-b659396cf705',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=623,
         depth=3,
         type='variable',
         name='sql,',
         text='sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{query_constant_prefix}}_FIELD_LIST,\n'
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            self.{{query_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)')

Fragment(uuid='8b83dcf8-8827-411b-b8e3-a8eeffbb413e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=637,
         depth=3,
         type='variable',
         name='record_class',
         text='record_class = self.new_{{query_name}}\n'
              '        %if constants.LOG_SQL_ANALYSIS:\n'
              '        with self.cursor() as cursor:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)')

Fragment(uuid='b579574b-6d6e-4d5b-9caf-01f5063e1c10',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=639,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor() as cursor:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '        %else:\n')

Fragment(uuid='055cf226-0b61-4ca5-a938-debad23e4d71',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=639,
         depth=1,
         type='function',
         name='_iter',
         text='        with self.cursor() as cursor:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '        %else:\n')

Fragment(uuid='6df413aa-2a8c-4ee2-b105-d07ce82da917',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=642,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor(named=True) as cursor:\n'
              '        %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            row_list = list(self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple))\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            for row in row_list:\n'
              '                yield record_class(*row)\n'
              '            %else:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)\n'
              '            %end\n')

Fragment(uuid='94baf32e-89ea-4f44-a594-7440b0e8ff1a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=642,
         depth=1,
         type='function',
         name='_iter',
         text='        with self.cursor(named=True) as cursor:\n'
              '        %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            row_list = list(self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple))\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            for row in row_list:\n'
              '                yield record_class(*row)\n'
              '            %else:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)\n'
              '            %end')

Fragment(uuid='a5a5fa0d-11fe-4f92-a81e-e64394fc7e3c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=645,
         depth=5,
         type='variable',
         name='start_time',
         text='start_time = time.time()')

Fragment(uuid='7ee2be5c-13c7-4889-a4ec-ec22a4d18123',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=646,
         depth=5,
         type='variable',
         name='row_list',
         text='row_list = list(self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple))')

Fragment(uuid='121616fd-55d3-42cd-8227-97929ffb6322',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=647,
         depth=5,
         type='variable',
         name='end_time',
         text='end_time = time.time()')

Fragment(uuid='05fa1ddf-6960-4c64-9585-0b8043725eaf',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=655,
         depth=0,
         type='module',
         name='',
         text='            \n'
              '    def query_{{query_name}}_count(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=None,\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'counts the resulting records\n'
              '\n'
              '        The record ordering is ignored, but can be passed to '
              'provide\n'
              '        compatible method signature with the actual query '
              'methods.\n'
              '        \n'
              '        """\n'
              '        %if constants.DE')

Fragment(uuid='922ffd7b-0251-4402-afd1-e9f53cf1147f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=656,
         depth=1,
         type='function',
         name='_count',
         text='def query_{{query_name}}_count(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=None,\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'counts the resulting records\n'
              '\n'
              '        The record ordering is ignored, but can be passed to '
              'provide\n'
              '        compatible method signature with the actual query '
              'methods.\n'
              '        \n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '    ')

Fragment(uuid='9579f12f-fb7b-4687-9cdf-dc237bd198d3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=663,
         depth=3,
         type='variable',
         name='order_by',
         text='order_by=None,')

Fragment(uuid='5d1f056b-b6be-47dc-b021-c0d330f9ebcf',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=664,
         depth=3,
         type='variable',
         name='limit',
         text='limit=None,')

Fragment(uuid='cb0c0d53-96e6-4c2c-8585-58db24c43ff8',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=665,
         depth=3,
         type='variable',
         name='offset',
         text='offset=None,')

Fragment(uuid='cf80fe0f-ad5e-445a-8840-7b8306b5fce0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=666,
         depth=3,
         type='variable',
         name='where',
         text='where=None,')

Fragment(uuid='6ded0663-c8b9-4518-94ed-8d1c079c88bb',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=667,
         depth=3,
         type='variable',
         name='having',
         text='having=None,')

Fragment(uuid='3dedf770-101c-4e8a-93f5-0e7bbccbecf8',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=668,
         depth=3,
         type='variable',
         name='runtime_conditions):',
         text='runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'counts the resulting records\n'
              '\n'
              '        The record ordering is ignored, but can be passed to '
              'provide\n'
              '        compatible method signature with the actual query '
              'methods.\n'
              '        \n'
              '        """')

Fragment(uuid='ccc2b4eb-e9fa-43e1-8d2f-f4fb7ed43e3a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=675,
         depth=0,
         type='module',
         name='',
         text='BUG:\n'
              '        %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '\n'
              '        %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              "            ('COUNT(*)', ),\n"
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            {},\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            (),\n'
              '            limit,\n'
              '            offset)\n')

Fragment(uuid='2ab73a2b-7895-4d41-9822-c3034df4fa04',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=676,
         depth=1,
         type='function',
         name='_count',
         text='    %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '\n'
              '        %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              "            ('COUNT(*)', ),\n"
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            {},\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            (),\n'
              '            limit,\n'
              '            offset)\n')

Fragment(uuid='58398664-8358-44bb-8a90-ddd781f5fab8',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=677,
         depth=3,
         type='variable',
         name='runtime_conditions[{{repr(name)}}]',
         text='runtime_conditions[{{repr(name)}}] = {{name}}')

Fragment(uuid='6828ea78-e97c-48ff-acda-b1e1af4492e4',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=681,
         depth=3,
         type='variable',
         name='sql,',
         text='sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              "            ('COUNT(*)', ),\n"
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            {},\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            (),\n'
              '            limit,\n'
              '            offset)')

Fragment(uuid='b950fb35-d239-40b4-9eb4-c6788661f0a0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=694,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '            %if constants.PROFIL')

Fragment(uuid='af2eef69-60d8-4ed3-a2fd-1499794c3d2e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=694,
         depth=1,
         type='function',
         name='_count',
         text='        \n'
              '        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return row[0]')

Fragment(uuid='fa33156c-6847-43f2-9826-560014c692e0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=700,
         depth=5,
         type='variable',
         name='start_time',
         text='start_time = time.time()')

Fragment(uuid='690b40d8-d894-468d-ba51-234bac19727a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=702,
         depth=5,
         type='variable',
         name='row',
         text='row = self.execute_and_fetch_one(cursor, sql, parameter_tuple)')

Fragment(uuid='9b94cecf-399b-4fbd-ad10-aa2e5aa7f716',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=703,
         depth=0,
         type='module',
         name='',
         text='E_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return row[0]\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    %if options.insert:\n'
              '    ### Inserting into the database\n'
              '\n'
              '    %for table in database._table_list:\n'
              '    %if table._writable:\n'
              '    %if table._primary_key:\n')

Fragment(uuid='01fe6085-0e62-4fb4-9e89-c31e0cec07f7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=704,
         depth=5,
         type='variable',
         name='end_time',
         text='end_time = time.time()')

Fragment(uuid='f7b1411b-9e3a-49ca-8b65-6152e8a79684',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=718,
         depth=0,
         type='module',
         name='',
         text='    def add_{{table._name}}(self, record, generate_id=True):\n'
              '        """ Inserts single {{table.__class__.__name__}} record '
              'into the {{table._name}} database table\n'
              '        """\n'
              '        self.add_record(self.new_{{table._name}}, record, '
              'generate_id, {{repr(table._primary_key.serial)}})\n')

Fragment(uuid='6197018d-3e7d-4535-8440-2aed0fb220bb',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=718,
         depth=1,
         type='function',
         name='_name',
         text='def add_{{table._name}}(self, record, generate_id=True):\n'
              '        """ Inserts single {{table.__class__.__name__}} record '
              'into the {{table._name}} database table\n'
              '        """\n'
              '        self.add_record(self.new_{{table._name}}, record, '
              'generate_id, {{repr(table._primary_key.serial)}})')

Fragment(uuid='79699e2e-91e9-496c-b5c7-5c592736e36a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=722,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def add_{{table._name}}_list(self, record_list, '
              'generate_id=True):\n'
              '        """ Inserts multiple {{table.__class__.__name__}} '
              'records into the {{table._name}} database table\n'
              '        """\n'
              '        self.add_record_list(self.new_{{table._name}}, '
              'record_list, generate_id, {{repr(table._primary_key.serial)}})\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %if options.update:\n'
              '    ### Updating into the database\n'
              '\n'
              '    %for table in database._table_list:\n'
              '    %if table._writable:\n'
              '    %if table._primary_key:\n')

Fragment(uuid='52e3841c-9566-450a-84cc-478fb4e3bca6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=723,
         depth=1,
         type='function',
         name='_list',
         text='def add_{{table._name}}_list(self, record_list, '
              'generate_id=True):\n'
              '        """ Inserts multiple {{table.__class__.__name__}} '
              'records into the {{table._name}} database table\n'
              '        """\n'
              '        self.add_record_list(self.new_{{table._name}}, '
              'record_list, generate_id, {{repr(table._primary_key.serial)}})')

Fragment(uuid='dc3dcec7-c713-4573-b2b6-e5bac6367614',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=738,
         depth=0,
         type='module',
         name='',
         text='    def update_{{table._name}}(self, record):\n'
              '        """ Updates single {{table.__class__.__name__}} record '
              'into the {{table._name}} database table\n'
              '        """\n'
              '        self.update_record(self.new_{{table._name}}, record)\n')

Fragment(uuid='ecbd15a3-c8d1-4c7b-96ed-c6a40a0cb21a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=738,
         depth=1,
         type='function',
         name='update_',
         text='def update_{{table._name}}(self, record):\n'
              '        """ Updates single {{table.__class__.__name__}} record '
              'into the {{table._name}} database table\n'
              '        """\n'
              '        self.update_record(self.new_{{table._name}}, record)')

Fragment(uuid='5f9d5657-7e3d-4563-88dd-3d9801e02ce8',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=742,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def update_{{table._name}}_list(self, record_list):\n'
              '        """ Updates multiple {{table.__class__.__name__}} '
              'records into the {{table._name}} database table\n'
              '        """\n'
              '        self.update_record_list(self.new_{{table._name}}, '
              'record_list)\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %if options.delete:\n'
              '    ### Deleting from the database\n'
              '\n'
              '    %for table in database._table_list:\n'
              '    %if table._writable:\n'
              '    %if table._primary_key:\n')

Fragment(uuid='89f1aa42-07da-48fc-a674-6d6a8f1c1789',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=743,
         depth=1,
         type='function',
         name='_list',
         text='def update_{{table._name}}_list(self, record_list):\n'
              '        """ Updates multiple {{table.__class__.__name__}} '
              'records into the {{table._name}} database table\n'
              '        """\n'
              '        self.update_record_list(self.new_{{table._name}}, '
              'record_list)')

Fragment(uuid='f27caf63-a47c-4ee4-a300-ce9f4d1da54c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=758,
         depth=0,
         type='module',
         name='',
         text='    def delete_{{table._name}}(self, record_or_id):\n'
              '        """ Deletes single {{table.__class__.__name__}} record '
              'from the {{table._name}} database table\n'
              '        """\n'
              '        self.delete_record(self.new_{{table._name}}, '
              'record_or_id)\n')

Fragment(uuid='c7b0b081-9e88-44a9-883a-1114e257a4c0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=758,
         depth=1,
         type='function',
         name='delete_',
         text='def delete_{{table._name}}(self, record_or_id):\n'
              '        """ Deletes single {{table.__class__.__name__}} record '
              'from the {{table._name}} database table\n'
              '        """\n'
              '        self.delete_record(self.new_{{table._name}}, '
              'record_or_id)')

Fragment(uuid='c7922935-3716-4cee-8ab3-769f1ad5c817',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=762,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def delete_{{table._name}}_list(self, record_or_id_list):\n'
              '        """ Deletes multiple {{table.__class__.__name__}} '
              'records from the {{table._name}} database table\n'
              '        """\n'
              '        self.delete_record_list(self.new_{{table._name}}, '
              'record_or_id_list)\n')

Fragment(uuid='6f01e921-34bc-4845-804e-190ed20191e6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=763,
         depth=1,
         type='function',
         name='_list',
         text='def delete_{{table._name}}_list(self, record_or_id_list):\n'
              '        """ Deletes multiple {{table.__class__.__name__}} '
              'records from the {{table._name}} database table\n'
              '        """\n'
              '        self.delete_record_list(self.new_{{table._name}}, '
              'record_or_id_list)')

Fragment(uuid='71215612-4230-4081-a52d-7c4b25d32cca',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=767,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def truncate_{{table._name}}(self):\n'
              '        """ Truncates table {{table._name}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_truncate_table(table, database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, '
              'statement_list)\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    %end\n')

Fragment(uuid='158a43ad-7c4d-4700-996e-e9a5a0765226',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=768,
         depth=1,
         type='function',
         name='truncate_',
         text='def truncate_{{table._name}}(self):\n'
              '        """ Truncates table {{table._name}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_truncate_table(table, database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list)')

Fragment(uuid='85a20944-bc15-4c4b-b769-72ebaed08a78',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=771,
         depth=3,
         type='variable',
         name='statement_list',
         text='statement_list = {{repr(format.format_truncate_table(table, '
              'database))}}')

Fragment(uuid='79956dd7-f76d-4293-9fc0-e49c6fb008a6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=778,
         depth=0,
         type='module',
         name='',
         text='    def truncate_all_tables(self):\n'
              '        """ Truncates all the tables in the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable and '
              'table._primary_key)}}\n'
              '        \n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_truncate_table_list(database._table_list, '
              'database))}}\n'
              '        \n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, '
              'statement_list)\n'
              '            \n'
              '    %end\n'
              '    %if options.create or options.drop:\n'
              '    ### Creating and dropping stored procedures\n'
              '    \n'
              '    %for procedure in database._procedure_list:\n'
              '    %if options.create:\n')

Fragment(uuid='a327ce60-4b5b-4393-bb5c-7fe46125e182',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=778,
         depth=1,
         type='function',
         name='truncate_all_tables',
         text='def truncate_all_tables(self):\n'
              '        """ Truncates all the tables in the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable and '
              'table._primary_key)}}\n'
              '        \n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_truncate_table_list(database._table_list, '
              'database))}}\n'
              '        \n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list)')

Fragment(uuid='386476db-77a4-49d0-8ac8-c021e33c333c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=784,
         depth=3,
         type='variable',
         name='statement_list',
         text='statement_list = '
              '{{repr(format.format_truncate_table_list(database._table_list, '
              'database))}}')

Fragment(uuid='a505617e-4189-40d5-9d14-1d5e35a9e248',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=795,
         depth=0,
         type='module',
         name='',
         text='    def create_procedure_{{procedure.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Creates stored procedure '
              '{{table.__class__.__name__}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_procedure(procedure))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '            \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='6c5b41e3-7634-4576-b6c3-981390053490',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=795,
         depth=1,
         type='function',
         name='create_procedure_',
         text='def create_procedure_{{procedure.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Creates stored procedure '
              '{{table.__class__.__name__}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_procedure(procedure))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='552fe71d-38f1-4167-8f4e-b9c71c79b055',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=798,
         depth=3,
         type='variable',
         name='statement_list',
         text='statement_list = '
              '{{repr(format.format_create_procedure(procedure))}}')

Fragment(uuid='03f8d6a8-0d6f-48f5-8d38-59f97e09e5dd',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=804,
         depth=0,
         type='module',
         name='',
         text='    def drop_procedure_{{procedure.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Drops stored procedure {{table.__class__.__name__}} '
              'from the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_drop_procedure(procedure))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    ### Creating and dropping all the stored procedures at '
              'once\n'
              '    \n'
              '    %if options.create:\n')

Fragment(uuid='0ec2b42c-b156-4de1-a689-b492202d9110',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=804,
         depth=1,
         type='function',
         name='drop_procedure_',
         text='def drop_procedure_{{procedure.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Drops stored procedure {{table.__class__.__name__}} '
              'from the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_drop_procedure(procedure))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='e8321300-84c7-4de5-a974-c5d1146e93d6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=807,
         depth=3,
         type='variable',
         name='statement_list',
         text='statement_list = '
              '{{repr(format.format_drop_procedure(procedure))}}')

Fragment(uuid='ec9790bb-9bbb-4c21-8820-cf9820346735',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=816,
         depth=0,
         type='module',
         name='',
         text='    def create_all_procedures(self, ignore_errors=False):\n'
              '        """ Creates all the stored procedures into the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(procedure.name for procedure in "
              'database._procedure_list)}}\n'
              '        \n'
              '        """\n'
              '        %for procedure in database._procedure_list:\n'
              '        '
              'self.create_procedure_{{procedure.name}}(ignore_errors)\n'
              '        %end\n'
              '        \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='7605160f-80c7-4c0a-b99a-a72888bc2cee',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=816,
         depth=1,
         type='function',
         name='create_all_procedures',
         text='def create_all_procedures(self, ignore_errors=False):\n'
              '        """ Creates all the stored procedures into the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(procedure.name for procedure in "
              'database._procedure_list)}}\n'
              '        \n'
              '        """\n'
              '        %for procedure in database._procedure_list:\n'
              '        '
              'self.create_procedure_{{procedure.name}}(ignore_errors)\n'
              '        %end')

Fragment(uuid='0c92f2f8-2bfd-439a-a6f4-eeec3d5c3bde',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=828,
         depth=0,
         type='module',
         name='',
         text='    def drop_all_procedures(self, ignore_errors=False):\n'
              '        """ Drops all the stored procedures from the database\n'
              '        \n'
              "        {{'\\n        '.join(procedure.name for procedure in "
              'database._procedure_list)}}\n'
              '        \n'
              '        """\n'
              '        %for procedure in reversed(database._procedure_list):\n'
              '        self.drop_procedure_{{procedure.name}}(ignore_errors)\n'
              '        %end\n'
              '    \n'
              '    %end\n'
              '    ### Creating and dropping triggers\n'
              '    \n'
              '    %for table in database._table_list:\n'
              '    %if table._creatable:\n'
              '    %for trigger in table._trigger_list:\n'
              '    %for procedure in database._procedure_list:\n'
              '    %if options.create:\n')

Fragment(uuid='02308183-789d-41dc-b480-1e712d610a7d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=828,
         depth=1,
         type='function',
         name='drop_all_procedures',
         text='def drop_all_procedures(self, ignore_errors=False):\n'
              '        """ Drops all the stored procedures from the database\n'
              '        \n'
              "        {{'\\n        '.join(procedure.name for procedure in "
              'database._procedure_list)}}\n'
              '        \n'
              '        """\n'
              '        %for procedure in reversed(database._procedure_list):\n'
              '        self.drop_procedure_{{procedure.name}}(ignore_errors)\n'
              '        %end')

Fragment(uuid='ee8476fe-d5af-4b08-9856-72107a726f13',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=846,
         depth=0,
         type='module',
         name='',
         text='    def create_trigger_{{table._name}}_{{trigger.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Creates trigger '
              '{{table.__class__.__name__}}.{{trigger.name}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_trigger(trigger))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '            \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='724e81f6-8a40-4dfa-b20c-6944ed720f54',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=846,
         depth=1,
         type='function',
         name='create_trigger_',
         text='def create_trigger_{{table._name}}_{{trigger.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Creates trigger '
              '{{table.__class__.__name__}}.{{trigger.name}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_trigger(trigger))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='ce7a9857-c405-4b46-a928-7b9d2a047e4f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=849,
         depth=3,
         type='variable',
         name='statement_list',
         text='statement_list = {{repr(format.format_create_trigger(trigger))}}')

Fragment(uuid='8e75c659-6cb9-40c8-988f-2e29ce9796b7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=855,
         depth=0,
         type='module',
         name='',
         text='    def drop_trigger_{{table._name}}_{{trigger.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Drops trigger '
              '{{table.__class__.__name__}}.{{trigger.name}} from the '
              'database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_drop_trigger(trigger))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    ### Creating and dropping the triggers of all the tables at '
              'once\n'
              '    \n'
              '    %if options.create:\n')

Fragment(uuid='1c99dd64-1c3b-4adb-93dc-136c29fb02f1',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=855,
         depth=1,
         type='function',
         name='drop_trigger_',
         text='def drop_trigger_{{table._name}}_{{trigger.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Drops trigger '
              '{{table.__class__.__name__}}.{{trigger.name}} from the '
              'database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_drop_trigger(trigger))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='8a58be82-8773-437f-a5bb-446fb9034047',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=858,
         depth=3,
         type='variable',
         name='statement_list',
         text='statement_list = {{repr(format.format_drop_trigger(trigger))}}')

Fragment(uuid='b5c97578-8bce-4838-9935-cff796703355',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=870,
         depth=0,
         type='module',
         name='',
         text='    def create_all_triggers(self, ignore_errors=False):\n'
              '        """ Creates the triggers for all the tables in the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'database._table_list if table._creatable and '
              'table._trigger_list)}}\n'
              '        \n'
              '        """\n'
              '        %for table in database._table_list:\n'
              '        %if table._creatable:\n'
              '        %for trigger in table._trigger_list:\n'
              '        '
              'self.create_trigger_{{table._name}}_{{trigger.name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        %end\n'
              '        \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='a7a5a743-4c8f-4ed1-b2f9-ea5a2409b7a5',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=870,
         depth=1,
         type='function',
         name='create_all_triggers',
         text='def create_all_triggers(self, ignore_errors=False):\n'
              '        """ Creates the triggers for all the tables in the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'database._table_list if table._creatable and '
              'table._trigger_list)}}\n'
              '        \n'
              '        """\n'
              '        %for table in database._table_list:\n'
              '        %if table._creatable:\n'
              '        %for trigger in table._trigger_list:\n'
              '        '
              'self.create_trigger_{{table._name}}_{{trigger.name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        %end')

Fragment(uuid='86c79433-52ae-42ad-93a8-6b2288bca5e5',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=886,
         depth=0,
         type='module',
         name='',
         text='    def drop_all_triggers(self, ignore_errors=False):\n'
              '        """ Drops the triggers for all the tables from the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable and '
              'table._trigger_list)}}\n'
              '        \n'
              '        """\n'
              '        %for table in reversed(database._table_list)')

Fragment(uuid='ba5fcc52-4d44-4551-900e-af1f01e6f3e8',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=886,
         depth=1,
         type='function',
         name='drop_all_triggers',
         text='def drop_all_triggers(self, ignore_errors=False):\n'
              '        """ Drops the triggers for all the tables from the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable and '
              'table._trigger_list)}}\n'
              '        \n'
              '        """\n'
              '        %for table in reversed(database._table_list):\n'
              '        %if table._creatable:\n'
              '        %for trigger in table._trigger_list:\n'
              '        '
              'self.drop_trigger_{{table._name}}_{{trigger.name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        %end')

Fragment(uuid='32a93a46-1ef7-45b8-b824-07739d3a6b2b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=892,
         depth=0,
         type='module',
         name='',
         text=':\n'
              '        %if table._creatable:\n'
              '        %for trigger in table._trigger_list:\n'
              '        '
              'self.drop_trigger_{{table._name}}_{{trigger.name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        %end\n'
              '        \n'
              '    %end\n'
              '    ### Creating and dropping tables\n'
              '\n'
              '    %for table in database._table_list:\n'
              '    %if table._creatable:\n'
              '    %if options.create:\n')

Fragment(uuid='80e63190-a8ca-49aa-b6c5-be211c4df948',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=906,
         depth=0,
         type='module',
         name='',
         text='    def create_table_{{table._name}}(self, '
              'ignore_errors=False):\n'
              '        """ Creates table {{table.__class__.__name__}} in the '
              'database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_table(table, database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '        \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='83d2f964-74c1-4cd8-8d20-6192409a69b7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=906,
         depth=1,
         type='function',
         name='create_table_',
         text='def create_table_{{table._name}}(self, ignore_errors=False):\n'
              '        """ Creates table {{table.__class__.__name__}} in the '
              'database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_table(table, database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='84a405fb-7d1a-4cf0-8567-8a097f3cdd24',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=909,
         depth=3,
         type='variable',
         name='statement_list',
         text='statement_list = {{repr(format.format_create_table(table, '
              'database))}}')

Fragment(uuid='8fec07ab-9c4e-415f-a429-02a55e2a5b33',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=915,
         depth=0,
         type='module',
         name='',
         text='    def drop_table_{{table._name}}(self, ignore_errors=False):\n'
              '        """ Drops table {{table.__class__.__name__}} from the '
              'database\n'
              '        """\n'
              '        statement_list = {{repr(format.format_drop_table(table, '
              'database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '            \n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    ### Creating, dropping and truncating all the tables at '
              'once\n'
              '    \n'
              '    %if options.create:\n')

Fragment(uuid='db88255f-bf1b-4543-9828-d88e0023f80c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=915,
         depth=1,
         type='function',
         name='drop_table_',
         text='def drop_table_{{table._name}}(self, ignore_errors=False):\n'
              '        """ Drops table {{table.__class__.__name__}} from the '
              'database\n'
              '        """\n'
              '        statement_list = {{repr(format.format_drop_table(table, '
              'database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='42844a17-0dbb-4939-a335-87be2f23ab0c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=918,
         depth=3,
         type='variable',
         name='statement_list',
         text='statement_list = {{repr(format.format_drop_table(table, '
              'database))}}')

Fragment(uuid='e6815b2a-1cc1-475f-8023-a7fa2d02c2f4',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=928,
         depth=0,
         type='module',
         name='',
         text='    def create_all_tables(self, ignore_errors=False):\n'
              '        """ Creates all the tables and views into the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'database._table_list if table._creatable)}}\n'
              '        \n'
              '        """\n'
              '        %for table in database._table_list:\n'
              '        %if table._creatable:\n'
              '        self.create_table_{{table._name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='f07ac8cc-ac8a-4946-b442-d64bd7da933e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=928,
         depth=1,
         type='function',
         name='create_all_tables',
         text='def create_all_tables(self, ignore_errors=False):\n'
              '        """ Creates all the tables and views into the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'database._table_list if table._creatable)}}\n'
              '        \n'
              '        """\n'
              '        %for table in database._table_list:\n'
              '        %if table._creatable:\n'
              '        self.create_table_{{table._name}}(ignore_errors)\n'
              '        %end\n'
              '        %end')

Fragment(uuid='d68bfac4-edad-49fd-aeb3-3a596053a426',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=942,
         depth=0,
         type='module',
         name='',
         text='    def drop_all_tables(self, ignore_errors=False):\n'
              '        """ Drops all the tables and views from the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable)}}\n'
              '        \n'
              '        """\n'
              '        %for table in reversed(database._table_list):\n'
              '        %if table._creatable:\n'
              '        self.drop_table_{{table._name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        \n'
              '    %end\n'
              '    %if options.create:\n'
              '    ### Creating languages\n')

Fragment(uuid='254e5974-9aae-4e5e-b4e2-b721adb9c9ff',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=942,
         depth=1,
         type='function',
         name='drop_all_tables',
         text='def drop_all_tables(self, ignore_errors=False):\n'
              '        """ Drops all the tables and views from the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable)}}\n'
              '        \n'
              '        """\n'
              '        %for table in reversed(database._table_list):\n'
              '        %if table._creatable:\n'
              '        self.drop_table_{{table._name}}(ignore_errors)\n'
              '        %end\n'
              '        %end')

Fragment(uuid='7963d5da-029b-48ce-bcab-0f0b63d3d67b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=957,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def create_all_languages(self, ignore_errors=True):\n'
              '        """ Creates all the procedural languages used in the '
              'procedures defined\n'
              '        """\n'
              "        %language_set = set(['plpgsql']) | "
              'set(procedure.language for procedure in '
              'database._procedure_list)\n'
              '        %for language in sorted(language_set):\n'
              '        self.create_language({{repr(language)}}, '
              'ignore_errors)\n'
              '        %end\n'
              '\n'
              '    %end\n'
              '    ### Creating and dropping the database structure\n'
              '    \n'
              '    %if options.create:\n')

Fragment(uuid='5c7dc9a7-7dd5-4535-ad6f-bf8d1f8622eb',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=958,
         depth=1,
         type='function',
         name='create_all_languages',
         text='def create_all_languages(self, ignore_errors=True):\n'
              '        """ Creates all the procedural languages used in the '
              'procedures defined\n'
              '        """\n'
              "        %language_set = set(['plpgsql']) | "
              'set(procedure.language for procedure in '
              'database._procedure_list)\n'
              '        %for language in sorted(language_set):\n'
              '        self.create_language({{repr(language)}}, '
              'ignore_errors)\n'
              '        %end')

Fragment(uuid='959daa1c-8cf4-439a-8aa5-1d55e2858775',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=961,
         depth=3,
         type='variable',
         name='language_set',
         text="language_set = set(['plpgsql']) | set(procedure.language for "
              'procedure in database._procedure_list)')

Fragment(uuid='5abcf227-08f0-416f-86e4-429b2d55952a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=970,
         depth=0,
         type='module',
         name='',
         text='    def create_structure(self, ignore_errors=False):\n'
              '        """ Creates the whole database structure\n'
              '        """\n'
              '        self.create_all_languages()\n'
              '        \n'
              '        self.create_all_tables(ignore_errors)\n'
              '        self.create_all_procedures(ignore_errors)\n'
              '        self.create_all_triggers(ignore_errors)\n'
              '        \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='ea89e714-5500-4f37-9e98-b1824624b673',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=970,
         depth=1,
         type='function',
         name='create_structure',
         text='def create_structure(self, ignore_errors=False):\n'
              '        """ Creates the whole database structure\n'
              '        """\n'
              '        self.create_all_languages()\n'
              '        \n'
              '        self.create_all_tables(ignore_errors)\n'
              '        self.create_all_procedures(ignore_errors)\n'
              '        self.create_all_triggers(ignore_errors)')

Fragment(uuid='3dd7de8d-80b3-47d8-bfb9-0cba791fc873',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=981,
         depth=0,
         type='module',
         name='',
         text='    def drop_structure(self, ignore_errors=False):\n'
              '        """ Drops the whole database structure\n'
              '        """\n'
              '        self.drop_all_triggers(ignore_errors)\n'
              '        self.drop_all_procedures(ignore_errors)\n'
              '        self.drop_all_tables(ignore_errors)\n'
              '        \n'
              '    %end\n'
              '    %end\n')

Fragment(uuid='443b1b4a-daab-4548-a004-cecc3c51c5a3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=981,
         depth=1,
         type='function',
         name='drop_structure',
         text='def drop_structure(self, ignore_errors=False):\n'
              '        """ Drops the whole database structure\n'
              '        """\n'
              '        self.drop_all_triggers(ignore_errors)\n'
              '        self.drop_all_procedures(ignore_errors)\n'
              '        self.drop_all_tables(ignore_errors)')

Fragment(uuid='734772af-605c-4f3d-a842-11935374c2f5',
         path='/lib/dblayer/graph/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Helpers to export database graphs\n"""\n')

Fragment(uuid='55cf2d73-d238-490b-ad3f-8b3e3d90bc46',
         path='/lib/dblayer/graph/gml.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Helpers to export the database graph in GraphML format\n'
              '\n'
              'Requires the NetworkX library: http://networkx.lanl.gov/\n'
              '\n'
              '"""\n'
              '\n'
              'import networkx\n'
              '\n'
              'from dblayer.model import database, table as table_model, '
              'column as column_model\n')

Fragment(uuid='30e899e7-6549-48e3-ae0d-c269b9df0ba6',
         path='/lib/dblayer/graph/gml.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/graph/gml.py\n'
              '  Classes: GMLExporter\n'
              '  Methods: __init__ export\n'
              '  Variables: column_label_list label model self.model title\n'
              '  Usages: Database ForeignKey MultiDiGraph Table __class__ '
              '__name__ _column_list _name _table_list add_edge add_node '
              'column column_model database dblayer filepath fk_column '
              'isinstance join name networkx null referenced_table self table '
              'table_model upper write_gml\n')

Fragment(uuid='91e4c926-72ab-4021-98e1-ef9702022423',
         path='/lib/dblayer/graph/gml.py',
         lineno=7,
         depth=0,
         type='dependency',
         name='',
         text='import networkx')

Fragment(uuid='d332cb50-9dea-4136-ae28-44b6ca103344',
         path='/lib/dblayer/graph/gml.py',
         lineno=9,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.model import database, table as table_model, '
              'column as column_model')

Fragment(uuid='d688ad71-5383-427c-9712-e8eb36ed1da6',
         path='/lib/dblayer/graph/gml.py',
         lineno=10,
         depth=0,
         type='module',
         name='',
         text='\n\nclass GMLExporter:\n')

Fragment(uuid='41e6abba-ea5f-4ba8-8149-606d53e3fe39',
         path='/lib/dblayer/graph/gml.py',
         lineno=12,
         depth=0,
         type='class',
         name='GMLExporter',
         text='class GMLExporter:\n')

Fragment(uuid='f7f466e0-79ad-452e-831c-567c5a396acc',
         path='/lib/dblayer/graph/gml.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, model):\n'
              '        assert isinstance(model, database.Database)\n'
              '        self.model = model\n')

Fragment(uuid='c36e6d4d-9e28-40ba-8716-dc56feed931b',
         path='/lib/dblayer/graph/gml.py',
         lineno=13,
         depth=0,
         type='class',
         name='GMLExporter',
         text='\n'
              '    def __init__(self, model):\n'
              '        assert isinstance(model, database.Database)\n'
              '        self.model = model\n')

Fragment(uuid='5a1ebbe1-6752-4350-a8e8-0638c81b0f38',
         path='/lib/dblayer/graph/gml.py',
         lineno=14,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, model):\n'
              '        assert isinstance(model, database.Database)\n'
              '        self.model = model')

Fragment(uuid='b2b51c12-763d-4945-8d83-38944b80f412',
         path='/lib/dblayer/graph/gml.py',
         lineno=16,
         depth=4,
         type='variable',
         name='self.model',
         text='self.model = model')

Fragment(uuid='a406febe-5467-4517-8402-9eb2d574020d',
         path='/lib/dblayer/graph/gml.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def export(self, filepath):\n'
              '\n'
              '        model = self.model\n'
              '        assert isinstance(model, database.Database)\n'
              '\n'
              '        g = networkx.MultiDiGraph()\n')

Fragment(uuid='56b72955-f1f8-4d26-a7e8-81092b5bb6f3',
         path='/lib/dblayer/graph/gml.py',
         lineno=17,
         depth=0,
         type='class',
         name='GMLExporter',
         text='\n'
              '    def export(self, filepath):\n'
              '\n'
              '        model = self.model\n'
              '        assert isinstance(model, database.Database)\n'
              '\n'
              '        g = networkx.MultiDiGraph()\n')

Fragment(uuid='07c77f37-4a36-4961-b932-cfae765aeeb2',
         path='/lib/dblayer/graph/gml.py',
         lineno=18,
         depth=2,
         type='function',
         name='export',
         text='def export(self, filepath):\n'
              '\n'
              '        model = self.model\n'
              '        assert isinstance(model, database.Database)\n'
              '\n'
              '        g = networkx.MultiDiGraph()\n')

Fragment(uuid='99755da7-72a1-426e-a71a-ce4ddf76e592',
         path='/lib/dblayer/graph/gml.py',
         lineno=20,
         depth=4,
         type='variable',
         name='model',
         text='model = self.model')

Fragment(uuid='d47d2deb-21b7-45b4-b7d8-2abe4ff13be7',
         path='/lib/dblayer/graph/gml.py',
         lineno=23,
         depth=4,
         type='variable',
         name='g',
         text='g = networkx.MultiDiGraph()')

Fragment(uuid='e360658d-6b7d-4ddd-bcf4-5dd99d0c0451',
         path='/lib/dblayer/graph/gml.py',
         lineno=24,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for table in model._table_list:\n'
              '            if 0:\n'
              '                assert isinstance(table, table_model.Table)\n'
              '            title = table._name.upper()\n'
              '            column_label_list = [\n'
              "                '%s:%s%s%s' % (\n"
              '                    column.name,\n'
              '                    column.__class__.__name__,\n'
              "                    ' NULL' if column.null else '',\n"
              "                    '->' if isinstance(column, "
              "column_model.ForeignKey) else '')\n")

Fragment(uuid='459bbf32-7aa0-413a-9ab0-e161cdbdf8c3',
         path='/lib/dblayer/graph/gml.py',
         lineno=24,
         depth=0,
         type='class',
         name='GMLExporter',
         text='\n'
              '        for table in model._table_list:\n'
              '            if 0:\n'
              '                assert isinstance(table, table_model.Table)\n'
              '            title = table._name.upper()\n'
              '            column_label_list = [\n'
              "                '%s:%s%s%s' % (\n"
              '                    column.name,\n'
              '                    column.__class__.__name__,\n'
              "                    ' NULL' if column.null else '',\n"
              "                    '->' if isinstance(column, "
              "column_model.ForeignKey) else '')\n")

Fragment(uuid='7e453442-3f1a-477f-aee7-500e3d101dda',
         path='/lib/dblayer/graph/gml.py',
         lineno=24,
         depth=2,
         type='function',
         name='export',
         text='\n'
              '        for table in model._table_list:\n'
              '            if 0:\n'
              '                assert isinstance(table, table_model.Table)\n'
              '            title = table._name.upper()\n'
              '            column_label_list = [\n'
              "                '%s:%s%s%s' % (\n"
              '                    column.name,\n'
              '                    column.__class__.__name__,\n'
              "                    ' NULL' if column.null else '',\n"
              "                    '->' if isinstance(column, "
              "column_model.ForeignKey) else '')\n")

Fragment(uuid='890d7c2a-c802-4f06-867f-8f9c146a2112',
         path='/lib/dblayer/graph/gml.py',
         lineno=28,
         depth=6,
         type='variable',
         name='title',
         text='title = table._name.upper()')

Fragment(uuid='d5aafcd1-98c3-40da-85d2-4ac0f219b778',
         path='/lib/dblayer/graph/gml.py',
         lineno=29,
         depth=6,
         type='variable',
         name='column_label_list',
         text='column_label_list = [\n'
              "                '%s:%s%s%s' % (\n"
              '                    column.name,\n'
              '                    column.__class__.__name__,\n'
              "                    ' NULL' if column.null else '',\n"
              "                    '->' if isinstance(column, "
              "column_model.ForeignKey) else '')\n"
              '                for column in table._column_list]')

Fragment(uuid='026932ff-51f8-429b-8a88-4f4e69b51c7d',
         path='/lib/dblayer/graph/gml.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='                for column in table._column_list]\n'
              "            label = '%s\\n\\n%s' % (title, "
              "'\\n'.join(column_label_list))\n"
              '            g.add_node(id(table), label=label)\n')

Fragment(uuid='80ba87b1-501e-4b6f-b145-df6acec6f858',
         path='/lib/dblayer/graph/gml.py',
         lineno=35,
         depth=0,
         type='class',
         name='GMLExporter',
         text='                for column in table._column_list]\n'
              "            label = '%s\\n\\n%s' % (title, "
              "'\\n'.join(column_label_list))\n"
              '            g.add_node(id(table), label=label)\n')

Fragment(uuid='f4c662f6-24a8-4241-afd3-031c82e5299b',
         path='/lib/dblayer/graph/gml.py',
         lineno=35,
         depth=2,
         type='function',
         name='export',
         text='                for column in table._column_list]\n'
              "            label = '%s\\n\\n%s' % (title, "
              "'\\n'.join(column_label_list))\n"
              '            g.add_node(id(table), label=label)\n')

Fragment(uuid='233120e4-de1c-41ec-ae18-d61600116819',
         path='/lib/dblayer/graph/gml.py',
         lineno=36,
         depth=6,
         type='variable',
         name='label',
         text="label = '%s\\n\\n%s' % (title, '\\n'.join(column_label_list))")

Fragment(uuid='7b524020-9f0a-4cff-9bd8-10ba49b393b3',
         path='/lib/dblayer/graph/gml.py',
         lineno=38,
         depth=0,
         type='module',
         name='',
         text='\n        for table in model._table_list:\n')

Fragment(uuid='b35409b7-d9f7-4efd-9ae0-52a4b1d05580',
         path='/lib/dblayer/graph/gml.py',
         lineno=38,
         depth=0,
         type='class',
         name='GMLExporter',
         text='\n        for table in model._table_list:\n')

Fragment(uuid='bb8798eb-3169-45c0-a55a-9335772ac0a4',
         path='/lib/dblayer/graph/gml.py',
         lineno=38,
         depth=2,
         type='function',
         name='export',
         text='\n        for table in model._table_list:\n')

Fragment(uuid='0c8bd0f8-f324-465d-a40f-9f72514eaac1',
         path='/lib/dblayer/graph/gml.py',
         lineno=40,
         depth=0,
         type='module',
         name='',
         text='            for fk_column in table._column_list:\n'
              '                if isinstance(fk_column, '
              'column_model.ForeignKey):\n'
              '                    g.add_edge(\n'
              '                        id(table),\n'
              '                        id(fk_column.referenced_table),\n'
              '                        label=fk_column.name)\n'
              '\n'
              '        networkx.write_gml(g, filepath)\n')

Fragment(uuid='e5b0c1f3-1835-422d-904e-286ec65f3c92',
         path='/lib/dblayer/graph/gml.py',
         lineno=40,
         depth=0,
         type='class',
         name='GMLExporter',
         text='            for fk_column in table._column_list:\n'
              '                if isinstance(fk_column, '
              'column_model.ForeignKey):\n'
              '                    g.add_edge(\n'
              '                        id(table),\n'
              '                        id(fk_column.referenced_table),\n'
              '                        label=fk_column.name)\n'
              '\n'
              '        networkx.write_gml(g, filepath)')

Fragment(uuid='c19c5f31-c138-4580-b0b4-9c1381160389',
         path='/lib/dblayer/graph/gml.py',
         lineno=40,
         depth=2,
         type='function',
         name='export',
         text='            for fk_column in table._column_list:\n'
              '                if isinstance(fk_column, '
              'column_model.ForeignKey):\n'
              '                    g.add_edge(\n'
              '                        id(table),\n'
              '                        id(fk_column.referenced_table),\n'
              '                        label=fk_column.name)\n'
              '\n'
              '        networkx.write_gml(g, filepath)')

Fragment(uuid='51ac07e0-f0f8-440b-8222-5d7dfc12b0b4',
         path='/lib/dblayer/model/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Classes to build database models\n"""\n')

Fragment(uuid='12dfcc79-f6f9-4af1-89b8-d3a394f264e0',
         path='/lib/dblayer/model/aggregate.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Aggregate functions can be used in to aggregate data in '
              'queries\n'
              '"""\n'
              '\n'
              'from dblayer.model import function\n'
              '\n'
              '\n'
              'class BaseAggregate(function.BaseFunction):\n'
              '    """ Base class for aggregates\n'
              '    """\n'
              '\n'
              '    def __init__(self, *args):\n'
              '        function.BaseFunction.__init__(self, *args)\n'
              '\n'
              '        assert self.__class__ is not BaseAggregate, (\n'
              "            'Only subclasses of BaseAggregate can be "
              "instantiated!')\n"
              '\n'
              '\n'
              'class Count(BaseAggregate):\n'
              '    pass\n'
              '\n'
              '\n'
              'class Min(BaseAggregate):\n'
              '    pass\n'
              '\n'
              '\n'
              'class Max(BaseAggregate):\n'
              '    pass\n'
              '\n'
              '\n'
              'class Sum(BaseAggregate):\n'
              '    pass\n'
              '\n'
              '\n'
              'class Avg(BaseAggregate):\n'
              '    pass\n')

Fragment(uuid='93b4fb22-47f2-4581-8b49-a1d1b79cb74f',
         path='/lib/dblayer/model/aggregate.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/aggregate.py\n'
              '  Classes: Avg BaseAggregate Count Max Min Sum\n'
              '  Methods: __init__\n'
              '  Usages: BaseFunction __class__ args dblayer function model '
              'self\n')

Fragment(uuid='3a4d4b43-9781-45cd-ae71-62de42c3d182',
         path='/lib/dblayer/model/aggregate.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.model import function')

Fragment(uuid='5176f2cc-e01a-4ff5-a973-54685a1b8834',
         path='/lib/dblayer/model/aggregate.py',
         lineno=7,
         depth=0,
         type='class',
         name='BaseAggregate',
         text='class BaseAggregate(function.BaseFunction):\n'
              '    """ Base class for aggregates\n'
              '    """\n'
              '\n'
              '    def __init__(self, *args):\n'
              '        function.BaseFunction.__init__(self, *args)\n'
              '\n'
              '        assert self.__class__ is not BaseAggregate, (\n'
              "            'Only subclasses of BaseAggregate can be "
              "instantiated!')")

Fragment(uuid='784c15a3-172e-4ca1-8144-1a33ab3832c4',
         path='/lib/dblayer/model/aggregate.py',
         lineno=11,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, *args):\n'
              '        function.BaseFunction.__init__(self, *args)\n'
              '\n'
              '        assert self.__class__ is not BaseAggregate, (\n'
              "            'Only subclasses of BaseAggregate can be "
              "instantiated!')")

Fragment(uuid='fca2af14-f4ea-4881-b4d8-71c4f25cf37e',
         path='/lib/dblayer/model/aggregate.py',
         lineno=18,
         depth=0,
         type='class',
         name='Count',
         text='class Count(BaseAggregate):\n    pass')

Fragment(uuid='8fb3ce59-4599-40c4-bdb2-e75b0ad7860a',
         path='/lib/dblayer/model/aggregate.py',
         lineno=22,
         depth=0,
         type='class',
         name='Min',
         text='class Min(BaseAggregate):\n    pass')

Fragment(uuid='9d4de013-4cc6-4f64-a34d-06aef1d1d45c',
         path='/lib/dblayer/model/aggregate.py',
         lineno=26,
         depth=0,
         type='class',
         name='Max',
         text='class Max(BaseAggregate):\n    pass')

Fragment(uuid='24c626f6-64db-4032-b85d-a9190df90f42',
         path='/lib/dblayer/model/aggregate.py',
         lineno=30,
         depth=0,
         type='class',
         name='Sum',
         text='class Sum(BaseAggregate):\n    pass')

Fragment(uuid='c11d74aa-aaac-45ba-bd3e-958252f68aa0',
         path='/lib/dblayer/model/aggregate.py',
         lineno=34,
         depth=0,
         type='class',
         name='Avg',
         text='class Avg(BaseAggregate):\n    pass')

Fragment(uuid='c568b524-4edd-4556-8edc-660affcd484c',
         path='/lib/dblayer/model/column.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Column types\n'
              '"""\n'
              '\n'
              'import inspect\n'
              'import types\n'
              '\n'
              'from dblayer import util\n'
              '\n'
              'from dblayer.model import index, function, constraint\n')

Fragment(uuid='db5dbd33-bab9-4eb4-a5fa-564e5a13c520',
         path='/lib/dblayer/model/column.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/column.py\n'
              '  Classes: BaseColumn Boolean Custom Date Datetime Decimal '
              'Float ForeignKey Integer PrimaryKey SearchDocument Text\n'
              '  Methods: __init__ __repr__ __str__ clone full_repr '
              'get_implicit_definition_list_for_table_class has_custom_default '
              'sort_key\n'
              '  Variables: __definition_serial__ abstract_sql_column_type '
              'accessible arg_iter args class_type clone clone.table default '
              'defaults digits doc expression formatted_argument_list '
              'full_repr_exclude fullargspec maxlength name null precision '
              'primary_key referenced_table referenced_table_class scale '
              'self.__definition_serial__ self.default self.digits self.doc '
              'self.double self.expression self.implicit self.maxlength '
              'self.null self.precision self.referenced_table_class self.scale '
              'self.serial self.sql_type size table table_class value\n'
              '  Usages: BaseFunction FullTextSearchIndex __class__ __dict__ '
              '__module__ __name__ _name append bool constraint dblayer double '
              'function get_next_definition_serial getattr getfullargspec '
              'implicit index inspect int isinstance iter join len model next '
              'obj property range repr rsplit self serial sql_type '
              'staticmethod type types update util zip\n')

Fragment(uuid='dd1e640a-ce37-4089-ab15-c77c5c108043',
         path='/lib/dblayer/model/column.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import inspect')

Fragment(uuid='0eadbd9b-9212-4335-a97c-4144dc4acfd8',
         path='/lib/dblayer/model/column.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='import types')

Fragment(uuid='e987df40-a720-4d02-902b-4fa062a5201c',
         path='/lib/dblayer/model/column.py',
         lineno=7,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import util')

Fragment(uuid='7b30f658-6df9-40a7-8f7f-76a9ba7119a1',
         path='/lib/dblayer/model/column.py',
         lineno=9,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.model import index, function, constraint')

Fragment(uuid='f2337c4c-5c9d-476a-9bef-dce9062c564e',
         path='/lib/dblayer/model/column.py',
         lineno=10,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseColumn:\n'
              '    """ Base class for database column models\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Abstract name of the SQL column type\n'
              '    abstract_sql_column_type = None\n'
              '\n'
              '    # Reference to the table class containing this column\n'
              '    # NOTE: Set by __new__ of the table definit')

Fragment(uuid='aed319e3-8f54-4c9e-9cf4-28080808a251',
         path='/lib/dblayer/model/column.py',
         lineno=12,
         depth=0,
         type='class',
         name='BaseColumn',
         text='class BaseColumn:\n'
              '    """ Base class for database column models\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Abstract name of the SQL column type\n'
              '    abstract_sql_column_type = None\n'
              '\n'
              '    # Reference to the table class containing this column\n'
              '    # NOTE: Set by __new__ of the table definiti')

Fragment(uuid='c0076c5a-2aa2-44b7-9f8d-9a3d9a496a7d',
         path='/lib/dblayer/model/column.py',
         lineno=17,
         depth=2,
         type='variable',
         name='__definition_serial__',
         text='__definition_serial__ = 0')

Fragment(uuid='fb4e8d16-5143-4231-b2e3-ba39ca9935c6',
         path='/lib/dblayer/model/column.py',
         lineno=20,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text='abstract_sql_column_type = None')

Fragment(uuid='71a8bfa0-dc80-4739-b1bf-442877961c17',
         path='/lib/dblayer/model/column.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='ion class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this column or '
              'None for model columns\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'columns from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the column\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Makrs the')

Fragment(uuid='23130fe8-55dd-482c-9ae3-93f7d0c99574',
         path='/lib/dblayer/model/column.py',
         lineno=23,
         depth=0,
         type='class',
         name='BaseColumn',
         text='on class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this column or '
              'None for model columns\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'columns from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the column\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Makrs the ')

Fragment(uuid='bc54aa71-179e-4f7e-b7bc-21be0e5e9c49',
         path='/lib/dblayer/model/column.py',
         lineno=24,
         depth=2,
         type='variable',
         name='table_class',
         text='table_class = None')

Fragment(uuid='286d0603-27db-45f1-8cab-a46190e8a4ba',
         path='/lib/dblayer/model/column.py',
         lineno=28,
         depth=2,
         type='variable',
         name='table',
         text='table = None')

Fragment(uuid='2d74d6b1-e2c7-4393-b34b-b933232007df',
         path='/lib/dblayer/model/column.py',
         lineno=32,
         depth=2,
         type='variable',
         name='name',
         text="name = ''")

Fragment(uuid='ef7e5d63-254c-4f7f-a708-2512254af2b4',
         path='/lib/dblayer/model/column.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text=' primary key column\n'
              '    primary_key = False\n'
              '\n'
              '    # True value indicates that this column is accessible to '
              'Python code\n'
              '    # as a filed on the associated Record subclass\n'
              '    accessible = True\n'
              '\n'
              '    # True value indicates that this column can be NULL (None '
              'in Python)\n'
              '    # NOTE: NOT NULL fields are required only if default is '
              'None.\n'
              '    null = False\n'
              '\n'
              '    ')

Fragment(uuid='9e10a9c7-b659-4e1f-91f2-23249e030b2c',
         path='/lib/dblayer/model/column.py',
         lineno=34,
         depth=0,
         type='class',
         name='BaseColumn',
         text='primary key column\n'
              '    primary_key = False\n'
              '\n'
              '    # True value indicates that this column is accessible to '
              'Python code\n'
              '    # as a filed on the associated Record subclass\n'
              '    accessible = True\n'
              '\n'
              '    # True value indicates that this column can be NULL (None '
              'in Python)\n'
              '    # NOTE: NOT NULL fields are required only if default is '
              'None.\n'
              '    null = False\n'
              '\n'
              '    #')

Fragment(uuid='1ec70126-8394-492a-8b55-eb970dd1bbc4',
         path='/lib/dblayer/model/column.py',
         lineno=35,
         depth=2,
         type='variable',
         name='primary_key',
         text='primary_key = False')

Fragment(uuid='dff4e3e1-5e66-4d0d-909d-b1712d32bc50',
         path='/lib/dblayer/model/column.py',
         lineno=39,
         depth=2,
         type='variable',
         name='accessible',
         text='accessible = True')

Fragment(uuid='4d7a9f97-9438-464d-adcc-29afe36de6ce',
         path='/lib/dblayer/model/column.py',
         lineno=43,
         depth=2,
         type='variable',
         name='null',
         text='null = False')

Fragment(uuid='c06998a8-1e9f-4413-8223-796fe5929024',
         path='/lib/dblayer/model/column.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='# Default value for the column or None\n'
              '    # NOTE: It is a Python value, which will be converted to a '
              'database value.\n'
              '    # NOTE: Setting null=False and default=None makes this a '
              'required field.\n'
              '    default = None\n'
              '\n'
              '    # Documentation\n'
              '    doc = None\n'
              '\n'
              '    # Exclude these parameters from full repr formatting\n'
              '    full_repr_exclude = ()\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='552709e7-ea58-44d3-bbc3-43df6fcc19f7',
         path='/lib/dblayer/model/column.py',
         lineno=45,
         depth=0,
         type='class',
         name='BaseColumn',
         text=' Default value for the column or None\n'
              '    # NOTE: It is a Python value, which will be converted to a '
              'database value.\n'
              '    # NOTE: Setting null=False and default=None makes this a '
              'required field.\n'
              '    default = None\n'
              '\n'
              '    # Documentation\n'
              '    doc = None\n'
              '\n'
              '    # Exclude these parameters from full repr formatting\n'
              '    full_repr_exclude = ()\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='b469557b-2e71-46ec-9992-559fd44b8608',
         path='/lib/dblayer/model/column.py',
         lineno=48,
         depth=2,
         type='variable',
         name='default',
         text='default = None')

Fragment(uuid='792afd37-b8e5-46ae-bfad-010c97c8a290',
         path='/lib/dblayer/model/column.py',
         lineno=51,
         depth=2,
         type='variable',
         name='doc',
         text='doc = None')

Fragment(uuid='6e835240-7796-4976-8370-d0d71cc7a508',
         path='/lib/dblayer/model/column.py',
         lineno=54,
         depth=2,
         type='variable',
         name='full_repr_exclude',
         text='full_repr_exclude = ()')

Fragment(uuid='a8642ed5-d23d-466a-9902-f84a29b5667e',
         path='/lib/dblayer/model/column.py',
         lineno=57,
         depth=0,
         type='module',
         name='',
         text='    def sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__\n'
              '\n'
              '    @property\n')

Fragment(uuid='ecd17b30-a2c4-4491-8b18-87ae4f6a6fad',
         path='/lib/dblayer/model/column.py',
         lineno=57,
         depth=0,
         type='class',
         name='BaseColumn',
         text='    def sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__\n'
              '\n'
              '    @property\n')

Fragment(uuid='7e7d890a-1e4d-405d-9d4c-44397d52d602',
         path='/lib/dblayer/model/column.py',
         lineno=57,
         depth=3,
         type='function',
         name='sort_key',
         text='def sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__')

Fragment(uuid='782f91a9-3042-49b0-b6f0-7c9bcb8d3134',
         path='/lib/dblayer/model/column.py',
         lineno=63,
         depth=0,
         type='module',
         name='',
         text='    def has_custom_default(self):\n'
              '        """ Returns True if the column has an SQL expression as '
              'its default value\n'
              '        """\n'
              '        return isinstance(self.default, function.BaseFunction)\n')

Fragment(uuid='6459f140-84b7-4899-b9fc-76278ed64b61',
         path='/lib/dblayer/model/column.py',
         lineno=63,
         depth=0,
         type='class',
         name='BaseColumn',
         text='    def has_custom_default(self):\n'
              '        """ Returns True if the column has an SQL expression as '
              'its default value\n'
              '        """\n'
              '        return isinstance(self.default, function.BaseFunction)\n')

Fragment(uuid='8feac46c-45a2-42fe-8eb6-46dec4c6c30b',
         path='/lib/dblayer/model/column.py',
         lineno=63,
         depth=3,
         type='function',
         name='has_custom_default',
         text='def has_custom_default(self):\n'
              '        """ Returns True if the column has an SQL expression as '
              'its default value\n'
              '        """\n'
              '        return isinstance(self.default, function.BaseFunction)')

Fragment(uuid='33ce4b8f-8457-449d-a082-d19b9a8207f8',
         path='/lib/dblayer/model/column.py',
         lineno=67,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, doc=None):\n'
              '\n'
              '        assert self.__class__ is not BaseColumn, (\n'
              "            'Only subclasses of BaseColumn can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Store column documentation if any\n'
              '        if doc is not None:\n'
              '            self.doc = doc\n')

Fragment(uuid='f00c8dc5-015d-497c-9214-de58d04f6149',
         path='/lib/dblayer/model/column.py',
         lineno=67,
         depth=0,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def __init__(self, doc=None):\n'
              '\n'
              '        assert self.__class__ is not BaseColumn, (\n'
              "            'Only subclasses of BaseColumn can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Store column documentation if any\n'
              '        if doc is not None:\n'
              '            self.doc = doc\n')

Fragment(uuid='e306a757-f147-462e-b6e3-e5500d53077f',
         path='/lib/dblayer/model/column.py',
         lineno=68,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, doc=None):\n'
              '\n'
              '        assert self.__class__ is not BaseColumn, (\n'
              "            'Only subclasses of BaseColumn can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Store column documentation if any\n'
              '        if doc is not None:\n'
              '            self.doc = doc')

Fragment(uuid='06112c01-651b-4186-9f77-2dfb72f30c23',
         path='/lib/dblayer/model/column.py',
         lineno=74,
         depth=4,
         type='variable',
         name='self.__definition_serial__',
         text='self.__definition_serial__ = util.get_next_definition_serial()')

Fragment(uuid='57b6ec1b-ece2-4e61-ab22-b02a07f309f3',
         path='/lib/dblayer/model/column.py',
         lineno=78,
         depth=6,
         type='variable',
         name='self.doc',
         text='self.doc = doc')

Fragment(uuid='65e7b788-6ec5-41fb-923e-9400a82377ce',
         path='/lib/dblayer/model/column.py',
         lineno=79,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Column: %s.%s as %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            self.__class__.__name__)\n')

Fragment(uuid='a22e94c4-97de-4614-9a52-a381037a898d',
         path='/lib/dblayer/model/column.py',
         lineno=79,
         depth=0,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Column: %s.%s as %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            self.__class__.__name__)\n')

Fragment(uuid='7bdcc953-031a-4874-ab89-e4366944f134',
         path='/lib/dblayer/model/column.py',
         lineno=80,
         depth=2,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Column: %s.%s as %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            self.__class__.__name__)')

Fragment(uuid='cd804357-b7c9-4c6c-bc6b-cd347cee01e5',
         path='/lib/dblayer/model/column.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              '        if self.table is None:\n'
              '            return self.name\n'
              "        return '%s.%s' % (self.table._name, self.name)\n")

Fragment(uuid='f0a50b8d-d9ad-4bea-b4f2-c32e0771ed54',
         path='/lib/dblayer/model/column.py',
         lineno=86,
         depth=0,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def __repr__(self):\n'
              '        if self.table is None:\n'
              '            return self.name\n'
              "        return '%s.%s' % (self.table._name, self.name)\n")

Fragment(uuid='c6af8d5a-8142-45f3-9f41-c7482ec97419',
         path='/lib/dblayer/model/column.py',
         lineno=87,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              '        if self.table is None:\n'
              '            return self.name\n'
              "        return '%s.%s' % (self.table._name, self.name)")

Fragment(uuid='eaedba92-2d12-4c22-9d43-0888e43fdc5a',
         path='/lib/dblayer/model/column.py',
         lineno=91,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def full_repr(self):\n'
              '        """ Gives the full representation, only for use with '
              'class level column definitions\n'
              '        """\n'
              '        fullargspec = inspect.getfullargspec(self.__init__)\n'
              '        args = fullargspec.args\n'
              '        defaults = fullargspec.defaults\n'
              '\n'
              '        arg_iter = iter(args)\n'
              '        next(arg_iter)\n'
              '\n'
              '        formatted_argument_list = []\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='cb1ba3fc-db42-4d4b-92fe-b077d0ecf128',
         path='/lib/dblayer/model/column.py',
         lineno=91,
         depth=0,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def full_repr(self):\n'
              '        """ Gives the full representation, only for use with '
              'class level column definitions\n'
              '        """\n'
              '        fullargspec = inspect.getfullargspec(self.__init__)\n'
              '        args = fullargspec.args\n'
              '        defaults = fullargspec.defaults\n'
              '\n'
              '        arg_iter = iter(args)\n'
              '        next(arg_iter)\n'
              '\n'
              '        formatted_argument_list = []\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='ebc43034-b18d-4145-9534-62f504d64de3',
         path='/lib/dblayer/model/column.py',
         lineno=92,
         depth=2,
         type='function',
         name='full_repr',
         text='def full_repr(self):\n'
              '        """ Gives the full representation, only for use with '
              'class level column definitions\n'
              '        """\n'
              '        fullargspec = inspect.getfullargspec(self.__init__)\n'
              '        args = fullargspec.args\n'
              '        defaults = fullargspec.defaults\n'
              '\n'
              '        arg_iter = iter(args)\n'
              '        next(arg_iter)\n'
              '\n'
              '        formatted_argument_list = []\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='b7a54cbc-1672-47a7-a2b9-dcfc7c81d8e8',
         path='/lib/dblayer/model/column.py',
         lineno=95,
         depth=4,
         type='variable',
         name='fullargspec',
         text='fullargspec = inspect.getfullargspec(self.__init__)')

Fragment(uuid='2e5eb76a-a01f-4001-bf0f-993b1c12b40c',
         path='/lib/dblayer/model/column.py',
         lineno=96,
         depth=4,
         type='variable',
         name='args',
         text='args = fullargspec.args')

Fragment(uuid='29c22927-9c4f-4d14-be0f-8bd2a43cbf58',
         path='/lib/dblayer/model/column.py',
         lineno=97,
         depth=4,
         type='variable',
         name='defaults',
         text='defaults = fullargspec.defaults')

Fragment(uuid='d1e52919-4a56-439f-b126-740f2d3dad7c',
         path='/lib/dblayer/model/column.py',
         lineno=99,
         depth=4,
         type='variable',
         name='arg_iter',
         text='arg_iter = iter(args)')

Fragment(uuid='e7e36a61-077f-47a7-88e4-975056eebf1e',
         path='/lib/dblayer/model/column.py',
         lineno=102,
         depth=4,
         type='variable',
         name='formatted_argument_list',
         text='formatted_argument_list = []')

Fragment(uuid='8fb9fc77-395c-4445-9c4e-4b863f11d4e0',
         path='/lib/dblayer/model/column.py',
         lineno=103,
         depth=4,
         type='variable',
         name='class_type',
         text='class_type = type(BaseColumn)')

Fragment(uuid='586bab4c-db7c-4563-a2fa-a525a6c43780',
         path='/lib/dblayer/model/column.py',
         lineno=104,
         depth=0,
         type='module',
         name='',
         text='        for i in range(len(args) - 1 - len(defaults)):\n'
              '            name = next(arg_iter)\n'
              '            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n'
              '            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s' % "
              'value.__name__)\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s.%s' % (value.table_class.__name__, "
              'value.name))\n'
              '            else:\n'
              '                formatted_argument_list.append(repr(value))\n'
              '\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='95d3a0e1-e7c1-454b-86de-a130c27ff58d',
         path='/lib/dblayer/model/column.py',
         lineno=104,
         depth=0,
         type='class',
         name='BaseColumn',
         text='        for i in range(len(args) - 1 - len(defaults)):\n'
              '            name = next(arg_iter)\n'
              '            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n'
              '            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s' % "
              'value.__name__)\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s.%s' % (value.table_class.__name__, "
              'value.name))\n'
              '            else:\n'
              '                formatted_argument_list.append(repr(value))\n'
              '\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='56bf7274-e4e9-4826-bcba-bfb9aa1dd8c5',
         path='/lib/dblayer/model/column.py',
         lineno=104,
         depth=2,
         type='function',
         name='full_repr',
         text='        for i in range(len(args) - 1 - len(defaults)):\n'
              '            name = next(arg_iter)\n'
              '            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n'
              '            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s' % "
              'value.__name__)\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s.%s' % (value.table_class.__name__, "
              'value.name))\n'
              '            else:\n'
              '                formatted_argument_list.append(repr(value))\n'
              '\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='94091968-afd1-4ce3-a3a1-b8b7240f2fef',
         path='/lib/dblayer/model/column.py',
         lineno=105,
         depth=6,
         type='variable',
         name='name',
         text='name = next(arg_iter)')

Fragment(uuid='45d81f50-67c5-4dff-bcc9-a3a54443286f',
         path='/lib/dblayer/model/column.py',
         lineno=108,
         depth=6,
         type='variable',
         name='value',
         text='value = getattr(self, name)')

Fragment(uuid='ef3b8dd9-0b97-450f-9096-30740ee47da7',
         path='/lib/dblayer/model/column.py',
         lineno=117,
         depth=4,
         type='variable',
         name='class_type',
         text='class_type = type(BaseColumn)')

Fragment(uuid='2012c8e3-e04d-4c14-95c9-c1378a5462c2',
         path='/lib/dblayer/model/column.py',
         lineno=118,
         depth=0,
         type='module',
         name='',
         text='        for name, default in zip(arg_iter, defaults):\n')

Fragment(uuid='0eb7356d-df7f-49ff-985d-2d5a56ab0ff3',
         path='/lib/dblayer/model/column.py',
         lineno=118,
         depth=0,
         type='class',
         name='BaseColumn',
         text='        for name, default in zip(arg_iter, defaults):\n')

Fragment(uuid='68d4a570-aada-4b10-b8ce-c6b3bfa9b08a',
         path='/lib/dblayer/model/column.py',
         lineno=118,
         depth=2,
         type='function',
         name='full_repr',
         text='        for name, default in zip(arg_iter, defaults):\n')

Fragment(uuid='795deb4c-a855-4ca4-9358-146eb2fb1627',
         path='/lib/dblayer/model/column.py',
         lineno=119,
         depth=0,
         type='module',
         name='',
         text='            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n')

Fragment(uuid='0f4a8ab5-a54f-43da-93b8-ae643b3f5574',
         path='/lib/dblayer/model/column.py',
         lineno=119,
         depth=0,
         type='class',
         name='BaseColumn',
         text='            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n')

Fragment(uuid='3c3571b9-e4da-413e-afb0-eccc461539ab',
         path='/lib/dblayer/model/column.py',
         lineno=119,
         depth=2,
         type='function',
         name='full_repr',
         text='            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n')

Fragment(uuid='f31f4fd1-b5f1-461b-9d70-e5d8a8d19530',
         path='/lib/dblayer/model/column.py',
         lineno=121,
         depth=6,
         type='variable',
         name='value',
         text='value = getattr(self, name)')

Fragment(uuid='9e8967d5-4ed7-48fb-ac1e-637777f01e53',
         path='/lib/dblayer/model/column.py',
         lineno=122,
         depth=0,
         type='module',
         name='',
         text='            if value == default:\n                continue\n')

Fragment(uuid='957b1a8d-29e5-4264-b38d-593b2f6dfbc1',
         path='/lib/dblayer/model/column.py',
         lineno=122,
         depth=0,
         type='class',
         name='BaseColumn',
         text='            if value == default:\n                continue\n')

Fragment(uuid='eaa8a07f-e5f7-40ef-8aeb-6a85934b2422',
         path='/lib/dblayer/model/column.py',
         lineno=122,
         depth=2,
         type='function',
         name='full_repr',
         text='            if value == default:\n                continue\n')

Fragment(uuid='4771e1fe-26e9-492f-9815-0ba99c0b37c6',
         path='/lib/dblayer/model/column.py',
         lineno=124,
         depth=0,
         type='module',
         name='',
         text='            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s=%s' % (name, "
              'value.__name__))\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s=%s.%s' % (name, "
              'value.table_class.__name__, value.name))\n'
              '            else:\n'
              "                formatted_argument_list.append('%s=%r' % (name, "
              'value))\n'
              '\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(formatted_argument_list))\n")

Fragment(uuid='6c645fd3-5db0-4902-bda8-50a2638a80a4',
         path='/lib/dblayer/model/column.py',
         lineno=124,
         depth=0,
         type='class',
         name='BaseColumn',
         text='            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s=%s' % (name, "
              'value.__name__))\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s=%s.%s' % (name, "
              'value.table_class.__name__, value.name))\n'
              '            else:\n'
              "                formatted_argument_list.append('%s=%r' % (name, "
              'value))\n'
              '\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(formatted_argument_list))\n")

Fragment(uuid='a34a08e5-7eed-45d0-8808-821d560b35a7',
         path='/lib/dblayer/model/column.py',
         lineno=124,
         depth=2,
         type='function',
         name='full_repr',
         text='            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s=%s' % (name, "
              'value.__name__))\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s=%s.%s' % (name, "
              'value.table_class.__name__, value.name))\n'
              '            else:\n'
              "                formatted_argument_list.append('%s=%r' % (name, "
              'value))\n'
              '\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(formatted_argument_list))")

Fragment(uuid='558c921d-1a22-4990-8095-84d77bf715ba',
         path='/lib/dblayer/model/column.py',
         lineno=136,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this column for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__()\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='3395dee3-978d-4f19-a41b-24f23e516544',
         path='/lib/dblayer/model/column.py',
         lineno=136,
         depth=0,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this column for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__()\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='52e0340e-ba3f-4d46-9163-d8748b741bb6',
         path='/lib/dblayer/model/column.py',
         lineno=137,
         depth=2,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        """ Clone this column for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__()\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='f88f54dc-c310-4c69-aa18-a13d1fdc1b27',
         path='/lib/dblayer/model/column.py',
         lineno=143,
         depth=4,
         type='variable',
         name='clone',
         text='clone = self.__class__()')

Fragment(uuid='4b2b37e2-fe59-415f-ba92-65a3855d25e9',
         path='/lib/dblayer/model/column.py',
         lineno=145,
         depth=4,
         type='variable',
         name='clone.table',
         text='clone.table = table')

Fragment(uuid='33f2918a-8dae-4810-9752-fd174987b8fc',
         path='/lib/dblayer/model/column.py',
         lineno=147,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []\n')

Fragment(uuid='96b4bf95-38e9-4c9c-9d7d-a86a0b2223aa',
         path='/lib/dblayer/model/column.py',
         lineno=147,
         depth=0,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []')

Fragment(uuid='0d5f0717-0485-4794-9541-7ba93be3bae8',
         path='/lib/dblayer/model/column.py',
         lineno=148,
         depth=2,
         type='function',
         name='get_implicit_definition_list_for_table_class',
         text='def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []')

Fragment(uuid='b7906af3-6e8f-4ed5-bf66-e659673cddbc',
         path='/lib/dblayer/model/column.py',
         lineno=154,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Custom(BaseColumn):\n'
              '    """ Custom column type\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Custom'\n"
              '\n'
              '    def __init__(self, sql_type=None, default=None, null=False, '
              'doc=None):\n'
              '        self.sql_type = sql_type\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='f7be86c0-71b5-4055-90f8-53859513b505',
         path='/lib/dblayer/model/column.py',
         lineno=156,
         depth=0,
         type='class',
         name='Custom',
         text='class Custom(BaseColumn):\n'
              '    """ Custom column type\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Custom'\n"
              '\n'
              '    def __init__(self, sql_type=None, default=None, null=False, '
              'doc=None):\n'
              '        self.sql_type = sql_type\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='f7e20e08-cb56-4628-8df8-3df46f658838',
         path='/lib/dblayer/model/column.py',
         lineno=160,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'Custom'")

Fragment(uuid='bc24149e-ad0c-42a8-b2bc-f96e35377646',
         path='/lib/dblayer/model/column.py',
         lineno=162,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, sql_type=None, default=None, null=False, '
              'doc=None):\n'
              '        self.sql_type = sql_type\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='4aa14ccc-c2aa-4cdb-8dc7-27389516ab73',
         path='/lib/dblayer/model/column.py',
         lineno=163,
         depth=4,
         type='variable',
         name='self.sql_type',
         text='self.sql_type = sql_type')

Fragment(uuid='ef09c725-286a-419c-92db-fa390510639a',
         path='/lib/dblayer/model/column.py',
         lineno=164,
         depth=4,
         type='variable',
         name='self.default',
         text='self.default = default')

Fragment(uuid='7da829a4-b681-4d21-9cb5-c01de27c8791',
         path='/lib/dblayer/model/column.py',
         lineno=165,
         depth=4,
         type='variable',
         name='self.null',
         text='self.null = bool(null)')

Fragment(uuid='35681aaa-e3ff-4cec-843f-040dc0c421c9',
         path='/lib/dblayer/model/column.py',
         lineno=167,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class PrimaryKey(BaseColumn):\n'
              '    """ Primary key column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'PrimaryKey'\n"
              '    primary_key = True\n'
              '\n'
              '    def __init__(self, serial=False, implicit=True, doc=None):\n'
              '        self.serial = bool(serial)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)\n'
              '\n'
              '        # Move the primary key fields to the top of the column '
              'list\n'
              '        self.__definition_serial__ -= 1000000000\n'
              '\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if self.serial or not self.implicit:\n'
              '            return []\n'
              "        return [('pk_%s' % self.name, "
              'constraint.PrimaryKey(self))]\n')

Fragment(uuid='40b331ef-b18e-4557-973a-d828bfd755e2',
         path='/lib/dblayer/model/column.py',
         lineno=169,
         depth=0,
         type='class',
         name='PrimaryKey',
         text='class PrimaryKey(BaseColumn):\n'
              '    """ Primary key column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'PrimaryKey'\n"
              '    primary_key = True\n'
              '\n'
              '    def __init__(self, serial=False, implicit=True, doc=None):\n'
              '        self.serial = bool(serial)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)\n'
              '\n'
              '        # Move the primary key fields to the top of the column '
              'list\n'
              '        self.__definition_serial__ -= 1000000000\n'
              '\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if self.serial or not self.implicit:\n'
              '            return []\n'
              "        return [('pk_%s' % self.name, "
              'constraint.PrimaryKey(self))]')

Fragment(uuid='07a1b676-5375-4df1-a00f-e6adc447dc14',
         path='/lib/dblayer/model/column.py',
         lineno=173,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'PrimaryKey'")

Fragment(uuid='2a24a2a2-6c97-4ce5-b04b-442ca8399f52',
         path='/lib/dblayer/model/column.py',
         lineno=174,
         depth=2,
         type='variable',
         name='primary_key',
         text='primary_key = True')

Fragment(uuid='aead6a2c-280a-4680-bfc7-fb9185bbfe13',
         path='/lib/dblayer/model/column.py',
         lineno=176,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, serial=False, implicit=True, doc=None):\n'
              '        self.serial = bool(serial)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)\n'
              '\n'
              '        # Move the primary key fields to the top of the column '
              'list\n'
              '        self.__definition_serial__ -= 1000000000')

Fragment(uuid='7c13772a-9c87-4e72-a4c7-39b4aa63a707',
         path='/lib/dblayer/model/column.py',
         lineno=177,
         depth=4,
         type='variable',
         name='self.serial',
         text='self.serial = bool(serial)')

Fragment(uuid='2a343f20-4c90-45d7-a057-5352448a8216',
         path='/lib/dblayer/model/column.py',
         lineno=178,
         depth=4,
         type='variable',
         name='self.implicit',
         text='self.implicit = bool(implicit)')

Fragment(uuid='80c5f20d-a46b-4cb3-a92c-726e385d0aba',
         path='/lib/dblayer/model/column.py',
         lineno=184,
         depth=2,
         type='function',
         name='get_implicit_definition_list_for_table_class',
         text='def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if self.serial or not self.implicit:\n'
              '            return []\n'
              "        return [('pk_%s' % self.name, "
              'constraint.PrimaryKey(self))]')

Fragment(uuid='22f9650b-9969-416f-a1bb-4c686aca48b9',
         path='/lib/dblayer/model/column.py',
         lineno=188,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class ForeignKey(BaseColumn):\n'
              '    """ Foreign key column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'ForeignKey'\n"
              '\n'
              '    # Definition of the referenced table\n'
              '    referenced_table_class = None\n'
              '\n'
              '    # Referenced table instance, filled in by Database.__init__ '
              'after\n'
              '    # creating all the database model objects\n'
              '    referenced_table = None\n')

Fragment(uuid='3aae118b-1608-4cfd-9a5c-6602aba02e6a',
         path='/lib/dblayer/model/column.py',
         lineno=190,
         depth=0,
         type='class',
         name='ForeignKey',
         text='class ForeignKey(BaseColumn):\n'
              '    """ Foreign key column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'ForeignKey'\n"
              '\n'
              '    # Definition of the referenced table\n'
              '    referenced_table_class = None\n'
              '\n'
              '    # Referenced table instance, filled in by Database.__init__ '
              'after\n'
              '    # creating all the database model objects\n'
              '    referenced_table = None\n')

Fragment(uuid='237633df-2429-4c6a-b476-0e9e1118191f',
         path='/lib/dblayer/model/column.py',
         lineno=194,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'ForeignKey'")

Fragment(uuid='1274b853-a24c-44d6-886c-2ebf9ff6ec0d',
         path='/lib/dblayer/model/column.py',
         lineno=197,
         depth=2,
         type='variable',
         name='referenced_table_class',
         text='referenced_table_class = None')

Fragment(uuid='c3c15a65-5390-4472-b2d2-8f5f1fbb2912',
         path='/lib/dblayer/model/column.py',
         lineno=201,
         depth=2,
         type='variable',
         name='referenced_table',
         text='referenced_table = None')

Fragment(uuid='3051c5a4-9e7d-4ce5-9bfc-c9a850260b63',
         path='/lib/dblayer/model/column.py',
         lineno=202,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, referenced_table_class=None, '
              'default=None, null=False, implicit=True, doc=None):\n'
              '        # NOTE: The referenced table class can be set to None '
              'and filled later\n'
              '        self.referenced_table_class = referenced_table_class\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='670f28c4-2eff-4cad-8a83-46dba112fe14',
         path='/lib/dblayer/model/column.py',
         lineno=202,
         depth=0,
         type='class',
         name='ForeignKey',
         text='\n'
              '    def __init__(self, referenced_table_class=None, '
              'default=None, null=False, implicit=True, doc=None):\n'
              '        # NOTE: The referenced table class can be set to None '
              'and filled later\n'
              '        self.referenced_table_class = referenced_table_class\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='f1c19971-2ea8-4e10-a248-3ae55f43d7f6',
         path='/lib/dblayer/model/column.py',
         lineno=203,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, referenced_table_class=None, default=None, '
              'null=False, implicit=True, doc=None):\n'
              '        # NOTE: The referenced table class can be set to None '
              'and filled later\n'
              '        self.referenced_table_class = referenced_table_class\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='adfb8269-7737-4b5b-a1fb-721057a1a543',
         path='/lib/dblayer/model/column.py',
         lineno=205,
         depth=4,
         type='variable',
         name='self.referenced_table_class',
         text='self.referenced_table_class = referenced_table_class')

Fragment(uuid='6e1b28a4-5023-4919-bba8-552d1e5b1b02',
         path='/lib/dblayer/model/column.py',
         lineno=206,
         depth=4,
         type='variable',
         name='self.default',
         text='self.default = default')

Fragment(uuid='99d1707b-6211-41a2-b41f-7e3a09e7ae3f',
         path='/lib/dblayer/model/column.py',
         lineno=207,
         depth=4,
         type='variable',
         name='self.null',
         text='self.null = bool(null)')

Fragment(uuid='e05a06a3-a5d7-4c55-a962-909ddfbe82dc',
         path='/lib/dblayer/model/column.py',
         lineno=208,
         depth=4,
         type='variable',
         name='self.implicit',
         text='self.implicit = bool(implicit)')

Fragment(uuid='db7de3e4-e60f-460b-bf53-f2913984cf86',
         path='/lib/dblayer/model/column.py',
         lineno=210,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        return [('fk_%s' % self.name, "
              'constraint.ForeignKey(self))]\n')

Fragment(uuid='4f18f156-055a-45eb-a51b-58d200fd8a93',
         path='/lib/dblayer/model/column.py',
         lineno=210,
         depth=0,
         type='class',
         name='ForeignKey',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        return [('fk_%s' % self.name, "
              'constraint.ForeignKey(self))]')

Fragment(uuid='b8575614-2ca8-441e-9d87-516b28165dd6',
         path='/lib/dblayer/model/column.py',
         lineno=211,
         depth=2,
         type='function',
         name='get_implicit_definition_list_for_table_class',
         text='def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        return [('fk_%s' % self.name, "
              'constraint.ForeignKey(self))]')

Fragment(uuid='db764132-5c71-4070-a675-6907d1f132e5',
         path='/lib/dblayer/model/column.py',
         lineno=215,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Boolean(BaseColumn):\n'
              '    """ Boolean column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Boolean'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='35412d56-b9ae-4f03-869a-94480f62a114',
         path='/lib/dblayer/model/column.py',
         lineno=217,
         depth=0,
         type='class',
         name='Boolean',
         text='class Boolean(BaseColumn):\n'
              '    """ Boolean column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Boolean'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='4b36c267-d646-41f7-a14b-a625b23abc4b',
         path='/lib/dblayer/model/column.py',
         lineno=221,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'Boolean'")

Fragment(uuid='21631e6c-d02f-4989-803c-a2b550bfd010',
         path='/lib/dblayer/model/column.py',
         lineno=223,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='8de630a7-b536-45c4-8e74-f3df2cd05c9e',
         path='/lib/dblayer/model/column.py',
         lineno=224,
         depth=4,
         type='variable',
         name='self.default',
         text='self.default = default')

Fragment(uuid='18b388b3-1487-4274-a176-8828fa43fd5f',
         path='/lib/dblayer/model/column.py',
         lineno=225,
         depth=4,
         type='variable',
         name='self.null',
         text='self.null = bool(null)')

Fragment(uuid='fa6a85c5-2bf5-4964-9408-46f7b36840ba',
         path='/lib/dblayer/model/column.py',
         lineno=227,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Integer(BaseColumn):\n'
              '    """ Integer column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Integer'\n"
              '\n'
              '    # Number of digits\n'
              '    digits = None\n'
              '\n'
              '    def __init__(self, digits=None, default=None, null=False, '
              'doc=None):\n'
              '        self.digits = int(digits) if digits else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='6f8f6322-8e19-4830-be04-8f9814c5b8e2',
         path='/lib/dblayer/model/column.py',
         lineno=229,
         depth=0,
         type='class',
         name='Integer',
         text='class Integer(BaseColumn):\n'
              '    """ Integer column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Integer'\n"
              '\n'
              '    # Number of digits\n'
              '    digits = None\n'
              '\n'
              '    def __init__(self, digits=None, default=None, null=False, '
              'doc=None):\n'
              '        self.digits = int(digits) if digits else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='31ae38f2-73c7-4c60-bece-c9330e7af9c7',
         path='/lib/dblayer/model/column.py',
         lineno=233,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'Integer'")

Fragment(uuid='ca30625b-2123-405d-9c85-0b7061697d54',
         path='/lib/dblayer/model/column.py',
         lineno=236,
         depth=2,
         type='variable',
         name='digits',
         text='digits = None')

Fragment(uuid='d5d6d643-bc04-4ee0-8a8c-9da6eb460507',
         path='/lib/dblayer/model/column.py',
         lineno=238,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, digits=None, default=None, null=False, '
              'doc=None):\n'
              '        self.digits = int(digits) if digits else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='ffa5c837-9105-4e09-b77a-b1609c7c5f4d',
         path='/lib/dblayer/model/column.py',
         lineno=239,
         depth=4,
         type='variable',
         name='self.digits',
         text='self.digits = int(digits) if digits else None')

Fragment(uuid='2f8d3d1a-ea35-402c-a84b-aed0fde0b40b',
         path='/lib/dblayer/model/column.py',
         lineno=240,
         depth=4,
         type='variable',
         name='self.default',
         text='self.default = default')

Fragment(uuid='e7c13251-8623-4031-ae29-4eae789d5d33',
         path='/lib/dblayer/model/column.py',
         lineno=241,
         depth=4,
         type='variable',
         name='self.null',
         text='self.null = bool(null)')

Fragment(uuid='0be97c89-8592-4283-a6eb-9f0d8fa27d87',
         path='/lib/dblayer/model/column.py',
         lineno=243,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Float(BaseColumn):\n'
              '    """ Float column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Float'\n"
              '\n'
              '    # True for double precision (8 bytes), False for single '
              'precision (4 bytes)\n'
              '    size = None\n'
              '\n'
              '    def __init__(self, double=True, default=None, null=False, '
              'doc=None):\n'
              '        self.double = bool(double)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='2a0029d6-5668-4358-8b37-9bfa00c7fbc2',
         path='/lib/dblayer/model/column.py',
         lineno=245,
         depth=0,
         type='class',
         name='Float',
         text='class Float(BaseColumn):\n'
              '    """ Float column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Float'\n"
              '\n'
              '    # True for double precision (8 bytes), False for single '
              'precision (4 bytes)\n'
              '    size = None\n'
              '\n'
              '    def __init__(self, double=True, default=None, null=False, '
              'doc=None):\n'
              '        self.double = bool(double)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='314c250b-0103-446e-87cb-4db4411313a2',
         path='/lib/dblayer/model/column.py',
         lineno=249,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'Float'")

Fragment(uuid='a3ab4955-918a-43f5-bb18-6f36c716d929',
         path='/lib/dblayer/model/column.py',
         lineno=252,
         depth=2,
         type='variable',
         name='size',
         text='size = None')

Fragment(uuid='ea15ad21-3cf8-4add-93a9-ffea49a7a9a6',
         path='/lib/dblayer/model/column.py',
         lineno=254,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, double=True, default=None, null=False, '
              'doc=None):\n'
              '        self.double = bool(double)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='264f90c8-70e1-4840-bb2a-1e54d8663e1e',
         path='/lib/dblayer/model/column.py',
         lineno=255,
         depth=4,
         type='variable',
         name='self.double',
         text='self.double = bool(double)')

Fragment(uuid='085595d8-7d20-43a1-93f8-58d8a74ca3e6',
         path='/lib/dblayer/model/column.py',
         lineno=256,
         depth=4,
         type='variable',
         name='self.default',
         text='self.default = default')

Fragment(uuid='88c13c5e-df19-4bf4-afdd-94adb26b5b29',
         path='/lib/dblayer/model/column.py',
         lineno=257,
         depth=4,
         type='variable',
         name='self.null',
         text='self.null = bool(null)')

Fragment(uuid='5312256b-2908-4f8d-ab9c-0c327099a003',
         path='/lib/dblayer/model/column.py',
         lineno=259,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Decimal(BaseColumn):\n'
              '    """ Decimal column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Decimal'\n"
              '\n'
              '    # Total number of decimal digits (includes both the integer '
              'and fractional part)\n'
              '    precision = None\n'
              '\n'
              '    # Number of digits after the decimal point (fractional '
              'part)\n'
              '    scale = None\n'
              '\n'
              '    def __init__(self, precision=None, scale=None, '
              'default=None, null=False, doc=None):\n'
              '        self.precision = None if precision is None else '
              'int(precision)\n'
              '        self.scale = None if scale is None else int(scale)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='cb1892cc-3cc7-4df1-80ac-8e7b59588cfd',
         path='/lib/dblayer/model/column.py',
         lineno=261,
         depth=0,
         type='class',
         name='Decimal',
         text='class Decimal(BaseColumn):\n'
              '    """ Decimal column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Decimal'\n"
              '\n'
              '    # Total number of decimal digits (includes both the integer '
              'and fractional part)\n'
              '    precision = None\n'
              '\n'
              '    # Number of digits after the decimal point (fractional '
              'part)\n'
              '    scale = None\n'
              '\n'
              '    def __init__(self, precision=None, scale=None, '
              'default=None, null=False, doc=None):\n'
              '        self.precision = None if precision is None else '
              'int(precision)\n'
              '        self.scale = None if scale is None else int(scale)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='598211e0-8433-4a5f-accd-fad109c040ca',
         path='/lib/dblayer/model/column.py',
         lineno=265,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'Decimal'")

Fragment(uuid='00e5dac3-87ed-4cc6-a0be-1bd20a5e0a7b',
         path='/lib/dblayer/model/column.py',
         lineno=268,
         depth=2,
         type='variable',
         name='precision',
         text='precision = None')

Fragment(uuid='a4a5327e-d906-44a9-8949-bd745116f0a6',
         path='/lib/dblayer/model/column.py',
         lineno=271,
         depth=2,
         type='variable',
         name='scale',
         text='scale = None')

Fragment(uuid='13939420-3352-4eaf-97c6-4700d0ae7a80',
         path='/lib/dblayer/model/column.py',
         lineno=273,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, precision=None, scale=None, default=None, '
              'null=False, doc=None):\n'
              '        self.precision = None if precision is None else '
              'int(precision)\n'
              '        self.scale = None if scale is None else int(scale)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='cdcdb484-a4fd-434b-b390-4b62ab141423',
         path='/lib/dblayer/model/column.py',
         lineno=274,
         depth=4,
         type='variable',
         name='self.precision',
         text='self.precision = None if precision is None else int(precision)')

Fragment(uuid='f237ba7d-9d67-4c8b-85f0-c0b174b0f4b5',
         path='/lib/dblayer/model/column.py',
         lineno=275,
         depth=4,
         type='variable',
         name='self.scale',
         text='self.scale = None if scale is None else int(scale)')

Fragment(uuid='9e729249-b3ed-45d9-b40b-b5cae69d608a',
         path='/lib/dblayer/model/column.py',
         lineno=276,
         depth=4,
         type='variable',
         name='self.default',
         text='self.default = default')

Fragment(uuid='c81cd373-bc68-4deb-8fef-10f3d18f2202',
         path='/lib/dblayer/model/column.py',
         lineno=277,
         depth=4,
         type='variable',
         name='self.null',
         text='self.null = bool(null)')

Fragment(uuid='a499c075-2566-493e-81f4-be239cd3f04a',
         path='/lib/dblayer/model/column.py',
         lineno=279,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Text(BaseColumn):\n'
              '    """ Unicode text column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Text'\n"
              '\n'
              '    # Maximum number of characters in the string (unicode '
              'characters, not bytes)\n'
              '    maxlength = None\n'
              '\n'
              '    def __init__(self, maxlength=None, default=None, '
              'null=False, doc=None):\n'
              '        self.maxlength = int(maxlength) if maxlength else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='3f02c014-4437-4b67-a412-38a7477b8630',
         path='/lib/dblayer/model/column.py',
         lineno=281,
         depth=0,
         type='class',
         name='Text',
         text='class Text(BaseColumn):\n'
              '    """ Unicode text column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Text'\n"
              '\n'
              '    # Maximum number of characters in the string (unicode '
              'characters, not bytes)\n'
              '    maxlength = None\n'
              '\n'
              '    def __init__(self, maxlength=None, default=None, '
              'null=False, doc=None):\n'
              '        self.maxlength = int(maxlength) if maxlength else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='c2828c6d-efb5-4ba6-b055-8e4fcee1b5db',
         path='/lib/dblayer/model/column.py',
         lineno=285,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'Text'")

Fragment(uuid='d094320d-a6a4-4fb5-9522-498e3f60f32b',
         path='/lib/dblayer/model/column.py',
         lineno=288,
         depth=2,
         type='variable',
         name='maxlength',
         text='maxlength = None')

Fragment(uuid='3e7e3c7f-9787-4dd7-be86-f1bda4261e60',
         path='/lib/dblayer/model/column.py',
         lineno=290,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, maxlength=None, default=None, null=False, '
              'doc=None):\n'
              '        self.maxlength = int(maxlength) if maxlength else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='945b3576-9dcc-4a30-9084-56b8f488fda2',
         path='/lib/dblayer/model/column.py',
         lineno=291,
         depth=4,
         type='variable',
         name='self.maxlength',
         text='self.maxlength = int(maxlength) if maxlength else None')

Fragment(uuid='aaedf6a1-abd0-44cc-ad4d-3d3cb1616673',
         path='/lib/dblayer/model/column.py',
         lineno=292,
         depth=4,
         type='variable',
         name='self.default',
         text='self.default = default')

Fragment(uuid='f5659408-cc42-4208-8f41-2c57e8a6e9e4',
         path='/lib/dblayer/model/column.py',
         lineno=293,
         depth=4,
         type='variable',
         name='self.null',
         text='self.null = bool(null)')

Fragment(uuid='96c99672-c527-4ada-bda9-deeed774c46b',
         path='/lib/dblayer/model/column.py',
         lineno=295,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Date(BaseColumn):\n'
              '    """ Date column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Date'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='cd385584-9b01-47ed-b32c-40dbe839cd63',
         path='/lib/dblayer/model/column.py',
         lineno=297,
         depth=0,
         type='class',
         name='Date',
         text='class Date(BaseColumn):\n'
              '    """ Date column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Date'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='2fb970ac-7144-4057-867d-a4775b9c1d06',
         path='/lib/dblayer/model/column.py',
         lineno=301,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'Date'")

Fragment(uuid='e8d37143-958a-4b52-a4fb-47ddb0324026',
         path='/lib/dblayer/model/column.py',
         lineno=303,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='1055aed4-9710-47ff-8a58-bdb3a6ac50d3',
         path='/lib/dblayer/model/column.py',
         lineno=304,
         depth=4,
         type='variable',
         name='self.default',
         text='self.default = default')

Fragment(uuid='dfb61532-7e3f-4894-b90e-ea02945e5a9a',
         path='/lib/dblayer/model/column.py',
         lineno=305,
         depth=4,
         type='variable',
         name='self.null',
         text='self.null = bool(null)')

Fragment(uuid='027fefb5-fc07-4c61-8572-27810de296e2',
         path='/lib/dblayer/model/column.py',
         lineno=307,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Datetime(BaseColumn):\n'
              '    """ Datetime (timestamp) column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Datetime'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='b9150887-b88d-4790-ad0a-036f7983bb06',
         path='/lib/dblayer/model/column.py',
         lineno=309,
         depth=0,
         type='class',
         name='Datetime',
         text='class Datetime(BaseColumn):\n'
              '    """ Datetime (timestamp) column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Datetime'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='aa5d1a87-2208-4be4-ae09-ab99cb925f43',
         path='/lib/dblayer/model/column.py',
         lineno=313,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'Datetime'")

Fragment(uuid='60623f31-6e7a-49c4-b99a-373eb1ced4a6',
         path='/lib/dblayer/model/column.py',
         lineno=315,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='9830a426-e3dd-47a8-852c-68a7d206c881',
         path='/lib/dblayer/model/column.py',
         lineno=316,
         depth=4,
         type='variable',
         name='self.default',
         text='self.default = default')

Fragment(uuid='9defdfd9-0458-4487-b0b2-489c723f326c',
         path='/lib/dblayer/model/column.py',
         lineno=317,
         depth=4,
         type='variable',
         name='self.null',
         text='self.null = bool(null)')

Fragment(uuid='93da8dba-2910-41c3-b072-6aa670e98d1a',
         path='/lib/dblayer/model/column.py',
         lineno=319,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class SearchDocument(BaseColumn):\n'
              '    """ Search document column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'SearchDocument'\n"
              '\n'
              '    # Do not add this as a field on the Record subclass, hide '
              'from Python code\n'
              '    accessible = False\n'
              '\n'
              '    # Expression to generate the value of this column from the '
              'other columns.\n'
              '    # It is currently limited to a tuple of columns to '
              'concatenate with space\n'
              '    # separators to build up the search document.\n'
              '    # TODO: Allow for free form expressions using the function '
              'module.\n'
              '    expression = None\n')

Fragment(uuid='d2eed5f4-9672-4f56-9807-8b7f489b09db',
         path='/lib/dblayer/model/column.py',
         lineno=321,
         depth=0,
         type='class',
         name='SearchDocument',
         text='class SearchDocument(BaseColumn):\n'
              '    """ Search document column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'SearchDocument'\n"
              '\n'
              '    # Do not add this as a field on the Record subclass, hide '
              'from Python code\n'
              '    accessible = False\n'
              '\n'
              '    # Expression to generate the value of this column from the '
              'other columns.\n'
              '    # It is currently limited to a tuple of columns to '
              'concatenate with space\n'
              '    # separators to build up the search document.\n'
              '    # TODO: Allow for free form expressions using the function '
              'module.\n'
              '    expression = None\n')

Fragment(uuid='3311cc69-1a64-4868-9053-42d8f7a5131e',
         path='/lib/dblayer/model/column.py',
         lineno=325,
         depth=2,
         type='variable',
         name='abstract_sql_column_type',
         text="abstract_sql_column_type = 'SearchDocument'")

Fragment(uuid='d88845a4-be68-4e0c-b8f0-2b3a7ae04bf0',
         path='/lib/dblayer/model/column.py',
         lineno=328,
         depth=2,
         type='variable',
         name='accessible',
         text='accessible = False')

Fragment(uuid='39a1c393-40fd-4131-a49b-3bf68be23fd9',
         path='/lib/dblayer/model/column.py',
         lineno=334,
         depth=2,
         type='variable',
         name='expression',
         text='expression = None')

Fragment(uuid='8926eef2-3a85-4cee-b002-1a861f85e029',
         path='/lib/dblayer/model/column.py',
         lineno=335,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, expression=None, implicit=True, '
              'doc=None):\n'
              '        self.expression = expression\n'
              '        self.null = False\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc=doc)\n')

Fragment(uuid='0a56f009-8913-4b7d-b97c-2dae4bca270c',
         path='/lib/dblayer/model/column.py',
         lineno=335,
         depth=0,
         type='class',
         name='SearchDocument',
         text='\n'
              '    def __init__(self, expression=None, implicit=True, '
              'doc=None):\n'
              '        self.expression = expression\n'
              '        self.null = False\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc=doc)\n')

Fragment(uuid='50b5b0fc-6e83-4705-8470-26a49257d43e',
         path='/lib/dblayer/model/column.py',
         lineno=336,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, expression=None, implicit=True, doc=None):\n'
              '        self.expression = expression\n'
              '        self.null = False\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc=doc)')

Fragment(uuid='90a38da1-5b0c-47ac-96de-2d1000a3c7da',
         path='/lib/dblayer/model/column.py',
         lineno=337,
         depth=4,
         type='variable',
         name='self.expression',
         text='self.expression = expression')

Fragment(uuid='53bd9753-2d29-40e8-ab5f-5add51ea5866',
         path='/lib/dblayer/model/column.py',
         lineno=338,
         depth=4,
         type='variable',
         name='self.null',
         text='self.null = False')

Fragment(uuid='c7cfd4ab-09d4-4249-a60d-70efb6623b30',
         path='/lib/dblayer/model/column.py',
         lineno=339,
         depth=4,
         type='variable',
         name='self.implicit',
         text='self.implicit = bool(implicit)')

Fragment(uuid='d4e5ec04-a27c-4637-a915-f01754123523',
         path='/lib/dblayer/model/column.py',
         lineno=341,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        assert self.expression, 'Expression to build up the "
              "search document must be given!'\n"
              "        return [(self.name + '_index', "
              'index.FullTextSearchIndex(*self.expression))]\n')

Fragment(uuid='c7db7431-ec70-44ec-a6e0-54e242811033',
         path='/lib/dblayer/model/column.py',
         lineno=341,
         depth=0,
         type='class',
         name='SearchDocument',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        assert self.expression, 'Expression to build up the "
              "search document must be given!'\n"
              "        return [(self.name + '_index', "
              'index.FullTextSearchIndex(*self.expression))]')

Fragment(uuid='6e1c135d-839c-4ebd-80bf-391bbfe3d0ad',
         path='/lib/dblayer/model/column.py',
         lineno=342,
         depth=2,
         type='function',
         name='get_implicit_definition_list_for_table_class',
         text='def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        assert self.expression, 'Expression to build up the "
              "search document must be given!'\n"
              "        return [(self.name + '_index', "
              'index.FullTextSearchIndex(*self.expression))]')

Fragment(uuid='a18f98f2-7ed5-4699-93b9-023ee0931979',
         path='/lib/dblayer/model/constraint.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Constraint definitions\n"""\n\nfrom dblayer import util\n')

Fragment(uuid='b0a8c381-e1d5-4a2f-a5c3-3e6af36b0380',
         path='/lib/dblayer/model/constraint.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/constraint.py\n'
              '  Classes: BaseColumnConstraint BaseConstraint Check ForeignKey '
              'PrimaryKey Unique\n'
              '  Methods: __init__ __repr__ __str__ clone sort_key\n'
              '  Variables: __definition_serial__ clone clone.columns '
              'clone.table columns implicit name self.__definition_serial__ '
              'self.columns self.expression table table_class\n'
              '  Usages: __class__ __dict__ __module__ __name__ column dblayer '
              'expression get_next_definition_serial getattr join obj rsplit '
              'self staticmethod tuple update util\n')

Fragment(uuid='64aef0e4-a4f3-4e5a-95eb-85a231dae1cc',
         path='/lib/dblayer/model/constraint.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import util')

Fragment(uuid='2167eeb8-5c11-4981-b414-64bc46ab7240',
         path='/lib/dblayer/model/constraint.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseConstraint:\n'
              '    """ Base class for database constraints\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of constraint '
              'definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this constraint\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this constraint')

Fragment(uuid='1e46b8e5-3935-462f-89d3-8406a021ab92',
         path='/lib/dblayer/model/constraint.py',
         lineno=7,
         depth=0,
         type='class',
         name='BaseConstraint',
         text='class BaseConstraint:\n'
              '    """ Base class for database constraints\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of constraint '
              'definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this constraint\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this '
              'constraint ')

Fragment(uuid='fe3d0156-8040-4345-a20b-df0b18b8aea9',
         path='/lib/dblayer/model/constraint.py',
         lineno=12,
         depth=2,
         type='variable',
         name='__definition_serial__',
         text='__definition_serial__ = 0')

Fragment(uuid='eb98e293-6804-4cb2-8398-4cc529c6d973',
         path='/lib/dblayer/model/constraint.py',
         lineno=16,
         depth=2,
         type='variable',
         name='table_class',
         text='table_class = None')

Fragment(uuid='35699f50-af21-4cb9-9b74-8ce8605bf9fe',
         path='/lib/dblayer/model/constraint.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text=' or None for model constraints\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'constraints from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the constraint\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='f61f3b19-6468-4fe8-b07f-b29091f974b4',
         path='/lib/dblayer/model/constraint.py',
         lineno=18,
         depth=0,
         type='class',
         name='BaseConstraint',
         text='or None for model constraints\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'constraints from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the constraint\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='4546ca61-4c31-409d-93a4-72c1c1951273',
         path='/lib/dblayer/model/constraint.py',
         lineno=20,
         depth=2,
         type='variable',
         name='table',
         text='table = None')

Fragment(uuid='88e4c04f-25a7-4383-8646-0dff4c1c2dd9',
         path='/lib/dblayer/model/constraint.py',
         lineno=24,
         depth=2,
         type='variable',
         name='name',
         text="name = ''")

Fragment(uuid='0dde4343-fc09-4401-aebd-83d8240f0f17',
         path='/lib/dblayer/model/constraint.py',
         lineno=27,
         depth=2,
         type='variable',
         name='implicit',
         text='implicit = False')

Fragment(uuid='fa29a172-1ab8-40d5-b49f-9814e76669d1',
         path='/lib/dblayer/model/constraint.py',
         lineno=30,
         depth=0,
         type='module',
         name='',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='b58ab56b-82dc-4c03-9701-1f04afd44d8d',
         path='/lib/dblayer/model/constraint.py',
         lineno=30,
         depth=0,
         type='class',
         name='BaseConstraint',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='c4b2b692-0255-4b31-ad24-4df6deb6c2fd',
         path='/lib/dblayer/model/constraint.py',
         lineno=30,
         depth=3,
         type='function',
         name='sort_key',
         text='def sort_key(obj):\n        return obj.__definition_serial__')

Fragment(uuid='79401f32-b5ee-431c-b3e5-5ca1031a35be',
         path='/lib/dblayer/model/constraint.py',
         lineno=32,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self):\n'
              '        assert self.__class__ is not BaseConstraint, (\n'
              "            'Only subclasses of BaseConstraint can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n')

Fragment(uuid='7d83e860-902d-4142-a3ca-9cbb55472e24',
         path='/lib/dblayer/model/constraint.py',
         lineno=32,
         depth=0,
         type='class',
         name='BaseConstraint',
         text='\n'
              '    def __init__(self):\n'
              '        assert self.__class__ is not BaseConstraint, (\n'
              "            'Only subclasses of BaseConstraint can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n')

Fragment(uuid='b9cf1a30-405c-417b-bf8e-adcb356e4d34',
         path='/lib/dblayer/model/constraint.py',
         lineno=33,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self):\n'
              '        assert self.__class__ is not BaseConstraint, (\n'
              "            'Only subclasses of BaseConstraint can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()')

Fragment(uuid='8d24663f-d267-4761-b954-25b3fea1e757',
         path='/lib/dblayer/model/constraint.py',
         lineno=38,
         depth=4,
         type='variable',
         name='self.__definition_serial__',
         text='self.__definition_serial__ = util.get_next_definition_serial()')

Fragment(uuid='356f223c-eb95-4f5f-bf77-96bac74cde15',
         path='/lib/dblayer/model/constraint.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Constraint: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)\n')

Fragment(uuid='ec899cf0-69ef-4a2c-b0af-8863ff18a57a',
         path='/lib/dblayer/model/constraint.py',
         lineno=39,
         depth=0,
         type='class',
         name='BaseConstraint',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Constraint: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)\n')

Fragment(uuid='9e9cde4c-9f05-45c7-b2ed-006c170603e5',
         path='/lib/dblayer/model/constraint.py',
         lineno=40,
         depth=2,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Constraint: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)')

Fragment(uuid='91136bce-01c4-4806-a545-b166002075a5',
         path='/lib/dblayer/model/constraint.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s()' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__)\n')

Fragment(uuid='c056a0a5-334f-4371-b15c-6de9caa0714a',
         path='/lib/dblayer/model/constraint.py',
         lineno=45,
         depth=0,
         type='class',
         name='BaseConstraint',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s()' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__)\n')

Fragment(uuid='9e7fb87d-9e71-4a1e-b8f6-1859223ba491',
         path='/lib/dblayer/model/constraint.py',
         lineno=46,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s()' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__)')

Fragment(uuid='f3248015-4dc7-48b3-add4-40c818e954f8',
         path='/lib/dblayer/model/constraint.py',
         lineno=50,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this constraint for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'constraints to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='f60803bc-d554-4477-9052-0eb0183b46f1',
         path='/lib/dblayer/model/constraint.py',
         lineno=50,
         depth=0,
         type='class',
         name='BaseConstraint',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this constraint for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'constraints to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='c8fff095-c3cf-4eef-aab0-c9d7f2165c1a',
         path='/lib/dblayer/model/constraint.py',
         lineno=51,
         depth=2,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        """ Clone this constraint for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'constraints to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='f706a811-5ada-4b6b-9649-5f43dd194835',
         path='/lib/dblayer/model/constraint.py',
         lineno=57,
         depth=4,
         type='variable',
         name='clone',
         text='clone = self.__class__(None)')

Fragment(uuid='e7fd87ce-4481-4329-84e7-e7fef2a8f62e',
         path='/lib/dblayer/model/constraint.py',
         lineno=59,
         depth=4,
         type='variable',
         name='clone.table',
         text='clone.table = table')

Fragment(uuid='2f424fa7-6c08-4d9e-9e2b-04e532dcd0ca',
         path='/lib/dblayer/model/constraint.py',
         lineno=61,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseColumnConstraint(BaseConstraint):\n'
              '    """ Base class for constraints applied on a single column '
              'or a set of columns\n'
              '    """\n'
              '    # Tuple of the member columns\n'
              '    columns = ()\n')

Fragment(uuid='a95cd1f2-0cde-46d0-8029-02b765c69bb3',
         path='/lib/dblayer/model/constraint.py',
         lineno=63,
         depth=0,
         type='class',
         name='BaseColumnConstraint',
         text='class BaseColumnConstraint(BaseConstraint):\n'
              '    """ Base class for constraints applied on a single column '
              'or a set of columns\n'
              '    """\n'
              '    # Tuple of the member columns\n'
              '    columns = ()\n')

Fragment(uuid='d5885211-5789-492e-81c5-21202e70d2ba',
         path='/lib/dblayer/model/constraint.py',
         lineno=67,
         depth=2,
         type='variable',
         name='columns',
         text='columns = ()')

Fragment(uuid='df5d7b69-99d7-428b-a17b-2274f3c4f7a4',
         path='/lib/dblayer/model/constraint.py',
         lineno=68,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, *columns):\n'
              '        BaseConstraint.__init__(self)\n'
              '\n'
              '        assert self.__class__ is not BaseColumnConstraint, (\n'
              "            'Only subclasses of BaseColumnConstraint can be "
              "instantiated!')\n"
              '\n'
              "        assert columns, 'This constraint must be applied to at "
              "least one column!'\n"
              '        self.columns = columns\n')

Fragment(uuid='f9bb828f-1da8-4b21-b19a-1e34e39bd8fc',
         path='/lib/dblayer/model/constraint.py',
         lineno=68,
         depth=0,
         type='class',
         name='BaseColumnConstraint',
         text='\n'
              '    def __init__(self, *columns):\n'
              '        BaseConstraint.__init__(self)\n'
              '\n'
              '        assert self.__class__ is not BaseColumnConstraint, (\n'
              "            'Only subclasses of BaseColumnConstraint can be "
              "instantiated!')\n"
              '\n'
              "        assert columns, 'This constraint must be applied to at "
              "least one column!'\n"
              '        self.columns = columns\n')

Fragment(uuid='8a0a5a94-ccee-4e13-a835-aa4e78acadf0',
         path='/lib/dblayer/model/constraint.py',
         lineno=69,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, *columns):\n'
              '        BaseConstraint.__init__(self)\n'
              '\n'
              '        assert self.__class__ is not BaseColumnConstraint, (\n'
              "            'Only subclasses of BaseColumnConstraint can be "
              "instantiated!')\n"
              '\n'
              "        assert columns, 'This constraint must be applied to at "
              "least one column!'\n"
              '        self.columns = columns')

Fragment(uuid='702c60d2-e1de-48fc-b954-e824ca46c931',
         path='/lib/dblayer/model/constraint.py',
         lineno=76,
         depth=4,
         type='variable',
         name='self.columns',
         text='self.columns = columns')

Fragment(uuid='d3d5492d-a134-40ac-a15b-da4076029aa7',
         path='/lib/dblayer/model/constraint.py',
         lineno=77,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Constraint: %s.%s on %r>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            tuple(column.name for column in self.columns))\n')

Fragment(uuid='8ccb05fc-9ee2-447c-8432-711c81179f6d',
         path='/lib/dblayer/model/constraint.py',
         lineno=77,
         depth=0,
         type='class',
         name='BaseColumnConstraint',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Constraint: %s.%s on %r>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            tuple(column.name for column in self.columns))\n')

Fragment(uuid='db49533c-e163-4881-ae4a-265931e049b1',
         path='/lib/dblayer/model/constraint.py',
         lineno=78,
         depth=2,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Constraint: %s.%s on %r>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            tuple(column.name for column in self.columns))')

Fragment(uuid='445d3b3e-4425-48fb-8866-4e3d2fcdb547',
         path='/lib/dblayer/model/constraint.py',
         lineno=84,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='cd16702d-41d9-40fe-8b5f-3de46e15c194',
         path='/lib/dblayer/model/constraint.py',
         lineno=84,
         depth=0,
         type='class',
         name='BaseColumnConstraint',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='b2bcaf71-caa5-4a3f-8bae-5951e867d7a9',
         path='/lib/dblayer/model/constraint.py',
         lineno=85,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))")

Fragment(uuid='3aa060a2-1c79-41e6-a1a8-00b0f459d8a8',
         path='/lib/dblayer/model/constraint.py',
         lineno=90,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        clone = BaseConstraint.clone(self, table)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        return clone\n')

Fragment(uuid='c21a7b35-4bce-4007-a486-243f71e3465f',
         path='/lib/dblayer/model/constraint.py',
         lineno=90,
         depth=0,
         type='class',
         name='BaseColumnConstraint',
         text='\n'
              '    def clone(self, table):\n'
              '        clone = BaseConstraint.clone(self, table)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        return clone')

Fragment(uuid='5b8069b1-f869-4c3d-82d3-048f0c15b696',
         path='/lib/dblayer/model/constraint.py',
         lineno=91,
         depth=2,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        clone = BaseConstraint.clone(self, table)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        return clone')

Fragment(uuid='e4998ab4-a60c-4c42-a1e7-b6ccbc5ff270',
         path='/lib/dblayer/model/constraint.py',
         lineno=92,
         depth=4,
         type='variable',
         name='clone',
         text='clone = BaseConstraint.clone(self, table)')

Fragment(uuid='4a23982f-40f9-4a99-9551-33955a560b7d',
         path='/lib/dblayer/model/constraint.py',
         lineno=93,
         depth=4,
         type='variable',
         name='clone.columns',
         text='clone.columns = [getattr(table, column.name) for column in '
              'self.columns]')

Fragment(uuid='07e6afa6-7c44-445b-8c26-d8464e9deb86',
         path='/lib/dblayer/model/constraint.py',
         lineno=95,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class PrimaryKey(BaseColumnConstraint):\n'
              '    """ Primary key constraint\n'
              '    """\n')

Fragment(uuid='dc9d3eb5-cd14-4c8b-aadf-1c7c78fee9e5',
         path='/lib/dblayer/model/constraint.py',
         lineno=97,
         depth=0,
         type='class',
         name='PrimaryKey',
         text='class PrimaryKey(BaseColumnConstraint):\n'
              '    """ Primary key constraint\n'
              '    """')

Fragment(uuid='4b2f906f-533d-4ad9-89c8-932f134135a7',
         path='/lib/dblayer/model/constraint.py',
         lineno=100,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class ForeignKey(BaseColumnConstraint):\n'
              '    """ Foreign key constraint\n'
              '    """\n')

Fragment(uuid='e5a48018-ba0a-4ae2-8e45-851cd748588f',
         path='/lib/dblayer/model/constraint.py',
         lineno=102,
         depth=0,
         type='class',
         name='ForeignKey',
         text='class ForeignKey(BaseColumnConstraint):\n'
              '    """ Foreign key constraint\n'
              '    """')

Fragment(uuid='452eb7b5-4fac-49a3-a56c-5569d528bbbe',
         path='/lib/dblayer/model/constraint.py',
         lineno=105,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Unique(BaseColumnConstraint):\n'
              '    """ Unique index constraint\n'
              '    """\n')

Fragment(uuid='79c69c37-dc77-4245-8128-232c440be03c',
         path='/lib/dblayer/model/constraint.py',
         lineno=107,
         depth=0,
         type='class',
         name='Unique',
         text='class Unique(BaseColumnConstraint):\n'
              '    """ Unique index constraint\n'
              '    """')

Fragment(uuid='f170c4c3-972c-466d-bbc8-d58747fc0cd0',
         path='/lib/dblayer/model/constraint.py',
         lineno=110,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Check(BaseConstraint):\n'
              '    """ Constraint given as a free expression on the record '
              'fields\n'
              '    """\n'
              '\n'
              '    def __init__(self, expression):\n'
              '        BaseConstraint.__init__(self)\n'
              '        self.expression = expression\n'
              '\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.expression)\n')

Fragment(uuid='07cf7cde-b3d7-43dc-897e-322b30b8b2ee',
         path='/lib/dblayer/model/constraint.py',
         lineno=112,
         depth=0,
         type='class',
         name='Check',
         text='class Check(BaseConstraint):\n'
              '    """ Constraint given as a free expression on the record '
              'fields\n'
              '    """\n'
              '\n'
              '    def __init__(self, expression):\n'
              '        BaseConstraint.__init__(self)\n'
              '        self.expression = expression\n'
              '\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.expression)')

Fragment(uuid='42bf7971-677b-4586-8144-d69ebe3ac1fb',
         path='/lib/dblayer/model/constraint.py',
         lineno=116,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, expression):\n'
              '        BaseConstraint.__init__(self)\n'
              '        self.expression = expression')

Fragment(uuid='2d796c08-e878-44e7-8564-9e407c600736',
         path='/lib/dblayer/model/constraint.py',
         lineno=118,
         depth=4,
         type='variable',
         name='self.expression',
         text='self.expression = expression')

Fragment(uuid='aa994ff7-1724-44a6-93fa-bf4b36ef3358',
         path='/lib/dblayer/model/constraint.py',
         lineno=120,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.expression)')

Fragment(uuid='ea1adfd6-631d-45a6-a334-6f9ad25c8972',
         path='/lib/dblayer/model/database.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Base class for database models\n'
              '\n'
              'Database models are used to collect the tables, views and '
              'queries building\n'
              'up a single database or schema. It is used to generate the code '
              'for the\n'
              'database abstraction layer used by the actual application. It '
              'is not used\n'
              'directly to access the database, it only represents the model '
              'of the database\n'
              'or schema.\n'
              '\n'
              '"""\n'
              '\n'
              'from dblayer.generator import generator\n'
              'from dblayer.model import table, column, procedure\n')

Fragment(uuid='927fc4d1-0b11-460d-a6b4-40eaa9290685',
         path='/lib/dblayer/model/database.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/database.py\n'
              '  Classes: Database\n'
              '  Methods: __init__ __new__ __repr__ __str__ generate '
              'initialize pretty_format_class\n'
              '  Variables: _abstraction_class_name _initialized '
              '_procedure_list _table_list append_line cls._initialized '
              'cls._procedure_list cls._table_list fk_column.referenced_table '
              'line_list referenced_table self._abstraction_class_name '
              'table_map value value.__class__._table_name '
              'value._database_class value._name value.database_class '
              'value.name\n'
              '  Usages: BaseProcedure ForeignKey Procedure Table __class__ '
              '__doc__ __module__ __name__ _column_list _database_class _name '
              '_sort_key _table_name abstraction_class_name append args '
              'backend classmethod cls column database_class dblayer dict dir '
              'fk_column generator get getattr isinstance join key kws len '
              'model name obj options procedure referenced_table_class rsplit '
              'self sort sort_key split strip super table table_instance\n')

Fragment(uuid='4b6c8bbc-9d0c-4b0f-a9e1-27294abd1f7a',
         path='/lib/dblayer/model/database.py',
         lineno=11,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.generator import generator')

Fragment(uuid='6fed321b-0f53-4f68-861f-9cd40d2e870a',
         path='/lib/dblayer/model/database.py',
         lineno=12,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.model import table, column, procedure')

Fragment(uuid='ba288684-3cdd-4669-bf38-b50393ef590e',
         path='/lib/dblayer/model/database.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Database:\n'
              '    """ Base class for database models\n'
              '    """\n'
              '\n'
              '    # Flag indicating that the model has been initialized\n'
              '    _initialized = False\n'
              '\n'
              '    # List of initialized table models in the database\n'
              '    _table_list = ()\n'
              '\n'
              '    # List of initialized stored procedure definitions in the '
              'database\n'
              '    _procedure_list = ()\n'
              '\n'
              '    # Name of the abstraction layer class\n'
              "    _abstraction_class_name = ''\n")

Fragment(uuid='888423eb-4e0b-446b-bd51-8b6fd4ca4407',
         path='/lib/dblayer/model/database.py',
         lineno=15,
         depth=0,
         type='class',
         name='Database',
         text='class Database:\n'
              '    """ Base class for database models\n'
              '    """\n'
              '\n'
              '    # Flag indicating that the model has been initialized\n'
              '    _initialized = False\n'
              '\n'
              '    # List of initialized table models in the database\n'
              '    _table_list = ()\n'
              '\n'
              '    # List of initialized stored procedure definitions in the '
              'database\n'
              '    _procedure_list = ()\n'
              '\n'
              '    # Name of the abstraction layer class\n'
              "    _abstraction_class_name = ''\n")

Fragment(uuid='0a5fa0ac-21a4-41e7-bc18-a55764d7f215',
         path='/lib/dblayer/model/database.py',
         lineno=20,
         depth=2,
         type='variable',
         name='_initialized',
         text='_initialized = False')

Fragment(uuid='5299b47d-de7e-4511-8a67-7e9e971e57f2',
         path='/lib/dblayer/model/database.py',
         lineno=23,
         depth=2,
         type='variable',
         name='_table_list',
         text='_table_list = ()')

Fragment(uuid='5fe5260d-4674-4ef2-813d-44e4d61ac986',
         path='/lib/dblayer/model/database.py',
         lineno=26,
         depth=2,
         type='variable',
         name='_procedure_list',
         text='_procedure_list = ()')

Fragment(uuid='c2bfa517-bfc4-4ffc-8f78-505583784bf5',
         path='/lib/dblayer/model/database.py',
         lineno=29,
         depth=2,
         type='variable',
         name='_abstraction_class_name',
         text="_abstraction_class_name = ''")

Fragment(uuid='291e51cc-589f-465a-9c6a-042d56d314af',
         path='/lib/dblayer/model/database.py',
         lineno=30,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __new__(cls, *args, **kws):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Database, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='8cf98ab1-832c-475b-aa02-db717a07752c',
         path='/lib/dblayer/model/database.py',
         lineno=30,
         depth=0,
         type='class',
         name='Database',
         text='\n'
              '    def __new__(cls, *args, **kws):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Database, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='a2525aab-c2df-4e17-8928-90c81c838943',
         path='/lib/dblayer/model/database.py',
         lineno=31,
         depth=2,
         type='function',
         name='__new__',
         text='def __new__(cls, *args, **kws):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Database, cls).__new__(cls)')

Fragment(uuid='a0befcb3-6d6b-4129-ad7d-f80538d1f780',
         path='/lib/dblayer/model/database.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='    def initialize(cls):\n'
              '        """ Initialize the model objects and resolve all '
              'cross-dependencies\n'
              '        """\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to tables and collect them\n'
              '        cls._table_list = []\n'
              '        cls._procedure_list = []\n')

Fragment(uuid='d1178520-8c62-4b42-aa65-490efe845e06',
         path='/lib/dblayer/model/database.py',
         lineno=39,
         depth=0,
         type='class',
         name='Database',
         text='    def initialize(cls):\n'
              '        """ Initialize the model objects and resolve all '
              'cross-dependencies\n'
              '        """\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to tables and collect them\n'
              '        cls._table_list = []\n'
              '        cls._procedure_list = []\n')

Fragment(uuid='4c6b82d2-654a-4a6b-b1ff-5467cefec983',
         path='/lib/dblayer/model/database.py',
         lineno=39,
         depth=3,
         type='function',
         name='initialize',
         text='def initialize(cls):\n'
              '        """ Initialize the model objects and resolve all '
              'cross-dependencies\n'
              '        """\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to tables and collect them\n'
              '        cls._table_list = []\n'
              '        cls._procedure_list = []\n')

Fragment(uuid='ad49c416-6957-41f9-bf13-23233c33235c',
         path='/lib/dblayer/model/database.py',
         lineno=42,
         depth=5,
         type='variable',
         name='cls._initialized',
         text='cls._initialized = True')

Fragment(uuid='dfd33a58-6116-455a-a71b-b4bdc917c54f',
         path='/lib/dblayer/model/database.py',
         lineno=45,
         depth=5,
         type='variable',
         name='cls._table_list',
         text='cls._table_list = []')

Fragment(uuid='e52d4015-d015-4080-939c-896d4d5c9170',
         path='/lib/dblayer/model/database.py',
         lineno=46,
         depth=5,
         type='variable',
         name='cls._procedure_list',
         text='cls._procedure_list = []')

Fragment(uuid='38fdc202-dab6-4c3a-bae9-4078915fb33d',
         path='/lib/dblayer/model/database.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='56f7d052-2772-4e3e-b910-94b7d45fb521',
         path='/lib/dblayer/model/database.py',
         lineno=47,
         depth=0,
         type='class',
         name='Database',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='a83d321e-2665-42c4-a289-e497044fd2d6',
         path='/lib/dblayer/model/database.py',
         lineno=47,
         depth=3,
         type='function',
         name='initialize',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='227540d4-0a00-4990-8e8e-ddcfd13a1319',
         path='/lib/dblayer/model/database.py',
         lineno=48,
         depth=7,
         type='variable',
         name='value',
         text='value = getattr(cls, name)')

Fragment(uuid='baa6b447-dc8a-4611-a251-77e1900f31c6',
         path='/lib/dblayer/model/database.py',
         lineno=49,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if isinstance(value, table.Table):\n'
              "                assert value._database_class is None, 'Table "
              "already bound to a database class!'\n"
              '                value.__class__._table_name = name\n'
              '                value._name = name\n'
              '                value._database_class = cls\n'
              '                cls._table_list.append(value)\n')

Fragment(uuid='da378a2e-99a8-4d50-8d3e-2efa8883c47e',
         path='/lib/dblayer/model/database.py',
         lineno=49,
         depth=0,
         type='class',
         name='Database',
         text='\n'
              '            if isinstance(value, table.Table):\n'
              "                assert value._database_class is None, 'Table "
              "already bound to a database class!'\n"
              '                value.__class__._table_name = name\n'
              '                value._name = name\n'
              '                value._database_class = cls\n'
              '                cls._table_list.append(value)\n')

Fragment(uuid='72a7e162-15ae-437f-94d9-46f32845788d',
         path='/lib/dblayer/model/database.py',
         lineno=49,
         depth=3,
         type='function',
         name='initialize',
         text='\n'
              '            if isinstance(value, table.Table):\n'
              "                assert value._database_class is None, 'Table "
              "already bound to a database class!'\n"
              '                value.__class__._table_name = name\n'
              '                value._name = name\n'
              '                value._database_class = cls\n'
              '                cls._table_list.append(value)\n')

Fragment(uuid='4b9488dc-5ef8-4b47-89fa-08c60c8c3f2a',
         path='/lib/dblayer/model/database.py',
         lineno=52,
         depth=9,
         type='variable',
         name='value.__class__._table_name',
         text='value.__class__._table_name = name')

Fragment(uuid='f35a89cc-20e3-4f22-aae7-c08adb11e32a',
         path='/lib/dblayer/model/database.py',
         lineno=53,
         depth=9,
         type='variable',
         name='value._name',
         text='value._name = name')

Fragment(uuid='f8ce9468-e90c-4fae-a3e9-52fd942535bd',
         path='/lib/dblayer/model/database.py',
         lineno=54,
         depth=9,
         type='variable',
         name='value._database_class',
         text='value._database_class = cls')

Fragment(uuid='5db3494d-121b-4fcb-bb80-06383bd823cb',
         path='/lib/dblayer/model/database.py',
         lineno=56,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            elif isinstance(value, procedure.BaseProcedure):\n'
              '                value.name = name\n'
              '                value.database_class = cls\n'
              '                cls._procedure_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._table_list.sort(key=table.Table._sort_key)\n'
              '        '
              'cls._procedure_list.sort(key=procedure.Procedure.sort_key)\n'
              '\n'
              '        # Connect all foreign keys by looking up the referenced '
              'tables\n'
              '        table_map = dict(\n'
              '            (table_instance.__class__.__name__, '
              'table_instance)\n')

Fragment(uuid='b09317ec-5f65-442b-84fb-2a60fd501458',
         path='/lib/dblayer/model/database.py',
         lineno=56,
         depth=0,
         type='class',
         name='Database',
         text='\n'
              '            elif isinstance(value, procedure.BaseProcedure):\n'
              '                value.name = name\n'
              '                value.database_class = cls\n'
              '                cls._procedure_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._table_list.sort(key=table.Table._sort_key)\n'
              '        '
              'cls._procedure_list.sort(key=procedure.Procedure.sort_key)\n'
              '\n'
              '        # Connect all foreign keys by looking up the referenced '
              'tables\n'
              '        table_map = dict(\n'
              '            (table_instance.__class__.__name__, '
              'table_instance)\n')

Fragment(uuid='85cb6120-ea69-4e52-b020-4b58b59133c4',
         path='/lib/dblayer/model/database.py',
         lineno=56,
         depth=3,
         type='function',
         name='initialize',
         text='\n'
              '            elif isinstance(value, procedure.BaseProcedure):\n'
              '                value.name = name\n'
              '                value.database_class = cls\n'
              '                cls._procedure_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._table_list.sort(key=table.Table._sort_key)\n'
              '        '
              'cls._procedure_list.sort(key=procedure.Procedure.sort_key)\n'
              '\n'
              '        # Connect all foreign keys by looking up the referenced '
              'tables\n'
              '        table_map = dict(\n'
              '            (table_instance.__class__.__name__, '
              'table_instance)\n')

Fragment(uuid='1b07086b-06bc-44a1-aa29-fad6d52ad162',
         path='/lib/dblayer/model/database.py',
         lineno=58,
         depth=10,
         type='variable',
         name='value.name',
         text='value.name = name')

Fragment(uuid='186aae2b-8727-473a-b5aa-5c695ad3e49e',
         path='/lib/dblayer/model/database.py',
         lineno=59,
         depth=10,
         type='variable',
         name='value.database_class',
         text='value.database_class = cls')

Fragment(uuid='d42014c3-3686-498f-9dd4-e97548285a4f',
         path='/lib/dblayer/model/database.py',
         lineno=67,
         depth=5,
         type='variable',
         name='table_map',
         text='table_map = dict(\n'
              '            (table_instance.__class__.__name__, '
              'table_instance)\n'
              '            for table_instance in cls._table_list)')

Fragment(uuid='7186591e-21fd-41cd-9a76-50a231e542fd',
         path='/lib/dblayer/model/database.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='            for table_instance in cls._table_list)\n'
              '        assert len(table_map) == len(cls._table_list), (\n'
              "            'Some of the table classes were used more than once "
              "to construct the database model!')\n")

Fragment(uuid='cf0351d8-8215-4043-a185-dedbb57558c1',
         path='/lib/dblayer/model/database.py',
         lineno=69,
         depth=0,
         type='class',
         name='Database',
         text='            for table_instance in cls._table_list)\n'
              '        assert len(table_map) == len(cls._table_list), (\n'
              "            'Some of the table classes were used more than once "
              "to construct the database model!')\n")

Fragment(uuid='a40b7c3f-2ad7-449f-a763-bec29c43754e',
         path='/lib/dblayer/model/database.py',
         lineno=69,
         depth=3,
         type='function',
         name='initialize',
         text='            for table_instance in cls._table_list)\n'
              '        assert len(table_map) == len(cls._table_list), (\n'
              "            'Some of the table classes were used more than once "
              "to construct the database model!')\n")

Fragment(uuid='d4815d6c-d9ed-4a04-8b44-f0b7e02ff5b4',
         path='/lib/dblayer/model/database.py',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='        for table_instance in cls._table_list:\n')

Fragment(uuid='15951d1f-20b5-43c9-b457-98ba393b1320',
         path='/lib/dblayer/model/database.py',
         lineno=72,
         depth=0,
         type='class',
         name='Database',
         text='        for table_instance in cls._table_list:\n')

Fragment(uuid='ffc1cd14-2335-4158-a0db-764fb3b075ec',
         path='/lib/dblayer/model/database.py',
         lineno=72,
         depth=3,
         type='function',
         name='initialize',
         text='        for table_instance in cls._table_list:\n')

Fragment(uuid='cc2226a7-b80a-4ba9-850b-23893a1cf1e5',
         path='/lib/dblayer/model/database.py',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text='            for fk_column in table_instance._column_list:\n'
              '                if isinstance(fk_column, column.ForeignKey):\n'
              '                    referenced_table = '
              'table_map.get(fk_column.referenced_table_class.__name__)\n'
              '                    assert referenced_table, (\n'
              "                            'Could not find referenced database "
              "table for foreign key: %s.%s' %\n"
              '                            (table_instance.__class__.__name__, '
              'fk_column.name))\n'
              '                    fk_column.referenced_table = '
              'referenced_table\n')

Fragment(uuid='abf5ff31-9d24-442f-8a64-40e9a61daa06',
         path='/lib/dblayer/model/database.py',
         lineno=73,
         depth=0,
         type='class',
         name='Database',
         text='            for fk_column in table_instance._column_list:\n'
              '                if isinstance(fk_column, column.ForeignKey):\n'
              '                    referenced_table = '
              'table_map.get(fk_column.referenced_table_class.__name__)\n'
              '                    assert referenced_table, (\n'
              "                            'Could not find referenced database "
              "table for foreign key: %s.%s' %\n"
              '                            (table_instance.__class__.__name__, '
              'fk_column.name))\n'
              '                    fk_column.referenced_table = '
              'referenced_table\n')

Fragment(uuid='8027e405-e8e7-4a06-8be2-2a990f015145',
         path='/lib/dblayer/model/database.py',
         lineno=73,
         depth=3,
         type='function',
         name='initialize',
         text='            for fk_column in table_instance._column_list:\n'
              '                if isinstance(fk_column, column.ForeignKey):\n'
              '                    referenced_table = '
              'table_map.get(fk_column.referenced_table_class.__name__)\n'
              '                    assert referenced_table, (\n'
              "                            'Could not find referenced database "
              "table for foreign key: %s.%s' %\n"
              '                            (table_instance.__class__.__name__, '
              'fk_column.name))\n'
              '                    fk_column.referenced_table = '
              'referenced_table')

Fragment(uuid='4c4f56be-9f41-4a26-895b-934735ae57ab',
         path='/lib/dblayer/model/database.py',
         lineno=75,
         depth=11,
         type='variable',
         name='referenced_table',
         text='referenced_table = '
              'table_map.get(fk_column.referenced_table_class.__name__)')

Fragment(uuid='36ceef97-78ba-4f61-b718-2032df1f9af3',
         path='/lib/dblayer/model/database.py',
         lineno=79,
         depth=11,
         type='variable',
         name='fk_column.referenced_table',
         text='fk_column.referenced_table = referenced_table')

Fragment(uuid='66a0e332-ea8e-4f13-a658-9afcacd5305b',
         path='/lib/dblayer/model/database.py',
         lineno=80,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, abstraction_class_name):\n'
              '        self._abstraction_class_name = abstraction_class_name\n')

Fragment(uuid='b1d87f67-dfe9-4c51-9eef-0ed227bd740f',
         path='/lib/dblayer/model/database.py',
         lineno=80,
         depth=0,
         type='class',
         name='Database',
         text='\n'
              '    def __init__(self, abstraction_class_name):\n'
              '        self._abstraction_class_name = abstraction_class_name\n')

Fragment(uuid='defef69f-e267-4d80-b46b-d37d17d20239',
         path='/lib/dblayer/model/database.py',
         lineno=81,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, abstraction_class_name):\n'
              '        self._abstraction_class_name = abstraction_class_name')

Fragment(uuid='270c3295-847a-41ce-bb5f-1cea74f418bf',
         path='/lib/dblayer/model/database.py',
         lineno=82,
         depth=4,
         type='variable',
         name='self._abstraction_class_name',
         text='self._abstraction_class_name = abstraction_class_name')

Fragment(uuid='1f875aca-b127-44dd-a64b-0704dbb35a2f',
         path='/lib/dblayer/model/database.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Database>' % self.__class__.__name__\n")

Fragment(uuid='96acd10a-5e13-4a17-831c-9f61dfc4c4a1',
         path='/lib/dblayer/model/database.py',
         lineno=83,
         depth=0,
         type='class',
         name='Database',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Database>' % self.__class__.__name__\n")

Fragment(uuid='cf83cd2c-4ee0-40e7-8560-d04c76d58278',
         path='/lib/dblayer/model/database.py',
         lineno=84,
         depth=2,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Database>' % self.__class__.__name__")

Fragment(uuid='3ef82df8-80bf-4eea-8f82-20035fef5e9b',
         path='/lib/dblayer/model/database.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self._abstraction_class_name)\n')

Fragment(uuid='1d510e7e-ceb2-42dd-a4c4-5b4fdcacdf2f',
         path='/lib/dblayer/model/database.py',
         lineno=86,
         depth=0,
         type='class',
         name='Database',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self._abstraction_class_name)\n')

Fragment(uuid='17ed3414-9c4c-4a9c-91fa-ee2cfeda0721',
         path='/lib/dblayer/model/database.py',
         lineno=87,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self._abstraction_class_name)')

Fragment(uuid='f9f955c0-ec8e-4a4a-aeff-1f22497449bd',
         path='/lib/dblayer/model/database.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def generate(self, backend, options=None):\n'
              '        """ Generate database abstraction layer module for use '
              'with the given\n'
              '        database server specific backend module\n'
              '        """\n'
              '        return generator.generate(self, backend, '
              'self._abstraction_class_name, options)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='d349d095-2d81-4177-8440-be29f738f2ff',
         path='/lib/dblayer/model/database.py',
         lineno=92,
         depth=0,
         type='class',
         name='Database',
         text='\n'
              '    def generate(self, backend, options=None):\n'
              '        """ Generate database abstraction layer module for use '
              'with the given\n'
              '        database server specific backend module\n'
              '        """\n'
              '        return generator.generate(self, backend, '
              'self._abstraction_class_name, options)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='63dabd2d-0ee3-46d7-b04f-6c30755438b3',
         path='/lib/dblayer/model/database.py',
         lineno=93,
         depth=2,
         type='function',
         name='generate',
         text='def generate(self, backend, options=None):\n'
              '        """ Generate database abstraction layer module for use '
              'with the given\n'
              '        database server specific backend module\n'
              '        """\n'
              '        return generator.generate(self, backend, '
              'self._abstraction_class_name, options)')

Fragment(uuid='c6211b1c-3635-4243-b4e5-d7683f88f9c5',
         path='/lib/dblayer/model/database.py',
         lineno=100,
         depth=0,
         type='module',
         name='',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the database model, '
              'including all the tables used in it\n'
              '        """\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = '''\\\n"
              'import dblayer\n'
              'import dblayer.backend.postgresql\n'
              'from dblayer.model import database, table, query\n'
              'from dblayer.model import column, index, constraint, aggregate, '
              'function, trigger, procedure\n'
              "'''.split('\\n')\n"
              '        append_line = line_list.append\n')

Fragment(uuid='4e05ee77-ee1c-4c36-b187-d180118a1b62',
         path='/lib/dblayer/model/database.py',
         lineno=100,
         depth=0,
         type='class',
         name='Database',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the database model, '
              'including all the tables used in it\n'
              '        """\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = '''\\\n"
              'import dblayer\n'
              'import dblayer.backend.postgresql\n'
              'from dblayer.model import database, table, query\n'
              'from dblayer.model import column, index, constraint, aggregate, '
              'function, trigger, procedure\n'
              "'''.split('\\n')\n"
              '        append_line = line_list.append\n')

Fragment(uuid='ad4480fd-072f-40ea-ad33-c26a8aa4ee35',
         path='/lib/dblayer/model/database.py',
         lineno=100,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='def pretty_format_class(cls):\n'
              '        """ Formats source code defining the database model, '
              'including all the tables used in it\n'
              '        """\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = '''\\\n"
              'import dblayer\n'
              'import dblayer.backend.postgresql\n'
              'from dblayer.model import database, table, query\n'
              'from dblayer.model import column, index, constraint, aggregate, '
              'function, trigger, procedure\n'
              "'''.split('\\n')\n"
              '        append_line = line_list.append\n')

Fragment(uuid='394b7163-fd3b-40f1-80bc-ec1187ee9227',
         path='/lib/dblayer/model/database.py',
         lineno=107,
         depth=5,
         type='variable',
         name='line_list',
         text="line_list = '''\\\n"
              'import dblayer\n'
              'import dblayer.backend.postgresql\n'
              'from dblayer.model import database, table, query\n'
              'from dblayer.model import column, index, constraint, aggregate, '
              'function, trigger, procedure\n'
              "'''.split('\\n')")

Fragment(uuid='8ddd9435-ec13-4d0f-91d1-d353a9f0fae6',
         path='/lib/dblayer/model/database.py',
         lineno=113,
         depth=5,
         type='variable',
         name='append_line',
         text='append_line = line_list.append')

Fragment(uuid='7fc07ec5-e8bc-4624-b453-649220f07379',
         path='/lib/dblayer/model/database.py',
         lineno=114,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              '            append_line(obj.__class__.pretty_format_class())\n'
              "            append_line('')\n"
              '\n'
              "        append_line('class %s(database.Database):' % "
              'cls.__name__)\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='2a2e6eed-8ac4-4d80-8755-4685df564318',
         path='/lib/dblayer/model/database.py',
         lineno=114,
         depth=0,
         type='class',
         name='Database',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              '            append_line(obj.__class__.pretty_format_class())\n'
              "            append_line('')\n"
              '\n'
              "        append_line('class %s(database.Database):' % "
              'cls.__name__)\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='50bd077b-c10e-4ddc-874f-728844fa0909',
         path='/lib/dblayer/model/database.py',
         lineno=114,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              '            append_line(obj.__class__.pretty_format_class())\n'
              "            append_line('')\n"
              '\n'
              "        append_line('class %s(database.Database):' % "
              'cls.__name__)\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='33730b52-d36f-4c03-9654-39acd28aed99',
         path='/lib/dblayer/model/database.py',
         lineno=129,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              "            append_line('    %s = %s()' % (obj._name, "
              'obj.__class__.__name__))\n')

Fragment(uuid='467ba106-079d-4d28-bc91-170bdc41dd16',
         path='/lib/dblayer/model/database.py',
         lineno=129,
         depth=0,
         type='class',
         name='Database',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              "            append_line('    %s = %s()' % (obj._name, "
              'obj.__class__.__name__))\n')

Fragment(uuid='9b396452-9bd4-4171-afb7-732f528af7f9',
         path='/lib/dblayer/model/database.py',
         lineno=129,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              "            append_line('    %s = %s()' % (obj._name, "
              'obj.__class__.__name__))\n')

Fragment(uuid='2a027dd2-a9eb-4463-889d-c2dce5c3d9de',
         path='/lib/dblayer/model/database.py',
         lineno=133,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._procedure_list:\n'
              '            assert isinstance(obj, procedure.Procedure)\n'
              "            append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              "        return '\\n'.join(line_list)\n")

Fragment(uuid='c2624b4f-643c-4203-bd6f-501b4a116109',
         path='/lib/dblayer/model/database.py',
         lineno=133,
         depth=0,
         type='class',
         name='Database',
         text='\n'
              '        for obj in cls._procedure_list:\n'
              '            assert isinstance(obj, procedure.Procedure)\n'
              "            append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='3860876e-50aa-4722-9f0b-f4752d8bb1d7',
         path='/lib/dblayer/model/database.py',
         lineno=133,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._procedure_list:\n'
              '            assert isinstance(obj, procedure.Procedure)\n'
              "            append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='aef3efe0-1410-4016-aa26-661a55060195',
         path='/lib/dblayer/model/function.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Functions can be used in result expressions of queries\n'
              '"""\n')

Fragment(uuid='50a18010-e838-4a2c-ac6e-25a8925a04bd',
         path='/lib/dblayer/model/function.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/function.py\n'
              '  Classes: Add And BaseFunction Coalesce Concat Contains Custom '
              'Div Equal FullTextSearch GreaterThan GreaterThanOrEqual In Left '
              'LessThan LessThanOrEqual Like Match Mul Neg Not NotEqual NotIn '
              'NotLike NotMatch Or Right Sub Substring Var\n'
              '  Methods: __init__ __repr__ __str__\n'
              '  Variables: self.args\n'
              '  Usages: __class__ __module__ __name__ args column join length '
              'map pattern position repr rsplit self substring text tuple\n')

Fragment(uuid='f0b0bbfb-96c9-48a0-81a9-961143b7e821',
         path='/lib/dblayer/model/function.py',
         lineno=3,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseFunction:\n'
              '    """ Base class for functions\n'
              '    """\n'
              '\n'
              '    def __init__(self, *args):\n'
              '        self.args = args\n'
              '\n'
              '        assert self.__class__ is not BaseFunction, (\n'
              "            'Only subclasses of BaseFunction can be "
              "instantiated!')\n"
              '\n'
              '    def __str__(self):\n'
              "        return '<%s%r>' % (self.__class__.__name__, "
              'tuple(self.args))\n'
              '\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(map(repr, self.args)))\n"
              '\n'
              '\n'
              '### Custom\n')

Fragment(uuid='8970737b-2809-4c5f-8727-248f11273012',
         path='/lib/dblayer/model/function.py',
         lineno=5,
         depth=0,
         type='class',
         name='BaseFunction',
         text='class BaseFunction:\n'
              '    """ Base class for functions\n'
              '    """\n'
              '\n'
              '    def __init__(self, *args):\n'
              '        self.args = args\n'
              '\n'
              '        assert self.__class__ is not BaseFunction, (\n'
              "            'Only subclasses of BaseFunction can be "
              "instantiated!')\n"
              '\n'
              '    def __str__(self):\n'
              "        return '<%s%r>' % (self.__class__.__name__, "
              'tuple(self.args))\n'
              '\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(map(repr, self.args)))")

Fragment(uuid='9ca8b772-9c73-429b-a3e6-236aa60d5934',
         path='/lib/dblayer/model/function.py',
         lineno=9,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, *args):\n'
              '        self.args = args\n'
              '\n'
              '        assert self.__class__ is not BaseFunction, (\n'
              "            'Only subclasses of BaseFunction can be "
              "instantiated!')")

Fragment(uuid='9094a095-1106-42c2-a16c-e99609696bcf',
         path='/lib/dblayer/model/function.py',
         lineno=10,
         depth=4,
         type='variable',
         name='self.args',
         text='self.args = args')

Fragment(uuid='d91a687e-5c5d-4f8a-8653-b407e0a65706',
         path='/lib/dblayer/model/function.py',
         lineno=15,
         depth=2,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s%r>' % (self.__class__.__name__, "
              'tuple(self.args))')

Fragment(uuid='42978961-176c-4f1f-9699-849a7b43729a',
         path='/lib/dblayer/model/function.py',
         lineno=18,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(map(repr, self.args)))")

Fragment(uuid='6dbe79c2-53fe-4750-a17b-477658125249',
         path='/lib/dblayer/model/function.py',
         lineno=26,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Custom(BaseFunction):\n'
              '    """ Custom function\n'
              '    \n'
              "    It is useful for inspected databases, where we don't have "
              'expressions in parsed format.\n'
              '    \n'
              '    """\n'
              '\n'
              '\n'
              '### Variable\n')

Fragment(uuid='06d4bf19-4eeb-46c6-b1fb-f50b23a4c6de',
         path='/lib/dblayer/model/function.py',
         lineno=27,
         depth=0,
         type='class',
         name='Custom',
         text='class Custom(BaseFunction):\n'
              '    """ Custom function\n'
              '    \n'
              "    It is useful for inspected databases, where we don't have "
              'expressions in parsed format.\n'
              '    \n'
              '    """')

Fragment(uuid='f0ce09e8-2dcd-458e-8a63-e140c02ef0ca',
         path='/lib/dblayer/model/function.py',
         lineno=36,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Var(BaseFunction):\n'
              '    """ Variable reference\n'
              '    \n'
              '    It is useful for triggers and domains, where the variable '
              'name\n'
              '    is determined by the SQL server ("new" or "value").\n'
              '    \n'
              '    """\n'
              '\n'
              '\n'
              '### Logical\n')

Fragment(uuid='e498cafb-15f3-42f9-8d46-57ed6e05fd9e',
         path='/lib/dblayer/model/function.py',
         lineno=37,
         depth=0,
         type='class',
         name='Var',
         text='class Var(BaseFunction):\n'
              '    """ Variable reference\n'
              '    \n'
              '    It is useful for triggers and domains, where the variable '
              'name\n'
              '    is determined by the SQL server ("new" or "value").\n'
              '    \n'
              '    """')

Fragment(uuid='436bf8d0-5b90-45db-8b73-d6dce9f21f7c',
         path='/lib/dblayer/model/function.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Not(BaseFunction):\n'
              '    """ Logical NOT of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a):\n'
              '        BaseFunction.__init__(self, a)\n')

Fragment(uuid='caa022e9-507e-4a6a-9b56-34b427a61f2f',
         path='/lib/dblayer/model/function.py',
         lineno=48,
         depth=0,
         type='class',
         name='Not',
         text='class Not(BaseFunction):\n'
              '    """ Logical NOT of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a):\n'
              '        BaseFunction.__init__(self, a)')

Fragment(uuid='6af725c6-7904-4d1a-aad7-a89fafbfd27d',
         path='/lib/dblayer/model/function.py',
         lineno=55,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, a):\n        BaseFunction.__init__(self, a)')

Fragment(uuid='6276852f-25b5-488d-a8b0-af05c4b02c49',
         path='/lib/dblayer/model/function.py',
         lineno=57,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class And(BaseFunction):\n'
              '    """ Logical AND of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n')

Fragment(uuid='bd708985-cf11-4b18-871b-be4df79581e8',
         path='/lib/dblayer/model/function.py',
         lineno=59,
         depth=0,
         type='class',
         name='And',
         text='class And(BaseFunction):\n'
              '    """ Logical AND of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """')

Fragment(uuid='32588485-aa84-415c-aa5f-0cdf2852e73d',
         path='/lib/dblayer/model/function.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Or(BaseFunction):\n'
              '    """ Logical OR of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '\n'
              '### Comparision\n')

Fragment(uuid='d6676ca5-ba8c-49c4-ad15-fd553c9323f6',
         path='/lib/dblayer/model/function.py',
         lineno=67,
         depth=0,
         type='class',
         name='Or',
         text='class Or(BaseFunction):\n'
              '    """ Logical OR of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """')

Fragment(uuid='f78abda6-7f18-4350-92ad-0f998de4f00b',
         path='/lib/dblayer/model/function.py',
         lineno=76,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Equal(BaseFunction):\n'
              '    """ True if its two parameters are equal\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='6fe82378-8045-477f-aeba-edb566969d2e',
         path='/lib/dblayer/model/function.py',
         lineno=77,
         depth=0,
         type='class',
         name='Equal',
         text='class Equal(BaseFunction):\n'
              '    """ True if its two parameters are equal\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='bacc31ec-618e-4529-a81d-69b0578ae383',
         path='/lib/dblayer/model/function.py',
         lineno=84,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='48a5faa2-7177-4cd8-82b8-48b2c873fc04',
         path='/lib/dblayer/model/function.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class NotEqual(BaseFunction):\n'
              '    """ True if its two parameters are not equal\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='e6262045-8c65-4d99-9f43-4a82c148e6b1',
         path='/lib/dblayer/model/function.py',
         lineno=88,
         depth=0,
         type='class',
         name='NotEqual',
         text='class NotEqual(BaseFunction):\n'
              '    """ True if its two parameters are not equal\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='54342fb1-3b70-44e9-9a5e-d4be9a15529b',
         path='/lib/dblayer/model/function.py',
         lineno=95,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='e5a5ce07-987f-4c87-a829-2f6113364c2e',
         path='/lib/dblayer/model/function.py',
         lineno=97,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class LessThan(BaseFunction):\n'
              '    """ True if the first parameter is less than the second '
              'one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='85ea1eee-e0a7-4365-b40a-673737529a30',
         path='/lib/dblayer/model/function.py',
         lineno=99,
         depth=0,
         type='class',
         name='LessThan',
         text='class LessThan(BaseFunction):\n'
              '    """ True if the first parameter is less than the second '
              'one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='01423fdb-605f-4360-96ee-bf09a1448507',
         path='/lib/dblayer/model/function.py',
         lineno=106,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='8d29c22a-7b64-4734-98bf-c9efc686925f',
         path='/lib/dblayer/model/function.py',
         lineno=108,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class LessThanOrEqual(BaseFunction):\n'
              '    """ True if the first parameter is less or equal than the '
              'second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='c3fa3ef9-5770-411e-83af-cd0da2b60c53',
         path='/lib/dblayer/model/function.py',
         lineno=110,
         depth=0,
         type='class',
         name='LessThanOrEqual',
         text='class LessThanOrEqual(BaseFunction):\n'
              '    """ True if the first parameter is less or equal than the '
              'second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='06f5860d-d9e3-4327-9fb9-f3d13c01a04f',
         path='/lib/dblayer/model/function.py',
         lineno=117,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='12b34744-a066-4617-9fa0-1223c002402b',
         path='/lib/dblayer/model/function.py',
         lineno=119,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class GreaterThan(BaseFunction):\n'
              '    """ True if the first parameter is greater than the second '
              'one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='c7962bfc-f2b8-4e63-8e57-f5843e5ea71b',
         path='/lib/dblayer/model/function.py',
         lineno=121,
         depth=0,
         type='class',
         name='GreaterThan',
         text='class GreaterThan(BaseFunction):\n'
              '    """ True if the first parameter is greater than the second '
              'one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='cc396f0d-275b-4dbd-95c1-a9d5def6ca75',
         path='/lib/dblayer/model/function.py',
         lineno=128,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='5474cfd8-e468-4fab-a8bc-a57a753bccd5',
         path='/lib/dblayer/model/function.py',
         lineno=130,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class GreaterThanOrEqual(BaseFunction):\n'
              '    """ True if the first parameter is greater than or equal '
              'the second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='6d93d733-e4ab-43e0-b086-573966d835bc',
         path='/lib/dblayer/model/function.py',
         lineno=132,
         depth=0,
         type='class',
         name='GreaterThanOrEqual',
         text='class GreaterThanOrEqual(BaseFunction):\n'
              '    """ True if the first parameter is greater than or equal '
              'the second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='a81841b0-30ef-49f3-8fc6-b02613606a68',
         path='/lib/dblayer/model/function.py',
         lineno=139,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='d585521e-0fbd-4ca7-894d-f0676a6023a4',
         path='/lib/dblayer/model/function.py',
         lineno=141,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class In(BaseFunction):\n'
              '    """ True if its first parameter is in member of the '
              'expression passed as its second parameter\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='4239bf61-5af9-4db3-8e76-ee6f22940dce',
         path='/lib/dblayer/model/function.py',
         lineno=143,
         depth=0,
         type='class',
         name='In',
         text='class In(BaseFunction):\n'
              '    """ True if its first parameter is in member of the '
              'expression passed as its second parameter\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='1c5ff05f-961c-40bb-9daa-daf7e7ae6383',
         path='/lib/dblayer/model/function.py',
         lineno=150,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='a21cba40-d50c-4bda-bab2-9dd1d0bbfdd0',
         path='/lib/dblayer/model/function.py',
         lineno=152,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class NotIn(BaseFunction):\n'
              '    """ True if its first parameter is in member of the '
              'expression passed as its second parameter\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n'
              '\n'
              '\n'
              '### Numeric\n')

Fragment(uuid='4abdec25-df1d-44cd-9201-4ff7319e60bb',
         path='/lib/dblayer/model/function.py',
         lineno=154,
         depth=0,
         type='class',
         name='NotIn',
         text='class NotIn(BaseFunction):\n'
              '    """ True if its first parameter is in member of the '
              'expression passed as its second parameter\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='33dd971a-3d46-492c-81b8-947d9a998005',
         path='/lib/dblayer/model/function.py',
         lineno=161,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='7c6156e3-4042-42b8-8c48-01fc507cc5ce',
         path='/lib/dblayer/model/function.py',
         lineno=166,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Neg(BaseFunction):\n'
              '    """ Negate a single numeric value\n'
              '    """\n'
              '\n'
              '    def __init__(self, a):\n'
              '        BaseFunction.__init__(self, a)\n')

Fragment(uuid='52da5f61-3ef9-4763-9986-28695c1e3280',
         path='/lib/dblayer/model/function.py',
         lineno=167,
         depth=0,
         type='class',
         name='Neg',
         text='class Neg(BaseFunction):\n'
              '    """ Negate a single numeric value\n'
              '    """\n'
              '\n'
              '    def __init__(self, a):\n'
              '        BaseFunction.__init__(self, a)')

Fragment(uuid='10b4f7b4-d60b-4287-8ad6-aa5592fd0007',
         path='/lib/dblayer/model/function.py',
         lineno=171,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, a):\n        BaseFunction.__init__(self, a)')

Fragment(uuid='cf74e5ac-d612-4464-a958-364cc555fd91',
         path='/lib/dblayer/model/function.py',
         lineno=173,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Add(BaseFunction):\n'
              '    """ Add any number of numeric values\n'
              '    """\n')

Fragment(uuid='d0884332-72c7-4d1a-b14f-955ad8806922',
         path='/lib/dblayer/model/function.py',
         lineno=175,
         depth=0,
         type='class',
         name='Add',
         text='class Add(BaseFunction):\n'
              '    """ Add any number of numeric values\n'
              '    """')

Fragment(uuid='334d2e48-fb0c-49c5-b3ca-107ac1cceda1',
         path='/lib/dblayer/model/function.py',
         lineno=178,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Sub(BaseFunction):\n'
              '    """ Subtract any number of numeric values from the first '
              'one\n'
              '    """\n')

Fragment(uuid='e88aef50-cd1b-42f8-bb02-b5fb48f2871a',
         path='/lib/dblayer/model/function.py',
         lineno=180,
         depth=0,
         type='class',
         name='Sub',
         text='class Sub(BaseFunction):\n'
              '    """ Subtract any number of numeric values from the first '
              'one\n'
              '    """')

Fragment(uuid='b8d85709-9d12-4a6e-9ffd-72ca934bd05d',
         path='/lib/dblayer/model/function.py',
         lineno=183,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Mul(BaseFunction):\n'
              '    """ Multiply any number of numeric values\n'
              '    """\n')

Fragment(uuid='b4e34820-afe9-4db9-b294-7dd8057a487e',
         path='/lib/dblayer/model/function.py',
         lineno=185,
         depth=0,
         type='class',
         name='Mul',
         text='class Mul(BaseFunction):\n'
              '    """ Multiply any number of numeric values\n'
              '    """')

Fragment(uuid='5ffedc6e-c005-44fa-aad7-bd70b550d7e6',
         path='/lib/dblayer/model/function.py',
         lineno=188,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Div(BaseFunction):\n'
              '    """ Divide the first numeric value with the subsequent '
              'ones\n'
              '    """\n'
              '\n'
              '\n'
              '# TODO: Pow, Exp, Log, ...\n'
              '\n'
              '### String\n')

Fragment(uuid='b69a2117-5cff-4cae-a5d5-95c97cdf9264',
         path='/lib/dblayer/model/function.py',
         lineno=190,
         depth=0,
         type='class',
         name='Div',
         text='class Div(BaseFunction):\n'
              '    """ Divide the first numeric value with the subsequent '
              'ones\n'
              '    """')

Fragment(uuid='1d9b1d34-51d2-4542-a14d-4da9d19619e2',
         path='/lib/dblayer/model/function.py',
         lineno=198,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Concat(BaseFunction):\n'
              '    """ Concatenates any number of values, also converts them '
              'to strings\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n')

Fragment(uuid='5a1009a5-7f1e-49ae-b042-328db83fd027',
         path='/lib/dblayer/model/function.py',
         lineno=199,
         depth=0,
         type='class',
         name='Concat',
         text='class Concat(BaseFunction):\n'
              '    """ Concatenates any number of values, also converts them '
              'to strings\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """')

Fragment(uuid='680881f3-2ab7-4b51-8def-ed0c8fb6f7f7',
         path='/lib/dblayer/model/function.py',
         lineno=205,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Left(BaseFunction):\n'
              '    """ Take the leftmost characters of a string (string, '
              'count)\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)\n')

Fragment(uuid='72f26cf8-f0c4-4ee3-b68f-fc5b40bff6de',
         path='/lib/dblayer/model/function.py',
         lineno=207,
         depth=0,
         type='class',
         name='Left',
         text='class Left(BaseFunction):\n'
              '    """ Take the leftmost characters of a string (string, '
              'count)\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)')

Fragment(uuid='8a56498d-a17c-4c25-8c3f-2b5f1893badf',
         path='/lib/dblayer/model/function.py',
         lineno=214,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)')

Fragment(uuid='305e59f3-b992-42a6-b1f8-e0c4d7a9d94e',
         path='/lib/dblayer/model/function.py',
         lineno=216,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Right(BaseFunction):\n'
              '    """ Take the rightmost characters of a string (string, '
              'count)\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)\n')

Fragment(uuid='6d829519-4687-4d26-ac5f-7b1c244286bb',
         path='/lib/dblayer/model/function.py',
         lineno=218,
         depth=0,
         type='class',
         name='Right',
         text='class Right(BaseFunction):\n'
              '    """ Take the rightmost characters of a string (string, '
              'count)\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)')

Fragment(uuid='00b97849-025e-4992-b746-5f8839e94c60',
         path='/lib/dblayer/model/function.py',
         lineno=225,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)')

Fragment(uuid='3f27faae-42b3-480a-96b0-0637351252bf',
         path='/lib/dblayer/model/function.py',
         lineno=227,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Substring(BaseFunction):\n'
              '    """ Extract substring (string, first_character[, count])\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, position, length=None):\n'
              '        if length is None:\n'
              '            BaseFunction.__init__(self, text, position)\n'
              '        else:\n'
              '            BaseFunction.__init__(self, text, position, '
              'length)\n')

Fragment(uuid='ede7f105-a405-4290-8ca1-2a1af9c27842',
         path='/lib/dblayer/model/function.py',
         lineno=229,
         depth=0,
         type='class',
         name='Substring',
         text='class Substring(BaseFunction):\n'
              '    """ Extract substring (string, first_character[, count])\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, position, length=None):\n'
              '        if length is None:\n'
              '            BaseFunction.__init__(self, text, position)\n'
              '        else:\n'
              '            BaseFunction.__init__(self, text, position, length)')

Fragment(uuid='6bd92417-cf55-49da-9198-aaff401b575e',
         path='/lib/dblayer/model/function.py',
         lineno=236,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, text, position, length=None):\n'
              '        if length is None:\n'
              '            BaseFunction.__init__(self, text, position)\n'
              '        else:\n'
              '            BaseFunction.__init__(self, text, position, length)')

Fragment(uuid='ec7dfdec-efbf-4736-a865-5b0ec100a368',
         path='/lib/dblayer/model/function.py',
         lineno=241,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Contains(BaseFunction):\n'
              '    """ Checks whether a substring is in text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, substring):\n'
              '        BaseFunction.__init__(self, text, substring)\n')

Fragment(uuid='6e77e790-13d2-4fcc-89a0-12fc8f35dc2c',
         path='/lib/dblayer/model/function.py',
         lineno=243,
         depth=0,
         type='class',
         name='Contains',
         text='class Contains(BaseFunction):\n'
              '    """ Checks whether a substring is in text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, substring):\n'
              '        BaseFunction.__init__(self, text, substring)')

Fragment(uuid='74461cdb-a827-4fb7-bc86-625431b8492e',
         path='/lib/dblayer/model/function.py',
         lineno=250,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, text, substring):\n'
              '        BaseFunction.__init__(self, text, substring)')

Fragment(uuid='315ad28e-dc79-4195-b7b8-a59d69328acb',
         path='/lib/dblayer/model/function.py',
         lineno=252,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Like(BaseFunction):\n'
              '    """ Checks whether a LIKE pattern matches text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)\n')

Fragment(uuid='e4bbad8d-7595-41da-98fe-3c6fb900a52a',
         path='/lib/dblayer/model/function.py',
         lineno=254,
         depth=0,
         type='class',
         name='Like',
         text='class Like(BaseFunction):\n'
              '    """ Checks whether a LIKE pattern matches text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='5b16e694-3760-4f5b-8448-cd9bf2a32fc6',
         path='/lib/dblayer/model/function.py',
         lineno=261,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='ae5896d3-d1c0-4931-819a-9bf039a03983',
         path='/lib/dblayer/model/function.py',
         lineno=263,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class NotLike(BaseFunction):\n'
              '    """ Checks whether a LIKE pattern does not match text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)\n')

Fragment(uuid='fa8fa39d-f8be-497b-8964-2f23bb0c5525',
         path='/lib/dblayer/model/function.py',
         lineno=265,
         depth=0,
         type='class',
         name='NotLike',
         text='class NotLike(BaseFunction):\n'
              '    """ Checks whether a LIKE pattern does not match text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='7b8946a8-35f7-4c5d-8620-41aede0448fd',
         path='/lib/dblayer/model/function.py',
         lineno=272,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='85e1f383-6cdf-43f7-a614-9055bf30737e',
         path='/lib/dblayer/model/function.py',
         lineno=274,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Match(BaseFunction):\n'
              '    """ Checks whether a regular expression matches text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)\n')

Fragment(uuid='6e9bc67c-5e85-4a45-8f60-078c85414de9',
         path='/lib/dblayer/model/function.py',
         lineno=276,
         depth=0,
         type='class',
         name='Match',
         text='class Match(BaseFunction):\n'
              '    """ Checks whether a regular expression matches text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='1b53c225-ad4d-4c75-bda3-9876ff8908a3',
         path='/lib/dblayer/model/function.py',
         lineno=283,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='0ed1b9ae-3841-4056-8187-8aa8152b1f6f',
         path='/lib/dblayer/model/function.py',
         lineno=285,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class NotMatch(BaseFunction):\n'
              '    """ Checks whether a regular expression does not matche '
              'text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)\n')

Fragment(uuid='807f48d2-8d7f-404d-8674-99d6185a6887',
         path='/lib/dblayer/model/function.py',
         lineno=287,
         depth=0,
         type='class',
         name='NotMatch',
         text='class NotMatch(BaseFunction):\n'
              '    """ Checks whether a regular expression does not matche '
              'text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='e7025744-2dbd-4a21-9298-9fff667a2fad',
         path='/lib/dblayer/model/function.py',
         lineno=294,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='a00551a0-7107-4929-aa96-e37748f1ec49',
         path='/lib/dblayer/model/function.py',
         lineno=296,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class FullTextSearch(BaseFunction):\n'
              '    """ Performs full text search\n'
              '    \n'
              '    For optimal performance the expression should be a column '
              'with a \n'
              '    full text search index on it, but it also works for any '
              'expression\n'
              '    resulting in a string or a value can be converted to a '
              'string.\n'
              '    \n'
              '    The pattern is like: word1 & word2\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, column, pattern):\n'
              '        BaseFunction.__init__(self, column, pattern)\n'
              '\n'
              '\n'
              '### Selection\n')

Fragment(uuid='491e7f25-0495-487b-9dc5-5476a92edf4a',
         path='/lib/dblayer/model/function.py',
         lineno=298,
         depth=0,
         type='class',
         name='FullTextSearch',
         text='class FullTextSearch(BaseFunction):\n'
              '    """ Performs full text search\n'
              '    \n'
              '    For optimal performance the expression should be a column '
              'with a \n'
              '    full text search index on it, but it also works for any '
              'expression\n'
              '    resulting in a string or a value can be converted to a '
              'string.\n'
              '    \n'
              '    The pattern is like: word1 & word2\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, column, pattern):\n'
              '        BaseFunction.__init__(self, column, pattern)')

Fragment(uuid='8d0f4889-a9fa-4773-bed9-d4fe0a6d775e',
         path='/lib/dblayer/model/function.py',
         lineno=311,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, column, pattern):\n'
              '        BaseFunction.__init__(self, column, pattern)')

Fragment(uuid='56af2440-9a20-4c43-bac8-cbc107aae2c5',
         path='/lib/dblayer/model/function.py',
         lineno=316,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Coalesce(BaseFunction):\n'
              '    """ Results in the first not-NULL expression or NULL if all '
              'are NULL\n'
              '    """\n'
              '\n'
              '# TODO: If-Else, Case-Else\n'
              '\n'
              '### GIS functions\n'
              '\n'
              '# TODO\n')

Fragment(uuid='0a8694c7-2445-4ce6-811b-3cf66ab40811',
         path='/lib/dblayer/model/function.py',
         lineno=317,
         depth=0,
         type='class',
         name='Coalesce',
         text='class Coalesce(BaseFunction):\n'
              '    """ Results in the first not-NULL expression or NULL if all '
              'are NULL\n'
              '    """')

Fragment(uuid='da1742da-b2a8-4ea3-9607-9f69cb997b28',
         path='/lib/dblayer/model/index.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Index definitions\n"""\n\nfrom dblayer import util\n')

Fragment(uuid='3229e019-f68c-4e3e-ba98-5edec9fab138',
         path='/lib/dblayer/model/index.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/index.py\n'
              '  Classes: BaseIndex FullTextSearchIndex Index\n'
              '  Methods: __init__ __repr__ __str__ clone '
              'get_implicit_definition_list_for_table_class sort_key\n'
              '  Variables: __definition_serial__ clone clone.columns '
              'clone.table columns implicit name self.__definition_serial__ '
              'self.columns table table_class\n'
              '  Usages: __class__ __dict__ __module__ __name__ column dblayer '
              'get_next_definition_serial getattr join obj rsplit self '
              'staticmethod update util\n')

Fragment(uuid='6dff2cf9-0f19-4754-8b41-e0daf18501f4',
         path='/lib/dblayer/model/index.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import util')

Fragment(uuid='52898521-7563-4242-9636-824dc102cc1a',
         path='/lib/dblayer/model/index.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseIndex:\n'
              '    """ Base class for database indexes models\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this column\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this column or '
              'None for model columns\n'
              '  ')

Fragment(uuid='ff185a49-69d5-4a1e-917f-a59ea0ced273',
         path='/lib/dblayer/model/index.py',
         lineno=7,
         depth=0,
         type='class',
         name='BaseIndex',
         text='class BaseIndex:\n'
              '    """ Base class for database indexes models\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this column\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this column or '
              'None for model columns\n'
              '   ')

Fragment(uuid='33c697c0-ac24-49e3-b879-ba23fd0f6e31',
         path='/lib/dblayer/model/index.py',
         lineno=12,
         depth=2,
         type='variable',
         name='__definition_serial__',
         text='__definition_serial__ = 0')

Fragment(uuid='457ac693-8fac-4722-96ff-ecafd60aae97',
         path='/lib/dblayer/model/index.py',
         lineno=16,
         depth=2,
         type='variable',
         name='table_class',
         text='table_class = None')

Fragment(uuid='5e6b931a-03a0-43d9-bba9-8fd5f29647d2',
         path='/lib/dblayer/model/index.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text='  # NOTE: Filled in by Table.__init__ as part of cloning the '
              'columns from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the constraint\n'
              '    # NOTE: Set by __new__ in the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # List of the member columns\n'
              '    columns = ()\n'
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='95072136-3d21-4e7b-b772-cdae7045c991',
         path='/lib/dblayer/model/index.py',
         lineno=19,
         depth=0,
         type='class',
         name='BaseIndex',
         text=' # NOTE: Filled in by Table.__init__ as part of cloning the '
              'columns from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the constraint\n'
              '    # NOTE: Set by __new__ in the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # List of the member columns\n'
              '    columns = ()\n'
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='917ed91e-2930-4151-b0c7-27bc309927e1',
         path='/lib/dblayer/model/index.py',
         lineno=20,
         depth=2,
         type='variable',
         name='table',
         text='table = None')

Fragment(uuid='bd8bcc4b-7d1e-4678-a993-8488865550a6',
         path='/lib/dblayer/model/index.py',
         lineno=24,
         depth=2,
         type='variable',
         name='name',
         text="name = ''")

Fragment(uuid='158e7ee2-07b4-4ffc-ad06-095c3d6b1438',
         path='/lib/dblayer/model/index.py',
         lineno=27,
         depth=2,
         type='variable',
         name='columns',
         text='columns = ()')

Fragment(uuid='653a8bd5-56e7-44c1-95ea-f3e6ffa26c04',
         path='/lib/dblayer/model/index.py',
         lineno=30,
         depth=2,
         type='variable',
         name='implicit',
         text='implicit = False')

Fragment(uuid='bfc82c29-b821-4e40-8370-c4689406d96b',
         path='/lib/dblayer/model/index.py',
         lineno=33,
         depth=0,
         type='module',
         name='',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='3efc066b-e441-4bd5-b1ce-97236cb42373',
         path='/lib/dblayer/model/index.py',
         lineno=33,
         depth=0,
         type='class',
         name='BaseIndex',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='6d07e27b-844e-43cc-bb6c-c42541eac48c',
         path='/lib/dblayer/model/index.py',
         lineno=33,
         depth=3,
         type='function',
         name='sort_key',
         text='def sort_key(obj):\n        return obj.__definition_serial__')

Fragment(uuid='5aa799f7-3121-445e-be70-d92678f82528',
         path='/lib/dblayer/model/index.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, *columns):\n'
              '        assert self.__class__ is not BaseIndex, (\n'
              "            'Only subclasses of BaseIndex can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Verify\n'
              "        assert columns, 'This index must be applied to at least "
              "one column!'\n"
              '        self.columns = columns\n')

Fragment(uuid='89ccd93f-3820-4a79-b448-d0d6eaf78cc0',
         path='/lib/dblayer/model/index.py',
         lineno=35,
         depth=0,
         type='class',
         name='BaseIndex',
         text='\n'
              '    def __init__(self, *columns):\n'
              '        assert self.__class__ is not BaseIndex, (\n'
              "            'Only subclasses of BaseIndex can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Verify\n'
              "        assert columns, 'This index must be applied to at least "
              "one column!'\n"
              '        self.columns = columns\n')

Fragment(uuid='743e51d0-3860-4a66-bedb-16a0e61d73d2',
         path='/lib/dblayer/model/index.py',
         lineno=36,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, *columns):\n'
              '        assert self.__class__ is not BaseIndex, (\n'
              "            'Only subclasses of BaseIndex can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Verify\n'
              "        assert columns, 'This index must be applied to at least "
              "one column!'\n"
              '        self.columns = columns')

Fragment(uuid='f3fd3ce4-9f3e-4c07-9904-8056a93cc9eb',
         path='/lib/dblayer/model/index.py',
         lineno=41,
         depth=4,
         type='variable',
         name='self.__definition_serial__',
         text='self.__definition_serial__ = util.get_next_definition_serial()')

Fragment(uuid='206fd053-956e-461e-acf8-3972570cd4a3',
         path='/lib/dblayer/model/index.py',
         lineno=45,
         depth=4,
         type='variable',
         name='self.columns',
         text='self.columns = columns')

Fragment(uuid='973d8003-7799-4220-8dc6-f3d4227842fb',
         path='/lib/dblayer/model/index.py',
         lineno=46,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Index: %s.%s on %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='819ac878-604c-40ff-b517-339034c37d25',
         path='/lib/dblayer/model/index.py',
         lineno=46,
         depth=0,
         type='class',
         name='BaseIndex',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Index: %s.%s on %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='fb56d5b4-3d77-4450-855d-d79268c9e08b',
         path='/lib/dblayer/model/index.py',
         lineno=47,
         depth=2,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Index: %s.%s on %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              "            ', '.join(column.name for column in self.columns))")

Fragment(uuid='188b9443-6c23-43d6-b2c6-11f9c2291361',
         path='/lib/dblayer/model/index.py',
         lineno=53,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='767087be-69fc-4636-8a2e-43ac5c851945',
         path='/lib/dblayer/model/index.py',
         lineno=53,
         depth=0,
         type='class',
         name='BaseIndex',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='8a811212-dcf8-47b4-97c9-604444e2b6f2',
         path='/lib/dblayer/model/index.py',
         lineno=54,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))")

Fragment(uuid='4cecffb9-6a49-49b0-a66e-f041fc71d550',
         path='/lib/dblayer/model/index.py',
         lineno=59,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this index for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='f45c7f63-6fe9-4555-bf0c-20e81bc1f5fd',
         path='/lib/dblayer/model/index.py',
         lineno=59,
         depth=0,
         type='class',
         name='BaseIndex',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this index for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='83ff33c8-6a6a-4df3-bf85-17e817fe323a',
         path='/lib/dblayer/model/index.py',
         lineno=60,
         depth=2,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        """ Clone this index for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='697b325c-6a79-4635-be21-fb7a9504b5d6',
         path='/lib/dblayer/model/index.py',
         lineno=66,
         depth=4,
         type='variable',
         name='clone',
         text='clone = self.__class__(None)')

Fragment(uuid='d6556e8c-5329-4230-a5e3-822ad53138d7',
         path='/lib/dblayer/model/index.py',
         lineno=68,
         depth=4,
         type='variable',
         name='clone.columns',
         text='clone.columns = [getattr(table, column.name) for column in '
              'self.columns]')

Fragment(uuid='745eeb2d-f724-42d5-9aab-426df93629ff',
         path='/lib/dblayer/model/index.py',
         lineno=69,
         depth=4,
         type='variable',
         name='clone.table',
         text='clone.table = table')

Fragment(uuid='1013a787-2d8a-41fb-a235-ae818e100118',
         path='/lib/dblayer/model/index.py',
         lineno=71,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []\n')

Fragment(uuid='13a0ab74-aab6-4af7-9980-5a5907532cd4',
         path='/lib/dblayer/model/index.py',
         lineno=71,
         depth=0,
         type='class',
         name='BaseIndex',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []')

Fragment(uuid='20889063-65b3-468a-851a-1c70b44913ee',
         path='/lib/dblayer/model/index.py',
         lineno=72,
         depth=2,
         type='function',
         name='get_implicit_definition_list_for_table_class',
         text='def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []')

Fragment(uuid='cab3a513-e7dc-4b32-9aa8-9a206145b021',
         path='/lib/dblayer/model/index.py',
         lineno=78,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Index(BaseIndex):\n'
              '    """ Regular B-Tree based index\n'
              '    """\n')

Fragment(uuid='bbb14dcb-b174-4779-9139-7692d0ee9db6',
         path='/lib/dblayer/model/index.py',
         lineno=80,
         depth=0,
         type='class',
         name='Index',
         text='class Index(BaseIndex):\n'
              '    """ Regular B-Tree based index\n'
              '    """')

Fragment(uuid='0e9ec0d1-f85f-490f-9f73-00c67a7f83cb',
         path='/lib/dblayer/model/index.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class FullTextSearchIndex(BaseIndex):\n'
              '    """ Full text search index\n'
              '    \n'
              '    This kind of index is automatically applied to a '
              'SearchDocument columns.\n'
              '    \n'
              '    """\n')

Fragment(uuid='4512befd-0004-4806-a873-617c76e047b0',
         path='/lib/dblayer/model/index.py',
         lineno=85,
         depth=0,
         type='class',
         name='FullTextSearchIndex',
         text='class FullTextSearchIndex(BaseIndex):\n'
              '    """ Full text search index\n'
              '    \n'
              '    This kind of index is automatically applied to a '
              'SearchDocument columns.\n'
              '    \n'
              '    """')

Fragment(uuid='eaeb91eb-1d54-46eb-920d-79bb5ff2472a',
         path='/lib/dblayer/model/procedure.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Procedure definitions\n"""\n\nfrom dblayer import util\n')

Fragment(uuid='315da35e-99c0-411b-a0b7-aef65cf2f5e9',
         path='/lib/dblayer/model/procedure.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/procedure.py\n'
              '  Classes: BaseProcedure Procedure\n'
              '  Methods: __init__ __repr__ __str__ clone sort_key\n'
              '  Variables: __definition_serial__ clone clone.database '
              'database_class name self.__definition_serial__ '
              'self.argument_list self.body self.language self.result\n'
              '  Usages: __class__ __dict__ __module__ __name__ argument_list '
              'body database dblayer get_next_definition_serial language obj '
              'result rsplit self staticmethod tuple update util\n')

Fragment(uuid='ac6e65f9-e74a-46c7-8441-6dba077425c7',
         path='/lib/dblayer/model/procedure.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import util')

Fragment(uuid='46b59815-71f7-4afd-b23e-df50c758bf23',
         path='/lib/dblayer/model/procedure.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseProcedure:\n'
              '    """ Base class for stored procedures\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of procedure '
              'definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the database class containing this '
              'procedure\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              '    database_class = None\n'
              '\n'
              '    # Name of the procedure\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              "    name = ''\n"
              '\n'
              '    @staticmethod\n')

Fragment(uuid='5c6993b5-1fa5-4ec8-b94a-3a2b731ec9c4',
         path='/lib/dblayer/model/procedure.py',
         lineno=7,
         depth=0,
         type='class',
         name='BaseProcedure',
         text='class BaseProcedure:\n'
              '    """ Base class for stored procedures\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of procedure '
              'definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the database class containing this '
              'procedure\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              '    database_class = None\n'
              '\n'
              '    # Name of the procedure\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              "    name = ''\n"
              '\n'
              '    @staticmethod\n')

Fragment(uuid='a3fb845a-5047-4fc4-923e-9854a81ceb32',
         path='/lib/dblayer/model/procedure.py',
         lineno=12,
         depth=2,
         type='variable',
         name='__definition_serial__',
         text='__definition_serial__ = 0')

Fragment(uuid='e90c2c22-c54d-4c72-8a74-cdaaae7d49e2',
         path='/lib/dblayer/model/procedure.py',
         lineno=16,
         depth=2,
         type='variable',
         name='database_class',
         text='database_class = None')

Fragment(uuid='8357d2a3-c823-41b8-b7d0-21771b34ed44',
         path='/lib/dblayer/model/procedure.py',
         lineno=20,
         depth=2,
         type='variable',
         name='name',
         text="name = ''")

Fragment(uuid='6f9ea6af-3839-482f-a79c-1ef366432044',
         path='/lib/dblayer/model/procedure.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='282c5267-d4f7-47ac-b73f-541dfa51353a',
         path='/lib/dblayer/model/procedure.py',
         lineno=23,
         depth=0,
         type='class',
         name='BaseProcedure',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='cd4db946-e07f-4c89-a36a-b1be4497dcc0',
         path='/lib/dblayer/model/procedure.py',
         lineno=23,
         depth=3,
         type='function',
         name='sort_key',
         text='def sort_key(obj):\n        return obj.__definition_serial__')

Fragment(uuid='971a2598-292f-42c6-9beb-2293c3f154dc',
         path='/lib/dblayer/model/procedure.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, language, argument_list, result, body):\n'
              '        assert self.__class__ is not BaseProcedure, (\n'
              "            'Only subclasses of BaseProcedure can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.language = language\n'
              '        self.argument_list = argument_list\n'
              '        self.result = result\n'
              '        self.body = body\n')

Fragment(uuid='224e01e9-548e-4702-bb49-82b6e0ba3e9a',
         path='/lib/dblayer/model/procedure.py',
         lineno=25,
         depth=0,
         type='class',
         name='BaseProcedure',
         text='\n'
              '    def __init__(self, language, argument_list, result, body):\n'
              '        assert self.__class__ is not BaseProcedure, (\n'
              "            'Only subclasses of BaseProcedure can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.language = language\n'
              '        self.argument_list = argument_list\n'
              '        self.result = result\n'
              '        self.body = body\n')

Fragment(uuid='f54a4c37-7d37-4cff-a4c5-8be95a56cb84',
         path='/lib/dblayer/model/procedure.py',
         lineno=26,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, language, argument_list, result, body):\n'
              '        assert self.__class__ is not BaseProcedure, (\n'
              "            'Only subclasses of BaseProcedure can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.language = language\n'
              '        self.argument_list = argument_list\n'
              '        self.result = result\n'
              '        self.body = body')

Fragment(uuid='9f9dc22b-ef24-4103-b275-05ebe65dfef8',
         path='/lib/dblayer/model/procedure.py',
         lineno=31,
         depth=4,
         type='variable',
         name='self.__definition_serial__',
         text='self.__definition_serial__ = util.get_next_definition_serial()')

Fragment(uuid='8d5ed853-4ce9-4a73-b8f2-c0157b5a1438',
         path='/lib/dblayer/model/procedure.py',
         lineno=33,
         depth=4,
         type='variable',
         name='self.language',
         text='self.language = language')

Fragment(uuid='961f8424-6c27-4936-95c4-638c69ebc2bb',
         path='/lib/dblayer/model/procedure.py',
         lineno=34,
         depth=4,
         type='variable',
         name='self.argument_list',
         text='self.argument_list = argument_list')

Fragment(uuid='18109914-a24f-4294-b251-755887a7502f',
         path='/lib/dblayer/model/procedure.py',
         lineno=35,
         depth=4,
         type='variable',
         name='self.result',
         text='self.result = result')

Fragment(uuid='272da478-89c4-4e98-ab08-0f1b8f6de51b',
         path='/lib/dblayer/model/procedure.py',
         lineno=36,
         depth=4,
         type='variable',
         name='self.body',
         text='self.body = body')

Fragment(uuid='cf6b0f24-6df0-42db-bc42-31d24cfb9cc0',
         path='/lib/dblayer/model/procedure.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s: %s%r returns %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.name,\n'
              '            tuple(self.argument_list),\n'
              '            self.result)\n')

Fragment(uuid='e5b31425-2a77-41db-9d28-0df338283a15',
         path='/lib/dblayer/model/procedure.py',
         lineno=37,
         depth=0,
         type='class',
         name='BaseProcedure',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s: %s%r returns %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.name,\n'
              '            tuple(self.argument_list),\n'
              '            self.result)\n')

Fragment(uuid='4a42f0d8-13db-49a7-b72e-4c3007453ad1',
         path='/lib/dblayer/model/procedure.py',
         lineno=38,
         depth=2,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s: %s%r returns %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.name,\n'
              '            tuple(self.argument_list),\n'
              '            self.result)')

Fragment(uuid='12c961e8-0c8c-450a-9201-a7963e746365',
         path='/lib/dblayer/model/procedure.py',
         lineno=44,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r, %r, %r, %r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.language,\n'
              '            self.argument_list,\n'
              '            self.result,\n'
              '            self.body)\n')

Fragment(uuid='1512177c-7948-486a-b3bd-f8b41b7a2da6',
         path='/lib/dblayer/model/procedure.py',
         lineno=44,
         depth=0,
         type='class',
         name='BaseProcedure',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r, %r, %r, %r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.language,\n'
              '            self.argument_list,\n'
              '            self.result,\n'
              '            self.body)\n')

Fragment(uuid='987c9150-2d2f-44ed-87d4-ada05f3bdcee',
         path='/lib/dblayer/model/procedure.py',
         lineno=45,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%r, %r, %r, %r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.language,\n'
              '            self.argument_list,\n'
              '            self.result,\n'
              '            self.body)')

Fragment(uuid='34233896-da03-4f02-8b41-9480e3467f12',
         path='/lib/dblayer/model/procedure.py',
         lineno=53,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, database):\n'
              '        """ Clone this procedure for the database instance\n'
              '        \n'
              '        NOTE: It is called by Database.__init__ to bound the '
              'procedures to the database instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.database = database\n'
              '        return clone\n')

Fragment(uuid='752ec049-3775-4c89-be14-00201fd1b73b',
         path='/lib/dblayer/model/procedure.py',
         lineno=53,
         depth=0,
         type='class',
         name='BaseProcedure',
         text='\n'
              '    def clone(self, database):\n'
              '        """ Clone this procedure for the database instance\n'
              '        \n'
              '        NOTE: It is called by Database.__init__ to bound the '
              'procedures to the database instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.database = database\n'
              '        return clone')

Fragment(uuid='090130dd-f1b3-4851-b1eb-d3f076bbf4e1',
         path='/lib/dblayer/model/procedure.py',
         lineno=54,
         depth=2,
         type='function',
         name='clone',
         text='def clone(self, database):\n'
              '        """ Clone this procedure for the database instance\n'
              '        \n'
              '        NOTE: It is called by Database.__init__ to bound the '
              'procedures to the database instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.database = database\n'
              '        return clone')

Fragment(uuid='1a8160a6-8785-4c3b-abd5-695d0ac42971',
         path='/lib/dblayer/model/procedure.py',
         lineno=60,
         depth=4,
         type='variable',
         name='clone',
         text='clone = self.__class__(None)')

Fragment(uuid='220d9ae6-03e8-4c68-acc6-dd43f64d1d00',
         path='/lib/dblayer/model/procedure.py',
         lineno=62,
         depth=4,
         type='variable',
         name='clone.database',
         text='clone.database = database')

Fragment(uuid='70c8cb8a-2dd4-4bda-aef3-e65368e977d8',
         path='/lib/dblayer/model/procedure.py',
         lineno=64,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Procedure(BaseProcedure):\n'
              '    """ Stored procedure\n'
              '    """\n')

Fragment(uuid='51910736-782c-46ee-b430-dac2df96576a',
         path='/lib/dblayer/model/procedure.py',
         lineno=66,
         depth=0,
         type='class',
         name='Procedure',
         text='class Procedure(BaseProcedure):\n'
              '    """ Stored procedure\n'
              '    """')

Fragment(uuid='ae84b232-70e3-4faf-a2af-1b09fcb6b1d3',
         path='/lib/dblayer/model/query.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Base class for query definitions\n'
              '"""\n'
              '\n'
              'from dblayer import constants\n'
              '\n'
              'from dblayer.model import table, column, index\n')

Fragment(uuid='d39a7a15-8c26-4b4a-82e0-ae800f5bd8eb',
         path='/lib/dblayer/model/query.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/query.py\n'
              '  Classes: BaseQueryResult Condition PostCondition Query '
              'Result\n'
              '  Methods: __init__ __new__ __repr__ '
              '_collect_result_condition_list clone get_table_list initialize '
              'iterate_joined_tables pretty_format_class\n'
              '  Variables: __str__ _condition_list _creatable _group_by '
              '_order_by _table_map _writable after_group_by append_line clone '
              'clone.table cls._column_list cls._condition_list '
              'cls._initialized cls._table_map cls._table_map[name] '
              'column_type expression foreign_key item join_type line_list '
              'referer_table self.column_type self.expression '
              'self.full_repr_exclude table_list table_map value value._name '
              'value.name value.table_class visited\n'
              '  Usages: BaseColumn DEBUG FullTextSearchIndex INNER_JOIN '
              'LEFT_JOIN Table Text __class__ __dict__ __doc__ __name__ '
              '_column_list _initialized _name _primary_key _referer '
              '_table_name add alias alias_name append classmethod cls column '
              'constants copy dblayer dir doc full_repr full_repr_exclude '
              'getattr index isinstance items join key len list model name '
              'null obj range referer self set sort sort_key sorted strip sum '
              'super table table_class update\n')

Fragment(uuid='10a877e5-4629-4ae9-b4f0-955b4d51aeb0',
         path='/lib/dblayer/model/query.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import constants')

Fragment(uuid='8d43c3de-af37-42b2-aeb5-5a303d578cf7',
         path='/lib/dblayer/model/query.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.model import table, column, index')

Fragment(uuid='b9fbc161-5c59-49ce-9350-74a04f50c1fc',
         path='/lib/dblayer/model/query.py',
         lineno=7,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Query(table.Table):\n'
              '    """ Query\n'
              '    """\n'
              '    # Queries need not be created and cannot be written\n'
              '    _creatable = False\n'
              '    _writable = False\n'
              '\n'
              '    # Mapping of alias names to the source Table instances\n'
              '    # NOTE: Filled in by the __new__ class method\n'
              '    _table_map = None\n'
              '\n'
              '    # Conditions\n'
              '    # NOTE: Filled in by the __new__ class method\n'
              '    _condition_list = ()\n'
              '\n'
              '    # Group by expressions (override in your subclass)\n'
              '    _group_by = ()\n'
              '\n'
              '    # Ordering expressions (override in your subclass)\n'
              '    _order_by = ()\n')

Fragment(uuid='bdfab6a0-82ad-4d2b-80a2-09133700375c',
         path='/lib/dblayer/model/query.py',
         lineno=9,
         depth=0,
         type='class',
         name='Query',
         text='class Query(table.Table):\n'
              '    """ Query\n'
              '    """\n'
              '    # Queries need not be created and cannot be written\n'
              '    _creatable = False\n'
              '    _writable = False\n'
              '\n'
              '    # Mapping of alias names to the source Table instances\n'
              '    # NOTE: Filled in by the __new__ class method\n'
              '    _table_map = None\n'
              '\n'
              '    # Conditions\n'
              '    # NOTE: Filled in by the __new__ class method\n'
              '    _condition_list = ()\n'
              '\n'
              '    # Group by expressions (override in your subclass)\n'
              '    _group_by = ()\n'
              '\n'
              '    # Ordering expressions (override in your subclass)\n'
              '    _order_by = ()\n')

Fragment(uuid='2976000d-cdb4-4612-8bed-a37d25e619ab',
         path='/lib/dblayer/model/query.py',
         lineno=13,
         depth=2,
         type='variable',
         name='_creatable',
         text='_creatable = False')

Fragment(uuid='f9a92e63-b19d-46d2-81b4-34b4623ad4ea',
         path='/lib/dblayer/model/query.py',
         lineno=14,
         depth=2,
         type='variable',
         name='_writable',
         text='_writable = False')

Fragment(uuid='2ecaf301-39fe-4942-9304-1e99e8f07759',
         path='/lib/dblayer/model/query.py',
         lineno=18,
         depth=2,
         type='variable',
         name='_table_map',
         text='_table_map = None')

Fragment(uuid='44d047dc-3120-471b-8bfa-7b1c4c0f60a6',
         path='/lib/dblayer/model/query.py',
         lineno=22,
         depth=2,
         type='variable',
         name='_condition_list',
         text='_condition_list = ()')

Fragment(uuid='48f9134e-33b6-4489-b1d9-37880dd98980',
         path='/lib/dblayer/model/query.py',
         lineno=25,
         depth=2,
         type='variable',
         name='_group_by',
         text='_group_by = ()')

Fragment(uuid='ea9d7e59-bab1-4cd8-8366-6ff8a45dc962',
         path='/lib/dblayer/model/query.py',
         lineno=28,
         depth=2,
         type='variable',
         name='_order_by',
         text='_order_by = ()')

Fragment(uuid='f2047cf2-760a-46a0-b925-d57b4fcb849b',
         path='/lib/dblayer/model/query.py',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Query, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='3cd1cd7c-9892-4b9b-b1a3-2178552996b8',
         path='/lib/dblayer/model/query.py',
         lineno=29,
         depth=0,
         type='class',
         name='Query',
         text='\n'
              '    def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Query, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='37c68156-dbc7-4300-baee-4e912b6b6f38',
         path='/lib/dblayer/model/query.py',
         lineno=30,
         depth=2,
         type='function',
         name='__new__',
         text='def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Query, cls).__new__(cls)')

Fragment(uuid='c6ba01b7-3b8c-4cd1-896d-e67adc6e74a5',
         path='/lib/dblayer/model/query.py',
         lineno=38,
         depth=0,
         type='module',
         name='',
         text='    def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              "        # NOTE: It prevent Table's initialization from being "
              'executed, it is intentional\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Collect objects from the class definition\n'
              '        cls._collect_result_condition_list()\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='d1300fe6-d7d6-45b5-97f9-886c2aba085b',
         path='/lib/dblayer/model/query.py',
         lineno=38,
         depth=0,
         type='class',
         name='Query',
         text='    def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              "        # NOTE: It prevent Table's initialization from being "
              'executed, it is intentional\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Collect objects from the class definition\n'
              '        cls._collect_result_condition_list()\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='854665f3-87c1-40d9-bc1c-c3e25eb83d5a',
         path='/lib/dblayer/model/query.py',
         lineno=38,
         depth=3,
         type='function',
         name='initialize',
         text='def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              "        # NOTE: It prevent Table's initialization from being "
              'executed, it is intentional\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Collect objects from the class definition\n'
              '        cls._collect_result_condition_list()')

Fragment(uuid='153b0aec-8b59-464b-98be-3b410647a402',
         path='/lib/dblayer/model/query.py',
         lineno=42,
         depth=5,
         type='variable',
         name='cls._initialized',
         text='cls._initialized = True')

Fragment(uuid='c9704bf6-9313-4728-a442-5359c323c69e',
         path='/lib/dblayer/model/query.py',
         lineno=48,
         depth=0,
         type='module',
         name='',
         text='    def _collect_result_condition_list(cls):\n'
              '        """ Collects the result column and condition '
              'definitions from the model class\n'
              '        """\n'
              '        cls._table_map = {}\n'
              '        cls._column_list = []\n'
              '        cls._condition_list = []\n')

Fragment(uuid='26d31adc-2e93-4aa7-8138-01cfbbc0fd9c',
         path='/lib/dblayer/model/query.py',
         lineno=48,
         depth=0,
         type='class',
         name='Query',
         text='    def _collect_result_condition_list(cls):\n'
              '        """ Collects the result column and condition '
              'definitions from the model class\n'
              '        """\n'
              '        cls._table_map = {}\n'
              '        cls._column_list = []\n'
              '        cls._condition_list = []\n')

Fragment(uuid='14b291fe-bc59-4cf3-823b-e3980bc1cdec',
         path='/lib/dblayer/model/query.py',
         lineno=48,
         depth=3,
         type='function',
         name='_collect_result_condition_list',
         text='def _collect_result_condition_list(cls):\n'
              '        """ Collects the result column and condition '
              'definitions from the model class\n'
              '        """\n'
              '        cls._table_map = {}\n'
              '        cls._column_list = []\n'
              '        cls._condition_list = []\n')

Fragment(uuid='8e931016-fe7a-4c8d-8abc-ef66f3096ec6',
         path='/lib/dblayer/model/query.py',
         lineno=51,
         depth=5,
         type='variable',
         name='cls._table_map',
         text='cls._table_map = {}')

Fragment(uuid='60b873c8-1125-431a-8030-ab3e7630103a',
         path='/lib/dblayer/model/query.py',
         lineno=52,
         depth=5,
         type='variable',
         name='cls._column_list',
         text='cls._column_list = []')

Fragment(uuid='d79b4f97-e111-40d6-857a-651aff060011',
         path='/lib/dblayer/model/query.py',
         lineno=53,
         depth=5,
         type='variable',
         name='cls._condition_list',
         text='cls._condition_list = []')

Fragment(uuid='6edf680b-1c41-46da-8896-037417e1d83c',
         path='/lib/dblayer/model/query.py',
         lineno=54,
         depth=0,
         type='module',
         name='',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n'
              '\n'
              '            if isinstance(value, table.Table):\n'
              '                value._name = name\n'
              '                cls._table_map[name] = value\n'
              '\n'
              '            elif isinstance(value, Result):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._column_list.append(value)\n'
              '\n'
              '            elif isinstance(value, Condition):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._condition_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        cls._condition_list.sort(key=Condition.sort_key)\n')

Fragment(uuid='1d06bad3-6c67-44ca-8db1-8002825b8f98',
         path='/lib/dblayer/model/query.py',
         lineno=54,
         depth=0,
         type='class',
         name='Query',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n'
              '\n'
              '            if isinstance(value, table.Table):\n'
              '                value._name = name\n'
              '                cls._table_map[name] = value\n'
              '\n'
              '            elif isinstance(value, Result):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._column_list.append(value)\n'
              '\n'
              '            elif isinstance(value, Condition):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._condition_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        cls._condition_list.sort(key=Condition.sort_key)\n')

Fragment(uuid='8322f8be-a8a6-457d-912c-39c2ae4c0961',
         path='/lib/dblayer/model/query.py',
         lineno=54,
         depth=3,
         type='function',
         name='_collect_result_condition_list',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n'
              '\n'
              '            if isinstance(value, table.Table):\n'
              '                value._name = name\n'
              '                cls._table_map[name] = value\n'
              '\n'
              '            elif isinstance(value, Result):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._column_list.append(value)\n'
              '\n'
              '            elif isinstance(value, Condition):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._condition_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        cls._condition_list.sort(key=Condition.sort_key)')

Fragment(uuid='f61b6614-36c5-44fd-ab83-800cbaf16588',
         path='/lib/dblayer/model/query.py',
         lineno=55,
         depth=7,
         type='variable',
         name='value',
         text='value = getattr(cls, name)')

Fragment(uuid='71a246a5-c73c-4c79-a97f-ee25ef4b13e9',
         path='/lib/dblayer/model/query.py',
         lineno=58,
         depth=9,
         type='variable',
         name='value._name',
         text='value._name = name')

Fragment(uuid='ccfb0f8e-8395-4337-b61f-73d7ac04b273',
         path='/lib/dblayer/model/query.py',
         lineno=59,
         depth=9,
         type='variable',
         name='cls._table_map[name]',
         text='cls._table_map[name] = value')

Fragment(uuid='092b684e-7d80-4fcf-928e-f0a72de8a96b',
         path='/lib/dblayer/model/query.py',
         lineno=62,
         depth=10,
         type='variable',
         name='value.table_class',
         text='value.table_class = cls')

Fragment(uuid='59d3d641-3887-4b9e-a717-2188143b8a8b',
         path='/lib/dblayer/model/query.py',
         lineno=63,
         depth=10,
         type='variable',
         name='value.name',
         text='value.name = name')

Fragment(uuid='79c0959c-cebc-405b-977d-9abda541fca3',
         path='/lib/dblayer/model/query.py',
         lineno=67,
         depth=10,
         type='variable',
         name='value.table_class',
         text='value.table_class = cls')

Fragment(uuid='f2cbb186-942c-4b5a-8c7e-803f3bb54863',
         path='/lib/dblayer/model/query.py',
         lineno=68,
         depth=10,
         type='variable',
         name='value.name',
         text='value.name = name')

Fragment(uuid='3e60b170-ee94-4cd4-9436-5381db20210b',
         path='/lib/dblayer/model/query.py',
         lineno=74,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '<Query: %s>' % self._name\n"
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='37a17cd7-8982-4de0-8837-ec12281c7d9f',
         path='/lib/dblayer/model/query.py',
         lineno=74,
         depth=0,
         type='class',
         name='Query',
         text='\n'
              '    def __repr__(self):\n'
              "        return '<Query: %s>' % self._name\n"
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='32de7439-631f-415f-920c-64bc84077818',
         path='/lib/dblayer/model/query.py',
         lineno=75,
         depth=2,
         type='function',
         name='__repr__',
         text="def __repr__(self):\n        return '<Query: %s>' % self._name")

Fragment(uuid='67a1e6be-80fd-4d11-94b2-ab509cf454ed',
         path='/lib/dblayer/model/query.py',
         lineno=78,
         depth=2,
         type='variable',
         name='__str__',
         text='__str__ = __repr__')

Fragment(uuid='a8bd461c-e598-46c9-bc99-dc6fa2939587',
         path='/lib/dblayer/model/query.py',
         lineno=79,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_table_list(self):\n'
              '        """ Returns the table list for the clauses of the '
              'SELECT statement\n'
              '        \n'
              '        Items of the returned list can be either:\n'
              '        \n'
              '        (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        (table_name, alias_name, join_type, id_field_name, '
              'referer_table_name, fk_field_name) to continue one.\n'
              '        \n'
              '        Unaliased tables are not used here.\n'
              '        \n'
              '        """\n'
              '        table_map = self._table_map.copy()\n')

Fragment(uuid='3e282430-5433-4d8e-87c7-7d143b52b997',
         path='/lib/dblayer/model/query.py',
         lineno=79,
         depth=0,
         type='class',
         name='Query',
         text='\n'
              '    def get_table_list(self):\n'
              '        """ Returns the table list for the clauses of the '
              'SELECT statement\n'
              '        \n'
              '        Items of the returned list can be either:\n'
              '        \n'
              '        (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        (table_name, alias_name, join_type, id_field_name, '
              'referer_table_name, fk_field_name) to continue one.\n'
              '        \n'
              '        Unaliased tables are not used here.\n'
              '        \n'
              '        """\n'
              '        table_map = self._table_map.copy()\n')

Fragment(uuid='767ea59b-a028-4b20-a208-f32df3f41497',
         path='/lib/dblayer/model/query.py',
         lineno=80,
         depth=2,
         type='function',
         name='get_table_list',
         text='def get_table_list(self):\n'
              '        """ Returns the table list for the clauses of the '
              'SELECT statement\n'
              '        \n'
              '        Items of the returned list can be either:\n'
              '        \n'
              '        (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        (table_name, alias_name, join_type, id_field_name, '
              'referer_table_name, fk_field_name) to continue one.\n'
              '        \n'
              '        Unaliased tables are not used here.\n'
              '        \n'
              '        """\n'
              '        table_map = self._table_map.copy()\n')

Fragment(uuid='ac2a6ee3-3130-43a9-bcd1-8d139180d66b',
         path='/lib/dblayer/model/query.py',
         lineno=91,
         depth=4,
         type='variable',
         name='table_map',
         text='table_map = self._table_map.copy()')

Fragment(uuid='e49e4892-f040-4ec6-a68b-2910ac9f30db',
         path='/lib/dblayer/model/query.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        def iterate_joined_tables(referer, visited):\n'
              '            """ Appends tables referenced from the given table '
              'to the table list\n'
              '            """\n'
              '            # Iterate on all the tables remained in the table '
              'map\n')

Fragment(uuid='3d739f0f-3164-4b37-b61a-10a9856464f0',
         path='/lib/dblayer/model/query.py',
         lineno=92,
         depth=0,
         type='class',
         name='Query',
         text='\n'
              '        def iterate_joined_tables(referer, visited):\n'
              '            """ Appends tables referenced from the given table '
              'to the table list\n'
              '            """\n'
              '            # Iterate on all the tables remained in the table '
              'map\n')

Fragment(uuid='97ba14c5-e893-4690-b86e-3eec8f1894cc',
         path='/lib/dblayer/model/query.py',
         lineno=92,
         depth=2,
         type='function',
         name='get_table_list',
         text='\n'
              '        def iterate_joined_tables(referer, visited):\n'
              '            """ Appends tables referenced from the given table '
              'to the table list\n'
              '            """\n'
              '            # Iterate on all the tables remained in the table '
              'map\n')

Fragment(uuid='65a5d446-68a7-4c7f-b175-c5ddff1dbd1c',
         path='/lib/dblayer/model/query.py',
         lineno=93,
         depth=4,
         type='function',
         name='iterate_joined_tables',
         text='def iterate_joined_tables(referer, visited):\n'
              '            """ Appends tables referenced from the given table '
              'to the table list\n'
              '            """\n'
              '            # Iterate on all the tables remained in the table '
              'map\n')

Fragment(uuid='cd38d185-f0c2-4cfd-8f5a-a104b52d7623',
         path='/lib/dblayer/model/query.py',
         lineno=97,
         depth=0,
         type='module',
         name='',
         text='            for alias_name, table in table_map.items():\n'
              '\n'
              '                # Determine the referer table for this table in '
              'the JOIN chain\n'
              '                foreign_key = table._referer\n'
              '                referer_table = foreign_key.table if '
              'foreign_key else None\n'
              '\n'
              "                # Is the referer the table we're looking for?\n")

Fragment(uuid='9ce9c79e-bd61-4dbf-a1bb-cf959a3e076d',
         path='/lib/dblayer/model/query.py',
         lineno=97,
         depth=0,
         type='class',
         name='Query',
         text='            for alias_name, table in table_map.items():\n'
              '\n'
              '                # Determine the referer table for this table in '
              'the JOIN chain\n'
              '                foreign_key = table._referer\n'
              '                referer_table = foreign_key.table if '
              'foreign_key else None\n'
              '\n'
              "                # Is the referer the table we're looking for?\n")

Fragment(uuid='044c0375-faf9-4012-9f4a-c38a2b033f42',
         path='/lib/dblayer/model/query.py',
         lineno=97,
         depth=2,
         type='function',
         name='get_table_list',
         text='            for alias_name, table in table_map.items():\n'
              '\n'
              '                # Determine the referer table for this table in '
              'the JOIN chain\n'
              '                foreign_key = table._referer\n'
              '                referer_table = foreign_key.table if '
              'foreign_key else None\n'
              '\n'
              "                # Is the referer the table we're looking for?\n")

Fragment(uuid='7d94e14a-1cf9-4001-9682-398d4b2ca975',
         path='/lib/dblayer/model/query.py',
         lineno=97,
         depth=4,
         type='function',
         name='iterate_joined_tables',
         text='            for alias_name, table in table_map.items():\n'
              '\n'
              '                # Determine the referer table for this table in '
              'the JOIN chain\n'
              '                foreign_key = table._referer\n'
              '                referer_table = foreign_key.table if '
              'foreign_key else None\n'
              '\n'
              "                # Is the referer the table we're looking for?\n")

Fragment(uuid='543a4076-87ca-46ee-be60-249329ea3c66',
         path='/lib/dblayer/model/query.py',
         lineno=100,
         depth=8,
         type='variable',
         name='foreign_key',
         text='foreign_key = table._referer')

Fragment(uuid='c04b19d4-41e3-4d52-8270-5c1dead62c08',
         path='/lib/dblayer/model/query.py',
         lineno=101,
         depth=8,
         type='variable',
         name='referer_table',
         text='referer_table = foreign_key.table if foreign_key else None')

Fragment(uuid='1523095a-1641-48cb-876c-e5363d9d330f',
         path='/lib/dblayer/model/query.py',
         lineno=104,
         depth=0,
         type='module',
         name='',
         text='                if referer_table is referer and alias_name not '
              'in visited:\n'
              '\n'
              '                    # Consider each table only once\n'
              '                    visited.add(alias_name)\n'
              '\n'
              '                    # Construct table list item\n')

Fragment(uuid='8e917b77-6afe-4544-8717-fbd1404fd78e',
         path='/lib/dblayer/model/query.py',
         lineno=104,
         depth=0,
         type='class',
         name='Query',
         text='                if referer_table is referer and alias_name not '
              'in visited:\n'
              '\n'
              '                    # Consider each table only once\n'
              '                    visited.add(alias_name)\n'
              '\n'
              '                    # Construct table list item\n')

Fragment(uuid='51f013d1-b904-47c5-b267-54b92cfc1bc8',
         path='/lib/dblayer/model/query.py',
         lineno=104,
         depth=2,
         type='function',
         name='get_table_list',
         text='                if referer_table is referer and alias_name not '
              'in visited:\n'
              '\n'
              '                    # Consider each table only once\n'
              '                    visited.add(alias_name)\n'
              '\n'
              '                    # Construct table list item\n')

Fragment(uuid='34276aca-e63b-4367-a4b5-cae5f5489481',
         path='/lib/dblayer/model/query.py',
         lineno=104,
         depth=4,
         type='function',
         name='iterate_joined_tables',
         text='                if referer_table is referer and alias_name not '
              'in visited:\n'
              '\n'
              '                    # Consider each table only once\n'
              '                    visited.add(alias_name)\n'
              '\n'
              '                    # Construct table list item\n')

Fragment(uuid='95276910-b083-4a84-a1c4-99c638cccd5f',
         path='/lib/dblayer/model/query.py',
         lineno=110,
         depth=0,
         type='module',
         name='',
         text='                    if referer is None:\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                            # Alias name in this query for this '
              'table\n'
              '                            alias_name)\n'
              '                    else:\n'
              '                        join_type = constants.LEFT_JOIN if '
              'foreign_key.null else constants.INNER_JOIN\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                       ')

Fragment(uuid='7f160808-b3a6-4e66-918a-4a936cdabc38',
         path='/lib/dblayer/model/query.py',
         lineno=110,
         depth=0,
         type='class',
         name='Query',
         text='                    if referer is None:\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                            # Alias name in this query for this '
              'table\n'
              '                            alias_name)\n'
              '                    else:\n'
              '                        join_type = constants.LEFT_JOIN if '
              'foreign_key.null else constants.INNER_JOIN\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                       ')

Fragment(uuid='83ae8d45-869c-4bdc-8d52-c9b7aba20064',
         path='/lib/dblayer/model/query.py',
         lineno=110,
         depth=2,
         type='function',
         name='get_table_list',
         text='                    if referer is None:\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                            # Alias name in this query for this '
              'table\n'
              '                            alias_name)\n'
              '                    else:\n'
              '                        join_type = constants.LEFT_JOIN if '
              'foreign_key.null else constants.INNER_JOIN\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                       ')

Fragment(uuid='eba308f2-84b0-4dd3-a04a-32f900687741',
         path='/lib/dblayer/model/query.py',
         lineno=110,
         depth=4,
         type='function',
         name='iterate_joined_tables',
         text='                    if referer is None:\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                            # Alias name in this query for this '
              'table\n'
              '                            alias_name)\n'
              '                    else:\n'
              '                        join_type = constants.LEFT_JOIN if '
              'foreign_key.null else constants.INNER_JOIN\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                       ')

Fragment(uuid='e995180f-b990-43e4-b586-6a5e0558e477',
         path='/lib/dblayer/model/query.py',
         lineno=111,
         depth=12,
         type='variable',
         name='item',
         text='item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                            # Alias name in this query for this '
              'table\n'
              '                            alias_name)')

Fragment(uuid='262d9328-faa3-4393-8e23-f56cce8146b1',
         path='/lib/dblayer/model/query.py',
         lineno=117,
         depth=13,
         type='variable',
         name='join_type',
         text='join_type = constants.LEFT_JOIN if foreign_key.null else '
              'constants.INNER_JOIN')

Fragment(uuid='084d893c-f65a-422a-93ea-dcd1452b3887',
         path='/lib/dblayer/model/query.py',
         lineno=118,
         depth=13,
         type='variable',
         name='item',
         text='item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                            # Alias name in this query for this '
              'table\n'
              '                            alias_name,\n'
              '                            # Type of this joine, like INNER '
              'JOIN or LEFT JOIN\n'
              '                            join_type,\n'
              '                            # Name of the primary key column in '
              'the joined table\n'
              '                            table._primary_key.name,\n'
              '                            # Alias name of the referer '
              '(already joined) table\n'
              '                            referer_table._name,\n'
              '                            # Name of the referer foreign key '
              'column in the referer (already joined) table\n'
              '                            foreign_key.name)')

Fragment(uuid='3498dee7-f7e6-4ac0-8c99-6e669cb0edfe',
         path='/lib/dblayer/model/query.py',
         lineno=121,
         depth=0,
         type='module',
         name='',
         text='     # Alias name in this query for this table\n'
              '                            alias_name,\n'
              '                            # Type of this joine, like INNER '
              'JOIN or LEFT JOIN\n'
              '                            join_type,\n'
              '                            # Name of the primary key column in '
              'the joined table\n'
              '                            table._primary_key.name,\n'
              '                            # Alias name of the referer '
              '(already joined) table\n'
              '                            referer_table._name,\n'
              '                            # Name of the referer foreign key '
              'column in the referer (already joined) table\n'
              '                            foreign_key.name)\n')

Fragment(uuid='b2bbaff4-4747-4010-aedf-88b4527ec803',
         path='/lib/dblayer/model/query.py',
         lineno=121,
         depth=0,
         type='class',
         name='Query',
         text='     # Alias name in this query for this table\n'
              '                            alias_name,\n'
              '                            # Type of this joine, like INNER '
              'JOIN or LEFT JOIN\n'
              '                            join_type,\n'
              '                            # Name of the primary key column in '
              'the joined table\n'
              '                            table._primary_key.name,\n'
              '                            # Alias name of the referer '
              '(already joined) table\n'
              '                            referer_table._name,\n'
              '                            # Name of the referer foreign key '
              'column in the referer (already joined) table\n'
              '                            foreign_key.name)\n')

Fragment(uuid='45d44712-2b75-489b-93dd-85db2169bde8',
         path='/lib/dblayer/model/query.py',
         lineno=121,
         depth=2,
         type='function',
         name='get_table_list',
         text='     # Alias name in this query for this table\n'
              '                            alias_name,\n'
              '                            # Type of this joine, like INNER '
              'JOIN or LEFT JOIN\n'
              '                            join_type,\n'
              '                            # Name of the primary key column in '
              'the joined table\n'
              '                            table._primary_key.name,\n'
              '                            # Alias name of the referer '
              '(already joined) table\n'
              '                            referer_table._name,\n'
              '                            # Name of the referer foreign key '
              'column in the referer (already joined) table\n'
              '                            foreign_key.name)\n')

Fragment(uuid='e77219b6-87dc-44cc-b858-d9b6c4578b36',
         path='/lib/dblayer/model/query.py',
         lineno=121,
         depth=4,
         type='function',
         name='iterate_joined_tables',
         text='     # Alias name in this query for this table\n'
              '                            alias_name,\n'
              '                            # Type of this joine, like INNER '
              'JOIN or LEFT JOIN\n'
              '                            join_type,\n'
              '                            # Name of the primary key column in '
              'the joined table\n'
              '                            table._primary_key.name,\n'
              '                            # Alias name of the referer '
              '(already joined) table\n'
              '                            referer_table._name,\n'
              '                            # Name of the referer foreign key '
              'column in the referer (already joined) table\n'
              '                            foreign_key.name)\n')

Fragment(uuid='9a6529b0-be6a-45eb-a2f7-69d27b31482e',
         path='/lib/dblayer/model/query.py',
         lineno=131,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                    if constants.DEBUG:\n'
              '                        assert not sum(1 for x in item if not '
              "x), 'Empty name(s) in join definition item: %r' % (item,)\n"
              '\n'
              '                    # Yield table list item\n'
              '                    yield item\n'
              '\n'
              '                    # Find all the referer tables below this '
              'point in the tree\n')

Fragment(uuid='e31d6d05-f23f-4bba-9793-ec26dea28a15',
         path='/lib/dblayer/model/query.py',
         lineno=131,
         depth=0,
         type='class',
         name='Query',
         text='\n'
              '                    if constants.DEBUG:\n'
              '                        assert not sum(1 for x in item if not '
              "x), 'Empty name(s) in join definition item: %r' % (item,)\n"
              '\n'
              '                    # Yield table list item\n'
              '                    yield item\n'
              '\n'
              '                    # Find all the referer tables below this '
              'point in the tree\n')

Fragment(uuid='41ee8b21-49bf-4861-9eba-70eb39f9039a',
         path='/lib/dblayer/model/query.py',
         lineno=131,
         depth=2,
         type='function',
         name='get_table_list',
         text='\n'
              '                    if constants.DEBUG:\n'
              '                        assert not sum(1 for x in item if not '
              "x), 'Empty name(s) in join definition item: %r' % (item,)\n"
              '\n'
              '                    # Yield table list item\n'
              '                    yield item\n'
              '\n'
              '                    # Find all the referer tables below this '
              'point in the tree\n')

Fragment(uuid='a7a1b235-6fc4-460e-87c7-3532d250ee91',
         path='/lib/dblayer/model/query.py',
         lineno=131,
         depth=4,
         type='function',
         name='iterate_joined_tables',
         text='\n'
              '                    if constants.DEBUG:\n'
              '                        assert not sum(1 for x in item if not '
              "x), 'Empty name(s) in join definition item: %r' % (item,)\n"
              '\n'
              '                    # Yield table list item\n'
              '                    yield item\n'
              '\n'
              '                    # Find all the referer tables below this '
              'point in the tree\n')

Fragment(uuid='00a18975-a421-4a2a-b2fa-38a898463e92',
         path='/lib/dblayer/model/query.py',
         lineno=139,
         depth=0,
         type='module',
         name='',
         text='                    for item in iterate_joined_tables(table, '
              'visited):\n'
              '                        yield item\n'
              '\n'
              '        visited = set()\n'
              '        table_list = list(iterate_joined_tables(None, '
              'visited))\n'
              '        assert len(visited) == len(table_map)\n'
              '\n'
              '        return table_list\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='1e99084c-b4de-4682-aa6b-326e673a0d8d',
         path='/lib/dblayer/model/query.py',
         lineno=139,
         depth=0,
         type='class',
         name='Query',
         text='                    for item in iterate_joined_tables(table, '
              'visited):\n'
              '                        yield item\n'
              '\n'
              '        visited = set()\n'
              '        table_list = list(iterate_joined_tables(None, '
              'visited))\n'
              '        assert len(visited) == len(table_map)\n'
              '\n'
              '        return table_list\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='7bedd778-fc8c-495f-9506-5acbaa3c6468',
         path='/lib/dblayer/model/query.py',
         lineno=139,
         depth=2,
         type='function',
         name='get_table_list',
         text='                    for item in iterate_joined_tables(table, '
              'visited):\n'
              '                        yield item\n'
              '\n'
              '        visited = set()\n'
              '        table_list = list(iterate_joined_tables(None, '
              'visited))\n'
              '        assert len(visited) == len(table_map)\n'
              '\n'
              '        return table_list')

Fragment(uuid='31da84ad-98b2-485a-b398-e78df2c754da',
         path='/lib/dblayer/model/query.py',
         lineno=139,
         depth=4,
         type='function',
         name='iterate_joined_tables',
         text='                    for item in iterate_joined_tables(table, '
              'visited):\n'
              '                        yield item')

Fragment(uuid='3114215f-3417-4c1c-8dfd-b4fbfe71a9b8',
         path='/lib/dblayer/model/query.py',
         lineno=142,
         depth=4,
         type='variable',
         name='visited',
         text='visited = set()')

Fragment(uuid='312e6653-5937-4ffc-b0b6-583e462c401a',
         path='/lib/dblayer/model/query.py',
         lineno=143,
         depth=4,
         type='variable',
         name='table_list',
         text='table_list = list(iterate_joined_tables(None, visited))')

Fragment(uuid='f127b782-61ad-43d5-b187-eb1a3c1aae3d',
         path='/lib/dblayer/model/query.py',
         lineno=149,
         depth=0,
         type='module',
         name='',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the query\n'
              '        """\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = ['class %s(query.Query):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='bb9f5812-47df-4914-8889-f309c14b6542',
         path='/lib/dblayer/model/query.py',
         lineno=149,
         depth=0,
         type='class',
         name='Query',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the query\n'
              '        """\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = ['class %s(query.Query):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='3323b670-70e5-41a5-b17e-6044fb5e66e6',
         path='/lib/dblayer/model/query.py',
         lineno=149,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='def pretty_format_class(cls):\n'
              '        """ Formats source code defining the query\n'
              '        """\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = ['class %s(query.Query):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='c9b60f4e-5e1b-41d2-952d-69608fa1abcc',
         path='/lib/dblayer/model/query.py',
         lineno=155,
         depth=5,
         type='variable',
         name='line_list',
         text="line_list = ['class %s(query.Query):' % cls.__name__]")

Fragment(uuid='11a7ee1b-75c1-4a50-860d-eab2d7b4d76d',
         path='/lib/dblayer/model/query.py',
         lineno=156,
         depth=5,
         type='variable',
         name='append_line',
         text='append_line = line_list.append')

Fragment(uuid='1474e3ad-73c8-4133-a185-2d71f1ab863e',
         path='/lib/dblayer/model/query.py',
         lineno=165,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for alias, table in sorted(cls._table_map.items()):\n'
              "            append_line('    %s = %s()' % (alias, "
              'table.__class__.__name__))\n'
              "        append_line('')\n")

Fragment(uuid='f10c1be8-cf8e-4efe-be1a-852d15c1122b',
         path='/lib/dblayer/model/query.py',
         lineno=165,
         depth=0,
         type='class',
         name='Query',
         text='\n'
              '        for alias, table in sorted(cls._table_map.items()):\n'
              "            append_line('    %s = %s()' % (alias, "
              'table.__class__.__name__))\n'
              "        append_line('')\n")

Fragment(uuid='8b36d1fc-461e-457e-9a00-748e35c36761',
         path='/lib/dblayer/model/query.py',
         lineno=165,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for alias, table in sorted(cls._table_map.items()):\n'
              "            append_line('    %s = %s()' % (alias, "
              'table.__class__.__name__))\n'
              "        append_line('')\n")

Fragment(uuid='ae1813d1-8d05-4864-95d0-cd751d4fd84d',
         path='/lib/dblayer/model/query.py',
         lineno=169,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._column_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n")

Fragment(uuid='3923fe43-130f-4140-bd90-e92ffc692488',
         path='/lib/dblayer/model/query.py',
         lineno=169,
         depth=0,
         type='class',
         name='Query',
         text='\n'
              '        for obj in cls._column_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n")

Fragment(uuid='9837e7db-2995-4b0c-a51e-91a8c1c400e0',
         path='/lib/dblayer/model/query.py',
         lineno=169,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._column_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n")

Fragment(uuid='90e3befd-349f-4749-b7f5-5fd744bbba75',
         path='/lib/dblayer/model/query.py',
         lineno=174,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._condition_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n"
              '\n'
              '        if cls._group_by:\n'
              "            append_line('    _group_by = %r' % "
              '(cls._group_by,))\n'
              '\n'
              '        if cls._order_by:\n'
              "            append_line('    _order_by = %r' % "
              '(cls._order_by,))\n')

Fragment(uuid='d78365ac-ea3d-40b9-878d-cc6b2ebe619d',
         path='/lib/dblayer/model/query.py',
         lineno=174,
         depth=0,
         type='class',
         name='Query',
         text='\n'
              '        for obj in cls._condition_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n"
              '\n'
              '        if cls._group_by:\n'
              "            append_line('    _group_by = %r' % "
              '(cls._group_by,))\n'
              '\n'
              '        if cls._order_by:\n'
              "            append_line('    _order_by = %r' % "
              '(cls._order_by,))\n')

Fragment(uuid='6c1014f4-914c-4f4c-bd3c-11b11fb7b7ed',
         path='/lib/dblayer/model/query.py',
         lineno=174,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._condition_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n"
              '\n'
              '        if cls._group_by:\n'
              "            append_line('    _group_by = %r' % "
              '(cls._group_by,))\n'
              '\n'
              '        if cls._order_by:\n'
              "            append_line('    _order_by = %r' % "
              '(cls._order_by,))\n')

Fragment(uuid='eabcecf0-9641-41d2-971b-016b7df50c21',
         path='/lib/dblayer/model/query.py',
         lineno=185,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for i in range(len(line_list) - 1, 1, -1):\n'
              '            if not line_list[i] and not line_list[i - 1]:\n'
              '                del line_list[i]\n'
              '\n'
              "        return '\\n'.join(line_list)\n")

Fragment(uuid='0fa07502-ea4e-4447-b60a-767d8a956a6d',
         path='/lib/dblayer/model/query.py',
         lineno=185,
         depth=0,
         type='class',
         name='Query',
         text='\n'
              '        for i in range(len(line_list) - 1, 1, -1):\n'
              '            if not line_list[i] and not line_list[i - 1]:\n'
              '                del line_list[i]\n'
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='1c176298-1b3b-4be6-bffa-175ff5c2f4fd',
         path='/lib/dblayer/model/query.py',
         lineno=185,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for i in range(len(line_list) - 1, 1, -1):\n'
              '            if not line_list[i] and not line_list[i - 1]:\n'
              '                del line_list[i]\n'
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='e968ad6f-51a7-47bb-8d9d-b4448f71cdb4',
         path='/lib/dblayer/model/query.py',
         lineno=191,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseQueryResult(column.BaseColumn):\n'
              '    """ Base class for columns used in a query either as a '
              'result or a condition\n'
              '    \n'
              '    The expression can be a column of a source table or any '
              'expression built\n'
              '    from functions and aggregations in any way acceptable in an '
              'SQL statement.\n'
              '    \n'
              '    """\n'
              '\n'
              '    # Expression to evaluate to get the value of the given '
              'result column\n'
              '    expression = None\n'
              '\n'
              '    # Column definition for calculated results, required for '
              'expressions,\n'
              '    # filled automatically in the case of simple source column '
              'results\n'
              '    column_type = None\n'
              '\n'
              '    # True value indicates that the expression is written into '
              'the HAVING clause\n'
              '    after_group_by = False\n')

Fragment(uuid='c401c60c-7a4b-4a0f-ab9e-879d92ba66e7',
         path='/lib/dblayer/model/query.py',
         lineno=193,
         depth=0,
         type='class',
         name='BaseQueryResult',
         text='class BaseQueryResult(column.BaseColumn):\n'
              '    """ Base class for columns used in a query either as a '
              'result or a condition\n'
              '    \n'
              '    The expression can be a column of a source table or any '
              'expression built\n'
              '    from functions and aggregations in any way acceptable in an '
              'SQL statement.\n'
              '    \n'
              '    """\n'
              '\n'
              '    # Expression to evaluate to get the value of the given '
              'result column\n'
              '    expression = None\n'
              '\n'
              '    # Column definition for calculated results, required for '
              'expressions,\n'
              '    # filled automatically in the case of simple source column '
              'results\n'
              '    column_type = None\n'
              '\n'
              '    # True value indicates that the expression is written into '
              'the HAVING clause\n'
              '    after_group_by = False\n')

Fragment(uuid='c3f6a9b7-0d27-4ad9-b320-15001980ea2e',
         path='/lib/dblayer/model/query.py',
         lineno=202,
         depth=2,
         type='variable',
         name='expression',
         text='expression = None')

Fragment(uuid='26404e35-86c1-46f9-acfc-9b2bf01b6794',
         path='/lib/dblayer/model/query.py',
         lineno=206,
         depth=2,
         type='variable',
         name='column_type',
         text='column_type = None')

Fragment(uuid='03c2fba5-8fdc-4d74-80a5-688535630584',
         path='/lib/dblayer/model/query.py',
         lineno=209,
         depth=2,
         type='variable',
         name='after_group_by',
         text='after_group_by = False')

Fragment(uuid='b7f1598b-0326-413d-a8ef-8416419fa650',
         path='/lib/dblayer/model/query.py',
         lineno=210,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, expression, column_type=None, '
              'doc=None):\n'
              '        column.BaseColumn.__init__(self, doc=doc)\n'
              '\n'
              '        assert self.__class__ is not BaseQueryResult, (\n'
              "            'Only subclasses of BaseQueryResult can be "
              "instantiated!')\n"
              '\n'
              '        # Cloning the column?\n')

Fragment(uuid='2b5f6ba4-6aad-4783-8825-afd9790046ef',
         path='/lib/dblayer/model/query.py',
         lineno=210,
         depth=0,
         type='class',
         name='BaseQueryResult',
         text='\n'
              '    def __init__(self, expression, column_type=None, '
              'doc=None):\n'
              '        column.BaseColumn.__init__(self, doc=doc)\n'
              '\n'
              '        assert self.__class__ is not BaseQueryResult, (\n'
              "            'Only subclasses of BaseQueryResult can be "
              "instantiated!')\n"
              '\n'
              '        # Cloning the column?\n')

Fragment(uuid='eb8aa71f-8921-49a7-8854-1396f1e75fba',
         path='/lib/dblayer/model/query.py',
         lineno=211,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, expression, column_type=None, doc=None):\n'
              '        column.BaseColumn.__init__(self, doc=doc)\n'
              '\n'
              '        assert self.__class__ is not BaseQueryResult, (\n'
              "            'Only subclasses of BaseQueryResult can be "
              "instantiated!')\n"
              '\n'
              '        # Cloning the column?\n')

Fragment(uuid='dcead38e-9442-43d8-a6a8-0b870ff1815a',
         path='/lib/dblayer/model/query.py',
         lineno=218,
         depth=0,
         type='module',
         name='',
         text='        if expression is None:\n'
              '            return\n'
              '\n'
              '        # Automatically set the column_type in the case of '
              'simple results\n')

Fragment(uuid='15823b22-4342-41e1-89e7-ab993764c554',
         path='/lib/dblayer/model/query.py',
         lineno=218,
         depth=0,
         type='class',
         name='BaseQueryResult',
         text='        if expression is None:\n'
              '            return\n'
              '\n'
              '        # Automatically set the column_type in the case of '
              'simple results\n')

Fragment(uuid='c96e9d13-1254-435c-8735-343e30865857',
         path='/lib/dblayer/model/query.py',
         lineno=218,
         depth=2,
         type='function',
         name='__init__',
         text='        if expression is None:\n'
              '            return\n'
              '\n'
              '        # Automatically set the column_type in the case of '
              'simple results\n')

Fragment(uuid='e44c13f8-cc6e-456e-bad8-ed4e8522486e',
         path='/lib/dblayer/model/query.py',
         lineno=222,
         depth=0,
         type='module',
         name='',
         text='        if isinstance(expression, column.BaseColumn):\n'
              "            assert column_type is None, 'Passing column_type is "
              "not required in the case of simple column references!'\n"
              '            column_type = getattr(expression.table_class, '
              'expression.name)\n'
              "            self.full_repr_exclude = ('column_type',)\n"
              '        elif isinstance(expression, '
              'index.FullTextSearchIndex):\n'
              '            column_type = column.Text\n'
              '        else:\n'
              "            assert column_type is not None, 'Passing "
              'column_type is required in the case of calculated '
              "expressions!'\n"
              "            assert column_type.table is None, 'Pass an unbound "
              "column type, not the column of a bound table!'\n"
              '\n'
              '        self.expression = expression\n'
              '        self.column_type = column_type\n')

Fragment(uuid='0d4e4ae6-928f-4f07-a517-c86bfd7bbfc1',
         path='/lib/dblayer/model/query.py',
         lineno=222,
         depth=0,
         type='class',
         name='BaseQueryResult',
         text='        if isinstance(expression, column.BaseColumn):\n'
              "            assert column_type is None, 'Passing column_type is "
              "not required in the case of simple column references!'\n"
              '            column_type = getattr(expression.table_class, '
              'expression.name)\n'
              "            self.full_repr_exclude = ('column_type',)\n"
              '        elif isinstance(expression, '
              'index.FullTextSearchIndex):\n'
              '            column_type = column.Text\n'
              '        else:\n'
              "            assert column_type is not None, 'Passing "
              'column_type is required in the case of calculated '
              "expressions!'\n"
              "            assert column_type.table is None, 'Pass an unbound "
              "column type, not the column of a bound table!'\n"
              '\n'
              '        self.expression = expression\n'
              '        self.column_type = column_type\n')

Fragment(uuid='f55e328b-91f7-4853-9f64-8eea46467fcf',
         path='/lib/dblayer/model/query.py',
         lineno=222,
         depth=2,
         type='function',
         name='__init__',
         text='        if isinstance(expression, column.BaseColumn):\n'
              "            assert column_type is None, 'Passing column_type is "
              "not required in the case of simple column references!'\n"
              '            column_type = getattr(expression.table_class, '
              'expression.name)\n'
              "            self.full_repr_exclude = ('column_type',)\n"
              '        elif isinstance(expression, '
              'index.FullTextSearchIndex):\n'
              '            column_type = column.Text\n'
              '        else:\n'
              "            assert column_type is not None, 'Passing "
              'column_type is required in the case of calculated '
              "expressions!'\n"
              "            assert column_type.table is None, 'Pass an unbound "
              "column type, not the column of a bound table!'\n"
              '\n'
              '        self.expression = expression\n'
              '        self.column_type = column_type')

Fragment(uuid='b5e385a1-195b-4eb0-bdf2-48c799030c80',
         path='/lib/dblayer/model/query.py',
         lineno=224,
         depth=6,
         type='variable',
         name='column_type',
         text='column_type = getattr(expression.table_class, expression.name)')

Fragment(uuid='d40fe4fc-05ea-4e66-a716-9cd7cb103b34',
         path='/lib/dblayer/model/query.py',
         lineno=225,
         depth=6,
         type='variable',
         name='self.full_repr_exclude',
         text="self.full_repr_exclude = ('column_type',)")

Fragment(uuid='fa5434e9-f2de-4e7d-aab5-3fd54c050367',
         path='/lib/dblayer/model/query.py',
         lineno=227,
         depth=7,
         type='variable',
         name='column_type',
         text='column_type = column.Text')

Fragment(uuid='da43bc17-3859-41a2-bfab-f6004782826f',
         path='/lib/dblayer/model/query.py',
         lineno=232,
         depth=4,
         type='variable',
         name='self.expression',
         text='self.expression = expression')

Fragment(uuid='feff54f2-88d5-4e90-ae2c-b42e3f037bb4',
         path='/lib/dblayer/model/query.py',
         lineno=233,
         depth=4,
         type='variable',
         name='self.column_type',
         text='self.column_type = column_type')

Fragment(uuid='8633f8c3-1b29-4f01-8132-525981208c0a',
         path='/lib/dblayer/model/query.py',
         lineno=234,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this query result column for a table '
              'instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='fe049618-a14d-4edc-a0cb-45e8be082303',
         path='/lib/dblayer/model/query.py',
         lineno=234,
         depth=0,
         type='class',
         name='BaseQueryResult',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this query result column for a table '
              'instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='4d83964f-e79f-4c2c-a110-308101ff49e2',
         path='/lib/dblayer/model/query.py',
         lineno=235,
         depth=2,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        """ Clone this query result column for a table '
              'instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='fae0496e-cc5e-48e1-a62c-088bd73e41da',
         path='/lib/dblayer/model/query.py',
         lineno=241,
         depth=4,
         type='variable',
         name='clone',
         text='clone = self.__class__(None)')

Fragment(uuid='9f05cb47-f16e-4c52-a1ff-82ccb774ae74',
         path='/lib/dblayer/model/query.py',
         lineno=243,
         depth=4,
         type='variable',
         name='clone.table',
         text='clone.table = table')

Fragment(uuid='b9c9c6d2-10bc-403b-8642-5f332b23da4d',
         path='/lib/dblayer/model/query.py',
         lineno=245,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Result(BaseQueryResult):\n'
              '    """ Query result\n'
              '    """\n')

Fragment(uuid='139a1968-06af-48cb-8189-514adb21dc10',
         path='/lib/dblayer/model/query.py',
         lineno=247,
         depth=0,
         type='class',
         name='Result',
         text='class Result(BaseQueryResult):\n    """ Query result\n    """')

Fragment(uuid='59cb0be0-27c4-46cd-b059-6b52abad65a8',
         path='/lib/dblayer/model/query.py',
         lineno=250,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Condition(BaseQueryResult):\n'
              '    """ Query condition precessed before processing the '
              'aggregates (where)\n'
              '    """\n')

Fragment(uuid='5e7ee338-46e6-4f5b-8016-b7fbef75d683',
         path='/lib/dblayer/model/query.py',
         lineno=252,
         depth=0,
         type='class',
         name='Condition',
         text='class Condition(BaseQueryResult):\n'
              '    """ Query condition precessed before processing the '
              'aggregates (where)\n'
              '    """')

Fragment(uuid='16ff9fe3-8d3f-41ee-8092-37ebbc887bc0',
         path='/lib/dblayer/model/query.py',
         lineno=255,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class PostCondition(Condition):\n'
              '    """ Query condition precessed after processing the '
              'aggregates (having)\n'
              '    """\n'
              '    # The expression is written into the HAVING clause\n'
              '    after_group_by = True\n')

Fragment(uuid='aabc16d7-51a3-4d5e-8687-5c81a839ba7d',
         path='/lib/dblayer/model/query.py',
         lineno=257,
         depth=0,
         type='class',
         name='PostCondition',
         text='class PostCondition(Condition):\n'
              '    """ Query condition precessed after processing the '
              'aggregates (having)\n'
              '    """\n'
              '    # The expression is written into the HAVING clause\n'
              '    after_group_by = True')

Fragment(uuid='4446c1ed-5fd5-4abf-9d33-6ada01ef8841',
         path='/lib/dblayer/model/query.py',
         lineno=261,
         depth=2,
         type='variable',
         name='after_group_by',
         text='after_group_by = True')

Fragment(uuid='40a61686-1c3c-4a6a-af87-697ebabc5b0b',
         path='/lib/dblayer/model/table.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Base class for database table definitions\n'
              '"""\n'
              '\n'
              'from dblayer import util, constants\n'
              '\n'
              'from dblayer.model import column, constraint, index, trigger\n')

Fragment(uuid='485d39fa-ca5b-4cec-9e4b-de4a1d8a395f',
         path='/lib/dblayer/model/table.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/table.py\n'
              '  Classes: Table\n'
              '  Methods: __init__ __new__ __repr__ _prepare_table_definition '
              '_sort_key initialize join pretty_format_class\n'
              '  Variables: __definition_serial__ __str__ _column_list '
              '_constraint_list _creatable _database_class _index_list '
              '_initialized _name _primary_key _referer _table_name '
              '_trigger_list _writable append_line cls._column_list '
              'cls._constraint_list cls._index_list cls._initialized '
              'cls._primary_key cls._trigger_list definition.implicit '
              'definition.name definition.table_class extra_line_list '
              'line_list obj.referenced_table_class self.__definition_serial__ '
              'self._column_list self._constraint_list self._index_list '
              'self._primary_key self._referer self._trigger_list value '
              'value.name value.table_class\n'
              '  Usages: BaseColumn BaseConstraint BaseIndex BaseTrigger DEBUG '
              'ForeignKey TypeError __class__ __doc__ __name__ append '
              'classmethod clone cls column constants constraint dblayer '
              'definition dir extend foreign_key_column full_repr '
              'get_implicit_definition_list_for_table_class '
              'get_next_definition_serial getattr hasattr implicit index '
              'isinstance key member model name obj primary_key '
              'referenced_table_class self setattr sort sort_key staticmethod '
              'strip super table table_class trigger util\n')

Fragment(uuid='792418c3-c5c8-4e36-9b67-44b483c63b58',
         path='/lib/dblayer/model/table.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import util, constants')

Fragment(uuid='605e56d3-9aab-41ec-ad79-0749995de09a',
         path='/lib/dblayer/model/table.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.model import column, constraint, index, trigger')

Fragment(uuid='3bedc9b8-7ec0-494a-82f1-62d5ed666ce2',
         path='/lib/dblayer/model/table.py',
         lineno=7,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Table:\n'
              '    """ Base class for database table models\n'
              '    \n'
              '    Subclasses are the table models.\n'
              '    \n'
              '    Instances represent actual database tables bound to a '
              'database model.\n'
              '    \n'
              '    Instances contain cloned column, constraint and index '
              'objects bound\n'
              '    to that instance. It is needed to implement cross table '
              'references\n'
              '    like foreign keys and joins.\n'
              '    \n'
              '    """\n'
              '\n'
              '    # True value indicates that this object has to be created '
              'in the database\n'
              '    _creatable = True\n'
              '\n'
              '   ')

Fragment(uuid='2a140dd5-a547-4384-b2d6-aa64fe1d92c0',
         path='/lib/dblayer/model/table.py',
         lineno=9,
         depth=0,
         type='class',
         name='Table',
         text='class Table:\n'
              '    """ Base class for database table models\n'
              '    \n'
              '    Subclasses are the table models.\n'
              '    \n'
              '    Instances represent actual database tables bound to a '
              'database model.\n'
              '    \n'
              '    Instances contain cloned column, constraint and index '
              'objects bound\n'
              '    to that instance. It is needed to implement cross table '
              'references\n'
              '    like foreign keys and joins.\n'
              '    \n'
              '    """\n'
              '\n'
              '    # True value indicates that this object has to be created '
              'in the database\n'
              '    _creatable = True\n'
              '\n'
              '    #')

Fragment(uuid='9914c6e1-4846-4e61-9380-6795885658eb',
         path='/lib/dblayer/model/table.py',
         lineno=23,
         depth=2,
         type='variable',
         name='_creatable',
         text='_creatable = True')

Fragment(uuid='64177eb9-cdb4-489e-a694-5854e9eb639a',
         path='/lib/dblayer/model/table.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text=' # True value indicates that this object is writable in the '
              'database\n'
              '    _writable = True\n'
              '\n'
              '    # Flag indicating that the model has been initialized\n'
              '    _initialized = False\n'
              '\n'
              '    # Reference to the database class containing this table\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              '    _database_class = None\n'
              '\n'
              '    # Name of the database table (never the alias name)\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              "    _table_name = ''\n"
              '\n'
              '    # Name of the ta')

Fragment(uuid='b721a545-e7a9-45c5-84f5-66283f220b72',
         path='/lib/dblayer/model/table.py',
         lineno=25,
         depth=0,
         type='class',
         name='Table',
         text=' True value indicates that this object is writable in the '
              'database\n'
              '    _writable = True\n'
              '\n'
              '    # Flag indicating that the model has been initialized\n'
              '    _initialized = False\n'
              '\n'
              '    # Reference to the database class containing this table\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              '    _database_class = None\n'
              '\n'
              '    # Name of the database table (never the alias name)\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              "    _table_name = ''\n"
              '\n'
              '    # Name of the tab')

Fragment(uuid='a9b3c1f5-6a73-4bdc-9101-3c332473ffc2',
         path='/lib/dblayer/model/table.py',
         lineno=26,
         depth=2,
         type='variable',
         name='_writable',
         text='_writable = True')

Fragment(uuid='dae74b37-1c04-4f76-a336-2754e3197a40',
         path='/lib/dblayer/model/table.py',
         lineno=29,
         depth=2,
         type='variable',
         name='_initialized',
         text='_initialized = False')

Fragment(uuid='9e80298c-4236-49c1-9855-64dc9652963b',
         path='/lib/dblayer/model/table.py',
         lineno=33,
         depth=2,
         type='variable',
         name='_database_class',
         text='_database_class = None')

Fragment(uuid='22e2631e-d6ea-4e5c-8675-b1f34a0c911a',
         path='/lib/dblayer/model/table.py',
         lineno=37,
         depth=2,
         type='variable',
         name='_table_name',
         text="_table_name = ''")

Fragment(uuid='97d3f960-f8bb-402e-83e4-6128247b2e0a',
         path='/lib/dblayer/model/table.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='ble, it can be either a database table name in the case\n'
              '    # of a physical table or an alias name while referencing '
              'from a view\n'
              '    # NOTE: Set by __new__ of the database and query definition '
              'classes\n'
              "    _name = ''\n"
              '\n'
              '    # List of column definitions in definition order\n'
              '    _column_list = ()\n'
              '\n'
              '    # List of database constraints in definition order\n'
              '    _constraint_list = ()\n'
              '\n'
              '    # List of database indexes in definition order\n'
              '    _index_list = ()\n'
              '\n'
              '    # List of database triggers i')

Fragment(uuid='24f9aac1-b438-4ec9-ac54-132932b645f7',
         path='/lib/dblayer/model/table.py',
         lineno=39,
         depth=0,
         type='class',
         name='Table',
         text='le, it can be either a database table name in the case\n'
              '    # of a physical table or an alias name while referencing '
              'from a view\n'
              '    # NOTE: Set by __new__ of the database and query definition '
              'classes\n'
              "    _name = ''\n"
              '\n'
              '    # List of column definitions in definition order\n'
              '    _column_list = ()\n'
              '\n'
              '    # List of database constraints in definition order\n'
              '    _constraint_list = ()\n'
              '\n'
              '    # List of database indexes in definition order\n'
              '    _index_list = ()\n'
              '\n'
              '    # List of database triggers i')

Fragment(uuid='c805455f-9e8b-458d-a102-aa67cbd98602',
         path='/lib/dblayer/model/table.py',
         lineno=42,
         depth=2,
         type='variable',
         name='_name',
         text="_name = ''")

Fragment(uuid='3d0bb949-1790-4059-9342-2bb4441ec5ec',
         path='/lib/dblayer/model/table.py',
         lineno=45,
         depth=2,
         type='variable',
         name='_column_list',
         text='_column_list = ()')

Fragment(uuid='f156b83d-de0f-4a27-a08e-f5297a7db886',
         path='/lib/dblayer/model/table.py',
         lineno=48,
         depth=2,
         type='variable',
         name='_constraint_list',
         text='_constraint_list = ()')

Fragment(uuid='e3db58c1-bccf-4595-96ee-1fa577d81f29',
         path='/lib/dblayer/model/table.py',
         lineno=51,
         depth=2,
         type='variable',
         name='_index_list',
         text='_index_list = ()')

Fragment(uuid='e2bd7a97-f15d-40c5-8952-a4675069d102',
         path='/lib/dblayer/model/table.py',
         lineno=53,
         depth=0,
         type='module',
         name='',
         text='n definition order\n'
              '    _trigger_list = ()\n'
              '\n'
              '    # The definition of the primary key column for this table,\n'
              '    # which is just a reference to the PrimaryKey column '
              'definition instance.\n'
              '    # It can also be None for read-only tables and views '
              'without a primary key.\n'
              '    _primary_key = None\n'
              '\n'
              '    # Foreign key column referencing this table instance inside '
              'a query if any\n'
              '    _referer = None\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n')

Fragment(uuid='7b80cdac-0629-4b60-a9a5-addffcf068d4',
         path='/lib/dblayer/model/table.py',
         lineno=53,
         depth=0,
         type='class',
         name='Table',
         text='n definition order\n'
              '    _trigger_list = ()\n'
              '\n'
              '    # The definition of the primary key column for this table,\n'
              '    # which is just a reference to the PrimaryKey column '
              'definition instance.\n'
              '    # It can also be None for read-only tables and views '
              'without a primary key.\n'
              '    _primary_key = None\n'
              '\n'
              '    # Foreign key column referencing this table instance inside '
              'a query if any\n'
              '    _referer = None\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n')

Fragment(uuid='bb089460-7e75-47ab-8a6d-317210f090eb',
         path='/lib/dblayer/model/table.py',
         lineno=54,
         depth=2,
         type='variable',
         name='_trigger_list',
         text='_trigger_list = ()')

Fragment(uuid='52d2b8c9-9a3c-4676-8cba-7b184f74dd3e',
         path='/lib/dblayer/model/table.py',
         lineno=59,
         depth=2,
         type='variable',
         name='_primary_key',
         text='_primary_key = None')

Fragment(uuid='38bbd14c-9df4-451c-a8b5-a895a8a32e62',
         path='/lib/dblayer/model/table.py',
         lineno=62,
         depth=2,
         type='variable',
         name='_referer',
         text='_referer = None')

Fragment(uuid='d8aa4829-bfa4-460b-8754-eb8f7810a4cd',
         path='/lib/dblayer/model/table.py',
         lineno=65,
         depth=2,
         type='variable',
         name='__definition_serial__',
         text='__definition_serial__ = 0')

Fragment(uuid='e6f56a82-0486-4b2e-974a-6d245c24691a',
         path='/lib/dblayer/model/table.py',
         lineno=66,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '<Table: %s>' % self._name\n"
              '\n'
              '    __str__ = __repr__\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='215499be-9a53-4504-83db-350643af09c6',
         path='/lib/dblayer/model/table.py',
         lineno=66,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '    def __repr__(self):\n'
              "        return '<Table: %s>' % self._name\n"
              '\n'
              '    __str__ = __repr__\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='46adfe25-544b-4fce-89e0-01930a1ff4c5',
         path='/lib/dblayer/model/table.py',
         lineno=67,
         depth=2,
         type='function',
         name='__repr__',
         text="def __repr__(self):\n        return '<Table: %s>' % self._name")

Fragment(uuid='e2bf8a6d-3d92-405b-914c-e2dac88bbbb3',
         path='/lib/dblayer/model/table.py',
         lineno=70,
         depth=2,
         type='variable',
         name='__str__',
         text='__str__ = __repr__')

Fragment(uuid='631456de-582c-4186-a8ce-99899e73475d',
         path='/lib/dblayer/model/table.py',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text='    def _sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='a82e3d46-29e8-45bc-9f56-dda8d161f253',
         path='/lib/dblayer/model/table.py',
         lineno=73,
         depth=0,
         type='class',
         name='Table',
         text='    def _sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='5a2ccd78-8468-42fb-8864-50341c7ca189',
         path='/lib/dblayer/model/table.py',
         lineno=73,
         depth=3,
         type='function',
         name='_sort_key',
         text='def _sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__')

Fragment(uuid='0e30b6c4-eecf-4ecc-824d-7ac99210ed0c',
         path='/lib/dblayer/model/table.py',
         lineno=77,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Table, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='f0279f8c-afd5-4ec2-ae79-13d5986feb3b',
         path='/lib/dblayer/model/table.py',
         lineno=77,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '    def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Table, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='e84098b0-767a-4442-ba43-b3f80bc5de6d',
         path='/lib/dblayer/model/table.py',
         lineno=78,
         depth=2,
         type='function',
         name='__new__',
         text='def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Table, cls).__new__(cls)')

Fragment(uuid='836d1b01-4c27-4b55-b688-5bd4fc4dbf5b',
         path='/lib/dblayer/model/table.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='    def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to constraints and indexes and collect '
              'them\n'
              '        cls._prepare_table_definition()\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='61873387-9b71-48fa-ba86-702762c2e82f',
         path='/lib/dblayer/model/table.py',
         lineno=86,
         depth=0,
         type='class',
         name='Table',
         text='    def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to constraints and indexes and collect '
              'them\n'
              '        cls._prepare_table_definition()\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='498cf55d-46dd-42a1-bca8-66f163f413ab',
         path='/lib/dblayer/model/table.py',
         lineno=86,
         depth=3,
         type='function',
         name='initialize',
         text='def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to constraints and indexes and collect '
              'them\n'
              '        cls._prepare_table_definition()')

Fragment(uuid='fbba8520-c7fb-4e71-9d08-c05e0241fd62',
         path='/lib/dblayer/model/table.py',
         lineno=89,
         depth=5,
         type='variable',
         name='cls._initialized',
         text='cls._initialized = True')

Fragment(uuid='93567081-26d3-41a1-a732-e0656af96816',
         path='/lib/dblayer/model/table.py',
         lineno=95,
         depth=0,
         type='module',
         name='',
         text='    def _prepare_table_definition(cls):\n'
              '        """ Prepares the table definition before the first '
              'instantiation\n'
              '        """\n'
              '        cls._column_list = []\n'
              '        cls._constraint_list = []\n'
              '        cls._index_list = []\n'
              '        cls._trigger_list = []\n')

Fragment(uuid='3993b21d-f99b-4610-8572-d86f31aa1f60',
         path='/lib/dblayer/model/table.py',
         lineno=95,
         depth=0,
         type='class',
         name='Table',
         text='    def _prepare_table_definition(cls):\n'
              '        """ Prepares the table definition before the first '
              'instantiation\n'
              '        """\n'
              '        cls._column_list = []\n'
              '        cls._constraint_list = []\n'
              '        cls._index_list = []\n'
              '        cls._trigger_list = []\n')

Fragment(uuid='76ee9bbc-9522-4184-adbb-dbf66fa2e4cc',
         path='/lib/dblayer/model/table.py',
         lineno=95,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='def _prepare_table_definition(cls):\n'
              '        """ Prepares the table definition before the first '
              'instantiation\n'
              '        """\n'
              '        cls._column_list = []\n'
              '        cls._constraint_list = []\n'
              '        cls._index_list = []\n'
              '        cls._trigger_list = []\n')

Fragment(uuid='18f09340-9373-41e8-86a8-3b8aefd8951b',
         path='/lib/dblayer/model/table.py',
         lineno=98,
         depth=5,
         type='variable',
         name='cls._column_list',
         text='cls._column_list = []')

Fragment(uuid='710ce7c7-1a4e-44cc-b65e-c6879daf3b30',
         path='/lib/dblayer/model/table.py',
         lineno=99,
         depth=5,
         type='variable',
         name='cls._constraint_list',
         text='cls._constraint_list = []')

Fragment(uuid='14231baf-ce83-4c77-91ea-460c472c1a50',
         path='/lib/dblayer/model/table.py',
         lineno=100,
         depth=5,
         type='variable',
         name='cls._index_list',
         text='cls._index_list = []')

Fragment(uuid='cea84306-ba32-4863-930d-0bb9ca8e5a4a',
         path='/lib/dblayer/model/table.py',
         lineno=101,
         depth=5,
         type='variable',
         name='cls._trigger_list',
         text='cls._trigger_list = []')

Fragment(uuid='4789cade-e1b0-4d2c-82a4-f3643b6e6d0b',
         path='/lib/dblayer/model/table.py',
         lineno=102,
         depth=0,
         type='module',
         name='',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='ff24aec8-c115-419f-a810-1c20a4c067fd',
         path='/lib/dblayer/model/table.py',
         lineno=102,
         depth=0,
         type='class',
         name='Table',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='67780b06-1f55-4fd4-8530-06dbfc9e7544',
         path='/lib/dblayer/model/table.py',
         lineno=102,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='6f67c420-26a8-45d0-a11a-1f9a73e85ce5',
         path='/lib/dblayer/model/table.py',
         lineno=103,
         depth=7,
         type='variable',
         name='value',
         text='value = getattr(cls, name)')

Fragment(uuid='629fbc19-2e92-48b0-b91f-a3dbaa509962',
         path='/lib/dblayer/model/table.py',
         lineno=104,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if isinstance(value, column.BaseColumn):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._column_list.append(value)\n')

Fragment(uuid='336f44a8-84f7-46e3-b844-85811e61bd88',
         path='/lib/dblayer/model/table.py',
         lineno=104,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '            if isinstance(value, column.BaseColumn):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._column_list.append(value)\n')

Fragment(uuid='30d78836-2b8e-4e28-998f-e88694bed53d',
         path='/lib/dblayer/model/table.py',
         lineno=104,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='\n'
              '            if isinstance(value, column.BaseColumn):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._column_list.append(value)\n')

Fragment(uuid='c1d489a9-bc7b-483c-8d04-d5978367582b',
         path='/lib/dblayer/model/table.py',
         lineno=106,
         depth=9,
         type='variable',
         name='value.name',
         text='value.name = name')

Fragment(uuid='d5837b48-20f4-4aa5-9d84-c92d39fd8d93',
         path='/lib/dblayer/model/table.py',
         lineno=107,
         depth=9,
         type='variable',
         name='value.table_class',
         text='value.table_class = cls')

Fragment(uuid='e1acd22d-4676-49c8-b937-6f2d8185b442',
         path='/lib/dblayer/model/table.py',
         lineno=109,
         depth=0,
         type='module',
         name='',
         text='                if value.primary_key:\n'
              "                    assert cls._primary_key is None, 'More than "
              "one primary key columns are defined for table: %s' % "
              'cls.__name__\n'
              '                    cls._primary_key = value\n')

Fragment(uuid='84d3ab69-ca62-47f9-ab4d-a110f9e18ad8',
         path='/lib/dblayer/model/table.py',
         lineno=109,
         depth=0,
         type='class',
         name='Table',
         text='                if value.primary_key:\n'
              "                    assert cls._primary_key is None, 'More than "
              "one primary key columns are defined for table: %s' % "
              'cls.__name__\n'
              '                    cls._primary_key = value\n')

Fragment(uuid='644b0554-4544-41a8-9b82-5f6ffc8cc897',
         path='/lib/dblayer/model/table.py',
         lineno=109,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='                if value.primary_key:\n'
              "                    assert cls._primary_key is None, 'More than "
              "one primary key columns are defined for table: %s' % "
              'cls.__name__\n'
              '                    cls._primary_key = value\n')

Fragment(uuid='1e4783db-0592-4f77-9749-d760070b8e69',
         path='/lib/dblayer/model/table.py',
         lineno=111,
         depth=11,
         type='variable',
         name='cls._primary_key',
         text='cls._primary_key = value')

Fragment(uuid='acf170dc-6302-42d0-b8e7-8dfa437ec8fc',
         path='/lib/dblayer/model/table.py',
         lineno=112,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            elif isinstance(value, constraint.BaseConstraint):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._constraint_list.append(value)\n')

Fragment(uuid='914a84a7-28ff-4daa-bd92-fc1f2de3fe26',
         path='/lib/dblayer/model/table.py',
         lineno=112,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '            elif isinstance(value, constraint.BaseConstraint):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._constraint_list.append(value)\n')

Fragment(uuid='ae91b30b-dabf-4b13-9349-07fca55563af',
         path='/lib/dblayer/model/table.py',
         lineno=112,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='\n'
              '            elif isinstance(value, constraint.BaseConstraint):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._constraint_list.append(value)\n')

Fragment(uuid='f7928c87-458d-4363-b9e7-e5bd28d20497',
         path='/lib/dblayer/model/table.py',
         lineno=114,
         depth=10,
         type='variable',
         name='value.name',
         text='value.name = name')

Fragment(uuid='0e4feba5-bca4-4138-a7b5-59262005e1dc',
         path='/lib/dblayer/model/table.py',
         lineno=115,
         depth=10,
         type='variable',
         name='value.table_class',
         text='value.table_class = cls')

Fragment(uuid='ec5030a7-2762-45f7-aaaa-8807f861c334',
         path='/lib/dblayer/model/table.py',
         lineno=117,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            elif isinstance(value, index.BaseIndex):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._index_list.append(value)\n')

Fragment(uuid='5b6ce5b4-c2b4-470b-b13b-975bba39cddc',
         path='/lib/dblayer/model/table.py',
         lineno=117,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '            elif isinstance(value, index.BaseIndex):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._index_list.append(value)\n')

Fragment(uuid='67ad24f2-b207-433a-9872-9a52a1fe846a',
         path='/lib/dblayer/model/table.py',
         lineno=117,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='\n'
              '            elif isinstance(value, index.BaseIndex):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._index_list.append(value)\n')

Fragment(uuid='1ba9cbe0-e1bf-4b2c-900d-22c418a867bd',
         path='/lib/dblayer/model/table.py',
         lineno=119,
         depth=10,
         type='variable',
         name='value.name',
         text='value.name = name')

Fragment(uuid='5cd8a403-f52a-4dc2-9c6b-794b593e21de',
         path='/lib/dblayer/model/table.py',
         lineno=120,
         depth=10,
         type='variable',
         name='value.table_class',
         text='value.table_class = cls')

Fragment(uuid='7265c315-f75e-482e-b0eb-7f54f9a2e3c5',
         path='/lib/dblayer/model/table.py',
         lineno=122,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            elif isinstance(value, trigger.BaseTrigger):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._trigger_list.append(value)\n'
              '\n'
              '        # Sort the definition objects to keep their source code '
              'order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        '
              'cls._constraint_list.sort(key=constraint.BaseConstraint.sort_key)\n'
              '        cls._index_list.sort(key=index.BaseIndex.sort_key)\n'
              '        '
              'cls._trigger_list.sort(key=trigger.BaseTrigger.sort_key)\n'
              '\n'
              '        # If we have a primary key column, then it must be the '
              'first one\n')

Fragment(uuid='eb38d414-17df-4bcd-a0b2-9ee75a81c4ea',
         path='/lib/dblayer/model/table.py',
         lineno=122,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '            elif isinstance(value, trigger.BaseTrigger):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._trigger_list.append(value)\n'
              '\n'
              '        # Sort the definition objects to keep their source code '
              'order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        '
              'cls._constraint_list.sort(key=constraint.BaseConstraint.sort_key)\n'
              '        cls._index_list.sort(key=index.BaseIndex.sort_key)\n'
              '        '
              'cls._trigger_list.sort(key=trigger.BaseTrigger.sort_key)\n'
              '\n'
              '        # If we have a primary key column, then it must be the '
              'first one\n')

Fragment(uuid='272b05a4-34d8-4bd7-bf10-9e9747ce9b3e',
         path='/lib/dblayer/model/table.py',
         lineno=122,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='\n'
              '            elif isinstance(value, trigger.BaseTrigger):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._trigger_list.append(value)\n'
              '\n'
              '        # Sort the definition objects to keep their source code '
              'order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        '
              'cls._constraint_list.sort(key=constraint.BaseConstraint.sort_key)\n'
              '        cls._index_list.sort(key=index.BaseIndex.sort_key)\n'
              '        '
              'cls._trigger_list.sort(key=trigger.BaseTrigger.sort_key)\n'
              '\n'
              '        # If we have a primary key column, then it must be the '
              'first one\n')

Fragment(uuid='33b741e8-487f-45d1-b119-77c32d10894f',
         path='/lib/dblayer/model/table.py',
         lineno=124,
         depth=10,
         type='variable',
         name='value.name',
         text='value.name = name')

Fragment(uuid='22d54add-7e80-448c-8317-c71989767a94',
         path='/lib/dblayer/model/table.py',
         lineno=125,
         depth=10,
         type='variable',
         name='value.table_class',
         text='value.table_class = cls')

Fragment(uuid='e5acead3-025c-48b3-840a-1f24194d42eb',
         path='/lib/dblayer/model/table.py',
         lineno=135,
         depth=0,
         type='module',
         name='',
         text='        if cls._primary_key:\n'
              '            assert cls._column_list[0] is cls._primary_key, (\n'
              "                    'The primary key column must be the first "
              "one defined for table: %s' % cls.__name__)\n"
              '\n'
              '        # Add implicit definitions required by some of the '
              'existing definitions\n')

Fragment(uuid='019a772b-374f-4c96-a1e6-6be4d3522b06',
         path='/lib/dblayer/model/table.py',
         lineno=135,
         depth=0,
         type='class',
         name='Table',
         text='        if cls._primary_key:\n'
              '            assert cls._column_list[0] is cls._primary_key, (\n'
              "                    'The primary key column must be the first "
              "one defined for table: %s' % cls.__name__)\n"
              '\n'
              '        # Add implicit definitions required by some of the '
              'existing definitions\n')

Fragment(uuid='462f2552-e39a-47e6-9b2c-9a8b2175f1ca',
         path='/lib/dblayer/model/table.py',
         lineno=135,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='        if cls._primary_key:\n'
              '            assert cls._column_list[0] is cls._primary_key, (\n'
              "                    'The primary key column must be the first "
              "one defined for table: %s' % cls.__name__)\n"
              '\n'
              '        # Add implicit definitions required by some of the '
              'existing definitions\n')

Fragment(uuid='6cb2f81f-eac9-4ff9-b893-bfe8da3b0b62',
         path='/lib/dblayer/model/table.py',
         lineno=140,
         depth=0,
         type='module',
         name='',
         text='        for member in cls._column_list + cls._index_list:\n')

Fragment(uuid='c8126767-2e2d-45bb-b38a-cf13ba90c4de',
         path='/lib/dblayer/model/table.py',
         lineno=140,
         depth=0,
         type='class',
         name='Table',
         text='        for member in cls._column_list + cls._index_list:\n')

Fragment(uuid='8c57d414-7751-45a9-bd60-665aad7d18c0',
         path='/lib/dblayer/model/table.py',
         lineno=140,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='        for member in cls._column_list + cls._index_list:\n')

Fragment(uuid='6445658e-1f45-4ac3-9f08-761c76c0d3b1',
         path='/lib/dblayer/model/table.py',
         lineno=141,
         depth=0,
         type='module',
         name='',
         text='            for name, definition in '
              'member.get_implicit_definition_list_for_table_class(cls):\n'
              '                assert not hasattr(cls, name), (\n'
              "                        'Attribute name %s.%s collides with "
              "implicit %s definition required by %s.%s!' %\n"
              '                        (cls.__name__, name, '
              'definition.__class__.__name__, cls.__name__, member.name))\n')

Fragment(uuid='5d7840b1-efe2-4c1b-bb36-c403c9cbe7b2',
         path='/lib/dblayer/model/table.py',
         lineno=141,
         depth=0,
         type='class',
         name='Table',
         text='            for name, definition in '
              'member.get_implicit_definition_list_for_table_class(cls):\n'
              '                assert not hasattr(cls, name), (\n'
              "                        'Attribute name %s.%s collides with "
              "implicit %s definition required by %s.%s!' %\n"
              '                        (cls.__name__, name, '
              'definition.__class__.__name__, cls.__name__, member.name))\n')

Fragment(uuid='bcbb4335-8b87-486d-9ae6-9c0057fa7bf2',
         path='/lib/dblayer/model/table.py',
         lineno=141,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='            for name, definition in '
              'member.get_implicit_definition_list_for_table_class(cls):\n'
              '                assert not hasattr(cls, name), (\n'
              "                        'Attribute name %s.%s collides with "
              "implicit %s definition required by %s.%s!' %\n"
              '                        (cls.__name__, name, '
              'definition.__class__.__name__, cls.__name__, member.name))\n')

Fragment(uuid='67b8314d-9c4b-49d8-b6e1-43568a858e77',
         path='/lib/dblayer/model/table.py',
         lineno=145,
         depth=0,
         type='module',
         name='',
         text='                if isinstance(definition, '
              'constraint.BaseConstraint):\n'
              '                    cls._constraint_list.append(definition)\n'
              '                elif isinstance(definition, index.BaseIndex):\n'
              '                    cls._index_list.append(definition)\n'
              '                elif isinstance(definition, '
              'trigger.BaseTrigger):\n'
              '                    cls._trigger_list.append(definition)\n'
              '                else:\n'
              '                    raise TypeError(\n'
              "                        'Unsupported implicit definition "
              "required by %s.%s: %r' %\n"
              '                        (cls.__name__, member.name, '
              'definition))\n'
              '                definition.table_class = cls\n'
              '                definition.name = name\n'
              '                definition.implicit = True\n'
              '                setattr(cls, name, definition)\n')

Fragment(uuid='4cdfb9f9-70e1-4e01-913f-b6a9c732188f',
         path='/lib/dblayer/model/table.py',
         lineno=145,
         depth=0,
         type='class',
         name='Table',
         text='                if isinstance(definition, '
              'constraint.BaseConstraint):\n'
              '                    cls._constraint_list.append(definition)\n'
              '                elif isinstance(definition, index.BaseIndex):\n'
              '                    cls._index_list.append(definition)\n'
              '                elif isinstance(definition, '
              'trigger.BaseTrigger):\n'
              '                    cls._trigger_list.append(definition)\n'
              '                else:\n'
              '                    raise TypeError(\n'
              "                        'Unsupported implicit definition "
              "required by %s.%s: %r' %\n"
              '                        (cls.__name__, member.name, '
              'definition))\n'
              '                definition.table_class = cls\n'
              '                definition.name = name\n'
              '                definition.implicit = True\n'
              '                setattr(cls, name, definition)\n')

Fragment(uuid='4e2266a3-b7da-4c93-82e0-406b9328ea1d',
         path='/lib/dblayer/model/table.py',
         lineno=145,
         depth=3,
         type='function',
         name='_prepare_table_definition',
         text='                if isinstance(definition, '
              'constraint.BaseConstraint):\n'
              '                    cls._constraint_list.append(definition)\n'
              '                elif isinstance(definition, index.BaseIndex):\n'
              '                    cls._index_list.append(definition)\n'
              '                elif isinstance(definition, '
              'trigger.BaseTrigger):\n'
              '                    cls._trigger_list.append(definition)\n'
              '                else:\n'
              '                    raise TypeError(\n'
              "                        'Unsupported implicit definition "
              "required by %s.%s: %r' %\n"
              '                        (cls.__name__, member.name, '
              'definition))\n'
              '                definition.table_class = cls\n'
              '                definition.name = name\n'
              '                definition.implicit = True\n'
              '                setattr(cls, name, definition)')

Fragment(uuid='f49ae71b-21a9-4733-8c19-05754e9dd6aa',
         path='/lib/dblayer/model/table.py',
         lineno=155,
         depth=9,
         type='variable',
         name='definition.table_class',
         text='definition.table_class = cls')

Fragment(uuid='6275b704-4e58-4975-a5b4-1c8ab28919aa',
         path='/lib/dblayer/model/table.py',
         lineno=156,
         depth=9,
         type='variable',
         name='definition.name',
         text='definition.name = name')

Fragment(uuid='760dd4eb-5dcb-4099-9624-38ff6571302d',
         path='/lib/dblayer/model/table.py',
         lineno=157,
         depth=9,
         type='variable',
         name='definition.implicit',
         text='definition.implicit = True')

Fragment(uuid='a8b8ca83-17f3-4cb2-b1ce-8637b22c6bb5',
         path='/lib/dblayer/model/table.py',
         lineno=159,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self):\n'
              '        # Do not allow initialization of the abstract base '
              'class\n'
              '        assert self.__class__ is not Table, (\n'
              "            'Only subclasses of Table can be instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Clone columns, constraints and indexes\n'
              '        self._column_list')

Fragment(uuid='9acf26a9-1416-42f4-9594-d33395abd3d6',
         path='/lib/dblayer/model/table.py',
         lineno=159,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '    def __init__(self):\n'
              '        # Do not allow initialization of the abstract base '
              'class\n'
              '        assert self.__class__ is not Table, (\n'
              "            'Only subclasses of Table can be instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Clone columns, constraints and indexes\n'
              '        self._column_list')

Fragment(uuid='91bf36b9-a4ef-47cd-a580-624e479aeeb7',
         path='/lib/dblayer/model/table.py',
         lineno=160,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self):\n'
              '        # Do not allow initialization of the abstract base '
              'class\n'
              '        assert self.__class__ is not Table, (\n'
              "            'Only subclasses of Table can be instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Clone columns, constraints and indexes\n'
              '        self._column_list =')

Fragment(uuid='8efa13ff-1dbc-4cc7-96ad-dc84318174e1',
         path='/lib/dblayer/model/table.py',
         lineno=166,
         depth=4,
         type='variable',
         name='self.__definition_serial__',
         text='self.__definition_serial__ = util.get_next_definition_serial()')

Fragment(uuid='6f51c43d-00a7-4100-a6c4-f4317504f158',
         path='/lib/dblayer/model/table.py',
         lineno=169,
         depth=0,
         type='module',
         name='',
         text=' = [column.clone(self) for column in self._column_list]\n'
              '        self._constraint_list = [constraint.clone(self) for '
              'constraint in self._constraint_list]\n'
              '        self._index_list = [index.clone(self) for index in '
              'self._index_list]\n'
              '        self._trigger_list = [trigger.clone(self) for trigger '
              'in self._trigger_list]\n'
              '\n'
              '        # Override the model definitions with the bound '
              'instances\n')

Fragment(uuid='9497efb1-0a95-4a80-ad71-67e76c7bf5ce',
         path='/lib/dblayer/model/table.py',
         lineno=169,
         depth=0,
         type='class',
         name='Table',
         text=' = [column.clone(self) for column in self._column_list]\n'
              '        self._constraint_list = [constraint.clone(self) for '
              'constraint in self._constraint_list]\n'
              '        self._index_list = [index.clone(self) for index in '
              'self._index_list]\n'
              '        self._trigger_list = [trigger.clone(self) for trigger '
              'in self._trigger_list]\n'
              '\n'
              '        # Override the model definitions with the bound '
              'instances\n')

Fragment(uuid='6176bc4e-05fd-4ff0-9142-eee2ead632c6',
         path='/lib/dblayer/model/table.py',
         lineno=169,
         depth=2,
         type='function',
         name='__init__',
         text=' [column.clone(self) for column in self._column_list]\n'
              '        self._constraint_list = [constraint.clone(self) for '
              'constraint in self._constraint_list]\n'
              '        self._index_list = [index.clone(self) for index in '
              'self._index_list]\n'
              '        self._trigger_list = [trigger.clone(self) for trigger '
              'in self._trigger_list]\n'
              '\n'
              '        # Override the model definitions with the bound '
              'instances\n')

Fragment(uuid='c641b345-6e13-431b-be50-89c3d3048e40',
         path='/lib/dblayer/model/table.py',
         lineno=169,
         depth=4,
         type='variable',
         name='self._column_list',
         text='self._column_list = [column.clone(self) for column in '
              'self._column_list]')

Fragment(uuid='2993a45a-0b6e-4585-b803-8977d1b5772b',
         path='/lib/dblayer/model/table.py',
         lineno=170,
         depth=4,
         type='variable',
         name='self._constraint_list',
         text='self._constraint_list = [constraint.clone(self) for constraint '
              'in self._constraint_list]')

Fragment(uuid='f38ab486-b559-4b97-91ab-f4d692b067fb',
         path='/lib/dblayer/model/table.py',
         lineno=171,
         depth=4,
         type='variable',
         name='self._index_list',
         text='self._index_list = [index.clone(self) for index in '
              'self._index_list]')

Fragment(uuid='90ed4c4e-12b1-4182-8e2a-31bf95116e14',
         path='/lib/dblayer/model/table.py',
         lineno=172,
         depth=4,
         type='variable',
         name='self._trigger_list',
         text='self._trigger_list = [trigger.clone(self) for trigger in '
              'self._trigger_list]')

Fragment(uuid='2313bde0-682e-435c-a62d-e111ab32daee',
         path='/lib/dblayer/model/table.py',
         lineno=175,
         depth=0,
         type='module',
         name='',
         text='        for column in self._column_list:\n'
              '            setattr(self, column.name, column)\n')

Fragment(uuid='effce341-319f-439f-bedb-c2e2d318a057',
         path='/lib/dblayer/model/table.py',
         lineno=175,
         depth=0,
         type='class',
         name='Table',
         text='        for column in self._column_list:\n'
              '            setattr(self, column.name, column)\n')

Fragment(uuid='c6c1b835-9971-4e21-8b7f-36d193c63555',
         path='/lib/dblayer/model/table.py',
         lineno=175,
         depth=2,
         type='function',
         name='__init__',
         text='        for column in self._column_list:\n'
              '            setattr(self, column.name, column)\n')

Fragment(uuid='ef488d43-c516-436e-b3a7-2c074b1b1555',
         path='/lib/dblayer/model/table.py',
         lineno=177,
         depth=0,
         type='module',
         name='',
         text='        for constraint in self._constraint_list:\n'
              '            setattr(self, constraint.name, constraint)\n')

Fragment(uuid='9dcac2c1-003e-495d-a899-148e595f0b25',
         path='/lib/dblayer/model/table.py',
         lineno=177,
         depth=0,
         type='class',
         name='Table',
         text='        for constraint in self._constraint_list:\n'
              '            setattr(self, constraint.name, constraint)\n')

Fragment(uuid='7a91746a-324d-47bd-8f86-c460b35aabdc',
         path='/lib/dblayer/model/table.py',
         lineno=177,
         depth=2,
         type='function',
         name='__init__',
         text='        for constraint in self._constraint_list:\n'
              '            setattr(self, constraint.name, constraint)\n')

Fragment(uuid='a4a0de36-786e-4699-912f-fc43206e1653',
         path='/lib/dblayer/model/table.py',
         lineno=179,
         depth=0,
         type='module',
         name='',
         text='        for index in self._index_list:\n'
              '            setattr(self, index.name, index)\n')

Fragment(uuid='56e812d7-d5c6-42ea-991c-3737c759beca',
         path='/lib/dblayer/model/table.py',
         lineno=179,
         depth=0,
         type='class',
         name='Table',
         text='        for index in self._index_list:\n'
              '            setattr(self, index.name, index)\n')

Fragment(uuid='4a26edf3-daea-4c56-8970-a133a0292c7b',
         path='/lib/dblayer/model/table.py',
         lineno=179,
         depth=2,
         type='function',
         name='__init__',
         text='        for index in self._index_list:\n'
              '            setattr(self, index.name, index)\n')

Fragment(uuid='81285921-30f3-42d8-8caa-ccf4409c9d38',
         path='/lib/dblayer/model/table.py',
         lineno=181,
         depth=0,
         type='module',
         name='',
         text='        for trigger in self._trigger_list:\n'
              '            setattr(self, trigger.name, trigger)\n'
              '\n'
              '        # Reassign the primary key\n'
              '        if self._primary_key:\n'
              '            self._primary_key = getattr(self, '
              'self._primary_key.name)\n')

Fragment(uuid='6d030c3e-15b5-4a45-b87e-2c71ddb88de9',
         path='/lib/dblayer/model/table.py',
         lineno=181,
         depth=0,
         type='class',
         name='Table',
         text='        for trigger in self._trigger_list:\n'
              '            setattr(self, trigger.name, trigger)\n'
              '\n'
              '        # Reassign the primary key\n'
              '        if self._primary_key:\n'
              '            self._primary_key = getattr(self, '
              'self._primary_key.name)\n')

Fragment(uuid='b328fe7e-3e26-407f-b810-e9ff2ee2b186',
         path='/lib/dblayer/model/table.py',
         lineno=181,
         depth=2,
         type='function',
         name='__init__',
         text='        for trigger in self._trigger_list:\n'
              '            setattr(self, trigger.name, trigger)\n'
              '\n'
              '        # Reassign the primary key\n'
              '        if self._primary_key:\n'
              '            self._primary_key = getattr(self, '
              'self._primary_key.name)')

Fragment(uuid='91606cef-68b6-485f-a88f-aeb1b54b7651',
         path='/lib/dblayer/model/table.py',
         lineno=186,
         depth=6,
         type='variable',
         name='self._primary_key',
         text='self._primary_key = getattr(self, self._primary_key.name)')

Fragment(uuid='a790e5cd-b542-4aef-a05f-78438cc1145f',
         path='/lib/dblayer/model/table.py',
         lineno=187,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def join(self, foreign_key_column):\n'
              '        """ Joins this table inside a query with the given '
              'foreign key\n'
              '        \n'
              '        It is an INNER JOIN for non-nullable foreign keys and a '
              'LEFT JOIN\n')

Fragment(uuid='801b756f-6163-44df-bc70-2b1f98cc5dd4',
         path='/lib/dblayer/model/table.py',
         lineno=187,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '    def join(self, foreign_key_column):\n'
              '        """ Joins this table inside a query with the given '
              'foreign key\n'
              '        \n'
              '        It is an INNER JOIN for non-nullable foreign keys and a '
              'LEFT JOIN\n')

Fragment(uuid='30fc2feb-394c-4a83-b9e3-c8ca40590155',
         path='/lib/dblayer/model/table.py',
         lineno=188,
         depth=2,
         type='function',
         name='join',
         text='def join(self, foreign_key_column):\n'
              '        """ Joins this table inside a query with the given '
              'foreign key\n'
              '        \n'
              '        It is an INNER JOIN for non-nullable foreign keys and a '
              'LEFT JOIN\n')

Fragment(uuid='14439021-0e10-4175-9d5c-b943509406a4',
         path='/lib/dblayer/model/table.py',
         lineno=192,
         depth=0,
         type='module',
         name='',
         text='        for nullable ones. It just records the joined table as '
              'a source to\n'
              '        build views, does not generate actual SQL.\n'
              '        \n'
              '        Each table can be joined with a single foreign key.\n'
              '        Unjoined tables are cross-joined.\n'
              '        \n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(foreign_key_column, '
              'column.ForeignKey)\n'
              '            assert foreign_key_column.table, (\n'
              "                'Only foreign keys bound to a table instance "
              "can be used to join tables.')\n"
              '            assert self._referer is None, (\n'
              "                    'Table or view %s has already been joined "
              "with foreign key column: %s' %\n"
              '                    (self.__class__.__name__, '
              'foreign_key_column._name))\n'
              '\n'
              '        self._referer = foreign_key_column\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='2b849236-d9af-43d1-afa0-45e6c9b112c5',
         path='/lib/dblayer/model/table.py',
         lineno=192,
         depth=0,
         type='class',
         name='Table',
         text='        for nullable ones. It just records the joined table as '
              'a source to\n'
              '        build views, does not generate actual SQL.\n'
              '        \n'
              '        Each table can be joined with a single foreign key.\n'
              '        Unjoined tables are cross-joined.\n'
              '        \n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(foreign_key_column, '
              'column.ForeignKey)\n'
              '            assert foreign_key_column.table, (\n'
              "                'Only foreign keys bound to a table instance "
              "can be used to join tables.')\n"
              '            assert self._referer is None, (\n'
              "                    'Table or view %s has already been joined "
              "with foreign key column: %s' %\n"
              '                    (self.__class__.__name__, '
              'foreign_key_column._name))\n'
              '\n'
              '        self._referer = foreign_key_column\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='8b297aae-8d95-44ef-b1a3-74d275630e15',
         path='/lib/dblayer/model/table.py',
         lineno=192,
         depth=2,
         type='function',
         name='join',
         text='        for nullable ones. It just records the joined table as '
              'a source to\n'
              '        build views, does not generate actual SQL.\n'
              '        \n'
              '        Each table can be joined with a single foreign key.\n'
              '        Unjoined tables are cross-joined.\n'
              '        \n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(foreign_key_column, '
              'column.ForeignKey)\n'
              '            assert foreign_key_column.table, (\n'
              "                'Only foreign keys bound to a table instance "
              "can be used to join tables.')\n"
              '            assert self._referer is None, (\n'
              "                    'Table or view %s has already been joined "
              "with foreign key column: %s' %\n"
              '                    (self.__class__.__name__, '
              'foreign_key_column._name))\n'
              '\n'
              '        self._referer = foreign_key_column')

Fragment(uuid='6755b97c-db97-4026-adc3-809a2c8105f8',
         path='/lib/dblayer/model/table.py',
         lineno=207,
         depth=4,
         type='variable',
         name='self._referer',
         text='self._referer = foreign_key_column')

Fragment(uuid='759f188b-9cff-4d1c-a9eb-8d7281b30d9e',
         path='/lib/dblayer/model/table.py',
         lineno=210,
         depth=0,
         type='module',
         name='',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the table\n'
              '        """\n'
              "        line_list = ['class %s(table.Table):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n"
              '\n'
              '        extra_line_list = []\n')

Fragment(uuid='85b8b631-4c85-4b05-a081-5dd6ff8a1a07',
         path='/lib/dblayer/model/table.py',
         lineno=210,
         depth=0,
         type='class',
         name='Table',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the table\n'
              '        """\n'
              "        line_list = ['class %s(table.Table):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n"
              '\n'
              '        extra_line_list = []\n')

Fragment(uuid='c307a8d7-ed48-4926-b853-8bbe60c1fd97',
         path='/lib/dblayer/model/table.py',
         lineno=210,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='def pretty_format_class(cls):\n'
              '        """ Formats source code defining the table\n'
              '        """\n'
              "        line_list = ['class %s(table.Table):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n"
              '\n'
              '        extra_line_list = []\n')

Fragment(uuid='18277975-d415-4e85-9f67-a8ccdc7a4786',
         path='/lib/dblayer/model/table.py',
         lineno=213,
         depth=5,
         type='variable',
         name='line_list',
         text="line_list = ['class %s(table.Table):' % cls.__name__]")

Fragment(uuid='7bf6b810-0b56-4c3f-9e2d-35f850303502',
         path='/lib/dblayer/model/table.py',
         lineno=214,
         depth=5,
         type='variable',
         name='append_line',
         text='append_line = line_list.append')

Fragment(uuid='86efe22a-68c7-46e4-88f3-e2b97aed33a6',
         path='/lib/dblayer/model/table.py',
         lineno=224,
         depth=5,
         type='variable',
         name='extra_line_list',
         text='extra_line_list = []')

Fragment(uuid='d1f32c1f-eee2-4a37-8392-23dd83f2d676',
         path='/lib/dblayer/model/table.py',
         lineno=225,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._column_list:\n'
              '            if isinstance(obj, column.ForeignKey) and '
              'obj.referenced_table_class is cls:\n'
              '                obj.referenced_table_class = None\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '                obj.referenced_table_class = cls\n'
              '                '
              "extra_line_list.append('%s.%s.referenced_table_class = %s' % (\n"
              '                    cls.__name__, obj.name, cls.__name__))\n'
              '            else:\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n')

Fragment(uuid='31b64d8f-2db9-45c9-8fa8-ea708aeaeca1',
         path='/lib/dblayer/model/table.py',
         lineno=225,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '        for obj in cls._column_list:\n'
              '            if isinstance(obj, column.ForeignKey) and '
              'obj.referenced_table_class is cls:\n'
              '                obj.referenced_table_class = None\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '                obj.referenced_table_class = cls\n'
              '                '
              "extra_line_list.append('%s.%s.referenced_table_class = %s' % (\n"
              '                    cls.__name__, obj.name, cls.__name__))\n'
              '            else:\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n')

Fragment(uuid='cf8ac676-439c-4e9b-98b0-d8d325c6744f',
         path='/lib/dblayer/model/table.py',
         lineno=225,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._column_list:\n'
              '            if isinstance(obj, column.ForeignKey) and '
              'obj.referenced_table_class is cls:\n'
              '                obj.referenced_table_class = None\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '                obj.referenced_table_class = cls\n'
              '                '
              "extra_line_list.append('%s.%s.referenced_table_class = %s' % (\n"
              '                    cls.__name__, obj.name, cls.__name__))\n'
              '            else:\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n')

Fragment(uuid='0d6113d9-6597-40b4-b009-9e06144e0ce1',
         path='/lib/dblayer/model/table.py',
         lineno=228,
         depth=9,
         type='variable',
         name='obj.referenced_table_class',
         text='obj.referenced_table_class = None')

Fragment(uuid='5813cb34-0fd5-4bec-adc5-98540aa983a6',
         path='/lib/dblayer/model/table.py',
         lineno=230,
         depth=9,
         type='variable',
         name='obj.referenced_table_class',
         text='obj.referenced_table_class = cls')

Fragment(uuid='eb70b3ba-1b6c-4dfe-a8e7-978f64f1c8c4',
         path='/lib/dblayer/model/table.py',
         lineno=235,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._constraint_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='42ff7d1f-f307-4b03-a951-2b5b926328cb',
         path='/lib/dblayer/model/table.py',
         lineno=235,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '        for obj in cls._constraint_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='fb753c6d-2bfd-4a51-baaa-403e5f72af30',
         path='/lib/dblayer/model/table.py',
         lineno=235,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._constraint_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='984fc68b-9d29-4112-ae97-6b68a22944c5',
         path='/lib/dblayer/model/table.py',
         lineno=239,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._index_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='113c7c79-e354-4968-97bc-1b0ae57ee69e',
         path='/lib/dblayer/model/table.py',
         lineno=239,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '        for obj in cls._index_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='dafd0add-2b1e-4c5d-8ac6-110d8caa2bcc',
         path='/lib/dblayer/model/table.py',
         lineno=239,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._index_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='1d1f5fdc-5a52-4ce1-b056-9ea65c7203f3',
         path='/lib/dblayer/model/table.py',
         lineno=243,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._trigger_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              '        if extra_line_list:\n'
              "            append_line('')\n"
              '            line_list.extend(extra_line_list)\n'
              '\n'
              "        return '\\n'.join(line_list)\n")

Fragment(uuid='a1a5e17d-7491-48bf-91ab-f32d1ff78242',
         path='/lib/dblayer/model/table.py',
         lineno=243,
         depth=0,
         type='class',
         name='Table',
         text='\n'
              '        for obj in cls._trigger_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              '        if extra_line_list:\n'
              "            append_line('')\n"
              '            line_list.extend(extra_line_list)\n'
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='f03be71c-a92a-4555-b5f5-aba7692981d7',
         path='/lib/dblayer/model/table.py',
         lineno=243,
         depth=3,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._trigger_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              '        if extra_line_list:\n'
              "            append_line('')\n"
              '            line_list.extend(extra_line_list)\n'
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='eb5d605b-d5ff-4136-a73a-162e4b80c474',
         path='/lib/dblayer/model/trigger.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Trigger definitions\n"""\n\nfrom dblayer import util\n')

Fragment(uuid='92e00721-e1f3-4aeb-a921-98a97dae3c0d',
         path='/lib/dblayer/model/trigger.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/trigger.py\n'
              '  Classes: AfterDeleteRow AfterDeleteStatement '
              'AfterInsertOrUpdateRow AfterInsertOrUpdateStatement '
              'AfterInsertRow AfterInsertStatement AfterUpdateRow '
              'AfterUpdateStatement BaseTrigger BeforeDeleteRow '
              'BeforeDeleteStatement BeforeInsertOrUpdateRow '
              'BeforeInsertOrUpdateStatement BeforeInsertRow '
              'BeforeInsertStatement BeforeUpdateRow BeforeUpdateStatement\n'
              '  Methods: __init__ __repr__ __str__ clone sort_key\n'
              '  Variables: __definition_serial__ clone clone.table implicit '
              'name self.__definition_serial__ self.procedure_name '
              'self.procedure_parameters table table_class\n'
              '  Usages: __class__ __dict__ __module__ __name__ dblayer '
              'get_next_definition_serial join obj parameter procedure_name '
              'procedure_parameters rsplit self staticmethod update util\n')

Fragment(uuid='2f3cf32c-60d4-4d0d-80f6-b3d03f983d63',
         path='/lib/dblayer/model/trigger.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import util')

Fragment(uuid='5036a357-91b7-4b98-a1c6-f5b2e3fbc6a1',
         path='/lib/dblayer/model/trigger.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseTrigger:\n'
              '    """ Base class for database triggers\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of trigger definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this trigger\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this t')

Fragment(uuid='5255c097-7b8c-4f55-bccc-e97cb3ae6dc8',
         path='/lib/dblayer/model/trigger.py',
         lineno=7,
         depth=0,
         type='class',
         name='BaseTrigger',
         text='class BaseTrigger:\n'
              '    """ Base class for database triggers\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of trigger definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this trigger\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this tr')

Fragment(uuid='632c332d-03a1-40f6-9f64-a8632c6243fa',
         path='/lib/dblayer/model/trigger.py',
         lineno=12,
         depth=2,
         type='variable',
         name='__definition_serial__',
         text='__definition_serial__ = 0')

Fragment(uuid='1c96301f-ee5e-489b-a288-5cbaf86f104a',
         path='/lib/dblayer/model/trigger.py',
         lineno=16,
         depth=2,
         type='variable',
         name='table_class',
         text='table_class = None')

Fragment(uuid='8eb26970-e78e-4a6c-aaaa-37ca500c7dde',
         path='/lib/dblayer/model/trigger.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text='rigger or None for model triggers\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'triggers from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the trigger\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n')

Fragment(uuid='85bc5637-40a0-42b8-8b51-e397ba4f5a59',
         path='/lib/dblayer/model/trigger.py',
         lineno=18,
         depth=0,
         type='class',
         name='BaseTrigger',
         text='igger or None for model triggers\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'triggers from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the trigger\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n')

Fragment(uuid='e966212e-57ee-43c3-bd43-d09185979697',
         path='/lib/dblayer/model/trigger.py',
         lineno=20,
         depth=2,
         type='variable',
         name='table',
         text='table = None')

Fragment(uuid='e1abfd84-197b-40fb-aafe-ed4d4b6d5ad3',
         path='/lib/dblayer/model/trigger.py',
         lineno=24,
         depth=2,
         type='variable',
         name='name',
         text="name = ''")

Fragment(uuid='541ee5ca-a2c9-45a0-92c8-9a2f0dbc86bf',
         path='/lib/dblayer/model/trigger.py',
         lineno=27,
         depth=2,
         type='variable',
         name='implicit',
         text='implicit = False')

Fragment(uuid='21061571-3e76-42a5-a00c-5cab04eb62fa',
         path='/lib/dblayer/model/trigger.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Trigger: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)\n')

Fragment(uuid='0c7725ba-605f-4a49-88bf-c733afb37501',
         path='/lib/dblayer/model/trigger.py',
         lineno=28,
         depth=0,
         type='class',
         name='BaseTrigger',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Trigger: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)\n')

Fragment(uuid='1f8dc729-3403-43d4-8b3d-9134df3b878d',
         path='/lib/dblayer/model/trigger.py',
         lineno=29,
         depth=2,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Trigger: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)')

Fragment(uuid='a3e54542-4678-4caa-baac-338c9b267320',
         path='/lib/dblayer/model/trigger.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.procedure_name,\n'
              "            ''.join(', %r' % parameter for parameter in "
              'self.procedure_parameters))\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='f0666b5e-3141-4b88-8157-c8ded446b207',
         path='/lib/dblayer/model/trigger.py',
         lineno=34,
         depth=0,
         type='class',
         name='BaseTrigger',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.procedure_name,\n'
              "            ''.join(', %r' % parameter for parameter in "
              'self.procedure_parameters))\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='a255b535-d1d6-4714-b9ee-1fa94c75240d',
         path='/lib/dblayer/model/trigger.py',
         lineno=35,
         depth=2,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%r%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.procedure_name,\n'
              "            ''.join(', %r' % parameter for parameter in "
              'self.procedure_parameters))')

Fragment(uuid='1333500a-ec6f-4924-854f-18af0ae73761',
         path='/lib/dblayer/model/trigger.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='fd0eb473-3308-48dd-b3e5-5143a1979d63',
         path='/lib/dblayer/model/trigger.py',
         lineno=43,
         depth=0,
         type='class',
         name='BaseTrigger',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='76bb1d1c-3912-4df7-aa84-98a8f1c6e5e2',
         path='/lib/dblayer/model/trigger.py',
         lineno=43,
         depth=3,
         type='function',
         name='sort_key',
         text='def sort_key(obj):\n        return obj.__definition_serial__')

Fragment(uuid='9a650d51-f085-4ffb-be66-9c6759e5fff7',
         path='/lib/dblayer/model/trigger.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, procedure_name, *procedure_parameters):\n'
              '        assert self.__class__ is not BaseTrigger, (\n'
              "            'Only subclasses of BaseTrigger can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.procedure_name = procedure_name\n'
              '        self.procedure_parameters = procedure_parameters\n')

Fragment(uuid='4f9ff1a8-fec4-4fd8-b5b9-8a9f395b4393',
         path='/lib/dblayer/model/trigger.py',
         lineno=45,
         depth=0,
         type='class',
         name='BaseTrigger',
         text='\n'
              '    def __init__(self, procedure_name, *procedure_parameters):\n'
              '        assert self.__class__ is not BaseTrigger, (\n'
              "            'Only subclasses of BaseTrigger can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.procedure_name = procedure_name\n'
              '        self.procedure_parameters = procedure_parameters\n')

Fragment(uuid='b7cb165d-740d-4122-8e8d-c7388abde021',
         path='/lib/dblayer/model/trigger.py',
         lineno=46,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, procedure_name, *procedure_parameters):\n'
              '        assert self.__class__ is not BaseTrigger, (\n'
              "            'Only subclasses of BaseTrigger can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.procedure_name = procedure_name\n'
              '        self.procedure_parameters = procedure_parameters')

Fragment(uuid='7c59691a-2996-408b-b02e-ea0a5227d8f9',
         path='/lib/dblayer/model/trigger.py',
         lineno=51,
         depth=4,
         type='variable',
         name='self.__definition_serial__',
         text='self.__definition_serial__ = util.get_next_definition_serial()')

Fragment(uuid='e84984f1-6450-40e9-a031-2fd3fa848fcf',
         path='/lib/dblayer/model/trigger.py',
         lineno=53,
         depth=4,
         type='variable',
         name='self.procedure_name',
         text='self.procedure_name = procedure_name')

Fragment(uuid='b99e0fd5-2c83-4e04-8532-391238d29f10',
         path='/lib/dblayer/model/trigger.py',
         lineno=54,
         depth=4,
         type='variable',
         name='self.procedure_parameters',
         text='self.procedure_parameters = procedure_parameters')

Fragment(uuid='cd8789c1-baea-47b0-be2a-5aa460b0671b',
         path='/lib/dblayer/model/trigger.py',
         lineno=55,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this trigger for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'triggers to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='94e91c14-a64b-4d46-958f-82e67b85d4ff',
         path='/lib/dblayer/model/trigger.py',
         lineno=55,
         depth=0,
         type='class',
         name='BaseTrigger',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this trigger for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'triggers to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='09d975dc-1a9a-4cca-a831-4f6745ae2fca',
         path='/lib/dblayer/model/trigger.py',
         lineno=56,
         depth=2,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        """ Clone this trigger for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'triggers to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='015cbf9b-185d-4f65-81f9-9cbddb670e51',
         path='/lib/dblayer/model/trigger.py',
         lineno=62,
         depth=4,
         type='variable',
         name='clone',
         text='clone = self.__class__(None)')

Fragment(uuid='37fc3a29-e6bd-4621-97a6-cd9398280a1d',
         path='/lib/dblayer/model/trigger.py',
         lineno=64,
         depth=4,
         type='variable',
         name='clone.table',
         text='clone.table = table')

Fragment(uuid='389079a2-02fa-4159-9791-68ada0c0fe29',
         path='/lib/dblayer/model/trigger.py',
         lineno=66,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeInsertRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting a database row\n'
              '    """\n')

Fragment(uuid='f2b3d5af-ce87-49ad-a0cb-e84ef9b9b528',
         path='/lib/dblayer/model/trigger.py',
         lineno=68,
         depth=0,
         type='class',
         name='BeforeInsertRow',
         text='class BeforeInsertRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting a database row\n'
              '    """')

Fragment(uuid='f79fdd46-9b3b-4796-9d45-09d937c9b947',
         path='/lib/dblayer/model/trigger.py',
         lineno=71,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before updating a database row\n'
              '    """\n')

Fragment(uuid='a6933bca-919b-4f8c-a28c-de1d4ab17086',
         path='/lib/dblayer/model/trigger.py',
         lineno=73,
         depth=0,
         type='class',
         name='BeforeUpdateRow',
         text='class BeforeUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before updating a database row\n'
              '    """')

Fragment(uuid='2663830e-b07a-4e1d-bf1e-71ae81cf8bdf',
         path='/lib/dblayer/model/trigger.py',
         lineno=76,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeInsertOrUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting or updating a '
              'database row\n'
              '    """\n')

Fragment(uuid='c07212ab-2ad7-44a6-81c7-f5f0d32c8873',
         path='/lib/dblayer/model/trigger.py',
         lineno=78,
         depth=0,
         type='class',
         name='BeforeInsertOrUpdateRow',
         text='class BeforeInsertOrUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting or updating a '
              'database row\n'
              '    """')

Fragment(uuid='dc0b7996-a427-4e68-a87d-e7920b3ebdae',
         path='/lib/dblayer/model/trigger.py',
         lineno=81,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeDeleteRow(BaseTrigger):\n'
              '    """ Trigger executed before deleting a database row\n'
              '    """\n')

Fragment(uuid='507e6733-b378-4552-aeab-014c7afba395',
         path='/lib/dblayer/model/trigger.py',
         lineno=83,
         depth=0,
         type='class',
         name='BeforeDeleteRow',
         text='class BeforeDeleteRow(BaseTrigger):\n'
              '    """ Trigger executed before deleting a database row\n'
              '    """')

Fragment(uuid='71c4b259-f096-4ae4-b87c-dbcf4689d886',
         path='/lib/dblayer/model/trigger.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeInsertStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert statement\n'
              '    """\n')

Fragment(uuid='4c73ff7d-f967-4ea1-8609-c91ba1779e27',
         path='/lib/dblayer/model/trigger.py',
         lineno=88,
         depth=0,
         type='class',
         name='BeforeInsertStatement',
         text='class BeforeInsertStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert statement\n'
              '    """')

Fragment(uuid='88855df0-fc46-4880-997c-af6ed0f7fe72',
         path='/lib/dblayer/model/trigger.py',
         lineno=91,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an update statement\n'
              '    """\n')

Fragment(uuid='b867e539-cee8-4929-a113-2e9a3543f2ef',
         path='/lib/dblayer/model/trigger.py',
         lineno=93,
         depth=0,
         type='class',
         name='BeforeUpdateStatement',
         text='class BeforeUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an update statement\n'
              '    """')

Fragment(uuid='2f71c439-9690-4770-ab6c-e5ee1c171149',
         path='/lib/dblayer/model/trigger.py',
         lineno=96,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeInsertOrUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert or update '
              'statement\n'
              '    """\n')

Fragment(uuid='efa40008-1930-46fa-b1e3-d2bfe763614c',
         path='/lib/dblayer/model/trigger.py',
         lineno=98,
         depth=0,
         type='class',
         name='BeforeInsertOrUpdateStatement',
         text='class BeforeInsertOrUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert or update '
              'statement\n'
              '    """')

Fragment(uuid='833eab46-5891-4a62-897d-7bc618afc69b',
         path='/lib/dblayer/model/trigger.py',
         lineno=101,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeDeleteStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing a delete statement\n'
              '    """\n')

Fragment(uuid='240ce402-16da-402c-85d5-cacbaa19e5aa',
         path='/lib/dblayer/model/trigger.py',
         lineno=103,
         depth=0,
         type='class',
         name='BeforeDeleteStatement',
         text='class BeforeDeleteStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing a delete statement\n'
              '    """')

Fragment(uuid='4cf9f782-7a51-4079-bd15-d5f9bf904f7c',
         path='/lib/dblayer/model/trigger.py',
         lineno=106,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterInsertRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting a database row\n'
              '    """\n')

Fragment(uuid='560e9a35-7ad3-46c3-92ad-4e3641bc94f7',
         path='/lib/dblayer/model/trigger.py',
         lineno=108,
         depth=0,
         type='class',
         name='AfterInsertRow',
         text='class AfterInsertRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting a database row\n'
              '    """')

Fragment(uuid='02580e71-f78f-4d67-8e8a-74b847c30f65',
         path='/lib/dblayer/model/trigger.py',
         lineno=111,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before updating a database row\n'
              '    """\n')

Fragment(uuid='7545ac1f-c663-4eb2-ba9b-edf103877758',
         path='/lib/dblayer/model/trigger.py',
         lineno=113,
         depth=0,
         type='class',
         name='AfterUpdateRow',
         text='class AfterUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before updating a database row\n'
              '    """')

Fragment(uuid='e55e95e1-70d2-48ff-9dc3-a6df1132543e',
         path='/lib/dblayer/model/trigger.py',
         lineno=116,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterInsertOrUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting or updating a '
              'database row\n'
              '    """\n')

Fragment(uuid='3a48a779-9eb0-4319-a706-22b4f1e71cec',
         path='/lib/dblayer/model/trigger.py',
         lineno=118,
         depth=0,
         type='class',
         name='AfterInsertOrUpdateRow',
         text='class AfterInsertOrUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting or updating a '
              'database row\n'
              '    """')

Fragment(uuid='2785cae5-c205-4687-b878-febf81359c8c',
         path='/lib/dblayer/model/trigger.py',
         lineno=121,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterDeleteRow(BaseTrigger):\n'
              '    """ Trigger executed before deleting a database row\n'
              '    """\n')

Fragment(uuid='6901d6ba-62bc-42c6-8df9-6fd9be584fbc',
         path='/lib/dblayer/model/trigger.py',
         lineno=123,
         depth=0,
         type='class',
         name='AfterDeleteRow',
         text='class AfterDeleteRow(BaseTrigger):\n'
              '    """ Trigger executed before deleting a database row\n'
              '    """')

Fragment(uuid='70dff495-b2e3-40f6-9eb7-57523ee91c66',
         path='/lib/dblayer/model/trigger.py',
         lineno=126,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterInsertStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert statement\n'
              '    """\n')

Fragment(uuid='d4fa71ca-7cd4-4bd4-8647-06b252cd16bb',
         path='/lib/dblayer/model/trigger.py',
         lineno=128,
         depth=0,
         type='class',
         name='AfterInsertStatement',
         text='class AfterInsertStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert statement\n'
              '    """')

Fragment(uuid='1163e9bd-88bc-488a-9763-e8068c9b0ba3',
         path='/lib/dblayer/model/trigger.py',
         lineno=131,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an update statement\n'
              '    """\n')

Fragment(uuid='af2e7219-317d-42db-a662-7a472270b696',
         path='/lib/dblayer/model/trigger.py',
         lineno=133,
         depth=0,
         type='class',
         name='AfterUpdateStatement',
         text='class AfterUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an update statement\n'
              '    """')

Fragment(uuid='810e75f5-3aa8-4958-970e-33faca611140',
         path='/lib/dblayer/model/trigger.py',
         lineno=136,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterInsertOrUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert or update '
              'statement\n'
              '    """\n')

Fragment(uuid='7d980fed-ae3c-47ed-98a8-d602a5963d9e',
         path='/lib/dblayer/model/trigger.py',
         lineno=138,
         depth=0,
         type='class',
         name='AfterInsertOrUpdateStatement',
         text='class AfterInsertOrUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert or update '
              'statement\n'
              '    """')

Fragment(uuid='7d240fa4-f025-4089-8aee-31091a22af49',
         path='/lib/dblayer/model/trigger.py',
         lineno=141,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterDeleteStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing a delete statement\n'
              '    """\n')

Fragment(uuid='a07e0461-7bc0-45ae-aab3-5511b2868065',
         path='/lib/dblayer/model/trigger.py',
         lineno=143,
         depth=0,
         type='class',
         name='AfterDeleteStatement',
         text='class AfterDeleteStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing a delete statement\n'
              '    """')

Fragment(uuid='ea5fa194-faec-4618-912b-4c8a8a2bc397',
         path='/lib/dblayer/test/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Unit test cases for the database package\n"""\n')

Fragment(uuid='df95da2f-24b1-4682-8737-6b6b6724b3dd',
         path='/lib/dblayer/test/constants.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Test constants\n'
              '"""\n'
              '\n'
              '# Enable this to debug rolling back to savepoints on '
              'conflicting primary keys\n'
              '##if constants.DEBUG:\n'
              '##    constants.DATABASE_ID_RANGE = (1, 10)\n'
              '##    constants.MAX_INSERT_RETRY_COUNT = 3\n'
              '\n'
              '# Database to use for testing\n'
              'TEST_DSN = "dbname=\'dblayer\' user=\'dblayer\' ho')

Fragment(uuid='a1ddbadb-bd78-4f1f-9042-9febbe58c7c3',
         path='/lib/dblayer/test/constants.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/test/constants.py\n'
              '  Variables: LEAVE_CLEAN_DATABASE RXP_EMAIL RXP_IDENTIFIER '
              'TEST_DSN\n')

Fragment(uuid='31cc037d-7448-4aa9-a912-b7bbbbe29808',
         path='/lib/dblayer/test/constants.py',
         lineno=10,
         depth=0,
         type='module',
         name='',
         text='st=\'localhost\' password=\'dblayer\'"\n'
              '\n'
              '# Enables dropping of the test tables after running the unit '
              'test cases\n'
              'LEAVE_CLEAN_DATABASE = True\n'
              '\n'
              '# Regular expressions used by the test check constraints\n'
              "RXP_IDENTIFIER = r'^[a-zA-Z_][a-zA-Z_0-9]*$'\n"
              "RXP_EMAIL = r'^[\\w\\-\\.]+@[\\w\\-]+(?:\\.[\\w\\-]+)*$'\n")

Fragment(uuid='85bf1139-2644-40f8-ba23-f23521ab67ec',
         path='/lib/dblayer/test/constants.py',
         lineno=10,
         depth=0,
         type='variable',
         name='TEST_DSN',
         text='TEST_DSN = "dbname=\'dblayer\' user=\'dblayer\' '
              'host=\'localhost\' password=\'dblayer\'"')

Fragment(uuid='ff27e180-186c-488b-8ad5-cd23a9735473',
         path='/lib/dblayer/test/constants.py',
         lineno=13,
         depth=0,
         type='variable',
         name='LEAVE_CLEAN_DATABASE',
         text='LEAVE_CLEAN_DATABASE = True')

Fragment(uuid='f31c5a59-7912-4a50-87e1-7db8723483b1',
         path='/lib/dblayer/test/constants.py',
         lineno=16,
         depth=0,
         type='variable',
         name='RXP_IDENTIFIER',
         text="RXP_IDENTIFIER = r'^[a-zA-Z_][a-zA-Z_0-9]*$'")

Fragment(uuid='5e8ce8f7-6e2b-4abf-90ec-9e75474e4cdc',
         path='/lib/dblayer/test/constants.py',
         lineno=17,
         depth=0,
         type='variable',
         name='RXP_EMAIL',
         text="RXP_EMAIL = r'^[\\w\\-\\.]+@[\\w\\-]+(?:\\.[\\w\\-]+)*$'")

Fragment(uuid='41755396-7dbf-4313-b5ef-4ef85bac1522',
         path='/lib/dblayer/test/model.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Data model used for the unit test cases\n'
              '"""\n'
              '\n'
              'import dblayer\n'
              '\n'
              'import dblayer.backend.postgresql\n'
              'from dblayer.model import database, table, column, index, '
              'constraint\n'
              'from dblayer.model import query, aggregate, function, trigger, '
              'procedure\n'
              'from dblayer.test import constants\n'
              '\n'
              '\n'
              '### Mixins\n')

Fragment(uuid='b2a545ba-b5b6-428c-b7b2-52ab29bb629e',
         path='/lib/dblayer/test/model.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/test/model.py\n'
              '  Functions: generate\n'
              '  Classes: Activation Group GroupRole GroupUser Invoice '
              'InvoiceItem Payment Product ProductSale Role SlugMixin '
              'TestDatabaseModel User UserContact\n'
              '  Variables: Product.base.referenced_table_class '
              'Product.predecessor.referenced_table_class _group_by _order_by '
              'activation active amount base commission_percent customer '
              'due_date email first_day first_name fn_set_last_modified '
              'full_text gross_amount group group_role group_user invoice '
              'invoice_item issued issued_date last_day last_modified '
              'last_name model name net_amount notes paid_date passed payment '
              'payment_date phone predecessor product product_id product_model '
              'product_name product_sale quantity real_name_index role sale '
              'secret seller serial set_last_modified slug source '
              'test_database_model unique_email unique_group_role '
              'unique_group_user unique_name unique_serial unique_slug user '
              'user_contact valid_until validate_email validate_slug '
              'vat_amount vat_percent\n'
              '  Usages: BeforeInsertOrUpdateRow Boolean Check Condition '
              'Database Date Datetime Decimal Float ForeignKey Index Integer '
              'Match PrimaryKey Procedure Query RXP_EMAIL RXP_IDENTIFIER '
              'Result SearchDocument Sum Table Text Unique '
              'abstraction_class_name aggregate argument_list backend body '
              'column constants constraint database database_model_class '
              'dblayer default digits doc double expression function index '
              'join language maxlength module_file module_path null open '
              'postgresql precision procedure query referenced_table_class '
              'replace result scale table test trigger write\n')

Fragment(uuid='b35a2ff3-73ef-453e-a0fd-3c2cdab993cd',
         path='/lib/dblayer/test/model.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import dblayer')

Fragment(uuid='2db63f9d-e943-45e3-ac76-47a50f3c3c8d',
         path='/lib/dblayer/test/model.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='import dblayer.backend.postgresql')

Fragment(uuid='8f18779f-3ac7-407e-b279-9a491d6e91a5',
         path='/lib/dblayer/test/model.py',
         lineno=7,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.model import database, table, column, index, '
              'constraint')

Fragment(uuid='abaf1689-d6df-4cc4-87f1-1f53676a565a',
         path='/lib/dblayer/test/model.py',
         lineno=8,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.model import query, aggregate, function, trigger, '
              'procedure')

Fragment(uuid='081b9a72-1147-40f5-9cb9-3c76c715f9b6',
         path='/lib/dblayer/test/model.py',
         lineno=9,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.test import constants')

Fragment(uuid='773497b0-18cc-4da4-b711-b08118b3ff00',
         path='/lib/dblayer/test/model.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class SlugMixin:\n'
              '    """ Adds a slug field with the proper constraints\n'
              '    """\n'
              '    slug = column.Text(maxlength=30)\n'
              '    validate_slug = constraint.Check(function.Match(slug, '
              'constants.RXP_IDENTIFIER))\n'
              '    unique_slug = constraint.Unique(slug)\n'
              '\n'
              '\n'
              '### Table models\n')

Fragment(uuid='c82fda03-a215-4c71-b37b-2847f78c427f',
         path='/lib/dblayer/test/model.py',
         lineno=14,
         depth=0,
         type='class',
         name='SlugMixin',
         text='class SlugMixin:\n'
              '    """ Adds a slug field with the proper constraints\n'
              '    """\n'
              '    slug = column.Text(maxlength=30)\n'
              '    validate_slug = constraint.Check(function.Match(slug, '
              'constants.RXP_IDENTIFIER))\n'
              '    unique_slug = constraint.Unique(slug)')

Fragment(uuid='9c91f723-7034-436f-91e3-c0f5a5369bc6',
         path='/lib/dblayer/test/model.py',
         lineno=17,
         depth=2,
         type='variable',
         name='slug',
         text='slug = column.Text(maxlength=30)')

Fragment(uuid='1682cf02-e10e-44aa-8c24-1d59c27a737c',
         path='/lib/dblayer/test/model.py',
         lineno=18,
         depth=2,
         type='variable',
         name='validate_slug',
         text='validate_slug = constraint.Check(function.Match(slug, '
              'constants.RXP_IDENTIFIER))')

Fragment(uuid='ffaba169-4bdf-46d2-98d5-b0f3bc377418',
         path='/lib/dblayer/test/model.py',
         lineno=19,
         depth=2,
         type='variable',
         name='unique_slug',
         text='unique_slug = constraint.Unique(slug)')

Fragment(uuid='da40be79-d367-4c51-9e50-e0458dc8b37f',
         path='/lib/dblayer/test/model.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class User(table.Table):\n'
              '    """ User\n'
              '    """\n'
              '    id = column.PrimaryKey(serial=True)\n'
              '    email = column.Text(maxlength=150)\n'
              '    first_name = column.Text(maxlength=150)\n'
              '    last_name = column.Text(maxlength=150)\n'
              '    phone = column.Text(maxlength=100, null=True)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n"
              '\n'
              '    validate_email = constra')

Fragment(uuid='639fecb8-e867-470f-81fc-b978ffe2f231',
         path='/lib/dblayer/test/model.py',
         lineno=24,
         depth=0,
         type='class',
         name='User',
         text='class User(table.Table):\n'
              '    """ User\n'
              '    """\n'
              '    id = column.PrimaryKey(serial=True)\n'
              '    email = column.Text(maxlength=150)\n'
              '    first_name = column.Text(maxlength=150)\n'
              '    last_name = column.Text(maxlength=150)\n'
              '    phone = column.Text(maxlength=100, null=True)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n"
              '\n'
              '    validate_email = constra')

Fragment(uuid='581e2504-16ab-4cee-be37-07665ccaa626',
         path='/lib/dblayer/test/model.py',
         lineno=27,
         depth=2,
         type='variable',
         name='id',
         text='id = column.PrimaryKey(serial=True)')

Fragment(uuid='a730b48b-faab-49d8-843a-0e28402f7bae',
         path='/lib/dblayer/test/model.py',
         lineno=28,
         depth=2,
         type='variable',
         name='email',
         text='email = column.Text(maxlength=150)')

Fragment(uuid='f7f6015e-22e6-4404-8aca-a218e248562b',
         path='/lib/dblayer/test/model.py',
         lineno=29,
         depth=2,
         type='variable',
         name='first_name',
         text='first_name = column.Text(maxlength=150)')

Fragment(uuid='3caa7dd7-3fdb-4b78-9e30-741d69bf9721',
         path='/lib/dblayer/test/model.py',
         lineno=30,
         depth=2,
         type='variable',
         name='last_name',
         text='last_name = column.Text(maxlength=150)')

Fragment(uuid='2affe8ce-7b8e-44e8-8edf-322316e1d555',
         path='/lib/dblayer/test/model.py',
         lineno=31,
         depth=2,
         type='variable',
         name='phone',
         text='phone = column.Text(maxlength=100, null=True)')

Fragment(uuid='f9819379-6282-49b3-9dbe-2548e9e6585e',
         path='/lib/dblayer/test/model.py',
         lineno=32,
         depth=2,
         type='variable',
         name='notes',
         text="notes = column.Text(null=True, doc='Custom notes')")

Fragment(uuid='04f24958-e0d2-4517-8e03-461732a6e248',
         path='/lib/dblayer/test/model.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='int.Check(function.Match(email, constants.RXP_EMAIL))\n'
              '    unique_email = constraint.Unique(email)\n'
              '\n'
              '    real_name_index = index.Index(first_name, last_name)\n'
              '\n'
              '    full_text = column.SearchDocument(\n'
              '        expression=(email, first_name, last_name, phone, '
              'notes),\n'
              "        doc='Full text search document to find users by all of "
              "their text attributes')\n")

Fragment(uuid='1abef006-9139-4a16-a2cc-42d0a72d1c47',
         path='/lib/dblayer/test/model.py',
         lineno=34,
         depth=0,
         type='class',
         name='User',
         text='int.Check(function.Match(email, constants.RXP_EMAIL))\n'
              '    unique_email = constraint.Unique(email)\n'
              '\n'
              '    real_name_index = index.Index(first_name, last_name)\n'
              '\n'
              '    full_text = column.SearchDocument(\n'
              '        expression=(email, first_name, last_name, phone, '
              'notes),\n'
              "        doc='Full text search document to find users by all of "
              "their text attributes')")

Fragment(uuid='08507872-cc37-47e5-8281-771becb7b51a',
         path='/lib/dblayer/test/model.py',
         lineno=34,
         depth=2,
         type='variable',
         name='validate_email',
         text='validate_email = constraint.Check(function.Match(email, '
              'constants.RXP_EMAIL))')

Fragment(uuid='eb8ec661-0ec3-435f-9458-49d3aac0ca9a',
         path='/lib/dblayer/test/model.py',
         lineno=35,
         depth=2,
         type='variable',
         name='unique_email',
         text='unique_email = constraint.Unique(email)')

Fragment(uuid='52afd577-00b7-4ab9-ad88-176bf5a8ef38',
         path='/lib/dblayer/test/model.py',
         lineno=37,
         depth=2,
         type='variable',
         name='real_name_index',
         text='real_name_index = index.Index(first_name, last_name)')

Fragment(uuid='7cd2e4c1-c6ad-4100-801e-15b270b34517',
         path='/lib/dblayer/test/model.py',
         lineno=39,
         depth=2,
         type='variable',
         name='full_text',
         text='full_text = column.SearchDocument(\n'
              '        expression=(email, first_name, last_name, phone, '
              'notes),\n'
              "        doc='Full text search document to find users by all of "
              "their text attributes')")

Fragment(uuid='5b0436db-1e7c-43c5-ba42-ba57cf785337',
         path='/lib/dblayer/test/model.py',
         lineno=42,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Group(table.Table, SlugMixin):\n'
              '    """ Group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    name = column.Text(maxlength=100)\n'
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n")

Fragment(uuid='8cc1bb78-0c50-4b6a-8320-6c6768753ee7',
         path='/lib/dblayer/test/model.py',
         lineno=44,
         depth=0,
         type='class',
         name='Group',
         text='class Group(table.Table, SlugMixin):\n'
              '    """ Group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    name = column.Text(maxlength=100)\n'
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')")

Fragment(uuid='14611739-4c7c-4960-9cde-bcb28043475a',
         path='/lib/dblayer/test/model.py',
         lineno=47,
         depth=2,
         type='variable',
         name='id',
         text='id = column.PrimaryKey()')

Fragment(uuid='2c1999b0-8f01-46dd-a359-7da4e0145fb4',
         path='/lib/dblayer/test/model.py',
         lineno=48,
         depth=2,
         type='variable',
         name='name',
         text='name = column.Text(maxlength=100)')

Fragment(uuid='7849a8d0-374a-45b6-affa-f9b01cec0338',
         path='/lib/dblayer/test/model.py',
         lineno=49,
         depth=2,
         type='variable',
         name='unique_name',
         text='unique_name = constraint.Unique(name)')

Fragment(uuid='515f7c37-2849-4461-b455-c794469897d3',
         path='/lib/dblayer/test/model.py',
         lineno=50,
         depth=2,
         type='variable',
         name='notes',
         text="notes = column.Text(null=True, doc='Custom notes')")

Fragment(uuid='a1aa510f-8b8d-417c-8efa-3e556ccd150e',
         path='/lib/dblayer/test/model.py',
         lineno=51,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class GroupUser(table.Table):\n'
              '    """ User associated to group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    group = column.ForeignKey(Group)\n'
              '    user = column.ForeignKey(User)\n'
              '    unique_group_user = constraint.Unique(group, user)\n')

Fragment(uuid='622514a0-d551-4b64-86cc-a3630fa7def8',
         path='/lib/dblayer/test/model.py',
         lineno=53,
         depth=0,
         type='class',
         name='GroupUser',
         text='class GroupUser(table.Table):\n'
              '    """ User associated to group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    group = column.ForeignKey(Group)\n'
              '    user = column.ForeignKey(User)\n'
              '    unique_group_user = constraint.Unique(group, user)')

Fragment(uuid='370d26f1-f801-40dc-be79-0e2071ed60c2',
         path='/lib/dblayer/test/model.py',
         lineno=56,
         depth=2,
         type='variable',
         name='id',
         text='id = column.PrimaryKey()')

Fragment(uuid='012ccb8d-3afb-4346-8c04-876efc0ef3ab',
         path='/lib/dblayer/test/model.py',
         lineno=57,
         depth=2,
         type='variable',
         name='group',
         text='group = column.ForeignKey(Group)')

Fragment(uuid='508fa250-2a10-4975-b234-a46cdf9bfb5b',
         path='/lib/dblayer/test/model.py',
         lineno=58,
         depth=2,
         type='variable',
         name='user',
         text='user = column.ForeignKey(User)')

Fragment(uuid='4b57e159-18c5-46bc-b6e0-24ddf0cf34ac',
         path='/lib/dblayer/test/model.py',
         lineno=59,
         depth=2,
         type='variable',
         name='unique_group_user',
         text='unique_group_user = constraint.Unique(group, user)')

Fragment(uuid='4314b885-6351-4904-bc3e-cabadb8fa892',
         path='/lib/dblayer/test/model.py',
         lineno=60,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Role(table.Table, SlugMixin):\n'
              '    """ Role\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    name = column.Text(maxlength=100)\n'
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n")

Fragment(uuid='360614d2-ebdd-41ae-927c-9cafcaff8c40',
         path='/lib/dblayer/test/model.py',
         lineno=62,
         depth=0,
         type='class',
         name='Role',
         text='class Role(table.Table, SlugMixin):\n'
              '    """ Role\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    name = column.Text(maxlength=100)\n'
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')")

Fragment(uuid='096f92eb-37f1-4cee-980e-943848d44472',
         path='/lib/dblayer/test/model.py',
         lineno=65,
         depth=2,
         type='variable',
         name='id',
         text='id = column.PrimaryKey()')

Fragment(uuid='e5f71c26-701d-4df2-99d9-3b8d8e9fd43c',
         path='/lib/dblayer/test/model.py',
         lineno=66,
         depth=2,
         type='variable',
         name='name',
         text='name = column.Text(maxlength=100)')

Fragment(uuid='0b438d5b-b8e4-406c-8de6-9b1cea211337',
         path='/lib/dblayer/test/model.py',
         lineno=67,
         depth=2,
         type='variable',
         name='unique_name',
         text='unique_name = constraint.Unique(name)')

Fragment(uuid='ad4e08fa-368e-4e5f-a611-6c16787d9afb',
         path='/lib/dblayer/test/model.py',
         lineno=68,
         depth=2,
         type='variable',
         name='notes',
         text="notes = column.Text(null=True, doc='Custom notes')")

Fragment(uuid='19ea81c6-b18b-4bf8-bde0-1254cbf551c1',
         path='/lib/dblayer/test/model.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class GroupRole(table.Table):\n'
              '    """ Role associated to group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    group = column.ForeignKey(Group)\n'
              '    role = column.ForeignKey(Role)\n'
              '    unique_group_role = constraint.Unique(group, role)\n')

Fragment(uuid='072e87a0-b302-4f8c-b949-e961d258132f',
         path='/lib/dblayer/test/model.py',
         lineno=71,
         depth=0,
         type='class',
         name='GroupRole',
         text='class GroupRole(table.Table):\n'
              '    """ Role associated to group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    group = column.ForeignKey(Group)\n'
              '    role = column.ForeignKey(Role)\n'
              '    unique_group_role = constraint.Unique(group, role)')

Fragment(uuid='58e2c6d1-505b-4643-8069-27f3856e9f29',
         path='/lib/dblayer/test/model.py',
         lineno=74,
         depth=2,
         type='variable',
         name='id',
         text='id = column.PrimaryKey()')

Fragment(uuid='b06d3049-bd5b-4efe-a49f-5a3b3722a75b',
         path='/lib/dblayer/test/model.py',
         lineno=75,
         depth=2,
         type='variable',
         name='group',
         text='group = column.ForeignKey(Group)')

Fragment(uuid='67b737fa-431e-47b5-bda8-10da30e32764',
         path='/lib/dblayer/test/model.py',
         lineno=76,
         depth=2,
         type='variable',
         name='role',
         text='role = column.ForeignKey(Role)')

Fragment(uuid='90ae5605-a325-407f-91e1-01a6afe6cb2b',
         path='/lib/dblayer/test/model.py',
         lineno=77,
         depth=2,
         type='variable',
         name='unique_group_role',
         text='unique_group_role = constraint.Unique(group, role)')

Fragment(uuid='7cc8e2ea-522e-4802-8c91-a9214f67e106',
         path='/lib/dblayer/test/model.py',
         lineno=78,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Activation(table.Table):\n'
              '    """ Activation attempt\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    user = column.ForeignKey(User)\n'
              "    secret = column.Integer(digits=30, doc='Secret activation "
              "code needs to be presented.')\n"
              "    issued = column.Datetime(doc='Timestamp of the activation "
              "e-mail sent to the user.')\n"
              "    valid_until = column.Datetime(doc='The user is deleted if "
              "not activated before this time limit.')\n"
              "    passed = column.Boolean(doc='Successful activation sets "
              "this field to True.')\n")

Fragment(uuid='95bbcec5-1dc3-4edc-aab0-c4065a2f1628',
         path='/lib/dblayer/test/model.py',
         lineno=80,
         depth=0,
         type='class',
         name='Activation',
         text='class Activation(table.Table):\n'
              '    """ Activation attempt\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    user = column.ForeignKey(User)\n'
              "    secret = column.Integer(digits=30, doc='Secret activation "
              "code needs to be presented.')\n"
              "    issued = column.Datetime(doc='Timestamp of the activation "
              "e-mail sent to the user.')\n"
              "    valid_until = column.Datetime(doc='The user is deleted if "
              "not activated before this time limit.')\n"
              "    passed = column.Boolean(doc='Successful activation sets "
              "this field to True.')")

Fragment(uuid='74c04470-9566-4408-9d51-c053ce61a9dc',
         path='/lib/dblayer/test/model.py',
         lineno=83,
         depth=2,
         type='variable',
         name='id',
         text='id = column.PrimaryKey()')

Fragment(uuid='d3044a7d-aec5-4818-a215-5c8d8a59c5fa',
         path='/lib/dblayer/test/model.py',
         lineno=84,
         depth=2,
         type='variable',
         name='user',
         text='user = column.ForeignKey(User)')

Fragment(uuid='decb1542-c64e-4b98-a654-731150129d1b',
         path='/lib/dblayer/test/model.py',
         lineno=85,
         depth=2,
         type='variable',
         name='secret',
         text="secret = column.Integer(digits=30, doc='Secret activation code "
              "needs to be presented.')")

Fragment(uuid='d339ca79-dd9d-47d0-a6fc-5cbdbf12bbc7',
         path='/lib/dblayer/test/model.py',
         lineno=86,
         depth=2,
         type='variable',
         name='issued',
         text="issued = column.Datetime(doc='Timestamp of the activation "
              "e-mail sent to the user.')")

Fragment(uuid='f92fd5f4-af21-4edc-82c5-67c8ee3f49f8',
         path='/lib/dblayer/test/model.py',
         lineno=87,
         depth=2,
         type='variable',
         name='valid_until',
         text="valid_until = column.Datetime(doc='The user is deleted if not "
              "activated before this time limit.')")

Fragment(uuid='b872588b-d32a-4626-a77a-2bf43e8bc4d1',
         path='/lib/dblayer/test/model.py',
         lineno=88,
         depth=2,
         type='variable',
         name='passed',
         text="passed = column.Boolean(doc='Successful activation sets this "
              "field to True.')")

Fragment(uuid='6b67588c-64aa-4873-b931-a921f71d3c4a',
         path='/lib/dblayer/test/model.py',
         lineno=89,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Product(table.Table):\n'
              '    """ Product or service\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    base = column.ForeignKey(null=True, doc='Base (parent) "
              "product or service')\n"
              '    predecessor = column.ForeignKey(null=True, '
              "doc='Predecessor')\n"
              "    active = column.Boolean(default=True, doc='Only active "
              "products should be ordered')\n"
              "    model = column.Text(null=True, maxlength=50, doc='Model "
              'number or other internal product identifier for fast sear')

Fragment(uuid='75d1f25f-01e2-4450-a75d-54ce86819713',
         path='/lib/dblayer/test/model.py',
         lineno=91,
         depth=0,
         type='class',
         name='Product',
         text='class Product(table.Table):\n'
              '    """ Product or service\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    base = column.ForeignKey(null=True, doc='Base (parent) "
              "product or service')\n"
              '    predecessor = column.ForeignKey(null=True, '
              "doc='Predecessor')\n"
              "    active = column.Boolean(default=True, doc='Only active "
              "products should be ordered')\n"
              "    model = column.Text(null=True, maxlength=50, doc='Model "
              'number ')

Fragment(uuid='04d1487c-5bf4-4bcf-b6dd-b2c00ef9bc52',
         path='/lib/dblayer/test/model.py',
         lineno=94,
         depth=2,
         type='variable',
         name='id',
         text='id = column.PrimaryKey()')

Fragment(uuid='cab00ea6-e75b-4fda-9d5c-6ea61a9e67e2',
         path='/lib/dblayer/test/model.py',
         lineno=95,
         depth=2,
         type='variable',
         name='base',
         text="base = column.ForeignKey(null=True, doc='Base (parent) product "
              "or service')")

Fragment(uuid='f5376dab-1ce3-4f62-9a4e-0b0fbfac7cee',
         path='/lib/dblayer/test/model.py',
         lineno=96,
         depth=2,
         type='variable',
         name='predecessor',
         text="predecessor = column.ForeignKey(null=True, doc='Predecessor')")

Fragment(uuid='79c4b416-d5b6-4d1c-8052-febbf4d1b23a',
         path='/lib/dblayer/test/model.py',
         lineno=97,
         depth=2,
         type='variable',
         name='active',
         text="active = column.Boolean(default=True, doc='Only active products "
              "should be ordered')")

Fragment(uuid='b301da3f-38ea-4516-af63-861f5a342df1',
         path='/lib/dblayer/test/model.py',
         lineno=98,
         depth=0,
         type='module',
         name='',
         text="ching')\n"
              "    name = column.Text(maxlength=200, doc='Official name of the "
              "product')\n"
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n"
              "    last_modified = column.Datetime(null=True, doc='Last "
              "modification date and time')\n"
              '    set_last_modified = '
              "trigger.BeforeInsertOrUpdateRow('fn_set_last_modified')\n"
              '\n'
              '\n'
              'Product.base.referenced_table_class = Product\n'
              'Product.predecessor.referenced_table_class = Product\n')

Fragment(uuid='c56295ad-6a04-4220-899c-a77929ae6535',
         path='/lib/dblayer/test/model.py',
         lineno=98,
         depth=0,
         type='class',
         name='Product',
         text="or other internal product identifier for fast searching')\n"
              "    name = column.Text(maxlength=200, doc='Official name of the "
              "product')\n"
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n"
              "    last_modified = column.Datetime(null=True, doc='Last "
              "modification date and time')\n"
              '    set_last_modified = '
              "trigger.BeforeInsertOrUpdateRow('fn_set_last_modified')")

Fragment(uuid='a23a282d-c12f-4d2f-b41c-400b782a532a',
         path='/lib/dblayer/test/model.py',
         lineno=98,
         depth=2,
         type='variable',
         name='model',
         text="model = column.Text(null=True, maxlength=50, doc='Model number "
              "or other internal product identifier for fast searching')")

Fragment(uuid='14128946-599b-427c-8ed0-70f11d1bcdcb',
         path='/lib/dblayer/test/model.py',
         lineno=99,
         depth=2,
         type='variable',
         name='name',
         text="name = column.Text(maxlength=200, doc='Official name of the "
              "product')")

Fragment(uuid='c620bb2f-8ae6-45e9-84b0-77c910e71297',
         path='/lib/dblayer/test/model.py',
         lineno=100,
         depth=2,
         type='variable',
         name='unique_name',
         text='unique_name = constraint.Unique(name)')

Fragment(uuid='0daffbfe-7513-40bb-b0f6-ca9c3994a873',
         path='/lib/dblayer/test/model.py',
         lineno=101,
         depth=2,
         type='variable',
         name='notes',
         text="notes = column.Text(null=True, doc='Custom notes')")

Fragment(uuid='893cc36a-bd12-42ae-b44e-a178bf980a69',
         path='/lib/dblayer/test/model.py',
         lineno=102,
         depth=2,
         type='variable',
         name='last_modified',
         text="last_modified = column.Datetime(null=True, doc='Last "
              "modification date and time')")

Fragment(uuid='8b30b560-691e-46ea-8a8e-8286e7f98bd5',
         path='/lib/dblayer/test/model.py',
         lineno=103,
         depth=2,
         type='variable',
         name='set_last_modified',
         text='set_last_modified = '
              "trigger.BeforeInsertOrUpdateRow('fn_set_last_modified')")

Fragment(uuid='825f7448-e9a6-45b7-93b7-b459e2b9c03c',
         path='/lib/dblayer/test/model.py',
         lineno=106,
         depth=0,
         type='variable',
         name='Product.base.referenced_table_class',
         text='Product.base.referenced_table_class = Product')

Fragment(uuid='2c197080-2945-4249-88a1-c1de1f8bdfd0',
         path='/lib/dblayer/test/model.py',
         lineno=107,
         depth=0,
         type='variable',
         name='Product.predecessor.referenced_table_class',
         text='Product.predecessor.referenced_table_class = Product')

Fragment(uuid='3531db30-342b-4eb3-a0b7-3e636ebd3ed0',
         path='/lib/dblayer/test/model.py',
         lineno=108,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Invoice(table.Table):\n'
              '    """ Invoice\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    serial = column.Text(maxlength=30, doc='Strictly serially "
              'incremented invoice number, generated only as the very last '
              "step.')\n"
              '    unique_serial = constraint.Unique(serial)\n'
              '    seller = column.ForeignKey(User)\n'
              '    customer = column.ForeignKey(User)\n'
              '    net_amou')

Fragment(uuid='e9111614-6e91-4b83-a164-4a8a536d34f4',
         path='/lib/dblayer/test/model.py',
         lineno=110,
         depth=0,
         type='class',
         name='Invoice',
         text='class Invoice(table.Table):\n'
              '    """ Invoice\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    serial = column.Text(maxlength=30, doc='Strictly serially "
              'incremented invoice number, generated only as the very last '
              "step.')\n"
              '    unique_serial = constraint.Unique(serial)\n'
              '    seller = column.ForeignKey(User)\n'
              '    customer = column.ForeignKey(User)\n'
              '    net_amoun')

Fragment(uuid='0a2f8884-6e92-483b-9db7-b20c0613a3b9',
         path='/lib/dblayer/test/model.py',
         lineno=113,
         depth=2,
         type='variable',
         name='id',
         text='id = column.PrimaryKey()')

Fragment(uuid='b656aba7-9964-41c9-8554-b8ea8b2698e8',
         path='/lib/dblayer/test/model.py',
         lineno=114,
         depth=2,
         type='variable',
         name='serial',
         text="serial = column.Text(maxlength=30, doc='Strictly serially "
              'incremented invoice number, generated only as the very last '
              "step.')")

Fragment(uuid='8a7efd40-5b1b-460a-8fa1-3f6c8ea4ea76',
         path='/lib/dblayer/test/model.py',
         lineno=115,
         depth=2,
         type='variable',
         name='unique_serial',
         text='unique_serial = constraint.Unique(serial)')

Fragment(uuid='88222dbe-02d3-4dbe-ba65-03f8e1fba9b1',
         path='/lib/dblayer/test/model.py',
         lineno=116,
         depth=2,
         type='variable',
         name='seller',
         text='seller = column.ForeignKey(User)')

Fragment(uuid='45b64af0-e7d0-4f0e-bf0f-0830dda74e78',
         path='/lib/dblayer/test/model.py',
         lineno=117,
         depth=2,
         type='variable',
         name='customer',
         text='customer = column.ForeignKey(User)')

Fragment(uuid='65759983-3473-4eee-ac51-d07c959a40bb',
         path='/lib/dblayer/test/model.py',
         lineno=118,
         depth=0,
         type='module',
         name='',
         text='nt = column.Decimal(precision=18, scale=2)\n'
              '    vat_amount = column.Integer(digits=18, default=0)\n'
              '    gross_amount = column.Decimal(precision=18, scale=2)\n'
              '    issued_date = column.Date()\n'
              '    due_date = column.Date()\n'
              "    paid_date = column.Date(null=True, doc='Date of the last "
              'payment which was sufficient to fully pay this invoice in FIFO '
              "order.')\n")

Fragment(uuid='80317401-fa2c-44d9-89c6-f9a225bef89c',
         path='/lib/dblayer/test/model.py',
         lineno=118,
         depth=0,
         type='class',
         name='Invoice',
         text='t = column.Decimal(precision=18, scale=2)\n'
              '    vat_amount = column.Integer(digits=18, default=0)\n'
              '    gross_amount = column.Decimal(precision=18, scale=2)\n'
              '    issued_date = column.Date()\n'
              '    due_date = column.Date()\n'
              "    paid_date = column.Date(null=True, doc='Date of the last "
              'payment which was sufficient to fully pay this invoice in FIFO '
              "order.')")

Fragment(uuid='69fb568f-140a-4a86-8dd9-5b2c5a7b6cb3',
         path='/lib/dblayer/test/model.py',
         lineno=118,
         depth=2,
         type='variable',
         name='net_amount',
         text='net_amount = column.Decimal(precision=18, scale=2)')

Fragment(uuid='e5be7756-6afb-4f6d-9754-954e6871f624',
         path='/lib/dblayer/test/model.py',
         lineno=119,
         depth=2,
         type='variable',
         name='vat_amount',
         text='vat_amount = column.Integer(digits=18, default=0)')

Fragment(uuid='651765f5-1993-4d78-bd7d-84b5d8b6e6cb',
         path='/lib/dblayer/test/model.py',
         lineno=120,
         depth=2,
         type='variable',
         name='gross_amount',
         text='gross_amount = column.Decimal(precision=18, scale=2)')

Fragment(uuid='c0ecf28c-a618-404b-903e-4f38f7ce05b6',
         path='/lib/dblayer/test/model.py',
         lineno=121,
         depth=2,
         type='variable',
         name='issued_date',
         text='issued_date = column.Date()')

Fragment(uuid='cb72791f-111c-42c3-bcc1-97013b1e4be2',
         path='/lib/dblayer/test/model.py',
         lineno=122,
         depth=2,
         type='variable',
         name='due_date',
         text='due_date = column.Date()')

Fragment(uuid='5748cbd2-2217-4934-bf71-bfbb326fac8e',
         path='/lib/dblayer/test/model.py',
         lineno=123,
         depth=2,
         type='variable',
         name='paid_date',
         text="paid_date = column.Date(null=True, doc='Date of the last "
              'payment which was sufficient to fully pay this invoice in FIFO '
              "order.')")

Fragment(uuid='bab648d3-5312-4784-8012-ed19ce2470c7',
         path='/lib/dblayer/test/model.py',
         lineno=124,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class InvoiceItem(table.Table):\n'
              '    """ Service\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    invoice = column.ForeignKey(Invoice, doc='The invoice this "
              "item is belonging to.')\n"
              "    product = column.ForeignKey(Product, doc='Product or "
              "service sold.')\n"
              "    first_day = column.Date(null=True, doc='First day of "
              "service if applicable.')\n"
              "    last_day = column.Date(null=True, doc='Last day of service "
              'if applicable')

Fragment(uuid='90f5f8b4-00a7-4fcf-a5ba-8e55ecb1cba1',
         path='/lib/dblayer/test/model.py',
         lineno=126,
         depth=0,
         type='class',
         name='InvoiceItem',
         text='class InvoiceItem(table.Table):\n'
              '    """ Service\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    invoice = column.ForeignKey(Invoice, doc='The invoice this "
              "item is belonging to.')\n"
              "    product = column.ForeignKey(Product, doc='Product or "
              "service sold.')\n"
              "    first_day = column.Date(null=True, doc='First day of "
              "service if applicable.')\n"
              "    last_day = column.Date(null=True, doc='Last day of service "
              'if applicable')

Fragment(uuid='f47320b6-bf19-4bed-87a1-20a92f4a960c',
         path='/lib/dblayer/test/model.py',
         lineno=129,
         depth=2,
         type='variable',
         name='id',
         text='id = column.PrimaryKey()')

Fragment(uuid='5b77135b-ddf7-4f43-ac93-212918d1709e',
         path='/lib/dblayer/test/model.py',
         lineno=130,
         depth=2,
         type='variable',
         name='invoice',
         text="invoice = column.ForeignKey(Invoice, doc='The invoice this item "
              "is belonging to.')")

Fragment(uuid='c21133ad-5796-4338-8716-be0cad1cae3f',
         path='/lib/dblayer/test/model.py',
         lineno=131,
         depth=2,
         type='variable',
         name='product',
         text="product = column.ForeignKey(Product, doc='Product or service "
              "sold.')")

Fragment(uuid='82fb231d-34b0-48c1-9084-41390504c8a1',
         path='/lib/dblayer/test/model.py',
         lineno=132,
         depth=2,
         type='variable',
         name='first_day',
         text="first_day = column.Date(null=True, doc='First day of service if "
              "applicable.')")

Fragment(uuid='ab3766db-2ce8-40d6-8040-492d25ff6f7f',
         path='/lib/dblayer/test/model.py',
         lineno=133,
         depth=0,
         type='module',
         name='',
         text=".')\n"
              '    quantity = column.Integer(digits=9, null=True, '
              "doc='Quantity sold if applicable.')\n"
              '    net_amount = column.Decimal(precision=18, scale=2)\n'
              '    vat_percent = column.Float(double=False, default=0)\n'
              '    vat_amount = column.Integer(digits=18, default=0)\n'
              '    gross_amount = column.Decimal(precision=18, scale=2)\n'
              "    notes = column.Text(null=True, maxlength=200, doc='Custom "
              "notes for this item if any.')\n")

Fragment(uuid='25359505-7821-42b3-b5eb-25600648fdb3',
         path='/lib/dblayer/test/model.py',
         lineno=133,
         depth=0,
         type='class',
         name='InvoiceItem',
         text=".')\n"
              '    quantity = column.Integer(digits=9, null=True, '
              "doc='Quantity sold if applicable.')\n"
              '    net_amount = column.Decimal(precision=18, scale=2)\n'
              '    vat_percent = column.Float(double=False, default=0)\n'
              '    vat_amount = column.Integer(digits=18, default=0)\n'
              '    gross_amount = column.Decimal(precision=18, scale=2)\n'
              "    notes = column.Text(null=True, maxlength=200, doc='Custom "
              "notes for this item if any.')")

Fragment(uuid='20ed6dcd-4c8b-4fbf-bc0c-8e959b96c0f1',
         path='/lib/dblayer/test/model.py',
         lineno=133,
         depth=2,
         type='variable',
         name='last_day',
         text="last_day = column.Date(null=True, doc='Last day of service if "
              "applicable.')")

Fragment(uuid='d5e2efb0-324d-4b4d-9beb-8c421a7ea99e',
         path='/lib/dblayer/test/model.py',
         lineno=134,
         depth=2,
         type='variable',
         name='quantity',
         text="quantity = column.Integer(digits=9, null=True, doc='Quantity "
              "sold if applicable.')")

Fragment(uuid='3e5b69c8-aac3-4748-89eb-fe0ad2c25421',
         path='/lib/dblayer/test/model.py',
         lineno=135,
         depth=2,
         type='variable',
         name='net_amount',
         text='net_amount = column.Decimal(precision=18, scale=2)')

Fragment(uuid='aed38c62-ff7a-46e3-8204-9e5a28611b3a',
         path='/lib/dblayer/test/model.py',
         lineno=136,
         depth=2,
         type='variable',
         name='vat_percent',
         text='vat_percent = column.Float(double=False, default=0)')

Fragment(uuid='07133279-f063-442d-a4d2-9368ab425e0e',
         path='/lib/dblayer/test/model.py',
         lineno=137,
         depth=2,
         type='variable',
         name='vat_amount',
         text='vat_amount = column.Integer(digits=18, default=0)')

Fragment(uuid='ca27a157-5c05-49e5-ad3f-cda430845c78',
         path='/lib/dblayer/test/model.py',
         lineno=138,
         depth=2,
         type='variable',
         name='gross_amount',
         text='gross_amount = column.Decimal(precision=18, scale=2)')

Fragment(uuid='fa98f752-6619-4be1-8741-6701b387f1d8',
         path='/lib/dblayer/test/model.py',
         lineno=139,
         depth=2,
         type='variable',
         name='notes',
         text="notes = column.Text(null=True, maxlength=200, doc='Custom notes "
              "for this item if any.')")

Fragment(uuid='54ac2f37-278d-48a7-8362-582ac39a93e6',
         path='/lib/dblayer/test/model.py',
         lineno=140,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Payment(table.Table):\n'
              '    """ Payment\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    invoice = column.ForeignKey(Invoice, doc='Invoice this "
              "payment is for.')\n"
              "    user = column.ForeignKey(User, doc='Actual user paying for "
              "the invoice. It should match the user on the invoice.')\n"
              "    payment_date = column.Date(doc='Effective date of "
              "payment.')\n"
              "    amount = column.Integer(digits=18, doc='Amount payed. It is "
              "accounted against the gross amount of the invoice.')\n"
              '    commission_percent = column.Float(default=0.0, '
              "doc='Commission percentage')\n"
              '\n'
              '\n'
              '### Queries\n')

Fragment(uuid='78b1efaf-37ce-482c-9af9-d6ffd241bef2',
         path='/lib/dblayer/test/model.py',
         lineno=142,
         depth=0,
         type='class',
         name='Payment',
         text='class Payment(table.Table):\n'
              '    """ Payment\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    invoice = column.ForeignKey(Invoice, doc='Invoice this "
              "payment is for.')\n"
              "    user = column.ForeignKey(User, doc='Actual user paying for "
              "the invoice. It should match the user on the invoice.')\n"
              "    payment_date = column.Date(doc='Effective date of "
              "payment.')\n"
              "    amount = column.Integer(digits=18, doc='Amount payed. It is "
              "accounted against the gross amount of the invoice.')\n"
              '    commission_percent = column.Float(default=0.0, '
              "doc='Commission percentage')")

Fragment(uuid='5b5b376c-0c55-4538-b3cb-c845bdae7e6a',
         path='/lib/dblayer/test/model.py',
         lineno=145,
         depth=2,
         type='variable',
         name='id',
         text='id = column.PrimaryKey()')

Fragment(uuid='3e082407-56fd-4e62-b8ca-cf6ad6d1f82a',
         path='/lib/dblayer/test/model.py',
         lineno=146,
         depth=2,
         type='variable',
         name='invoice',
         text="invoice = column.ForeignKey(Invoice, doc='Invoice this payment "
              "is for.')")

Fragment(uuid='f4769e69-547e-4c55-abeb-02d7ee68d95e',
         path='/lib/dblayer/test/model.py',
         lineno=147,
         depth=2,
         type='variable',
         name='user',
         text="user = column.ForeignKey(User, doc='Actual user paying for the "
              "invoice. It should match the user on the invoice.')")

Fragment(uuid='6e2ca0a2-3fa8-47b8-92a8-dce74cae1855',
         path='/lib/dblayer/test/model.py',
         lineno=148,
         depth=2,
         type='variable',
         name='payment_date',
         text="payment_date = column.Date(doc='Effective date of payment.')")

Fragment(uuid='6105524c-2f2a-444a-bf73-9ecb17e50cb3',
         path='/lib/dblayer/test/model.py',
         lineno=149,
         depth=2,
         type='variable',
         name='amount',
         text="amount = column.Integer(digits=18, doc='Amount payed. It is "
              "accounted against the gross amount of the invoice.')")

Fragment(uuid='e68047c5-8993-421b-82a2-0ffa3ccb9e5a',
         path='/lib/dblayer/test/model.py',
         lineno=150,
         depth=2,
         type='variable',
         name='commission_percent',
         text="commission_percent = column.Float(default=0.0, doc='Commission "
              "percentage')")

Fragment(uuid='29f531b1-4fdf-427e-ba3e-1dca76642923',
         path='/lib/dblayer/test/model.py',
         lineno=154,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class UserContact(query.Query):\n'
              '    """ Contact details of the users\n'
              '    """\n'
              '    # Source tables\n'
              '    user = User()\n'
              '\n'
              '    # Result fields\n'
              '    id = query.Result(user.id)\n'
              '    first_name = query.Result(user.first_name)\n'
              '    last_name = query.Result(user.last_name)\n'
              '    email = query.Result(user.email)\n'
              '    phone = query.Result(user.phone)\n'
              '\n'
              '    # Order by\n'
              "    _order_by = ('first_name', 'last_name')\n")

Fragment(uuid='a574c569-29e0-40f2-8f10-12d83d410fba',
         path='/lib/dblayer/test/model.py',
         lineno=155,
         depth=0,
         type='class',
         name='UserContact',
         text='class UserContact(query.Query):\n'
              '    """ Contact details of the users\n'
              '    """\n'
              '    # Source tables\n'
              '    user = User()\n'
              '\n'
              '    # Result fields\n'
              '    id = query.Result(user.id)\n'
              '    first_name = query.Result(user.first_name)\n'
              '    last_name = query.Result(user.last_name)\n'
              '    email = query.Result(user.email)\n'
              '    phone = query.Result(user.phone)\n'
              '\n'
              '    # Order by\n'
              "    _order_by = ('first_name', 'last_name')")

Fragment(uuid='26a76505-ba69-449a-850b-7e7f2cda696f',
         path='/lib/dblayer/test/model.py',
         lineno=159,
         depth=2,
         type='variable',
         name='user',
         text='user = User()')

Fragment(uuid='22623517-4caf-4480-90b5-a2e105e2a9cd',
         path='/lib/dblayer/test/model.py',
         lineno=162,
         depth=2,
         type='variable',
         name='id',
         text='id = query.Result(user.id)')

Fragment(uuid='345d87ab-2208-4422-aecd-90c5dc83860d',
         path='/lib/dblayer/test/model.py',
         lineno=163,
         depth=2,
         type='variable',
         name='first_name',
         text='first_name = query.Result(user.first_name)')

Fragment(uuid='bce7145f-93c3-4a87-b117-fc1074526a2c',
         path='/lib/dblayer/test/model.py',
         lineno=164,
         depth=2,
         type='variable',
         name='last_name',
         text='last_name = query.Result(user.last_name)')

Fragment(uuid='21739084-2023-495c-8db2-e2e341136d30',
         path='/lib/dblayer/test/model.py',
         lineno=165,
         depth=2,
         type='variable',
         name='email',
         text='email = query.Result(user.email)')

Fragment(uuid='ea088680-1702-4174-95da-6171b747ff55',
         path='/lib/dblayer/test/model.py',
         lineno=166,
         depth=2,
         type='variable',
         name='phone',
         text='phone = query.Result(user.phone)')

Fragment(uuid='55fd9789-b6d5-43b7-a652-28d99f459b73',
         path='/lib/dblayer/test/model.py',
         lineno=169,
         depth=2,
         type='variable',
         name='_order_by',
         text="_order_by = ('first_name', 'last_name')")

Fragment(uuid='a975f300-015c-41d1-9fe6-c34e98340e17',
         path='/lib/dblayer/test/model.py',
         lineno=170,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class ProductSale(query.Query):\n'
              '    """ Sales by product based on the invoices\n'
              '    """\n'
              '    # Source tables\n'
              '    sale = InvoiceItem()\n'
              '    invoice = Invoice()\n'
              '    product = Product()\n'
              '\n'
              '    # Table joins\n'
              '    invoice.join(sale.invoice)\n'
              '    product.join(sale.product)\n'
              '\n'
              '    # Result fields\n'
              '    product_id = query.Result(product.id)\n'
              '    product_model = query.Result(product.model)\n'
              '  ')

Fragment(uuid='6e735605-45b6-45b0-b2a0-c25f201d5eaf',
         path='/lib/dblayer/test/model.py',
         lineno=172,
         depth=0,
         type='class',
         name='ProductSale',
         text='class ProductSale(query.Query):\n'
              '    """ Sales by product based on the invoices\n'
              '    """\n'
              '    # Source tables\n'
              '    sale = InvoiceItem()\n'
              '    invoice = Invoice()\n'
              '    product = Product()\n'
              '\n'
              '    # Table joins\n'
              '    invoice.join(sale.invoice)\n'
              '    product.join(sale.product)\n'
              '\n'
              '    # Result fields\n'
              '    product_id = query.Result(product.id)\n'
              '    product_model = query.Result(product.model)\n'
              '    product_name = query.Result(product.name)\n'
              '    quantity = query.Result(aggregate.Sum(sale.quantity), '
              'InvoiceItem.quantity)\n'
              '    net_amount = query.Result(aggregate.Sum(sale.net_amount), '
              'InvoiceItem.net_amount)\n'
              '  ')

Fragment(uuid='1ebe94bb-4659-4752-9f99-3c4aa7476369',
         path='/lib/dblayer/test/model.py',
         lineno=176,
         depth=2,
         type='variable',
         name='sale',
         text='sale = InvoiceItem()')

Fragment(uuid='c7232bc0-83bf-4329-ac80-c6531c304865',
         path='/lib/dblayer/test/model.py',
         lineno=177,
         depth=2,
         type='variable',
         name='invoice',
         text='invoice = Invoice()')

Fragment(uuid='f14a42ea-beef-4bda-bfa4-12ff7d99ea3c',
         path='/lib/dblayer/test/model.py',
         lineno=178,
         depth=2,
         type='variable',
         name='product',
         text='product = Product()')

Fragment(uuid='5be1026a-ba9f-4e9e-b8fc-fae1ada9071a',
         path='/lib/dblayer/test/model.py',
         lineno=185,
         depth=2,
         type='variable',
         name='product_id',
         text='product_id = query.Result(product.id)')

Fragment(uuid='568cdc7d-3b83-40b7-8d03-0b0a6ff0b14b',
         path='/lib/dblayer/test/model.py',
         lineno=186,
         depth=2,
         type='variable',
         name='product_model',
         text='product_model = query.Result(product.model)')

Fragment(uuid='2ddfb17b-f1cf-4a38-a2e6-6eb691aa7c6d',
         path='/lib/dblayer/test/model.py',
         lineno=187,
         depth=0,
         type='module',
         name='',
         text='  product_name = query.Result(product.name)\n'
              '    quantity = query.Result(aggregate.Sum(sale.quantity), '
              'InvoiceItem.quantity)\n'
              '    net_amount = query.Result(aggregate.Sum(sale.net_amount), '
              'InvoiceItem.net_amount)\n'
              '    vat_amount = query.Result(aggregate.Sum(sale.vat_amount), '
              'InvoiceItem.vat_amount)\n'
              '    gross_amount = '
              'query.Result(aggregate.Sum(sale.gross_amount), InvoiceItem.gro')

Fragment(uuid='de3637a7-68d3-4336-b99a-970522b769cb',
         path='/lib/dblayer/test/model.py',
         lineno=187,
         depth=2,
         type='variable',
         name='product_name',
         text='product_name = query.Result(product.name)')

Fragment(uuid='7f91c4fb-ba27-42ea-89f9-b19e51253cea',
         path='/lib/dblayer/test/model.py',
         lineno=188,
         depth=2,
         type='variable',
         name='quantity',
         text='quantity = query.Result(aggregate.Sum(sale.quantity), '
              'InvoiceItem.quantity)')

Fragment(uuid='48f45554-22a0-4504-9598-8218785b3e7a',
         path='/lib/dblayer/test/model.py',
         lineno=189,
         depth=2,
         type='variable',
         name='net_amount',
         text='net_amount = query.Result(aggregate.Sum(sale.net_amount), '
              'InvoiceItem.net_amount)')

Fragment(uuid='be8fe65c-32ec-4a84-a61c-0878694f948b',
         path='/lib/dblayer/test/model.py',
         lineno=190,
         depth=0,
         type='class',
         name='ProductSale',
         text='  vat_amount = query.Result(aggregate.Sum(sale.vat_amount), '
              'InvoiceItem.vat_amount)\n'
              '    gross_amount = '
              'query.Result(aggregate.Sum(sale.gross_amount), '
              'InvoiceItem.gross_amount)\n'
              '\n'
              '    # Conditions\n'
              '    model = query.Condition(product.model)\n'
              '    active = query.Condition(product.active)\n'
              '    seller = query.Condition(invoice.seller)\n'
              '    customer = query.Condition(invoice.customer)\n'
              '    issued_date = query.Condition(invoice.issued_date)\n'
              '\n'
              '    # Group by\n'
              '    _group_by = (product.id, product.model, product.name)\n'
              '\n'
              '    # Order by\n'
              "    _order_by = ('product_name', '+product_model', "
              "'-net_amount')")

Fragment(uuid='aaa62b56-9889-409c-ab18-093e8db76409',
         path='/lib/dblayer/test/model.py',
         lineno=190,
         depth=2,
         type='variable',
         name='vat_amount',
         text='vat_amount = query.Result(aggregate.Sum(sale.vat_amount), '
              'InvoiceItem.vat_amount)')

Fragment(uuid='e49851c7-458f-4b27-b87c-1edb76cf571e',
         path='/lib/dblayer/test/model.py',
         lineno=191,
         depth=0,
         type='module',
         name='',
         text='ss_amount)\n'
              '\n'
              '    # Conditions\n'
              '    model = query.Condition(product.model)\n'
              '    active = query.Condition(product.active)\n'
              '    seller = query.Condition(invoice.seller)\n'
              '    customer = query.Condition(invoice.customer)\n'
              '    issued_date = query.Condition(invoice.issued_date)\n'
              '\n'
              '    # Group by\n'
              '    _group_by = (product.id, product.model, product.name)\n'
              '\n'
              '    # Order by\n'
              "    _order_by = ('pr")

Fragment(uuid='2cb72520-748e-4939-876c-bd0a91fcf077',
         path='/lib/dblayer/test/model.py',
         lineno=191,
         depth=2,
         type='variable',
         name='gross_amount',
         text='gross_amount = query.Result(aggregate.Sum(sale.gross_amount), '
              'InvoiceItem.gross_amount)')

Fragment(uuid='48c3e239-73a1-4964-aa81-786b01e921b9',
         path='/lib/dblayer/test/model.py',
         lineno=194,
         depth=2,
         type='variable',
         name='model',
         text='model = query.Condition(product.model)')

Fragment(uuid='f67a9475-696f-4379-be33-e86365f21593',
         path='/lib/dblayer/test/model.py',
         lineno=195,
         depth=2,
         type='variable',
         name='active',
         text='active = query.Condition(product.active)')

Fragment(uuid='042fae1f-32a5-4825-9ab8-e75ecb341e5b',
         path='/lib/dblayer/test/model.py',
         lineno=196,
         depth=2,
         type='variable',
         name='seller',
         text='seller = query.Condition(invoice.seller)')

Fragment(uuid='8f8aacc8-6597-4241-8e8d-e322feecce23',
         path='/lib/dblayer/test/model.py',
         lineno=197,
         depth=2,
         type='variable',
         name='customer',
         text='customer = query.Condition(invoice.customer)')

Fragment(uuid='0e5f1078-ffdd-45ad-a18a-18ed2563ad88',
         path='/lib/dblayer/test/model.py',
         lineno=198,
         depth=2,
         type='variable',
         name='issued_date',
         text='issued_date = query.Condition(invoice.issued_date)')

Fragment(uuid='095faa68-edd4-4dbe-9295-5ae82178d37a',
         path='/lib/dblayer/test/model.py',
         lineno=201,
         depth=2,
         type='variable',
         name='_group_by',
         text='_group_by = (product.id, product.model, product.name)')

Fragment(uuid='5303ef5d-008a-4dc6-9cf9-3b1422478657',
         path='/lib/dblayer/test/model.py',
         lineno=204,
         depth=0,
         type='module',
         name='',
         text="oduct_name', '+product_model', '-net_amount')\n"
              '\n'
              '\n'
              '##class InvoicePaymentView(view.View):\n'
              '##    """ Total payments by invoice\n'
              '##    """\n'
              '##    \n'
              '##class ProductIncomeView(view.View):\n'
              '##    """ Actual income by product based both on the invoices '
              'and the payments\n'
              '##    """\n'
              '##\n'
              '##class UserPaymentView(view.View):\n'
              '##    """ Total income and debt per user\n'
              '##    """\n'
              '\n'
              '### Database model\n')

Fragment(uuid='bbe3a963-c0ba-4249-b32f-84bb0817d67a',
         path='/lib/dblayer/test/model.py',
         lineno=204,
         depth=2,
         type='variable',
         name='_order_by',
         text="_order_by = ('product_name', '+product_model', '-net_amount')")

Fragment(uuid='fd8d2866-ca07-44ac-9bd3-e42159bb227d',
         path='/lib/dblayer/test/model.py',
         lineno=220,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class TestDatabaseModel(database.Database):\n'
              '    """ Test database model\n'
              '    """\n'
              '\n'
              '    # Tables\n'
              '    user = User()\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    user = User()\n'
              '    group = Group()\n'
              '    group_user = GroupUser()\n'
              '    role = Role()\n'
              '    group_role = GroupRole()\n'
              '    activation = Activation()\n'
              '    product = Product()\n'
              '    invoice = Invoice()\n'
              '    invoice_item = InvoiceItem()\n'
              '    payment = Payment()\n'
              '\n'
              '    # Q')

Fragment(uuid='12f4e85a-b1d9-4a78-b8f5-bbc539bda70b',
         path='/lib/dblayer/test/model.py',
         lineno=221,
         depth=0,
         type='class',
         name='TestDatabaseModel',
         text='class TestDatabaseModel(database.Database):\n'
              '    """ Test database model\n'
              '    """\n'
              '\n'
              '    # Tables\n'
              '    user = User()\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    user = User()\n'
              '    group = Group()\n'
              '    group_user = GroupUser()\n'
              '    role = Role()\n'
              '    group_role = GroupRole()\n'
              '    activation = Activation()\n'
              '    product = Product()\n'
              '    invoice = Invoice()\n'
              '    invoice_item = InvoiceItem()\n'
              '    payment')

Fragment(uuid='68da2259-e7c6-4977-a14d-ca737cf9dfd6',
         path='/lib/dblayer/test/model.py',
         lineno=226,
         depth=2,
         type='variable',
         name='user',
         text='user = User()')

Fragment(uuid='d0dd9076-41b3-4305-945e-d3b5fae03bcb',
         path='/lib/dblayer/test/model.py',
         lineno=228,
         depth=2,
         type='variable',
         name='user',
         text='user = User()')

Fragment(uuid='b437da86-b89f-479e-ab21-803d65b652d1',
         path='/lib/dblayer/test/model.py',
         lineno=229,
         depth=2,
         type='variable',
         name='group',
         text='group = Group()')

Fragment(uuid='2b284658-5e38-46be-b663-3fb9d9ce867e',
         path='/lib/dblayer/test/model.py',
         lineno=230,
         depth=2,
         type='variable',
         name='group_user',
         text='group_user = GroupUser()')

Fragment(uuid='cc21835b-e15e-4b92-8be5-0b6dfed5c5e1',
         path='/lib/dblayer/test/model.py',
         lineno=231,
         depth=2,
         type='variable',
         name='role',
         text='role = Role()')

Fragment(uuid='f3a326dd-7078-4fe1-95a8-a2481da00353',
         path='/lib/dblayer/test/model.py',
         lineno=232,
         depth=2,
         type='variable',
         name='group_role',
         text='group_role = GroupRole()')

Fragment(uuid='01178e27-d8c9-4ad0-9b77-fa950913b597',
         path='/lib/dblayer/test/model.py',
         lineno=233,
         depth=2,
         type='variable',
         name='activation',
         text='activation = Activation()')

Fragment(uuid='d33e1923-56f6-4009-a2f9-e84192d0cece',
         path='/lib/dblayer/test/model.py',
         lineno=234,
         depth=2,
         type='variable',
         name='product',
         text='product = Product()')

Fragment(uuid='4369f155-ca3e-4827-821e-1c3327a77e45',
         path='/lib/dblayer/test/model.py',
         lineno=235,
         depth=2,
         type='variable',
         name='invoice',
         text='invoice = Invoice()')

Fragment(uuid='38f15bf2-4176-4f43-83c4-2d5b4691126b',
         path='/lib/dblayer/test/model.py',
         lineno=236,
         depth=2,
         type='variable',
         name='invoice_item',
         text='invoice_item = InvoiceItem()')

Fragment(uuid='bdde58b9-4291-455a-b271-2fec4c662bfa',
         path='/lib/dblayer/test/model.py',
         lineno=237,
         depth=0,
         type='class',
         name='TestDatabaseModel',
         text=' = Payment()\n'
              '\n'
              '    # Queries\n'
              '    user_contact = UserContact()\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    user_contact = UserContact()\n'
              '    product_sale = ProductSale()\n'
              '\n'
              '    # Stored procedures\n'
              '    fn_set_last_modified = procedure.Procedure(\n'
              "        language='plpgsql',\n"
              '        argument_list=(),\n'
              "        result='trigger AS $$',\n"
              "        body='''\\\n"
              'new.last_modified := NOW();\n'
              'RETURN new;\n'
              "''')")

Fragment(uuid='8ac4a9d1-5c1c-4835-a86d-924820d06dd4',
         path='/lib/dblayer/test/model.py',
         lineno=237,
         depth=2,
         type='variable',
         name='payment',
         text='payment = Payment()')

Fragment(uuid='1c3fab03-2653-4a3a-a525-55995798ab1e',
         path='/lib/dblayer/test/model.py',
         lineno=239,
         depth=0,
         type='module',
         name='',
         text='ueries\n'
              '    user_contact = UserContact()\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    user_contact = UserContact()\n'
              '    product_sale = ProductSale()\n'
              '\n'
              '    # Stored procedures\n'
              '    fn_set_last_modified = procedure.Procedure(\n'
              "        language='plpgsql',\n"
              '        argument_list=(),\n'
              "        result='trigger AS $$',\n"
              "        body='''\\\n"
              'new.last_modified := NOW();\n'
              'RETURN new;\n'
              "''')\n"
              '\n'
              '\n'
              '### Generate database abstraction layer\n')

Fragment(uuid='90f832d0-35cd-4163-84ad-ff924dd9da0f',
         path='/lib/dblayer/test/model.py',
         lineno=240,
         depth=2,
         type='variable',
         name='user_contact',
         text='user_contact = UserContact()')

Fragment(uuid='7005890a-736b-4389-a593-7d6d4173dd3d',
         path='/lib/dblayer/test/model.py',
         lineno=242,
         depth=2,
         type='variable',
         name='user_contact',
         text='user_contact = UserContact()')

Fragment(uuid='53640b0e-83ef-4375-85ea-a1395ae8c663',
         path='/lib/dblayer/test/model.py',
         lineno=243,
         depth=2,
         type='variable',
         name='product_sale',
         text='product_sale = ProductSale()')

Fragment(uuid='33769c9b-fdb8-4e3a-9fb0-3f7f453557e2',
         path='/lib/dblayer/test/model.py',
         lineno=246,
         depth=2,
         type='variable',
         name='fn_set_last_modified',
         text='fn_set_last_modified = procedure.Procedure(\n'
              "        language='plpgsql',\n"
              '        argument_list=(),\n'
              "        result='trigger AS $$',\n"
              "        body='''\\\n"
              'new.last_modified := NOW();\n'
              'RETURN new;\n'
              "''')")

Fragment(uuid='df37cab8-6816-462c-9992-b2d6d427c7f0',
         path='/lib/dblayer/test/model.py',
         lineno=257,
         depth=0,
         type='module',
         name='',
         text='\n'
              "def generate(module_path='abstraction.py',\n"
              '             database_model_class=TestDatabaseModel,\n'
              "             abstraction_class_name='TestDatabase'):\n"
              '    test_database_model = '
              'database_model_class(abstraction_class_name)\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    test_database_model = '
              'database_model_class(abstraction_class_name)\n'
              '    source = '
              'test_database_model.generate(dblayer.backend.postgresql)\n'
              "    with open(module_path, 'wt') as module_file:\n"
              "        module_file.write(source.replace('\\r\\n', '\\n'))\n")

Fragment(uuid='1e2ef849-bc09-4d3d-ac9c-c37d12ba1b88',
         path='/lib/dblayer/test/model.py',
         lineno=258,
         depth=0,
         type='function',
         name='generate',
         text="def generate(module_path='abstraction.py',\n"
              '             database_model_class=TestDatabaseModel,\n'
              "             abstraction_class_name='TestDatabase'):\n"
              '    test_database_model = '
              'database_model_class(abstraction_class_name)\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    test_database_model = '
              'database_model_class(abstraction_class_name)\n'
              '    source = '
              'test_database_model.generate(dblayer.backend.postgresql)\n'
              "    with open(module_path, 'wt') as module_file:\n"
              "        module_file.write(source.replace('\\r\\n', '\\n'))")

Fragment(uuid='e18b1bf4-fb0e-4e84-a2bb-1651ef3a29ea',
         path='/lib/dblayer/test/model.py',
         lineno=261,
         depth=2,
         type='variable',
         name='test_database_model',
         text='test_database_model = '
              'database_model_class(abstraction_class_name)')

Fragment(uuid='afc6f947-bbb6-4824-8f4f-02f45ff2eac6',
         path='/lib/dblayer/test/model.py',
         lineno=263,
         depth=2,
         type='variable',
         name='test_database_model',
         text='test_database_model = '
              'database_model_class(abstraction_class_name)')

Fragment(uuid='0314ab37-71c8-4aed-b059-2609f3b9d0fc',
         path='/lib/dblayer/test/model.py',
         lineno=264,
         depth=2,
         type='variable',
         name='source',
         text='source = '
              'test_database_model.generate(dblayer.backend.postgresql)')

Fragment(uuid='db70e5a0-6f14-4366-86ae-b70faf26f4ba',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# -*- coding: utf8 -*-\n'
              '\n'
              'import datetime\n'
              'import os\n'
              'import re\n'
              'import unittest\n'
              '\n'
              'import dblayer\n'
              '\n'
              'import dblayer.model.database\n'
              'import dblayer.model.table\n'
              'from dblayer.test import model\n'
              '\n'
              'MODEL_DIR = os.path.dirname(model.__file__)\n'
              '\n'
              'from dblayer import constants\n'
              'from dblayer.backend.base import clauses\n'
              'from dblayer.graph import gml\n'
              '\n'
              'from dblayer.test import constants as test_constants\n')

Fragment(uuid='90fc1400-5cd3-4cde-ae5f-0680d4dd6aca',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/test/test_abstraction.py\n'
              '  Classes: TestAbstraction TestGraph\n'
              '  Methods: do_failed_transaction load_data modify_data setUp '
              'tearDown testGML test_class_formatting test_clauses_class '
              'test_database_session test_duplicate_insert '
              'test_full_text_search test_insert_select test_inspection '
              'test_order_by test_product_sale_query test_random_id_selection '
              'test_repr_str test_triggers test_truncate test_tuple_dict '
              'test_update_delete test_user_contact_query verify_data\n'
              '  Variables: Clauses MODEL_DIR RX_TIMESTAMP admin anna '
              'anna.email anna2 anna_groups annacska bar_sales, clauses_cache '
              'clauses_cache[empty_clauses] clauses_cache[full_clauses] code '
              'constants.DATABASE_ID_RANGE consulting created customer '
              'database_class database_model_class db2 db3 db4 dsn '
              'empty_clauses empty_hash exporter field_dict field_tuple '
              'find_result_list fn_find fn_get fn_update full_clauses '
              'full_hash get_result_list group group_list group_membership '
              'group_user_count group_user_id_list group_user_list group_x hdd '
              'hdd.last_modified hdd.model inspected_database '
              'inspected_model_path invoice isi item1 item2 model_instance '
              'namespace new_source obj_list old_source original_range '
              'product_sale_list product_sale_list2 provider record1 record2 '
              'record2.last_modified self.abstraction self.db source user_list '
              'value viktor viktor_groups\n'
              '  Usages: DATABASE_ID_RANGE Database DatabaseInspector Error '
              'GMLExporter InspectedDatabase IntegrityError '
              'LEAVE_CLEAN_DATABASE Product ProductRecord ProductSale TEST_DSN '
              'Table TestCase TestDatabase TestDatabaseModel User ValueError '
              '__file__ __import__ _column_name_list _table_list _table_name '
              'abstraction abstraction_class_name add_group add_group_list '
              'add_group_user add_group_user_list add_invoice '
              'add_invoice_item_list add_product add_product_list add_user '
              'add_user_list assertAlmostEqual assertEqual assertFalse '
              'assertIsInstance assertNotEqual assertRaises assertTrue backend '
              'bar_sales base clauses close commit compile connect connected '
              'constants create_structure cursor database date datetime days '
              'dblayer delete_group delete_group_list delete_group_user '
              'delete_group_user_list dict dir dirname disable_transactions '
              'drop_structure due_date email enable_transactions eval exec '
              'execute export field_list find_group find_group_user_list '
              'find_product find_user find_user_list first_day first_name '
              'foo_sales full_text_search generate generate_id get '
              'get_group_count get_group_iter get_group_user_count '
              'get_group_user_list get_product get_product_iter get_user_count '
              'get_user_list getattr gml graph gross_amount group_by '
              'group_user hasattr hash having ignore_errors inspect '
              'inspected_abstraction inspected_model inspected_model_file '
              'inspector is_primary_key_conflict isinstance issubclass '
              'issued_date join key last_day last_modified last_name len limit '
              'list model module_file module_path name net_amount new_group '
              'new_group_user new_invoice new_invoice_item new_product '
              'new_user obj offset open order_by path phone phone_in phone_ne '
              'phone_not_in postgresql pretty_format_class product '
              'product_name quantity query_product_sale_count '
              'query_product_sale_iter query_product_sale_list '
              'query_user_contact_count range read reason repr reverse '
              'rollback self seller serial session set slug sort sorted '
              'startswith str subn table table_list test test_constants '
              'timedelta transaction truncate_all_tables tuple unittest '
              'update_product update_user update_user_list user vat_amount '
              'vat_percent where write\n')

Fragment(uuid='87b57f64-a9a3-460e-b55f-0011798040cd',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='import datetime')

Fragment(uuid='0ade4037-6ff8-4343-8279-5db25bf3e8c0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='9ea4f000-1084-41a7-8aaa-9bb8517dfc2f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='import re')

Fragment(uuid='dc9b2451-1c8e-4668-b2ab-da67b853135e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='import unittest')

Fragment(uuid='e963c02b-962c-496f-ac72-6c2748ab8520',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=8,
         depth=0,
         type='dependency',
         name='',
         text='import dblayer')

Fragment(uuid='69deb8ef-de3a-4010-a042-1c29066180a4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=10,
         depth=0,
         type='dependency',
         name='',
         text='import dblayer.model.database')

Fragment(uuid='be7eee0c-9767-4009-9104-4ce84addacff',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=11,
         depth=0,
         type='dependency',
         name='',
         text='import dblayer.model.table')

Fragment(uuid='313cdc2f-a418-4db3-a1dc-4b703989a7b6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=12,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.test import model')

Fragment(uuid='19abcb36-24aa-4c46-9034-4829eec98def',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=14,
         depth=0,
         type='variable',
         name='MODEL_DIR',
         text='MODEL_DIR = os.path.dirname(model.__file__)')

Fragment(uuid='5c20a899-bb0a-48fd-b8ed-0a9006718bfd',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=16,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import constants')

Fragment(uuid='df34f38d-d74f-4f4f-b8ef-5f08ec112f85',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=17,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.backend.base import clauses')

Fragment(uuid='f85e8ccc-a1fa-490f-b3d3-a7b36e121f49',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=18,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.graph import gml')

Fragment(uuid='71bc089b-9d6e-4b26-8340-61ad61312376',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=20,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer.test import constants as test_constants')

Fragment(uuid='f4cffcc3-25f2-4e19-b101-3d9b4f45a0b9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=21,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class TestGraph(unittest.TestCase):\n'
              '\n'
              '    def setUp(self) -> None:\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')\n"
              '\n'
              '    def testGML(self):\n'
              '        model_instance = '
              "model.TestDatabaseModel('TestDatabase')\n"
              '        exporter = gml.GMLExporter(model_instance)\n'
              "        exporter.export('model.gml')\n")

Fragment(uuid='805c67c3-b205-4c1d-90ea-9ea1f18079d0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=23,
         depth=0,
         type='class',
         name='TestGraph',
         text='class TestGraph(unittest.TestCase):\n'
              '\n'
              '    def setUp(self) -> None:\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')\n"
              '\n'
              '    def testGML(self):\n'
              '        model_instance = '
              "model.TestDatabaseModel('TestDatabase')\n"
              '        exporter = gml.GMLExporter(model_instance)\n'
              "        exporter.export('model.gml')")

Fragment(uuid='28b6a96a-0ed0-4294-ad43-255995165d8e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=25,
         depth=2,
         type='function',
         name='setUp',
         text='def setUp(self) -> None:\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')")

Fragment(uuid='c9f21e7b-7859-4a30-a81c-98be0e1edf06',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=27,
         depth=4,
         type='variable',
         name='self.abstraction',
         text="self.abstraction = __import__('abstraction')")

Fragment(uuid='e0fb2700-698b-4d20-b733-caf62d4820d6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=29,
         depth=2,
         type='function',
         name='testGML',
         text='def testGML(self):\n'
              '        model_instance = '
              "model.TestDatabaseModel('TestDatabase')\n"
              '        exporter = gml.GMLExporter(model_instance)\n'
              "        exporter.export('model.gml')")

Fragment(uuid='a3bfbb14-ad98-405b-b00b-f3713eb5ccaf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=30,
         depth=4,
         type='variable',
         name='model_instance',
         text="model_instance = model.TestDatabaseModel('TestDatabase')")

Fragment(uuid='b237e653-963b-46d0-be66-abfd0756e6b8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=31,
         depth=4,
         type='variable',
         name='exporter',
         text='exporter = gml.GMLExporter(model_instance)')

Fragment(uuid='1277989a-bbca-43bd-8b33-1961aa3a9fab',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=33,
         depth=0,
         type='module',
         name='',
         text='\n\nclass TestAbstraction(unittest.TestCase):\n')

Fragment(uuid='9ce0597c-31b7-49dc-a4db-6d55ea8ca3ee',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=35,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='class TestAbstraction(unittest.TestCase):\n')

Fragment(uuid='6a9543b5-22c7-4d40-ba32-70725de4c9cc',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=36,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def setUp(self):\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')\n"
              '        self.db = self.abstraction.TestDatabase()\n'
              '        self.db.connect(test_constants.TEST_DSN)\n'
              '        self.db.enable_transactions()\n'
              '        with self.db.transaction():\n'
              '            self.db.drop_structure(ignore_errors=True)\n'
              '        with self.db.transaction():\n'
              '            self.db.create_structure()\n')

Fragment(uuid='6eec218c-5215-48fb-a74d-44882ed67891',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=36,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def setUp(self):\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')\n"
              '        self.db = self.abstraction.TestDatabase()\n'
              '        self.db.connect(test_constants.TEST_DSN)\n'
              '        self.db.enable_transactions()\n'
              '        with self.db.transaction():\n'
              '            self.db.drop_structure(ignore_errors=True)\n'
              '        with self.db.transaction():\n'
              '            self.db.create_structure()\n')

Fragment(uuid='e7b236ff-8631-49ae-8661-60b21f6c2449',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=37,
         depth=2,
         type='function',
         name='setUp',
         text='def setUp(self):\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')\n"
              '        self.db = self.abstraction.TestDatabase()\n'
              '        self.db.connect(test_constants.TEST_DSN)\n'
              '        self.db.enable_transactions()\n'
              '        with self.db.transaction():\n'
              '            self.db.drop_structure(ignore_errors=True)\n'
              '        with self.db.transaction():\n'
              '            self.db.create_structure()')

Fragment(uuid='462a9c73-599b-4ef4-8ab2-9fed4f2988f7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=39,
         depth=4,
         type='variable',
         name='self.abstraction',
         text="self.abstraction = __import__('abstraction')")

Fragment(uuid='5d96ed20-aa45-4fd6-b740-31df961090b2',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=40,
         depth=4,
         type='variable',
         name='self.db',
         text='self.db = self.abstraction.TestDatabase()')

Fragment(uuid='9cfa7c19-bae0-431a-8241-d81b41226104',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def tearDown(self):\n'
              '        if test_constants.LEAVE_CLEAN_DATABASE:\n'
              '            self.db.rollback()\n'
              '            with self.db.transaction():\n'
              '                self.db.drop_structure(ignore_errors=True)\n'
              '        self.db.disable_transactions()\n'
              '        self.db.close()\n'
              '\n'
              '        # It must not fail\n'
              '        self.db.close()\n')

Fragment(uuid='18404b55-02c9-4334-b28d-a624e7fd40e4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=47,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def tearDown(self):\n'
              '        if test_constants.LEAVE_CLEAN_DATABASE:\n'
              '            self.db.rollback()\n'
              '            with self.db.transaction():\n'
              '                self.db.drop_structure(ignore_errors=True)\n'
              '        self.db.disable_transactions()\n'
              '        self.db.close()\n'
              '\n'
              '        # It must not fail\n'
              '        self.db.close()\n')

Fragment(uuid='7a434042-16fa-4280-802f-e2b2058df983',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=48,
         depth=2,
         type='function',
         name='tearDown',
         text='def tearDown(self):\n'
              '        if test_constants.LEAVE_CLEAN_DATABASE:\n'
              '            self.db.rollback()\n'
              '            with self.db.transaction():\n'
              '                self.db.drop_structure(ignore_errors=True)\n'
              '        self.db.disable_transactions()\n'
              '        self.db.close()\n'
              '\n'
              '        # It must not fail\n'
              '        self.db.close()')

Fragment(uuid='6debe95a-545a-4492-b4d5-a9b1f57bc0f6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=58,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_database_session(self):\n'
              '        db2 = self.abstraction.TestDatabase()\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='90fb983b-0b6b-4fe2-89ee-df546b8cacb6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=58,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_database_session(self):\n'
              '        db2 = self.abstraction.TestDatabase()\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='046cfd52-b47c-4541-9345-bda7275b12bf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=59,
         depth=2,
         type='function',
         name='test_database_session',
         text='def test_database_session(self):\n'
              '        db2 = self.abstraction.TestDatabase()\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='e3cc11a0-b571-4c38-8dde-f15a3a5a3261',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=60,
         depth=4,
         type='variable',
         name='db2',
         text='db2 = self.abstraction.TestDatabase()')

Fragment(uuid='e6c7b241-0006-4f69-b862-72a5040cc5aa',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=62,
         depth=0,
         type='module',
         name='',
         text='        with db2.session(test_constants.TEST_DSN):\n'
              '            self.assertTrue(db2.connected)\n')

Fragment(uuid='f38dd60a-295f-41e2-ab83-ab93d49566cf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=62,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        with db2.session(test_constants.TEST_DSN):\n'
              '            self.assertTrue(db2.connected)\n')

Fragment(uuid='f2ddea52-180d-4925-ad42-76e012dda811',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=62,
         depth=2,
         type='function',
         name='test_database_session',
         text='        with db2.session(test_constants.TEST_DSN):\n'
              '            self.assertTrue(db2.connected)\n')

Fragment(uuid='e217f8ba-039a-4ceb-bd93-66e01fe56f7b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=64,
         depth=0,
         type='module',
         name='',
         text='            with db2.transaction():\n'
              "                hdd = db2.new_product(name='hdd')\n"
              '                db2.add_product(hdd)\n'
              '            self.assertTrue(db2.connected)\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='cc00bfcb-2584-4339-8291-bde852cade0c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=64,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='            with db2.transaction():\n'
              "                hdd = db2.new_product(name='hdd')\n"
              '                db2.add_product(hdd)\n'
              '            self.assertTrue(db2.connected)\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='613f80df-1a5b-46c2-b574-3e5f511a176b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=64,
         depth=2,
         type='function',
         name='test_database_session',
         text='            with db2.transaction():\n'
              "                hdd = db2.new_product(name='hdd')\n"
              '                db2.add_product(hdd)\n'
              '            self.assertTrue(db2.connected)\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='24c5da89-4b3d-4e0e-9333-9c3771d4c4bf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=65,
         depth=8,
         type='variable',
         name='hdd',
         text="hdd = db2.new_product(name='hdd')")

Fragment(uuid='a6f46a8b-dc14-4cd5-8035-90f49757ab65',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with self.db.transaction():\n'
              '            '
              "self.assertEqual(self.db.find_product(name='hdd').id, hdd.id)\n"
              '\n'
              '        # Automatic closing of connection in __del__ in '
              'no-error condition\n'
              '        db3 = self.abstraction.TestDatabase()\n'
              '        db3.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db3.connected)\n'
              '        del db3\n'
              '\n'
              '        # Automatic closing of connection in __del__ after a '
              'database error\n'
              '        db4 = self.abstraction.TestDatabase()\n'
              '        db4.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db4.connected)\n')

Fragment(uuid='be948266-b722-400a-befb-0236801c1e07',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=69,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '        with self.db.transaction():\n'
              '            '
              "self.assertEqual(self.db.find_product(name='hdd').id, hdd.id)\n"
              '\n'
              '        # Automatic closing of connection in __del__ in '
              'no-error condition\n'
              '        db3 = self.abstraction.TestDatabase()\n'
              '        db3.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db3.connected)\n'
              '        del db3\n'
              '\n'
              '        # Automatic closing of connection in __del__ after a '
              'database error\n'
              '        db4 = self.abstraction.TestDatabase()\n'
              '        db4.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db4.connected)\n')

Fragment(uuid='2fc89b67-1976-42e3-a1b9-43f5c472d097',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=69,
         depth=2,
         type='function',
         name='test_database_session',
         text='\n'
              '        with self.db.transaction():\n'
              '            '
              "self.assertEqual(self.db.find_product(name='hdd').id, hdd.id)\n"
              '\n'
              '        # Automatic closing of connection in __del__ in '
              'no-error condition\n'
              '        db3 = self.abstraction.TestDatabase()\n'
              '        db3.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db3.connected)\n'
              '        del db3\n'
              '\n'
              '        # Automatic closing of connection in __del__ after a '
              'database error\n'
              '        db4 = self.abstraction.TestDatabase()\n'
              '        db4.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db4.connected)\n')

Fragment(uuid='2f0ffa81-661e-447e-b085-94798c5d8351',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=74,
         depth=4,
         type='variable',
         name='db3',
         text='db3 = self.abstraction.TestDatabase()')

Fragment(uuid='fde31f0b-e9e8-492e-aed8-c2ea5d469f5b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=80,
         depth=4,
         type='variable',
         name='db4',
         text='db4 = self.abstraction.TestDatabase()')

Fragment(uuid='c816717f-8d49-46fc-ade3-dd519dd3c7e8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='        with db4.cursor() as cursor:\n'
              '            self.assertRaises(db4.Error, db4.execute, cursor, '
              "'BAD SQL')\n"
              '        del db4\n')

Fragment(uuid='72b6bba3-eb03-4e14-92a5-e6beba6f9835',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=83,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        with db4.cursor() as cursor:\n'
              '            self.assertRaises(db4.Error, db4.execute, cursor, '
              "'BAD SQL')\n"
              '        del db4\n')

Fragment(uuid='f0438a80-ae9c-4da1-b8f4-2b553af0040c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=83,
         depth=2,
         type='function',
         name='test_database_session',
         text='        with db4.cursor() as cursor:\n'
              '            self.assertRaises(db4.Error, db4.execute, cursor, '
              "'BAD SQL')\n"
              '        del db4')

Fragment(uuid='18f6d59f-343d-44ab-832e-9bb2a75bbd69',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_truncate(self):\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.assertNotEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n')

Fragment(uuid='b285a3f2-ddfa-4cb1-b9c2-94861f9ca116',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=86,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_truncate(self):\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.assertNotEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n')

Fragment(uuid='74253a4a-a6d6-4872-b1a7-6bf6c1df5ef5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=87,
         depth=2,
         type='function',
         name='test_truncate',
         text='def test_truncate(self):\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.assertNotEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)')

Fragment(uuid='68031473-4efe-4cd1-b6ef-21c9c90633cf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=98,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_insert_select(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        with self.db.transaction():\n'
              '            self.verify_data()\n'
              '        self.db.commit()\n')

Fragment(uuid='d72231a1-6b23-4515-8908-3b9726677791',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=98,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_insert_select(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        with self.db.transaction():\n'
              '            self.verify_data()\n'
              '        self.db.commit()\n')

Fragment(uuid='3376d571-ae5e-4fdf-8ddb-9c95491417d6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=99,
         depth=2,
         type='function',
         name='test_insert_select',
         text='def test_insert_select(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        with self.db.transaction():\n'
              '            self.verify_data()\n'
              '        self.db.commit()')

Fragment(uuid='0cbb3efd-d47a-4629-a53b-1e3fb5f9d2ba',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=105,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_duplicate_insert(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        user_list = self.db.get_user_list()\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user, user_list[0], generate_id=False)\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user_list, user_list, generate_id=False)\n')

Fragment(uuid='ef633402-328c-4fbc-9c83-fec22e5f9c57',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=105,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_duplicate_insert(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        user_list = self.db.get_user_list()\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user, user_list[0], generate_id=False)\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user_list, user_list, generate_id=False)\n')

Fragment(uuid='6602d956-4633-41c3-a0a9-7a606c055071',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=106,
         depth=2,
         type='function',
         name='test_duplicate_insert',
         text='def test_duplicate_insert(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        user_list = self.db.get_user_list()\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user, user_list[0], generate_id=False)\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user_list, user_list, generate_id=False)')

Fragment(uuid='95632005-c2b5-420e-b285-72da9b41e7d3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=109,
         depth=4,
         type='variable',
         name='user_list',
         text='user_list = self.db.get_user_list()')

Fragment(uuid='2f76442d-4bf8-47fa-9aee-124e729e1afa',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=114,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_update_delete(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.modify_data()\n'
              '        self.do_failed_transaction()\n')

Fragment(uuid='d8168f19-0453-4f62-ac48-a6eae256b5e0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=114,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_update_delete(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.modify_data()\n'
              '        self.do_failed_transaction()\n')

Fragment(uuid='430fcbbd-cc5a-4405-9051-ccfe5b57d619',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=115,
         depth=2,
         type='function',
         name='test_update_delete',
         text='def test_update_delete(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.modify_data()\n'
              '        self.do_failed_transaction()')

Fragment(uuid='fe1d2d22-5970-4f87-9aaa-b4544749f128',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=120,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def load_data(self, db=None):\n'
              '        """ Loads test data\n'
              '        """\n')

Fragment(uuid='34b74b26-6232-4a69-8210-3ab76a10578b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=120,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def load_data(self, db=None):\n'
              '        """ Loads test data\n'
              '        """\n')

Fragment(uuid='38b4a7cd-94b0-4f94-8c2d-750e24353ebe',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=121,
         depth=2,
         type='function',
         name='load_data',
         text='def load_data(self, db=None):\n'
              '        """ Loads test data\n'
              '        """\n')

Fragment(uuid='c3d3562e-b8f2-4551-95ee-b9c0439ed8c6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=124,
         depth=0,
         type='module',
         name='',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='e93adc21-6988-45a1-a936-12c44cc29e8d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=124,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='483657d0-e329-433b-bb9a-359101002b75',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=124,
         depth=2,
         type='function',
         name='load_data',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='6a674278-e89a-4fa0-a595-10322bc29aa4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=125,
         depth=6,
         type='variable',
         name='db',
         text='db = self.db')

Fragment(uuid='cf2509da-676f-4de4-9097-b683b149557d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=126,
         depth=0,
         type='module',
         name='',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              '        # Users\n'
              '        viktor = db.new_user(\n'
              "            email='viktor@ferenczi.eu',\n"
              "            first_name='Viktor',\n"
              "            last_name='Ferenczi',\n"
              "            phone='1234567')\n"
              '        anna = db.new_user(\n'
              "            email='anna@cx.hu',\n"
              '            first_na')

Fragment(uuid='c1b26d17-531b-4116-b2dd-af2b98364930',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=126,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              '        # Users\n'
              '        viktor = db.new_user(\n'
              "            email='viktor@ferenczi.eu',\n"
              "            first_name='Viktor',\n"
              "            last_name='Ferenczi',\n"
              "            phone='1234567')\n"
              '        anna = db.new_user(\n'
              "            email='anna@cx.hu',\n"
              '            first_na')

Fragment(uuid='2c8ea7c0-e0aa-42d2-bb23-9e5b794b7647',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=126,
         depth=2,
         type='function',
         name='load_data',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              '        # Users\n'
              '        viktor = db.new_user(\n'
              "            email='viktor@ferenczi.eu',\n"
              "            first_name='Viktor',\n"
              "            last_name='Ferenczi',\n"
              "            phone='1234567')\n"
              '        anna = db.new_user(\n'
              "            email='anna@cx.hu',\n"
              '            first_na')

Fragment(uuid='5d79a415-2c56-423b-a007-d9d4f8844a1c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=130,
         depth=4,
         type='variable',
         name='viktor',
         text='viktor = db.new_user(\n'
              "            email='viktor@ferenczi.eu',\n"
              "            first_name='Viktor',\n"
              "            last_name='Ferenczi',\n"
              "            phone='1234567')")

Fragment(uuid='e93a57cc-88d7-4b24-ac7f-4b87eb620364',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=135,
         depth=4,
         type='variable',
         name='anna',
         text='anna = db.new_user(\n'
              "            email='anna@cx.hu',\n"
              "            first_name='Anna',\n"
              "            last_name='Szili',\n"
              "            phone='2345678')")

Fragment(uuid='da32ef97-2eda-472b-89a6-abca1811b1f1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=137,
         depth=0,
         type='module',
         name='',
         text="me='Anna',\n"
              "            last_name='Szili',\n"
              "            phone='2345678')\n"
              '        isi = db.new_user(\n'
              "            email='isi@cx.hu',\n"
              "            first_name='István',\n"
              "            last_name='Horváth')\n"
              '        annacska = db.new_user(\n'
              "            email='anna@ferenczi.eu',\n"
              "            first_name='Anna',\n"
              "            last_name='Ferenczi',\n"
              '            ')

Fragment(uuid='6f867643-639c-4715-b3da-e59ed2bc5dbb',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=137,
         depth=0,
         type='class',
         name='TestAbstraction',
         text="me='Anna',\n"
              "            last_name='Szili',\n"
              "            phone='2345678')\n"
              '        isi = db.new_user(\n'
              "            email='isi@cx.hu',\n"
              "            first_name='István',\n"
              "            last_name='Horváth')\n"
              '        annacska = db.new_user(\n'
              "            email='anna@ferenczi.eu',\n"
              "            first_name='Anna',\n"
              "            last_name='Ferenczi',\n"
              '            ')

Fragment(uuid='f06f8212-1e1c-4ada-82cd-85d714182c5f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=137,
         depth=2,
         type='function',
         name='load_data',
         text="me='Anna',\n"
              "            last_name='Szili',\n"
              "            phone='2345678')\n"
              '        isi = db.new_user(\n'
              "            email='isi@cx.hu',\n"
              "            first_name='István',\n"
              "            last_name='Horváth')\n"
              '        annacska = db.new_user(\n'
              "            email='anna@ferenczi.eu',\n"
              "            first_name='Anna',\n"
              "            last_name='Ferenczi',\n"
              '            ')

Fragment(uuid='dd865946-d657-449f-8025-a9554edb450a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=140,
         depth=4,
         type='variable',
         name='isi',
         text='isi = db.new_user(\n'
              "            email='isi@cx.hu',\n"
              "            first_name='István',\n"
              "            last_name='Horváth')")

Fragment(uuid='5e222f78-3387-4931-acf5-385d9c427d3a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=144,
         depth=4,
         type='variable',
         name='annacska',
         text='annacska = db.new_user(\n'
              "            email='anna@ferenczi.eu',\n"
              "            first_name='Anna',\n"
              "            last_name='Ferenczi',\n"
              "            phone='4567890')")

Fragment(uuid='24d25237-cbe1-4b7e-8427-c5ff9423b560',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=148,
         depth=0,
         type='module',
         name='',
         text="phone='4567890')\n"
              '        self.assertTrue(viktor.id is None)\n'
              '        db.add_user(viktor)\n'
              '        self.assertFalse(viktor.id is None)\n'
              '        db.add_user_list([anna, isi])\n'
              '        self.assertFalse(anna.id is None)\n'
              '        self.assertFalse(isi.id is None)\n'
              '        db.add_user_list([annacska])\n'
              '        self.assertFalse(annacska.id is None)\n'
              '      ')

Fragment(uuid='29bb461f-2465-4dbd-8d19-2b393649b014',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=148,
         depth=0,
         type='class',
         name='TestAbstraction',
         text="phone='4567890')\n"
              '        self.assertTrue(viktor.id is None)\n'
              '        db.add_user(viktor)\n'
              '        self.assertFalse(viktor.id is None)\n'
              '        db.add_user_list([anna, isi])\n'
              '        self.assertFalse(anna.id is None)\n'
              '        self.assertFalse(isi.id is None)\n'
              '        db.add_user_list([annacska])\n'
              '        self.assertFalse(annacska.id is None)\n'
              '      ')

Fragment(uuid='5246da65-cacb-416a-b30a-5e836f117c7e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=148,
         depth=2,
         type='function',
         name='load_data',
         text="phone='4567890')\n"
              '        self.assertTrue(viktor.id is None)\n'
              '        db.add_user(viktor)\n'
              '        self.assertFalse(viktor.id is None)\n'
              '        db.add_user_list([anna, isi])\n'
              '        self.assertFalse(anna.id is None)\n'
              '        self.assertFalse(isi.id is None)\n'
              '        db.add_user_list([annacska])\n'
              '        self.assertFalse(annacska.id is None)\n'
              '      ')

Fragment(uuid='e1b29b24-19fd-40c4-89b6-b431b612a019',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=157,
         depth=0,
         type='module',
         name='',
         text='  self.assertEqual(db.get_user_count(), 4)\n'
              '        db.add_user_list([])\n'
              '        self.assertEqual(db.get_user_count(), 4)\n'
              "        self.assertNotEqual(viktor, 'not a record')\n"
              '        self.assertNotEqual(viktor, anna)\n'
              '        self.assertNotEqual(viktor.id, anna.id)\n'
              '        self.assertNotEqual(viktor.id, isi.id)\n'
              '        self.assertNotEqual(vikto')

Fragment(uuid='aed7df04-7969-4c54-9e8d-8a7964254477',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=157,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='  self.assertEqual(db.get_user_count(), 4)\n'
              '        db.add_user_list([])\n'
              '        self.assertEqual(db.get_user_count(), 4)\n'
              "        self.assertNotEqual(viktor, 'not a record')\n"
              '        self.assertNotEqual(viktor, anna)\n'
              '        self.assertNotEqual(viktor.id, anna.id)\n'
              '        self.assertNotEqual(viktor.id, isi.id)\n'
              '        self.assertNotEqual(vikto')

Fragment(uuid='cc017af5-eb1f-4855-bb41-88c02384edc0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=157,
         depth=2,
         type='function',
         name='load_data',
         text='  self.assertEqual(db.get_user_count(), 4)\n'
              '        db.add_user_list([])\n'
              '        self.assertEqual(db.get_user_count(), 4)\n'
              "        self.assertNotEqual(viktor, 'not a record')\n"
              '        self.assertNotEqual(viktor, anna)\n'
              '        self.assertNotEqual(viktor.id, anna.id)\n'
              '        self.assertNotEqual(viktor.id, isi.id)\n'
              '        self.assertNotEqual(vikto')

Fragment(uuid='ecab79c2-8197-4e9d-acad-5e6db54afb96',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=164,
         depth=0,
         type='module',
         name='',
         text='r.id, annacska.id)\n'
              '        user_list = db.get_user_list()\n'
              '        self.assertEqual(len(user_list), db.get_user_count())\n'
              '\n'
              '        # Groups\n'
              '        admin = db.new_group(\n'
              "            slug='admin',\n"
              "            name='Admin')\n"
              '        provider = db.new_group(\n'
              "            slug='provider',\n"
              "            name='Service provider')\n"
              '        customer = db.new_group(\n'
              "            slug='customer',\n"
              "            name='Customer')\n"
              '        group_list = sorted([admin, provider, customer], '
              'key=lambda r: r.slug)\n'
              '        db.add_group_list(group_list)\n'
              '        self.assertEqual(len(group_list), '
              'db.get_group_count())\n'
              '        self.assertEqual(group_list, '
              'sorted(list(db.get_group_iter()), key=lambda r: r.slug))')

Fragment(uuid='5961ffd4-81ff-4403-9da2-96649e35dd1f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=164,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='r.id, annacska.id)\n'
              '        user_list = db.get_user_list()\n'
              '        self.assertEqual(len(user_list), db.get_user_count())\n'
              '\n'
              '        # Groups\n'
              '        admin = db.new_group(\n'
              "            slug='admin',\n"
              "            name='Admin')\n"
              '        provider = db.new_group(\n'
              "            slug='provider',\n"
              "            name='Service provider')\n"
              '        customer = db.new_group(\n'
              "            slug='customer',\n"
              "            name='Customer')\n"
              '        group_list = sorted([admin, provider, customer], '
              'key=lambda r: r.slug)\n'
              '        db.add_group_list(group_list)\n'
              '        self.assertEqual(len(group_list), '
              'db.get_group_count())\n'
              '        self.assertEqual(group_list, '
              'sorted(list(db.get_group_iter()), key=lambda r: r.slug))')

Fragment(uuid='5cc0f5b5-c6d6-41d6-a510-cdd6bc2d6eeb',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=164,
         depth=2,
         type='function',
         name='load_data',
         text='r.id, annacska.id)\n'
              '        user_list = db.get_user_list()\n'
              '        self.assertEqual(len(user_list), db.get_user_count())\n'
              '\n'
              '        # Groups\n'
              '        admin = db.new_group(\n'
              "            slug='admin',\n"
              "            name='Admin')\n"
              '        provider = db.new_group(\n'
              "            slug='provider',\n"
              "            name='Service provider')\n"
              '        customer = db.new_group(\n'
              "            slug='customer',\n"
              "            name='Customer')\n"
              '        group_list = sorted([admin, provider, customer], '
              'key=lambda r: r.slug)\n'
              '        db.add_group_list(group_list)\n'
              '        self.assertEqual(len(group_list), '
              'db.get_group_count())\n'
              '        self.assertEqual(group_list, '
              'sorted(list(db.get_group_iter()), key=lambda r: r.slug))')

Fragment(uuid='1b0c2d9b-532b-494c-87c1-0f60059a60da',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=165,
         depth=4,
         type='variable',
         name='user_list',
         text='user_list = db.get_user_list()')

Fragment(uuid='f06f98cb-75e3-4433-8209-b49e643a263b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=169,
         depth=4,
         type='variable',
         name='admin',
         text='admin = db.new_group(\n'
              "            slug='admin',\n"
              "            name='Admin')")

Fragment(uuid='e80e1c45-707b-47e3-8b70-76f2b19193a2',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=172,
         depth=4,
         type='variable',
         name='provider',
         text='provider = db.new_group(\n'
              "            slug='provider',\n"
              "            name='Service provider')")

Fragment(uuid='7af6a812-48e0-4282-93c2-05cf9b4e8756',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=175,
         depth=4,
         type='variable',
         name='customer',
         text='customer = db.new_group(\n'
              "            slug='customer',\n"
              "            name='Customer')")

Fragment(uuid='0d03bce9-826e-4e36-a0a9-856cad2acde6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=178,
         depth=4,
         type='variable',
         name='group_list',
         text='group_list = sorted([admin, provider, customer], key=lambda r: '
              'r.slug)')

Fragment(uuid='15feab80-d85f-41b6-890f-3ee74fa4fbb9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=181,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              '        # Associate users with groups\n'
              '        group_user_list = [\n'
              '            db.new_group_user(group=admin.id, user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=annacska.id),\n'
              '            db.new_group_user(group=customer.id, '
              'user=viktor.id),\n'
              '           ')

Fragment(uuid='83cbb77b-0e4f-48a7-bf57-67449983d0f6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=181,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '\n'
              '        # Associate users with groups\n'
              '        group_user_list = [\n'
              '            db.new_group_user(group=admin.id, user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=annacska.id),\n'
              '            db.new_group_user(group=customer.id, '
              'user=viktor.id),\n'
              '           ')

Fragment(uuid='baa09f71-67e0-4d87-916f-a37e3407eccb',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=181,
         depth=2,
         type='function',
         name='load_data',
         text='\n'
              '\n'
              '        # Associate users with groups\n'
              '        group_user_list = [\n'
              '            db.new_group_user(group=admin.id, user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=annacska.id),\n'
              '            db.new_group_user(group=customer.id, '
              'user=viktor.id),\n'
              '           ')

Fragment(uuid='1982ff36-6d3a-4bf2-9578-1407eaf539a6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=184,
         depth=4,
         type='variable',
         name='group_user_list',
         text='group_user_list = [\n'
              '            db.new_group_user(group=admin.id, user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=annacska.id),\n'
              '            db.new_group_user(group=customer.id, '
              'user=viktor.id),\n'
              '            db.new_group_user(group=customer.id, '
              'user=anna.id),\n'
              '            db.new_group_user(group=customer.id, user=isi.id)]')

Fragment(uuid='c5313d0c-696e-4f95-b8df-17018b5a95d7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=189,
         depth=0,
         type='module',
         name='',
         text=' db.new_group_user(group=customer.id, user=anna.id),\n'
              '            db.new_group_user(group=customer.id, user=isi.id)]\n'
              '        db.add_group_user_list(group_user_list)\n'
              '\n'
              '        # Verify data\n'
              '        group_user_id_list = set([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(len(group_user_list), '
              'len(group_user_id_list))\n')

Fragment(uuid='d4d1e11b-6ba6-4b40-a04e-4d98eafc32ba',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=189,
         depth=0,
         type='class',
         name='TestAbstraction',
         text=' db.new_group_user(group=customer.id, user=anna.id),\n'
              '            db.new_group_user(group=customer.id, user=isi.id)]\n'
              '        db.add_group_user_list(group_user_list)\n'
              '\n'
              '        # Verify data\n'
              '        group_user_id_list = set([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(len(group_user_list), '
              'len(group_user_id_list))\n')

Fragment(uuid='fae67272-fef7-4470-9c02-1d843dec8bca',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=189,
         depth=2,
         type='function',
         name='load_data',
         text=' db.new_group_user(group=customer.id, user=anna.id),\n'
              '            db.new_group_user(group=customer.id, user=isi.id)]\n'
              '        db.add_group_user_list(group_user_list)\n'
              '\n'
              '        # Verify data\n'
              '        group_user_id_list = set([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(len(group_user_list), '
              'len(group_user_id_list))\n')

Fragment(uuid='6497b7aa-338d-4f06-a57b-c180ccc92aa7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=194,
         depth=4,
         type='variable',
         name='group_user_id_list',
         text='group_user_id_list = set([group_user.id for group_user in '
              'group_user_list])')

Fragment(uuid='ccc9bc50-04af-4af7-bc6f-9571c9509ecb',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=196,
         depth=0,
         type='module',
         name='',
         text='        for group_user in db.get_group_user_list():\n'
              '            self.assertTrue(group_user.id in '
              'group_user_id_list)\n'
              '        self.assertEqual(len(group_user_list), '
              'db.get_group_user_count())\n'
              '        self.assertEqual(viktor, '
              "db.find_user(email='viktor@ferenczi.eu'))\n"
              '        self.assertEqual(anna, '
              "db.find_user(last_name='Szili'))\n"
              '\n'
              '        # Add products\n'
              "        hdd = db.new_product(name='hdd')\n"
              "        consulting = db.new_product(name='consulting')\n"
              '        db.add_product_list([hdd, consulting])\n'
              '\n'
              '        # Add two invoices\n')

Fragment(uuid='f437a3ed-d115-462e-83eb-cc88e6c15247',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=196,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        for group_user in db.get_group_user_list():\n'
              '            self.assertTrue(group_user.id in '
              'group_user_id_list)\n'
              '        self.assertEqual(len(group_user_list), '
              'db.get_group_user_count())\n'
              '        self.assertEqual(viktor, '
              "db.find_user(email='viktor@ferenczi.eu'))\n"
              '        self.assertEqual(anna, '
              "db.find_user(last_name='Szili'))\n"
              '\n'
              '        # Add products\n'
              "        hdd = db.new_product(name='hdd')\n"
              "        consulting = db.new_product(name='consulting')\n"
              '        db.add_product_list([hdd, consulting])\n'
              '\n'
              '        # Add two invoices\n')

Fragment(uuid='de05eff0-a4f0-4ff3-a60c-570a4d0aa379',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=196,
         depth=2,
         type='function',
         name='load_data',
         text='        for group_user in db.get_group_user_list():\n'
              '            self.assertTrue(group_user.id in '
              'group_user_id_list)\n'
              '        self.assertEqual(len(group_user_list), '
              'db.get_group_user_count())\n'
              '        self.assertEqual(viktor, '
              "db.find_user(email='viktor@ferenczi.eu'))\n"
              '        self.assertEqual(anna, '
              "db.find_user(last_name='Szili'))\n"
              '\n'
              '        # Add products\n'
              "        hdd = db.new_product(name='hdd')\n"
              "        consulting = db.new_product(name='consulting')\n"
              '        db.add_product_list([hdd, consulting])\n'
              '\n'
              '        # Add two invoices\n')

Fragment(uuid='afb6679e-7a90-4c0e-bcc4-d1d2f7ad6d1d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=203,
         depth=4,
         type='variable',
         name='hdd',
         text="hdd = db.new_product(name='hdd')")

Fragment(uuid='97c64acc-8dfe-4ccc-8c34-53f7a8c3ede7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=204,
         depth=4,
         type='variable',
         name='consulting',
         text="consulting = db.new_product(name='consulting')")

Fragment(uuid='a0ed4361-e01f-485a-8058-4e6c4ced977f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=208,
         depth=0,
         type='module',
         name='',
         text='        for m, customer in [(1, anna), (2, isi)]:\n'
              '            invoice = db.new_invoice(\n'
              "                serial='2010/%04d' % m,\n"
              '                seller=viktor.id,\n'
              '                customer=customer.id,\n'
              '                net_amount=4600 * m,\n'
              '                vat_amount=1150 * m,\n'
              '                gross_amount=5750 * m,\n'
              '                issued_date=datetime.date(2010, 3, 31),\n'
              '                due_date=datetime.date(2010, 4, 30))\n'
              '            db.add_invoice(invoice)\n'
              '            item1 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=hdd.id,\n'
              '                quantity=6 * m,\n'
              '    ')

Fragment(uuid='42c9c871-dd3d-4b3b-bbd3-4573073cf0f6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=208,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        for m, customer in [(1, anna), (2, isi)]:\n'
              '            invoice = db.new_invoice(\n'
              "                serial='2010/%04d' % m,\n"
              '                seller=viktor.id,\n'
              '                customer=customer.id,\n'
              '                net_amount=4600 * m,\n'
              '                vat_amount=1150 * m,\n'
              '                gross_amount=5750 * m,\n'
              '                issued_date=datetime.date(2010, 3, 31),\n'
              '                due_date=datetime.date(2010, 4, 30))\n'
              '            db.add_invoice(invoice)\n'
              '            item1 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=hdd.id,\n'
              '                quantity=6 * m,\n'
              '    ')

Fragment(uuid='ac5a6a36-7dc9-43bc-9753-c843b97650fc',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=208,
         depth=2,
         type='function',
         name='load_data',
         text='        for m, customer in [(1, anna), (2, isi)]:\n'
              '            invoice = db.new_invoice(\n'
              "                serial='2010/%04d' % m,\n"
              '                seller=viktor.id,\n'
              '                customer=customer.id,\n'
              '                net_amount=4600 * m,\n'
              '                vat_amount=1150 * m,\n'
              '                gross_amount=5750 * m,\n'
              '                issued_date=datetime.date(2010, 3, 31),\n'
              '                due_date=datetime.date(2010, 4, 30))\n'
              '            db.add_invoice(invoice)\n'
              '            item1 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=hdd.id,\n'
              '                quantity=6 * m,\n'
              '    ')

Fragment(uuid='83ceff70-5ccf-4adb-b0c1-81d28be6d1f1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=209,
         depth=6,
         type='variable',
         name='invoice',
         text='invoice = db.new_invoice(\n'
              "                serial='2010/%04d' % m,\n"
              '                seller=viktor.id,\n'
              '                customer=customer.id,\n'
              '                net_amount=4600 * m,\n'
              '                vat_amount=1150 * m,\n'
              '                gross_amount=5750 * m,\n'
              '                issued_date=datetime.date(2010, 3, 31),\n'
              '                due_date=datetime.date(2010, 4, 30))')

Fragment(uuid='1d0ad953-97cc-4624-87b7-69159bd44f15',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=219,
         depth=6,
         type='variable',
         name='item1',
         text='item1 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=hdd.id,\n'
              '                quantity=6 * m,\n'
              '                net_amount=600 * m,\n'
              '                vat_percent=2500 * m,\n'
              '                vat_amount=150 * m,\n'
              '                gross_amount=750 * m)')

Fragment(uuid='0dcf3fb7-feec-4672-a6ac-bcfc6b61b9b2',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=223,
         depth=0,
         type='module',
         name='',
         text='            net_amount=600 * m,\n'
              '                vat_percent=2500 * m,\n'
              '                vat_amount=150 * m,\n'
              '                gross_amount=750 * m)\n'
              '            item2 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=consulting.id,\n'
              '                quantity=20 * m,\n'
              '                first_day=datetime.date(2010, 4, 1),\n'
              '                last_day=datetime.date(2010, 4, 30),\n'
              '                net_amount=4000 * m,\n'
              '                vat_percent=25000 * m,\n'
              '                vat_amount=1000 * m,\n'
              '                gross_amount=5000 * m)\n'
              '            db.add_invoice_item_list([item1, item2])\n')

Fragment(uuid='4e11574c-bcde-4bd4-b2cc-e28b1aae1b94',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=223,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='            net_amount=600 * m,\n'
              '                vat_percent=2500 * m,\n'
              '                vat_amount=150 * m,\n'
              '                gross_amount=750 * m)\n'
              '            item2 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=consulting.id,\n'
              '                quantity=20 * m,\n'
              '                first_day=datetime.date(2010, 4, 1),\n'
              '                last_day=datetime.date(2010, 4, 30),\n'
              '                net_amount=4000 * m,\n'
              '                vat_percent=25000 * m,\n'
              '                vat_amount=1000 * m,\n'
              '                gross_amount=5000 * m)\n'
              '            db.add_invoice_item_list([item1, item2])\n')

Fragment(uuid='7b3eccec-2a5b-4097-8e39-aacd51573fe7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=223,
         depth=2,
         type='function',
         name='load_data',
         text='            net_amount=600 * m,\n'
              '                vat_percent=2500 * m,\n'
              '                vat_amount=150 * m,\n'
              '                gross_amount=750 * m)\n'
              '            item2 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=consulting.id,\n'
              '                quantity=20 * m,\n'
              '                first_day=datetime.date(2010, 4, 1),\n'
              '                last_day=datetime.date(2010, 4, 30),\n'
              '                net_amount=4000 * m,\n'
              '                vat_percent=25000 * m,\n'
              '                vat_amount=1000 * m,\n'
              '                gross_amount=5000 * m)\n'
              '            db.add_invoice_item_list([item1, item2])')

Fragment(uuid='fa587da3-b97a-479f-8d5b-23577cd57ef5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=227,
         depth=6,
         type='variable',
         name='item2',
         text='item2 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=consulting.id,\n'
              '                quantity=20 * m,\n'
              '                first_day=datetime.date(2010, 4, 1),\n'
              '                last_day=datetime.date(2010, 4, 30),\n'
              '                net_amount=4000 * m,\n'
              '                vat_percent=25000 * m,\n'
              '                vat_amount=1000 * m,\n'
              '                gross_amount=5000 * m)')

Fragment(uuid='cd6338bb-789e-4a67-8da6-b8bc94f46da8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=238,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def verify_data(self, db=None):\n'
              '        """ Do data verification\n'
              '        """\n')

Fragment(uuid='55f25ba2-b513-481f-8949-12292ca7e44b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=238,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def verify_data(self, db=None):\n'
              '        """ Do data verification\n'
              '        """\n')

Fragment(uuid='18fd5737-6bd6-4041-a8dd-1dad0443b82b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=239,
         depth=2,
         type='function',
         name='verify_data',
         text='def verify_data(self, db=None):\n'
              '        """ Do data verification\n'
              '        """\n')

Fragment(uuid='11e3d68d-e788-4f0a-8720-15afedef6200',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=242,
         depth=0,
         type='module',
         name='',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='2c4f7ac3-76c2-4f33-b9b5-cc0116c6af05',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=242,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='f44cc7e1-b286-4b24-bc81-91be4826c653',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=242,
         depth=2,
         type='function',
         name='verify_data',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='0800f0f5-7888-48f3-b964-33e5348646e5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=243,
         depth=6,
         type='variable',
         name='db',
         text='db = self.db')

Fragment(uuid='cee27729-8850-48f1-b65a-46ecf8fe6b21',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=244,
         depth=0,
         type='module',
         name='',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        viktor = db.find_user(email='viktor@ferenczi.eu')\n"
              '        self.assertFalse(viktor is None)\n'
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        self.assertFalse(anna is None)\n'
              '\n'
              '        viktor_groups = db.find_group_user_list(user=vi')

Fragment(uuid='2cb72dd8-e459-44d6-aba3-b1050157bd78',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=244,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        viktor = db.find_user(email='viktor@ferenczi.eu')\n"
              '        self.assertFalse(viktor is None)\n'
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        self.assertFalse(anna is None)\n'
              '\n'
              '        viktor_groups = db.find_group_user_list(user=vi')

Fragment(uuid='75900fa3-f3c7-4c09-9509-8bf457445483',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=244,
         depth=2,
         type='function',
         name='verify_data',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        viktor = db.find_user(email='viktor@ferenczi.eu')\n"
              '        self.assertFalse(viktor is None)\n'
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        self.assertFalse(anna is None)\n'
              '\n'
              '        viktor_groups = db.find_group_user_list(user=vi')

Fragment(uuid='8ce3e7df-35c3-4264-9930-67ebefd09fc9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=247,
         depth=4,
         type='variable',
         name='viktor',
         text="viktor = db.find_user(email='viktor@ferenczi.eu')")

Fragment(uuid='6893c7f4-298f-4885-9344-3462a8029913',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=249,
         depth=4,
         type='variable',
         name='anna',
         text="anna = db.find_user(email='anna@cx.hu')")

Fragment(uuid='49099137-b500-4da9-afd8-a0ce471dc3c1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=252,
         depth=0,
         type='module',
         name='',
         text='ktor.id)\n'
              '        self.assertEqual(len(viktor_groups), 3)\n'
              '\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 1)\n'
              '\n'
              '        get_result_list = db.get_user_list()\n'
              '        find_result_list = db.find_user_list()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n')

Fragment(uuid='fa2d3fc9-b4d0-4ea5-9b8a-eec3d0a36041',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=252,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='ktor.id)\n'
              '        self.assertEqual(len(viktor_groups), 3)\n'
              '\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 1)\n'
              '\n'
              '        get_result_list = db.get_user_list()\n'
              '        find_result_list = db.find_user_list()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n')

Fragment(uuid='e9c409b7-f6d3-4b61-8d28-0a5381f4d7c0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=252,
         depth=2,
         type='function',
         name='verify_data',
         text='ktor.id)\n'
              '        self.assertEqual(len(viktor_groups), 3)\n'
              '\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 1)\n'
              '\n'
              '        get_result_list = db.get_user_list()\n'
              '        find_result_list = db.find_user_list()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)')

Fragment(uuid='36923e19-ebf5-4f31-a8d6-ae6b57802ea7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=252,
         depth=4,
         type='variable',
         name='viktor_groups',
         text='viktor_groups = db.find_group_user_list(user=viktor.id)')

Fragment(uuid='24cf5500-1654-41fb-b897-42b46063d0d1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=255,
         depth=4,
         type='variable',
         name='anna_groups',
         text='anna_groups = db.find_group_user_list(user=anna.id)')

Fragment(uuid='b98e35ba-81bb-4252-8b40-8480c5c702de',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=258,
         depth=4,
         type='variable',
         name='get_result_list',
         text='get_result_list = db.get_user_list()')

Fragment(uuid='8f1d59b3-e8c4-40b3-bc6d-7e397fdb3eb7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=259,
         depth=4,
         type='variable',
         name='find_result_list',
         text='find_result_list = db.find_user_list()')

Fragment(uuid='67bf303c-0ce4-4bb6-b310-f7e816fc3816',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=261,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def modify_data(self, db=None):\n'
              '        """ Do data modification\n'
              '        """\n')

Fragment(uuid='d5f6dff3-4a40-463d-b928-764256210509',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=261,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def modify_data(self, db=None):\n'
              '        """ Do data modification\n'
              '        """\n')

Fragment(uuid='c5d09878-f779-484e-b1f0-82f2cdc8026b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=262,
         depth=2,
         type='function',
         name='modify_data',
         text='def modify_data(self, db=None):\n'
              '        """ Do data modification\n'
              '        """\n')

Fragment(uuid='ff855f0b-c02c-4e53-b3dd-3e314848f469',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=265,
         depth=0,
         type='module',
         name='',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='80307c88-edb0-4ceb-b85e-fb30e51fb7b0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=265,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='c47a3755-d8aa-49a3-aa88-235d90cb58a0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=265,
         depth=2,
         type='function',
         name='modify_data',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='4f1f22c6-a2f2-41c0-88fd-a4372cc9d0ee',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=266,
         depth=6,
         type='variable',
         name='db',
         text='db = self.db')

Fragment(uuid='9603f174-01b0-49c6-94ca-f84f29e94039',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=267,
         depth=0,
         type='module',
         name='',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        admin = db.find_group(slug='admin')\n"
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        group_membership = db.new_group_user(group=admin.id, '
              'user=anna.id)\n'
              '        db.add_group_user(group_membership)\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 2)\n'
              '\n'
              "        anna.email = 'wrong@email.address'\n"
              '        db.update_user(anna)\n'
              '\n'
              "        anna.email = 'szanna@pmgsz.hu'\n"
              '    ')

Fragment(uuid='603d0416-6669-4d41-a035-928424d80d6c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=267,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        admin = db.find_group(slug='admin')\n"
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        group_membership = db.new_group_user(group=admin.id, '
              'user=anna.id)\n'
              '        db.add_group_user(group_membership)\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 2)\n'
              '\n'
              "        anna.email = 'wrong@email.address'\n"
              '        db.update_user(anna)\n'
              '\n'
              "        anna.email = 'szanna@pmgsz.hu'\n"
              '    ')

Fragment(uuid='5ff4a019-26c1-46ed-90e3-b9bb000d8e6f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=267,
         depth=2,
         type='function',
         name='modify_data',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        admin = db.find_group(slug='admin')\n"
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        group_membership = db.new_group_user(group=admin.id, '
              'user=anna.id)\n'
              '        db.add_group_user(group_membership)\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 2)\n'
              '\n'
              "        anna.email = 'wrong@email.address'\n"
              '        db.update_user(anna)\n'
              '\n'
              "        anna.email = 'szanna@pmgsz.hu'\n"
              '    ')

Fragment(uuid='d4954273-b916-4eda-b3ae-97ac9e461d60',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=270,
         depth=4,
         type='variable',
         name='admin',
         text="admin = db.find_group(slug='admin')")

Fragment(uuid='b261c981-86ea-4a27-81c9-3171a087b7cf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=271,
         depth=4,
         type='variable',
         name='anna',
         text="anna = db.find_user(email='anna@cx.hu')")

Fragment(uuid='ea2e59fc-46d6-4821-b531-e08a19e96dae',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=272,
         depth=4,
         type='variable',
         name='group_membership',
         text='group_membership = db.new_group_user(group=admin.id, '
              'user=anna.id)')

Fragment(uuid='7052ae55-c285-4523-af55-c4799d103f97',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=274,
         depth=4,
         type='variable',
         name='anna_groups',
         text='anna_groups = db.find_group_user_list(user=anna.id)')

Fragment(uuid='a3ef3f8b-d49d-42e4-9461-436c0dbff52e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=277,
         depth=4,
         type='variable',
         name='anna.email',
         text="anna.email = 'wrong@email.address'")

Fragment(uuid='4612bc41-a7e1-449b-b7e3-ec5afc11b75a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=280,
         depth=4,
         type='variable',
         name='anna.email',
         text="anna.email = 'szanna@pmgsz.hu'")

Fragment(uuid='51ca95e2-e8c9-4011-8ce3-ee078e5a1487',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=281,
         depth=0,
         type='module',
         name='',
         text='    db.update_user(anna)\n'
              '\n'
              "        anna2 = db.find_user(last_name='Szili')\n"
              '        self.assertEqual(anna, anna2)\n'
              '        self.assertEqual(repr(anna), repr(anna2))\n'
              '        self.assertEqual(repr(anna), str(anna2))\n'
              '\n'
              '        group_user_count = db.get_group_user_count()\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '\n'
              '       ')

Fragment(uuid='eab887af-e67d-44e5-be74-283fefdb8019',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=281,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='    db.update_user(anna)\n'
              '\n'
              "        anna2 = db.find_user(last_name='Szili')\n"
              '        self.assertEqual(anna, anna2)\n'
              '        self.assertEqual(repr(anna), repr(anna2))\n'
              '        self.assertEqual(repr(anna), str(anna2))\n'
              '\n'
              '        group_user_count = db.get_group_user_count()\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '\n'
              '       ')

Fragment(uuid='8f332174-dfa1-453f-8ded-ebca5c3797e0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=281,
         depth=2,
         type='function',
         name='modify_data',
         text='    db.update_user(anna)\n'
              '\n'
              "        anna2 = db.find_user(last_name='Szili')\n"
              '        self.assertEqual(anna, anna2)\n'
              '        self.assertEqual(repr(anna), repr(anna2))\n'
              '        self.assertEqual(repr(anna), str(anna2))\n'
              '\n'
              '        group_user_count = db.get_group_user_count()\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '\n'
              '      ')

Fragment(uuid='a4b0c1d9-5045-4bb9-ba57-17ebc31f854e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=283,
         depth=4,
         type='variable',
         name='anna2',
         text="anna2 = db.find_user(last_name='Szili')")

Fragment(uuid='12f58e10-d774-4e85-9925-3011de963d7e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=288,
         depth=4,
         type='variable',
         name='group_user_count',
         text='group_user_count = db.get_group_user_count()')

Fragment(uuid='becdd7aa-8ee8-4947-b0b3-fac53bdec6b9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=294,
         depth=0,
         type='module',
         name='',
         text=' db.add_group_user(group_membership)\n'
              '\n'
              '        self.assertRaises(\n'
              '            db.IntegrityError,\n'
              '            db.add_group_user,\n'
              '            group_membership)\n'
              '        db.rollback()\n'
              '\n'
              '        user_list = db.get_user_list()\n'
              '        db.update_user_list(user_list)\n'
              '        db.update_user_list(user_list[:1])\n'
              '        db.update_user_list([])\n'
              '        db.rollback()\n'
              '\n'
              '        group_user_list = db.get_group_user_list()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0])\n'
              '        self.assertEqual(db.get_group_user_count(), len(g')

Fragment(uuid='30ab79c7-b60b-4729-8b24-1c1845f673d1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=294,
         depth=0,
         type='class',
         name='TestAbstraction',
         text=' db.add_group_user(group_membership)\n'
              '\n'
              '        self.assertRaises(\n'
              '            db.IntegrityError,\n'
              '            db.add_group_user,\n'
              '            group_membership)\n'
              '        db.rollback()\n'
              '\n'
              '        user_list = db.get_user_list()\n'
              '        db.update_user_list(user_list)\n'
              '        db.update_user_list(user_list[:1])\n'
              '        db.update_user_list([])\n'
              '        db.rollback()\n'
              '\n'
              '        group_user_list = db.get_group_user_list()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0])\n'
              '        self.assertEqual(db.get_group_user_count(), len(g')

Fragment(uuid='ff87d7fc-c613-4b7a-8324-984b688e9205',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=294,
         depth=2,
         type='function',
         name='modify_data',
         text='  db.add_group_user(group_membership)\n'
              '\n'
              '        self.assertRaises(\n'
              '            db.IntegrityError,\n'
              '            db.add_group_user,\n'
              '            group_membership)\n'
              '        db.rollback()\n'
              '\n'
              '        user_list = db.get_user_list()\n'
              '        db.update_user_list(user_list)\n'
              '        db.update_user_list(user_list[:1])\n'
              '        db.update_user_list([])\n'
              '        db.rollback()\n'
              '\n'
              '        group_user_list = db.get_group_user_list()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0])\n'
              '        self.assertEqual(db.get_group_user_count(), len(')

Fragment(uuid='80a0ad6d-7580-4a63-9cc4-738dd4d6f8b1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=302,
         depth=4,
         type='variable',
         name='user_list',
         text='user_list = db.get_user_list()')

Fragment(uuid='dd5c6a88-aeda-4822-a393-8b5754b277de',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=308,
         depth=4,
         type='variable',
         name='group_user_list',
         text='group_user_list = db.get_group_user_list()')

Fragment(uuid='ef0b60b2-5320-47c6-8ac6-eed86a8cd973',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=311,
         depth=0,
         type='module',
         name='',
         text='roup_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0].id)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list(group_user_list[:2])\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 2)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(db.get_group_user_count(), 0)\n'
              '        db.rollback()\n')

Fragment(uuid='a41f98d7-754a-43af-9032-f7eb76a7adbb',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=311,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='roup_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0].id)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list(group_user_list[:2])\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 2)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(db.get_group_user_count(), 0)\n'
              '        db.rollback()\n')

Fragment(uuid='6d218281-d2f4-4a03-ad20-8447bc469cbf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=311,
         depth=2,
         type='function',
         name='modify_data',
         text='group_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0].id)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list(group_user_list[:2])\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 2)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(db.get_group_user_count(), 0)\n'
              '        db.rollback()')

Fragment(uuid='2b87321a-0c12-4546-aec8-cfe7866ce57d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=325,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def do_failed_transaction(self):\n'
              '        try:\n'
              '            with self.db.transaction():\n'
              "                group_x = self.db.new_group(slug='x', "
              "name='y')\n"
              '                self.db.add_group(group_x)\n'
              '                raise ValueError()\n'
              '        except ValueError:\n'
              '            pass\n'
              '\n'
              "        self.assertTrue(self.db.find_group(slug='x') is None)\n")

Fragment(uuid='b29a8c8f-2c22-4e65-83a7-99c3e818906c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=325,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def do_failed_transaction(self):\n'
              '        try:\n'
              '            with self.db.transaction():\n'
              "                group_x = self.db.new_group(slug='x', "
              "name='y')\n"
              '                self.db.add_group(group_x)\n'
              '                raise ValueError()\n'
              '        except ValueError:\n'
              '            pass\n'
              '\n'
              "        self.assertTrue(self.db.find_group(slug='x') is None)\n")

Fragment(uuid='88a08b62-063a-4024-911a-3ae3d98743ae',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=326,
         depth=2,
         type='function',
         name='do_failed_transaction',
         text='def do_failed_transaction(self):\n'
              '        try:\n'
              '            with self.db.transaction():\n'
              "                group_x = self.db.new_group(slug='x', "
              "name='y')\n"
              '                self.db.add_group(group_x)\n'
              '                raise ValueError()\n'
              '        except ValueError:\n'
              '            pass\n'
              '\n'
              "        self.assertTrue(self.db.find_group(slug='x') is None)")

Fragment(uuid='b57784ca-22b8-42f4-9cac-a751f8d182cb',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=329,
         depth=8,
         type='variable',
         name='group_x',
         text="group_x = self.db.new_group(slug='x', name='y')")

Fragment(uuid='d3959344-d532-4b95-b8b2-35fd642de18a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=336,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_clauses_class(self):\n'
              '        """ Tests the Clauses class\n'
              '        """\n'
              '\n'
              '        Clauses = self.db.Clauses\n'
              '        ns = dict(clauses=clauses)\n'
              '\n'
              "        empty_clauses = Clauses(table_list=('tbl1',))\n"
              '        self.assertEqual(eval(repr(empty_clauses), ns), '
              'empty_clauses)\n'
              '\n'
              '        full_clauses = Clauses(\n'
              "            table_list=('tbl2',),\n"
              '            ')

Fragment(uuid='a7f3a7b2-6edc-4d11-ae72-95a3fcdbd8f9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=336,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_clauses_class(self):\n'
              '        """ Tests the Clauses class\n'
              '        """\n'
              '\n'
              '        Clauses = self.db.Clauses\n'
              '        ns = dict(clauses=clauses)\n'
              '\n'
              "        empty_clauses = Clauses(table_list=('tbl1',))\n"
              '        self.assertEqual(eval(repr(empty_clauses), ns), '
              'empty_clauses)\n'
              '\n'
              '        full_clauses = Clauses(\n'
              "            table_list=('tbl2',),\n"
              '            ')

Fragment(uuid='84647a6c-44f0-49eb-ad44-39b8ade5259c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=337,
         depth=2,
         type='function',
         name='test_clauses_class',
         text='def test_clauses_class(self):\n'
              '        """ Tests the Clauses class\n'
              '        """\n'
              '\n'
              '        Clauses = self.db.Clauses\n'
              '        ns = dict(clauses=clauses)\n'
              '\n'
              "        empty_clauses = Clauses(table_list=('tbl1',))\n"
              '        self.assertEqual(eval(repr(empty_clauses), ns), '
              'empty_clauses)\n'
              '\n'
              '        full_clauses = Clauses(\n'
              "            table_list=('tbl2',),\n"
              '            fie')

Fragment(uuid='6dd14d8b-145b-4974-b858-d9c73938351d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=341,
         depth=4,
         type='variable',
         name='Clauses',
         text='Clauses = self.db.Clauses')

Fragment(uuid='ee17a833-2fec-439f-b5de-c129a7981f42',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=342,
         depth=4,
         type='variable',
         name='ns',
         text='ns = dict(clauses=clauses)')

Fragment(uuid='8ff0a3f9-499e-4e48-99b4-687f5b1ef5e3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=344,
         depth=4,
         type='variable',
         name='empty_clauses',
         text="empty_clauses = Clauses(table_list=('tbl1',))")

Fragment(uuid='128941da-2804-4a9d-b671-81b466a7d219',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=347,
         depth=4,
         type='variable',
         name='full_clauses',
         text='full_clauses = Clauses(\n'
              "            table_list=('tbl2',),\n"
              "            field_list=('a', 'b', 'c', 'COUNT(*) AS cnt'),\n"
              '            where=\'"a" = ?\',\n'
              "            group_by=('d',),\n"
              "            having='cnt > 3',\n"
              "            order_by=('b', 'c'),\n"
              '            limit=10,\n'
              '            offset=20)')

Fragment(uuid='d7a18ce9-d908-401a-b1b0-bfdf174ce878',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=349,
         depth=0,
         type='module',
         name='',
         text="field_list=('a', 'b', 'c', 'COUNT(*) AS cnt'),\n"
              '            where=\'"a" = ?\',\n'
              "            group_by=('d',),\n"
              "            having='cnt > 3',\n"
              "            order_by=('b', 'c'),\n"
              '            limit=10,\n'
              '            offset=20)\n'
              '        self.assertEqual(eval(repr(full_clauses), ns), '
              'full_clauses)\n'
              '\n'
              '        empty_hash = hash(empty_clauses)\n'
              '        self.assertEqual(empty_has')

Fragment(uuid='18cdc368-142c-4903-b9a4-bf87ccb3f700',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=349,
         depth=0,
         type='class',
         name='TestAbstraction',
         text="field_list=('a', 'b', 'c', 'COUNT(*) AS cnt'),\n"
              '            where=\'"a" = ?\',\n'
              "            group_by=('d',),\n"
              "            having='cnt > 3',\n"
              "            order_by=('b', 'c'),\n"
              '            limit=10,\n'
              '            offset=20)\n'
              '        self.assertEqual(eval(repr(full_clauses), ns), '
              'full_clauses)\n'
              '\n'
              '        empty_hash = hash(empty_clauses)\n'
              '        self.assertEqual(empty_has')

Fragment(uuid='0f9c65e9-1585-4f53-9021-ed8a86a1f348',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=349,
         depth=2,
         type='function',
         name='test_clauses_class',
         text="ld_list=('a', 'b', 'c', 'COUNT(*) AS cnt'),\n"
              '            where=\'"a" = ?\',\n'
              "            group_by=('d',),\n"
              "            having='cnt > 3',\n"
              "            order_by=('b', 'c'),\n"
              '            limit=10,\n'
              '            offset=20)\n'
              '        self.assertEqual(eval(repr(full_clauses), ns), '
              'full_clauses)\n'
              '\n'
              '        empty_hash = hash(empty_clauses)\n'
              '        self.assertEqual(empty_hash,')

Fragment(uuid='ca79cc46-661d-407e-babb-f93d65388de5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=358,
         depth=4,
         type='variable',
         name='empty_hash',
         text='empty_hash = hash(empty_clauses)')

Fragment(uuid='2a423f42-3328-428c-b44a-98af067dbac1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=359,
         depth=0,
         type='module',
         name='',
         text='h, hash(empty_clauses))\n'
              '        self.assertEqual(empty_clauses, empty_clauses)\n'
              '\n'
              '        full_hash = hash(full_clauses)\n'
              '        self.assertEqual(full_clauses, full_clauses)\n'
              '        self.assertEqual(full_hash, hash(full_clauses))\n'
              '\n'
              "        self.assertNotEqual(empty_clauses, 'something else')\n"
              '        self.assertNotEqual(empty_clauses, full_clauses)\n'
              '        sel')

Fragment(uuid='85194fc9-4688-47a0-b80b-0565434a5a3b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=359,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='h, hash(empty_clauses))\n'
              '        self.assertEqual(empty_clauses, empty_clauses)\n'
              '\n'
              '        full_hash = hash(full_clauses)\n'
              '        self.assertEqual(full_clauses, full_clauses)\n'
              '        self.assertEqual(full_hash, hash(full_clauses))\n'
              '\n'
              "        self.assertNotEqual(empty_clauses, 'something else')\n"
              '        self.assertNotEqual(empty_clauses, full_clauses)\n'
              '        sel')

Fragment(uuid='c34cf2d2-c436-45d6-877c-d8e6ed8d7d1d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=359,
         depth=2,
         type='function',
         name='test_clauses_class',
         text=' hash(empty_clauses))\n'
              '        self.assertEqual(empty_clauses, empty_clauses)\n'
              '\n'
              '        full_hash = hash(full_clauses)\n'
              '        self.assertEqual(full_clauses, full_clauses)\n'
              '        self.assertEqual(full_hash, hash(full_clauses))\n'
              '\n'
              "        self.assertNotEqual(empty_clauses, 'something else')\n"
              '        self.assertNotEqual(empty_clauses, full_clauses)\n'
              '        sel')

Fragment(uuid='81340d9b-5ad3-4b49-8c19-498f47fb565f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=362,
         depth=4,
         type='variable',
         name='full_hash',
         text='full_hash = hash(full_clauses)')

Fragment(uuid='bd3dd2ad-3756-4b22-8d65-47a022ee681d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=368,
         depth=0,
         type='module',
         name='',
         text='f.assertNotEqual(empty_hash, full_hash)  # Probably and should '
              'be\n'
              '\n'
              '        clauses_cache = {}\n'
              '        clauses_cache[empty_clauses] = repr(empty_clauses)\n'
              '        self.assertEqual(clauses_cache[empty_clauses], '
              'str(empty_clauses))\n'
              '        clauses_cache[full_clauses] = repr(full_clauses)\n'
              '        self.assertEqual(clauses_cache[full_clauses], '
              'str(full_clauses))\n')

Fragment(uuid='238f2098-139a-4d5b-ba46-448253a4be5a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=368,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='f.assertNotEqual(empty_hash, full_hash)  # Probably and should '
              'be\n'
              '\n'
              '        clauses_cache = {}\n'
              '        clauses_cache[empty_clauses] = repr(empty_clauses)\n'
              '        self.assertEqual(clauses_cache[empty_clauses], '
              'str(empty_clauses))\n'
              '        clauses_cache[full_clauses] = repr(full_clauses)\n'
              '        self.assertEqual(clauses_cache[full_clauses], '
              'str(full_clauses))\n')

Fragment(uuid='580c7a18-0469-414d-a68b-0ee52f4acef9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=368,
         depth=2,
         type='function',
         name='test_clauses_class',
         text='f.assertNotEqual(empty_hash, full_hash)  # Probably and should '
              'be\n'
              '\n'
              '        clauses_cache = {}\n'
              '        clauses_cache[empty_clauses] = repr(empty_clauses)\n'
              '        self.assertEqual(clauses_cache[empty_clauses], '
              'str(empty_clauses))\n'
              '        clauses_cache[full_clauses] = repr(full_clauses)\n'
              '        self.assertEqual(clauses_cache[full_clauses], '
              'str(full_clauses))')

Fragment(uuid='7759281e-112f-46b7-8241-edecddba26d8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=370,
         depth=4,
         type='variable',
         name='clauses_cache',
         text='clauses_cache = {}')

Fragment(uuid='4670ce21-a031-43c5-b425-0474456920e7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=371,
         depth=4,
         type='variable',
         name='clauses_cache[empty_clauses]',
         text='clauses_cache[empty_clauses] = repr(empty_clauses)')

Fragment(uuid='c3b42f79-3016-4e6d-be7f-952cad967d01',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=373,
         depth=4,
         type='variable',
         name='clauses_cache[full_clauses]',
         text='clauses_cache[full_clauses] = repr(full_clauses)')

Fragment(uuid='44d6f854-26bf-4514-a875-b226fa72dfce',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=375,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_random_id_selection(self):\n'
              '        """ Tests whether colliding random IDs are properly '
              'replaced\n'
              '        """\n'
              '\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # Use a very narrow random ID range for the tests\n'
              '        original_range = constants.DATABASE_ID_RANGE\n'
              '        constants.DATABASE_ID_RANGE = (1, 10)\n'
              '        try:\n'
              '            group_list = [\n'
              "                db.new_group(slug='g%d' % n, name='G%d' % n)\n"
              '                for n in range(*constants.DATABASE_ID_RANGE)]\n'
              '\n'
              '            # Add all ten possible records multiple times\n'
              '            for n in range(10):\n'
              '                # Add ony by one\n')

Fragment(uuid='a4ed05d2-fe41-4655-8acf-116bc328aa5f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=375,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_random_id_selection(self):\n'
              '        """ Tests whether colliding random IDs are properly '
              'replaced\n'
              '        """\n'
              '\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # Use a very narrow random ID range for the tests\n'
              '        original_range = constants.DATABASE_ID_RANGE\n'
              '        constants.DATABASE_ID_RANGE = (1, 10)\n'
              '        try:\n'
              '            group_list = [\n'
              "                db.new_group(slug='g%d' % n, name='G%d' % n)\n"
              '                for n in range(*constants.DATABASE_ID_RANGE)]\n'
              '\n'
              '            # Add all ten possible records multiple times\n'
              '            for n in range(10):\n'
              '                # Add ony by one\n')

Fragment(uuid='84d131bc-4953-4c63-8786-a3c98e794f0a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=376,
         depth=2,
         type='function',
         name='test_random_id_selection',
         text='def test_random_id_selection(self):\n'
              '        """ Tests whether colliding random IDs are properly '
              'replaced\n'
              '        """\n'
              '\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # Use a very narrow random ID range for the tests\n'
              '        original_range = constants.DATABASE_ID_RANGE\n'
              '        constants.DATABASE_ID_RANGE = (1, 10)\n'
              '        try:\n'
              '            group_list = [\n'
              "                db.new_group(slug='g%d' % n, name='G%d' % n)\n"
              '                for n in range(*constants.DATABASE_ID_RANGE)]\n'
              '\n'
              '            # Add all ten possible records multiple times\n'
              '            for n in range(10):\n'
              '                # Add ony by one\n')

Fragment(uuid='464c9e58-400f-4f49-84de-c21da1eec639',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=380,
         depth=4,
         type='variable',
         name='db',
         text='db = self.db')

Fragment(uuid='4662a5e2-ed51-4505-8300-08441f70a98d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=384,
         depth=4,
         type='variable',
         name='original_range',
         text='original_range = constants.DATABASE_ID_RANGE')

Fragment(uuid='4523dfdf-1ca3-445e-99d6-5baad392e59b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=385,
         depth=4,
         type='variable',
         name='constants.DATABASE_ID_RANGE',
         text='constants.DATABASE_ID_RANGE = (1, 10)')

Fragment(uuid='f7817530-9e3d-4649-aab0-914d3406bf22',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=387,
         depth=6,
         type='variable',
         name='group_list',
         text='group_list = [\n'
              "                db.new_group(slug='g%d' % n, name='G%d' % n)\n"
              '                for n in range(*constants.DATABASE_ID_RANGE)]')

Fragment(uuid='c7961acc-381b-4e77-921c-25aa161bd2a4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=394,
         depth=0,
         type='module',
         name='',
         text='                with db.transaction():\n'
              '                    for group in group_list:\n'
              '                        db.add_group(group)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '                # Add as a list\n')

Fragment(uuid='6dbe440a-5480-48d9-b74a-8f3e72070163',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=394,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='                with db.transaction():\n'
              '                    for group in group_list:\n'
              '                        db.add_group(group)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '                # Add as a list\n')

Fragment(uuid='6d49b417-ca8a-4809-a2a3-b257e3cd1d7b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=394,
         depth=2,
         type='function',
         name='test_random_id_selection',
         text='                with db.transaction():\n'
              '                    for group in group_list:\n'
              '                        db.add_group(group)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '                # Add as a list\n')

Fragment(uuid='8c932950-df05-4cc8-a4b7-8bc0aefe9a15',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=400,
         depth=0,
         type='module',
         name='',
         text='                with db.transaction():\n'
              '                    db.add_group_list(group_list)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '            # Add them again\n')

Fragment(uuid='c6bb1bff-24e7-4a1e-9953-6355dd9a2bb8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=400,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='                with db.transaction():\n'
              '                    db.add_group_list(group_list)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '            # Add them again\n')

Fragment(uuid='66636cfd-fba8-4c8d-bac9-f4c538069a14',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=400,
         depth=2,
         type='function',
         name='test_random_id_selection',
         text='                with db.transaction():\n'
              '                    db.add_group_list(group_list)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '            # Add them again\n')

Fragment(uuid='591e1d47-dd32-4c46-b67d-aa86dff7f061',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=405,
         depth=0,
         type='module',
         name='',
         text='            with db.transaction():\n'
              '                db.add_group_list(group_list)\n'
              '\n'
              '            # Try to add one more, it should result in an '
              'IntegrityError all the time\n'
              "            group = db.new_group(slug='gX', name='GX')\n"
              '            for n in range(10):\n')

Fragment(uuid='93b4a38a-8c4e-46cb-96d3-18d072817531',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=405,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='            with db.transaction():\n'
              '                db.add_group_list(group_list)\n'
              '\n'
              '            # Try to add one more, it should result in an '
              'IntegrityError all the time\n'
              "            group = db.new_group(slug='gX', name='GX')\n"
              '            for n in range(10):\n')

Fragment(uuid='c9a6f8a8-645f-419b-8156-389c2e6f4961',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=405,
         depth=2,
         type='function',
         name='test_random_id_selection',
         text='            with db.transaction():\n'
              '                db.add_group_list(group_list)\n'
              '\n'
              '            # Try to add one more, it should result in an '
              'IntegrityError all the time\n'
              "            group = db.new_group(slug='gX', name='GX')\n"
              '            for n in range(10):\n')

Fragment(uuid='f266a5be-13a4-47e0-9397-acf6cd0c2b46',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=409,
         depth=6,
         type='variable',
         name='group',
         text="group = db.new_group(slug='gX', name='GX')")

Fragment(uuid='115ab62b-dabe-4772-af20-98481d446b44',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=411,
         depth=0,
         type='module',
         name='',
         text='                with db.transaction():\n'
              '                    self.assertRaises(db.IntegrityError, '
              'db.add_group, group)\n'
              '\n'
              '            # Verify the detection function\n'
              '            try:\n'
              '                db.add_group_list([group, group])\n'
              '            except db.IntegrityError as reason:\n'
              '                '
              'self.assertTrue(db.is_primary_key_conflict(reason))\n'
              '            else:\n'
              '                self.assertTrue(False)\n'
              '            db.rollback()\n'
              '\n'
              '            # Verify that other unique constraint conflicts are '
              'not misdetected as an ID conflict\n')

Fragment(uuid='a98fd171-aa9b-4936-b351-6449fff19405',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=411,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='                with db.transaction():\n'
              '                    self.assertRaises(db.IntegrityError, '
              'db.add_group, group)\n'
              '\n'
              '            # Verify the detection function\n'
              '            try:\n'
              '                db.add_group_list([group, group])\n'
              '            except db.IntegrityError as reason:\n'
              '                '
              'self.assertTrue(db.is_primary_key_conflict(reason))\n'
              '            else:\n'
              '                self.assertTrue(False)\n'
              '            db.rollback()\n'
              '\n'
              '            # Verify that other unique constraint conflicts are '
              'not misdetected as an ID conflict\n')

Fragment(uuid='69181bf9-1fa4-40fb-9f19-77a83e76f7ef',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=411,
         depth=2,
         type='function',
         name='test_random_id_selection',
         text='                with db.transaction():\n'
              '                    self.assertRaises(db.IntegrityError, '
              'db.add_group, group)\n'
              '\n'
              '            # Verify the detection function\n'
              '            try:\n'
              '                db.add_group_list([group, group])\n'
              '            except db.IntegrityError as reason:\n'
              '                '
              'self.assertTrue(db.is_primary_key_conflict(reason))\n'
              '            else:\n'
              '                self.assertTrue(False)\n'
              '            db.rollback()\n'
              '\n'
              '            # Verify that other unique constraint conflicts are '
              'not misdetected as an ID conflict\n')

Fragment(uuid='12ac1a8f-3043-4ca3-8df7-8cbf3295f201',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=424,
         depth=0,
         type='module',
         name='',
         text='            with db.transaction():\n'
              '                # Reserve a single ID for the new record\n'
              '                db.delete_group(group_list[0])\n')

Fragment(uuid='702a1bd7-fb90-4168-a727-d604d93984a8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=424,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='            with db.transaction():\n'
              '                # Reserve a single ID for the new record\n'
              '                db.delete_group(group_list[0])\n')

Fragment(uuid='b5643f34-e497-4183-a0a3-68e62ee4b7fe',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=424,
         depth=2,
         type='function',
         name='test_random_id_selection',
         text='            with db.transaction():\n'
              '                # Reserve a single ID for the new record\n'
              '                db.delete_group(group_list[0])\n')

Fragment(uuid='2285eb25-3586-4bc7-a2b8-b78eabb2012a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=427,
         depth=0,
         type='module',
         name='',
         text='            with db.transaction():\n'
              '                try:\n'
              "                    # Conflicting group name, but there's a "
              'free ID\n'
              '                    db.add_group(group_list[1])\n'
              '                except db.IntegrityError as reason:\n'
              '                    self.assertTrue(not '
              'db.is_primary_key_conflict(reason))\n'
              '                    db.rollback()\n'
              '                else:\n'
              '                    self.assertTrue(False)\n'
              '        finally:\n'
              '            constants.DATABASE_ID_RANGE = (1, 11)\n')

Fragment(uuid='0515909b-1bec-4274-a9ad-2f1125f9075e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=427,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='            with db.transaction():\n'
              '                try:\n'
              "                    # Conflicting group name, but there's a "
              'free ID\n'
              '                    db.add_group(group_list[1])\n'
              '                except db.IntegrityError as reason:\n'
              '                    self.assertTrue(not '
              'db.is_primary_key_conflict(reason))\n'
              '                    db.rollback()\n'
              '                else:\n'
              '                    self.assertTrue(False)\n'
              '        finally:\n'
              '            constants.DATABASE_ID_RANGE = (1, 11)\n')

Fragment(uuid='645c9fa9-b10b-4459-b196-7df72405e829',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=427,
         depth=2,
         type='function',
         name='test_random_id_selection',
         text='            with db.transaction():\n'
              '                try:\n'
              "                    # Conflicting group name, but there's a "
              'free ID\n'
              '                    db.add_group(group_list[1])\n'
              '                except db.IntegrityError as reason:\n'
              '                    self.assertTrue(not '
              'db.is_primary_key_conflict(reason))\n'
              '                    db.rollback()\n'
              '                else:\n'
              '                    self.assertTrue(False)\n'
              '        finally:\n'
              '            constants.DATABASE_ID_RANGE = (1, 11)')

Fragment(uuid='eeafcc8c-fc5c-4229-9db6-726dbde8bd8f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=437,
         depth=7,
         type='variable',
         name='constants.DATABASE_ID_RANGE',
         text='constants.DATABASE_ID_RANGE = (1, 11)')

Fragment(uuid='491c876b-fd0a-4504-9abb-7cc02845e85f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=438,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_user_contact_query(self):\n'
              '        """ Test the UserContact query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='5bfd8fd6-e10a-46f1-8589-96a38106a349',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=438,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_user_contact_query(self):\n'
              '        """ Test the UserContact query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='6fddcd3f-35d6-4571-85de-689c9b011b8a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=439,
         depth=2,
         type='function',
         name='test_user_contact_query',
         text='def test_user_contact_query(self):\n'
              '        """ Test the UserContact query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='dadbadcd-743b-4187-a279-ae651d083528',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=442,
         depth=4,
         type='variable',
         name='db',
         text='db = self.db')

Fragment(uuid='58ddf9d2-4d70-4dab-b016-67b39c57b1e0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=444,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        self.assertEqual(db.query_user_contact_count(), 4)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone=None), 1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_ne=None), '
              '3)\n'
              "        self.assertEqual(db.query_user_contact_count(phone=''), "
              '0)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone='1234567'), "
              '1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_in=()), 0)\n'
              ' ')

Fragment(uuid='7c431326-e2e5-4987-a263-ff130d9025a1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=444,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        self.assertEqual(db.query_user_contact_count(), 4)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone=None), 1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_ne=None), '
              '3)\n'
              "        self.assertEqual(db.query_user_contact_count(phone=''), "
              '0)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone='1234567'), "
              '1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_in=()), 0)\n'
              ' ')

Fragment(uuid='7db7e5db-6f03-40ea-ad6e-6ecd54b1fac4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=444,
         depth=2,
         type='function',
         name='test_user_contact_query',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        self.assertEqual(db.query_user_contact_count(), 4)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone=None), 1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_ne=None), '
              '3)\n'
              "        self.assertEqual(db.query_user_contact_count(phone=''), "
              '0)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone='1234567'), "
              '1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_in=()), 0)\n'
              ' ')

Fragment(uuid='1f2e474d-769c-4966-8a0b-f9d539805a08',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=454,
         depth=0,
         type='module',
         name='',
         text='       '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567',)), "
              '1)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=['1234567', "
              "'2345678']), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567', "
              "'2345678')), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_not_in=['1234567']), "
              '2)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_not_in=[]), '
              '4)\n'
              '        # TODO: Add tests for all the other operators here\n')

Fragment(uuid='c03ad969-d072-47ec-b28b-323d0c58aa3e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=454,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='       '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567',)), "
              '1)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=['1234567', "
              "'2345678']), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567', "
              "'2345678')), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_not_in=['1234567']), "
              '2)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_not_in=[]), '
              '4)\n'
              '        # TODO: Add tests for all the other operators here\n')

Fragment(uuid='8762c528-c037-4d7a-9bf1-ccf26abf763f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=454,
         depth=2,
         type='function',
         name='test_user_contact_query',
         text='       '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567',)), "
              '1)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=['1234567', "
              "'2345678']), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567', "
              "'2345678')), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_not_in=['1234567']), "
              '2)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_not_in=[]), '
              '4)\n'
              '        # TODO: Add tests for all the other operators here')

Fragment(uuid='6f995017-53c8-4fe9-8d27-aa8e58947c6e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=460,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_product_sale_query(self):\n'
              '        """ Tests the ProductSale query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='67e48b37-83d2-4494-ac78-16c8114ba3b6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=460,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_product_sale_query(self):\n'
              '        """ Tests the ProductSale query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='83659b1c-132f-44c4-aa6f-f706d8c7d393',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=461,
         depth=2,
         type='function',
         name='test_product_sale_query',
         text='def test_product_sale_query(self):\n'
              '        """ Tests the ProductSale query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='be488054-3b13-4516-8e5d-84d4256e2487',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=464,
         depth=4,
         type='variable',
         name='db',
         text='db = self.db')

Fragment(uuid='de830017-78dc-4041-ac9b-59c91bf7398b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=466,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        product_sale_list = db.query_product_sale_list()\n'
              '        product_sale_list.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        product_sale_list2 = '
              'list(db.query_product_sale_iter())\n'
              '        product_sale_list2.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        self.assertEqual(product_sale_list, '
              'product_sale_list2)\n'
              '\n'
              '        self.assertEqual(len(product_sale_list), 2)\n'
              '        self.assertEqual(db.query_product_sale_count(), 2)\n'
              '\n'
              '        bar_sales, foo_sales = product_sale_list\n'
              '\n'
              "        self.assertEqual(bar_sales.product_name, 'consulting')\n"
              "        self.assertEqual(foo_sales.product_name, 'hdd')\n")

Fragment(uuid='80c06d3e-cad3-4a9a-af0a-3ec79d90c889',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=466,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        product_sale_list = db.query_product_sale_list()\n'
              '        product_sale_list.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        product_sale_list2 = '
              'list(db.query_product_sale_iter())\n'
              '        product_sale_list2.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        self.assertEqual(product_sale_list, '
              'product_sale_list2)\n'
              '\n'
              '        self.assertEqual(len(product_sale_list), 2)\n'
              '        self.assertEqual(db.query_product_sale_count(), 2)\n'
              '\n'
              '        bar_sales, foo_sales = product_sale_list\n'
              '\n'
              "        self.assertEqual(bar_sales.product_name, 'consulting')\n"
              "        self.assertEqual(foo_sales.product_name, 'hdd')\n")

Fragment(uuid='af908569-4178-4023-8282-66a74218c8b4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=466,
         depth=2,
         type='function',
         name='test_product_sale_query',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        product_sale_list = db.query_product_sale_list()\n'
              '        product_sale_list.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        product_sale_list2 = '
              'list(db.query_product_sale_iter())\n'
              '        product_sale_list2.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        self.assertEqual(product_sale_list, '
              'product_sale_list2)\n'
              '\n'
              '        self.assertEqual(len(product_sale_list), 2)\n'
              '        self.assertEqual(db.query_product_sale_count(), 2)\n'
              '\n'
              '        bar_sales, foo_sales = product_sale_list\n'
              '\n'
              "        self.assertEqual(bar_sales.product_name, 'consulting')\n"
              "        self.assertEqual(foo_sales.product_name, 'hdd')")

Fragment(uuid='bf832ea0-7331-4ca7-bf70-45c95ff6a197',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=470,
         depth=4,
         type='variable',
         name='product_sale_list',
         text='product_sale_list = db.query_product_sale_list()')

Fragment(uuid='7b9ba947-bfd3-43a5-905c-577ca3b2ef0e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=473,
         depth=4,
         type='variable',
         name='product_sale_list2',
         text='product_sale_list2 = list(db.query_product_sale_iter())')

Fragment(uuid='9d833670-488c-4397-9823-bc968578a9d0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=481,
         depth=4,
         type='variable',
         name='bar_sales,',
         text='bar_sales, foo_sales = product_sale_list')

Fragment(uuid='13020180-91dd-4f7f-b562-31549d4acf5d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=485,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_triggers(self):\n'
              '        """ Tests whether the triggers are working\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # After insert or update trigger\n')

Fragment(uuid='cbe1d37c-34b0-497f-90d6-b1db5c5b8e0d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=485,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_triggers(self):\n'
              '        """ Tests whether the triggers are working\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # After insert or update trigger\n')

Fragment(uuid='6416c52b-cbeb-40cd-aba8-b6243298ea36',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=486,
         depth=2,
         type='function',
         name='test_triggers',
         text='def test_triggers(self):\n'
              '        """ Tests whether the triggers are working\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # After insert or update trigger\n')

Fragment(uuid='0a125c10-440a-49ae-9cdd-29ca891454fe',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=489,
         depth=4,
         type='variable',
         name='db',
         text='db = self.db')

Fragment(uuid='a47fae02-3321-4c02-ae8f-0a67eb69e979',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=493,
         depth=0,
         type='module',
         name='',
         text='        with db.transaction():\n'
              '            # Add a product\n'
              "            hdd = db.new_product(name='hdd')\n"
              '            self.assertTrue(hdd.last_modified is None)\n'
              '            db.add_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is filled '
              'in\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            created = hdd.last_modified\n'
              '            self.assertTrue(created')

Fragment(uuid='d8cdfea9-bdc5-44e0-82d9-b9d19463cc8c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=493,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        with db.transaction():\n'
              '            # Add a product\n'
              "            hdd = db.new_product(name='hdd')\n"
              '            self.assertTrue(hdd.last_modified is None)\n'
              '            db.add_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is filled '
              'in\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            created = hdd.last_modified\n'
              '            self.assertTrue(created')

Fragment(uuid='5a9cfade-286b-475f-a7ec-a680ab90f0d8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=493,
         depth=2,
         type='function',
         name='test_triggers',
         text='        with db.transaction():\n'
              '            # Add a product\n'
              "            hdd = db.new_product(name='hdd')\n"
              '            self.assertTrue(hdd.last_modified is None)\n'
              '            db.add_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is filled '
              'in\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            created = hdd.last_modified\n'
              '            self.assertTrue(created)\n'
              '\n'
              '            # Modify the product\n'
              "            hdd.model = 'Samsung'\n"
              '            hdd.last_modified = created - '
              'datetime.timedelta(days=1)\n'
              '            db.update_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is updated\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            self.assertTrue(hdd.last_modified >= created)\n'
              '\n'
              '        # TODO: Test more triggers')

Fragment(uuid='38aa8104-3d97-475f-9a2a-9409b7247f7c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=495,
         depth=6,
         type='variable',
         name='hdd',
         text="hdd = db.new_product(name='hdd')")

Fragment(uuid='2ea49187-7b03-4c98-b375-ff23d4b54e97',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=500,
         depth=6,
         type='variable',
         name='hdd',
         text='hdd = db.get_product(hdd.id)')

Fragment(uuid='3bfe98db-38b7-4489-aa4d-17c8cccdfd4a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=501,
         depth=6,
         type='variable',
         name='created',
         text='created = hdd.last_modified')

Fragment(uuid='bb6a090c-16bb-4a76-b37a-9099b849ae24',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=502,
         depth=0,
         type='module',
         name='',
         text=')\n'
              '\n'
              '            # Modify the product\n'
              "            hdd.model = 'Samsung'\n"
              '            hdd.last_modified = created - '
              'datetime.timedelta(days=1)\n'
              '            db.update_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is updated\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            self.assertTrue(hdd.last_modified >= created)\n'
              '\n'
              '        # TODO: Test more triggers\n')

Fragment(uuid='8cb279eb-c2c5-4d3d-8bec-f43ac34daf37',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=502,
         depth=0,
         type='class',
         name='TestAbstraction',
         text=')\n'
              '\n'
              '            # Modify the product\n'
              "            hdd.model = 'Samsung'\n"
              '            hdd.last_modified = created - '
              'datetime.timedelta(days=1)\n'
              '            db.update_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is updated\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            self.assertTrue(hdd.last_modified >= created)\n'
              '\n'
              '        # TODO: Test more triggers\n')

Fragment(uuid='6f736575-f835-4075-9afa-a1af66efe8bc',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=505,
         depth=6,
         type='variable',
         name='hdd.model',
         text="hdd.model = 'Samsung'")

Fragment(uuid='eb38be1d-ca0f-4b7b-a297-facb2cca8101',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=506,
         depth=6,
         type='variable',
         name='hdd.last_modified',
         text='hdd.last_modified = created - datetime.timedelta(days=1)')

Fragment(uuid='d1f35343-8ed6-4850-9e36-c82e0ec6d695',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=510,
         depth=6,
         type='variable',
         name='hdd',
         text='hdd = db.get_product(hdd.id)')

Fragment(uuid='7cd470e8-785b-40e8-b4b8-fe37c97b37f6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=514,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_full_text_search(self):\n'
              '        """ Tests full text search index\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='b4ac0967-bac9-4499-b577-6dce09f2fb71',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=514,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_full_text_search(self):\n'
              '        """ Tests full text search index\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='95e16edb-1f9c-42be-b597-288eb9e41328',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=515,
         depth=2,
         type='function',
         name='test_full_text_search',
         text='def test_full_text_search(self):\n'
              '        """ Tests full text search index\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='19e63186-e1e8-4c73-9008-8e6e88e0502c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=518,
         depth=4,
         type='variable',
         name='db',
         text='db = self.db')

Fragment(uuid='7e37d3f8-e0de-4119-948f-2646f7b347f7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=520,
         depth=0,
         type='module',
         name='',
         text='\n        with db.transaction():\n            self.load_data()\n')

Fragment(uuid='40434408-39e9-4e1e-a56f-f12c5cddb9da',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=520,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n        with db.transaction():\n            self.load_data()\n')

Fragment(uuid='7ebcf5c2-653c-4c07-84a2-c84af9124b50',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=520,
         depth=2,
         type='function',
         name='test_full_text_search',
         text='\n        with db.transaction():\n            self.load_data()\n')

Fragment(uuid='aaf80444-4ce4-4a56-a53a-7d32d4bdbf42',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=523,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = '
              "db.find_user_list(full_text_search='viktor:*')\n"
              '        self.assertEqual(len(user_list), 1)\n'
              "        self.assertEqual(user_list[0].first_name, 'Viktor')\n")

Fragment(uuid='930612e4-66a3-46eb-82bf-c873b368c3eb',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=523,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = '
              "db.find_user_list(full_text_search='viktor:*')\n"
              '        self.assertEqual(len(user_list), 1)\n'
              "        self.assertEqual(user_list[0].first_name, 'Viktor')\n")

Fragment(uuid='73fdc354-e410-422c-8fcc-4f6dde55537d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=523,
         depth=2,
         type='function',
         name='test_full_text_search',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = '
              "db.find_user_list(full_text_search='viktor:*')\n"
              '        self.assertEqual(len(user_list), 1)\n'
              "        self.assertEqual(user_list[0].first_name, 'Viktor')\n")

Fragment(uuid='55c45d22-f608-4953-8745-617116d41b46',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=525,
         depth=6,
         type='variable',
         name='user_list',
         text="user_list = db.find_user_list(full_text_search='viktor:*')")

Fragment(uuid='070f4676-63de-4735-bc9b-89f68d38f0aa',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=528,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = db.find_user_list(\n'
              "                full_text_search='ferenczi', "
              "order_by=('first_name', 'last_name'))\n"
              '        self.assertEqual(len(user_list), 2)\n'
              "        self.assertEqual(user_list[0].first_name, 'Anna')\n"
              "        self.assertEqual(user_list[1].first_name, 'Viktor')\n")

Fragment(uuid='0c3fefc3-00a1-469a-b541-c9508690ce3c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=528,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = db.find_user_list(\n'
              "                full_text_search='ferenczi', "
              "order_by=('first_name', 'last_name'))\n"
              '        self.assertEqual(len(user_list), 2)\n'
              "        self.assertEqual(user_list[0].first_name, 'Anna')\n"
              "        self.assertEqual(user_list[1].first_name, 'Viktor')\n")

Fragment(uuid='42342497-a56b-4960-9e48-f41c8a4ff0cb',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=528,
         depth=2,
         type='function',
         name='test_full_text_search',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = db.find_user_list(\n'
              "                full_text_search='ferenczi', "
              "order_by=('first_name', 'last_name'))\n"
              '        self.assertEqual(len(user_list), 2)\n'
              "        self.assertEqual(user_list[0].first_name, 'Anna')\n"
              "        self.assertEqual(user_list[1].first_name, 'Viktor')")

Fragment(uuid='91c10a5a-f7a0-425a-b3c5-3ca0e7b2d6f0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=530,
         depth=6,
         type='variable',
         name='user_list',
         text='user_list = db.find_user_list(\n'
              "                full_text_search='ferenczi', "
              "order_by=('first_name', 'last_name'))")

Fragment(uuid='9ca3421b-6207-4a7f-b337-a0d933c50d65',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=535,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_repr_str(self):\n'
              '        """ Tests whether all the objects can be printed\n'
              '        """\n'
              '        obj_list = (\n'
              '            self.db,\n'
              '            self.abstraction.TestDatabase,\n'
              '            model.User,\n'
              '            model.Product,\n'
              '            model.ProductSale)\n'
              '        for obj in obj_list:\n'
              '            for name in dir(obj):\n'
              "                if name.startswith('__'):\n"
              '                    continue\n'
              '                value = getattr(obj, name)\n'
              '                self.assertTrue(repr(value))\n'
              "                self.assertTrue(':' + str(value))\n")

Fragment(uuid='9232faec-a426-4c15-886d-a1196c56d9a6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=535,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_repr_str(self):\n'
              '        """ Tests whether all the objects can be printed\n'
              '        """\n'
              '        obj_list = (\n'
              '            self.db,\n'
              '            self.abstraction.TestDatabase,\n'
              '            model.User,\n'
              '            model.Product,\n'
              '            model.ProductSale)\n'
              '        for obj in obj_list:\n'
              '            for name in dir(obj):\n'
              "                if name.startswith('__'):\n"
              '                    continue\n'
              '                value = getattr(obj, name)\n'
              '                self.assertTrue(repr(value))\n'
              "                self.assertTrue(':' + str(value))\n")

Fragment(uuid='c509c1da-51b2-4600-b60d-cbf1217f4d99',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=536,
         depth=2,
         type='function',
         name='test_repr_str',
         text='def test_repr_str(self):\n'
              '        """ Tests whether all the objects can be printed\n'
              '        """\n'
              '        obj_list = (\n'
              '            self.db,\n'
              '            self.abstraction.TestDatabase,\n'
              '            model.User,\n'
              '            model.Product,\n'
              '            model.ProductSale)\n'
              '        for obj in obj_list:\n'
              '            for name in dir(obj):\n'
              "                if name.startswith('__'):\n"
              '                    continue\n'
              '                value = getattr(obj, name)\n'
              '                self.assertTrue(repr(value))\n'
              "                self.assertTrue(':' + str(value))")

Fragment(uuid='d9690d5e-6863-4511-b9b5-a1236c2bef16',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=539,
         depth=4,
         type='variable',
         name='obj_list',
         text='obj_list = (\n'
              '            self.db,\n'
              '            self.abstraction.TestDatabase,\n'
              '            model.User,\n'
              '            model.Product,\n'
              '            model.ProductSale)')

Fragment(uuid='847e1137-28e7-4cbf-8817-9e4c0537830f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=549,
         depth=8,
         type='variable',
         name='value',
         text='value = getattr(obj, name)')

Fragment(uuid='0b37a9b0-2dd6-48e2-8796-dde83941bf03',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=552,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_tuple_dict(self):\n'
              '        """ Tests whether the field values can be acquired\n'
              '        """\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        for product in self.db.get_product_iter():\n'
              '            break\n'
              '        assert isinstance(product, '
              'self.abstraction.ProductRecord)\n'
              '\n'
              '        field_dict = product.dict\n'
              '        field_tuple = product.tuple\n'
              '        self.assertEqual(len(field_dict), len(field_tuple))\n'
              '        self.assertEqual(field_tuple, tuple(field_dict[name] '
              'for name in product._column_name_list))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(*field_tuple))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(**field_dict))\n')

Fragment(uuid='775d861d-fee6-44b1-bbfd-d7cd85b332aa',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=552,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_tuple_dict(self):\n'
              '        """ Tests whether the field values can be acquired\n'
              '        """\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        for product in self.db.get_product_iter():\n'
              '            break\n'
              '        assert isinstance(product, '
              'self.abstraction.ProductRecord)\n'
              '\n'
              '        field_dict = product.dict\n'
              '        field_tuple = product.tuple\n'
              '        self.assertEqual(len(field_dict), len(field_tuple))\n'
              '        self.assertEqual(field_tuple, tuple(field_dict[name] '
              'for name in product._column_name_list))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(*field_tuple))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(**field_dict))\n')

Fragment(uuid='fc6268b6-8226-40ff-a027-df1167d5e16e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=553,
         depth=2,
         type='function',
         name='test_tuple_dict',
         text='def test_tuple_dict(self):\n'
              '        """ Tests whether the field values can be acquired\n'
              '        """\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        for product in self.db.get_product_iter():\n'
              '            break\n'
              '        assert isinstance(product, '
              'self.abstraction.ProductRecord)\n'
              '\n'
              '        field_dict = product.dict\n'
              '        field_tuple = product.tuple\n'
              '        self.assertEqual(len(field_dict), len(field_tuple))\n'
              '        self.assertEqual(field_tuple, tuple(field_dict[name] '
              'for name in product._column_name_list))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(*field_tuple))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(**field_dict))')

Fragment(uuid='278c95cd-8e46-4a7b-9600-128460fb823f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=563,
         depth=4,
         type='variable',
         name='field_dict',
         text='field_dict = product.dict')

Fragment(uuid='d970fb46-0bb9-4453-9bff-c4c7e198655c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=564,
         depth=4,
         type='variable',
         name='field_tuple',
         text='field_tuple = product.tuple')

Fragment(uuid='993082b4-c265-47f4-99e8-704195072e14',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=569,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_order_by(self):\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('+first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, find_result_l')

Fragment(uuid='d86b9670-8a9e-4171-a490-98fe469383da',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=569,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_order_by(self):\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('+first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, find_result_l')

Fragment(uuid='98d3bb1f-722d-4831-b080-a50f7954309b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=570,
         depth=2,
         type='function',
         name='test_order_by',
         text='def test_order_by(self):\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('+first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, find_result_lis')

Fragment(uuid='ca729297-08b9-410c-9467-15924e177f5d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=572,
         depth=4,
         type='variable',
         name='get_result_list',
         text='get_result_list = '
              "self.db.get_user_list(order_by=('first_name',))")

Fragment(uuid='b5c3cd03-5882-4c5f-81a7-a120e2735ffe',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=573,
         depth=4,
         type='variable',
         name='find_result_list',
         text='find_result_list = '
              "self.db.find_user_list(order_by=('first_name',))")

Fragment(uuid='5e945a50-1541-492e-bf47-583412db714c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=576,
         depth=4,
         type='variable',
         name='get_result_list',
         text='get_result_list = '
              "self.db.get_user_list(order_by=('+first_name',))")

Fragment(uuid='63610f88-4c0f-400c-ad39-31c81e1dcc8b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=577,
         depth=4,
         type='variable',
         name='find_result_list',
         text='find_result_list = '
              "self.db.find_user_list(order_by=('+first_name',))")

Fragment(uuid='4b771772-c1fa-4aef-abab-fc8e89ab7084',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=578,
         depth=0,
         type='module',
         name='',
         text='ist)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('-first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+id',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-id',))\n"
              '        find_result_list.reverse()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n')

Fragment(uuid='dc840c53-0ebe-4bc2-87a7-0365b4241cd7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=578,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='ist)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('-first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+id',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-id',))\n"
              '        find_result_list.reverse()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n')

Fragment(uuid='42ff4534-1051-4afa-a3ce-309c4d3ed644',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=578,
         depth=2,
         type='function',
         name='test_order_by',
         text='t)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('-first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+id',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-id',))\n"
              '        find_result_list.reverse()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)')

Fragment(uuid='53ac301c-ede5-438c-82fc-69e1ed153d0f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=580,
         depth=4,
         type='variable',
         name='get_result_list',
         text='get_result_list = '
              "self.db.get_user_list(order_by=('-first_name',))")

Fragment(uuid='1024e135-a9b4-4ba0-b668-64d4d95db46b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=581,
         depth=4,
         type='variable',
         name='find_result_list',
         text='find_result_list = '
              "self.db.find_user_list(order_by=('-first_name',))")

Fragment(uuid='82558163-a653-4565-a296-b169541bdc03',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=584,
         depth=4,
         type='variable',
         name='get_result_list',
         text="get_result_list = self.db.get_user_list(order_by=('+id',))")

Fragment(uuid='055a50d7-89e1-4f80-b3ea-5542d79856f9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=585,
         depth=4,
         type='variable',
         name='find_result_list',
         text="find_result_list = self.db.find_user_list(order_by=('-id',))")

Fragment(uuid='3a439ca9-fba0-4b62-bdb0-b089708dd8dc',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=588,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_class_formatting(self):\n'
              '\n'
              '        code = model.TestDatabaseModel.pretty_format_class()\n'
              '        namespace = {}\n'
              '        exec(code, namespace, namespace)\n'
              '        database_model_class = '
              "namespace.get('TestDatabaseModel')\n"
              '        self.assertTrue(issubclass(database_model_class, '
              'model.database.Database))\n')

Fragment(uuid='89f1b261-63d2-4a1a-8b82-0c2f1708dbc6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=588,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_class_formatting(self):\n'
              '\n'
              '        code = model.TestDatabaseModel.pretty_format_class()\n'
              '        namespace = {}\n'
              '        exec(code, namespace, namespace)\n'
              '        database_model_class = '
              "namespace.get('TestDatabaseModel')\n"
              '        self.assertTrue(issubclass(database_model_class, '
              'model.database.Database))\n')

Fragment(uuid='8bf89ee2-2363-447f-afec-85188f40607e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=589,
         depth=2,
         type='function',
         name='test_class_formatting',
         text='def test_class_formatting(self):\n'
              '\n'
              '        code = model.TestDatabaseModel.pretty_format_class()\n'
              '        namespace = {}\n'
              '        exec(code, namespace, namespace)\n'
              '        database_model_class = '
              "namespace.get('TestDatabaseModel')\n"
              '        self.assertTrue(issubclass(database_model_class, '
              'model.database.Database))\n')

Fragment(uuid='720fbc60-12e9-46f6-ad2f-6818baf9b33c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=591,
         depth=4,
         type='variable',
         name='code',
         text='code = model.TestDatabaseModel.pretty_format_class()')

Fragment(uuid='614aa453-05b9-46a8-99ea-53982ddcfa9e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=592,
         depth=4,
         type='variable',
         name='namespace',
         text='namespace = {}')

Fragment(uuid='6db73a9b-0ece-4940-8933-49da76811ce9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=594,
         depth=4,
         type='variable',
         name='database_model_class',
         text="database_model_class = namespace.get('TestDatabaseModel')")

Fragment(uuid='41016166-2c69-43b3-bbd0-44168f04a9e1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=596,
         depth=0,
         type='module',
         name='',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            old_source = module_file.read()\n'
              '\n'
              '        '
              'model.generate(database_model_class=database_model_class)\n')

Fragment(uuid='c27b5f1e-c251-4441-9e68-fb999a37b751',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=596,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            old_source = module_file.read()\n'
              '\n'
              '        '
              'model.generate(database_model_class=database_model_class)\n')

Fragment(uuid='3215b654-14f4-482c-8c41-b085b92409ac',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=596,
         depth=2,
         type='function',
         name='test_class_formatting',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            old_source = module_file.read()\n'
              '\n'
              '        '
              'model.generate(database_model_class=database_model_class)\n')

Fragment(uuid='6b52aac5-cb8b-403a-9ebc-4f48ac6a0b45',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=598,
         depth=6,
         type='variable',
         name='old_source',
         text='old_source = module_file.read()')

Fragment(uuid='b989369b-81db-4b19-8af2-59fe50d55c5a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=601,
         depth=0,
         type='module',
         name='',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            new_source = module_file.read()\n'
              '\n'
              '        # Ignore the module docstring, since that contains a '
              'timestamp\n'
              "        RX_TIMESTAMP = re.compile('\\d{4}-\\d{2}-\\d{2} "
              "\\d{2}:\\d{2}:\\d{2}')\n"
              "        old_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'old_source)[1]\n'
              "        new_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'new_source)[1]\n'
              '\n'
              '        self.assertEqual(old_source, new_source)\n')

Fragment(uuid='d255777d-58a6-470e-9c6a-d424f2c6e09d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=601,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            new_source = module_file.read()\n'
              '\n'
              '        # Ignore the module docstring, since that contains a '
              'timestamp\n'
              "        RX_TIMESTAMP = re.compile('\\d{4}-\\d{2}-\\d{2} "
              "\\d{2}:\\d{2}:\\d{2}')\n"
              "        old_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'old_source)[1]\n'
              "        new_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'new_source)[1]\n'
              '\n'
              '        self.assertEqual(old_source, new_source)\n')

Fragment(uuid='939bce5c-cf52-4099-bc5d-142c8eb7bac6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=601,
         depth=2,
         type='function',
         name='test_class_formatting',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            new_source = module_file.read()\n'
              '\n'
              '        # Ignore the module docstring, since that contains a '
              'timestamp\n'
              "        RX_TIMESTAMP = re.compile('\\d{4}-\\d{2}-\\d{2} "
              "\\d{2}:\\d{2}:\\d{2}')\n"
              "        old_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'old_source)[1]\n'
              "        new_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'new_source)[1]\n'
              '\n'
              '        self.assertEqual(old_source, new_source)')

Fragment(uuid='82eb4477-8354-4658-85cf-558d80c346e3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=603,
         depth=6,
         type='variable',
         name='new_source',
         text='new_source = module_file.read()')

Fragment(uuid='784dea5e-532b-4f52-8222-93a946252fe6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=606,
         depth=4,
         type='variable',
         name='RX_TIMESTAMP',
         text="RX_TIMESTAMP = re.compile('\\d{4}-\\d{2}-\\d{2} "
              "\\d{2}:\\d{2}:\\d{2}')")

Fragment(uuid='afb7d144-ba9c-4c28-9a09-55aaa3be78fc',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=607,
         depth=4,
         type='variable',
         name='old_source',
         text="old_source = RX_TIMESTAMP.subn('<TIMESTAMP>', old_source)[1]")

Fragment(uuid='00f7868b-7456-4f96-8e2d-cfc783e5941c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=608,
         depth=4,
         type='variable',
         name='new_source',
         text="new_source = RX_TIMESTAMP.subn('<TIMESTAMP>', new_source)[1]")

Fragment(uuid='c8d127ab-affa-452f-b6f6-d9e671a721a1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=611,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_inspection(self):\n'
              '\n'
              '        from dblayer.backend.postgresql import inspector\n'
              '\n'
              '        dsn = test_constants.TEST_DSN\n'
              '        \n'
              '        db = inspector.DatabaseInspector()\n'
              "        database_class = db.inspect(dsn, 'InspectedDatabase')\n"
              '        self.assertTrue(issubclass(database_class, '
              'dblayer.model.database.Database))\n'
              '\n'
              '        source = database_class.pretty_format_class()\n'
              '\n'
              '        inspected_model_path = os.path.join(MODEL_DIR, '
              "'inspected_model.py')\n")

Fragment(uuid='b069211d-60d7-4e68-a115-6fc0c7b3f208',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=611,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_inspection(self):\n'
              '\n'
              '        from dblayer.backend.postgresql import inspector\n'
              '\n'
              '        dsn = test_constants.TEST_DSN\n'
              '        \n'
              '        db = inspector.DatabaseInspector()\n'
              "        database_class = db.inspect(dsn, 'InspectedDatabase')\n"
              '        self.assertTrue(issubclass(database_class, '
              'dblayer.model.database.Database))\n'
              '\n'
              '        source = database_class.pretty_format_class()\n'
              '\n'
              '        inspected_model_path = os.path.join(MODEL_DIR, '
              "'inspected_model.py')\n")

Fragment(uuid='e7672095-ba8f-48fd-b392-508091fb1ac2',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=612,
         depth=2,
         type='function',
         name='test_inspection',
         text='def test_inspection(self):\n'
              '\n'
              '        from dblayer.backend.postgresql import inspector\n'
              '\n'
              '        dsn = test_constants.TEST_DSN\n'
              '        \n'
              '        db = inspector.DatabaseInspector()\n'
              "        database_class = db.inspect(dsn, 'InspectedDatabase')\n"
              '        self.assertTrue(issubclass(database_class, '
              'dblayer.model.database.Database))\n'
              '\n'
              '        source = database_class.pretty_format_class()\n'
              '\n'
              '        inspected_model_path = os.path.join(MODEL_DIR, '
              "'inspected_model.py')\n")

Fragment(uuid='61f5e269-2fd7-4953-a5de-283b4323bed9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=614,
         depth=4,
         type='dependency',
         name='',
         text='from dblayer.backend.postgresql import inspector')

Fragment(uuid='74bf35a0-506b-42d1-919c-80392d8f4f3f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=616,
         depth=4,
         type='variable',
         name='dsn',
         text='dsn = test_constants.TEST_DSN')

Fragment(uuid='c027e7b6-adbe-45b0-97ef-d6032b2e6427',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=618,
         depth=4,
         type='variable',
         name='db',
         text='db = inspector.DatabaseInspector()')

Fragment(uuid='c1fd931c-f627-40ed-b0b9-511a7b452a85',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=619,
         depth=4,
         type='variable',
         name='database_class',
         text="database_class = db.inspect(dsn, 'InspectedDatabase')")

Fragment(uuid='028fa70e-ba68-4690-9047-63095d1d98a8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=622,
         depth=4,
         type='variable',
         name='source',
         text='source = database_class.pretty_format_class()')

Fragment(uuid='db06c0df-7fc4-4f67-a0e8-e0484b175a00',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=624,
         depth=4,
         type='variable',
         name='inspected_model_path',
         text='inspected_model_path = os.path.join(MODEL_DIR, '
              "'inspected_model.py')")

Fragment(uuid='ba09ea2b-2c62-4400-8b95-bca78e86096b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=625,
         depth=0,
         type='module',
         name='',
         text="        with open(inspected_model_path, 'wt') as "
              'inspected_model_file:\n'
              '            inspected_model_file.write(source)\n'
              '\n'
              '        from dblayer.test import inspected_model\n'
              '\n'
              '        inspected_database = inspected_model.InspectedDatabase\n'
              '        self.assertTrue(inspected_database, '
              'dblayer.model.database.Database)\n'
              '\n'
              '        for table in inspected_database._table_list:\n'
              '            self.assertIsInstance(table, '
              'dblayer.model.table.Table)\n'
              '\n'
              '        model.generate(\n'
              "            module_path='inspected_abstraction.py',\n"
              '            database_model_class=inspected_database,\n'
              "            abstraction_class_name='InspectedDatabase')\n"
              '\n'
              '        from dblayer.test import inspected_abstraction\n'
              '\n'
              '        db = inspected_abstraction.InspectedDatabase()\n')

Fragment(uuid='ba6bedfb-d7b0-4c66-95b2-127345d75551',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=625,
         depth=0,
         type='class',
         name='TestAbstraction',
         text="        with open(inspected_model_path, 'wt') as "
              'inspected_model_file:\n'
              '            inspected_model_file.write(source)\n'
              '\n'
              '        from dblayer.test import inspected_model\n'
              '\n'
              '        inspected_database = inspected_model.InspectedDatabase\n'
              '        self.assertTrue(inspected_database, '
              'dblayer.model.database.Database)\n'
              '\n'
              '        for table in inspected_database._table_list:\n'
              '            self.assertIsInstance(table, '
              'dblayer.model.table.Table)\n'
              '\n'
              '        model.generate(\n'
              "            module_path='inspected_abstraction.py',\n"
              '            database_model_class=inspected_database,\n'
              "            abstraction_class_name='InspectedDatabase')\n"
              '\n'
              '        from dblayer.test import inspected_abstraction\n'
              '\n'
              '        db = inspected_abstraction.InspectedDatabase()\n')

Fragment(uuid='50b957b4-9f89-4698-ada0-74463f2610bd',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=625,
         depth=2,
         type='function',
         name='test_inspection',
         text="        with open(inspected_model_path, 'wt') as "
              'inspected_model_file:\n'
              '            inspected_model_file.write(source)\n'
              '\n'
              '        from dblayer.test import inspected_model\n'
              '\n'
              '        inspected_database = inspected_model.InspectedDatabase\n'
              '        self.assertTrue(inspected_database, '
              'dblayer.model.database.Database)\n'
              '\n'
              '        for table in inspected_database._table_list:\n'
              '            self.assertIsInstance(table, '
              'dblayer.model.table.Table)\n'
              '\n'
              '        model.generate(\n'
              "            module_path='inspected_abstraction.py',\n"
              '            database_model_class=inspected_database,\n'
              "            abstraction_class_name='InspectedDatabase')\n"
              '\n'
              '        from dblayer.test import inspected_abstraction\n'
              '\n'
              '        db = inspected_abstraction.InspectedDatabase()\n')

Fragment(uuid='a05982db-4395-431b-b700-7290778a7e96',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=628,
         depth=4,
         type='dependency',
         name='',
         text='from dblayer.test import inspected_model')

Fragment(uuid='a1316718-1a68-4420-a7d1-3f8e7614fa31',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=630,
         depth=4,
         type='variable',
         name='inspected_database',
         text='inspected_database = inspected_model.InspectedDatabase')

Fragment(uuid='e1848eb2-cd65-4d05-868c-a9a61f0f6304',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=641,
         depth=4,
         type='dependency',
         name='',
         text='from dblayer.test import inspected_abstraction')

Fragment(uuid='a9d7e121-a70a-45a3-a1a7-511d9ce4ae2a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=643,
         depth=4,
         type='variable',
         name='db',
         text='db = inspected_abstraction.InspectedDatabase()')

Fragment(uuid='e32c79b7-77a6-47d1-8461-1ecf8f148675',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=644,
         depth=0,
         type='module',
         name='',
         text='        with db.session(dsn):\n')

Fragment(uuid='937c325b-5d35-4d6a-8f0e-d75bf8b12e58',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=644,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='        with db.session(dsn):\n')

Fragment(uuid='936751e8-0e94-4abf-9482-7ab845d42f5d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=644,
         depth=2,
         type='function',
         name='test_inspection',
         text='        with db.session(dsn):\n')

Fragment(uuid='a0e7238f-e259-4122-9ea0-ef99595089a1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=645,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            with db.transaction():\n'
              '                self.load_data(db)\n')

Fragment(uuid='b5b33477-7c6c-4697-8821-dbcf59ce1811',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=645,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='\n'
              '            with db.transaction():\n'
              '                self.load_data(db)\n')

Fragment(uuid='209b5a80-91b0-41c4-aaa9-cc028726ed63',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=645,
         depth=2,
         type='function',
         name='test_inspection',
         text='\n'
              '            with db.transaction():\n'
              '                self.load_data(db)\n')

Fragment(uuid='98f546f1-b41a-4319-81af-3bd3067d6f9f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=648,
         depth=0,
         type='module',
         name='',
         text='            with db.transaction():\n'
              '                self.verify_data(db)\n')

Fragment(uuid='7c342c62-2116-40ad-8f7e-8f6f6c000f25',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=648,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='            with db.transaction():\n'
              '                self.verify_data(db)\n')

Fragment(uuid='2ba9b951-25a4-4df1-a22f-2522a1b3d80c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=648,
         depth=2,
         type='function',
         name='test_inspection',
         text='            with db.transaction():\n'
              '                self.verify_data(db)\n')

Fragment(uuid='e6cc1250-aecc-4c97-b50d-011ca610a61f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=650,
         depth=0,
         type='module',
         name='',
         text='            with db.transaction():\n'
              '                self.modify_data(db)\n'
              '\n'
              '            for table in inspected_database._table_list:\n')

Fragment(uuid='7f5adad8-5d6e-4f41-977d-3c9556df55ba',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=650,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='            with db.transaction():\n'
              '                self.modify_data(db)\n'
              '\n'
              '            for table in inspected_database._table_list:\n')

Fragment(uuid='0c156cc4-aa26-4ee1-ad08-625def6f0191',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=650,
         depth=2,
         type='function',
         name='test_inspection',
         text='            with db.transaction():\n'
              '                self.modify_data(db)\n'
              '\n'
              '            for table in inspected_database._table_list:\n')

Fragment(uuid='8969c123-1096-4e4e-abc8-ab6f13ae0744',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=654,
         depth=0,
         type='module',
         name='',
         text='                with db.transaction():\n'
              '                    assert isinstance(table, '
              'dblayer.model.table.Table)\n'
              "                    fn_get = getattr(db, 'get_%s' % "
              'table._table_name)\n'
              "                    fn_find = getattr(db, 'find_%s' % "
              'table._table_name)\n'
              "                    fn_update = getattr(db, 'update_%s' % "
              'table._table_name, None)\n'
              '                    record1 = fn_find()\n'
              '                    if record1 is None:\n'
              '                        continue\n'
              '                    fn_update(record1)\n'
              '                    record2 = fn_get(id=record1.id)\n'
              "                    if hasattr(record2, 'last_modified'):\n"
              '                        record2.last_modified = '
              'record1.last_modified\n'
              '                    self.assertEqual(record1, record2)\n')

Fragment(uuid='58244921-46d4-4257-91ef-4ef3b568fbf5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=654,
         depth=0,
         type='class',
         name='TestAbstraction',
         text='                with db.transaction():\n'
              '                    assert isinstance(table, '
              'dblayer.model.table.Table)\n'
              "                    fn_get = getattr(db, 'get_%s' % "
              'table._table_name)\n'
              "                    fn_find = getattr(db, 'find_%s' % "
              'table._table_name)\n'
              "                    fn_update = getattr(db, 'update_%s' % "
              'table._table_name, None)\n'
              '                    record1 = fn_find()\n'
              '                    if record1 is None:\n'
              '                        continue\n'
              '                    fn_update(record1)\n'
              '                    record2 = fn_get(id=record1.id)\n'
              "                    if hasattr(record2, 'last_modified'):\n"
              '                        record2.last_modified = '
              'record1.last_modified\n'
              '                    self.assertEqual(record1, record2)')

Fragment(uuid='76c792b0-3249-49a8-ad1e-7f2a7967cc9d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=654,
         depth=2,
         type='function',
         name='test_inspection',
         text='                with db.transaction():\n'
              '                    assert isinstance(table, '
              'dblayer.model.table.Table)\n'
              "                    fn_get = getattr(db, 'get_%s' % "
              'table._table_name)\n'
              "                    fn_find = getattr(db, 'find_%s' % "
              'table._table_name)\n'
              "                    fn_update = getattr(db, 'update_%s' % "
              'table._table_name, None)\n'
              '                    record1 = fn_find()\n'
              '                    if record1 is None:\n'
              '                        continue\n'
              '                    fn_update(record1)\n'
              '                    record2 = fn_get(id=record1.id)\n'
              "                    if hasattr(record2, 'last_modified'):\n"
              '                        record2.last_modified = '
              'record1.last_modified\n'
              '                    self.assertEqual(record1, record2)')

Fragment(uuid='60711c89-befc-4993-86ad-841366c8116d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=656,
         depth=10,
         type='variable',
         name='fn_get',
         text="fn_get = getattr(db, 'get_%s' % table._table_name)")

Fragment(uuid='b61c9b93-9398-4fca-8d08-9abd812d2ce0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=657,
         depth=10,
         type='variable',
         name='fn_find',
         text="fn_find = getattr(db, 'find_%s' % table._table_name)")

Fragment(uuid='944cdeab-9145-4efb-bf8e-7bfec18a7ae8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=658,
         depth=10,
         type='variable',
         name='fn_update',
         text="fn_update = getattr(db, 'update_%s' % table._table_name, None)")

Fragment(uuid='8c5f5b5a-7907-4cbe-a318-81adb1e3745e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=659,
         depth=10,
         type='variable',
         name='record1',
         text='record1 = fn_find()')

Fragment(uuid='56374f11-02e5-4e94-aed7-e4c7d80f478c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=663,
         depth=10,
         type='variable',
         name='record2',
         text='record2 = fn_get(id=record1.id)')

Fragment(uuid='0e049383-369c-4a4a-8c96-3db187d4e9a9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=665,
         depth=12,
         type='variable',
         name='record2.last_modified',
         text='record2.last_modified = record1.last_modified')

Fragment(uuid='fd96cb54-4bfb-421e-972b-003f842129e0',
         path='/lib/dblayer/util.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Utility functions\n'
              '"""\n'
              '\n'
              'import datetime\n'
              'import itertools\n'
              'import random\n'
              '\n'
              'from dblayer import constants\n'
              '\n'
              '\n'
              'def get_next_definition_serial(iterator=itertools.count()):\n'
              '    """ Returns the next serial used to sort model definition '
              'instances\n'
              '    """\n'
              '    return next(iterator)\n'
              '\n'
              '\n'
              'def get_random_id(random=random.SystemRandom()):\n'
              '    """ Returns a new random database ID value\n'
              '    """\n'
              '    return random.randrange(*constants.DATABASE_ID_RANGE)\n'
              '\n'
              '\n'
              'def log(msg, *args):\n'
              '    """ Log\n'
              '    """\n'
              '    print\n'
              "    '%s: %s' % (\n"
              "        datetime.datetime.now().isoformat(' '),\n"
              '        msg % args)\n')

Fragment(uuid='f0372bad-7090-4d69-a122-499eeb0dd26e',
         path='/lib/dblayer/util.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/util.py\n'
              '  Functions: get_next_definition_serial get_random_id log\n'
              '  Usages: DATABASE_ID_RANGE SystemRandom args constants count '
              'datetime dblayer isoformat iterator itertools msg next now '
              'print random randrange\n')

Fragment(uuid='176e6c51-ffd4-4557-8559-503a046d832e',
         path='/lib/dblayer/util.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import datetime')

Fragment(uuid='ecaaf0a2-5361-416b-b995-b80790647d65',
         path='/lib/dblayer/util.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='import itertools')

Fragment(uuid='c270fe77-3b6c-4bac-852e-b3228fd697ca',
         path='/lib/dblayer/util.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='import random')

Fragment(uuid='a26c2403-f72c-4b35-990e-7144a85a3061',
         path='/lib/dblayer/util.py',
         lineno=8,
         depth=0,
         type='dependency',
         name='',
         text='from dblayer import constants')

Fragment(uuid='63f1b65d-52c6-4007-a1bb-cd92051a97fc',
         path='/lib/dblayer/util.py',
         lineno=11,
         depth=0,
         type='function',
         name='get_next_definition_serial',
         text='def get_next_definition_serial(iterator=itertools.count()):\n'
              '    """ Returns the next serial used to sort model definition '
              'instances\n'
              '    """\n'
              '    return next(iterator)')

Fragment(uuid='b4cd6a4b-9922-4701-93f8-0b5ddd0ff056',
         path='/lib/dblayer/util.py',
         lineno=17,
         depth=0,
         type='function',
         name='get_random_id',
         text='def get_random_id(random=random.SystemRandom()):\n'
              '    """ Returns a new random database ID value\n'
              '    """\n'
              '    return random.randrange(*constants.DATABASE_ID_RANGE)')

Fragment(uuid='b13b9564-8419-4ab2-8eaa-c285a22591bb',
         path='/lib/dblayer/util.py',
         lineno=23,
         depth=0,
         type='function',
         name='log',
         text='def log(msg, *args):\n'
              '    """ Log\n'
              '    """\n'
              '    print\n'
              "    '%s: %s' % (\n"
              "        datetime.datetime.now().isoformat(' '),\n"
              '        msg % args)')

Fragment(uuid='7cbf4851-4104-4c11-b644-449015c5a643',
         path='/lib/dblayer/version.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text="__version__ = '0.7'\n__release__ = '0.7.0'\n")

Fragment(uuid='177df337-542f-45fd-b0cc-774396132c02',
         path='/lib/dblayer/version.py',
         lineno=1,
         depth=0,
         type='variable',
         name='__version__',
         text="__version__ = '0.7'")

Fragment(uuid='bd87a706-08de-42a2-8222-96ed02bec0db',
         path='/lib/dblayer/version.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/version.py\n'
              '  Variables: __release__ __version__\n')

Fragment(uuid='9118b62f-b9a8-4a16-9458-57f52ea8c561',
         path='/lib/dblayer/version.py',
         lineno=2,
         depth=0,
         type='variable',
         name='__release__',
         text="__release__ = '0.7.0'")

Fragment(uuid='d5db3683-df96-4931-81a4-269caa833c14',
         path='/lib/setup.cfg',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text="[egg_info]\ntag_svn_revision = 0\ntag_build = ''\ntag_date = 0\n")

Fragment(uuid='53d2e0ba-07ae-4536-9184-60eaa110e37c',
         path='/lib/setup.cfg',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /lib/setup.cfg\n')

Fragment(uuid='991d6e97-812d-4709-85b0-d9ec8489ff71',
         path='/lib/setup.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import setuptools\n'
              '\n'
              '# Get version info\n'
              '__version__ = None\n'
              '__release__ = None\n'
              'exec\n'
              "open('dblayer/version.py')\n"
              '\n'
              'setuptools.setup(\n'
              "    name='dblayer',\n"
              '    version=__release__,\n'
              "    description='Database Abstraction Layer Generator',\n"
              "    long_description='''\\\n"
              'Generates database abstraction layer in Python based on a\n'
              'readable definition written as Python classes. Supports\n'
              'defining of tables, basic column types, indexes,\n'
              'con')

Fragment(uuid='53962581-36a2-4f92-9e90-d550b5e5f964',
         path='/lib/setup.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import setuptools')

Fragment(uuid='05c2aa72-ccd2-48ba-af2a-feca1bb985d3',
         path='/lib/setup.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/setup.py\n'
              '  Variables: __release__ __version__\n'
              '  Usages: author author_email classifiers description exec '
              'include_package_data install_requires keywords license '
              'long_description name open package_data packages setup '
              'setuptools test_suite url version zip_safe\n')

Fragment(uuid='d62e11aa-5217-4ba5-9542-6263d366e0b6',
         path='/lib/setup.py',
         lineno=4,
         depth=0,
         type='variable',
         name='__version__',
         text='__version__ = None')

Fragment(uuid='420b2fed-f25c-4fb6-8f49-0951e21d9894',
         path='/lib/setup.py',
         lineno=5,
         depth=0,
         type='variable',
         name='__release__',
         text='__release__ = None')

Fragment(uuid='ef687dc1-20c3-42bd-a041-97cb77701ca4',
         path='/lib/setup.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='straints, full text search and complex queries.\n'
              'Provides a light-weight approach of database access with\n'
              'minimal runtime overhead and without any kind of hidden\n'
              'magic, metaclasses or so. Provides maximum possible\n'
              "support for auto completion in Python IDEs.''',\n"
              '    classifiers=[\n'
              "        'Development Status :: 3 - Alpha',\n"
              "        'Operating System :: OS Independent',\n"
              "        'Intended Audience :: Developers',\n"
              "        '")

Fragment(uuid='7efe181a-5804-46c0-88d1-1478174a0376',
         path='/lib/setup.py',
         lineno=26,
         depth=0,
         type='module',
         name='',
         text="License :: OSI Approved :: MIT License',\n"
              "        'Topic :: Software Development :: Libraries :: Python "
              "Modules',\n"
              "        'Topic :: Database',\n"
              "        'Topic :: Software Development :: Code Generators',\n"
              '    ],\n'
              "    keywords='python database orm postgresql abstraction layer "
              "generator codegeneration performance',\n"
              "    author='Viktor Ferenczi',\n"
              "    author_email='viktor@ferenczi.eu',\n"
              "    url='http://code.google.com/p/dblaye")

Fragment(uuid='af5f575c-8bc5-40d5-9fca-ecf60731c4c3',
         path='/lib/setup.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text="r',\n"
              "    license='MIT',\n"
              '    packages=[\n'
              "        'dblayer',\n"
              "        'dblayer.backend.base',\n"
              "        'dblayer.backend.postgresql',\n"
              "        'dblayer.generator',\n"
              "        'dblayer.graph',\n"
              "        'dblayer.model',\n"
              "        'dblayer.test',\n"
              '    ],\n'
              '    package_data={\n'
              "        '': ['template/*.tpl'],\n"
              '    },\n'
              '    include_package_data=True,\n'
              "    test_suite='unittest',\n"
              '    zip_safe=False,\n'
              "    install_requires=['bottle', 'psycopg2'],\n"
              ')\n')