Fragment(uuid='383bb808-6ba9-4683-a868-6430caf5eb10',
         path='/.gitignore',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='.idea\n'
              '__pycache__\n'
              '*.py[co]\n'
              '*,cover\n'
              '*.coverage\n'
              '*.bak\n'
              '*.log\n'
              '*~\n'
              '\n'
              '# Specific directories and files\n'
              'var\n'
              'var/*\n'
              'lib/build\n'
              'lib/build/*\n'
              'lib/dist\n'
              'lib/dist/*\n'
              'lib/dblayer.egg-info\n'
              'lib/dblayer.egg-info/*\n'
              'etc/config.py\n'
              '\n'
              '# Generated files\n'
              'lib/dblayer/test/abstraction.py\n'
              'lib/dblayer/test/model.gml\n'
              'lib/dblayer/test/inspected_*.py\n')

Fragment(uuid='8e909d06-93f8-41ba-a84b-975aa9b8a4ca',
         path='/.gitignore',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /.gitignore\n')

Fragment(uuid='ebd1cc87-86a5-4dd5-88cd-b64e41ae86c7',
         path='/README.md',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# Database Abstraction Layer Generator\n'
              '\n'
              'Database server support: PostgreSQL\n'
              '\n'
              '# Installation\n'
              '\n'
              '* Using pip: ```pip install dblayer```\n'
              '* From source: ```python setup.py install```\n'
              '\n'
              '# How it works\n'
              '\n')

Fragment(uuid='5e75347f-320d-43cd-99ef-74fc15cb5e92',
         path='/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Database Abstraction Layer Generator\n'
              '# Installation\n'
              '# How it works\n'
              '## Abstraction layer\n'
              '## Lightweight usage\n'
              '## Features\n'
              '# Remarks\n'
              '## Performance\n'
              '## Limitations\n')

Fragment(uuid='a362d086-9788-4229-9984-f431b63565f2',
         path='/README.md',
         lineno=12,
         depth=1,
         type='documentation',
         name='',
         text='## Abstraction layer\n'
              '\n'
              'Generates source code of a module implementing row classes with '
              'slots and a \n'
              'single database abstraction layer class. These classes can be '
              'used as is or \n'
              'extended by inheritance to fit your specific needs. It is also '
              'possible to \n'
              'extend the row classes to provide properties or helper methods. '
              'The generated \n'
              'code provides Python IDEs as much information as possible to '
              'make code \n'
              'completion useful. \n'
              '\n')

Fragment(uuid='ac975d55-837b-4762-b9e0-61944a641d11',
         path='/README.md',
         lineno=21,
         depth=1,
         type='documentation',
         name='',
         text='## Lightweight usage\n'
              '\n'
              'The generated abstraction layer works like an ORM (Object '
              'Relational Mapper), \n'
              'but without a direct mapping of row instances to the '
              'corresponding database \n'
              'rows. It makes this approach more lightweight than a full-blown '
              'ORM. Database \n'
              'sessions and transactions must be initiated explicitly, but '
              'there are context \n'
              'managers defined to simplify your code.\n'
              '\n')

Fragment(uuid='6a85a911-39b8-41c5-89a4-460746043443',
         path='/README.md',
         lineno=29,
         depth=10,
         type='documentation',
         name='',
         text='## Features\n')

Fragment(uuid='7175bfe5-a1c1-40a5-9119-ea3bd65faf27',
         path='/README.md',
         lineno=30,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Tables, indexes and constraints are defined in a very clean way '
              'by just \n'
              'writing Python classes. Everything is defined explicitly, no '
              'automatic \n'
              'discovery of classes. Queries on multiple tables (joins) can '
              'also be defined \n'
              'in a clean way. Table aliasing is automatic and natural, since '
              'all the \n'
              'participating tables must be given an unique name in order to '
              'build the query \n'
              'definition. Highly complex queries can be build up gradually by '
              'simple Python \n'
              'class inheritance, which helps reducing code redundancy in real '
              'world use \n'
              'cases.\n')

Fragment(uuid='e8422100-43db-4537-90fe-0da13ad0dc50',
         path='/README.md',
         lineno=39,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Constraints are enforced on the database server, not by Python '
              'code. It is \n'
              'also possible to add record finalization and validation code in '
              'Python if \n'
              'needed. There is support for defining efficient full text '
              'search indexes in a \n'
              'very simple way, so searching rows based on their textual '
              'contents is easy to \n'
              'implement.\n')

Fragment(uuid='ac7a6a27-b272-428f-bc7c-574d1a372895',
         path='/README.md',
         lineno=45,
         depth=10,
         type='documentation',
         name='',
         text='\n# Remarks\n\n')

Fragment(uuid='e3542b30-8d3a-4323-8d87-bba451e0253e',
         path='/README.md',
         lineno=48,
         depth=1,
         type='documentation',
         name='',
         text='## Performance\n'
              '\n'
              'Most of the SQL is generated at compile time to reduce the '
              'runtime overhead as \n'
              'much as possible. Despite this it is possible to add runtime '
              'conditions, even \n'
              'building up complex conditions at runtime, but it will not slow '
              'down the \n'
              'simple use cases. Literal values are escaped automatically. The '
              'abstraction \n'
              'layer always returns unicode objects. You can pass str objects '
              'as literal \n'
              'values, the default encoding is UTF-8 in this case.\n'
              '\n')

Fragment(uuid='81436ac9-121f-44f4-8fb9-4816c5c33471',
         path='/README.md',
         lineno=57,
         depth=1,
         type='documentation',
         name='',
         text='## Limitations\n'
              '\n'
              'The only supported database server is PostgreSQL via the '
              'psycopg2 \n'
              'extension. The generated code works with gevent-psycopg2 as '
              'well. \n'
              '\n'
              'No support for defining database views, tablespaces and other \n'
              'database servers yet. \n'
              '\n'
              'No support for inspecting databases (generating the classes '
              'defining and \n'
              'existing database) yet. \n'
              '\n'
              'The unit test coverage is still not 100%.\n')

Fragment(uuid='9fbaa394-e99a-4fea-9077-a695f7335ae3',
         path='/lib/MANIFEST.in',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='recursive-include dblayer/generator/template *\n')

Fragment(uuid='aa877962-8820-4288-9e4f-866c1039aaf9',
         path='/lib/MANIFEST.in',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /lib/MANIFEST.in\n')

Fragment(uuid='31f8ac56-7077-4fda-aba6-6a67f7194fcd',
         path='/lib/PKG-INFO',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='Metadata-Version: 1.1')

Fragment(uuid='530d9461-3817-4c61-b2b1-9728690477ae',
         path='/lib/PKG-INFO',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\nName: dblayer')

Fragment(uuid='ef1864b5-8624-45f7-9b62-7ae140efedb7',
         path='/lib/PKG-INFO',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /lib/PKG-INFO\n')

Fragment(uuid='10df6d3d-6bd3-4c4e-950d-b304a75883f1',
         path='/lib/PKG-INFO',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\nVersion: 0.7.0')

Fragment(uuid='52b4190d-86d6-4063-9eca-66d877be23a7',
         path='/lib/PKG-INFO',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\nSummary: Database Abstraction Layer Generator')

Fragment(uuid='1808a870-7c8d-4eac-b2ea-dd70efb0b993',
         path='/lib/PKG-INFO',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\nHome-page: http://code.google.com/p/dblayer')

Fragment(uuid='4e261641-18c3-4327-b090-84fc59a50e42',
         path='/lib/PKG-INFO',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\nAuthor: Viktor Ferenczi')

Fragment(uuid='ae881bd5-e2be-48b9-9d77-b40300ee6446',
         path='/lib/PKG-INFO',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\nAuthor-email: viktor@ferenczi.eu')

Fragment(uuid='32ae2ece-3602-4e21-9137-d0c31b446936',
         path='/lib/PKG-INFO',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\nLicense: MIT')

Fragment(uuid='9313abde-43eb-480a-90e7-832736cae772',
         path='/lib/PKG-INFO',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Description: Generates database abstraction layer in Python '
              'based on a')

Fragment(uuid='2a926a15-882e-49b8-8323-6b27993113fd',
         path='/lib/PKG-INFO',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        readable definition written as Python classes. Supports')

Fragment(uuid='4179ba3c-bb06-402f-8704-a1cebcaceb0c',
         path='/lib/PKG-INFO',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n        defining of tables, basic column types, indexes,')

Fragment(uuid='8a14b1f5-1443-4521-b668-faf7666fe3a1',
         path='/lib/PKG-INFO',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n        constraints, full text search and complex queries.')

Fragment(uuid='c139fbcc-8ed2-4abb-97e4-fe854c104c1a',
         path='/lib/PKG-INFO',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        Provides a light-weight approach of database access with')

Fragment(uuid='0452df38-e9ab-45bf-8324-cccac1d9a1f1',
         path='/lib/PKG-INFO',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        minimal runtime overhead and without any kind of hidden')

Fragment(uuid='ffd0d02e-0b34-439d-ad7a-0521fbafc824',
         path='/lib/PKG-INFO',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n        magic, metaclasses or so. Provides maximum possible')

Fragment(uuid='87f210b2-24c9-462f-8424-7b064a568321',
         path='/lib/PKG-INFO',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n        support for auto completion in Python IDEs.')

Fragment(uuid='bb58b311-8db9-4b9e-badf-d67fc79ed94d',
         path='/lib/PKG-INFO',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Keywords: python database orm postgresql abstraction layer '
              'generator codegeneration performance')

Fragment(uuid='48c37e8b-b190-4867-9fcd-32ee6b92b19c',
         path='/lib/PKG-INFO',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\nPlatform: UNKNOWN')

Fragment(uuid='8736567f-2e5d-465e-ae91-4df5f8accf7b',
         path='/lib/PKG-INFO',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: Development Status :: 3 - Alpha')

Fragment(uuid='1cc4a947-3a94-46bc-ba0b-9a41436a6e70',
         path='/lib/PKG-INFO',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: Operating System :: OS Independent')

Fragment(uuid='b11aae4a-eb43-477b-802c-65494bfeed62',
         path='/lib/PKG-INFO',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: Intended Audience :: Developers')

Fragment(uuid='0ba51f86-e203-4459-ba3e-0efcf32052ec',
         path='/lib/PKG-INFO',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: License :: OSI Approved :: MIT License')

Fragment(uuid='240a329d-d07f-4c31-b0cb-15d7cea786ca',
         path='/lib/PKG-INFO',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Classifier: Topic :: Software Development :: Libraries :: '
              'Python Modules')

Fragment(uuid='03f053a0-f0dd-4612-b7d0-f2347bd8fef8',
         path='/lib/PKG-INFO',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: Topic :: Database')

Fragment(uuid='b92ceed7-da62-4209-ac8d-53174235f441',
         path='/lib/PKG-INFO',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\nClassifier: Topic :: Software Development :: Code Generators')

Fragment(uuid='45b5dc09-9f03-4be5-a685-718067cb4ce8',
         path='/lib/PKG-INFO',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='9a3f4ca9-0101-4b70-b2d1-c2a82c20937a',
         path='/lib/dblayer/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" DBLayer - Database Abstraction Layer Generator\n'
              '"""\n'
              '\n'
              '# FIXME: Require the first column to be the primary key one in '
              'all writable tables (not views).\n')

Fragment(uuid='1769b083-a5f5-419c-8ce5-fd5047b93868',
         path='/lib/dblayer/__init__.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' DBLayer - Database Abstraction Layer Generator\n')

Fragment(uuid='2e2dce15-a110-4014-ab49-3569a7eb0e12',
         path='/lib/dblayer/__init__.py',
         lineno=4,
         depth=0,
         type='documentation',
         name='',
         text='# FIXME: Require the first column to be the primary key one in '
              'all writable tables (not views).')

Fragment(uuid='591d04a0-d60d-459a-b82a-9f438ed1e0ea',
         path='/lib/dblayer/backend/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Database backends\n'
              '\n'
              'The base subpackage contains generic implementation can be '
              'reused by \n'
              'the SQL server specific backend implementations.\n'
              '\n'
              'All the other subpackages contain SQL server specific '
              'implementations.\n'
              '\n'
              '"""\n')

Fragment(uuid='cce8e34c-e9a2-4e36-8c00-8b96d31aec19',
         path='/lib/dblayer/backend/__init__.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Database backends\n'
              '\n'
              'The base subpackage contains generic implementation can be '
              'reused by \n'
              'the SQL server specific backend implementations.\n'
              '\n'
              'All the other subpackages contain SQL server specific '
              'implementations.\n'
              '\n')

Fragment(uuid='88d6dbb0-fb61-465d-bb37-fe7b180d0060',
         path='/lib/dblayer/backend/base/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Subpackage for implementing database backends\n"""\n')

Fragment(uuid='8b8a045c-a830-4456-969d-f97519d55447',
         path='/lib/dblayer/backend/base/__init__.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Subpackage for implementing database backends\n')

Fragment(uuid='4a760f82-8705-468a-9a49-84158a8d7d5c',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Data structures for preparing SQL queries\n'
              '"""\n'
              '\n'
              'from dblayer import constants\n')

Fragment(uuid='7a4540af-4aa6-44eb-94e2-04cbb9d66e0b',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Data structures for preparing SQL queries\n')

Fragment(uuid='be406d25-4122-4591-9e59-39292e45a8b3',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/base/clauses.py\n'
              '  Classes: Clauses\n'
              '  Methods: __eq__ __hash__ __init__ __repr__ get_tuple\n'
              '  Variables and usages: DEBUG constants dblayer field_list '
              'group_by hash hash_value having join limit name offset order_by '
              'other rsplit table_list tuple value where\n')

Fragment(uuid='b0b0fe52-6be3-42bb-b1ed-ac6820c7463a',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='7f272a2e-aa85-4f5c-81cc-26cf16462ed4',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='04f5e1f9-d955-427e-b628-23c116a098a3',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Clauses:\n'
              '    """ Hashable clauses for a single query\n'
              '    """\n'
              '\n'
              '    __slots__ = (\n'
              '        # List of source tables. Possible items:\n'
              '        # table_name for non-aliased and single tables\n'
              '        # (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        # (table_name, alias_name, join_type, join_condition) '
              'to continue a group.\n'
              "        'table_list',\n"
              '\n'
              '        # List of field expressions, each item must be a '
              'string\n'
              "        'field_list',\n"
              '\n'
              '        # Optional list of where conditions, they are joined by '
              'the AND operator\n'
              "        'where',\n"
              '\n'
              '        # Optional list of ')

Fragment(uuid='54c78e7c-afbe-475d-bb5e-4b8227140bdb',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=7,
         depth=1,
         type='class',
         name='Clauses',
         text='class Clauses:\n'
              '    """ Hashable clauses for a single query\n'
              '    """\n'
              '\n'
              '    __slots__ = (\n'
              '        # List of source tables. Possible items:\n'
              '        # table_name for non-aliased and single tables\n'
              '        # (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        # (table_name, alias_name, join_type, join_condition) '
              'to continue a group.\n'
              "        'table_list',\n"
              '\n'
              '        # List of field expressions, each item must be a '
              'string\n'
              "        'field_list',\n"
              '\n'
              '        # Optional list of where conditions, they are joined by '
              'the AND operator\n'
              "        'where',\n"
              '\n'
              '        # Optional list of g')

Fragment(uuid='c51204be-cf83-4cb3-a865-baf161c3e768',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=8,
         depth=4,
         type='documentation',
         name='',
         text=' Hashable clauses for a single query\n    ')

Fragment(uuid='b5fefe15-7688-47b0-9752-79d64f27945e',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=12,
         depth=5,
         type='documentation',
         name='',
         text='# List of source tables. Possible items:')

Fragment(uuid='35f12078-37a0-48b9-997e-2d3bf62aa8f5',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=13,
         depth=5,
         type='documentation',
         name='',
         text='# table_name for non-aliased and single tables')

Fragment(uuid='075abc83-1450-4bfc-8716-b2a9e6aed4a0',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=14,
         depth=5,
         type='documentation',
         name='',
         text='# (table_name, alias_name) to start a new cross join group or')

Fragment(uuid='a1c9b6a6-69a0-4cdf-9589-03ff39a94ee2',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=15,
         depth=5,
         type='documentation',
         name='',
         text='# (table_name, alias_name, join_type, join_condition) to '
              'continue a group.')

Fragment(uuid='0de7b954-a4ad-40c7-8798-633212ae65ec',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=18,
         depth=5,
         type='documentation',
         name='',
         text='# List of field expressions, each item must be a string')

Fragment(uuid='a491a164-b6f6-430b-aa78-2538fe92f8b8',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=21,
         depth=5,
         type='documentation',
         name='',
         text='# Optional list of where conditions, they are joined by the AND '
              'operator')

Fragment(uuid='5c124de2-b3fc-4a8f-855a-7aa4d84f2706',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=24,
         depth=0,
         type='module',
         name='',
         text='group by expressions, each item must be a string\n'
              "        'group_by',\n"
              '\n'
              '        # Optional list of having conditions, each item must be '
              'a string, they are joined by the AND operator\n'
              "        'having',\n"
              '\n'
              '        # Optional list of order by expressions, each item must '
              'be a string\n'
              "        'order_by',\n"
              '\n'
              '        # Optional integer limit for the number of records '
              'returned\n'
              "        'limit',\n"
              '\n'
              '        # Optional integer offset to shift the limit window '
              'over the result set\n'
              "        'offset',\n"
              '\n'
              '        # Hash value calculated from all the above for caching '
              'SQL statements\n'
              "        'hash_value')\n")

Fragment(uuid='14f15c4c-d381-44ca-ae80-6e700c61af80',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=24,
         depth=1,
         type='class',
         name='Clauses',
         text='roup by expressions, each item must be a string\n'
              "        'group_by',\n"
              '\n'
              '        # Optional list of having conditions, each item must be '
              'a string, they are joined by the AND operator\n'
              "        'having',\n"
              '\n'
              '        # Optional list of order by expressions, each item must '
              'be a string\n'
              "        'order_by',\n"
              '\n'
              '        # Optional integer limit for the number of records '
              'returned\n'
              "        'limit',\n"
              '\n'
              '        # Optional integer offset to shift the limit window '
              'over the result set\n'
              "        'offset',\n"
              '\n'
              '        # Hash value calculated from all the above for caching '
              'SQL statements\n'
              "        'hash_value')\n")

Fragment(uuid='f424e5ae-7763-4928-b359-d866ba2771f0',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=24,
         depth=5,
         type='documentation',
         name='',
         text='# Optional list of group by expressions, each item must be a '
              'string')

Fragment(uuid='992cb433-ccf9-4741-9944-25251fd22cb6',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=27,
         depth=5,
         type='documentation',
         name='',
         text='# Optional list of having conditions, each item must be a '
              'string, they are joined by the AND operator')

Fragment(uuid='d45f797f-1612-4607-b5aa-45568fa30936',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=30,
         depth=5,
         type='documentation',
         name='',
         text='# Optional list of order by expressions, each item must be a '
              'string')

Fragment(uuid='89ef074b-c3a9-4b62-90be-f4d687908def',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=33,
         depth=5,
         type='documentation',
         name='',
         text='# Optional integer limit for the number of records returned')

Fragment(uuid='ca5369f7-e330-41b8-9b8e-5b6415066a4b',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=36,
         depth=5,
         type='documentation',
         name='',
         text='# Optional integer offset to shift the limit window over the '
              'result set')

Fragment(uuid='87f95c29-2060-4f87-8945-a7f26abcc5bb',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=39,
         depth=5,
         type='documentation',
         name='',
         text='# Hash value calculated from all the above for caching SQL '
              'statements')

Fragment(uuid='d900fada-0462-4321-9aa9-fb40bbb937e7',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(\n'
              '            self,\n'
              '            table_list=(),\n'
              '            field_list=(),\n'
              "            where='',\n"
              '            group_by=(),\n'
              "            having='',\n"
              '            order_by=(),\n'
              '            limit=None,\n'
              '            offset=None):\n')

Fragment(uuid='7e5a75e8-a2ff-4fc0-b39b-39901143de3a',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=41,
         depth=1,
         type='class',
         name='Clauses',
         text='\n'
              '    def __init__(\n'
              '            self,\n'
              '            table_list=(),\n'
              '            field_list=(),\n'
              "            where='',\n"
              '            group_by=(),\n'
              "            having='',\n"
              '            order_by=(),\n'
              '            limit=None,\n'
              '            offset=None):\n')

Fragment(uuid='28967f1e-ef2d-4bd8-9965-42911fc95c5b',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=42,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(\n'
              '            self,\n'
              '            table_list=(),\n'
              '            field_list=(),\n'
              "            where='',\n"
              '            group_by=(),\n'
              "            having='',\n"
              '            order_by=(),\n'
              '            limit=None,\n'
              '            offset=None):\n')

Fragment(uuid='cefa8a33-b818-4a63-8a07-da230acdecf2',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=52,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(table_list, (tuple, list))\n'
              '            assert isinstance(field_list, (tuple, list))\n'
              '            assert isinstance(where, str)\n'
              '            assert isinstance(group_by, (tuple, list))\n'
              '            assert isinstance(having, str)\n'
              '            assert isinstance(order_by, (tuple, list))\n'
              '\n'
              '        self.table_list = tuple(table_list)\n'
              '        self.field_list = tuple(field_list)\n'
              '        self.where = str(where)\n'
              '        self.group_by = tuple(group_by)\n'
              '        self.having = str(having)\n'
              '        self.order_by = tuple(order_by)\n'
              '        self.limit = None if limit is None else int(limit)\n'
              '        self.offset = None if offset is None else int(offset)\n'
              '\n'
              '        self.hash_value = None\n')

Fragment(uuid='27cedd7c-4972-4d40-88a3-b86fc9fd18eb',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=52,
         depth=1,
         type='class',
         name='Clauses',
         text='\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(table_list, (tuple, list))\n'
              '            assert isinstance(field_list, (tuple, list))\n'
              '            assert isinstance(where, str)\n'
              '            assert isinstance(group_by, (tuple, list))\n'
              '            assert isinstance(having, str)\n'
              '            assert isinstance(order_by, (tuple, list))\n'
              '\n'
              '        self.table_list = tuple(table_list)\n'
              '        self.field_list = tuple(field_list)\n'
              '        self.where = str(where)\n'
              '        self.group_by = tuple(group_by)\n'
              '        self.having = str(having)\n'
              '        self.order_by = tuple(order_by)\n'
              '        self.limit = None if limit is None else int(limit)\n'
              '        self.offset = None if offset is None else int(offset)\n'
              '\n'
              '        self.hash_value = None\n')

Fragment(uuid='cf77f972-24a9-49ab-aeb6-72cca9921944',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=52,
         depth=3,
         type='function',
         name='__init__',
         text='\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(table_list, (tuple, list))\n'
              '            assert isinstance(field_list, (tuple, list))\n'
              '            assert isinstance(where, str)\n'
              '            assert isinstance(group_by, (tuple, list))\n'
              '            assert isinstance(having, str)\n'
              '            assert isinstance(order_by, (tuple, list))\n'
              '\n'
              '        self.table_list = tuple(table_list)\n'
              '        self.field_list = tuple(field_list)\n'
              '        self.where = str(where)\n'
              '        self.group_by = tuple(group_by)\n'
              '        self.having = str(having)\n'
              '        self.order_by = tuple(order_by)\n'
              '        self.limit = None if limit is None else int(limit)\n'
              '        self.offset = None if offset is None else int(offset)\n'
              '\n'
              '        self.hash_value = None')

Fragment(uuid='7f0f08cb-b752-475f-bd86-42801b2f0c56',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=71,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in zip(self.__slots__, '
              'self.get_tuple())))\n'
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='c7ec154c-e73e-4e78-9d13-8fbe89813d9f',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=71,
         depth=1,
         type='class',
         name='Clauses',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in zip(self.__slots__, '
              'self.get_tuple())))\n'
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='b88737d5-df8b-4944-8ae2-d46f2067680b',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=72,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in zip(self.__slots__, '
              'self.get_tuple())))')

Fragment(uuid='8245f67f-662f-4a73-8a91-3dc9e75d15e2',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=81,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_tuple(self):\n'
              '        return (\n'
              '            self.table_list,\n'
              '            self.field_list,\n'
              '            self.where,\n'
              '            self.group_by,\n'
              '            self.having,\n'
              '            self.order_by,\n'
              '            self.limit,\n'
              '            self.offset)\n')

Fragment(uuid='7e05861b-48b1-4fd1-a360-673544cfc928',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=81,
         depth=1,
         type='class',
         name='Clauses',
         text='\n'
              '    def get_tuple(self):\n'
              '        return (\n'
              '            self.table_list,\n'
              '            self.field_list,\n'
              '            self.where,\n'
              '            self.group_by,\n'
              '            self.having,\n'
              '            self.order_by,\n'
              '            self.limit,\n'
              '            self.offset)\n')

Fragment(uuid='daf5feb1-f732-4bf3-a1d7-07a6e638ad3e',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=82,
         depth=3,
         type='function',
         name='get_tuple',
         text='def get_tuple(self):\n'
              '        return (\n'
              '            self.table_list,\n'
              '            self.field_list,\n'
              '            self.where,\n'
              '            self.group_by,\n'
              '            self.having,\n'
              '            self.order_by,\n'
              '            self.limit,\n'
              '            self.offset)')

Fragment(uuid='6bc47ed1-27a3-469d-bdc4-007c135567a0',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __hash__(self):\n'
              '        if self.hash_value is None:\n'
              '            self.hash_value = hash(self.get_tuple())\n'
              '        elif constants.DEBUG:\n'
              '            assert self.hash_value == hash(self.get_tuple()), '
              "'Clauses instance has been changed since its hash calculated "
              "the last time!'\n"
              '        return self.hash_value\n')

Fragment(uuid='ce55895a-479d-4fa3-b75c-f1cef6b69875',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=92,
         depth=1,
         type='class',
         name='Clauses',
         text='\n'
              '    def __hash__(self):\n'
              '        if self.hash_value is None:\n'
              '            self.hash_value = hash(self.get_tuple())\n'
              '        elif constants.DEBUG:\n'
              '            assert self.hash_value == hash(self.get_tuple()), '
              "'Clauses instance has been changed since its hash calculated "
              "the last time!'\n"
              '        return self.hash_value\n')

Fragment(uuid='d9d4a610-ccca-4685-a527-e2c1842e12a3',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=93,
         depth=3,
         type='function',
         name='__hash__',
         text='def __hash__(self):\n'
              '        if self.hash_value is None:\n'
              '            self.hash_value = hash(self.get_tuple())\n'
              '        elif constants.DEBUG:\n'
              '            assert self.hash_value == hash(self.get_tuple()), '
              "'Clauses instance has been changed since its hash calculated "
              "the last time!'\n"
              '        return self.hash_value')

Fragment(uuid='e00c97e0-e78b-4d0d-bd21-e8bc934e42bc',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=97,
         depth=9,
         type='documentation',
         name='',
         text='Clauses instance has been changed since its hash calculated the '
              'last time!')

Fragment(uuid='75f0b2fd-1e3f-4f47-8f38-f5b929c9a458',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=99,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __eq__(self, other):\n'
              '        if not isinstance(other, Clauses):\n'
              '            return False\n'
              '        if hash(self) != hash(other):\n'
              '            return False\n'
              '        return self.get_tuple() == other.get_tuple()\n')

Fragment(uuid='77e88e2c-0372-4f5d-90d5-9e1c82737869',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=99,
         depth=1,
         type='class',
         name='Clauses',
         text='\n'
              '    def __eq__(self, other):\n'
              '        if not isinstance(other, Clauses):\n'
              '            return False\n'
              '        if hash(self) != hash(other):\n'
              '            return False\n'
              '        return self.get_tuple() == other.get_tuple()')

Fragment(uuid='16c020ad-4fe2-476c-8cfa-91a569220e6d',
         path='/lib/dblayer/backend/base/clauses.py',
         lineno=100,
         depth=3,
         type='function',
         name='__eq__',
         text='def __eq__(self, other):\n'
              '        if not isinstance(other, Clauses):\n'
              '            return False\n'
              '        if hash(self) != hash(other):\n'
              '            return False\n'
              '        return self.get_tuple() == other.get_tuple()')

Fragment(uuid='769ed111-dde4-4db7-82b8-791cc9fad710',
         path='/lib/dblayer/backend/base/database.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Base class for generated database abstraction layers\n'
              '"""\n'
              '\n'
              'import contextlib\n'
              'import itertools\n'
              '\n'
              'import dblayer\n'
              'from dblayer import constants, util\n')

Fragment(uuid='9542c1d7-506e-49ab-9649-56438323e8d5',
         path='/lib/dblayer/backend/base/database.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Base class for generated database abstraction layers\n')

Fragment(uuid='8192f154-1826-4cb2-8cdb-863aefbec66c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/base/database.py\n'
              '  Classes: DatabaseAbstraction\n'
              '  Methods: __del__ _connect add_record add_record_list close '
              'commit connect connected create_language cursor delete_record '
              'delete_record_list disable_transactions enable_transactions '
              'execute execute_and_fetch_dict_iter execute_and_fetch_iter '
              'execute_and_fetch_one execute_statement_list executemany '
              'get_last_value_of_last_sequence_used get_record get_record_iter '
              'get_record_list is_primary_key_conflict log_analysis rollback '
              'session transaction update_record update_record_list\n'
              '  Variables and usages: CURSOR_ARRAYSIZE Clauses DEBUG Error '
              'Exception IntegrityError LOG_SQL_RESULT_ROWS LOG_SQL_STATEMENTS '
              'MAX_INSERT_RETRY_COUNT NotImplementedError ProgrammingError '
              'Record _SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT '
              '_SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT '
              '_SQL_IDENTITY_INSERT_SAVEPOINT _column_name_list _format '
              '_table_name arraysize backend base clauses column connection '
              'constants contextlib contextmanager count cursor_name dblayer '
              'description enumerate fetchall fetchmany fetchone field_list '
              'field_name_list finalize first_id format_delete format_insert '
              'format_release_savepoint format_rollback_to_savepoint '
              'format_savepoint format_select format_update generate_id '
              'get_random_id ignore_errors isolation_level itertools join '
              'language last_id name named named_cursor_counter next '
              'parameter_tuple parameter_tuple_list property quote_name range '
              'reason record record_class record_index record_list '
              'record_or_id record_or_id_list retry row_list serial '
              'set_isolation_level split_index startswith statement_list '
              'table_list table_name truncate_id tuple util where\n')

Fragment(uuid='57c9c352-669c-4766-82ab-cffe6ce467ed',
         path='/lib/dblayer/backend/base/database.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='020acf77-5a89-42dd-b33c-ba2de4de597e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='8ee62a3d-9fc0-4b46-8af9-43de126af858',
         path='/lib/dblayer/backend/base/database.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='cc44d89b-b2f0-4823-96d4-99f195f5b245',
         path='/lib/dblayer/backend/base/database.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='b507998b-421f-4a27-9412-ee949010f072',
         path='/lib/dblayer/backend/base/database.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='a26a454a-541b-4eb1-a2bd-96d947a0fd74',
         path='/lib/dblayer/backend/base/database.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class DatabaseAbstraction:\n'
              '    """ Base class for generated database abstraction layers\n'
              '    """\n'
              '\n'
              '    # SQL server specific backend module implementing the '
              'formatting of SQL statements\n'
              '    _format = None\n'
              '\n'
              '    # SQL statement for the savepoint set before each identity '
              'insert statement\n'
              "    _SQL_IDENTITY_INSERT_SAVEPOINT = ''\n"
              '\n'
              '    # SQL statement to release a savepoint after a successful '
              'identity insert\n'
              "    _SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT = ''\n"
              '\n'
              '    # SQL statement for rolling back to the savepoint after a '
              'failing identity insert statement\n'
              "    _SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT = ''\n"
              '\n'
              '    # Database connection\n'
              '    connection = None\n'
              '\n'
              '    ### Connecting and disconnecting\n')

Fragment(uuid='737a3e8b-6f63-4845-b84d-b2df7766b608',
         path='/lib/dblayer/backend/base/database.py',
         lineno=11,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='class DatabaseAbstraction:\n'
              '    """ Base class for generated database abstraction layers\n'
              '    """\n'
              '\n'
              '    # SQL server specific backend module implementing the '
              'formatting of SQL statements\n'
              '    _format = None\n'
              '\n'
              '    # SQL statement for the savepoint set before each identity '
              'insert statement\n'
              "    _SQL_IDENTITY_INSERT_SAVEPOINT = ''\n"
              '\n'
              '    # SQL statement to release a savepoint after a successful '
              'identity insert\n'
              "    _SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT = ''\n"
              '\n'
              '    # SQL statement for rolling back to the savepoint after a '
              'failing identity insert statement\n'
              "    _SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT = ''\n"
              '\n'
              '    # Database connection\n'
              '    connection = None\n'
              '\n'
              '    ### Connecting and disconnecting\n')

Fragment(uuid='aac96f83-5252-4218-b6e1-517a558d92d6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=12,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for generated database abstraction layers\n    ')

Fragment(uuid='c0824106-dd96-47cd-a799-9ced730a4e43',
         path='/lib/dblayer/backend/base/database.py',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='# SQL server specific backend module implementing the '
              'formatting of SQL statements')

Fragment(uuid='1d3a76c1-b982-451a-a908-51200de02f98',
         path='/lib/dblayer/backend/base/database.py',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='# SQL statement for the savepoint set before each identity '
              'insert statement')

Fragment(uuid='ebf80b85-b790-4f9e-9758-645da6c25dd7',
         path='/lib/dblayer/backend/base/database.py',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='# SQL statement to release a savepoint after a successful '
              'identity insert')

Fragment(uuid='477bdeeb-7dc7-40ff-b991-04ccd68e1c5c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='# SQL statement for rolling back to the savepoint after a '
              'failing identity insert statement')

Fragment(uuid='a050fd32-c496-409c-b3e6-f8d5d34435d8',
         path='/lib/dblayer/backend/base/database.py',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='# Database connection')

Fragment(uuid='f8472ada-0c0e-434c-b46d-51eebcbf10cd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='### Connecting and disconnecting')

Fragment(uuid='6135e173-f9f1-4094-9452-5c6afe9f4530',
         path='/lib/dblayer/backend/base/database.py',
         lineno=31,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def connect(self, dsn):\n'
              '        """ Connects to the database\n'
              '        """\n'
              "        assert self.connection is None, 'Already connected.'\n"
              '        self._connect(dsn)\n'
              '        assert self.connection is not None\n'
              '        self.named_cursor_counter = itertools.count()\n')

Fragment(uuid='93e4ffaf-8a7a-4687-805e-e43c8b89c117',
         path='/lib/dblayer/backend/base/database.py',
         lineno=31,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def connect(self, dsn):\n'
              '        """ Connects to the database\n'
              '        """\n'
              "        assert self.connection is None, 'Already connected.'\n"
              '        self._connect(dsn)\n'
              '        assert self.connection is not None\n'
              '        self.named_cursor_counter = itertools.count()\n')

Fragment(uuid='bf5d2b64-5a77-4238-9f6d-3051a1418349',
         path='/lib/dblayer/backend/base/database.py',
         lineno=32,
         depth=3,
         type='function',
         name='connect',
         text='def connect(self, dsn):\n'
              '        """ Connects to the database\n'
              '        """\n'
              "        assert self.connection is None, 'Already connected.'\n"
              '        self._connect(dsn)\n'
              '        assert self.connection is not None\n'
              '        self.named_cursor_counter = itertools.count()')

Fragment(uuid='fdf0eed5-1f02-4fad-b478-73a9c147b78d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=33,
         depth=6,
         type='documentation',
         name='',
         text=' Connects to the database\n        ')

Fragment(uuid='0d0907ec-788a-4ce8-8825-b8507342d0f2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def _connect(self, dsn):\n'
              '        """ Actually connects to the database\n'
              '        \n'
              '        Sets self.connection to a DBAPI2 compatible connection '
              'object.\n'
              '        \n'
              '        """\n'
              '        raise NotImplementedError()\n')

Fragment(uuid='1273e6aa-31f8-4dc7-9781-77e3772c92fd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=39,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def _connect(self, dsn):\n'
              '        """ Actually connects to the database\n'
              '        \n'
              '        Sets self.connection to a DBAPI2 compatible connection '
              'object.\n'
              '        \n'
              '        """\n'
              '        raise NotImplementedError()\n')

Fragment(uuid='55f06a4d-3f9e-4d48-9213-e1c0639803cb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=40,
         depth=3,
         type='function',
         name='_connect',
         text='def _connect(self, dsn):\n'
              '        """ Actually connects to the database\n'
              '        \n'
              '        Sets self.connection to a DBAPI2 compatible connection '
              'object.\n'
              '        \n'
              '        """\n'
              '        raise NotImplementedError()')

Fragment(uuid='87e02f27-bd81-4f46-aad8-f2e9d4eac5d1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=41,
         depth=6,
         type='documentation',
         name='',
         text=' Actually connects to the database\n'
              '        \n'
              '        Sets self.connection to a DBAPI2 compatible connection '
              'object.\n'
              '        \n'
              '        ')

Fragment(uuid='fe9b191b-9a5b-4c96-8f77-f440bc39f9ee',
         path='/lib/dblayer/backend/base/database.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def close(self):\n'
              '        """ Closes the database connection if any\n'
              '        """\n'
              '        if self.connection is None:\n'
              '            return\n'
              '        self.connection.close()\n'
              '        self.connection = None\n'
              '        self.named_cursor_counter = None\n')

Fragment(uuid='a8e6f5c7-a86c-4636-ba89-04e5efea2d95',
         path='/lib/dblayer/backend/base/database.py',
         lineno=47,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def close(self):\n'
              '        """ Closes the database connection if any\n'
              '        """\n'
              '        if self.connection is None:\n'
              '            return\n'
              '        self.connection.close()\n'
              '        self.connection = None\n'
              '        self.named_cursor_counter = None\n')

Fragment(uuid='ea32c76d-6fe9-4716-924a-8da355627bf0',
         path='/lib/dblayer/backend/base/database.py',
         lineno=48,
         depth=3,
         type='function',
         name='close',
         text='def close(self):\n'
              '        """ Closes the database connection if any\n'
              '        """\n'
              '        if self.connection is None:\n'
              '            return\n'
              '        self.connection.close()\n'
              '        self.connection = None\n'
              '        self.named_cursor_counter = None')

Fragment(uuid='6cd54780-db93-4d7c-a629-8f0e25b5cee2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=49,
         depth=6,
         type='documentation',
         name='',
         text=' Closes the database connection if any\n        ')

Fragment(uuid='845ed933-5f56-4d70-9023-8a001839cfff',
         path='/lib/dblayer/backend/base/database.py',
         lineno=56,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __del__(self):\n'
              '        """ Try to close the connection when the object is '
              'deallocated, but silence all known errors\n'
              '        """\n'
              '        try:\n'
              '            self.close()\n'
              '        except self.Error:\n'
              '            pass\n'
              '\n'
              '    @property\n')

Fragment(uuid='05d3db03-ef71-4478-afce-50a54b989558',
         path='/lib/dblayer/backend/base/database.py',
         lineno=56,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def __del__(self):\n'
              '        """ Try to close the connection when the object is '
              'deallocated, but silence all known errors\n'
              '        """\n'
              '        try:\n'
              '            self.close()\n'
              '        except self.Error:\n'
              '            pass\n'
              '\n'
              '    @property\n')

Fragment(uuid='7ab38139-9550-4f44-a777-9f366a0b4027',
         path='/lib/dblayer/backend/base/database.py',
         lineno=57,
         depth=3,
         type='function',
         name='__del__',
         text='def __del__(self):\n'
              '        """ Try to close the connection when the object is '
              'deallocated, but silence all known errors\n'
              '        """\n'
              '        try:\n'
              '            self.close()\n'
              '        except self.Error:\n'
              '            pass')

Fragment(uuid='17f30dff-9bcc-4002-bc2f-5df736024317',
         path='/lib/dblayer/backend/base/database.py',
         lineno=58,
         depth=6,
         type='documentation',
         name='',
         text=' Try to close the connection when the object is deallocated, '
              'but silence all known errors\n'
              '        ')

Fragment(uuid='68d5a773-61bc-4096-9ebc-332ac1c9d381',
         path='/lib/dblayer/backend/base/database.py',
         lineno=66,
         depth=0,
         type='module',
         name='',
         text='    def connected(self):\n'
              '        return self.connection is not None\n'
              '\n'
              '    ### Database session context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='990f08c0-9b0e-4906-b8ce-6115477eeaf8',
         path='/lib/dblayer/backend/base/database.py',
         lineno=66,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='    def connected(self):\n'
              '        return self.connection is not None\n'
              '\n'
              '    ### Database session context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='c0789d2f-1f01-4303-a8db-fcab8b80bb63',
         path='/lib/dblayer/backend/base/database.py',
         lineno=66,
         depth=4,
         type='function',
         name='connected',
         text='def connected(self):\n        return self.connection is not None')

Fragment(uuid='a2e401e7-4c2e-457f-9e75-89347cd8a443',
         path='/lib/dblayer/backend/base/database.py',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='### Database session context')

Fragment(uuid='5b98f73c-5bf4-49df-8cfc-9860b523ed8f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='    def session(self, dsn):\n'
              '        self.connect(dsn)\n'
              '        try:\n'
              '            yield\n'
              '        finally:\n'
              '            self.close()\n'
              '\n'
              '    ### Transaction setup and helpers\n')

Fragment(uuid='eabf5337-082c-43e5-b073-67b9d5e80d5e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=72,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='    def session(self, dsn):\n'
              '        self.connect(dsn)\n'
              '        try:\n'
              '            yield\n'
              '        finally:\n'
              '            self.close()\n'
              '\n'
              '    ### Transaction setup and helpers\n')

Fragment(uuid='21157365-4a4a-4f8b-b1db-277fe0c00958',
         path='/lib/dblayer/backend/base/database.py',
         lineno=72,
         depth=4,
         type='function',
         name='session',
         text='def session(self, dsn):\n'
              '        self.connect(dsn)\n'
              '        try:\n'
              '            yield\n'
              '        finally:\n'
              '            self.close()')

Fragment(uuid='2566f558-b0bf-480a-8380-ff76ab9591cb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='### Transaction setup and helpers')

Fragment(uuid='546f240e-90b5-4925-9ffb-57bca3a71832',
         path='/lib/dblayer/backend/base/database.py',
         lineno=80,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def enable_transactions(self, isolation_level=1):\n'
              '        """ Enables database transactions and sets the '
              'isolation level\n'
              '        """\n'
              '        self.connection.set_isolation_level(isolation_level)\n'
              '        self.connection.rollback()\n')

Fragment(uuid='3ae323e2-4ab2-45c6-9e6f-30af3a3cf3ad',
         path='/lib/dblayer/backend/base/database.py',
         lineno=80,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def enable_transactions(self, isolation_level=1):\n'
              '        """ Enables database transactions and sets the '
              'isolation level\n'
              '        """\n'
              '        self.connection.set_isolation_level(isolation_level)\n'
              '        self.connection.rollback()\n')

Fragment(uuid='460f7562-f2b9-43c8-a749-c80823e7b2b5',
         path='/lib/dblayer/backend/base/database.py',
         lineno=81,
         depth=3,
         type='function',
         name='enable_transactions',
         text='def enable_transactions(self, isolation_level=1):\n'
              '        """ Enables database transactions and sets the '
              'isolation level\n'
              '        """\n'
              '        self.connection.set_isolation_level(isolation_level)\n'
              '        self.connection.rollback()')

Fragment(uuid='33076f2e-bebe-4b01-b5dc-0056cd9c1e2b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=82,
         depth=6,
         type='documentation',
         name='',
         text=' Enables database transactions and sets the isolation level\n'
              '        ')

Fragment(uuid='e7632c91-36ce-4f69-8699-a6d70e02881b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def disable_transactions(self):\n'
              '        """ Disables transactions, switches back to auto commit '
              'mode\n'
              '        """\n'
              '        self.connection.rollback()\n'
              '        self.connection.set_isolation_level(0)\n')

Fragment(uuid='a475e81c-d957-4328-9a8b-aaf466d1a954',
         path='/lib/dblayer/backend/base/database.py',
         lineno=86,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def disable_transactions(self):\n'
              '        """ Disables transactions, switches back to auto commit '
              'mode\n'
              '        """\n'
              '        self.connection.rollback()\n'
              '        self.connection.set_isolation_level(0)\n')

Fragment(uuid='8e7bcebc-6ac4-4eb1-ad9a-b4fb3600660c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=87,
         depth=3,
         type='function',
         name='disable_transactions',
         text='def disable_transactions(self):\n'
              '        """ Disables transactions, switches back to auto commit '
              'mode\n'
              '        """\n'
              '        self.connection.rollback()\n'
              '        self.connection.set_isolation_level(0)')

Fragment(uuid='8686e932-f7a0-403e-ae5d-551fb4172535',
         path='/lib/dblayer/backend/base/database.py',
         lineno=88,
         depth=6,
         type='documentation',
         name='',
         text=' Disables transactions, switches back to auto commit mode\n'
              '        ')

Fragment(uuid='e99b234a-7d8b-4dcd-8293-f6c63756a9f2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def commit(self):\n'
              '        """ Commits the current transaction\n'
              '        """\n'
              '        self.connection.commit()\n')

Fragment(uuid='02e3bf25-8c06-4191-9c4c-ffa2d6751e5f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=92,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def commit(self):\n'
              '        """ Commits the current transaction\n'
              '        """\n'
              '        self.connection.commit()\n')

Fragment(uuid='9306350f-4dc7-448d-994c-8b1f28da8a79',
         path='/lib/dblayer/backend/base/database.py',
         lineno=93,
         depth=3,
         type='function',
         name='commit',
         text='def commit(self):\n'
              '        """ Commits the current transaction\n'
              '        """\n'
              '        self.connection.commit()')

Fragment(uuid='dee349fd-65a6-491a-ad0a-fe504cc0c2ed',
         path='/lib/dblayer/backend/base/database.py',
         lineno=94,
         depth=6,
         type='documentation',
         name='',
         text=' Commits the current transaction\n        ')

Fragment(uuid='9b8f7221-559f-4d4b-b206-43e03fa33b19',
         path='/lib/dblayer/backend/base/database.py',
         lineno=97,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def rollback(self):\n'
              '        """ Rolls back the current transaction\n'
              '        """\n'
              '        self.connection.rollback()\n'
              '\n'
              '    ### Transaction context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='d4d261ac-4e2f-4783-9bf5-d3e1758c9e38',
         path='/lib/dblayer/backend/base/database.py',
         lineno=97,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def rollback(self):\n'
              '        """ Rolls back the current transaction\n'
              '        """\n'
              '        self.connection.rollback()\n'
              '\n'
              '    ### Transaction context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='6abff9ec-9a95-4f12-b1de-ca34332ad53e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=98,
         depth=3,
         type='function',
         name='rollback',
         text='def rollback(self):\n'
              '        """ Rolls back the current transaction\n'
              '        """\n'
              '        self.connection.rollback()')

Fragment(uuid='7a35bdbd-400a-4cb1-934f-84b19543970c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=99,
         depth=6,
         type='documentation',
         name='',
         text=' Rolls back the current transaction\n        ')

Fragment(uuid='ff90b031-0b78-41d2-8b4b-3b0be2383c05',
         path='/lib/dblayer/backend/base/database.py',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='### Transaction context')

Fragment(uuid='713d2046-935f-4065-8e10-8c2b764f1f89',
         path='/lib/dblayer/backend/base/database.py',
         lineno=106,
         depth=0,
         type='module',
         name='',
         text='    def transaction(self):\n'
              '        """ Context manager to encapsualte a transaction\n'
              '        """\n'
              '        try:\n'
              '            yield\n'
              '        except Exception:\n'
              '            self.connection.rollback()\n'
              '            raise\n'
              '        else:\n'
              '            self.connection.commit()\n'
              '\n'
              '    ### Cursor context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='f844ee95-6743-4610-81eb-38122da98cf0',
         path='/lib/dblayer/backend/base/database.py',
         lineno=106,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='    def transaction(self):\n'
              '        """ Context manager to encapsualte a transaction\n'
              '        """\n'
              '        try:\n'
              '            yield\n'
              '        except Exception:\n'
              '            self.connection.rollback()\n'
              '            raise\n'
              '        else:\n'
              '            self.connection.commit()\n'
              '\n'
              '    ### Cursor context\n'
              '\n'
              '    @contextlib.contextmanager\n')

Fragment(uuid='383d7b41-ae54-4963-9b18-8a75ed2f8397',
         path='/lib/dblayer/backend/base/database.py',
         lineno=106,
         depth=4,
         type='function',
         name='transaction',
         text='def transaction(self):\n'
              '        """ Context manager to encapsualte a transaction\n'
              '        """\n'
              '        try:\n'
              '            yield\n'
              '        except Exception:\n'
              '            self.connection.rollback()\n'
              '            raise\n'
              '        else:\n'
              '            self.connection.commit()')

Fragment(uuid='36a2b083-b835-4b69-807b-217a23f61bdb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=107,
         depth=7,
         type='documentation',
         name='',
         text=' Context manager to encapsualte a transaction\n        ')

Fragment(uuid='aac0a6b5-56a5-4811-83b1-dfb4cb67afa0',
         path='/lib/dblayer/backend/base/database.py',
         lineno=120,
         depth=0,
         type='module',
         name='',
         text='    def cursor(self, named=False):\n'
              '        """ Context manager for a single database cursor\n'
              '        """\n'
              '        # See this forum thread on why we need to use named '
              'cursors as well as unnamed ones:\n'
              '        # '
              'http://www.velocityreviews.com/forums/t649192-psycopg2-and-large-queries.html\n')

Fragment(uuid='ce5294ba-2b10-4af5-8ab2-5fa616d97af2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=120,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='    def cursor(self, named=False):\n'
              '        """ Context manager for a single database cursor\n'
              '        """\n'
              '        # See this forum thread on why we need to use named '
              'cursors as well as unnamed ones:\n'
              '        # '
              'http://www.velocityreviews.com/forums/t649192-psycopg2-and-large-queries.html\n')

Fragment(uuid='fcb84ba4-fc72-4868-98be-d9f59460517c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=120,
         depth=4,
         type='function',
         name='cursor',
         text='def cursor(self, named=False):\n'
              '        """ Context manager for a single database cursor\n'
              '        """\n'
              '        # See this forum thread on why we need to use named '
              'cursors as well as unnamed ones:\n'
              '        # '
              'http://www.velocityreviews.com/forums/t649192-psycopg2-and-large-queries.html\n')

Fragment(uuid='40c0c674-a115-4a43-8840-441f17a733a6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=121,
         depth=7,
         type='documentation',
         name='',
         text=' Context manager for a single database cursor\n        ')

Fragment(uuid='fe8420bc-6508-4ac0-9aae-3e9cd9aa3084',
         path='/lib/dblayer/backend/base/database.py',
         lineno=123,
         depth=5,
         type='documentation',
         name='',
         text='# See this forum thread on why we need to use named cursors as '
              'well as unnamed ones:')

Fragment(uuid='fb33ff87-5122-478e-a59a-07c309954d1b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=124,
         depth=5,
         type='documentation',
         name='',
         text='# '
              'http://www.velocityreviews.com/forums/t649192-psycopg2-and-large-queries.html')

Fragment(uuid='3bf6cc23-96ad-4b11-a97c-3afd4ff0963b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=125,
         depth=0,
         type='module',
         name='',
         text='        if named:\n'
              "            cursor_name = 'cursor_%d' % "
              'next(self.named_cursor_counter)\n'
              '            cursor = self.connection.cursor(cursor_name)\n'
              '        else:\n'
              '            cursor = self.connection.cursor()\n'
              '\n'
              '        try:\n'
              '            yield cursor\n'
              '        finally:\n'
              '            try:\n'
              '                cursor.close()\n'
              '            except self.Error:\n'
              '                # Closing a cursor in a broken transaction '
              'state can cause an extra exception here.\n'
              '                # It can be safely suppressed, since we already '
              'have an error condition anyway.\n'
              '                pass\n'
              '\n'
              '    ### Execute helpers\n')

Fragment(uuid='7bab7543-fc5d-4fe8-996d-b260032856f0',
         path='/lib/dblayer/backend/base/database.py',
         lineno=125,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='        if named:\n'
              "            cursor_name = 'cursor_%d' % "
              'next(self.named_cursor_counter)\n'
              '            cursor = self.connection.cursor(cursor_name)\n'
              '        else:\n'
              '            cursor = self.connection.cursor()\n'
              '\n'
              '        try:\n'
              '            yield cursor\n'
              '        finally:\n'
              '            try:\n'
              '                cursor.close()\n'
              '            except self.Error:\n'
              '                # Closing a cursor in a broken transaction '
              'state can cause an extra exception here.\n'
              '                # It can be safely suppressed, since we already '
              'have an error condition anyway.\n'
              '                pass\n'
              '\n'
              '    ### Execute helpers\n')

Fragment(uuid='596f88d1-737e-4a59-a940-8d47bacd15d9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=125,
         depth=4,
         type='function',
         name='cursor',
         text='        if named:\n'
              "            cursor_name = 'cursor_%d' % "
              'next(self.named_cursor_counter)\n'
              '            cursor = self.connection.cursor(cursor_name)\n'
              '        else:\n'
              '            cursor = self.connection.cursor()\n'
              '\n'
              '        try:\n'
              '            yield cursor\n'
              '        finally:\n'
              '            try:\n'
              '                cursor.close()\n'
              '            except self.Error:\n'
              '                # Closing a cursor in a broken transaction '
              'state can cause an extra exception here.\n'
              '                # It can be safely suppressed, since we already '
              'have an error condition anyway.\n'
              '                pass')

Fragment(uuid='b884aa5c-1de6-4fd2-b110-97974cd3de89',
         path='/lib/dblayer/backend/base/database.py',
         lineno=137,
         depth=10,
         type='documentation',
         name='',
         text='# Closing a cursor in a broken transaction state can cause an '
              'extra exception here.')

Fragment(uuid='9dbf2168-78a0-4b15-a128-3f1a332985bd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=138,
         depth=10,
         type='documentation',
         name='',
         text='# It can be safely suppressed, since we already have an error '
              'condition anyway.')

Fragment(uuid='62d89936-a6e6-41f4-af47-a180ac0f36e2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=142,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def execute(self, cursor, sql, parameter_tuple=()):\n'
              '        """ Executes a single SQL statement on the given '
              'cursor \n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute(%r, %r)', sql, "
              'parameter_tuple)\n'
              '\n'
              '        cursor.execute(sql, parameter_tuple)\n')

Fragment(uuid='fe039c61-4748-4c9a-9765-889466a9cc08',
         path='/lib/dblayer/backend/base/database.py',
         lineno=142,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def execute(self, cursor, sql, parameter_tuple=()):\n'
              '        """ Executes a single SQL statement on the given '
              'cursor \n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute(%r, %r)', sql, "
              'parameter_tuple)\n'
              '\n'
              '        cursor.execute(sql, parameter_tuple)\n')

Fragment(uuid='45256871-adf5-4857-b569-d2c5f7e3661f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=143,
         depth=3,
         type='function',
         name='execute',
         text='def execute(self, cursor, sql, parameter_tuple=()):\n'
              '        """ Executes a single SQL statement on the given '
              'cursor \n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute(%r, %r)', sql, "
              'parameter_tuple)\n'
              '\n'
              '        cursor.execute(sql, parameter_tuple)')

Fragment(uuid='7962b28c-6741-46a2-89f3-c9eb8a098ee5',
         path='/lib/dblayer/backend/base/database.py',
         lineno=144,
         depth=6,
         type='documentation',
         name='',
         text=' Executes a single SQL statement on the given cursor \n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        ')

Fragment(uuid='794fec6d-80a2-49a4-8077-75be9704afe8',
         path='/lib/dblayer/backend/base/database.py',
         lineno=151,
         depth=10,
         type='documentation',
         name='',
         text='SQL statement: execute(%r, %r)')

Fragment(uuid='3d794df3-a115-497d-8efd-7f780a846e02',
         path='/lib/dblayer/backend/base/database.py',
         lineno=154,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def executemany(self, cursor, sql, parameter_tuple_list):\n'
              '        """ Executes a single SQL statement on the given cursor '
              'for each parameter_tuple\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if not parameter_tuple_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: executemany(%r, %r)', sql, "
              'parameter_tuple_list)\n'
              '\n'
              '        cursor.executemany(sql, parameter_tuple_list)\n')

Fragment(uuid='2fac7620-9900-4684-8867-bc85e6c0487c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=154,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def executemany(self, cursor, sql, parameter_tuple_list):\n'
              '        """ Executes a single SQL statement on the given cursor '
              'for each parameter_tuple\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if not parameter_tuple_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: executemany(%r, %r)', sql, "
              'parameter_tuple_list)\n'
              '\n'
              '        cursor.executemany(sql, parameter_tuple_list)\n')

Fragment(uuid='6e9a571c-919a-4dc2-9dd4-777d4f3bf14c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=155,
         depth=3,
         type='function',
         name='executemany',
         text='def executemany(self, cursor, sql, parameter_tuple_list):\n'
              '        """ Executes a single SQL statement on the given cursor '
              'for each parameter_tuple\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        """\n'
              '        if not parameter_tuple_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: executemany(%r, %r)', sql, "
              'parameter_tuple_list)\n'
              '\n'
              '        cursor.executemany(sql, parameter_tuple_list)')

Fragment(uuid='780bf136-c2cd-4284-9db6-313236f0c8fe',
         path='/lib/dblayer/backend/base/database.py',
         lineno=156,
         depth=6,
         type='documentation',
         name='',
         text=' Executes a single SQL statement on the given cursor for each '
              'parameter_tuple\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statement.\n'
              '        \n'
              '        ')

Fragment(uuid='db550627-e1d2-40ba-8658-545cdae41a4c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=166,
         depth=10,
         type='documentation',
         name='',
         text='SQL statement: executemany(%r, %r)')

Fragment(uuid='60368134-88cc-4e15-b5cf-b54f74d4e123',
         path='/lib/dblayer/backend/base/database.py',
         lineno=169,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def execute_statement_list(self, cursor, statement_list, '
              'ignore_errors=False):\n'
              '        """ Executes a list of SQL statements on the given '
              'cursor \n'
              '        \n'
              '        statement_list = [(sql, parameter_tuple)*]\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statements.\n'
              '        \n'
              '        """\n'
              '        if not statement_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_statement_list(%r)', statement_list)\n"
              '\n'
              '        if ignore_errors:\n')

Fragment(uuid='eefacfa0-2058-4dc0-a9dc-bd78dc664835',
         path='/lib/dblayer/backend/base/database.py',
         lineno=169,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def execute_statement_list(self, cursor, statement_list, '
              'ignore_errors=False):\n'
              '        """ Executes a list of SQL statements on the given '
              'cursor \n'
              '        \n'
              '        statement_list = [(sql, parameter_tuple)*]\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statements.\n'
              '        \n'
              '        """\n'
              '        if not statement_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_statement_list(%r)', statement_list)\n"
              '\n'
              '        if ignore_errors:\n')

Fragment(uuid='b47a2d6f-de27-4f84-ad57-0b7091cfa707',
         path='/lib/dblayer/backend/base/database.py',
         lineno=170,
         depth=3,
         type='function',
         name='execute_statement_list',
         text='def execute_statement_list(self, cursor, statement_list, '
              'ignore_errors=False):\n'
              '        """ Executes a list of SQL statements on the given '
              'cursor \n'
              '        \n'
              '        statement_list = [(sql, parameter_tuple)*]\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statements.\n'
              '        \n'
              '        """\n'
              '        if not statement_list:\n'
              '            return\n'
              '\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_statement_list(%r)', statement_list)\n"
              '\n'
              '        if ignore_errors:\n')

Fragment(uuid='3995aa6f-9ea0-4063-b2f8-bf7a7511e9d2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=171,
         depth=6,
         type='documentation',
         name='',
         text=' Executes a list of SQL statements on the given cursor \n'
              '        \n'
              '        statement_list = [(sql, parameter_tuple)*]\n'
              '        \n'
              '        NOTE: It is not suitable to retrieve a result set, '
              'since the cursor\n'
              '              is closed right after executing the statements.\n'
              '        \n'
              '        ')

Fragment(uuid='b6b6732d-b10f-4158-aa42-7f03f8a980d6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=183,
         depth=10,
         type='documentation',
         name='',
         text='SQL statement: execute_statement_list(%r)')

Fragment(uuid='c3dab78c-9b0b-4711-b4fb-0f7c0ed94e0a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=186,
         depth=0,
         type='module',
         name='',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                try:\n'
              '                    '
              "cursor.execute(self._format.format_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                    cursor.execute(sql, parameter_tuple)\n'
              '                except self.ProgrammingError as reason:\n'
              "                    if str(reason).startswith('syntax error'):\n"
              '                        raise\n'
              '                    '
              "cursor.execute(self._format.format_rollback_to_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                else:\n'
              '                    '
              "cursor.execute(self._format.format_release_savepoint('execute_statement_list_ignoring_errors'))\n"
              '        else:\n')

Fragment(uuid='a7809f45-e37a-4685-b538-1d6cc5d1c4b4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=186,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                try:\n'
              '                    '
              "cursor.execute(self._format.format_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                    cursor.execute(sql, parameter_tuple)\n'
              '                except self.ProgrammingError as reason:\n'
              "                    if str(reason).startswith('syntax error'):\n"
              '                        raise\n'
              '                    '
              "cursor.execute(self._format.format_rollback_to_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                else:\n'
              '                    '
              "cursor.execute(self._format.format_release_savepoint('execute_statement_list_ignoring_errors'))\n"
              '        else:\n')

Fragment(uuid='43781e74-8792-40eb-b34c-a87a30b1d411',
         path='/lib/dblayer/backend/base/database.py',
         lineno=186,
         depth=3,
         type='function',
         name='execute_statement_list',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                try:\n'
              '                    '
              "cursor.execute(self._format.format_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                    cursor.execute(sql, parameter_tuple)\n'
              '                except self.ProgrammingError as reason:\n'
              "                    if str(reason).startswith('syntax error'):\n"
              '                        raise\n'
              '                    '
              "cursor.execute(self._format.format_rollback_to_savepoint('execute_statement_list_ignoring_errors'))\n"
              '                else:\n'
              '                    '
              "cursor.execute(self._format.format_release_savepoint('execute_statement_list_ignoring_errors'))\n"
              '        else:\n')

Fragment(uuid='c510a883-de61-40a1-91fa-2c25a47f61d6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=188,
         depth=16,
         type='documentation',
         name='',
         text='execute_statement_list_ignoring_errors')

Fragment(uuid='c2225012-1748-4442-a7e2-162e26f3b9d6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=193,
         depth=17,
         type='documentation',
         name='',
         text='execute_statement_list_ignoring_errors')

Fragment(uuid='ca0c9352-1f10-4f8d-9a9e-3fe270f56dae',
         path='/lib/dblayer/backend/base/database.py',
         lineno=195,
         depth=17,
         type='documentation',
         name='',
         text='execute_statement_list_ignoring_errors')

Fragment(uuid='25a753af-9232-4172-b05c-31478e976af0',
         path='/lib/dblayer/backend/base/database.py',
         lineno=197,
         depth=0,
         type='module',
         name='',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                cursor.execute(sql, parameter_tuple)\n')

Fragment(uuid='07e3bfb5-793c-4e2f-915f-208f13328a59',
         path='/lib/dblayer/backend/base/database.py',
         lineno=197,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                cursor.execute(sql, parameter_tuple)\n')

Fragment(uuid='7006b560-3498-42b0-bdbd-121b333728af',
         path='/lib/dblayer/backend/base/database.py',
         lineno=197,
         depth=3,
         type='function',
         name='execute_statement_list',
         text='            for sql, parameter_tuple in statement_list:\n'
              '                cursor.execute(sql, parameter_tuple)')

Fragment(uuid='02655730-a9a0-4f03-8a76-c83b7f31f984',
         path='/lib/dblayer/backend/base/database.py',
         lineno=199,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def execute_and_fetch_one(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'returns the first row of result set if any\n'
              '        \n'
              '        Returns the first row of the result set or None in the '
              'case of an empty result set.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_one(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '        row = cursor.fetchone()\n'
              '\n'
              '        if constants.LOG_SQL_RESULT_ROWS:\n'
              "            util.log('Returning SQL result row: %r' % (row,))\n"
              '\n'
              '        return row\n')

Fragment(uuid='88c5b496-a435-4f0e-96c6-ba853bfd8a3b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=199,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def execute_and_fetch_one(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'returns the first row of result set if any\n'
              '        \n'
              '        Returns the first row of the result set or None in the '
              'case of an empty result set.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_one(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '        row = cursor.fetchone()\n'
              '\n'
              '        if constants.LOG_SQL_RESULT_ROWS:\n'
              "            util.log('Returning SQL result row: %r' % (row,))\n"
              '\n'
              '        return row\n')

Fragment(uuid='c0d84ebf-5b3f-43ad-903a-5931d9f96a04',
         path='/lib/dblayer/backend/base/database.py',
         lineno=200,
         depth=3,
         type='function',
         name='execute_and_fetch_one',
         text='def execute_and_fetch_one(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'returns the first row of result set if any\n'
              '        \n'
              '        Returns the first row of the result set or None in the '
              'case of an empty result set.\n'
              '        \n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_one(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '        row = cursor.fetchone()\n'
              '\n'
              '        if constants.LOG_SQL_RESULT_ROWS:\n'
              "            util.log('Returning SQL result row: %r' % (row,))\n"
              '\n'
              '        return row')

Fragment(uuid='7a517496-27c0-499a-b5d9-87ad271abf2d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=201,
         depth=6,
         type='documentation',
         name='',
         text=' Executes an SQL query on the given cursor and returns the '
              'first row of result set if any\n'
              '        \n'
              '        Returns the first row of the result set or None in the '
              'case of an empty result set.\n'
              '        \n'
              '        ')

Fragment(uuid='a58f13d8-3ad2-49cf-b8e9-ae2fe81bad94',
         path='/lib/dblayer/backend/base/database.py',
         lineno=207,
         depth=10,
         type='documentation',
         name='',
         text='SQL statement: execute_and_fetch_one(%r, %r)')

Fragment(uuid='f52dbcab-6147-4c44-8b49-3bf7a44cac41',
         path='/lib/dblayer/backend/base/database.py',
         lineno=213,
         depth=11,
         type='documentation',
         name='',
         text='Returning SQL result row: %r')

Fragment(uuid='2e96d0c2-b01f-4eeb-81c5-556fff3aacc6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=216,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def execute_and_fetch_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_iter(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row: %r' % "
              '(row,))\n'
              '\n'
              '                yield row\n')

Fragment(uuid='6a11e1cf-1f0b-451b-af8c-7c529a185d20',
         path='/lib/dblayer/backend/base/database.py',
         lineno=216,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def execute_and_fetch_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_iter(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row: %r' % "
              '(row,))\n'
              '\n'
              '                yield row\n')

Fragment(uuid='abca2ac9-be8b-4aaa-8615-e4b834f0bfbf',
         path='/lib/dblayer/backend/base/database.py',
         lineno=217,
         depth=3,
         type='function',
         name='execute_and_fetch_iter',
         text='def execute_and_fetch_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: execute_and_fetch_iter(%r, "
              "%r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row: %r' % "
              '(row,))\n'
              '\n'
              '                yield row')

Fragment(uuid='bb3b15f9-4e82-418b-aa67-77cbbb62c1a6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=218,
         depth=6,
         type='documentation',
         name='',
         text=' Executes an SQL query on the given cursor and yields each row '
              'of result set\n'
              '        ')

Fragment(uuid='993eef61-6a5b-457e-bc06-e25d7037a893',
         path='/lib/dblayer/backend/base/database.py',
         lineno=221,
         depth=10,
         type='documentation',
         name='',
         text='SQL statement: execute_and_fetch_iter(%r, %r)')

Fragment(uuid='221f2b27-a697-404f-9f3c-233e3a4d805a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=235,
         depth=15,
         type='documentation',
         name='',
         text='Yielding SQL result row: %r')

Fragment(uuid='aac64ca5-cced-4c10-a68d-a40ab0193494',
         path='/lib/dblayer/backend/base/database.py',
         lineno=238,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def execute_and_fetch_dict_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set as a dict\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_and_fetch_dict_iter(%r, %r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        field_name_list = None\n')

Fragment(uuid='db82aa84-4e8a-4044-8530-71d4c136e400',
         path='/lib/dblayer/backend/base/database.py',
         lineno=238,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def execute_and_fetch_dict_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set as a dict\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_and_fetch_dict_iter(%r, %r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        field_name_list = None\n')

Fragment(uuid='48472073-3a8c-4a1f-8c24-23e4b4302859',
         path='/lib/dblayer/backend/base/database.py',
         lineno=239,
         depth=3,
         type='function',
         name='execute_and_fetch_dict_iter',
         text='def execute_and_fetch_dict_iter(self, cursor, sql, '
              'parameter_tuple=()):\n'
              '        """ Executes an SQL query on the given cursor and '
              'yields each row of result set as a dict\n'
              '        """\n'
              '        if constants.LOG_SQL_STATEMENTS:\n'
              "            util.log('SQL statement: "
              "execute_and_fetch_dict_iter(%r, %r)', sql, parameter_tuple)\n"
              '\n'
              '        cursor.arraysize = constants.CURSOR_ARRAYSIZE\n'
              '        cursor.execute(sql, parameter_tuple)\n'
              '\n'
              '        field_name_list = None\n')

Fragment(uuid='4bb0f09a-7177-4f2e-8322-73f755b6f062',
         path='/lib/dblayer/backend/base/database.py',
         lineno=240,
         depth=6,
         type='documentation',
         name='',
         text=' Executes an SQL query on the given cursor and yields each row '
              'of result set as a dict\n'
              '        ')

Fragment(uuid='79b1b5cd-9293-4700-af66-005218bcbabe',
         path='/lib/dblayer/backend/base/database.py',
         lineno=243,
         depth=10,
         type='documentation',
         name='',
         text='SQL statement: execute_and_fetch_dict_iter(%r, %r)')

Fragment(uuid='1389a4f1-fa70-4a69-8732-02b99e75e1a4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=249,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            if field_name_list is None:\n'
              '                field_name_list = [column.name for column in '
              'cursor.description]\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                row = dict(zip(field_name_list, row))\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row as dict: "
              "%r' % (row,))\n"
              '\n'
              '                yield row\n'
              '\n'
              '    ### Select query helpers\n')

Fragment(uuid='f4de6a2a-5317-479b-8dbe-682cd7d39f1f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=249,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            if field_name_list is None:\n'
              '                field_name_list = [column.name for column in '
              'cursor.description]\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                row = dict(zip(field_name_list, row))\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row as dict: "
              "%r' % (row,))\n"
              '\n'
              '                yield row\n'
              '\n'
              '    ### Select query helpers\n')

Fragment(uuid='866a43f6-14de-490c-a69e-29849caa6709',
         path='/lib/dblayer/backend/base/database.py',
         lineno=249,
         depth=3,
         type='function',
         name='execute_and_fetch_dict_iter',
         text='\n'
              '        while 1:\n'
              '            row_list = cursor.fetchmany()\n'
              '\n'
              '            if not row_list:\n'
              '                break\n'
              '\n'
              '            if field_name_list is None:\n'
              '                field_name_list = [column.name for column in '
              'cursor.description]\n'
              '\n'
              '            for row in row_list:\n'
              '\n'
              '                row = dict(zip(field_name_list, row))\n'
              '\n'
              '                if constants.LOG_SQL_RESULT_ROWS:\n'
              "                    util.log('Yielding SQL result row as dict: "
              "%r' % (row,))\n"
              '\n'
              '                yield row')

Fragment(uuid='fb14de51-6fa4-4f72-a8b5-df44a70723c9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=264,
         depth=15,
         type='documentation',
         name='',
         text='Yielding SQL result row as dict: %r')

Fragment(uuid='a76988d8-5da8-4735-ae07-775cad4271ae',
         path='/lib/dblayer/backend/base/database.py',
         lineno=268,
         depth=2,
         type='documentation',
         name='',
         text='### Select query helpers')

Fragment(uuid='e229e9ab-921f-4ed6-9bde-f966d75e6677',
         path='/lib/dblayer/backend/base/database.py',
         lineno=269,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_record(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a single record form the database or None '
              'if no record found\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '\n'
              '        if row is None:\n'
              '            return None\n'
              '\n'
              '        return record_class(*row)\n')

Fragment(uuid='b98b614a-ef01-4f9e-834d-46e88f2d2a2d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=269,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def get_record(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a single record form the database or None '
              'if no record found\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '\n'
              '        if row is None:\n'
              '            return None\n'
              '\n'
              '        return record_class(*row)\n')

Fragment(uuid='9821309c-0b9a-439e-8f6c-05af9fd79297',
         path='/lib/dblayer/backend/base/database.py',
         lineno=270,
         depth=3,
         type='function',
         name='get_record',
         text='def get_record(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a single record form the database or None '
              'if no record found\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '\n'
              '        if row is None:\n'
              '            return None\n'
              '\n'
              '        return record_class(*row)')

Fragment(uuid='826fc181-ed06-48e4-ac26-dcc1bd272813',
         path='/lib/dblayer/backend/base/database.py',
         lineno=271,
         depth=6,
         type='documentation',
         name='',
         text=' Retrieves a single record form the database or None if no '
              'record found\n'
              '        ')

Fragment(uuid='ce1ab565-af61-49a4-a04d-47b78a55ba54',
         path='/lib/dblayer/backend/base/database.py',
         lineno=287,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_record_list(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a list of records form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            return [\n'
              '                record_class(*row)\n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n')

Fragment(uuid='8be3306a-6897-452e-9afe-c222b6dafe58',
         path='/lib/dblayer/backend/base/database.py',
         lineno=287,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def get_record_list(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a list of records form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            return [\n'
              '                record_class(*row)\n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n')

Fragment(uuid='8c8f1797-3199-4ed7-88c3-c7944940af3a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=288,
         depth=3,
         type='function',
         name='get_record_list',
         text='def get_record_list(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Retrieves a list of records form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            return [\n'
              '                record_class(*row)\n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]')

Fragment(uuid='3c40e184-f967-41ce-a3bf-b048e32be37c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=289,
         depth=6,
         type='documentation',
         name='',
         text=' Retrieves a list of records form the database\n        ')

Fragment(uuid='98fd5cc8-cd71-4588-bcd5-60401bf9683c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=302,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_record_iter(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Yields records retrieved form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)\n'
              '\n'
              '    ### Insert query helpers\n')

Fragment(uuid='814571b0-d024-4a33-a148-af67670c8327',
         path='/lib/dblayer/backend/base/database.py',
         lineno=302,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def get_record_iter(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Yields records retrieved form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)\n'
              '\n'
              '    ### Insert query helpers\n')

Fragment(uuid='41b136a6-8ff0-4ca2-8238-fc4ac050590e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=303,
         depth=3,
         type='function',
         name='get_record_iter',
         text='def get_record_iter(self, record_class, clauses, '
              'parameter_tuple=()):\n'
              '        """ Yields records retrieved form the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '            assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '            assert isinstance(parameter_tuple, (tuple, list))\n'
              '\n'
              '        sql = self._format.format_select(clauses)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)')

Fragment(uuid='259559c8-9c8f-4b18-ba89-1c3b9e77796f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=304,
         depth=6,
         type='documentation',
         name='',
         text=' Yields records retrieved form the database\n        ')

Fragment(uuid='d314633f-33a7-461b-a68e-3d9a062a5e0a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=317,
         depth=2,
         type='documentation',
         name='',
         text='### Insert query helpers')

Fragment(uuid='7afdba00-4bdd-40a6-a9c7-1633127e06ca',
         path='/lib/dblayer/backend/base/database.py',
         lineno=318,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def is_primary_key_conflict(self, reason):\n'
              '        """ Returns True if the exception object might be due '
              'to the attempted\n'
              '        insertion of a conflicting primary key value. It can '
              'give false positives\n'
              '        without problems, those only degrade performance in '
              'rare exception cases\n'
              '        only.\n'
              '        """\n'
              "        return '__pk' in str(reason)\n")

Fragment(uuid='e7cc8891-d5dc-46ff-acba-5f722e1008ce',
         path='/lib/dblayer/backend/base/database.py',
         lineno=318,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def is_primary_key_conflict(self, reason):\n'
              '        """ Returns True if the exception object might be due '
              'to the attempted\n'
              '        insertion of a conflicting primary key value. It can '
              'give false positives\n'
              '        without problems, those only degrade performance in '
              'rare exception cases\n'
              '        only.\n'
              '        """\n'
              "        return '__pk' in str(reason)\n")

Fragment(uuid='2019f192-8148-4c0b-b193-1a93c09e0fd5',
         path='/lib/dblayer/backend/base/database.py',
         lineno=319,
         depth=3,
         type='function',
         name='is_primary_key_conflict',
         text='def is_primary_key_conflict(self, reason):\n'
              '        """ Returns True if the exception object might be due '
              'to the attempted\n'
              '        insertion of a conflicting primary key value. It can '
              'give false positives\n'
              '        without problems, those only degrade performance in '
              'rare exception cases\n'
              '        only.\n'
              '        """\n'
              "        return '__pk' in str(reason)")

Fragment(uuid='36cd9ff2-f669-434b-b987-a68a7b5b965c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=320,
         depth=6,
         type='documentation',
         name='',
         text=' Returns True if the exception object might be due to the '
              'attempted\n'
              '        insertion of a conflicting primary key value. It can '
              'give false positives\n'
              '        without problems, those only degrade performance in '
              'rare exception cases\n'
              '        only.\n'
              '        ')

Fragment(uuid='bb58938b-3ee8-4f92-b3e0-f550b6eac40f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=326,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_last_value_of_last_sequence_used(self, cursor):\n'
              '        """ Returns the last value returned by the last '
              'sequence used\n'
              '        """\n'
              "        return self.execute_and_fetch_one(cursor, 'SELECT "
              "lastval();')[0]\n")

Fragment(uuid='2b3c3ac6-86d1-4023-9222-dd641379b39a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=326,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def get_last_value_of_last_sequence_used(self, cursor):\n'
              '        """ Returns the last value returned by the last '
              'sequence used\n'
              '        """\n'
              "        return self.execute_and_fetch_one(cursor, 'SELECT "
              "lastval();')[0]\n")

Fragment(uuid='6baa7bd4-3603-41d3-85d9-c7e4eefad69d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=327,
         depth=3,
         type='function',
         name='get_last_value_of_last_sequence_used',
         text='def get_last_value_of_last_sequence_used(self, cursor):\n'
              '        """ Returns the last value returned by the last '
              'sequence used\n'
              '        """\n'
              "        return self.execute_and_fetch_one(cursor, 'SELECT "
              "lastval();')[0]")

Fragment(uuid='643bf1c5-9cdd-4ab6-b5a5-4d51ec2cc207',
         path='/lib/dblayer/backend/base/database.py',
         lineno=328,
         depth=6,
         type='documentation',
         name='',
         text=' Returns the last value returned by the last sequence used\n'
              '        ')

Fragment(uuid='8d681f2d-6d0a-4d26-87b0-ac6b9e584225',
         path='/lib/dblayer/backend/base/database.py',
         lineno=331,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def add_record(self, record_class, record, generate_id, '
              'serial):\n'
              '        """ Inserts new record into the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='c9a40071-d4c0-42e2-a28a-bf7965dbb166',
         path='/lib/dblayer/backend/base/database.py',
         lineno=331,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def add_record(self, record_class, record, generate_id, '
              'serial):\n'
              '        """ Inserts new record into the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='fe2b237f-7b37-46cc-8835-f96938939d88',
         path='/lib/dblayer/backend/base/database.py',
         lineno=332,
         depth=3,
         type='function',
         name='add_record',
         text='def add_record(self, record_class, record, generate_id, '
              'serial):\n'
              '        """ Inserts new record into the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='d290a23e-b9b6-4694-81e5-2f909147888d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=333,
         depth=6,
         type='documentation',
         name='',
         text=' Inserts new record into the database\n        ')

Fragment(uuid='8c67735a-d90c-4ffb-8e7c-88d72e1a3da9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=337,
         depth=9,
         type='documentation',
         name='',
         text='Got record of unexpected type: %r')

Fragment(uuid='9c9700bd-f804-4d05-a912-19c1f2e6fe46',
         path='/lib/dblayer/backend/base/database.py',
         lineno=347,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We might need to generate another ID, so the '
              'retry loop\n')

Fragment(uuid='7b97c8bd-625e-45e1-8506-71fd7368c4cf',
         path='/lib/dblayer/backend/base/database.py',
         lineno=347,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We might need to generate another ID, so the '
              'retry loop\n')

Fragment(uuid='932831ae-92eb-4d54-9773-d9cabbab535d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=347,
         depth=3,
         type='function',
         name='add_record',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We might need to generate another ID, so the '
              'retry loop\n')

Fragment(uuid='8f1b1a03-0c69-4800-8690-ed58a0ed0e66',
         path='/lib/dblayer/backend/base/database.py',
         lineno=350,
         depth=5,
         type='documentation',
         name='',
         text='# We might need to generate another ID, so the retry loop')

Fragment(uuid='d6f51bc2-eb8a-4c05-8254-93c38bcc54d9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=351,
         depth=0,
         type='module',
         name='',
         text='            for retry in range(1, '
              'constants.MAX_INSERT_RETRY_COUNT):\n'
              '\n'
              '                try:\n')

Fragment(uuid='f1c4efe3-0f7b-46b1-bda1-a56a52863890',
         path='/lib/dblayer/backend/base/database.py',
         lineno=351,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='            for retry in range(1, '
              'constants.MAX_INSERT_RETRY_COUNT):\n'
              '\n'
              '                try:\n')

Fragment(uuid='559c1918-3320-4ad8-9558-ca5de178b91b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=351,
         depth=3,
         type='function',
         name='add_record',
         text='            for retry in range(1, '
              'constants.MAX_INSERT_RETRY_COUNT):\n'
              '\n'
              '                try:\n')

Fragment(uuid='9a1bf8ea-66b5-4717-b6d4-ca92f165d909',
         path='/lib/dblayer/backend/base/database.py',
         lineno=354,
         depth=0,
         type='module',
         name='',
         text='                    if not serial:\n')

Fragment(uuid='b5ac61e3-aebb-4e00-b867-0629fbd11753',
         path='/lib/dblayer/backend/base/database.py',
         lineno=354,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='                    if not serial:\n')

Fragment(uuid='d6cd9385-aec6-476c-9f75-1c78fe3364a9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=354,
         depth=3,
         type='function',
         name='add_record',
         text='                    if not serial:\n')

Fragment(uuid='4bdcd831-b0d5-41d5-9de3-49c70dd6852c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=355,
         depth=0,
         type='module',
         name='',
         text='                        if generate_id:\n'
              '                            record.id = util.get_random_id()\n'
              '                        elif constants.DEBUG:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                    parameter_tuple = '
              'record.tuple[truncate_id:]\n')

Fragment(uuid='c731a52c-da5a-469a-b5d7-d5005dbbad46',
         path='/lib/dblayer/backend/base/database.py',
         lineno=355,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='                        if generate_id:\n'
              '                            record.id = util.get_random_id()\n'
              '                        elif constants.DEBUG:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                    parameter_tuple = '
              'record.tuple[truncate_id:]\n')

Fragment(uuid='587ceed2-ed87-4239-8d0d-cf85d5cb8bcf',
         path='/lib/dblayer/backend/base/database.py',
         lineno=355,
         depth=3,
         type='function',
         name='add_record',
         text='                        if generate_id:\n'
              '                            record.id = util.get_random_id()\n'
              '                        elif constants.DEBUG:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                    parameter_tuple = '
              'record.tuple[truncate_id:]\n')

Fragment(uuid='620bdf5d-7fff-415c-b7c3-d88d9be78522',
         path='/lib/dblayer/backend/base/database.py',
         lineno=358,
         depth=18,
         type='documentation',
         name='',
         text='No record ID specified with ID generation disabled: %r')

Fragment(uuid='8de99e2c-a17c-4cfc-bf54-d31dc882bacb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=361,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                    if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                    self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '                except self.IntegrityError as reason:\n')

Fragment(uuid='2d8c18d7-0797-4106-8aaf-1c9265375407',
         path='/lib/dblayer/backend/base/database.py',
         lineno=361,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                    if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                    self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '                except self.IntegrityError as reason:\n')

Fragment(uuid='2ffdc5d8-c71c-4ece-a1c3-192aa8709403',
         path='/lib/dblayer/backend/base/database.py',
         lineno=361,
         depth=3,
         type='function',
         name='add_record',
         text='\n'
              '                    if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                    self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '                except self.IntegrityError as reason:\n')

Fragment(uuid='d50d4567-236e-48fc-91ae-eb51f165f968',
         path='/lib/dblayer/backend/base/database.py',
         lineno=368,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                    if not '
              'self.is_primary_key_conflict(reason):\n'
              '                        raise\n')

Fragment(uuid='2886cfa0-49d7-4a27-b4af-e840a382e79f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=368,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                    if not '
              'self.is_primary_key_conflict(reason):\n'
              '                        raise\n')

Fragment(uuid='19b89c5e-f7d0-48b9-95f2-f7e7cfdb5107',
         path='/lib/dblayer/backend/base/database.py',
         lineno=368,
         depth=3,
         type='function',
         name='add_record',
         text='\n'
              '                    if not '
              'self.is_primary_key_conflict(reason):\n'
              '                        raise\n')

Fragment(uuid='a150467f-cde4-47fe-9980-2c9492d1894e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=371,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                    if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                else:\n')

Fragment(uuid='48a31955-0aba-4244-b02e-b0b175d81ad3',
         path='/lib/dblayer/backend/base/database.py',
         lineno=371,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                    if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                else:\n')

Fragment(uuid='5544285b-c1eb-422d-8c96-de92baf443a4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=371,
         depth=3,
         type='function',
         name='add_record',
         text='\n'
              '                    if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                else:\n')

Fragment(uuid='482d473b-1990-4601-83e3-13b97b733b33',
         path='/lib/dblayer/backend/base/database.py',
         lineno=376,
         depth=0,
         type='module',
         name='',
         text='                    if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '                    # Fill in id field of record object\n')

Fragment(uuid='4dab4c16-c804-4d36-9475-e5d3be5d5b8a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=376,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='                    if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '                    # Fill in id field of record object\n')

Fragment(uuid='5fd74e84-eb6b-4c1b-b212-29049ca90af2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=376,
         depth=3,
         type='function',
         name='add_record',
         text='                    if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                        self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '                    # Fill in id field of record object\n')

Fragment(uuid='b0893338-aa97-41cc-aabe-a33eeafdcb7f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=379,
         depth=11,
         type='documentation',
         name='',
         text='# Fill in id field of record object')

Fragment(uuid='48b05e0f-1ca5-49c1-93b0-ba66fcc14fbb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=380,
         depth=0,
         type='module',
         name='',
         text='                    if serial:\n'
              '                        record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '\n'
              '                    return\n'
              '\n'
              '            # Reproduce the error, it will re-raise the '
              'exception\n'
              '            self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '            # Fill in id field of record object\n')

Fragment(uuid='bc03e118-b38e-4028-b546-2b5d7be9b6ac',
         path='/lib/dblayer/backend/base/database.py',
         lineno=380,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='                    if serial:\n'
              '                        record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '\n'
              '                    return\n'
              '\n'
              '            # Reproduce the error, it will re-raise the '
              'exception\n'
              '            self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '            # Fill in id field of record object\n')

Fragment(uuid='30cbcc3e-dfe7-4627-97bb-d76bc3400ec5',
         path='/lib/dblayer/backend/base/database.py',
         lineno=380,
         depth=3,
         type='function',
         name='add_record',
         text='                    if serial:\n'
              '                        record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '\n'
              '                    return\n'
              '\n'
              '            # Reproduce the error, it will re-raise the '
              'exception\n'
              '            self.execute(cursor, sql, parameter_tuple)\n'
              '\n'
              '            # Fill in id field of record object\n')

Fragment(uuid='3ac4e30d-2f04-436e-b1d8-7eb910dc89e9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=385,
         depth=6,
         type='documentation',
         name='',
         text='# Reproduce the error, it will re-raise the exception')

Fragment(uuid='eb89e512-607c-4251-b5d1-b65db9d68517',
         path='/lib/dblayer/backend/base/database.py',
         lineno=388,
         depth=6,
         type='documentation',
         name='',
         text='# Fill in id field of record object')

Fragment(uuid='a91a0d14-79ba-423d-89ed-37ddfe09d2d4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=389,
         depth=0,
         type='module',
         name='',
         text='            if serial:\n'
              '                record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n')

Fragment(uuid='1282598d-482c-40e6-87b7-5cf7b836f226',
         path='/lib/dblayer/backend/base/database.py',
         lineno=389,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='            if serial:\n'
              '                record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n')

Fragment(uuid='822d9649-4a4e-4946-8a87-99faa9a568b5',
         path='/lib/dblayer/backend/base/database.py',
         lineno=389,
         depth=3,
         type='function',
         name='add_record',
         text='            if serial:\n'
              '                record.id = '
              'self.get_last_value_of_last_sequence_used(cursor)')

Fragment(uuid='78c95041-0533-475f-abef-c75e5134e699',
         path='/lib/dblayer/backend/base/database.py',
         lineno=391,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def add_record_list(self, record_class, record_list, '
              'generate_id, serial):\n'
              '        """ Inserts a list of records of the same type into the '
              'database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.add_record(record_class, record_list[0], '
              'generate_id, serial)\n'
              '            return\n')

Fragment(uuid='99c96159-8df5-46f2-b87a-33f31dd2d9b9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=391,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def add_record_list(self, record_class, record_list, '
              'generate_id, serial):\n'
              '        """ Inserts a list of records of the same type into the '
              'database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.add_record(record_class, record_list[0], '
              'generate_id, serial)\n'
              '            return\n')

Fragment(uuid='b1ab7e79-ac35-4792-884b-cb96b9b6ed16',
         path='/lib/dblayer/backend/base/database.py',
         lineno=392,
         depth=3,
         type='function',
         name='add_record_list',
         text='def add_record_list(self, record_class, record_list, '
              'generate_id, serial):\n'
              '        """ Inserts a list of records of the same type into the '
              'database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.add_record(record_class, record_list[0], '
              'generate_id, serial)\n'
              '            return\n')

Fragment(uuid='9a27ea75-070d-46a3-a5ed-5ea3a75187e6',
         path='/lib/dblayer/backend/base/database.py',
         lineno=393,
         depth=6,
         type='documentation',
         name='',
         text=' Inserts a list of records of the same type into the database\n'
              '        ')

Fragment(uuid='53d4ba87-a641-40aa-9ff6-2b7f9d070d8d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=404,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '            record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='d542d29e-0bc0-45b0-8da6-b2c61097dd34',
         path='/lib/dblayer/backend/base/database.py',
         lineno=404,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '            record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='8634437d-ad43-4023-8607-a06ffdc39fce',
         path='/lib/dblayer/backend/base/database.py',
         lineno=404,
         depth=3,
         type='function',
         name='add_record_list',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              '            record.finalize()\n'
              '\n'
              '        table_name = record_class._table_name\n'
              '        truncate_id = 1 if serial else 0\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(table_name,),\n'
              '            '
              'field_list=record_class._column_name_list[truncate_id:])\n'
              '        sql = self._format.format_insert(clauses)\n')

Fragment(uuid='45ee5e66-ef7d-4bb0-a290-a5634409422c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=407,
         depth=11,
         type='documentation',
         name='',
         text='Got record of unexpected type: %r')

Fragment(uuid='d78bf0e8-d4f3-4120-9e19-80f0cca487b7',
         path='/lib/dblayer/backend/base/database.py',
         lineno=416,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We need to catch conflicting ID values (rare, but '
              'possible)\n'
              '            try:\n'
              '                if not serial:\n'
              '                    if generate_id:\n')

Fragment(uuid='b0133647-8ba9-4702-b2d6-0a626e6409b3',
         path='/lib/dblayer/backend/base/database.py',
         lineno=416,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We need to catch conflicting ID values (rare, but '
              'possible)\n'
              '            try:\n'
              '                if not serial:\n'
              '                    if generate_id:\n')

Fragment(uuid='109b259e-df30-4b23-8ddb-369e747b5367',
         path='/lib/dblayer/backend/base/database.py',
         lineno=416,
         depth=3,
         type='function',
         name='add_record_list',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '\n'
              '            # We need to catch conflicting ID values (rare, but '
              'possible)\n'
              '            try:\n'
              '                if not serial:\n'
              '                    if generate_id:\n')

Fragment(uuid='2a84f5bc-0262-497b-b998-35683844f3b1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=419,
         depth=5,
         type='documentation',
         name='',
         text='# We need to catch conflicting ID values (rare, but possible)')

Fragment(uuid='2979339d-1fc2-4f57-8866-7a0a5501542e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=423,
         depth=0,
         type='module',
         name='',
         text='                        for record in record_list:\n'
              '                            record.id = util.get_random_id()\n'
              '                    elif constants.DEBUG:\n')

Fragment(uuid='4bb9c655-6111-45d5-bff1-56f9e6c4644b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=423,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='                        for record in record_list:\n'
              '                            record.id = util.get_random_id()\n'
              '                    elif constants.DEBUG:\n')

Fragment(uuid='7b859a74-4c5b-44aa-93c7-04891693604d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=423,
         depth=3,
         type='function',
         name='add_record_list',
         text='                        for record in record_list:\n'
              '                            record.id = util.get_random_id()\n'
              '                    elif constants.DEBUG:\n')

Fragment(uuid='726ea448-b9ef-4796-b80c-6ee7defa9044',
         path='/lib/dblayer/backend/base/database.py',
         lineno=426,
         depth=0,
         type='module',
         name='',
         text='                        for record in record_list:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                parameter_tuple_list = '
              '[record.tuple[truncate_id:] for record in record_list]\n')

Fragment(uuid='b608f45e-09a2-4859-9349-7863d2f67487',
         path='/lib/dblayer/backend/base/database.py',
         lineno=426,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='                        for record in record_list:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                parameter_tuple_list = '
              '[record.tuple[truncate_id:] for record in record_list]\n')

Fragment(uuid='d9bef474-f650-4b26-9953-a334ee17b3bd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=426,
         depth=3,
         type='function',
         name='add_record_list',
         text='                        for record in record_list:\n'
              "                            assert record.id, 'No record ID "
              "specified with ID generation disabled: %r' % record\n"
              '\n'
              '                parameter_tuple_list = '
              '[record.tuple[truncate_id:] for record in record_list]\n')

Fragment(uuid='d805d56f-7711-40a7-aa56-6794be1f95df',
         path='/lib/dblayer/backend/base/database.py',
         lineno=427,
         depth=18,
         type='documentation',
         name='',
         text='No record ID specified with ID generation disabled: %r')

Fragment(uuid='7b559b74-b974-4338-9b7b-94c7dd580544',
         path='/lib/dblayer/backend/base/database.py',
         lineno=430,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '            except self.IntegrityError:\n')

Fragment(uuid='29c319d6-4dee-49b0-8faf-22e42fdc9813',
         path='/lib/dblayer/backend/base/database.py',
         lineno=430,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '            except self.IntegrityError:\n')

Fragment(uuid='247659d5-0386-42f1-9a22-0554c5d5a5e5',
         path='/lib/dblayer/backend/base/database.py',
         lineno=430,
         depth=3,
         type='function',
         name='add_record_list',
         text='\n'
              '                if self._SQL_IDENTITY_INSERT_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_SAVEPOINT)\n'
              '\n'
              '                self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '            except self.IntegrityError:\n')

Fragment(uuid='2ec34601-2df6-40fd-8f6a-129e312bd6d1',
         path='/lib/dblayer/backend/base/database.py',
         lineno=437,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                # Split the record list into two parts and try '
              'again\n'
              '                split_index = len(record_list) // 2\n'
              '                self.add_record_list(record_class, '
              'record_list[:split_index], generate_id, serial)\n'
              '                self.add_record_list(record_class, '
              'record_list[split_index:], generate_id, serial)\n'
              '\n'
              '            else:\n')

Fragment(uuid='d29c464b-1c5c-4be4-b4f8-a26aacb6258b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=437,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                # Split the record list into two parts and try '
              'again\n'
              '                split_index = len(record_list) // 2\n'
              '                self.add_record_list(record_class, '
              'record_list[:split_index], generate_id, serial)\n'
              '                self.add_record_list(record_class, '
              'record_list[split_index:], generate_id, serial)\n'
              '\n'
              '            else:\n')

Fragment(uuid='18d726a3-c7b4-4931-8a75-9a08fb2612d0',
         path='/lib/dblayer/backend/base/database.py',
         lineno=437,
         depth=3,
         type='function',
         name='add_record_list',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT)\n'
              '\n'
              '                # Split the record list into two parts and try '
              'again\n'
              '                split_index = len(record_list) // 2\n'
              '                self.add_record_list(record_class, '
              'record_list[:split_index], generate_id, serial)\n'
              '                self.add_record_list(record_class, '
              'record_list[split_index:], generate_id, serial)\n'
              '\n'
              '            else:\n')

Fragment(uuid='56c33fe7-d1cc-4267-9e3c-513d415094ee',
         path='/lib/dblayer/backend/base/database.py',
         lineno=441,
         depth=9,
         type='documentation',
         name='',
         text='# Split the record list into two parts and try again')

Fragment(uuid='a81d658d-1a61-4891-8487-a28ab15725de',
         path='/lib/dblayer/backend/base/database.py',
         lineno=447,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '            # Fill in id field of each record object\n')

Fragment(uuid='d486f18d-c7fa-494a-ae5c-09f55758035a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=447,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '            # Fill in id field of each record object\n')

Fragment(uuid='51171fa0-890c-4186-884e-cc66cb6bfffb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=447,
         depth=3,
         type='function',
         name='add_record_list',
         text='\n'
              '                if '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT:\n'
              '                    self.execute(cursor, '
              'self._SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT)\n'
              '\n'
              '            # Fill in id field of each record object\n')

Fragment(uuid='ebcb6246-051f-4b6b-83ef-8593ef8e9a66',
         path='/lib/dblayer/backend/base/database.py',
         lineno=451,
         depth=6,
         type='documentation',
         name='',
         text='# Fill in id field of each record object')

Fragment(uuid='a47cbad8-d08f-4a13-9da2-c20330536557',
         path='/lib/dblayer/backend/base/database.py',
         lineno=452,
         depth=0,
         type='module',
         name='',
         text='            if serial:\n'
              '                last_id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '                first_id = last_id - len(record_list) + 1\n')

Fragment(uuid='b3c4552a-cc45-4e30-87c8-ce4af0aa1a70',
         path='/lib/dblayer/backend/base/database.py',
         lineno=452,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='            if serial:\n'
              '                last_id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '                first_id = last_id - len(record_list) + 1\n')

Fragment(uuid='fdd06e67-7519-44b8-b5f5-78ada61e975e',
         path='/lib/dblayer/backend/base/database.py',
         lineno=452,
         depth=3,
         type='function',
         name='add_record_list',
         text='            if serial:\n'
              '                last_id = '
              'self.get_last_value_of_last_sequence_used(cursor)\n'
              '                first_id = last_id - len(record_list) + 1\n')

Fragment(uuid='7de18a14-17f9-4881-91af-f36ccd95ac64',
         path='/lib/dblayer/backend/base/database.py',
         lineno=455,
         depth=0,
         type='module',
         name='',
         text='                for record_index, record in '
              'enumerate(record_list):\n'
              '                    record.id = first_id + record_index\n'
              '\n'
              '    ### Update query helpers\n')

Fragment(uuid='0fbef4dc-6847-478e-b933-ab2a41094b7d',
         path='/lib/dblayer/backend/base/database.py',
         lineno=455,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='                for record_index, record in '
              'enumerate(record_list):\n'
              '                    record.id = first_id + record_index\n'
              '\n'
              '    ### Update query helpers\n')

Fragment(uuid='4fe03589-832a-41bc-8a97-0b4fa59d8b38',
         path='/lib/dblayer/backend/base/database.py',
         lineno=455,
         depth=3,
         type='function',
         name='add_record_list',
         text='                for record_index, record in '
              'enumerate(record_list):\n'
              '                    record.id = first_id + record_index')

Fragment(uuid='a7f73262-cb9b-4542-bc9a-2d6c4ff95e42',
         path='/lib/dblayer/backend/base/database.py',
         lineno=458,
         depth=2,
         type='documentation',
         name='',
         text='### Update query helpers')

Fragment(uuid='2723081f-b5f1-40f5-8102-52f935abb2ad',
         path='/lib/dblayer/backend/base/database.py',
         lineno=459,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def update_record(self, record_class, record):\n'
              '        """ Updates a record already in the database\n'
              '        """\n')

Fragment(uuid='830b678c-dc5c-4fc5-881d-2bd721a99aa9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=459,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def update_record(self, record_class, record):\n'
              '        """ Updates a record already in the database\n'
              '        """\n')

Fragment(uuid='464570e2-ed38-45c7-b1a4-4f25ccb517ad',
         path='/lib/dblayer/backend/base/database.py',
         lineno=460,
         depth=3,
         type='function',
         name='update_record',
         text='def update_record(self, record_class, record):\n'
              '        """ Updates a record already in the database\n'
              '        """\n')

Fragment(uuid='4f0e5572-43fd-4391-bd9e-30d73647e186',
         path='/lib/dblayer/backend/base/database.py',
         lineno=461,
         depth=6,
         type='documentation',
         name='',
         text=' Updates a record already in the database\n        ')

Fragment(uuid='d8665fe5-84e4-4a73-9730-ef025d3773cb',
         path='/lib/dblayer/backend/base/database.py',
         lineno=463,
         depth=0,
         type='module',
         name='',
         text='        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "            assert record.id is not None, 'Cannot update record "
              "which has not been added to the database!'\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple = record.tuple[1:] + (record.id,)\n')

Fragment(uuid='ea4a54a5-47d6-4b2d-b604-f0270fe03c55',
         path='/lib/dblayer/backend/base/database.py',
         lineno=463,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "            assert record.id is not None, 'Cannot update record "
              "which has not been added to the database!'\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple = record.tuple[1:] + (record.id,)\n')

Fragment(uuid='17bd6dc5-1ea1-41a7-aab4-df0bfd2fe9b4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=463,
         depth=3,
         type='function',
         name='update_record',
         text='        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              "            assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "            assert record.id is not None, 'Cannot update record "
              "which has not been added to the database!'\n"
              '\n'
              '        record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple = record.tuple[1:] + (record.id,)\n')

Fragment(uuid='ca34b4ef-3b9c-4515-a564-9b449fea6c82',
         path='/lib/dblayer/backend/base/database.py',
         lineno=465,
         depth=9,
         type='documentation',
         name='',
         text='Got record of unexpected type: %r')

Fragment(uuid='75f5b1ef-ee07-4758-a31c-8cfbf87ca255',
         path='/lib/dblayer/backend/base/database.py',
         lineno=466,
         depth=8,
         type='documentation',
         name='',
         text='Cannot update record which has not been added to the database!')

Fragment(uuid='1c746da0-b368-45b7-8dce-3c1aafffc98b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=477,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)\n')

Fragment(uuid='29a333e0-1d2f-4cb7-8a68-22dc66b40d0c',
         path='/lib/dblayer/backend/base/database.py',
         lineno=477,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)\n')

Fragment(uuid='d0d5f951-019e-4208-a8a4-98de0f4eb358',
         path='/lib/dblayer/backend/base/database.py',
         lineno=477,
         depth=3,
         type='function',
         name='update_record',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)')

Fragment(uuid='6b59acb5-1456-4130-8487-421b0297bb17',
         path='/lib/dblayer/backend/base/database.py',
         lineno=480,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def update_record_list(self, record_class, record_list):\n'
              '        """ Updates a list of records already in the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.update_record(record_class, record_list[0])\n'
              '            return\n')

Fragment(uuid='8b3f63ba-7efe-4a3d-bf65-e232f743eb99',
         path='/lib/dblayer/backend/base/database.py',
         lineno=480,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def update_record_list(self, record_class, record_list):\n'
              '        """ Updates a list of records already in the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.update_record(record_class, record_list[0])\n'
              '            return\n')

Fragment(uuid='f40ae1f9-9786-4dc5-88ba-996230ac3f20',
         path='/lib/dblayer/backend/base/database.py',
         lineno=481,
         depth=3,
         type='function',
         name='update_record_list',
         text='def update_record_list(self, record_class, record_list):\n'
              '        """ Updates a list of records already in the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        if not record_list:\n'
              '            return\n'
              '\n'
              '        if len(record_list) == 1:\n'
              '            self.update_record(record_class, record_list[0])\n'
              '            return\n')

Fragment(uuid='3aedf0cf-606a-4fc6-a981-80a374b4ef09',
         path='/lib/dblayer/backend/base/database.py',
         lineno=482,
         depth=6,
         type='documentation',
         name='',
         text=' Updates a list of records already in the database\n        ')

Fragment(uuid='22b0019b-ae63-4940-bf38-a875e5104bc5',
         path='/lib/dblayer/backend/base/database.py',
         lineno=493,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "                assert record.id is not None, 'Cannot update "
              "record which has not been added to the database!'\n"
              '            record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            record.tuple[1:] + (record.id,)\n')

Fragment(uuid='536dc988-26c2-489e-bbee-99510ca79e80',
         path='/lib/dblayer/backend/base/database.py',
         lineno=493,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "                assert record.id is not None, 'Cannot update "
              "record which has not been added to the database!'\n"
              '            record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            record.tuple[1:] + (record.id,)\n')

Fragment(uuid='c85986ec-d253-4177-8633-1ab4864d7c43',
         path='/lib/dblayer/backend/base/database.py',
         lineno=493,
         depth=3,
         type='function',
         name='update_record_list',
         text='\n'
              '        for record in record_list:\n'
              '            if constants.DEBUG:\n'
              "                assert isinstance(record, record_class), 'Got "
              "record of unexpected type: %r' % (record,)\n"
              "                assert record.id is not None, 'Cannot update "
              "record which has not been added to the database!'\n"
              '            record.finalize()\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              '            field_list=record_class._column_name_list[1:],\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_update(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            record.tuple[1:] + (record.id,)\n')

Fragment(uuid='937a6c48-185b-4f6a-9d25-bce6d9683768',
         path='/lib/dblayer/backend/base/database.py',
         lineno=496,
         depth=11,
         type='documentation',
         name='',
         text='Got record of unexpected type: %r')

Fragment(uuid='58b74e9e-e6d6-465c-8a55-522aace23588',
         path='/lib/dblayer/backend/base/database.py',
         lineno=497,
         depth=10,
         type='documentation',
         name='',
         text='Cannot update record which has not been added to the database!')

Fragment(uuid='f3f880bb-db0e-4f84-97c0-7bc5057f2161',
         path='/lib/dblayer/backend/base/database.py',
         lineno=508,
         depth=0,
         type='module',
         name='',
         text='            for record in record_list]\n')

Fragment(uuid='6cab00cf-d562-4469-971e-7ced48f411da',
         path='/lib/dblayer/backend/base/database.py',
         lineno=508,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='            for record in record_list]\n')

Fragment(uuid='06d16ec8-1213-4e5e-bed3-562e80358598',
         path='/lib/dblayer/backend/base/database.py',
         lineno=508,
         depth=3,
         type='function',
         name='update_record_list',
         text='            for record in record_list]\n')

Fragment(uuid='2f65a4cd-7bb2-479e-a2b0-9a445df31333',
         path='/lib/dblayer/backend/base/database.py',
         lineno=509,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '    ### Delete query helpers\n')

Fragment(uuid='97684ffd-4c21-4c98-a5a4-fa9930858de0',
         path='/lib/dblayer/backend/base/database.py',
         lineno=509,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '    ### Delete query helpers\n')

Fragment(uuid='7eff904c-62ea-43b8-8e46-cce918ea4638',
         path='/lib/dblayer/backend/base/database.py',
         lineno=509,
         depth=3,
         type='function',
         name='update_record_list',
         text='\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, parameter_tuple_list)')

Fragment(uuid='e36d7a53-f9be-46fd-8eb8-9cef53012ad4',
         path='/lib/dblayer/backend/base/database.py',
         lineno=513,
         depth=2,
         type='documentation',
         name='',
         text='### Delete query helpers')

Fragment(uuid='fc2b0e70-4134-42eb-9113-6cababad0632',
         path='/lib/dblayer/backend/base/database.py',
         lineno=514,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def delete_record(self, record_class, record_or_id):\n'
              '        """ Deletes a record from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple = (record_or_id.id if '
              'isinstance(record_or_id, record_class) else record_or_id,)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)\n')

Fragment(uuid='f3ee64e8-52f9-41d0-8b71-a62540be4acd',
         path='/lib/dblayer/backend/base/database.py',
         lineno=514,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def delete_record(self, record_class, record_or_id):\n'
              '        """ Deletes a record from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple = (record_or_id.id if '
              'isinstance(record_or_id, record_class) else record_or_id,)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)\n')

Fragment(uuid='007ad7e9-a260-43eb-9a6d-91c1887b93f9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=515,
         depth=3,
         type='function',
         name='delete_record',
         text='def delete_record(self, record_class, record_or_id):\n'
              '        """ Deletes a record from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple = (record_or_id.id if '
              'isinstance(record_or_id, record_class) else record_or_id,)\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute(cursor, sql, parameter_tuple)')

Fragment(uuid='3e1eb334-d412-40d3-a580-deb9e8a4da1a',
         path='/lib/dblayer/backend/base/database.py',
         lineno=516,
         depth=6,
         type='documentation',
         name='',
         text=' Deletes a record from the database\n        ')

Fragment(uuid='6b285cf2-98b2-424d-9f86-0ef6d12dacff',
         path='/lib/dblayer/backend/base/database.py',
         lineno=530,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def delete_record_list(self, record_class, '
              'record_or_id_list):\n'
              '        """ Deletes a list of records from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            (record_or_id.id if isinstance(record_or_id, '
              'record_class) else record_or_id,)\n'
              '            for record_or_id in record_or_id_list]\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '    ### Create helpers\n')

Fragment(uuid='8b79a8b9-138b-4391-bd8c-4624fa85cfb3',
         path='/lib/dblayer/backend/base/database.py',
         lineno=530,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def delete_record_list(self, record_class, '
              'record_or_id_list):\n'
              '        """ Deletes a list of records from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            (record_or_id.id if isinstance(record_or_id, '
              'record_class) else record_or_id,)\n'
              '            for record_or_id in record_or_id_list]\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, '
              'parameter_tuple_list)\n'
              '\n'
              '    ### Create helpers\n')

Fragment(uuid='fa5244fd-3f75-42d5-b17a-3e525040c130',
         path='/lib/dblayer/backend/base/database.py',
         lineno=531,
         depth=3,
         type='function',
         name='delete_record_list',
         text='def delete_record_list(self, record_class, record_or_id_list):\n'
              '        """ Deletes a list of records from the database\n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert issubclass(record_class, '
              'dblayer.backend.base.record.Record)\n'
              '\n'
              '        clauses = self.Clauses(\n'
              '            table_list=(record_class._table_name,),\n'
              "            where='id = ?')\n"
              '        sql = self._format.format_delete(clauses)\n'
              '\n'
              '        parameter_tuple_list = [\n'
              '            (record_or_id.id if isinstance(record_or_id, '
              'record_class) else record_or_id,)\n'
              '            for record_or_id in record_or_id_list]\n'
              '\n'
              '        with self.cursor() as cursor:\n'
              '            self.executemany(cursor, sql, parameter_tuple_list)')

Fragment(uuid='677a0995-d773-491c-a21b-edea74d11abf',
         path='/lib/dblayer/backend/base/database.py',
         lineno=532,
         depth=6,
         type='documentation',
         name='',
         text=' Deletes a list of records from the database\n        ')

Fragment(uuid='fc5b65b8-5cf8-46c4-b63a-0a2eef05b649',
         path='/lib/dblayer/backend/base/database.py',
         lineno=550,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def create_language(self, language, ignore_errors=True):\n'
              '        """ Creates a procedural language\n'
              '        """\n'
              '        with self.cursor() as cursor:\n'
              "            statement_list = [('CREATE LANGUAGE %s' % "
              'self._format.quote_name(language), ())]\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '\n'
              '    ### Debug helpers\n')

Fragment(uuid='aacbb50e-6ff6-46c1-9fc0-d601307fa205',
         path='/lib/dblayer/backend/base/database.py',
         lineno=550,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def create_language(self, language, ignore_errors=True):\n'
              '        """ Creates a procedural language\n'
              '        """\n'
              '        with self.cursor() as cursor:\n'
              "            statement_list = [('CREATE LANGUAGE %s' % "
              'self._format.quote_name(language), ())]\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '\n'
              '    ### Debug helpers\n')

Fragment(uuid='c7beae5a-0768-43e3-8f5b-a674b66f7aa2',
         path='/lib/dblayer/backend/base/database.py',
         lineno=551,
         depth=3,
         type='function',
         name='create_language',
         text='def create_language(self, language, ignore_errors=True):\n'
              '        """ Creates a procedural language\n'
              '        """\n'
              '        with self.cursor() as cursor:\n'
              "            statement_list = [('CREATE LANGUAGE %s' % "
              'self._format.quote_name(language), ())]\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='444d3da3-c413-4345-bc29-9a6b562f7e7b',
         path='/lib/dblayer/backend/base/database.py',
         lineno=552,
         depth=6,
         type='documentation',
         name='',
         text=' Creates a procedural language\n        ')

Fragment(uuid='d8f3e023-0bff-4319-a7d3-2d4224cb579f',
         path='/lib/dblayer/backend/base/database.py',
         lineno=559,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def log_analysis(self, cursor, sql, parameter_tuple):\n'
              '        """ Logs analysis of an SQL statement\n'
              '        """\n'
              "        cursor.execute('EXPLAIN ' + sql, parameter_tuple)\n"
              '        util.log(\n'
              "            'Analyzing query:\\n'\n"
              "            '%s\\n'\n"
              "            'With parameters: %r\\n'\n"
              "            '%s',\n"
              '            sql,\n'
              '            parameter_tuple,\n'
              "            '\\n'.join(row[0] for row in cursor.fetchall()))\n")

Fragment(uuid='df26ccac-fd49-49e0-bb42-311c1ea16d47',
         path='/lib/dblayer/backend/base/database.py',
         lineno=559,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='\n'
              '    def log_analysis(self, cursor, sql, parameter_tuple):\n'
              '        """ Logs analysis of an SQL statement\n'
              '        """\n'
              "        cursor.execute('EXPLAIN ' + sql, parameter_tuple)\n"
              '        util.log(\n'
              "            'Analyzing query:\\n'\n"
              "            '%s\\n'\n"
              "            'With parameters: %r\\n'\n"
              "            '%s',\n"
              '            sql,\n'
              '            parameter_tuple,\n'
              "            '\\n'.join(row[0] for row in cursor.fetchall()))")

Fragment(uuid='fc425647-9fec-4290-996d-f3e9aead7297',
         path='/lib/dblayer/backend/base/database.py',
         lineno=560,
         depth=3,
         type='function',
         name='log_analysis',
         text='def log_analysis(self, cursor, sql, parameter_tuple):\n'
              '        """ Logs analysis of an SQL statement\n'
              '        """\n'
              "        cursor.execute('EXPLAIN ' + sql, parameter_tuple)\n"
              '        util.log(\n'
              "            'Analyzing query:\\n'\n"
              "            '%s\\n'\n"
              "            'With parameters: %r\\n'\n"
              "            '%s',\n"
              '            sql,\n'
              '            parameter_tuple,\n'
              "            '\\n'.join(row[0] for row in cursor.fetchall()))")

Fragment(uuid='49268919-d8ef-40ec-b708-68bbab0e4de9',
         path='/lib/dblayer/backend/base/database.py',
         lineno=561,
         depth=6,
         type='documentation',
         name='',
         text=' Logs analysis of an SQL statement\n        ')

Fragment(uuid='368c7483-c123-4438-bfe6-441ff324b1e7',
         path='/lib/dblayer/backend/base/database.py',
         lineno=567,
         depth=9,
         type='documentation',
         name='',
         text='With parameters: %r\\n')

Fragment(uuid='75ee8068-799a-401a-8796-db82d052e4e0',
         path='/lib/dblayer/backend/base/error.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Exception classes (errors)\n"""\n')

Fragment(uuid='b443abf3-4ae0-4470-8dd3-7c5d1cbfe932',
         path='/lib/dblayer/backend/base/error.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Exception classes (errors)\n')

Fragment(uuid='de7148c7-a976-4399-bb89-f8d3926c7aeb',
         path='/lib/dblayer/backend/base/error.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/base/error.py\n'
              '  Classes: DataError DatabaseError Error IntegrityError '
              'InterfaceError InternalError NotSupportedError OperationalError '
              'ProgrammingError Warning\n'
              '  Variables and usages: Exception\n')

Fragment(uuid='29841fbe-ab1d-4913-a576-76c1eabd9522',
         path='/lib/dblayer/backend/base/error.py',
         lineno=3,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Warning(Exception):\n'
              '    """ Database warning\n'
              '    """\n')

Fragment(uuid='36c116ce-b29f-4709-a3f6-e9e72731dbef',
         path='/lib/dblayer/backend/base/error.py',
         lineno=5,
         depth=1,
         type='class',
         name='Warning',
         text='class Warning(Exception):\n    """ Database warning\n    """')

Fragment(uuid='ae039fa1-65c4-4fc5-b1de-264ed3e6e3dc',
         path='/lib/dblayer/backend/base/error.py',
         lineno=6,
         depth=4,
         type='documentation',
         name='',
         text=' Database warning\n    ')

Fragment(uuid='62e84a27-faeb-4add-a256-ff8d8040cb41',
         path='/lib/dblayer/backend/base/error.py',
         lineno=8,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Error(Exception):\n'
              '    """ Base class for error exceptions\n'
              '    """\n')

Fragment(uuid='e375127d-d612-4809-bcec-8987e52f6322',
         path='/lib/dblayer/backend/base/error.py',
         lineno=10,
         depth=1,
         type='class',
         name='Error',
         text='class Error(Exception):\n'
              '    """ Base class for error exceptions\n'
              '    """')

Fragment(uuid='445c6249-52e9-4d68-b3f9-6af1e2cb3070',
         path='/lib/dblayer/backend/base/error.py',
         lineno=11,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for error exceptions\n    ')

Fragment(uuid='8883d3d3-8903-46e5-8d55-116719a1d7b7',
         path='/lib/dblayer/backend/base/error.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class InterfaceError(Error):\n'
              '    """ Error related to the database interface\n'
              '    """\n')

Fragment(uuid='2ac4eb6b-8f36-46fc-82f2-487837b13afa',
         path='/lib/dblayer/backend/base/error.py',
         lineno=15,
         depth=1,
         type='class',
         name='InterfaceError',
         text='class InterfaceError(Error):\n'
              '    """ Error related to the database interface\n'
              '    """')

Fragment(uuid='f1d60683-285d-454f-b392-ffc9218d8b52',
         path='/lib/dblayer/backend/base/error.py',
         lineno=16,
         depth=4,
         type='documentation',
         name='',
         text=' Error related to the database interface\n    ')

Fragment(uuid='270d54bf-e57f-49e5-844a-e06719907326',
         path='/lib/dblayer/backend/base/error.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class DatabaseError(Error):\n'
              '    """ Error related to the database engine\n'
              '    """\n')

Fragment(uuid='2369b934-aea4-4c37-9532-cb57d8ed8ed3',
         path='/lib/dblayer/backend/base/error.py',
         lineno=20,
         depth=1,
         type='class',
         name='DatabaseError',
         text='class DatabaseError(Error):\n'
              '    """ Error related to the database engine\n'
              '    """')

Fragment(uuid='78bc0ebe-67cf-4f42-b5ad-d566e87fe54d',
         path='/lib/dblayer/backend/base/error.py',
         lineno=21,
         depth=4,
         type='documentation',
         name='',
         text=' Error related to the database engine\n    ')

Fragment(uuid='f0f5f904-8c9f-4dd0-9e32-d96eb3224b48',
         path='/lib/dblayer/backend/base/error.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class DataError(DatabaseError):\n'
              '    """ Error related to problems with the processed data\n'
              '    """\n')

Fragment(uuid='b62a8d06-3b89-40e8-a7c0-edae94a97983',
         path='/lib/dblayer/backend/base/error.py',
         lineno=25,
         depth=1,
         type='class',
         name='DataError',
         text='class DataError(DatabaseError):\n'
              '    """ Error related to problems with the processed data\n'
              '    """')

Fragment(uuid='644edc25-1fa3-481f-8cd9-f96fd697f2e6',
         path='/lib/dblayer/backend/base/error.py',
         lineno=26,
         depth=4,
         type='documentation',
         name='',
         text=' Error related to problems with the processed data\n    ')

Fragment(uuid='ef5114f0-4e5d-4917-aac9-c2771f84d0a6',
         path='/lib/dblayer/backend/base/error.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class OperationalError(DatabaseError):\n'
              '    """ Error related to database operation (disconnect, memory '
              'allocation etc)\n'
              '    """\n')

Fragment(uuid='2ca5d4ed-40be-44ae-9780-ffeba3c61e3f',
         path='/lib/dblayer/backend/base/error.py',
         lineno=30,
         depth=1,
         type='class',
         name='OperationalError',
         text='class OperationalError(DatabaseError):\n'
              '    """ Error related to database operation (disconnect, memory '
              'allocation etc)\n'
              '    """')

Fragment(uuid='7f1be909-6f76-4271-b561-0a85452c3f2c',
         path='/lib/dblayer/backend/base/error.py',
         lineno=31,
         depth=4,
         type='documentation',
         name='',
         text=' Error related to database operation (disconnect, memory '
              'allocation etc)\n'
              '    ')

Fragment(uuid='8f8a0154-d603-4004-95fd-742904497d9e',
         path='/lib/dblayer/backend/base/error.py',
         lineno=33,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class IntegrityError(DatabaseError):\n'
              '    """ Error related to database integrity\n'
              '    """\n')

Fragment(uuid='fb6f72d0-6cae-4457-9bc0-ffeb45a34b6c',
         path='/lib/dblayer/backend/base/error.py',
         lineno=35,
         depth=1,
         type='class',
         name='IntegrityError',
         text='class IntegrityError(DatabaseError):\n'
              '    """ Error related to database integrity\n'
              '    """')

Fragment(uuid='73fb88f6-17a2-40c8-84d8-06bad38ba6bb',
         path='/lib/dblayer/backend/base/error.py',
         lineno=36,
         depth=4,
         type='documentation',
         name='',
         text=' Error related to database integrity\n    ')

Fragment(uuid='5326507c-9268-4131-92a1-e4e07ec3239e',
         path='/lib/dblayer/backend/base/error.py',
         lineno=38,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class InternalError(DatabaseError):\n'
              '    """ The database encountered an internal error\n'
              '    """\n')

Fragment(uuid='99d91348-822a-4719-973c-d7e5c82cf55d',
         path='/lib/dblayer/backend/base/error.py',
         lineno=40,
         depth=1,
         type='class',
         name='InternalError',
         text='class InternalError(DatabaseError):\n'
              '    """ The database encountered an internal error\n'
              '    """')

Fragment(uuid='3b2ba8b1-062e-4ec0-95e7-7770b593eb44',
         path='/lib/dblayer/backend/base/error.py',
         lineno=41,
         depth=4,
         type='documentation',
         name='',
         text=' The database encountered an internal error\n    ')

Fragment(uuid='c89f3751-fb2c-4146-87f2-904e7993438d',
         path='/lib/dblayer/backend/base/error.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class ProgrammingError(DatabaseError):\n'
              '    """ Error related to database programming (SQL error, table '
              'not found etc)\n'
              '    """\n')

Fragment(uuid='ae3de167-ac3c-45b9-96c0-52cef6271852',
         path='/lib/dblayer/backend/base/error.py',
         lineno=45,
         depth=1,
         type='class',
         name='ProgrammingError',
         text='class ProgrammingError(DatabaseError):\n'
              '    """ Error related to database programming (SQL error, table '
              'not found etc)\n'
              '    """')

Fragment(uuid='cc7bb2d3-bc29-4ea8-911f-f631d94f3fda',
         path='/lib/dblayer/backend/base/error.py',
         lineno=46,
         depth=4,
         type='documentation',
         name='',
         text=' Error related to database programming (SQL error, table not '
              'found etc)\n'
              '    ')

Fragment(uuid='356a2fe7-5b72-41a7-87b5-7d1837fafce1',
         path='/lib/dblayer/backend/base/error.py',
         lineno=48,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class NotSupportedError(DatabaseError):\n'
              '    """ A method or database API was used which is not '
              'supported by the database\n'
              '    """\n')

Fragment(uuid='07fd0c52-0411-41ad-bcd3-653ed5374bc7',
         path='/lib/dblayer/backend/base/error.py',
         lineno=50,
         depth=1,
         type='class',
         name='NotSupportedError',
         text='class NotSupportedError(DatabaseError):\n'
              '    """ A method or database API was used which is not '
              'supported by the database\n'
              '    """')

Fragment(uuid='9f7ad622-f350-4e68-bed2-51a9ac45e751',
         path='/lib/dblayer/backend/base/error.py',
         lineno=51,
         depth=4,
         type='documentation',
         name='',
         text=' A method or database API was used which is not supported by '
              'the database\n'
              '    ')

Fragment(uuid='5e109b11-6f81-4e64-b7ad-8c5d5e3dc265',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Functions formatting pieces of SQL statements\n'
              '"""\n'
              '\n'
              'import datetime\n'
              '\n'
              'import dblayer\n'
              'from dblayer import constants\n'
              '\n'
              'NA = constants.NA\n'
              '\n'
              '\n'
              '### Quoting and escaping\n')

Fragment(uuid='977839ac-21a9-49fb-a783-e79ee7dce67d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Functions formatting pieces of SQL statements\n')

Fragment(uuid='85fe7676-78c5-4410-9801-7855af65f1a7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/base/format.py\n'
              '  Functions: format_add_function format_and_function '
              'format_avg_aggregate format_boolean_column '
              'format_check_constraint format_coalesce_function format_column '
              'format_concat_function format_constraint '
              'format_contains_function format_count_aggregate '
              'format_create_btree_index format_create_full_text_search_index '
              'format_create_index format_create_procedure format_create_table '
              'format_create_trigger format_cross_join_group_list '
              'format_custom_column format_custom_function format_date_column '
              'format_datetime_column format_decimal_column '
              'format_default_not_null format_delete format_div_function '
              'format_drop_btree_index format_drop_full_text_search_index '
              'format_drop_index format_drop_procedure format_drop_table '
              'format_drop_trigger format_eq_condition format_equal_function '
              'format_expression format_float_column format_foreign_key_column '
              'format_foreign_key_constraint format_full_text_search_function '
              'format_function format_ge_condition '
              'format_greater_than_function '
              'format_greater_than_or_equal_function format_gt_condition '
              'format_in_condition format_in_function format_insert '
              'format_integer_column format_le_condition format_left_function '
              'format_less_than_function format_less_than_or_equal_function '
              'format_like_condition format_like_function format_lt_condition '
              'format_match_condition format_match_function '
              'format_max_aggregate format_min_aggregate format_mul_function '
              'format_ne_condition format_neg_function '
              'format_not_equal_function format_not_function '
              'format_not_in_condition format_not_in_function '
              'format_not_in_range_condition format_not_like_condition '
              'format_not_like_function format_not_match_condition '
              'format_not_match_function format_not_similar_to_condition '
              'format_or_function format_order_by format_primary_key_column '
              'format_primary_key_constraint format_query '
              'format_query_condition format_query_condition_map '
              'format_query_order_by_map format_range_condition '
              'format_release_savepoint format_result format_right_function '
              'format_rollback_to_savepoint format_savepoint '
              'format_search_condition format_search_document_column '
              'format_select format_similar_to_condition format_sub_function '
              'format_substring_function format_sum_aggregate '
              'format_table_column_condition format_table_condition_map '
              'format_table_order_by_map format_text_column '
              'format_truncate_table format_truncate_table_list '
              'format_unique_constraint format_update format_var_function '
              'quote_alias_name quote_literal_value quote_name '
              'quote_table_column_name replace_parameter_placeholders\n'
              '  Variables and usages: Add AfterDeleteRow AfterDeleteStatement '
              'AfterInsertOrUpdateRow AfterInsertOrUpdateStatement '
              'AfterInsertRow AfterInsertStatement AfterUpdateRow '
              'AfterUpdateStatement And Avg BaseColumn BaseConstraint '
              'BaseFunction BaseIndex BaseProcedure BaseQueryResult '
              'BaseTrigger BeforeDeleteRow BeforeDeleteStatement '
              'BeforeInsertOrUpdateRow BeforeInsertOrUpdateStatement '
              'BeforeInsertRow BeforeInsertStatement BeforeUpdateRow '
              'BeforeUpdateStatement Boolean COLUMN_FORMATTER_MAP '
              'CONSTRAINT_FORMATTER_MAP CREATE_INDEX_FORMATTER_MAP Check '
              'Clauses Coalesce Concat Contains Count Custom DEBUG '
              'DROP_INDEX_FORMATTER_MAP Date Datetime Decimal Div Equal '
              'FUNCTION_FORMATTER_MAP Float ForeignKey FullTextSearch '
              'FullTextSearchIndex GreaterThan GreaterThanOrEqual In Index '
              'Integer JOIN_TYPES Left LessThan LessThanOrEqual Like Match Max '
              'Min Mul NA Neg Not NotEqual NotIn NotLike NotMatch Or '
              'PrimaryKey QUERY_CONDITION_OPERATOR_LIST Result Right '
              'SearchDocument Sub Substring Sum TRIGGER_FORMATTER_MAP Table '
              'Text TypeError Unique ValueError Var _column_list '
              '_condition_list _constraint_list _index_list _name _primary_key '
              '_writable abstract_sql_column_type after_group_by alias '
              'alias_name append args argument_list argument_name backend base '
              'body cache cascade clause clauses column column_name columns '
              'condition condition_map constaint constants constraint '
              'create_index_sql create_procedure_sql create_trigger_sql '
              'cross_join_group_list database date datetime days dblayer '
              'default definition definition_list digits document_expression '
              'double event expression extend field_list fk_column '
              'fk_column_name fk_field_name formatted_order_by formatter '
              'formatting_function from_list function getattr group_by having '
              'having_condition_map id_field_name index index_name isoformat '
              'items join join_group join_type language limit lower_limit '
              'maxlength microseconds model name new_parameters null offset '
              'order_by order_by_map parameter_list parameter_tuple pk_column '
              'precision procedure procedure_name procedure_parameters query '
              'query_result quoted_table_name range referenced_table '
              'referer_table_name replace repr result runtime_conditions '
              'runtime_having_condition runtime_where_condition scale scope '
              'search_document_column_name seconds serial source split '
              'split_sql sql_expression sql_parameters sql_type statements '
              'suffix table table_class table_list table_name time timedelta '
              'timing trigger trigger_name tuple update upper_limit value '
              'value_expression variables where where_condition_map\n')

Fragment(uuid='71aa03d7-24ae-4908-bad7-20eda1c3c7ed',
         path='/lib/dblayer/backend/base/format.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='00352309-6890-4370-9339-f217982a86b4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='fdb5a9e3-75f6-42c0-8d31-73161ddb0d1b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='b710fea5-2da4-485e-845f-5a27f1062eab',
         path='/lib/dblayer/backend/base/format.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='994b52bd-5fbd-4ec8-af9d-5a6b755a6b9f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=12,
         depth=0,
         type='documentation',
         name='',
         text='### Quoting and escaping')

Fragment(uuid='43899eb7-d282-4f4e-8626-3934a88d8c05',
         path='/lib/dblayer/backend/base/format.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def quote_name(name):\n'
              '    """ Quotes a table or field name for use in SQL statements\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert \'"\' not in name, \'Names must not contain '
              "double quotes!'\n"
              "        assert '\\\\' not in repr(name), (\n"
              "            'Names must not contain special characters which "
              "need to be escaped!')\n"
              '    return \'"%s"\' % name\n')

Fragment(uuid='1eba0ba1-4f93-404c-8ac8-c2e35162f6c0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=14,
         depth=1,
         type='function',
         name='quote_name',
         text='def quote_name(name):\n'
              '    """ Quotes a table or field name for use in SQL statements\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert \'"\' not in name, \'Names must not contain '
              "double quotes!'\n"
              "        assert '\\\\' not in repr(name), (\n"
              "            'Names must not contain special characters which "
              "need to be escaped!')\n"
              '    return \'"%s"\' % name')

Fragment(uuid='95bb6225-1991-4d8f-930e-8bfee0a15674',
         path='/lib/dblayer/backend/base/format.py',
         lineno=15,
         depth=4,
         type='documentation',
         name='',
         text=' Quotes a table or field name for use in SQL statements\n    ')

Fragment(uuid='310aca94-5dfd-4005-b671-99a41265fcc5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=18,
         depth=6,
         type='documentation',
         name='',
         text='Names must not contain double quotes!')

Fragment(uuid='ef54ba87-9de8-43a5-8258-c9f59ceb946c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=20,
         depth=7,
         type='documentation',
         name='',
         text='Names must not contain special characters which need to be '
              'escaped!')

Fragment(uuid='4d8a2560-fb64-4e21-835d-ab1c5a91f8ea',
         path='/lib/dblayer/backend/base/format.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def quote_alias_name(name, alias):\n'
              '    """ Quotes aliased table or field name for use in SQL '
              'statements\n'
              '    """\n'
              "    return '%s AS %s' % (quote_name(name), quote_name(alias))\n")

Fragment(uuid='abb7a406-f8d4-4d0c-ae28-99c1a0fa7653',
         path='/lib/dblayer/backend/base/format.py',
         lineno=24,
         depth=1,
         type='function',
         name='quote_alias_name',
         text='def quote_alias_name(name, alias):\n'
              '    """ Quotes aliased table or field name for use in SQL '
              'statements\n'
              '    """\n'
              "    return '%s AS %s' % (quote_name(name), quote_name(alias))")

Fragment(uuid='1fb9a2e5-84e0-4cdd-8f1f-197e0c27dae9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=25,
         depth=4,
         type='documentation',
         name='',
         text=' Quotes aliased table or field name for use in SQL statements\n'
              '    ')

Fragment(uuid='2aa9ca05-5330-4317-b23f-ca7fde7cefb9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def quote_table_column_name(table_name, column_name):\n'
              '    """ Quotes a column reference\n'
              '    """\n'
              "    return '%s.%s' % (quote_name(table_name), "
              'quote_name(column_name))\n')

Fragment(uuid='ac0c16f8-545c-40f5-b307-e3f5bfe8a966',
         path='/lib/dblayer/backend/base/format.py',
         lineno=30,
         depth=1,
         type='function',
         name='quote_table_column_name',
         text='def quote_table_column_name(table_name, column_name):\n'
              '    """ Quotes a column reference\n'
              '    """\n'
              "    return '%s.%s' % (quote_name(table_name), "
              'quote_name(column_name))')

Fragment(uuid='e503e076-79b2-4872-bec5-d4f782a9d027',
         path='/lib/dblayer/backend/base/format.py',
         lineno=31,
         depth=4,
         type='documentation',
         name='',
         text=' Quotes a column reference\n    ')

Fragment(uuid='9d837982-8bfa-4e34-9c67-6e8aeb271aaf',
         path='/lib/dblayer/backend/base/format.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def quote_literal_value(value):\n'
              '    """ Quotes a literal value for use in SQL statements\n'
              '    """\n')

Fragment(uuid='abc0329a-c0d3-45bf-b7a8-4ad0172f6fe5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=36,
         depth=1,
         type='function',
         name='quote_literal_value',
         text='def quote_literal_value(value):\n'
              '    """ Quotes a literal value for use in SQL statements\n'
              '    """\n')

Fragment(uuid='f442ad8a-2277-4fad-9c2e-20c435d6f0a3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=37,
         depth=4,
         type='documentation',
         name='',
         text=' Quotes a literal value for use in SQL statements\n    ')

Fragment(uuid='73709a19-ccb7-47f1-b545-08fde62da78d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text="    if value is None:\n        return 'NULL'\n")

Fragment(uuid='9211c58b-f39b-455f-a36b-354b2928eafa',
         path='/lib/dblayer/backend/base/format.py',
         lineno=39,
         depth=1,
         type='function',
         name='quote_literal_value',
         text="    if value is None:\n        return 'NULL'\n")

Fragment(uuid='b3f2ff74-f408-4f58-91d6-42469af863d4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, str):\n'
              '        return "E\'%s\'" % repr(value)[2: -1].replace("\'", '
              '"\'\'")\n')

Fragment(uuid='60d60f8c-c7bd-4560-94bb-42548da234cf',
         path='/lib/dblayer/backend/base/format.py',
         lineno=41,
         depth=1,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, str):\n'
              '        return "E\'%s\'" % repr(value)[2: -1].replace("\'", '
              '"\'\'")\n')

Fragment(uuid='6dede611-9ac0-4181-8f7f-015e654c93f2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, bool):\n'
              "        return 'true' if value else 'false'\n")

Fragment(uuid='45d06c6d-2b06-4b51-adf3-b99632ccfd40',
         path='/lib/dblayer/backend/base/format.py',
         lineno=43,
         depth=1,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, bool):\n'
              "        return 'true' if value else 'false'\n")

Fragment(uuid='61786244-9cfd-45ec-b2aa-0412079ea60d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, (int, float)):\n'
              '        return str(value)\n')

Fragment(uuid='a9ad1136-d36c-4289-afa5-18208e94ccbc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=45,
         depth=1,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, (int, float)):\n'
              '        return str(value)\n')

Fragment(uuid='71a0f3bf-9970-42ca-bb3e-263ea464738e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, (datetime.time, datetime.date, '
              'datetime.datetime)):\n'
              '        return repr(value.isoformat())\n')

Fragment(uuid='49913b0b-d984-4765-8400-7d85fdf28e81',
         path='/lib/dblayer/backend/base/format.py',
         lineno=47,
         depth=1,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, (datetime.time, datetime.date, '
              'datetime.datetime)):\n'
              '        return repr(value.isoformat())\n')

Fragment(uuid='8a12075c-1c19-4de7-b014-4441b375e757',
         path='/lib/dblayer/backend/base/format.py',
         lineno=49,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, datetime.timedelta):\n'
              "        return repr('%d day %f sec' % (value.days, "
              'value.seconds + 1e-6 * value.microseconds))\n')

Fragment(uuid='a6185c0a-db73-4d1a-a6ed-88b970094681',
         path='/lib/dblayer/backend/base/format.py',
         lineno=49,
         depth=1,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, datetime.timedelta):\n'
              "        return repr('%d day %f sec' % (value.days, "
              'value.seconds + 1e-6 * value.microseconds))\n')

Fragment(uuid='321f9735-3509-45b8-ad28-de4a57d3d2d4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=51,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(value, (tuple, list)):\n'
              "        return '(%s)' % (', '.join(map(quote_literal_value, "
              'value)))\n'
              "    raise ValueError('Cannot quote literal value: %r' % "
              '(value,))\n'
              '\n'
              '\n'
              '### Handling of parameter placeholders\n')

Fragment(uuid='c09776e9-5fa3-4275-abad-42a0e281a5ee',
         path='/lib/dblayer/backend/base/format.py',
         lineno=51,
         depth=1,
         type='function',
         name='quote_literal_value',
         text='    if isinstance(value, (tuple, list)):\n'
              "        return '(%s)' % (', '.join(map(quote_literal_value, "
              'value)))\n'
              "    raise ValueError('Cannot quote literal value: %r' % "
              '(value,))')

Fragment(uuid='a11c7716-7f1e-4b7e-b694-de357a776e79',
         path='/lib/dblayer/backend/base/format.py',
         lineno=53,
         depth=7,
         type='documentation',
         name='',
         text='Cannot quote literal value: %r')

Fragment(uuid='6c8961c6-a1ca-48cd-bf5d-7139273a764a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=56,
         depth=0,
         type='documentation',
         name='',
         text='### Handling of parameter placeholders')

Fragment(uuid='33bf0685-d3cf-4259-83bf-52728dda5956',
         path='/lib/dblayer/backend/base/format.py',
         lineno=57,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def replace_parameter_placeholders(sql):\n'
              '    """ Replaces ? with the parameter placeholder acceptable by '
              'the database server\n'
              '    """\n'
              '    # NOTE: It does not replace inside string literals\n'
              '    split_sql = sql.split("\'")\n'
              '    for i in range(0, len(split_sql), 2):\n'
              "        split_sql[i] = split_sql[i].replace('?', '%s')\n"
              '    return "\'".join(split_sql)\n'
              '\n'
              '\n'
              '### Formatting of column definitions based on the database '
              'model\n')

Fragment(uuid='9742a996-3c3a-4b8f-a3e2-ffaca96ab21d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=58,
         depth=1,
         type='function',
         name='replace_parameter_placeholders',
         text='def replace_parameter_placeholders(sql):\n'
              '    """ Replaces ? with the parameter placeholder acceptable by '
              'the database server\n'
              '    """\n'
              '    # NOTE: It does not replace inside string literals\n'
              '    split_sql = sql.split("\'")\n'
              '    for i in range(0, len(split_sql), 2):\n'
              "        split_sql[i] = split_sql[i].replace('?', '%s')\n"
              '    return "\'".join(split_sql)')

Fragment(uuid='e44335b2-1e0c-428b-9236-c6e45c00c838',
         path='/lib/dblayer/backend/base/format.py',
         lineno=59,
         depth=4,
         type='documentation',
         name='',
         text=' Replaces ? with the parameter placeholder acceptable by the '
              'database server\n'
              '    ')

Fragment(uuid='cc40f02c-cdab-43a7-90ea-ff631b8692e1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: It does not replace inside string literals')

Fragment(uuid='e2d18809-1324-4df9-9592-2b3560b469c3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=68,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting of column definitions based on the database model')

Fragment(uuid='b11cf275-bfc3-45b6-8e05-bd8307822567',
         path='/lib/dblayer/backend/base/format.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_default_not_null(column, sql, parameter_list):\n'
              '    """ Appends the DEFAULT and NOT NULL common type modifiers '
              'as needed\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.BaseColumn)\n'
              '\n'
              '    if column.default is not None:\n'
              '        if isinstance(column.default, '
              'dblayer.model.function.BaseFunction):\n'
              "            sql.append('DEFAULT %s' % "
              'format_expression(column.default))\n'
              '        else:\n'
              "            sql.append('DEFAULT ?')\n"
              '            parameter_list.append(column.default)\n'
              '\n'
              '    if not column.null:\n'
              "        sql.append('NOT NULL')\n")

Fragment(uuid='8e3e4a9c-2bef-4632-9e73-dce57c6e3567',
         path='/lib/dblayer/backend/base/format.py',
         lineno=70,
         depth=1,
         type='function',
         name='format_default_not_null',
         text='def format_default_not_null(column, sql, parameter_list):\n'
              '    """ Appends the DEFAULT and NOT NULL common type modifiers '
              'as needed\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.BaseColumn)\n'
              '\n'
              '    if column.default is not None:\n'
              '        if isinstance(column.default, '
              'dblayer.model.function.BaseFunction):\n'
              "            sql.append('DEFAULT %s' % "
              'format_expression(column.default))\n'
              '        else:\n'
              "            sql.append('DEFAULT ?')\n"
              '            parameter_list.append(column.default)\n'
              '\n'
              '    if not column.null:\n'
              "        sql.append('NOT NULL')")

Fragment(uuid='944f2b25-bf20-4003-888b-18b9b49a9d75',
         path='/lib/dblayer/backend/base/format.py',
         lineno=71,
         depth=4,
         type='documentation',
         name='',
         text=' Appends the DEFAULT and NOT NULL common type modifiers as '
              'needed\n'
              '    ')

Fragment(uuid='0d6bc907-fe80-457e-aa70-32ebdf5d8094',
         path='/lib/dblayer/backend/base/format.py',
         lineno=85,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_custom_column(column):\n'
              '    """ Returns column type definition for the given custom '
              'column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Custom)\n'
              '\n'
              '    return (column.sql_type, ())\n')

Fragment(uuid='a1698bb1-5c8d-47a0-b1fd-e13ed34c87ae',
         path='/lib/dblayer/backend/base/format.py',
         lineno=87,
         depth=1,
         type='function',
         name='format_custom_column',
         text='def format_custom_column(column):\n'
              '    """ Returns column type definition for the given custom '
              'column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Custom)\n'
              '\n'
              '    return (column.sql_type, ())')

Fragment(uuid='3b227856-c540-4538-9a06-ef9b5e222549',
         path='/lib/dblayer/backend/base/format.py',
         lineno=88,
         depth=4,
         type='documentation',
         name='',
         text=' Returns column type definition for the given custom column\n'
              '    ')

Fragment(uuid='81929bfe-aa10-4c1c-a1b6-0aa43185b65c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=94,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_primary_key_column(column):\n'
              '    """ Returns column type definition for the given primary '
              'key column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.PrimaryKey)\n'
              '\n'
              '    if column.serial:\n'
              "        return ('BIGSERIAL PRIMARY KEY', ())\n"
              '\n'
              "    return ('BIGINT NOT NULL', ())\n")

Fragment(uuid='8ca1de90-a59a-4b3c-beb1-1a4f6bdd529c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=96,
         depth=1,
         type='function',
         name='format_primary_key_column',
         text='def format_primary_key_column(column):\n'
              '    """ Returns column type definition for the given primary '
              'key column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.PrimaryKey)\n'
              '\n'
              '    if column.serial:\n'
              "        return ('BIGSERIAL PRIMARY KEY', ())\n"
              '\n'
              "    return ('BIGINT NOT NULL', ())")

Fragment(uuid='cfdbfc22-6266-4ce7-9bce-6958fd902f86',
         path='/lib/dblayer/backend/base/format.py',
         lineno=97,
         depth=4,
         type='documentation',
         name='',
         text=' Returns column type definition for the given primary key '
              'column\n'
              '    ')

Fragment(uuid='a67b3b34-c8a3-4a3d-ad36-8c4b59aa3ef6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=103,
         depth=7,
         type='documentation',
         name='',
         text='BIGSERIAL PRIMARY KEY')

Fragment(uuid='79f040a3-c808-4750-8709-9a5741447346',
         path='/lib/dblayer/backend/base/format.py',
         lineno=106,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_foreign_key_column(column):\n'
              '    """ Returns column type definition for the given foreign '
              'key column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.ForeignKey)\n'
              '\n'
              "    sql = ['BIGINT']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='874fb9bc-f53d-44c4-bb9e-83468646e1ec',
         path='/lib/dblayer/backend/base/format.py',
         lineno=108,
         depth=1,
         type='function',
         name='format_foreign_key_column',
         text='def format_foreign_key_column(column):\n'
              '    """ Returns column type definition for the given foreign '
              'key column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.ForeignKey)\n'
              '\n'
              "    sql = ['BIGINT']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='7cdb8492-d216-4dab-89be-05638f40fce6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=109,
         depth=4,
         type='documentation',
         name='',
         text=' Returns column type definition for the given foreign key '
              'column\n'
              '    ')

Fragment(uuid='5b9915b9-03c6-4a57-a16d-e69c1e18b436',
         path='/lib/dblayer/backend/base/format.py',
         lineno=119,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_boolean_column(column):\n'
              '    """ Returns the column type definition for the given '
              'boolean column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Boolean)\n'
              '\n'
              "    sql = ['BOOLEAN']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='6931abbd-24be-465d-8ad9-fb2a163c261a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=121,
         depth=1,
         type='function',
         name='format_boolean_column',
         text='def format_boolean_column(column):\n'
              '    """ Returns the column type definition for the given '
              'boolean column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Boolean)\n'
              '\n'
              "    sql = ['BOOLEAN']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='40d1626c-ae60-477c-9ef5-9f2ef6a4f005',
         path='/lib/dblayer/backend/base/format.py',
         lineno=122,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the column type definition for the given boolean '
              'column\n'
              '    ')

Fragment(uuid='32b59cdd-e3da-4399-a4bb-b8a43597dbd0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=132,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_integer_column(column):\n'
              '    """ Returns the column type definition for the given '
              'integer column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Integer)\n'
              '\n'
              '    parameter_list = []\n'
              '    if not column.digits or column.digits <= 9:\n'
              "        sql = ['INTEGER']\n"
              '    elif column.digits <= 18:\n'
              "        sql = ['BIGINT']\n"
              '    else:\n'
              "        sql = ['NUMERIC(%d)' % column.digits]\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='baef570f-e9a4-438b-aa7e-082a4a89dd1f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=134,
         depth=1,
         type='function',
         name='format_integer_column',
         text='def format_integer_column(column):\n'
              '    """ Returns the column type definition for the given '
              'integer column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Integer)\n'
              '\n'
              '    parameter_list = []\n'
              '    if not column.digits or column.digits <= 9:\n'
              "        sql = ['INTEGER']\n"
              '    elif column.digits <= 18:\n'
              "        sql = ['BIGINT']\n"
              '    else:\n'
              "        sql = ['NUMERIC(%d)' % column.digits]\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='14a69a81-594e-4956-bf80-4d40529c3253',
         path='/lib/dblayer/backend/base/format.py',
         lineno=135,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the column type definition for the given integer '
              'column\n'
              '    ')

Fragment(uuid='0383d40d-9036-4a7b-98e6-614a4ba750fa',
         path='/lib/dblayer/backend/base/format.py',
         lineno=150,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_float_column(column):\n'
              '    """ Returns the column type definition for the given float '
              'or double column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Float)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.double:\n'
              "        sql = ['DOUBLE PRECISION']\n"
              '    else:\n'
              "        sql = ['REAL']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='bca07317-2048-4dae-b255-7b9dfe3df889',
         path='/lib/dblayer/backend/base/format.py',
         lineno=152,
         depth=1,
         type='function',
         name='format_float_column',
         text='def format_float_column(column):\n'
              '    """ Returns the column type definition for the given float '
              'or double column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Float)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.double:\n'
              "        sql = ['DOUBLE PRECISION']\n"
              '    else:\n'
              "        sql = ['REAL']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='54e57394-21df-4f78-ab4c-8b5183f0881a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=153,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the column type definition for the given float or '
              'double column\n'
              '    ')

Fragment(uuid='a6104e8e-74ca-4ff8-b7ec-186c05c5a0a2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=167,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_decimal_column(column):\n'
              '    """ Returns the column type definition for the given '
              'decimal column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Decimal)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.precision is not None:\n'
              '        if column.scale is not None:\n'
              "            sql = ['NUMERIC(%d, %d)' % (column.precision, "
              'column.scale)]\n'
              '        else:\n'
              "            sql = ['NUMERIC(%d)' % column.precision]\n"
              '    else:\n'
              '        assert not column.scale\n'
              "        sql = ['NUMERIC']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='e4263eeb-c299-4b94-8cb2-9ebb53655c23',
         path='/lib/dblayer/backend/base/format.py',
         lineno=169,
         depth=1,
         type='function',
         name='format_decimal_column',
         text='def format_decimal_column(column):\n'
              '    """ Returns the column type definition for the given '
              'decimal column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Decimal)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.precision is not None:\n'
              '        if column.scale is not None:\n'
              "            sql = ['NUMERIC(%d, %d)' % (column.precision, "
              'column.scale)]\n'
              '        else:\n'
              "            sql = ['NUMERIC(%d)' % column.precision]\n"
              '    else:\n'
              '        assert not column.scale\n'
              "        sql = ['NUMERIC']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='47dfdc5a-ee42-45ea-a0a4-eea781dfe654',
         path='/lib/dblayer/backend/base/format.py',
         lineno=170,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the column type definition for the given decimal '
              'column\n'
              '    ')

Fragment(uuid='7c969a8b-d2bd-4d7e-bb07-2163dacab050',
         path='/lib/dblayer/backend/base/format.py',
         lineno=188,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_text_column(column):\n'
              '    """ Returns the column type definition for the given '
              'boolean column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Text)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.maxlength:\n'
              "        sql = ['VARCHAR(%d)' % column.maxlength]\n"
              '    else:\n'
              "        sql = ['TEXT']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='62c7e18e-f8e9-4172-b101-a97ebce935b2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=190,
         depth=1,
         type='function',
         name='format_text_column',
         text='def format_text_column(column):\n'
              '    """ Returns the column type definition for the given '
              'boolean column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Text)\n'
              '\n'
              '    sql = []\n'
              '    parameter_list = []\n'
              '    if column.maxlength:\n'
              "        sql = ['VARCHAR(%d)' % column.maxlength]\n"
              '    else:\n'
              "        sql = ['TEXT']\n"
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='e5650ff0-c796-4ba9-88cc-6d0f90ed8a1d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=191,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the column type definition for the given boolean '
              'column\n'
              '    ')

Fragment(uuid='bbf66e03-7b71-466a-a026-909315246959',
         path='/lib/dblayer/backend/base/format.py',
         lineno=205,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_date_column(column):\n'
              '    """ Returns the column type definition for the given date '
              'column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Date)\n'
              '\n'
              "    sql = ['DATE']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='4bd84ff4-a797-40b9-b185-ad7357a9246d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=207,
         depth=1,
         type='function',
         name='format_date_column',
         text='def format_date_column(column):\n'
              '    """ Returns the column type definition for the given date '
              'column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, dblayer.model.column.Date)\n'
              '\n'
              "    sql = ['DATE']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='3f9d6219-a906-4e31-ab41-1281527d343f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=208,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the column type definition for the given date column\n'
              '    ')

Fragment(uuid='962aa944-51fa-42bd-ada3-d77e8fd6c494',
         path='/lib/dblayer/backend/base/format.py',
         lineno=218,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_datetime_column(column):\n'
              '    """ Returns the column type definition for the given '
              'datetime column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Datetime)\n'
              '\n'
              "    sql = ['TIMESTAMP WITHOUT TIME ZONE']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))\n')

Fragment(uuid='8349cdea-b110-4936-8fba-62a8262ca531',
         path='/lib/dblayer/backend/base/format.py',
         lineno=220,
         depth=1,
         type='function',
         name='format_datetime_column',
         text='def format_datetime_column(column):\n'
              '    """ Returns the column type definition for the given '
              'datetime column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.Datetime)\n'
              '\n'
              "    sql = ['TIMESTAMP WITHOUT TIME ZONE']\n"
              '    parameter_list = []\n'
              '    format_default_not_null(column, sql, parameter_list)\n'
              "    sql = ' '.join(sql)\n"
              '    return (sql, tuple(parameter_list))')

Fragment(uuid='8d248cea-9945-4aa9-98b6-e718705d09e6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=221,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the column type definition for the given datetime '
              'column\n'
              '    ')

Fragment(uuid='e0d6dca0-7a8e-4722-be0c-c9acc92c886d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=226,
         depth=6,
         type='documentation',
         name='',
         text='TIMESTAMP WITHOUT TIME ZONE')

Fragment(uuid='eefdd524-02ae-4675-882d-54955e65059a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=231,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_search_document_column(column):\n'
              '    """ Returns the column type definition for the given search '
              'document column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.SearchDocument)\n'
              '\n'
              "    return ('tsvector', ())\n")

Fragment(uuid='144f374b-7dbb-4672-a3ba-b147b504d52e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=233,
         depth=1,
         type='function',
         name='format_search_document_column',
         text='def format_search_document_column(column):\n'
              '    """ Returns the column type definition for the given search '
              'document column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.SearchDocument)\n'
              '\n'
              "    return ('tsvector', ())")

Fragment(uuid='27536e60-d7c2-4e95-b02b-94ea43e1dd2a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=234,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the column type definition for the given search '
              'document column\n'
              '    ')

Fragment(uuid='e9294e6e-eb36-4bda-bb43-3a99f2fd2e93',
         path='/lib/dblayer/backend/base/format.py',
         lineno=240,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_column(column):\n'
              '    """ Returns the column type definition for the given '
              'column\n'
              '    """\n')

Fragment(uuid='3ecd9bf0-b9ce-476a-8076-4c3be11a2815',
         path='/lib/dblayer/backend/base/format.py',
         lineno=242,
         depth=1,
         type='function',
         name='format_column',
         text='def format_column(column):\n'
              '    """ Returns the column type definition for the given '
              'column\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.BaseColumn)\n'
              '\n'
              '    formatter = '
              'COLUMN_FORMATTER_MAP[column.abstract_sql_column_type]\n'
              '    return formatter(column)')

Fragment(uuid='e8dcc3e8-4d67-47c1-9438-e74fdf1428f9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=243,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the column type definition for the given column\n    ')

Fragment(uuid='ddbbe39e-1e32-459b-9e8e-f9f7c208d767',
         path='/lib/dblayer/backend/base/format.py',
         lineno=245,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(column, '
              'dblayer.model.column.BaseColumn)\n'
              '\n'
              '    formatter = '
              'COLUMN_FORMATTER_MAP[column.abstract_sql_column_type]\n'
              '    return formatter(column)\n'
              '\n'
              '\n'
              'COLUMN_FORMATTER_MAP = dict(\n'
              '    # Table columns\n'
              '    Custom=format_custom_column,\n'
              '    PrimaryKey=format_primary_key_column,\n'
              '    ForeignKey=format_foreign_key_column,\n'
              '    Boolean=format_boolean_column,\n'
              '    Integer=format_integer_column,\n'
              '    Float=format_float_column,\n'
              '    Decimal=format_decimal_column,\n'
              '    Text=format_text_column,\n'
              '    Date=format_date_column,\n'
              '    Datetime=format_datetime_column,\n'
              '    SearchDocument=format_search_document_column,\n'
              ')\n'
              '\n'
              '\n'
              '### Formatting of index creation based on the database model\n')

Fragment(uuid='3053028c-fd66-40df-b14b-13610c1c0d3a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=268,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting of index creation based on the database model')

Fragment(uuid='331e3c16-6df9-4d58-acdf-636a94a39a1b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=269,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_create_btree_index(index):\n'
              '    """ Returns the definition of a regular B-Tree based index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              "    sql = 'CREATE INDEX %s ON %s USING btree(%s);' % (\n"
              "        quote_name('%s_%s' % (index.table._name, index.name)),\n"
              '        quote_name(index.table._name),\n'
              "        ', '.join(quote_name(column.name) for column in "
              'index.columns))\n'
              '    return [(sql, ())]\n')

Fragment(uuid='79e8df9c-68fc-42e7-9a67-51b84edbc792',
         path='/lib/dblayer/backend/base/format.py',
         lineno=270,
         depth=1,
         type='function',
         name='format_create_btree_index',
         text='def format_create_btree_index(index):\n'
              '    """ Returns the definition of a regular B-Tree based index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              "    sql = 'CREATE INDEX %s ON %s USING btree(%s);' % (\n"
              "        quote_name('%s_%s' % (index.table._name, index.name)),\n"
              '        quote_name(index.table._name),\n'
              "        ', '.join(quote_name(column.name) for column in "
              'index.columns))\n'
              '    return [(sql, ())]')

Fragment(uuid='16e9e7cf-25f3-413a-a558-5af8543a640d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=271,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the definition of a regular B-Tree based index\n    ')

Fragment(uuid='541e5650-a993-49d3-a6d3-6b0ba51284b1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=276,
         depth=6,
         type='documentation',
         name='',
         text='CREATE INDEX %s ON %s USING btree(%s);')

Fragment(uuid='356419d9-5dfd-4987-be96-455dc242a548',
         path='/lib/dblayer/backend/base/format.py',
         lineno=281,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_create_full_text_search_index(index):\n'
              '    """ Returns the definition of a full text search index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.FullTextSearchIndex)\n'
              '\n'
              '    document_expression = " || \' \' || ".join(\n'
              '        ("COALESCE(new.%s, \'\')" if column.null else "new.%s") '
              '% quote_name(column.name)\n')

Fragment(uuid='da246fde-8656-4a66-9762-5038b124cb51',
         path='/lib/dblayer/backend/base/format.py',
         lineno=283,
         depth=1,
         type='function',
         name='format_create_full_text_search_index',
         text='def format_create_full_text_search_index(index):\n'
              '    """ Returns the definition of a full text search index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.FullTextSearchIndex)\n'
              '\n'
              '    document_expression = " || \' \' || ".join(\n'
              '        ("COALESCE(new.%s, \'\')" if column.null else "new.%s") '
              '% quote_name(column.name)\n')

Fragment(uuid='07412035-3448-4d53-a197-26f7c9a8e90e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=284,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the definition of a full text search index\n    ')

Fragment(uuid='48bce229-8247-4375-b9d2-c1996df17fe3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=290,
         depth=10,
         type='documentation',
         name='',
         text="COALESCE(new.%s, '')")

Fragment(uuid='6afb23b2-30e9-4ef0-bd7b-b9934ff48a26',
         path='/lib/dblayer/backend/base/format.py',
         lineno=291,
         depth=0,
         type='module',
         name='',
         text='        for column in index.columns)\n'
              '\n'
              '    variables = dict(\n'
              '        table_name=quote_name(index.table._name),\n'
              "        index_name=quote_name('%s_%s' % (index.table._name, "
              'index.name)),\n'
              "        trigger_name=quote_name('%s_%s_update_trigger' % "
              '(index.table._name, index.name)),\n'
              "        procedure_name=quote_name('fn_%s_%s_update_trigger' % "
              '(index.table._name, index.name)),\n'
              '        '
              'search_document_column_name=quote_name(index.name[:-6]),\n'
              '        document_expression=document_expression)\n'
              '\n'
              "    create_procedure_sql = '''\\\n"
              'CREATE FUNCTION %(procedure_name)s () RETURNS trigger AS $$\n'
              'BEGIN\n'
              '  new.')

Fragment(uuid='8d023775-7442-45d8-b035-b50e3e919941',
         path='/lib/dblayer/backend/base/format.py',
         lineno=291,
         depth=1,
         type='function',
         name='format_create_full_text_search_index',
         text='        for column in index.columns)\n'
              '\n'
              '    variables = dict(\n'
              '        table_name=quote_name(index.table._name),\n'
              "        index_name=quote_name('%s_%s' % (index.table._name, "
              'index.name)),\n'
              "        trigger_name=quote_name('%s_%s_update_trigger' % "
              '(index.table._name, index.name)),\n'
              "        procedure_name=quote_name('fn_%s_%s_update_trigger' % "
              '(index.table._name, index.name)),\n'
              '        '
              'search_document_column_name=quote_name(index.name[:-6]),\n'
              '        document_expression=document_expression)\n'
              '\n'
              "    create_procedure_sql = '''\\\n"
              'CREATE FUNCTION %(procedure_name)s () RETURNS trigger AS $$\n'
              'BEGIN\n'
              '  new')

Fragment(uuid='5c08576a-f07b-4aec-b8fc-239b23e200ff',
         path='/lib/dblayer/backend/base/format.py',
         lineno=296,
         depth=11,
         type='documentation',
         name='',
         text='%s_%s_update_trigger')

Fragment(uuid='46c063c5-ffb8-410f-a21c-7946237f7857',
         path='/lib/dblayer/backend/base/format.py',
         lineno=297,
         depth=11,
         type='documentation',
         name='',
         text='fn_%s_%s_update_trigger')

Fragment(uuid='eaf680cb-ebea-4054-9bbb-e0ff1e05f109',
         path='/lib/dblayer/backend/base/format.py',
         lineno=301,
         depth=6,
         type='documentation',
         name='',
         text='\\\n'
              'CREATE FUNCTION %(procedure_name)s () RETURNS trigger AS $$\n'
              'BEGIN\n'
              '  new.%(search_document_column_name)s := '
              'to_tsvector(%(document_expression)s);\n'
              '  RETURN new;\n'
              'END\n'
              '$$ LANGUAGE plpgsql;')

Fragment(uuid='3530dc08-7f24-49fc-ac42-751a15c33b50',
         path='/lib/dblayer/backend/base/format.py',
         lineno=304,
         depth=0,
         type='module',
         name='',
         text='%(search_document_column_name)s := '
              'to_tsvector(%(document_expression)s);\n'
              '  RETURN new;\n'
              'END\n'
              "$$ LANGUAGE plpgsql;''' % variables\n"
              '\n'
              "    create_index_sql = '''\\\n"
              'CREATE INDEX %(index_name)s ON %(table_name)s \\\n'
              "USING gin(%(search_document_column_name)s);''' % variables\n"
              '\n'
              "    create_trigger_sql = '''\\\n"
              'CREATE TRIGGER %(trigger_name)s \\\n'
              'BEFORE INSERT OR UPDATE \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH ROW \\\n'
              "EXECUTE PROCEDURE %(procedure_name)s ();''' % variables\n"
              '\n'
              '    statements = [\n'
              '        (create_procedure_sql, ()),\n'
              '        (create_index_sql, ()),\n'
              '        (create_trigger_sql, ())]\n'
              '\n'
              '    return statements\n')

Fragment(uuid='046981e9-6ebe-46f2-bfe6-b30300ffc801',
         path='/lib/dblayer/backend/base/format.py',
         lineno=304,
         depth=1,
         type='function',
         name='format_create_full_text_search_index',
         text='.%(search_document_column_name)s := '
              'to_tsvector(%(document_expression)s);\n'
              '  RETURN new;\n'
              'END\n'
              "$$ LANGUAGE plpgsql;''' % variables\n"
              '\n'
              "    create_index_sql = '''\\\n"
              'CREATE INDEX %(index_name)s ON %(table_name)s \\\n'
              "USING gin(%(search_document_column_name)s);''' % variables\n"
              '\n'
              "    create_trigger_sql = '''\\\n"
              'CREATE TRIGGER %(trigger_name)s \\\n'
              'BEFORE INSERT OR UPDATE \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH ROW \\\n'
              "EXECUTE PROCEDURE %(procedure_name)s ();''' % variables\n"
              '\n'
              '    statements = [\n'
              '        (create_procedure_sql, ()),\n'
              '        (create_index_sql, ()),\n'
              '        (create_trigger_sql, ())]\n'
              '\n'
              '    return statements')

Fragment(uuid='5f99a922-1922-4dc1-86f9-764e69e5e752',
         path='/lib/dblayer/backend/base/format.py',
         lineno=309,
         depth=6,
         type='documentation',
         name='',
         text='\\\n'
              'CREATE INDEX %(index_name)s ON %(table_name)s \\\n'
              'USING gin(%(search_document_column_name)s);')

Fragment(uuid='8a82254f-c7b9-4fbf-bba9-d13a696c84a0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=313,
         depth=6,
         type='documentation',
         name='',
         text='\\\n'
              'CREATE TRIGGER %(trigger_name)s \\\n'
              'BEFORE INSERT OR UPDATE \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH ROW \\\n'
              'EXECUTE PROCEDURE %(procedure_name)s ();')

Fragment(uuid='2df36570-5ec8-4427-aee6-4b292469d47d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=326,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_create_index(index):\n'
              '    """ Returns the definition of an index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              '    formatter = '
              'CREATE_INDEX_FORMATTER_MAP[index.__class__.__name__]\n'
              '    return formatter(index)\n'
              '\n'
              '\n'
              'CREATE_INDEX_FORMATTER_MAP = dict(\n'
              '    Index=format_create_btree_index,\n'
              '    FullTextSearchIndex=format_create_full_text_search_index,\n'
              ')\n'
              '\n'
              '\n'
              '### Formatting of index removal based on the database model\n')

Fragment(uuid='3b9bb22d-1dec-4b1f-8612-4a0d745d3aac',
         path='/lib/dblayer/backend/base/format.py',
         lineno=328,
         depth=1,
         type='function',
         name='format_create_index',
         text='def format_create_index(index):\n'
              '    """ Returns the definition of an index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              '    formatter = '
              'CREATE_INDEX_FORMATTER_MAP[index.__class__.__name__]\n'
              '    return formatter(index)')

Fragment(uuid='d106dee0-9204-4c15-94b8-d4b3796cbe56',
         path='/lib/dblayer/backend/base/format.py',
         lineno=329,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the definition of an index\n    ')

Fragment(uuid='52f1adc4-6b0b-4573-9473-5951cd40c9f8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=344,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting of index removal based on the database model')

Fragment(uuid='53cdbd7d-9ac9-45d0-a887-4942dda07b94',
         path='/lib/dblayer/backend/base/format.py',
         lineno=345,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_drop_btree_index(index):\n'
              '    """ Returns the statements to drop a regular B-Tree based '
              'index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              "    sql = 'DROP INDEX %s;' % quote_name('%s_%s' % "
              '(index.table._name, index.name))\n'
              '    return [(sql, ())]\n')

Fragment(uuid='a730f232-e33a-45d8-9103-b3b94f91f816',
         path='/lib/dblayer/backend/base/format.py',
         lineno=346,
         depth=1,
         type='function',
         name='format_drop_btree_index',
         text='def format_drop_btree_index(index):\n'
              '    """ Returns the statements to drop a regular B-Tree based '
              'index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              "    sql = 'DROP INDEX %s;' % quote_name('%s_%s' % "
              '(index.table._name, index.name))\n'
              '    return [(sql, ())]')

Fragment(uuid='967b67cd-ce6b-4827-92f3-709a95c08c05',
         path='/lib/dblayer/backend/base/format.py',
         lineno=347,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the statements to drop a regular B-Tree based index\n'
              '    ')

Fragment(uuid='23aec6a2-60ea-4f09-b133-b07a36da432e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=354,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_drop_full_text_search_index(index):\n'
              '    """ Returns the statements to drop a full text search '
              'index\n'
              '    """\n')

Fragment(uuid='ad5f181f-4cb6-4764-9910-519c947ba874',
         path='/lib/dblayer/backend/base/format.py',
         lineno=356,
         depth=1,
         type='function',
         name='format_drop_full_text_search_index',
         text='def format_drop_full_text_search_index(index):\n'
              '    """ Returns the statements to drop a full text search '
              'index\n'
              '    """\n')

Fragment(uuid='36aee357-5ebc-4720-8772-a1c9ed20ec85',
         path='/lib/dblayer/backend/base/format.py',
         lineno=357,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the statements to drop a full text search index\n    ')

Fragment(uuid='18b00d31-ed74-4cd5-8f6e-6b9bcde6dc51',
         path='/lib/dblayer/backend/base/format.py',
         lineno=359,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.FullTextSearchIndex)\n'
              '\n'
              '    table_name = quote_name(index.table._name)\n'
              "    index_name = quote_name('%s_%s' % (index.table._name, "
              'index.name))\n'
              "    trigger_name = quote_name('%s_%s_update_trigger' % "
              '(index.table._name, index.name))')

Fragment(uuid='81689bfe-1647-468e-8e77-6c32347dcfbe',
         path='/lib/dblayer/backend/base/format.py',
         lineno=359,
         depth=1,
         type='function',
         name='format_drop_full_text_search_index',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.FullTextSearchIndex)\n'
              '\n'
              '    table_name = quote_name(index.table._name)\n'
              "    index_name = quote_name('%s_%s' % (index.table._name, "
              'index.name))\n'
              "    trigger_name = quote_name('%s_%s_update_trigger' % "
              '(index.table._name, index.name))')

Fragment(uuid='3ac300c7-8f98-4b91-99c2-ca07f5afdafc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=364,
         depth=0,
         type='module',
         name='',
         text='\n'
              "    procedure_name = quote_name('fn_%s_%s_update_trigger' % "
              '(index.table._name, index.name))\n'
              '\n'
              '    statements = [\n'
              "        ('DROP TRIGGER %s ON %s;' % (trigger_name, table_name), "
              '()),\n'
              "        ('DROP INDEX %s;' % index_name, ()),\n"
              "        ('DROP FUNCTION %s();' % procedure_name, ())]\n"
              '\n'
              '    return statements\n')

Fragment(uuid='ed33574f-c544-43ec-a261-d3cdfb90613b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=364,
         depth=1,
         type='function',
         name='format_drop_full_text_search_index',
         text='\n'
              "    procedure_name = quote_name('fn_%s_%s_update_trigger' % "
              '(index.table._name, index.name))\n'
              '\n'
              '    statements = [\n'
              "        ('DROP TRIGGER %s ON %s;' % (trigger_name, table_name), "
              '()),\n'
              "        ('DROP INDEX %s;' % index_name, ()),\n"
              "        ('DROP FUNCTION %s();' % procedure_name, ())]\n"
              '\n'
              '    return statements')

Fragment(uuid='1889e067-d54f-4a15-bdaf-7cce05020585',
         path='/lib/dblayer/backend/base/format.py',
         lineno=364,
         depth=8,
         type='documentation',
         name='',
         text='%s_%s_update_trigger')

Fragment(uuid='256cd060-1bee-4c65-9d03-955b35f2268c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=365,
         depth=8,
         type='documentation',
         name='',
         text='fn_%s_%s_update_trigger')

Fragment(uuid='5992a075-96a3-4b45-b8b9-e797634aa3f8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=368,
         depth=8,
         type='documentation',
         name='',
         text='DROP TRIGGER %s ON %s;')

Fragment(uuid='e0841062-50cf-4be9-920b-80b61e6516b2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=373,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_drop_index(index):\n'
              '    """ Returns the definition of an index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              '    formatter = '
              'DROP_INDEX_FORMATTER_MAP[index.__class__.__name__]\n'
              '    return formatter(index)\n'
              '\n'
              '\n'
              'DROP_INDEX_FORMATTER_MAP = dict(\n'
              '    Index=format_drop_btree_index,\n'
              '    FullTextSearchIndex=format_drop_full_text_search_index,\n'
              ')\n'
              '\n'
              '\n'
              '### Formatting of procedure definitions based on the database '
              'model\n')

Fragment(uuid='bb844039-7ec5-4357-9952-930259dc7d70',
         path='/lib/dblayer/backend/base/format.py',
         lineno=375,
         depth=1,
         type='function',
         name='format_drop_index',
         text='def format_drop_index(index):\n'
              '    """ Returns the definition of an index\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(index, '
              'dblayer.model.index.BaseIndex)\n'
              '\n'
              '    formatter = '
              'DROP_INDEX_FORMATTER_MAP[index.__class__.__name__]\n'
              '    return formatter(index)')

Fragment(uuid='43b699fd-5187-4cd4-897b-55630dfd881d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=376,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the definition of an index\n    ')

Fragment(uuid='2dfb2d55-e4b4-494c-8d6d-cf62b13e63ec',
         path='/lib/dblayer/backend/base/format.py',
         lineno=391,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting of procedure definitions based on the database '
              'model')

Fragment(uuid='7691afc5-0ab6-4f68-8f44-abb10ca8e9d2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=392,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_create_procedure(procedure):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a stored procedure\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(procedure, '
              'dblayer.model.procedure.BaseProcedure)\n'
              '\n'
              '    variables = dict(\n'
              '        name=quote_name(procedure.name),\n'
              '        language=quote_name(procedure.language),\n'
              "        argument_list=', '.join(procedure.argument_list),\n"
              '        result=procedure.result,\n'
              '        body=procedure.body)\n'
              '\n'
              "    sql = '''\\\n"
              'CREATE FUNCTION %(name)s (%(argument_list)s) RETURNS '
              '%(result)s\n'
              'BEGIN\n'
              '  %(body)s\n'
              'END\n'
              "$$ LANGUAGE %(language)s;''' % variables\n"
              '\n'
              '    return [(sql, ())]\n')

Fragment(uuid='65753b61-662d-461d-ae41-355321849c9a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=393,
         depth=1,
         type='function',
         name='format_create_procedure',
         text='def format_create_procedure(procedure):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a stored procedure\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(procedure, '
              'dblayer.model.procedure.BaseProcedure)\n'
              '\n'
              '    variables = dict(\n'
              '        name=quote_name(procedure.name),\n'
              '        language=quote_name(procedure.language),\n'
              "        argument_list=', '.join(procedure.argument_list),\n"
              '        result=procedure.result,\n'
              '        body=procedure.body)\n'
              '\n'
              "    sql = '''\\\n"
              'CREATE FUNCTION %(name)s (%(argument_list)s) RETURNS '
              '%(result)s\n'
              'BEGIN\n'
              '  %(body)s\n'
              'END\n'
              "$$ LANGUAGE %(language)s;''' % variables\n"
              '\n'
              '    return [(sql, ())]')

Fragment(uuid='66c52165-b496-4b5e-84f6-95991dc5954b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=394,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a stored procedure\n'
              '    ')

Fragment(uuid='bc9f8bc0-08e1-44b2-a84f-208abdd6e669',
         path='/lib/dblayer/backend/base/format.py',
         lineno=406,
         depth=6,
         type='documentation',
         name='',
         text='\\\n'
              'CREATE FUNCTION %(name)s (%(argument_list)s) RETURNS '
              '%(result)s\n'
              'BEGIN\n'
              '  %(body)s\n'
              'END\n'
              '$$ LANGUAGE %(language)s;')

Fragment(uuid='17995f20-dc27-476c-ac85-8dad031c8a83',
         path='/lib/dblayer/backend/base/format.py',
         lineno=414,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_drop_procedure(procedure, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a stored procedure\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(procedure, '
              'dblayer.model.procedure.BaseProcedure)\n'
              '\n'
              "    sql = 'DROP FUNCTION %s (%s);' % (\n"
              '        quote_name(procedure.name),\n'
              "        ', '.join(procedure.argument_list))\n"
              '    return [(sql, ())]\n'
              '\n'
              '\n'
              '### Formatting of trigger definitions based on the database '
              'model\n')

Fragment(uuid='87b8af14-40d7-44fa-878a-90312bcaf4c0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=416,
         depth=1,
         type='function',
         name='format_drop_procedure',
         text='def format_drop_procedure(procedure, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a stored procedure\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(procedure, '
              'dblayer.model.procedure.BaseProcedure)\n'
              '\n'
              "    sql = 'DROP FUNCTION %s (%s);' % (\n"
              '        quote_name(procedure.name),\n'
              "        ', '.join(procedure.argument_list))\n"
              '    return [(sql, ())]')

Fragment(uuid='94095a90-daf4-4a30-b175-c7d3b7a8007c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=417,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a stored procedure\n'
              '    ')

Fragment(uuid='5f2e4abc-82a4-4f07-b099-0e4cda8cf2fc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=422,
         depth=6,
         type='documentation',
         name='',
         text='DROP FUNCTION %s (%s);')

Fragment(uuid='ba40bd18-af3a-4e14-9358-22152db96021',
         path='/lib/dblayer/backend/base/format.py',
         lineno=428,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting of trigger definitions based on the database '
              'model')

Fragment(uuid='97cc6c74-a144-4e76-b127-3401ca8c4298',
         path='/lib/dblayer/backend/base/format.py',
         lineno=429,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_create_trigger(trigger):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a trigger\n'
              '    """\n')

Fragment(uuid='d385f4e4-ef21-4219-8c40-f50358837a8e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=430,
         depth=1,
         type='function',
         name='format_create_trigger',
         text='def format_create_trigger(trigger):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a trigger\n'
              '    """\n')

Fragment(uuid='28cd47a7-2fb2-4278-80a0-8b514e51a5e1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=431,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a trigger\n'
              '    ')

Fragment(uuid='d5da5cf9-f66b-4442-aafb-08630198e258',
         path='/lib/dblayer/backend/base/format.py',
         lineno=433,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(trigger, '
              'dblayer.model.trigger.BaseTrigger)\n'
              '\n'
              '    timing, event, scope = '
              'TRIGGER_FORMATTER_MAP[trigger.__class__.__name__]\n'
              '\n'
              '    variables = dict(\n'
              '        trigger_name=quote_name(trigger.name),\n'
              '        timing=timing,\n'
              '        event=event,\n'
              '        scope=scope,\n'
              '        table_name=quote_name(trigger.table._name),\n'
              '        procedure_name=quote_name(trigger.procedure_name),\n'
              '      ')

Fragment(uuid='19ff0719-af85-4bb0-9049-5122f17a62d7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=433,
         depth=1,
         type='function',
         name='format_create_trigger',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(trigger, '
              'dblayer.model.trigger.BaseTrigger)\n'
              '\n'
              '    timing, event, scope = '
              'TRIGGER_FORMATTER_MAP[trigger.__class__.__name__]\n'
              '\n'
              '    variables = dict(\n'
              '        trigger_name=quote_name(trigger.name),\n'
              '        timing=timing,\n'
              '        event=event,\n'
              '        scope=scope,\n'
              '        table_name=quote_name(trigger.table._name),\n'
              '     ')

Fragment(uuid='083f0659-05f1-43cf-bfab-34d78afe0739',
         path='/lib/dblayer/backend/base/format.py',
         lineno=444,
         depth=1,
         type='function',
         name='format_create_trigger',
         text='   procedure_name=quote_name(trigger.procedure_name),\n'
              "        procedure_parameters=', '.join(map(format_expression, "
              'trigger.procedure_parameters)))\n'
              '\n'
              "    sql = '''\\\n"
              'CREATE TRIGGER %(trigger_name)s \\\n'
              '%(timing)s %(event)s \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH %(scope)s \\\n'
              'EXECUTE PROCEDURE %(procedure_name)s '
              "(%(procedure_parameters)s);''' % variables\n"
              '    return [(sql, ())]')

Fragment(uuid='da58c247-cb3b-49e9-8082-15eecf89a395',
         path='/lib/dblayer/backend/base/format.py',
         lineno=445,
         depth=0,
         type='module',
         name='',
         text="  procedure_parameters=', '.join(map(format_expression, "
              'trigger.procedure_parameters)))\n'
              '\n'
              "    sql = '''\\\n"
              'CREATE TRIGGER %(trigger_name)s \\\n'
              '%(timing)s %(event)s \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH %(scope)s \\\n'
              'EXECUTE PROCEDURE %(procedure_name)s '
              "(%(procedure_parameters)s);''' % variables\n"
              '    return [(sql, ())]\n'
              '\n'
              '\n'
              'TRIGGER_FORMATTER_MAP = dict(\n'
              "    BeforeInsertRow=('BEFORE', 'INSERT', 'ROW'),\n"
              "    BeforeUpdateRow=('BEFORE', 'UPDATE'")

Fragment(uuid='9058815d-7a70-40ef-8bc7-b323fbf8e4e7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=447,
         depth=6,
         type='documentation',
         name='',
         text='\\\n'
              'CREATE TRIGGER %(trigger_name)s \\\n'
              '%(timing)s %(event)s \\\n'
              'ON %(table_name)s \\\n'
              'FOR EACH %(scope)s \\\n'
              'EXECUTE PROCEDURE %(procedure_name)s (%(procedure_parameters)s);')

Fragment(uuid='9a59c57b-8ee8-4e37-adbd-e69cd2569f9f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=458,
         depth=0,
         type='module',
         name='',
         text=", 'ROW'),\n"
              "    BeforeInsertOrUpdateRow=('BEFORE', 'INSERT OR UPDATE', "
              "'ROW'),\n"
              "    BeforeDeleteRow=('BEFORE', 'DELETE', 'ROW'),\n"
              "    BeforeInsertStatement=('BEFORE', 'INSERT', 'STATEMENT'),\n"
              "    BeforeUpdateStatement=('BEFORE', 'UPDATE', 'STATEMENT'),\n"
              "    BeforeInsertOrUpdateStatement=('BEFORE', 'INSERT OR "
              "UPDATE', 'STATEMENT'),\n"
              "    BeforeDeleteStatement=('BEFORE', 'DELETE', 'STATEMENT'),\n"
              "    AfterInsertRow=('AFTER', 'INSERT'")

Fragment(uuid='230adf5f-e10c-47f8-a44c-dcd6fdee81fa',
         path='/lib/dblayer/backend/base/format.py',
         lineno=465,
         depth=0,
         type='module',
         name='',
         text=", 'ROW'),\n"
              "    AfterUpdateRow=('AFTER', 'UPDATE', 'ROW'),\n"
              "    AfterInsertOrUpdateRow=('AFTER', 'INSERT OR UPDATE', "
              "'ROW'),\n"
              "    AfterDeleteRow=('AFTER', 'DELETE', 'ROW'),\n"
              "    AfterInsertStatement=('AFTER', 'INSERT', 'STATEMENT'),\n"
              "    AfterUpdateStatement=('AFTER', 'UPDATE', 'STATEMENT'),\n"
              "    AfterInsertOrUpdateStatement=('AFTER', 'INSERT OR UPDATE', "
              "'STATEMENT'),\n"
              "    AfterDeleteStatement=('AFTER', 'DELETE', 'STATEMENT'),\n"
              ')\n')

Fragment(uuid='67ece1b7-b905-40e8-9b5e-c8aa27a5f08b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=474,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_drop_trigger(trigger, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a trigger\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(trigger, '
              'dblayer.model.trigger.BaseTrigger)\n'
              '\n'
              "    sql = 'DROP TRIGGER %s ON %s%s;' % (\n"
              '        quote_name(trigger.name),\n'
              '        quote_name(trigger.table._name),\n'
              "        ' CASCADE' if cascade else '')\n"
              '    return [(sql, ())]\n'
              '\n'
              '\n'
              '### Formatting of constraint definitions based on the database '
              'model\n')

Fragment(uuid='ea909d4b-2d3d-4093-ac2b-96a930e66b2f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=476,
         depth=1,
         type='function',
         name='format_drop_trigger',
         text='def format_drop_trigger(trigger, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a trigger\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(trigger, '
              'dblayer.model.trigger.BaseTrigger)\n'
              '\n'
              "    sql = 'DROP TRIGGER %s ON %s%s;' % (\n"
              '        quote_name(trigger.name),\n'
              '        quote_name(trigger.table._name),\n'
              "        ' CASCADE' if cascade else '')\n"
              '    return [(sql, ())]')

Fragment(uuid='0f64be17-7fff-441f-ac3c-f5dca4f73342',
         path='/lib/dblayer/backend/base/format.py',
         lineno=477,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a trigger\n'
              '    ')

Fragment(uuid='3c4515a6-df7f-4dc3-87e6-e4efef5c462a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=482,
         depth=6,
         type='documentation',
         name='',
         text='DROP TRIGGER %s ON %s%s;')

Fragment(uuid='cdd83bf6-1445-4203-8477-dfa915e377fd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=489,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting of constraint definitions based on the database '
              'model')

Fragment(uuid='6cf66043-102e-4321-bbb8-1ab4d5064791',
         path='/lib/dblayer/backend/base/format.py',
         lineno=490,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_primary_key_constraint(constraint):\n'
              '    """ Returns the definition of a primary key constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.PrimaryKey)\n'
              '\n'
              "    sql = 'PRIMARY KEY (%s)' % (', "
              "'.join(quote_name(column.name) for column in "
              'constraint.columns))\n'
              '    return (sql, ())\n')

Fragment(uuid='e5f45f61-ea27-420f-8aef-96b68e95277c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=491,
         depth=1,
         type='function',
         name='format_primary_key_constraint',
         text='def format_primary_key_constraint(constraint):\n'
              '    """ Returns the definition of a primary key constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.PrimaryKey)\n'
              '\n'
              "    sql = 'PRIMARY KEY (%s)' % (', "
              "'.join(quote_name(column.name) for column in "
              'constraint.columns))\n'
              '    return (sql, ())')

Fragment(uuid='d7b5bb47-e555-4469-a826-30f08e6ee873',
         path='/lib/dblayer/backend/base/format.py',
         lineno=492,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the definition of a primary key constraint\n    ')

Fragment(uuid='37273cd1-2945-4969-a02c-f0ae158d77f9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=499,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_foreign_key_constraint(constraint):\n'
              '    """ Returns the definition of a foreign key constraint\n'
              '    """\n')

Fragment(uuid='6382a38e-46b0-42c7-ba7f-65ac0d85b8ad',
         path='/lib/dblayer/backend/base/format.py',
         lineno=501,
         depth=1,
         type='function',
         name='format_foreign_key_constraint',
         text='def format_foreign_key_constraint(constraint):\n'
              '    """ Returns the definition of a foreign key constraint\n'
              '    """\n')

Fragment(uuid='81d902c3-0c3a-4d9c-bf46-ecd442122934',
         path='/lib/dblayer/backend/base/format.py',
         lineno=502,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the definition of a foreign key constraint\n    ')

Fragment(uuid='36b91008-e50f-4b47-8093-9bca120f8107',
         path='/lib/dblayer/backend/base/format.py',
         lineno=504,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.ForeignKey)\n'
              '\n'
              '    table = constraint.table\n'
              '\n'
              '    # NOTE: We need to look up the cloned foreign key column by '
              'name to get the right object here\n'
              '    fk_column_name = constraint.columns[0].name\n'
              '    fk_column = getattr(table, fk_column_name)\n'
              '\n'
              '    referenced_table = fk_column.referenced_table\n'
              "    assert referenced_table, 'The referenced table for foreign "
              "key column %s.%s has not been determined!' % (fk_col")

Fragment(uuid='58e7a6bd-3962-47b9-b94c-600ed7df3d4e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=504,
         depth=1,
         type='function',
         name='format_foreign_key_constraint',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.ForeignKey)\n'
              '\n'
              '    table = constraint.table\n'
              '\n'
              '    # NOTE: We need to look up the cloned foreign key column by '
              'name to get the right object here\n'
              '    fk_column_name = constraint.columns[0].name\n'
              '    fk_column = getattr(table, fk_column_name)\n'
              '\n'
              '    referenced_table = fk_column.referenced_table\n'
              "    assert referenced_table, 'The referenced table for foreign "
              "key column %s.%s has not been determined!' % (fk_co")

Fragment(uuid='7983c021-ad8d-425f-a320-62782efc8f79',
         path='/lib/dblayer/backend/base/format.py',
         lineno=509,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: We need to look up the cloned foreign key column by '
              'name to get the right object here')

Fragment(uuid='ceb28fc7-81f4-4542-8f79-da8393c1098e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=514,
         depth=0,
         type='module',
         name='',
         text='umn.table_class.__name__, fk_column.name)\n'
              '    pk_column = referenced_table._primary_key\n'
              "    assert pk_column, 'Referenced table %r does not have a "
              "primary key column!' % referenced_table._name\n"
              '    sql = (\n'
              "            'FOREIGN KEY (%s) REFERENCES %s (%s) MATCH SIMPLE "
              "'\n"
              "            'ON UPDATE NO ACTION ON DELETE NO ACTION' % (\n"
              '                quote_name(fk_column.name),\n'
              '                quote_name(referenced_table._name),\n'
              '                quote_name(pk_column.name)))\n'
              '    return (sql, ())\n')

Fragment(uuid='d80f3be4-0db7-432c-b5bd-082c394c4f76',
         path='/lib/dblayer/backend/base/format.py',
         lineno=514,
         depth=1,
         type='function',
         name='format_foreign_key_constraint',
         text='lumn.table_class.__name__, fk_column.name)\n'
              '    pk_column = referenced_table._primary_key\n'
              "    assert pk_column, 'Referenced table %r does not have a "
              "primary key column!' % referenced_table._name\n"
              '    sql = (\n'
              "            'FOREIGN KEY (%s) REFERENCES %s (%s) MATCH SIMPLE "
              "'\n"
              "            'ON UPDATE NO ACTION ON DELETE NO ACTION' % (\n"
              '                quote_name(fk_column.name),\n'
              '                quote_name(referenced_table._name),\n'
              '                quote_name(pk_column.name)))\n'
              '    return (sql, ())')

Fragment(uuid='c608e1bb-7320-4605-bf5b-0b44a03fbdad',
         path='/lib/dblayer/backend/base/format.py',
         lineno=514,
         depth=5,
         type='documentation',
         name='',
         text='The referenced table for foreign key column %s.%s has not been '
              'determined!')

Fragment(uuid='c0eb5e58-50f6-444b-80db-40c2570dbccb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=516,
         depth=5,
         type='documentation',
         name='',
         text='Referenced table %r does not have a primary key column!')

Fragment(uuid='b034f5b2-836b-4432-bedf-30dfb3f0d532',
         path='/lib/dblayer/backend/base/format.py',
         lineno=518,
         depth=8,
         type='documentation',
         name='',
         text='FOREIGN KEY (%s) REFERENCES %s (%s) MATCH SIMPLE ')

Fragment(uuid='23a6bec2-f9b0-4241-80b6-1c4ee982eaf0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=519,
         depth=8,
         type='documentation',
         name='',
         text='ON UPDATE NO ACTION ON DELETE NO ACTION')

Fragment(uuid='59edc91a-a1e2-4194-b12c-0ef2a7f3778d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=524,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_unique_constraint(constraint):\n'
              '    """ Returns the definition of a unique index constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.Unique)\n'
              '\n'
              "    sql = 'UNIQUE (%s)' % (', '.join(quote_name(column.name) "
              'for column in constraint.columns))\n'
              '    return (sql, ())\n')

Fragment(uuid='b15b6445-3e94-4784-ab8e-8430aa4290af',
         path='/lib/dblayer/backend/base/format.py',
         lineno=526,
         depth=1,
         type='function',
         name='format_unique_constraint',
         text='def format_unique_constraint(constraint):\n'
              '    """ Returns the definition of a unique index constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.Unique)\n'
              '\n'
              "    sql = 'UNIQUE (%s)' % (', '.join(quote_name(column.name) "
              'for column in constraint.columns))\n'
              '    return (sql, ())')

Fragment(uuid='2e24ee3b-881e-436b-8dbf-575e3267de84',
         path='/lib/dblayer/backend/base/format.py',
         lineno=527,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the definition of a unique index constraint\n    ')

Fragment(uuid='b07447a2-1424-4dc9-8483-aa3dacf6edce',
         path='/lib/dblayer/backend/base/format.py',
         lineno=534,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_check_constraint(constraint):\n'
              '    """ Returns the definition of a check constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.Check)\n'
              '\n'
              "    sql = 'CHECK %s' % "
              'format_expression(constraint.expression)\n'
              '    return (sql, ())\n')

Fragment(uuid='965a13a4-67e6-4b59-978c-dc5882e156a3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=536,
         depth=1,
         type='function',
         name='format_check_constraint',
         text='def format_check_constraint(constraint):\n'
              '    """ Returns the definition of a check constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.Check)\n'
              '\n'
              "    sql = 'CHECK %s' % "
              'format_expression(constraint.expression)\n'
              '    return (sql, ())')

Fragment(uuid='0fd26df0-e3cc-4712-a4ff-9c85a47409f4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=537,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the definition of a check constraint\n    ')

Fragment(uuid='31e22cc6-c988-491f-a69d-8efe2d05dab7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=544,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_constraint(constraint):\n'
              '    """ Returns the definition of a constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.BaseConstraint)\n'
              '\n'
              '    formatter = '
              'CONSTRAINT_FORMATTER_MAP[constraint.__class__.__name__]\n'
              '    return formatter(constraint)\n'
              '\n'
              '\n'
              'CONSTRAINT_FORMATTER_MAP = dict(\n'
              '    PrimaryKey=format_primary_key_constraint,\n'
              '    ForeignKey=format_foreign_key_constraint,\n'
              '    Unique=format_unique_constraint,\n'
              '    Check=format_check_constraint,\n'
              ')\n'
              '\n'
              '\n'
              '### Formatting of SQL statements based on the database model\n')

Fragment(uuid='e0db9a42-1f46-4aac-ae52-077e422e9d95',
         path='/lib/dblayer/backend/base/format.py',
         lineno=546,
         depth=1,
         type='function',
         name='format_constraint',
         text='def format_constraint(constraint):\n'
              '    """ Returns the definition of a constraint\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(constraint, '
              'dblayer.model.constraint.BaseConstraint)\n'
              '\n'
              '    formatter = '
              'CONSTRAINT_FORMATTER_MAP[constraint.__class__.__name__]\n'
              '    return formatter(constraint)')

Fragment(uuid='421eb148-c5fc-4e15-82ea-a0cc9a8f764d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=547,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the definition of a constraint\n    ')

Fragment(uuid='a03b1472-91d2-4509-9204-e0ac21ff42d0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=564,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting of SQL statements based on the database model')

Fragment(uuid='15dc044b-1166-4168-9e0d-8bd5c184b9ef',
         path='/lib/dblayer/backend/base/format.py',
         lineno=565,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_create_table(table, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              '    quoted_table_name = quote_name(table._name)\n'
              '\n'
              '    definition_list = []\n'
              '    parameter_list = []\n'
              '\n'
              '    # Collect list of column definitions\n')

Fragment(uuid='56f952cb-34c1-4968-902c-0b4b36b33ea7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=566,
         depth=1,
         type='function',
         name='format_create_table',
         text='def format_create_table(table, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              '    quoted_table_name = quote_name(table._name)\n'
              '\n'
              '    definition_list = []\n'
              '    parameter_list = []\n'
              '\n'
              '    # Collect list of column definitions\n')

Fragment(uuid='3e4bed53-ae39-4edf-b448-be2d9f0fd380',
         path='/lib/dblayer/backend/base/format.py',
         lineno=567,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the list of tuples of SQL statements and '
              'parameter_tuple to create a table\n'
              '    ')

Fragment(uuid='ce06f383-b273-4634-ab6b-6a58ac35087e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=577,
         depth=2,
         type='documentation',
         name='',
         text='# Collect list of column definitions')

Fragment(uuid='8d1822a7-8edd-4de3-89ee-c402d5b7b812',
         path='/lib/dblayer/backend/base/format.py',
         lineno=578,
         depth=0,
         type='module',
         name='',
         text='    for column in table._column_list:\n'
              '        definition, new_parameters = format_column(column)\n'
              '        definition_list.append(\n'
              "            '%s %s' % (\n"
              '                quote_name(column.name),\n'
              '                definition))\n'
              '        parameter_list.extend(new_parameters)\n'
              '\n'
              '    # Collect list of constraint definitions\n')

Fragment(uuid='b85d3aaa-6333-4d1a-b229-bd28fd5cea33',
         path='/lib/dblayer/backend/base/format.py',
         lineno=578,
         depth=1,
         type='function',
         name='format_create_table',
         text='    for column in table._column_list:\n'
              '        definition, new_parameters = format_column(column)\n'
              '        definition_list.append(\n'
              "            '%s %s' % (\n"
              '                quote_name(column.name),\n'
              '                definition))\n'
              '        parameter_list.extend(new_parameters)\n'
              '\n'
              '    # Collect list of constraint definitions\n')

Fragment(uuid='0cf25f15-59f2-4b74-91b4-ae663520191d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=586,
         depth=2,
         type='documentation',
         name='',
         text='# Collect list of constraint definitions')

Fragment(uuid='bd600276-f9b8-4eb2-9daf-87686e6d5987',
         path='/lib/dblayer/backend/base/format.py',
         lineno=587,
         depth=0,
         type='module',
         name='',
         text='    for constaint in table._constraint_list:\n'
              '        definition, new_parameters = '
              'format_constraint(constaint)\n'
              '        definition_list.append(\n'
              "            'CONSTRAINT %s %s' % (\n"
              "                quote_name('%s__%s' % (table._name, "
              'constaint.name)),\n'
              '                definition))\n'
              '        parameter_list.extend(new_parameters)\n'
              '\n'
              '    # SQL CREATE TABLE statement and parameter_tuple\n'
              "    sql = 'CREATE TABLE %s (\\n%s) WITH (OIDS=FALSE);' % (\n"
              "        quote_name(table._name), ',\\n'.join(definition_list))\n"
              '    statements = [(sql, tuple(parameter_list))]\n'
              '\n'
              '    # Format CREATE INDEX statements\n')

Fragment(uuid='045a77b8-4ea7-4952-bd9a-d56cc31183da',
         path='/lib/dblayer/backend/base/format.py',
         lineno=587,
         depth=1,
         type='function',
         name='format_create_table',
         text='    for constaint in table._constraint_list:\n'
              '        definition, new_parameters = '
              'format_constraint(constaint)\n'
              '        definition_list.append(\n'
              "            'CONSTRAINT %s %s' % (\n"
              "                quote_name('%s__%s' % (table._name, "
              'constaint.name)),\n'
              '                definition))\n'
              '        parameter_list.extend(new_parameters)\n'
              '\n'
              '    # SQL CREATE TABLE statement and parameter_tuple\n'
              "    sql = 'CREATE TABLE %s (\\n%s) WITH (OIDS=FALSE);' % (\n"
              "        quote_name(table._name), ',\\n'.join(definition_list))\n"
              '    statements = [(sql, tuple(parameter_list))]\n'
              '\n'
              '    # Format CREATE INDEX statements\n')

Fragment(uuid='315d5d96-61e5-4d3d-b70d-879bcb65a761',
         path='/lib/dblayer/backend/base/format.py',
         lineno=595,
         depth=2,
         type='documentation',
         name='',
         text='# SQL CREATE TABLE statement and parameter_tuple')

Fragment(uuid='0589a3b7-2808-4fb0-a1b7-925f5763504d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=596,
         depth=6,
         type='documentation',
         name='',
         text='CREATE TABLE %s (\\n%s) WITH (OIDS=FALSE);')

Fragment(uuid='21f957db-c109-41ce-8de7-ffbd824f0ed8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=600,
         depth=2,
         type='documentation',
         name='',
         text='# Format CREATE INDEX statements')

Fragment(uuid='5ff104e3-bc36-49f4-8007-f3c5d8f4797c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=601,
         depth=0,
         type='module',
         name='',
         text='    for index in table._index_list:\n'
              '        statements.extend(format_create_index(index))\n'
              '\n'
              '    # Prepare the parameter placeholders\n'
              '    statements = [\n'
              '        (replace_parameter_placeholders(sql), parameter_tuple)\n')

Fragment(uuid='35e2f111-23fe-400c-8e49-e231e8f48839',
         path='/lib/dblayer/backend/base/format.py',
         lineno=601,
         depth=1,
         type='function',
         name='format_create_table',
         text='    for index in table._index_list:\n'
              '        statements.extend(format_create_index(index))\n'
              '\n'
              '    # Prepare the parameter placeholders\n'
              '    statements = [\n'
              '        (replace_parameter_placeholders(sql), parameter_tuple)\n')

Fragment(uuid='b5009921-db29-43ec-a7e3-cbd8636cc8cd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=604,
         depth=2,
         type='documentation',
         name='',
         text='# Prepare the parameter placeholders')

Fragment(uuid='b84b95e1-1455-4335-9ae6-9c4b8ebc32fe',
         path='/lib/dblayer/backend/base/format.py',
         lineno=607,
         depth=0,
         type='module',
         name='',
         text='        for sql, parameter_tuple in statements]\n'
              '\n'
              '    return statements\n')

Fragment(uuid='78b27836-d3b8-454d-bb79-33beb22a3a63',
         path='/lib/dblayer/backend/base/format.py',
         lineno=607,
         depth=1,
         type='function',
         name='format_create_table',
         text='        for sql, parameter_tuple in statements]\n'
              '\n'
              '    return statements')

Fragment(uuid='2875ce03-59f7-4ddc-962f-b19da9382b7f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=610,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_drop_table(table, database, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              '    statements = []\n'
              '\n'
              '    # Format DROP INDEX statements\n'
              '    for index in table._index_list:\n'
              '        statements.extend(format_drop_index(index))\n'
              '\n'
              '    # Format statements to drop the table\n'
              "    sql = 'DROP TABLE %s%s;' % (\n"
              '        quote_name(table._name),\n'
              "        ' CASCADE' if cascade else '')\n"
              '    statements.append((sql, ()))\n'
              '\n'
              '    return statements\n')

Fragment(uuid='ead862e4-accc-4eee-b2b7-fa0f26cb81f2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=612,
         depth=1,
         type='function',
         name='format_drop_table',
         text='def format_drop_table(table, database, cascade=False):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              '    statements = []\n'
              '\n'
              '    # Format DROP INDEX statements\n'
              '    for index in table._index_list:\n'
              '        statements.extend(format_drop_index(index))\n'
              '\n'
              '    # Format statements to drop the table\n'
              "    sql = 'DROP TABLE %s%s;' % (\n"
              '        quote_name(table._name),\n'
              "        ' CASCADE' if cascade else '')\n"
              '    statements.append((sql, ()))\n'
              '\n'
              '    return statements')

Fragment(uuid='76d244d4-e391-44dd-b0f7-df2482b5d9cf',
         path='/lib/dblayer/backend/base/format.py',
         lineno=613,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the list of tuples of SQL statements and '
              'parameter_tuple to drop a table\n'
              '    ')

Fragment(uuid='8fa57f42-9690-4ac7-a04f-2ebee48d4966',
         path='/lib/dblayer/backend/base/format.py',
         lineno=620,
         depth=2,
         type='documentation',
         name='',
         text='# Format DROP INDEX statements')

Fragment(uuid='afd5b3bd-2ea0-45a4-b387-d0b908084a50',
         path='/lib/dblayer/backend/base/format.py',
         lineno=624,
         depth=2,
         type='documentation',
         name='',
         text='# Format statements to drop the table')

Fragment(uuid='60025979-10a1-44d4-928c-9da1f3a23c6b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=631,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_truncate_table(table, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to truncate a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              "    return [('TRUNCATE TABLE %s' % quote_name(table._name), "
              '())]\n')

Fragment(uuid='74fcbbb1-d1cf-4c61-b5a5-7490d87bc1ac',
         path='/lib/dblayer/backend/base/format.py',
         lineno=633,
         depth=1,
         type='function',
         name='format_truncate_table',
         text='def format_truncate_table(table, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to truncate a table\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(table, dblayer.model.table.Table)\n'
              '\n'
              "    return [('TRUNCATE TABLE %s' % quote_name(table._name), ())]")

Fragment(uuid='6e34e643-2796-490a-a69a-afc5a88a2062',
         path='/lib/dblayer/backend/base/format.py',
         lineno=634,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the list of tuples of SQL statements and '
              'parameter_tuple to truncate a table\n'
              '    ')

Fragment(uuid='8e51a710-bdc9-4cf8-8a92-5fb0e0de3076',
         path='/lib/dblayer/backend/base/format.py',
         lineno=640,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_truncate_table_list(table_list, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to truncate multiple tables\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        for table in table_list:\n'
              '            assert isinstance(table, '
              'dblayer.model.table.Table)\n'
              '\n'
              "    return [('TRUNCATE TABLE %s' % ', "
              "'.join(quote_name(table._name) for table in table_list if "
              'table._writable), ())]\n'
              '\n'
              '\n'
              '### Formatting SQL statements runtime (no database model '
              'available, only the record classes)\n')

Fragment(uuid='0e4a0219-5411-43ea-bb34-d3ad27073793',
         path='/lib/dblayer/backend/base/format.py',
         lineno=642,
         depth=1,
         type='function',
         name='format_truncate_table_list',
         text='def format_truncate_table_list(table_list, database):\n'
              '    """ Returns the list of tuples of SQL statements and '
              'parameter_tuple to truncate multiple tables\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        for table in table_list:\n'
              '            assert isinstance(table, '
              'dblayer.model.table.Table)\n'
              '\n'
              "    return [('TRUNCATE TABLE %s' % ', "
              "'.join(quote_name(table._name) for table in table_list if "
              'table._writable), ())]')

Fragment(uuid='e1cdd59e-4491-4a5e-9e29-5d7529c0bea6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=643,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the list of tuples of SQL statements and '
              'parameter_tuple to truncate multiple tables\n'
              '    ')

Fragment(uuid='32efb8d3-4744-4552-b1f7-1e0cdbf43e42',
         path='/lib/dblayer/backend/base/format.py',
         lineno=652,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting SQL statements runtime (no database model '
              'available, only the record classes)')

Fragment(uuid='e58ec385-fa80-4128-9be5-e3fa197e113c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=653,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_cross_join_group_list(clauses):\n'
              '    """ Formats the FROM clause of SQL SELECT statements\n'
              '    \n'
              '    Considers JOINs of all supported kind. Returns list of '
              'cross joined groups.\n'
              '    \n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '\n'
              '    from_list = []\n'
              '    join_group = []\n')

Fragment(uuid='7ac689b8-bde2-4cf9-8e38-d3c65f203120',
         path='/lib/dblayer/backend/base/format.py',
         lineno=654,
         depth=1,
         type='function',
         name='format_cross_join_group_list',
         text='def format_cross_join_group_list(clauses):\n'
              '    """ Formats the FROM clause of SQL SELECT statements\n'
              '    \n'
              '    Considers JOINs of all supported kind. Returns list of '
              'cross joined groups.\n'
              '    \n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              '\n'
              '    from_list = []\n'
              '    join_group = []\n')

Fragment(uuid='099fa033-f3ea-4e7c-8d5c-247381f3606a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=655,
         depth=4,
         type='documentation',
         name='',
         text=' Formats the FROM clause of SQL SELECT statements\n'
              '    \n'
              '    Considers JOINs of all supported kind. Returns list of '
              'cross joined groups.\n'
              '    \n'
              '    ')

Fragment(uuid='03a88e95-0d34-455a-95ed-629e5b4999cd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=665,
         depth=0,
         type='module',
         name='',
         text='\n    for source in clauses.table_list:\n')

Fragment(uuid='5d072aec-a20d-4612-b215-8b11e0e4e77a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=665,
         depth=1,
         type='function',
         name='format_cross_join_group_list',
         text='\n    for source in clauses.table_list:\n')

Fragment(uuid='58b113d8-69b9-4c5b-bcf6-25cb3028fa9e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=667,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        if isinstance(source, str):\n'
              '            # Single table, no aliases\n')

Fragment(uuid='4e1c690e-aa1b-4cdd-94dd-1695eaaa2961',
         path='/lib/dblayer/backend/base/format.py',
         lineno=667,
         depth=1,
         type='function',
         name='format_cross_join_group_list',
         text='\n'
              '        if isinstance(source, str):\n'
              '            # Single table, no aliases\n')

Fragment(uuid='94efec92-548a-4b64-9371-66d8e79e80c8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=669,
         depth=5,
         type='documentation',
         name='',
         text='# Single table, no aliases')

Fragment(uuid='0b21c27e-f979-497d-bfbc-417d85aab867',
         path='/lib/dblayer/backend/base/format.py',
         lineno=670,
         depth=0,
         type='module',
         name='',
         text='            if join_group:\n'
              "                from_list.append(' '.join(join_group))\n"
              '            join_group = [quote_name(source)]\n'
              '\n'
              '        elif len(source) == 2:\n'
              '            # New cross join group\n'
              '            table_name, alias_name = source\n')

Fragment(uuid='ec91dbd0-2466-4bd4-a42d-01979c9688ff',
         path='/lib/dblayer/backend/base/format.py',
         lineno=670,
         depth=1,
         type='function',
         name='format_cross_join_group_list',
         text='            if join_group:\n'
              "                from_list.append(' '.join(join_group))\n"
              '            join_group = [quote_name(source)]\n'
              '\n'
              '        elif len(source) == 2:\n'
              '            # New cross join group\n'
              '            table_name, alias_name = source\n')

Fragment(uuid='04051192-795d-48cf-9702-32784c2c4196',
         path='/lib/dblayer/backend/base/format.py',
         lineno=675,
         depth=6,
         type='documentation',
         name='',
         text='# New cross join group')

Fragment(uuid='63078f45-d812-4663-8ed0-d3e3c25c93e0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=677,
         depth=0,
         type='module',
         name='',
         text='            if join_group:\n'
              "                from_list.append(' '.join(join_group))\n"
              '            join_group = [quote_alias_name(table_name, '
              'alias_name)]\n'
              '\n'
              '        else:\n'
              '            # Join to an existing cross join group\n'
              '            (table_name,\n'
              '             alias_name,\n'
              '             join_type,\n'
              '             id_field_name,\n'
              '             referer_table_name,\n'
              '             fk_field_name) = source\n')

Fragment(uuid='5a5ca5f7-8f52-4d58-96e2-615fe420167b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=677,
         depth=1,
         type='function',
         name='format_cross_join_group_list',
         text='            if join_group:\n'
              "                from_list.append(' '.join(join_group))\n"
              '            join_group = [quote_alias_name(table_name, '
              'alias_name)]\n'
              '\n'
              '        else:\n'
              '            # Join to an existing cross join group\n'
              '            (table_name,\n'
              '             alias_name,\n'
              '             join_type,\n'
              '             id_field_name,\n'
              '             referer_table_name,\n'
              '             fk_field_name) = source\n')

Fragment(uuid='7aba25c2-0468-4eb2-a314-4ed7d9e2d273',
         path='/lib/dblayer/backend/base/format.py',
         lineno=682,
         depth=6,
         type='documentation',
         name='',
         text='# Join to an existing cross join group')

Fragment(uuid='f3d4ac44-cd7a-456c-accd-aac996f0aa30',
         path='/lib/dblayer/backend/base/format.py',
         lineno=689,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if constants.DEBUG:\n'
              '                assert join_type in constants.JOIN_TYPES, '
              "'Unknown join type: %r' % (join_type,)\n"
              "                assert join_group, 'Trying to append a new join "
              "to an empty cross join group!'\n"
              '\n'
              "            join_group.append('%s %s ON %s = %s' % (\n"
              '                join_type,\n'
              '                quote_alias_name(table_name, alias_name),\n'
              '                quote_table_column_name(table_name, '
              'id_field_name),\n'
              '                quote_table_column_name(referer_table_name, '
              'fk_field_name)))\n'
              '\n'
              "    from_list.append(' '.join(join_group))\n"
              '\n'
              '    return from_list\n')

Fragment(uuid='d2fc224b-a07d-4c36-ae73-dc142a9e4571',
         path='/lib/dblayer/backend/base/format.py',
         lineno=689,
         depth=1,
         type='function',
         name='format_cross_join_group_list',
         text='\n'
              '            if constants.DEBUG:\n'
              '                assert join_type in constants.JOIN_TYPES, '
              "'Unknown join type: %r' % (join_type,)\n"
              "                assert join_group, 'Trying to append a new join "
              "to an empty cross join group!'\n"
              '\n'
              "            join_group.append('%s %s ON %s = %s' % (\n"
              '                join_type,\n'
              '                quote_alias_name(table_name, alias_name),\n'
              '                quote_table_column_name(table_name, '
              'id_field_name),\n'
              '                quote_table_column_name(referer_table_name, '
              'fk_field_name)))\n'
              '\n'
              "    from_list.append(' '.join(join_group))\n"
              '\n'
              '    return from_list')

Fragment(uuid='f49debd0-6451-4411-ba27-23d55fe414b0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=691,
         depth=12,
         type='documentation',
         name='',
         text='Unknown join type: %r')

Fragment(uuid='58299954-1c8d-4ebc-a036-08a7126ba2b5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=692,
         depth=11,
         type='documentation',
         name='',
         text='Trying to append a new join to an empty cross join group!')

Fragment(uuid='e23eb98d-2016-48ea-b774-88986fc222d6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=703,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_select(clauses, cache={}):\n'
              '    """ Formats a SELECT SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='a457ef72-26f4-416c-a1ff-3b34b58da150',
         path='/lib/dblayer/backend/base/format.py',
         lineno=705,
         depth=1,
         type='function',
         name='format_select',
         text='def format_select(clauses, cache={}):\n'
              '    """ Formats a SELECT SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='77fc7c70-5106-475a-93ce-0e2d34626549',
         path='/lib/dblayer/backend/base/format.py',
         lineno=706,
         depth=4,
         type='documentation',
         name='',
         text=' Formats a SELECT SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    ')

Fragment(uuid='1aff9133-3ca7-4051-8803-e4110641baa6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=711,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL SELECT statements must "
              "have a field list!'\n"
              "        assert clauses.table_list, 'SQL SELECT statements must "
              "have source table(s) to select from!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='b0978a4c-069b-43b1-88d0-df981d0ad1b0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=711,
         depth=1,
         type='function',
         name='format_select',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL SELECT statements must "
              "have a field list!'\n"
              "        assert clauses.table_list, 'SQL SELECT statements must "
              "have source table(s) to select from!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='b43ca772-2ac0-4326-be2a-cd3e84b92d95',
         path='/lib/dblayer/backend/base/format.py',
         lineno=713,
         depth=6,
         type='documentation',
         name='',
         text='SQL SELECT statements must have a field list!')

Fragment(uuid='72cc9986-2aba-4e1a-8d0a-29bb7fb6a470',
         path='/lib/dblayer/backend/base/format.py',
         lineno=714,
         depth=6,
         type='documentation',
         name='',
         text='SQL SELECT statements must have source table(s) to select from!')

Fragment(uuid='8b46f12e-cabc-4bd2-a9bf-b8f71b367c75',
         path='/lib/dblayer/backend/base/format.py',
         lineno=717,
         depth=0,
         type='module',
         name='',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    cross_join_group_list = '
              'format_cross_join_group_list(clauses)\n'
              '\n'
              '    sql = [\n'
              "        'SELECT',\n"
              "        ', '.join(clauses.field_list),\n"
              "        'FROM',\n"
              "        ', '.join(cross_join_group_list)]\n")

Fragment(uuid='e8325c8f-6c94-41c4-999e-593d0b816737',
         path='/lib/dblayer/backend/base/format.py',
         lineno=717,
         depth=1,
         type='function',
         name='format_select',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    cross_join_group_list = '
              'format_cross_join_group_list(clauses)\n'
              '\n'
              '    sql = [\n'
              "        'SELECT',\n"
              "        ', '.join(clauses.field_list),\n"
              "        'FROM',\n"
              "        ', '.join(cross_join_group_list)]\n")

Fragment(uuid='49660ea2-44f2-4580-a832-8ea03b22b551',
         path='/lib/dblayer/backend/base/format.py',
         lineno=727,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.where:\n'
              "        sql.extend(('WHERE', clauses.where))\n")

Fragment(uuid='ceb43c96-3137-432a-a798-b82e5c71340c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=727,
         depth=1,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.where:\n'
              "        sql.extend(('WHERE', clauses.where))\n")

Fragment(uuid='75799b69-aaf7-4156-b511-86b1d26309a7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=730,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.group_by:\n'
              "        sql.extend(('GROUP BY', ', '.join(clauses.group_by)))\n")

Fragment(uuid='1b046dd9-bd8a-4c61-84e2-bdbf6e0ddb40',
         path='/lib/dblayer/backend/base/format.py',
         lineno=730,
         depth=1,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.group_by:\n'
              "        sql.extend(('GROUP BY', ', '.join(clauses.group_by)))\n")

Fragment(uuid='f783f0b0-190a-4fcc-848f-2e986701dde4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=733,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.having:\n'
              "        sql.extend(('HAVING', clauses.having))\n")

Fragment(uuid='8440fe04-d471-41df-b57d-ab4d34faaafa',
         path='/lib/dblayer/backend/base/format.py',
         lineno=733,
         depth=1,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.having:\n'
              "        sql.extend(('HAVING', clauses.having))\n")

Fragment(uuid='1fc751c5-df30-459e-8943-fc06dbf727fc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=736,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.order_by:\n'
              "        sql.extend(('ORDER BY', ', '.join(clauses.order_by)))\n")

Fragment(uuid='12381637-fb90-4d62-a7c3-3dbc86606b2c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=736,
         depth=1,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.order_by:\n'
              "        sql.extend(('ORDER BY', ', '.join(clauses.order_by)))\n")

Fragment(uuid='44c5eae0-416a-4827-a7e4-d0fa2a018e12',
         path='/lib/dblayer/backend/base/format.py',
         lineno=739,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.limit:\n'
              "        sql.extend(('LIMIT', str(clauses.limit)))\n")

Fragment(uuid='fb6f68a0-0627-48bf-a5b4-2a4352643532',
         path='/lib/dblayer/backend/base/format.py',
         lineno=739,
         depth=1,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.limit:\n'
              "        sql.extend(('LIMIT', str(clauses.limit)))\n")

Fragment(uuid='2cbd286e-704f-44cd-8a3d-94aff7c84f53',
         path='/lib/dblayer/backend/base/format.py',
         lineno=742,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if clauses.offset:\n'
              "        sql.extend(('OFFSET', str(clauses.offset)))\n"
              '\n'
              "    sql = ' '.join(sql)\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              "    return sql + ';'\n")

Fragment(uuid='a7a83cd8-f402-4552-bbee-1eab51efab28',
         path='/lib/dblayer/backend/base/format.py',
         lineno=742,
         depth=1,
         type='function',
         name='format_select',
         text='\n'
              '    if clauses.offset:\n'
              "        sql.extend(('OFFSET', str(clauses.offset)))\n"
              '\n'
              "    sql = ' '.join(sql)\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              "    return sql + ';'")

Fragment(uuid='6c4f3c22-ebb7-43b7-852d-7b845233e1d0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=751,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_insert(clauses, cache={}):\n'
              '    """ Formats a INSERT SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='acefd87e-c93c-4a55-a57d-b03df7f75fa5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=753,
         depth=1,
         type='function',
         name='format_insert',
         text='def format_insert(clauses, cache={}):\n'
              '    """ Formats a INSERT SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='ddef4e71-9fb4-486e-a116-001fc380c2f2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=754,
         depth=4,
         type='documentation',
         name='',
         text=' Formats a INSERT SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    ')

Fragment(uuid='503654d5-fd01-4073-afa3-3346ce02df39',
         path='/lib/dblayer/backend/base/format.py',
         lineno=759,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL INSERT statements must "
              "have a field list!'\n"
              "        assert not clauses.where, 'SQL INSERT statements do not "
              "have a where clause!'\n"
              "        assert not clauses.group_by, 'SQL INSERT statements do "
              "not have a group_by clause!'\n"
              "        assert not clauses.having, 'SQL INSERT statements do "
              'not ')

Fragment(uuid='95956c4d-0ef1-424b-9764-fe257ed41421',
         path='/lib/dblayer/backend/base/format.py',
         lineno=759,
         depth=1,
         type='function',
         name='format_insert',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL INSERT statements must "
              "have a field list!'\n"
              "        assert not clauses.where, 'SQL INSERT statements do not "
              "have a where clause!'\n"
              "        assert not clauses.group_by, 'SQL INSERT statements do "
              "not have a group_by clause!'\n"
              "        assert not clauses.having, 'SQL INSERT statements do "
              'not ')

Fragment(uuid='144e57b0-0a9b-4cb4-9cbf-b3e2692191fb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=761,
         depth=6,
         type='documentation',
         name='',
         text='SQL INSERT statements must have a field list!')

Fragment(uuid='60cbec14-3777-4a9e-968e-9bd7a2b00df4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=762,
         depth=6,
         type='documentation',
         name='',
         text='SQL INSERT statements do not have a where clause!')

Fragment(uuid='85cd294f-b7e8-466f-b576-1d88ed40d099',
         path='/lib/dblayer/backend/base/format.py',
         lineno=763,
         depth=6,
         type='documentation',
         name='',
         text='SQL INSERT statements do not have a group_by clause!')

Fragment(uuid='2d3f93ac-6c7d-4f50-8929-098a7ef4c029',
         path='/lib/dblayer/backend/base/format.py',
         lineno=764,
         depth=0,
         type='module',
         name='',
         text="have a having clause!'\n"
              "        assert not clauses.order_by, 'SQL INSERT statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL INSERT statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL INSERT statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL INSERT "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='12de6b6b-99cb-4b3e-9e5b-fbe6a5fd63f9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=764,
         depth=1,
         type='function',
         name='format_insert',
         text="have a having clause!'\n"
              "        assert not clauses.order_by, 'SQL INSERT statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL INSERT statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL INSERT statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL INSERT "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='c613af34-5a49-4de2-8475-59992d895af6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=764,
         depth=6,
         type='documentation',
         name='',
         text='SQL INSERT statements do not have a having clause!')

Fragment(uuid='fe30623a-181d-4139-b0ed-c4590c29b74e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=765,
         depth=6,
         type='documentation',
         name='',
         text='SQL INSERT statements do not have an order_by clause!')

Fragment(uuid='337a4835-081f-4666-af80-c16931bc108a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=766,
         depth=6,
         type='documentation',
         name='',
         text='SQL INSERT statements do not have a limit clause!')

Fragment(uuid='57c9679b-1b23-4c71-813b-b3433d47d0c4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=767,
         depth=6,
         type='documentation',
         name='',
         text='SQL INSERT statements do not have an offset clause!')

Fragment(uuid='df0a6443-c11d-4643-b4e0-fa962e306271',
         path='/lib/dblayer/backend/base/format.py',
         lineno=768,
         depth=6,
         type='documentation',
         name='',
         text='SQL INSERT statements can only work on a single table!')

Fragment(uuid='60bda43b-a2fd-4735-8c60-95dbf6e0f201',
         path='/lib/dblayer/backend/base/format.py',
         lineno=771,
         depth=0,
         type='module',
         name='',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'INSERT INTO',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        '(%s)' % ', '.join(map(quote_name, "
              'clauses.field_list)),\n'
              "        'VALUES',\n"
              "        '(%s)' % ', '.join('?' * len(clauses.field_list))]\n"
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql\n')

Fragment(uuid='d87341f2-80e0-47eb-8c7c-430debc0f0fc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=771,
         depth=1,
         type='function',
         name='format_insert',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'INSERT INTO',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        '(%s)' % ', '.join(map(quote_name, "
              'clauses.field_list)),\n'
              "        'VALUES',\n"
              "        '(%s)' % ', '.join('?' * len(clauses.field_list))]\n"
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql')

Fragment(uuid='f68bf06f-7656-466e-b4ea-36de01c6c62d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=786,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_update(clauses, cache={}):\n'
              '    """ Formats a UPDATE SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='49def7cd-4b13-41e8-8fbe-249b9b80acde',
         path='/lib/dblayer/backend/base/format.py',
         lineno=788,
         depth=1,
         type='function',
         name='format_update',
         text='def format_update(clauses, cache={}):\n'
              '    """ Formats a UPDATE SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='84d5c483-99df-4785-99cd-c759f48cd543',
         path='/lib/dblayer/backend/base/format.py',
         lineno=789,
         depth=4,
         type='documentation',
         name='',
         text=' Formats a UPDATE SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    ')

Fragment(uuid='2d7a0d99-64ff-47b8-a841-439324afe7ba',
         path='/lib/dblayer/backend/base/format.py',
         lineno=794,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL UPDATE statements must "
              "have a field list!'\n"
              "        assert clauses.where, 'SQL UPDATE statements should "
              'have a where clause! (Otherwise they would be dangerous.) Use a '
              'TRUE condition if you intentionally want to update all the '
              "records.'\n"
              "        assert not clauses.group_by, 'SQL UPDATE statements do "
              "not have a group_by clause!'\n"
              '        ass')

Fragment(uuid='a5385f8c-4bd2-4d53-8a62-c46e9ddeed81',
         path='/lib/dblayer/backend/base/format.py',
         lineno=794,
         depth=1,
         type='function',
         name='format_update',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert clauses.field_list, 'SQL UPDATE statements must "
              "have a field list!'\n"
              "        assert clauses.where, 'SQL UPDATE statements should "
              'have a where clause! (Otherwise they would be dangerous.) Use a '
              'TRUE condition if you intentionally want to update all the '
              "records.'\n"
              "        assert not clauses.group_by, 'SQL UPDATE statements do "
              "not have a group_by clause!'\n"
              '        ass')

Fragment(uuid='6a32057d-729b-477d-8cf0-374b9d1988fd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=796,
         depth=6,
         type='documentation',
         name='',
         text='SQL UPDATE statements must have a field list!')

Fragment(uuid='7db63f2c-8c27-4bdb-b426-03561c80386a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=797,
         depth=6,
         type='documentation',
         name='',
         text='SQL UPDATE statements should have a where clause! (Otherwise '
              'they would be dangerous.) Use a TRUE condition if you '
              'intentionally want to update all the records.')

Fragment(uuid='761953a2-a7d0-4111-91f2-662589183c37',
         path='/lib/dblayer/backend/base/format.py',
         lineno=798,
         depth=6,
         type='documentation',
         name='',
         text='SQL UPDATE statements do not have a group_by clause!')

Fragment(uuid='e1ac194c-364f-4e7a-b59f-058b58f42855',
         path='/lib/dblayer/backend/base/format.py',
         lineno=799,
         depth=0,
         type='module',
         name='',
         text="ert not clauses.having, 'SQL UPDATE statements do not have a "
              "having clause!'\n"
              "        assert not clauses.order_by, 'SQL UPDATE statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL UPDATE statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL UPDATE statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL UPDATE "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='b620cc2b-9cb8-4310-9b06-33fbc8bd225f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=799,
         depth=1,
         type='function',
         name='format_update',
         text="ert not clauses.having, 'SQL UPDATE statements do not have a "
              "having clause!'\n"
              "        assert not clauses.order_by, 'SQL UPDATE statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL UPDATE statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL UPDATE statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL UPDATE "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='8938dc45-d0c1-436b-bd38-eac26e47e302',
         path='/lib/dblayer/backend/base/format.py',
         lineno=799,
         depth=6,
         type='documentation',
         name='',
         text='SQL UPDATE statements do not have a having clause!')

Fragment(uuid='8f57fc56-7479-4a39-9b83-9c733608c61b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=800,
         depth=6,
         type='documentation',
         name='',
         text='SQL UPDATE statements do not have an order_by clause!')

Fragment(uuid='c30e9f36-53ab-44dd-9871-45ff3f055286',
         path='/lib/dblayer/backend/base/format.py',
         lineno=801,
         depth=6,
         type='documentation',
         name='',
         text='SQL UPDATE statements do not have a limit clause!')

Fragment(uuid='a2885c67-e971-47d1-9190-87463da5860b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=802,
         depth=6,
         type='documentation',
         name='',
         text='SQL UPDATE statements do not have an offset clause!')

Fragment(uuid='1d27efd3-5a36-433b-bae1-dd673c92a7e9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=803,
         depth=6,
         type='documentation',
         name='',
         text='SQL UPDATE statements can only work on a single table!')

Fragment(uuid='d823b78d-87de-4892-b534-a265bba30b5d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=806,
         depth=0,
         type='module',
         name='',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'UPDATE',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        'SET',\n"
              "        ', '.join('%s=?' % quote_name(name) for name in "
              'clauses.field_list),\n'
              "        'WHERE',\n"
              '        clauses.where]\n'
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql\n')

Fragment(uuid='e126d014-1173-47c3-b796-69613c0e3ee5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=806,
         depth=1,
         type='function',
         name='format_update',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'UPDATE',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        'SET',\n"
              "        ', '.join('%s=?' % quote_name(name) for name in "
              'clauses.field_list),\n'
              "        'WHERE',\n"
              '        clauses.where]\n'
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql')

Fragment(uuid='58bd4786-c3cf-408a-bac5-1ed5c7627497',
         path='/lib/dblayer/backend/base/format.py',
         lineno=822,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_delete(clauses, cache={}):\n'
              '    """ Formats a DELETE SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='4c4ad7b2-62e4-4021-8b04-a48352b68787',
         path='/lib/dblayer/backend/base/format.py',
         lineno=824,
         depth=1,
         type='function',
         name='format_delete',
         text='def format_delete(clauses, cache={}):\n'
              '    """ Formats a DELETE SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    """\n')

Fragment(uuid='e9d9f3cc-e6ef-4b07-85d0-d77300ade56b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=825,
         depth=4,
         type='documentation',
         name='',
         text=' Formats a DELETE SQL statement with the given clauses\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    ')

Fragment(uuid='8de24cc9-bdc4-430a-97cc-b6defc180ca8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=830,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert not clauses.field_list, 'SQL DELETE statements "
              "do not have a field list!'\n"
              "        assert clauses.where, 'SQL DELETE statements should "
              'have a where clause! (Otherwise they would be dangerous.) Use a '
              'TRUE condition if you intentionally want to delete all the '
              "records or truncate the table instead.'\n"
              "        assert not clauses.group_by, 'SQL DELETE statements do "
              'not have a group_by cl')

Fragment(uuid='8da18b33-406f-4a6d-92bc-699813fd8929',
         path='/lib/dblayer/backend/base/format.py',
         lineno=830,
         depth=1,
         type='function',
         name='format_delete',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(clauses, '
              'dblayer.backend.base.clauses.Clauses)\n'
              "        assert not clauses.field_list, 'SQL DELETE statements "
              "do not have a field list!'\n"
              "        assert clauses.where, 'SQL DELETE statements should "
              'have a where clause! (Otherwise they would be dangerous.) Use a '
              'TRUE condition if you intentionally want to delete all the '
              "records or truncate the table instead.'\n"
              "        assert not clauses.group_by, 'SQL DELETE statements do "
              'not have a group_by cl')

Fragment(uuid='e8cfd2c7-f19c-44cd-8130-5d558c613454',
         path='/lib/dblayer/backend/base/format.py',
         lineno=832,
         depth=6,
         type='documentation',
         name='',
         text='SQL DELETE statements do not have a field list!')

Fragment(uuid='a02089ff-2ed9-4d72-aecc-c6727e397500',
         path='/lib/dblayer/backend/base/format.py',
         lineno=833,
         depth=6,
         type='documentation',
         name='',
         text='SQL DELETE statements should have a where clause! (Otherwise '
              'they would be dangerous.) Use a TRUE condition if you '
              'intentionally want to delete all the records or truncate the '
              'table instead.')

Fragment(uuid='f8a05b55-1997-4c7a-bfa5-452553731305',
         path='/lib/dblayer/backend/base/format.py',
         lineno=834,
         depth=0,
         type='module',
         name='',
         text="ause!'\n"
              "        assert not clauses.having, 'SQL DELETE statements do "
              "not have a having clause!'\n"
              "        assert not clauses.order_by, 'SQL DELETE statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL DELETE statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL DELETE statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL DELETE "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='23b7851d-4390-4aa5-b5b4-0acc18049607',
         path='/lib/dblayer/backend/base/format.py',
         lineno=834,
         depth=1,
         type='function',
         name='format_delete',
         text="ause!'\n"
              "        assert not clauses.having, 'SQL DELETE statements do "
              "not have a having clause!'\n"
              "        assert not clauses.order_by, 'SQL DELETE statements do "
              "not have an order_by clause!'\n"
              "        assert not clauses.limit, 'SQL DELETE statements do not "
              "have a limit clause!'\n"
              "        assert not clauses.offset, 'SQL DELETE statements do "
              "not have an offset clause!'\n"
              "        assert len(clauses.table_list) == 1, 'SQL DELETE "
              "statements can only work on a single table!'\n"
              '\n'
              '    sql = cache.get(clauses)\n')

Fragment(uuid='a51376c6-1fd2-461a-962b-2bb270844b43',
         path='/lib/dblayer/backend/base/format.py',
         lineno=834,
         depth=6,
         type='documentation',
         name='',
         text='SQL DELETE statements do not have a group_by clause!')

Fragment(uuid='ecbc98e9-b8e3-47b2-a4c4-d13051849aa9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=835,
         depth=6,
         type='documentation',
         name='',
         text='SQL DELETE statements do not have a having clause!')

Fragment(uuid='1cfbdc52-ea8c-4d59-a0ab-720024dbf9b2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=836,
         depth=6,
         type='documentation',
         name='',
         text='SQL DELETE statements do not have an order_by clause!')

Fragment(uuid='f7640051-b874-4bb5-b008-b85564f947f5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=837,
         depth=6,
         type='documentation',
         name='',
         text='SQL DELETE statements do not have a limit clause!')

Fragment(uuid='60845168-fbd9-4f7a-a007-9680d1793595',
         path='/lib/dblayer/backend/base/format.py',
         lineno=838,
         depth=6,
         type='documentation',
         name='',
         text='SQL DELETE statements do not have an offset clause!')

Fragment(uuid='cc644710-08d7-4b76-8bb1-d09566bf42d2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=839,
         depth=6,
         type='documentation',
         name='',
         text='SQL DELETE statements can only work on a single table!')

Fragment(uuid='67b4a4e1-f51f-43f3-983e-aab30af03aee',
         path='/lib/dblayer/backend/base/format.py',
         lineno=842,
         depth=0,
         type='module',
         name='',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'DELETE FROM',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        'WHERE',\n"
              '        clauses.where]\n'
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql\n'
              '\n'
              '\n'
              '### Savepoints\n'
              '\n'
              '# NOTE: These functions should return None for SQL servers not '
              'needing\n'
              '# a savepoint to restore from an aborted transaction after '
              'failing queries\n')

Fragment(uuid='96eb4da0-77ac-4ea3-8771-96785a73d445',
         path='/lib/dblayer/backend/base/format.py',
         lineno=842,
         depth=1,
         type='function',
         name='format_delete',
         text='    if sql is not None:\n'
              '        return sql\n'
              '\n'
              '    sql = [\n'
              "        'DELETE FROM',\n"
              '        quote_name(clauses.table_list[0]),\n'
              "        'WHERE',\n"
              '        clauses.where]\n'
              '\n'
              "    sql = ' '.join(sql) + ';'\n"
              '    sql = replace_parameter_placeholders(sql)\n'
              '\n'
              '    cache[clauses] = sql\n'
              '    return sql')

Fragment(uuid='26af5541-1053-429b-a3b0-55173a07cbde',
         path='/lib/dblayer/backend/base/format.py',
         lineno=860,
         depth=0,
         type='documentation',
         name='',
         text='# NOTE: These functions should return None for SQL servers not '
              'needing')

Fragment(uuid='e167988c-bf84-4115-b048-234fabd2271e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=861,
         depth=0,
         type='documentation',
         name='',
         text='# a savepoint to restore from an aborted transaction after '
              'failing queries')

Fragment(uuid='3d913fe7-24b8-4cce-8e21-c30591a385b5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=862,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_savepoint(name):\n'
              '    """ Formats a SAVEPOINT statement to preserve the current '
              'transaction state\n'
              '    """\n'
              "    return 'SAVEPOINT ' + quote_name(name);\n")

Fragment(uuid='3a869a8b-7d1a-4fad-9874-c4c037d35825',
         path='/lib/dblayer/backend/base/format.py',
         lineno=863,
         depth=1,
         type='function',
         name='format_savepoint',
         text='def format_savepoint(name):\n'
              '    """ Formats a SAVEPOINT statement to preserve the current '
              'transaction state\n'
              '    """\n'
              "    return 'SAVEPOINT ' + quote_name(name);")

Fragment(uuid='21e39cc9-3ddf-445e-8884-d719bff2e54f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=864,
         depth=4,
         type='documentation',
         name='',
         text=' Formats a SAVEPOINT statement to preserve the current '
              'transaction state\n'
              '    ')

Fragment(uuid='edc74d4b-d705-4021-b50e-d7e752d0e0c5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=867,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_release_savepoint(name):\n'
              '    """ Formats a RELEASE SAVEPOINT statement to free up '
              'resources for a\n'
              "    savepoint we don't want to rollback to anymore\n"
              '    \n'
              '    """\n'
              "    return 'RELEASE SAVEPOINT ' + quote_name(name);\n")

Fragment(uuid='17f49e71-40f9-4691-a87c-ee9c74905d60',
         path='/lib/dblayer/backend/base/format.py',
         lineno=869,
         depth=1,
         type='function',
         name='format_release_savepoint',
         text='def format_release_savepoint(name):\n'
              '    """ Formats a RELEASE SAVEPOINT statement to free up '
              'resources for a\n'
              "    savepoint we don't want to rollback to anymore\n"
              '    \n'
              '    """\n'
              "    return 'RELEASE SAVEPOINT ' + quote_name(name);")

Fragment(uuid='6fcc327e-9d9c-416d-80cd-17963115a80a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=870,
         depth=4,
         type='documentation',
         name='',
         text=' Formats a RELEASE SAVEPOINT statement to free up resources for '
              'a\n'
              "    savepoint we don't want to rollback to anymore\n"
              '    \n'
              '    ')

Fragment(uuid='d2c7632e-c956-48ae-acbe-652632e17c30',
         path='/lib/dblayer/backend/base/format.py',
         lineno=875,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_rollback_to_savepoint(name):\n'
              '    """ Formats a ROLLBACK TO SAVEPOINT statement to roll back '
              'the\n'
              '    current transaction to a previous savepoint\n'
              '    \n'
              '    """\n'
              "    return 'ROLLBACK TO SAVEPOINT ' + quote_name(name);\n"
              '\n'
              '\n'
              '### Query results\n')

Fragment(uuid='ee9ad912-63a7-4ca4-9ab2-5ac19a4151b2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=877,
         depth=1,
         type='function',
         name='format_rollback_to_savepoint',
         text='def format_rollback_to_savepoint(name):\n'
              '    """ Formats a ROLLBACK TO SAVEPOINT statement to roll back '
              'the\n'
              '    current transaction to a previous savepoint\n'
              '    \n'
              '    """\n'
              "    return 'ROLLBACK TO SAVEPOINT ' + quote_name(name);")

Fragment(uuid='18c39a1a-9e1c-495d-bfe2-3f634aa9491e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=878,
         depth=4,
         type='documentation',
         name='',
         text=' Formats a ROLLBACK TO SAVEPOINT statement to roll back the\n'
              '    current transaction to a previous savepoint\n'
              '    \n'
              '    ')

Fragment(uuid='8f408ec5-e474-431f-af9a-a5dc1487c058',
         path='/lib/dblayer/backend/base/format.py',
         lineno=882,
         depth=5,
         type='documentation',
         name='',
         text='ROLLBACK TO SAVEPOINT ')

Fragment(uuid='092c6615-15c2-45c1-9b23-4c026049ed88',
         path='/lib/dblayer/backend/base/format.py',
         lineno=886,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_result(result):\n'
              '    """ Formats a query result expression and defines its alias '
              'name\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(result, '
              'dblayer.model.query.BaseQueryResult)\n'
              '\n'
              "    return '%s AS %s' % (format_expression(result.expression), "
              'quote_name(result.name))\n'
              '\n'
              '\n'
              '### Functions and aggregates\n')

Fragment(uuid='968151a9-a856-478b-8d9d-c67e98d7bae3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=887,
         depth=1,
         type='function',
         name='format_result',
         text='def format_result(result):\n'
              '    """ Formats a query result expression and defines its alias '
              'name\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(result, '
              'dblayer.model.query.BaseQueryResult)\n'
              '\n'
              "    return '%s AS %s' % (format_expression(result.expression), "
              'quote_name(result.name))')

Fragment(uuid='3ce801d2-126a-442d-8b14-9989706b5190',
         path='/lib/dblayer/backend/base/format.py',
         lineno=888,
         depth=4,
         type='documentation',
         name='',
         text=' Formats a query result expression and defines its alias name\n'
              '    ')

Fragment(uuid='8015cb0a-56b5-410f-b72d-77be571d1c9d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=896,
         depth=0,
         type='documentation',
         name='',
         text='### Functions and aggregates')

Fragment(uuid='8147bb0a-fc6b-4897-beca-b7522d621be1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=897,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_custom_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              '    return function.args[0]\n')

Fragment(uuid='7c851514-4bfe-4559-840a-7cc4e40d38c8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=898,
         depth=1,
         type='function',
         name='format_custom_function',
         text='def format_custom_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              '    return function.args[0]')

Fragment(uuid='e4c9147e-0401-44aa-aad4-31c306c9b4e3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=904,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_var_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              '    return quote_name(function.args[0])\n')

Fragment(uuid='7493b91e-d332-42b2-adae-9d0f35d3bb57',
         path='/lib/dblayer/backend/base/format.py',
         lineno=906,
         depth=1,
         type='function',
         name='format_var_function',
         text='def format_var_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              '    return quote_name(function.args[0])')

Fragment(uuid='3063121a-0517-41b0-ae9c-5ac4c0876232',
         path='/lib/dblayer/backend/base/format.py',
         lineno=912,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return '(NOT %s)' % format_expression(function.args[0])\n")

Fragment(uuid='3fa595d4-8dd6-4a75-87c4-20f3bc4c3fa0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=914,
         depth=1,
         type='function',
         name='format_not_function',
         text='def format_not_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return '(NOT %s)' % format_expression(function.args[0])")

Fragment(uuid='916874fd-ed49-458e-b54f-973e27565524',
         path='/lib/dblayer/backend/base/format.py',
         lineno=920,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_and_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return '(%s)' % ' AND '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='afa46959-cef4-4a73-8557-ceb0bdc87abb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=922,
         depth=1,
         type='function',
         name='format_and_function',
         text='def format_and_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return '(%s)' % ' AND '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='f22730cf-a6a2-492c-bfb2-012d9cc99f39',
         path='/lib/dblayer/backend/base/format.py',
         lineno=928,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_or_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return '(%s)' % ' OR '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='84625986-b974-4ea9-aba5-d73a3f3fdf3c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=930,
         depth=1,
         type='function',
         name='format_or_function',
         text='def format_or_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return '(%s)' % ' OR '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='7f758e32-a641-49d9-97ee-b027bd33f942',
         path='/lib/dblayer/backend/base/format.py',
         lineno=936,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s = %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='d60cd668-0e2b-4b11-a22c-7fb78cf428b8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=938,
         depth=1,
         type='function',
         name='format_equal_function',
         text='def format_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s = %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='0a471aea-5762-40a7-a372-436913b75ef6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=944,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s <> %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='c53d16b6-6f29-4132-8813-7806a61a59a3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=946,
         depth=1,
         type='function',
         name='format_not_equal_function',
         text='def format_not_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s <> %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='e45cc267-a802-4bb3-9a9a-ed15da5d8ffb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=952,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_less_than_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s < %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='81d8ac28-942d-453b-b307-02f48ad9d980',
         path='/lib/dblayer/backend/base/format.py',
         lineno=954,
         depth=1,
         type='function',
         name='format_less_than_function',
         text='def format_less_than_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s < %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='4c5f62cc-a3b2-4f47-8001-2a57376eeece',
         path='/lib/dblayer/backend/base/format.py',
         lineno=960,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_less_than_or_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s <= %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='51a8334b-acf8-4230-9f59-db8670d01b7a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=962,
         depth=1,
         type='function',
         name='format_less_than_or_equal_function',
         text='def format_less_than_or_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s <= %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='244d51a2-78a9-40b2-b7ad-8e2d91fa6474',
         path='/lib/dblayer/backend/base/format.py',
         lineno=968,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_greater_than_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s > %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='20eb9cc7-50c2-4b11-861d-c19db4c9dcd8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=970,
         depth=1,
         type='function',
         name='format_greater_than_function',
         text='def format_greater_than_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s > %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='03f0f6f8-473a-4d6e-8a98-10e665433146',
         path='/lib/dblayer/backend/base/format.py',
         lineno=976,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_greater_than_or_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s >= %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='c07f6721-e3c7-4bcf-998b-9853f87b9150',
         path='/lib/dblayer/backend/base/format.py',
         lineno=978,
         depth=1,
         type='function',
         name='format_greater_than_or_equal_function',
         text='def format_greater_than_or_equal_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s >= %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='938cd042-8943-4afe-b056-2389bbbf4037',
         path='/lib/dblayer/backend/base/format.py',
         lineno=984,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_in_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              '    a, b = function.args\n'
              '    b = tuple(b)\n'
              '    if b:\n'
              "        return '(%s IN %s)' % (format_expression(a), "
              'quote_literal_value(b))\n'
              "    return 'FALSE'\n")

Fragment(uuid='571e924e-bd18-425e-b0ef-6ee01fa44aae',
         path='/lib/dblayer/backend/base/format.py',
         lineno=986,
         depth=1,
         type='function',
         name='format_in_function',
         text='def format_in_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              '    a, b = function.args\n'
              '    b = tuple(b)\n'
              '    if b:\n'
              "        return '(%s IN %s)' % (format_expression(a), "
              'quote_literal_value(b))\n'
              "    return 'FALSE'")

Fragment(uuid='2ba23450-5d24-494d-8881-1310aa4e6bee',
         path='/lib/dblayer/backend/base/format.py',
         lineno=996,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_in_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              '    a, b = function.args\n'
              '    b = tuple(b)\n'
              '    if b:\n'
              "        return '(%s NOT IN %s)' % (format_expression(a), "
              'quote_literal_value(b))\n'
              "    return 'TRUE'\n")

Fragment(uuid='ce4014c5-2148-49e9-98d3-84952e57b189',
         path='/lib/dblayer/backend/base/format.py',
         lineno=998,
         depth=1,
         type='function',
         name='format_not_in_function',
         text='def format_not_in_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              '    a, b = function.args\n'
              '    b = tuple(b)\n'
              '    if b:\n'
              "        return '(%s NOT IN %s)' % (format_expression(a), "
              'quote_literal_value(b))\n'
              "    return 'TRUE'")

Fragment(uuid='31fe5f9c-08be-403b-a970-020220d9c932',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1008,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_neg_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return '(-%s)' % format_expression(function.args[0])\n")

Fragment(uuid='36648650-a083-4051-a975-5503e4ba68dc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1010,
         depth=1,
         type='function',
         name='format_neg_function',
         text='def format_neg_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return '(-%s)' % format_expression(function.args[0])")

Fragment(uuid='e655b424-d8ff-4216-b462-b0c216924e30',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1016,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_add_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' + '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='5e8988ea-51d1-4b3a-9517-4f9aea840d04',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1018,
         depth=1,
         type='function',
         name='format_add_function',
         text='def format_add_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' + '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='9b6cbc98-b7a5-447c-aecd-ea36ab779ea8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1024,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_sub_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' - '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='03ae5eba-365f-493f-aded-7f3ff21fc14e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1026,
         depth=1,
         type='function',
         name='format_sub_function',
         text='def format_sub_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' - '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='a3968b8a-8a05-4331-9298-8887184e7f40',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1032,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_mul_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' * '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='b59ee86a-c830-41a9-86ef-f27bd3456a3c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1034,
         depth=1,
         type='function',
         name='format_mul_function',
         text='def format_mul_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' * '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='17f4184d-73f3-4a28-b608-e167491248cc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1040,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_div_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' / '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='dd10a0e9-ba2b-4340-abb3-8537d0bdbc6d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1042,
         depth=1,
         type='function',
         name='format_div_function',
         text='def format_div_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 1\n'
              '\n'
              "    return '(%s)' % ' / '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='c6b4ab90-7741-4b0e-9823-11fc27832d2c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1048,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_concat_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return 'CONCAT(%s)' % ', '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='e9e63d84-f823-42e2-8384-3bcbf4bc28af',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1050,
         depth=1,
         type='function',
         name='format_concat_function',
         text='def format_concat_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return 'CONCAT(%s)' % ', '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='0fbfe392-1415-4095-90ee-de7e846550c3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1056,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_left_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return 'LEFT(%s, %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='61db6554-7ef1-439e-80e5-5ddc7e0c166a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1058,
         depth=1,
         type='function',
         name='format_left_function',
         text='def format_left_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return 'LEFT(%s, %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='d7f6ab37-c43e-41e5-a2d5-c7f4a9f1b0e0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1064,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_right_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return 'RIGHT(%s, %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='108d4ac5-aa30-479a-b28b-10105298de99',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1066,
         depth=1,
         type='function',
         name='format_right_function',
         text='def format_right_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return 'RIGHT(%s, %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='4dd8d8ca-23c3-424f-96b8-2155ee9eec84',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1072,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_substring_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert 2 <= len(function.args) <= 3\n'
              '\n'
              "    return 'SUBSTR(%s)' % ', '.join(map(format_expression, "
              'function.args))\n')

Fragment(uuid='871849c6-c57e-4f32-9e69-ecfa55ceb927',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1074,
         depth=1,
         type='function',
         name='format_substring_function',
         text='def format_substring_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert 2 <= len(function.args) <= 3\n'
              '\n'
              "    return 'SUBSTR(%s)' % ', '.join(map(format_expression, "
              'function.args))')

Fragment(uuid='6e810fc8-6716-4a13-b84e-1fb5905e2e08',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1080,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_contains_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(STRPOS(%s, %s) > 0)' % "
              'tuple(map(format_expression, function.args))\n')

Fragment(uuid='29c55a2b-63a9-4976-8056-8c124f752fa1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1082,
         depth=1,
         type='function',
         name='format_contains_function',
         text='def format_contains_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(STRPOS(%s, %s) > 0)' % "
              'tuple(map(format_expression, function.args))')

Fragment(uuid='c8b8e46c-f50d-44cd-a9bb-12acc5ac0088',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1087,
         depth=5,
         type='documentation',
         name='',
         text='(STRPOS(%s, %s) > 0)')

Fragment(uuid='ca348ddc-ea5a-4870-8da2-84e06b65af32',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1088,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_like_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s LIKE %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='2c21b82b-6460-41ac-b92f-56852d4f247a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1090,
         depth=1,
         type='function',
         name='format_like_function',
         text='def format_like_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s LIKE %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='e70cbcbf-ef52-4bac-97eb-646871d7dedd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1096,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_like_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s NOT LIKE %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='6e120c87-8ebf-4280-93fa-5648c3d5a00d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1098,
         depth=1,
         type='function',
         name='format_not_like_function',
         text='def format_not_like_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s NOT LIKE %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='17527ada-51ad-4b96-972c-373ed4aa0b9b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1104,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_match_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s ~ %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='19f37334-49cc-4213-a8ed-142b2cab0ccd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1106,
         depth=1,
         type='function',
         name='format_match_function',
         text='def format_match_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s ~ %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='ee76c6f9-79e0-4301-a675-82e81cd1db43',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1112,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_match_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s !~ %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='0f6fe686-4c14-410e-95fb-6fc51c80a0c8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1114,
         depth=1,
         type='function',
         name='format_not_match_function',
         text='def format_not_match_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s !~ %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='4379dd15-9eeb-409e-b57f-3dea28c3917f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1120,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_full_text_search_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s @@ %s)' % tuple(map(format_expression, "
              'function.args))\n')

Fragment(uuid='d6d985e0-4d9b-4e8a-a32b-bbe68a893868',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1122,
         depth=1,
         type='function',
         name='format_full_text_search_function',
         text='def format_full_text_search_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 2\n'
              '\n'
              "    return '(%s @@ %s)' % tuple(map(format_expression, "
              'function.args))')

Fragment(uuid='95f18905-8b8f-4e62-b217-bb10384d5d25',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1128,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_coalesce_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return 'COALESCE(%s)' % ', "
              "'.join(tuple(map(format_expression, function.args)))\n")

Fragment(uuid='cb0341b9-45a8-44d9-8b13-381fe72fdda4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1130,
         depth=1,
         type='function',
         name='format_coalesce_function',
         text='def format_coalesce_function(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) > 0\n'
              '\n'
              "    return 'COALESCE(%s)' % ', "
              "'.join(tuple(map(format_expression, function.args)))")

Fragment(uuid='073e6f59-a4eb-4565-a1e4-f549ac673437',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1136,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_count_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'COUNT(%s)' % format_expression(function.args[0])\n")

Fragment(uuid='55491082-2df8-4562-a523-54384d1fc123',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1138,
         depth=1,
         type='function',
         name='format_count_aggregate',
         text='def format_count_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'COUNT(%s)' % format_expression(function.args[0])")

Fragment(uuid='2f40bd84-c58c-465b-a968-f0b584da4c4e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1144,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_min_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'MIN(%s)' % format_expression(function.args[0])\n")

Fragment(uuid='7013e2a9-f2be-46a6-8ae7-94eef65e9f2e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1146,
         depth=1,
         type='function',
         name='format_min_aggregate',
         text='def format_min_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'MIN(%s)' % format_expression(function.args[0])")

Fragment(uuid='a784f5f3-1c2f-4301-983f-fbad1c4ac737',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1152,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_max_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'MAX(%s)' % format_expression(function.args[0])\n")

Fragment(uuid='cf6a54dd-3fd3-432f-b0ab-51b208429336',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1154,
         depth=1,
         type='function',
         name='format_max_aggregate',
         text='def format_max_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'MAX(%s)' % format_expression(function.args[0])")

Fragment(uuid='433fbd05-427e-425c-91e6-786e46079f04',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1160,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_sum_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'SUM(%s)' % format_expression(function.args[0])\n")

Fragment(uuid='ac341d7e-e96f-4849-9b31-c65fe031ccf3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1162,
         depth=1,
         type='function',
         name='format_sum_aggregate',
         text='def format_sum_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'SUM(%s)' % format_expression(function.args[0])")

Fragment(uuid='4665a6e8-d1f5-4485-bca7-ff6995ea55d0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1168,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_avg_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'AVG(%s)' % format_expression(function.args[0])\n")

Fragment(uuid='c3a635eb-e500-4ffd-a2f7-e57b81a1baf7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1170,
         depth=1,
         type='function',
         name='format_avg_aggregate',
         text='def format_avg_aggregate(function):\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '        assert len(function.args) == 1\n'
              '\n'
              "    return 'AVG(%s)' % format_expression(function.args[0])")

Fragment(uuid='d186baaf-85cc-4949-a8db-5161fdadcbe4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1176,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_function(function):\n'
              '    """ Formats an SQL function or aggregate\n'
              '    """\n')

Fragment(uuid='26bde3da-5a63-4212-9b09-fb4a0ecc66ea',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1178,
         depth=1,
         type='function',
         name='format_function',
         text='def format_function(function):\n'
              '    """ Formats an SQL function or aggregate\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '\n'
              '    formatter = '
              'FUNCTION_FORMATTER_MAP[function.__class__.__name__]\n'
              '    return formatter(function)')

Fragment(uuid='a6319d1b-8a21-49e5-82c2-4285740dc60a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1179,
         depth=4,
         type='documentation',
         name='',
         text=' Formats an SQL function or aggregate\n    ')

Fragment(uuid='26ba0423-010e-4368-9c04-2d7a8daae209',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1181,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(function, '
              'dblayer.model.function.BaseFunction)\n'
              '\n'
              '    formatter = '
              'FUNCTION_FORMATTER_MAP[function.__class__.__name__]\n'
              '    return formatter(function)\n'
              '\n'
              '\n'
              'FUNCTION_FORMATTER_MAP = dict(\n'
              '\n'
              '    # Functions\n'
              '    Custom=format_custom_function,\n'
              '    Var=format_var_function,\n'
              '    Not=format_not_function,\n'
              '    And=format_and_function,\n'
              '    Or=format_or_function,\n'
              '    Equal=format_equal_function,\n'
              '    NotEqual=format_not_equal_function,\n'
              '    LessThan=format_less_than_function,\n'
              '    LessThanOrEqual=format_less_than_or_equal_function,\n'
              '    GreaterThan=format_greater_than_function,\n'
              '    GreaterThanOrEqual=format_greater_than_or_equal_function,\n'
              '    In=format_in_function,\n'
              '    NotIn=format_not_in_function,')

Fragment(uuid='99b648c6-45b7-4ac8-8db3-65c41125bbc6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1203,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    Neg=format_neg_function,\n'
              '    Add=format_add_function,\n'
              '    Sub=format_sub_function,\n'
              '    Mul=format_mul_function,\n'
              '    Div=format_div_function,\n'
              '    Concat=format_concat_function,\n'
              '    Left=format_left_function,\n'
              '    Right=format_right_function,\n'
              '    Substring=format_substring_function,\n'
              '    Contains=format_contains_function,\n'
              '    Like=format_like_function,\n'
              '    NotLik')

Fragment(uuid='2fe5a811-b44f-407d-b140-57327dffba29',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1215,
         depth=0,
         type='module',
         name='',
         text='e=format_not_like_function,\n'
              '    Match=format_match_function,\n'
              '    NotMatch=format_not_match_function,\n'
              '    FullTextSearch=format_full_text_search_function,\n'
              '    Coalesce=format_coalesce_function,\n'
              '\n'
              '    # Aggregates\n'
              '    Count=format_count_aggregate,\n'
              '    Min=format_min_aggregate,\n'
              '    Max=format_max_aggregate,\n'
              '    Sum=format_sum_aggregate,\n'
              '    Avg=format_avg_aggregate,\n'
              ')\n')

Fragment(uuid='264d2318-99e2-4129-8064-5589495246c5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1228,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_expression(expression):\n'
              '    """ Formats an expression, which is either a column '
              'reference of a function\n'
              '    """\n'
              '    if isinstance(expression, '
              'dblayer.model.column.BaseColumn):\n'
              '        if expression.table is None:\n'
              '            return quote_name(expression.name)\n'
              '        return quote_table_column_name(expression.table._name, '
              'expression.name)\n'
              '\n'
              '    if isinstance(expression, '
              'dblayer.model.index.FullTextSearchIndex):\n'
              '        return quote_table_column_name(expression.table._name, '
              "expression.name + '_document')\n"
              '\n'
              '    if isinstance(expression, '
              'dblayer.model.function.BaseFunction):\n'
              '        return format_function(expression)\n'
              '\n'
              '    return quote_literal_value(expression)\n'
              '\n'
              '\n'
              '### Formatting query conditions at runtime\n')

Fragment(uuid='f2dd717b-6050-4872-a282-694872113658',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1230,
         depth=1,
         type='function',
         name='format_expression',
         text='def format_expression(expression):\n'
              '    """ Formats an expression, which is either a column '
              'reference of a function\n'
              '    """\n'
              '    if isinstance(expression, '
              'dblayer.model.column.BaseColumn):\n'
              '        if expression.table is None:\n'
              '            return quote_name(expression.name)\n'
              '        return quote_table_column_name(expression.table._name, '
              'expression.name)\n'
              '\n'
              '    if isinstance(expression, '
              'dblayer.model.index.FullTextSearchIndex):\n'
              '        return quote_table_column_name(expression.table._name, '
              "expression.name + '_document')\n"
              '\n'
              '    if isinstance(expression, '
              'dblayer.model.function.BaseFunction):\n'
              '        return format_function(expression)\n'
              '\n'
              '    return quote_literal_value(expression)')

Fragment(uuid='665f75d9-00c6-43eb-9412-eea48bfd0010',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1231,
         depth=4,
         type='documentation',
         name='',
         text=' Formats an expression, which is either a column reference of a '
              'function\n'
              '    ')

Fragment(uuid='da1a17b1-0ef3-4813-839f-544ba53edf8c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1247,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting query conditions at runtime')

Fragment(uuid='39add6c1-fcbb-4b54-bf35-e0200abe1096',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1248,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_eq_condition(sql_expression, value):\n'
              '    if value is None:\n'
              "        return ('%s IS NULL' % sql_expression, ())\n"
              "    return ('%s = ?' % sql_expression, (value,))\n")

Fragment(uuid='6560cbbc-cae0-4f97-9928-dd54af8b594b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1249,
         depth=1,
         type='function',
         name='format_eq_condition',
         text='def format_eq_condition(sql_expression, value):\n'
              '    if value is None:\n'
              "        return ('%s IS NULL' % sql_expression, ())\n"
              "    return ('%s = ?' % sql_expression, (value,))")

Fragment(uuid='ae0f9a4c-b630-403f-b306-c3c1151f43ce',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1253,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_ne_condition(sql_expression, value):\n'
              '    if value is None:\n'
              "        return ('%s IS NOT NULL' % sql_expression, ())\n"
              "    return ('%s <> ?' % sql_expression, (value,))\n")

Fragment(uuid='88dbda3a-9f1c-4372-bf40-9af433e503bd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1255,
         depth=1,
         type='function',
         name='format_ne_condition',
         text='def format_ne_condition(sql_expression, value):\n'
              '    if value is None:\n'
              "        return ('%s IS NOT NULL' % sql_expression, ())\n"
              "    return ('%s <> ?' % sql_expression, (value,))")

Fragment(uuid='5c519603-80ef-4bf3-93df-eba79f52bac2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1259,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_gt_condition(sql_expression, value):\n'
              "    return ('%s > ?' % sql_expression, (value,))\n")

Fragment(uuid='7a2de18a-72d9-4f24-b267-477e36ae74c2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1261,
         depth=1,
         type='function',
         name='format_gt_condition',
         text='def format_gt_condition(sql_expression, value):\n'
              "    return ('%s > ?' % sql_expression, (value,))")

Fragment(uuid='c7d60204-9ccb-4108-8c16-db69fa0e240c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1263,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_lt_condition(sql_expression, value):\n'
              "    return ('%s < ?' % sql_expression, (value,))\n")

Fragment(uuid='86777d78-a2e7-46f7-bd10-0c9dcc40ca64',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1265,
         depth=1,
         type='function',
         name='format_lt_condition',
         text='def format_lt_condition(sql_expression, value):\n'
              "    return ('%s < ?' % sql_expression, (value,))")

Fragment(uuid='663994bf-a011-4319-b8b6-e4b179e2765e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1267,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_ge_condition(sql_expression, value):\n'
              "    return ('%s >= ?' % sql_expression, (value,))\n")

Fragment(uuid='624bf64e-eaef-411d-a80d-ae0d26d83d0a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1269,
         depth=1,
         type='function',
         name='format_ge_condition',
         text='def format_ge_condition(sql_expression, value):\n'
              "    return ('%s >= ?' % sql_expression, (value,))")

Fragment(uuid='6aedc1df-6b49-4a23-b23c-ad9049ea09c1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1271,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_le_condition(sql_expression, value):\n'
              "    return ('%s <= ?' % sql_expression, (value,))\n")

Fragment(uuid='99babcfb-720c-4f06-8b1c-073a59360ea3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1273,
         depth=1,
         type='function',
         name='format_le_condition',
         text='def format_le_condition(sql_expression, value):\n'
              "    return ('%s <= ?' % sql_expression, (value,))")

Fragment(uuid='9ace2374-54cf-425e-8008-599e059dbbdf',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1275,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_range_condition(sql_expression, value):\n'
              '    # NOTE: It can only be used with an sql_expression without '
              'parameter placeholders.\n'
              '    lower_limit, upper_limit = value\n'
              '    return (\n'
              "        '%s >= ? AND %s < ?' % (sql_expression, "
              'sql_expression),\n'
              '        (lower_limit, upper_limit))\n')

Fragment(uuid='37bcd5ea-2623-4eb8-bddf-809dd316c8d6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1277,
         depth=1,
         type='function',
         name='format_range_condition',
         text='def format_range_condition(sql_expression, value):\n'
              '    # NOTE: It can only be used with an sql_expression without '
              'parameter placeholders.\n'
              '    lower_limit, upper_limit = value\n'
              '    return (\n'
              "        '%s >= ? AND %s < ?' % (sql_expression, "
              'sql_expression),\n'
              '        (lower_limit, upper_limit))')

Fragment(uuid='41b65ceb-5f51-472d-b801-f8a8b87b55e5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1278,
         depth=1,
         type='documentation',
         name='',
         text='# NOTE: It can only be used with an sql_expression without '
              'parameter placeholders.')

Fragment(uuid='19f4677e-1bd3-488c-82a2-67dec8084fec',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1283,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_in_range_condition(sql_expression, value):\n'
              '    # NOTE: It can only be used with an sql_expression without '
              'parameter placeholders.\n'
              '    lower_limit, upper_limit = value\n'
              '    return (\n'
              "        '(%s < ? OR %s > ?)' % (sql_expression, "
              'sql_expression),\n'
              '        (lower_limit, upper_limit))\n')

Fragment(uuid='06a67e54-0b9b-4463-97a3-78a9e64abcfc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1285,
         depth=1,
         type='function',
         name='format_not_in_range_condition',
         text='def format_not_in_range_condition(sql_expression, value):\n'
              '    # NOTE: It can only be used with an sql_expression without '
              'parameter placeholders.\n'
              '    lower_limit, upper_limit = value\n'
              '    return (\n'
              "        '(%s < ? OR %s > ?)' % (sql_expression, "
              'sql_expression),\n'
              '        (lower_limit, upper_limit))')

Fragment(uuid='2c7afe82-3d6f-437c-bcdc-e48a8a86eac2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1286,
         depth=1,
         type='documentation',
         name='',
         text='# NOTE: It can only be used with an sql_expression without '
              'parameter placeholders.')

Fragment(uuid='7cdcb6fc-0cb9-4480-aa6f-da8e9aa7b443',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1291,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_in_condition(sql_expression, value):\n'
              '    value = tuple(value)\n'
              '    if not value:\n'
              "        return ('FALSE', ())\n"
              "    return ('%s IN ?' % sql_expression, (value,))\n")

Fragment(uuid='cf8c623b-e1c9-43b6-b017-1efa045951ba',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1293,
         depth=1,
         type='function',
         name='format_in_condition',
         text='def format_in_condition(sql_expression, value):\n'
              '    value = tuple(value)\n'
              '    if not value:\n'
              "        return ('FALSE', ())\n"
              "    return ('%s IN ?' % sql_expression, (value,))")

Fragment(uuid='045c0123-d0b8-40b7-8ff7-941bdf18dfc7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1298,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_in_condition(sql_expression, value):\n'
              '    value = tuple(value)\n'
              '    if not value:\n'
              "        return ('TRUE', ())\n"
              "    return ('%s NOT IN ?' % sql_expression, (value,))\n")

Fragment(uuid='f1f15600-4c1a-488a-9561-69dca6e03b42',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1300,
         depth=1,
         type='function',
         name='format_not_in_condition',
         text='def format_not_in_condition(sql_expression, value):\n'
              '    value = tuple(value)\n'
              '    if not value:\n'
              "        return ('TRUE', ())\n"
              "    return ('%s NOT IN ?' % sql_expression, (value,))")

Fragment(uuid='caf98779-e116-42f8-8906-d7a8f3627c2b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1305,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_like_condition(sql_expression, value):\n'
              "    return ('%s LIKE ?' % sql_expression, (value,))\n")

Fragment(uuid='fce141f6-f7c0-44e0-8940-4d55894ca63d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1307,
         depth=1,
         type='function',
         name='format_like_condition',
         text='def format_like_condition(sql_expression, value):\n'
              "    return ('%s LIKE ?' % sql_expression, (value,))")

Fragment(uuid='9f22bc06-4536-4f81-9b20-0668cd5cf087',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1309,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_like_condition(sql_expression, value):\n'
              "    return ('%s NOT LIKE ?' % sql_expression, (value,))\n")

Fragment(uuid='4f355455-e71a-4823-b12c-e40a25b57dda',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1311,
         depth=1,
         type='function',
         name='format_not_like_condition',
         text='def format_not_like_condition(sql_expression, value):\n'
              "    return ('%s NOT LIKE ?' % sql_expression, (value,))")

Fragment(uuid='2a1918df-bca3-4628-80e4-68be1b4a000d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1313,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_similar_to_condition(sql_expression, value):\n'
              "    return ('%s SIMILAR TO ?' % sql_expression, (value,))\n")

Fragment(uuid='4e55c3a7-9122-46d0-aa15-8af7f47f608c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1315,
         depth=1,
         type='function',
         name='format_similar_to_condition',
         text='def format_similar_to_condition(sql_expression, value):\n'
              "    return ('%s SIMILAR TO ?' % sql_expression, (value,))")

Fragment(uuid='5de04de7-50a3-4a2f-8fe1-4370e746c01a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1317,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_similar_to_condition(sql_expression, value):\n'
              "    return ('%s NOT SIMILAR TO ?' % sql_expression, (value,))\n")

Fragment(uuid='5b9197c4-12c4-4c20-bc74-5dbd64363999',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1319,
         depth=1,
         type='function',
         name='format_not_similar_to_condition',
         text='def format_not_similar_to_condition(sql_expression, value):\n'
              "    return ('%s NOT SIMILAR TO ?' % sql_expression, (value,))")

Fragment(uuid='cf850fe5-67da-407f-a36d-9c7bc56474f2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1321,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_match_condition(sql_expression, value):\n'
              "    return ('%s ~ ?' % sql_expression, (value,))\n")

Fragment(uuid='5c00c33a-ec5b-4e79-89e9-f5dc70da7fa7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1323,
         depth=1,
         type='function',
         name='format_match_condition',
         text='def format_match_condition(sql_expression, value):\n'
              "    return ('%s ~ ?' % sql_expression, (value,))")

Fragment(uuid='9b15d68d-49ff-4649-ad43-ad49c7f169ee',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1325,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_not_match_condition(sql_expression, value):\n'
              "    return ('%s !~ ?' % sql_expression, (value,))\n")

Fragment(uuid='83ddc0fe-4ae9-43b1-ac1f-66d9bb1742ae',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1327,
         depth=1,
         type='function',
         name='format_not_match_condition',
         text='def format_not_match_condition(sql_expression, value):\n'
              "    return ('%s !~ ?' % sql_expression, (value,))")

Fragment(uuid='71c2c80e-4185-4317-b164-bb6280b06fea',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1329,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_search_condition(sql_expression, value):\n'
              "    return ('%s @@ plainto_tsquery(?)' % sql_expression, "
              '(value,))\n'
              '\n'
              '\n'
              '# Keyword argument suffixes, SQL template and function to '
              'prepare\n'
              '# the expressions passed as parameters\n'
              'QUERY_CONDITION_OPERATOR_LIST = (\n'
              "    ('', format_eq_condition),\n"
              "    ('_eq', format_eq_condition),\n"
              "    ('_ne', format_ne_condition),\n"
              "    ('_gt', format_gt_condition),\n"
              "    ('_lt', format_lt_condition),\n"
              "    ('_ge', format_ge_condition),\n"
              "    ('_le', format_le_condition),\n"
              "    ('_range', ")

Fragment(uuid='284dc0de-cc53-4f19-a3f9-99354f54d10c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1331,
         depth=1,
         type='function',
         name='format_search_condition',
         text='def format_search_condition(sql_expression, value):\n'
              "    return ('%s @@ plainto_tsquery(?)' % sql_expression, "
              '(value,))')

Fragment(uuid='0fba252f-2bf3-46f3-b658-0756ffec9b75',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1332,
         depth=6,
         type='documentation',
         name='',
         text='%s @@ plainto_tsquery(?)')

Fragment(uuid='92ae5dac-72ce-4f93-b1d2-8062eb81a848',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1335,
         depth=0,
         type='documentation',
         name='',
         text='# Keyword argument suffixes, SQL template and function to '
              'prepare')

Fragment(uuid='a0145d0d-f325-4c1a-b1c6-1310c527cdc8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1336,
         depth=0,
         type='documentation',
         name='',
         text='# the expressions passed as parameters')

Fragment(uuid='33eb3b02-9a55-4114-a8d6-07a063309467',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1345,
         depth=0,
         type='module',
         name='',
         text='format_range_condition),\n'
              "    ('_not_in_range', format_not_in_range_condition),\n"
              "    ('_in', format_in_condition),\n"
              "    ('_not_in', format_not_in_condition),\n"
              "    ('_like', format_like_condition),\n"
              "    ('_not_like', format_not_like_condition),\n"
              "    ('_similar_to', format_similar_to_condition),\n"
              "    ('_not_similar_to', format_not_similar_to_condition),\n"
              "    ('_match', format_match_condition),\n"
              "    ('_not_match', format_not_match_condition),\n"
              "    ('_search', format_search_condition),\n"
              ')\n'
              '\n'
              '\n'
              '### Formatting query conditions\n')

Fragment(uuid='2729b16c-bec4-4fcc-bc58-9f46d488e4d7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1359,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting query conditions')

Fragment(uuid='1fe9a313-eb50-4e73-80b0-d4e1abfd3e58',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1360,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_query_condition(condition):\n'
              '    """ Returns formatted query condition\n'
              '    \n'
              '    Yields (argument_name, (suffix, formatting_function_name, '
              'value_expression))\n'
              '    tuples for each operator.\n'
              '    \n'
              '    """\n'
              '    if 0:\n'
              '        assert isinstance(condition, '
              'dblayer.model.query.Result)\n'
              '\n'
              '    value_expression = format_expression(condition.expression)\n'
              '\n'
              '    # Equals to a given value\n'
              '    for suffix, formatting_function in '
              'QUERY_CONDITION_OPERATOR_LIST:\n'
              '        # Name of the argument for this operator\n'
              '        argument_name = condition.name + suffix\n'
              '\n'
              '        # Yield SQL argument name and SQL expression for this '
              'operator\n'
              '        yield (argument_name, (suffix, '
              'formatting_function.__name__, value_expression))\n')

Fragment(uuid='f13f8345-ef9f-43d4-887e-d07c04ec5db1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1361,
         depth=1,
         type='function',
         name='format_query_condition',
         text='def format_query_condition(condition):\n'
              '    """ Returns formatted query condition\n'
              '    \n'
              '    Yields (argument_name, (suffix, formatting_function_name, '
              'value_expression))\n'
              '    tuples for each operator.\n'
              '    \n'
              '    """\n'
              '    if 0:\n'
              '        assert isinstance(condition, '
              'dblayer.model.query.Result)\n'
              '\n'
              '    value_expression = format_expression(condition.expression)\n'
              '\n'
              '    # Equals to a given value\n'
              '    for suffix, formatting_function in '
              'QUERY_CONDITION_OPERATOR_LIST:\n'
              '        # Name of the argument for this operator\n'
              '        argument_name = condition.name + suffix\n'
              '\n'
              '        # Yield SQL argument name and SQL expression for this '
              'operator\n'
              '        yield (argument_name, (suffix, '
              'formatting_function.__name__, value_expression))')

Fragment(uuid='8ff5d781-455f-4441-be93-dda8461cd046',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1362,
         depth=4,
         type='documentation',
         name='',
         text=' Returns formatted query condition\n'
              '    \n'
              '    Yields (argument_name, (suffix, formatting_function_name, '
              'value_expression))\n'
              '    tuples for each operator.\n'
              '    \n'
              '    ')

Fragment(uuid='c46b4c95-e17f-4d11-9347-d72f0c4a49e3',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1373,
         depth=2,
         type='documentation',
         name='',
         text='# Equals to a given value')

Fragment(uuid='b4d49faa-7dc1-46a5-a10d-605b03b69b32',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1375,
         depth=3,
         type='documentation',
         name='',
         text='# Name of the argument for this operator')

Fragment(uuid='3d9aeabf-a728-4f20-9b04-6e852ca2ff71',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1378,
         depth=4,
         type='documentation',
         name='',
         text='# Yield SQL argument name and SQL expression for this operator')

Fragment(uuid='71c5fd64-c46a-46c9-8a7f-ec143c9af395',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1380,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_query_condition_map(query):\n'
              '    """ Returns dictionaries mapping names of all possible '
              'query conditions\n'
              '    to the formatted SQL condition and parameter_tuple\n'
              '    \n'
              '    Returns (where_condition_map, having_condition_map)\n'
              '    \n'
              '    The returned dictionaries map all possible keyword argument '
              'names to\n'
              '    (suffix, sql_expression, prepare_value_function_name) '
              'tuples.\n'
              '    \n'
              '    """\n'
              '    # Process all the query conditions\n'
              '    where_condition_map = {}\n'
              '    having_condition_map = {}\n')

Fragment(uuid='4daa099f-03cd-4f71-a02c-159ca58479b2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1382,
         depth=1,
         type='function',
         name='format_query_condition_map',
         text='def format_query_condition_map(query):\n'
              '    """ Returns dictionaries mapping names of all possible '
              'query conditions\n'
              '    to the formatted SQL condition and parameter_tuple\n'
              '    \n'
              '    Returns (where_condition_map, having_condition_map)\n'
              '    \n'
              '    The returned dictionaries map all possible keyword argument '
              'names to\n'
              '    (suffix, sql_expression, prepare_value_function_name) '
              'tuples.\n'
              '    \n'
              '    """\n'
              '    # Process all the query conditions\n'
              '    where_condition_map = {}\n'
              '    having_condition_map = {}\n')

Fragment(uuid='40a2e5c6-fce2-496d-9417-91e65f129a71',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1383,
         depth=4,
         type='documentation',
         name='',
         text=' Returns dictionaries mapping names of all possible query '
              'conditions\n'
              '    to the formatted SQL condition and parameter_tuple\n'
              '    \n'
              '    Returns (where_condition_map, having_condition_map)\n'
              '    \n'
              '    The returned dictionaries map all possible keyword argument '
              'names to\n'
              '    (suffix, sql_expression, prepare_value_function_name) '
              'tuples.\n'
              '    \n'
              '    ')

Fragment(uuid='45d93e99-5d7f-4458-b831-196e26972bb1',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1392,
         depth=2,
         type='documentation',
         name='',
         text='# Process all the query conditions')

Fragment(uuid='a4679936-3c6f-4646-9880-ab41eda5a02c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1395,
         depth=0,
         type='module',
         name='',
         text='    for condition in query._column_list + '
              'query._condition_list:\n'
              '\n'
              '        # Select the appropriate condition map\n'
              '        if condition.after_group_by:\n'
              '            condition_map = having_condition_map\n'
              '        else:\n'
              '            condition_map = where_condition_map\n'
              '\n'
              '        # Append each possible operator for this condition\n'
              '        '
              'condition_map.update(format_query_condition(condition))\n'
              '\n'
              '    return (where_condition_map, having_condition_map)\n')

Fragment(uuid='9021b32c-057b-4824-9600-5fe4c57a9b9c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1395,
         depth=1,
         type='function',
         name='format_query_condition_map',
         text='    for condition in query._column_list + '
              'query._condition_list:\n'
              '\n'
              '        # Select the appropriate condition map\n'
              '        if condition.after_group_by:\n'
              '            condition_map = having_condition_map\n'
              '        else:\n'
              '            condition_map = where_condition_map\n'
              '\n'
              '        # Append each possible operator for this condition\n'
              '        '
              'condition_map.update(format_query_condition(condition))\n'
              '\n'
              '    return (where_condition_map, having_condition_map)')

Fragment(uuid='4aa7b4b1-cbee-4000-b061-38f25d02ce5c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1397,
         depth=3,
         type='documentation',
         name='',
         text='# Select the appropriate condition map')

Fragment(uuid='3d8042b2-c3fc-49f9-bbdc-57b29e258c49',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1403,
         depth=4,
         type='documentation',
         name='',
         text='# Append each possible operator for this condition')

Fragment(uuid='75a4e36d-29ba-4e54-aa8c-29128c612364',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1407,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_query_order_by_map(query):\n'
              '    """ Returns a dictionary mapping all the possible ascending '
              'and descending \n'
              '    order by fields to their SQL expression\n'
              '    """\n'
              '    order_by_map = {}\n'
              '    for query_result in query._column_list + '
              'query._condition_list:\n'
              '        name = query_result.name\n'
              '        sql_expression = '
              'format_expression(query_result.expression)\n'
              '        order_by_map[name] = sql_expression\n'
              "        order_by_map['+' + name] = sql_expression\n"
              "        order_by_map['-' + name] = sql_expression + ' DESC'\n"
              '    return order_by_map\n')

Fragment(uuid='532ebf30-914d-458d-a8f7-a2f536c27849',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1409,
         depth=1,
         type='function',
         name='format_query_order_by_map',
         text='def format_query_order_by_map(query):\n'
              '    """ Returns a dictionary mapping all the possible ascending '
              'and descending \n'
              '    order by fields to their SQL expression\n'
              '    """\n'
              '    order_by_map = {}\n'
              '    for query_result in query._column_list + '
              'query._condition_list:\n'
              '        name = query_result.name\n'
              '        sql_expression = '
              'format_expression(query_result.expression)\n'
              '        order_by_map[name] = sql_expression\n'
              "        order_by_map['+' + name] = sql_expression\n"
              "        order_by_map['-' + name] = sql_expression + ' DESC'\n"
              '    return order_by_map')

Fragment(uuid='f30640f6-0b88-4b18-824e-7845db22988d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1410,
         depth=4,
         type='documentation',
         name='',
         text=' Returns a dictionary mapping all the possible ascending and '
              'descending \n'
              '    order by fields to their SQL expression\n'
              '    ')

Fragment(uuid='4703324e-c2f4-4835-ba72-fb5df64b169d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1421,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_table_column_condition(column):\n'
              '    """ Returns formatted table column condition\n'
              '    \n'
              '    Yields (argument_name, (suffix, formatting_function_name, '
              'value_expression))\n'
              '    tuples for each operator.\n'
              '    \n'
              '    """\n'
              '    if 0:\n'
              '        assert isinstance(condition, '
              'dblayer.model.query.BaseColumn)\n'
              '\n'
              '    value_expression = format_expression(column)\n'
              '\n'
              '    # Equals to a given value\n'
              '    for suffix, formatting_function in '
              'QUERY_CONDITION_OPERATOR_LIST:\n'
              '        # Name of the argument for this operator\n'
              '        argument_name = column.name + suffix\n'
              '\n'
              '        # Yield SQL argument name and SQL expression for this '
              'operator\n'
              '        yield (argument_name, (suffix, '
              'formatting_function.__name__, value_expression))\n')

Fragment(uuid='e43e4fe9-c857-40f4-9c12-e1f48e6b4bd5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1423,
         depth=1,
         type='function',
         name='format_table_column_condition',
         text='def format_table_column_condition(column):\n'
              '    """ Returns formatted table column condition\n'
              '    \n'
              '    Yields (argument_name, (suffix, formatting_function_name, '
              'value_expression))\n'
              '    tuples for each operator.\n'
              '    \n'
              '    """\n'
              '    if 0:\n'
              '        assert isinstance(condition, '
              'dblayer.model.query.BaseColumn)\n'
              '\n'
              '    value_expression = format_expression(column)\n'
              '\n'
              '    # Equals to a given value\n'
              '    for suffix, formatting_function in '
              'QUERY_CONDITION_OPERATOR_LIST:\n'
              '        # Name of the argument for this operator\n'
              '        argument_name = column.name + suffix\n'
              '\n'
              '        # Yield SQL argument name and SQL expression for this '
              'operator\n'
              '        yield (argument_name, (suffix, '
              'formatting_function.__name__, value_expression))')

Fragment(uuid='5ae48bc9-e4ae-4ab4-b88b-265da50eae39',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1424,
         depth=4,
         type='documentation',
         name='',
         text=' Returns formatted table column condition\n'
              '    \n'
              '    Yields (argument_name, (suffix, formatting_function_name, '
              'value_expression))\n'
              '    tuples for each operator.\n'
              '    \n'
              '    ')

Fragment(uuid='7e4694bd-3231-41c3-8553-9751a82814da',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1435,
         depth=2,
         type='documentation',
         name='',
         text='# Equals to a given value')

Fragment(uuid='2925168b-6603-4551-89fc-4f47f77c4526',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1437,
         depth=3,
         type='documentation',
         name='',
         text='# Name of the argument for this operator')

Fragment(uuid='4dce3f1b-af40-4cf4-b2cc-ef451d40b8dd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1440,
         depth=4,
         type='documentation',
         name='',
         text='# Yield SQL argument name and SQL expression for this operator')

Fragment(uuid='648017aa-218d-447e-87d8-e82466f0afdb',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1442,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_table_condition_map(table):\n'
              '    """ Returns dictionary mapping names of all possible column '
              'conditions\n'
              '    to the formatted SQL condition and parameter_tuple\n'
              '    \n'
              '    The returned dictionary maps all possible keyword argument '
              'names to\n'
              '    (suffix, sql_expression, prepare_value_function_name) '
              'tuples.\n'
              '    \n'
              '    """\n'
              '    # Process all the query conditions\n'
              '    condition_map = {}\n'
              '    for column in table._column_list:\n'
              '        # Append each possible operator for this condition\n'
              '        '
              'condition_map.update(format_table_column_condition(column))\n'
              '\n'
              '    return condition_map\n')

Fragment(uuid='24139ee3-0c4e-4bf1-be67-23d20375a6cc',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1444,
         depth=1,
         type='function',
         name='format_table_condition_map',
         text='def format_table_condition_map(table):\n'
              '    """ Returns dictionary mapping names of all possible column '
              'conditions\n'
              '    to the formatted SQL condition and parameter_tuple\n'
              '    \n'
              '    The returned dictionary maps all possible keyword argument '
              'names to\n'
              '    (suffix, sql_expression, prepare_value_function_name) '
              'tuples.\n'
              '    \n'
              '    """\n'
              '    # Process all the query conditions\n'
              '    condition_map = {}\n'
              '    for column in table._column_list:\n'
              '        # Append each possible operator for this condition\n'
              '        '
              'condition_map.update(format_table_column_condition(column))\n'
              '\n'
              '    return condition_map')

Fragment(uuid='9f37e725-f108-4f14-95e1-93ab24f3f64c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1445,
         depth=4,
         type='documentation',
         name='',
         text=' Returns dictionary mapping names of all possible column '
              'conditions\n'
              '    to the formatted SQL condition and parameter_tuple\n'
              '    \n'
              '    The returned dictionary maps all possible keyword argument '
              'names to\n'
              '    (suffix, sql_expression, prepare_value_function_name) '
              'tuples.\n'
              '    \n'
              '    ')

Fragment(uuid='33546e65-304f-4fa1-8511-14d341f71742',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1452,
         depth=2,
         type='documentation',
         name='',
         text='# Process all the query conditions')

Fragment(uuid='f833e402-cbf0-495b-be5e-358409e85f32',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1455,
         depth=3,
         type='documentation',
         name='',
         text='# Append each possible operator for this condition')

Fragment(uuid='39b1aeaf-578f-42db-87f1-e7a17e76d257',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1459,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_table_order_by_map(table):\n'
              '    """ Returns a dictionary mapping all the possible ascending '
              'and descending \n'
              '    order by columns to their SQL expression\n'
              '    """\n'
              '    order_by_map = {}\n'
              '    for column in table._column_list:\n'
              '        name = column.name\n'
              '        sql_expression = format_expression(column)\n'
              '        order_by_map[name] = sql_expression\n'
              "        order_by_map['+' + name] = sql_expression\n"
              "        order_by_map['-' + name] = sql_expression + ' DESC'\n"
              '    return order_by_map\n'
              '\n'
              '\n'
              '### Formatting queries at runtime\n')

Fragment(uuid='09b92b52-7774-47dc-9989-a94827ae547e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1461,
         depth=1,
         type='function',
         name='format_table_order_by_map',
         text='def format_table_order_by_map(table):\n'
              '    """ Returns a dictionary mapping all the possible ascending '
              'and descending \n'
              '    order by columns to their SQL expression\n'
              '    """\n'
              '    order_by_map = {}\n'
              '    for column in table._column_list:\n'
              '        name = column.name\n'
              '        sql_expression = format_expression(column)\n'
              '        order_by_map[name] = sql_expression\n'
              "        order_by_map['+' + name] = sql_expression\n"
              "        order_by_map['-' + name] = sql_expression + ' DESC'\n"
              '    return order_by_map')

Fragment(uuid='14c86416-2d13-4b8d-9976-d6dcf1899390',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1462,
         depth=4,
         type='documentation',
         name='',
         text=' Returns a dictionary mapping all the possible ascending and '
              'descending \n'
              '    order by columns to their SQL expression\n'
              '    ')

Fragment(uuid='11ed655b-b587-45bd-bcef-f2278251be8a',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1475,
         depth=0,
         type='documentation',
         name='',
         text='### Formatting queries at runtime')

Fragment(uuid='4d5e4dec-d6d1-4c43-a31e-fe791f17d7a7',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1476,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def format_query(\n'
              '        table_list,\n'
              '        field_list,\n'
              '        where_condition_map,\n'
              '        having_condition_map,\n'
              '        group_by,\n'
              '        order_by_map,\n'
              '        runtime_where_condition,\n'
              '        runtime_having_condition,\n'
              '        runtime_conditions,\n'
              '        order_by,\n'
              '        limit,\n'
              '        offset):\n'
              '    """ Formats a SELECT SQL statement at runtime for the '
              'actual conditions\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    Partial caching is done b')

Fragment(uuid='aaf9c552-0b9a-49e9-8118-0879af757426',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1477,
         depth=1,
         type='function',
         name='format_query',
         text='def format_query(\n'
              '        table_list,\n'
              '        field_list,\n'
              '        where_condition_map,\n'
              '        having_condition_map,\n'
              '        group_by,\n'
              '        order_by_map,\n'
              '        runtime_where_condition,\n'
              '        runtime_having_condition,\n'
              '        runtime_conditions,\n'
              '        order_by,\n'
              '        limit,\n'
              '        offset):\n'
              '    """ Formats a SELECT SQL statement at runtime for the '
              'actual conditions\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    Partial caching is done by')

Fragment(uuid='4d987200-ad2a-4ac4-9c65-8d1eb382b6ba',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1490,
         depth=4,
         type='documentation',
         name='',
         text=' Formats a SELECT SQL statement at runtime for the actual '
              'conditions\n'
              '    \n'
              '    Returns (sql, parameter_tuple)\n'
              '    \n'
              '    Partial caching is done by the format_select function, but '
              'the evaluation\n'
              '    of the dynamic conditions cannot be cached. The actual '
              'runtime conditions\n'
              '    are the keywords parameters passed to the query method on '
              'the database\n'
              '    abstraction layer.\n'
              '    \n'
              '    Passing a tuple in the order_by parameter defines the '
              'record ordering.\n'
              "    Values can be condition names. Use '-' prefix for "
              'descending sort.\n'
              "    You can also use a redundant '+' prefix for ascending "
              'short.\n'
              '    \n'
              '    ')

Fragment(uuid='a9bcd7ab-b56d-45e2-9a05-b868502121b6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1494,
         depth=0,
         type='module',
         name='',
         text='y the format_select function, but the evaluation\n'
              '    of the dynamic conditions cannot be cached. The actual '
              'runtime conditions\n'
              '    are the keywords parameters passed to the query method on '
              'the database\n'
              '    abstraction layer.\n'
              '    \n'
              '    Passing a tuple in the order_by parameter defines the '
              'record ordering.\n'
              "    Values can be condition names. Use '-' prefix for "
              'descending sort.\n'
              "    You can also use a redundant '+' prefix for ascending "
              'short.\n'
              '    \n'
              '    """\n')

Fragment(uuid='1e0e1d96-8bc5-4d8d-9167-a0cb2b0eb4b0',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1494,
         depth=1,
         type='function',
         name='format_query',
         text=' the format_select function, but the evaluation\n'
              '    of the dynamic conditions cannot be cached. The actual '
              'runtime conditions\n'
              '    are the keywords parameters passed to the query method on '
              'the database\n'
              '    abstraction layer.\n'
              '    \n'
              '    Passing a tuple in the order_by parameter defines the '
              'record ordering.\n'
              "    Values can be condition names. Use '-' prefix for "
              'descending sort.\n'
              "    You can also use a redundant '+' prefix for ascending "
              'short.\n'
              '    \n'
              '    """\n')

Fragment(uuid='3bf8c793-1394-4100-b63d-dab7d2dd8ce2',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1504,
         depth=0,
         type='module',
         name='',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(runtime_conditions, dict)\n'
              '        assert isinstance(where_condition_map, dict)\n'
              '        assert isinstance(having_condition_map, dict)\n'
              '        assert isinstance(group_by, (tuple, list))\n'
              '\n'
              '    # Parse keyword parameters (actual runtime conditions) '
              'passed\n'
              '    where = []\n'
              '    having = []\n'
              '    parameter_list = []\n')

Fragment(uuid='9fca0c22-dec6-449b-a738-5d41f4248f5c',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1504,
         depth=1,
         type='function',
         name='format_query',
         text='    if constants.DEBUG:\n'
              '        assert isinstance(runtime_conditions, dict)\n'
              '        assert isinstance(where_condition_map, dict)\n'
              '        assert isinstance(having_condition_map, dict)\n'
              '        assert isinstance(group_by, (tuple, list))\n'
              '\n'
              '    # Parse keyword parameters (actual runtime conditions) '
              'passed\n'
              '    where = []\n'
              '    having = []\n'
              '    parameter_list = []\n')

Fragment(uuid='249f26eb-03bb-4752-a966-8cd048b34939',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1510,
         depth=2,
         type='documentation',
         name='',
         text='# Parse keyword parameters (actual runtime conditions) passed')

Fragment(uuid='07980bbc-6be6-4027-8694-a2c09da6147f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1514,
         depth=0,
         type='module',
         name='',
         text='    for name, value in runtime_conditions.items():\n')

Fragment(uuid='46efb1cb-6ebb-480a-9688-29850f602320',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1514,
         depth=1,
         type='function',
         name='format_query',
         text='    for name, value in runtime_conditions.items():\n')

Fragment(uuid='5e63f6eb-e518-48c5-bba8-37cd68ff97c9',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1515,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        if value is NA:\n'
              '            continue\n'
              '\n'
              '        # Find the condition by name\n'
              '        condition = where_condition_map.get(name)\n')

Fragment(uuid='c28503a4-37de-4e8c-b008-02c185f72f24',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1515,
         depth=1,
         type='function',
         name='format_query',
         text='\n'
              '        if value is NA:\n'
              '            continue\n'
              '\n'
              '        # Find the condition by name\n'
              '        condition = where_condition_map.get(name)\n')

Fragment(uuid='c557e0ce-289e-4418-b226-3ab7b1286a94',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1519,
         depth=4,
         type='documentation',
         name='',
         text='# Find the condition by name')

Fragment(uuid='32cd5f71-bc81-4bf3-9b55-d61475eb4b3e',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1521,
         depth=0,
         type='module',
         name='',
         text='        if condition:\n'
              '            clause = where\n'
              '        else:\n'
              '            condition = having_condition_map.get(name)\n')

Fragment(uuid='cdc53779-041b-498d-82a8-8a6d7536cca4',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1521,
         depth=1,
         type='function',
         name='format_query',
         text='        if condition:\n'
              '            clause = where\n'
              '        else:\n'
              '            condition = having_condition_map.get(name)\n')

Fragment(uuid='8938f3d9-1b88-4d92-820c-1a5f03c4158b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1525,
         depth=0,
         type='module',
         name='',
         text='            if condition:\n'
              '                clause = having\n'
              '            else:\n'
              '                raise TypeError(\n'
              "                    'Query method received unknown condition: "
              "%s=%r' %\n"
              '                    (name, value))\n'
              '\n'
              '        # Format the condition\n'
              '        suffix, formatting_function, value_expression = '
              'condition\n'
              '        sql_expression, sql_parameters = '
              'formatting_function(value_expression, value)\n'
              '\n'
              '        # Append it to the clause\n'
              '        clause.append(sql_expression)\n'
              '        parameter_list.extend(sql_parameters)\n'
              '\n'
              '    # Where condition built up runtime\n')

Fragment(uuid='7d552056-4265-4f6a-a3de-bd7f39bb54cd',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1525,
         depth=1,
         type='function',
         name='format_query',
         text='            if condition:\n'
              '                clause = having\n'
              '            else:\n'
              '                raise TypeError(\n'
              "                    'Query method received unknown condition: "
              "%s=%r' %\n"
              '                    (name, value))\n'
              '\n'
              '        # Format the condition\n'
              '        suffix, formatting_function, value_expression = '
              'condition\n'
              '        sql_expression, sql_parameters = '
              'formatting_function(value_expression, value)\n'
              '\n'
              '        # Append it to the clause\n'
              '        clause.append(sql_expression)\n'
              '        parameter_list.extend(sql_parameters)\n'
              '\n'
              '    # Where condition built up runtime\n')

Fragment(uuid='ca53e660-e1c5-4fd4-a214-7c59825a1602',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1529,
         depth=15,
         type='documentation',
         name='',
         text='Query method received unknown condition: %s=%r')

Fragment(uuid='0e131b69-08d4-40c1-bdd5-f04a8cf2e28f',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1532,
         depth=4,
         type='documentation',
         name='',
         text='# Format the condition')

Fragment(uuid='572018e2-18b4-4a6c-b262-4e77caa8d81d',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1536,
         depth=4,
         type='documentation',
         name='',
         text='# Append it to the clause')

Fragment(uuid='87385063-6bab-446f-bf53-2795e6774e0b',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1540,
         depth=2,
         type='documentation',
         name='',
         text='# Where condition built up runtime')

Fragment(uuid='16972951-b75a-4277-9287-56d1dfce4093',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1541,
         depth=0,
         type='module',
         name='',
         text='    if runtime_where_condition is not None:\n'
              '        sql_expression = '
              'format_expression(runtime_where_condition)\n'
              '        where.append(sql_expression)\n'
              '\n'
              '    # Having condition built up runtime\n')

Fragment(uuid='e2ecce57-7b4b-4931-9ac7-399ea03b74e6',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1541,
         depth=1,
         type='function',
         name='format_query',
         text='    if runtime_where_condition is not None:\n'
              '        sql_expression = '
              'format_expression(runtime_where_condition)\n'
              '        where.append(sql_expression)\n'
              '\n'
              '    # Having condition built up runtime\n')

Fragment(uuid='5a93ee16-19aa-427a-bba2-93eacfd28566',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1545,
         depth=2,
         type='documentation',
         name='',
         text='# Having condition built up runtime')

Fragment(uuid='4a1fe0b9-0ebb-4ef7-ba98-38ca7908c432',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1546,
         depth=0,
         type='module',
         name='',
         text='    if runtime_having_condition is not None:\n'
              '        sql_expression = '
              'format_expression(runtime_having_condition)\n'
              '        having.append(sql_expression)\n'
              '\n'
              '    # Join the conditions together\n'
              "    where = ' AND '.join(where)\n"
              "    having = ' AND '.join(having)\n"
              '\n'
              '    # NOTE: The group_by expressions are formatted while the '
              'abstraction layer is generated.\n'
              '\n'
              '    # Format order by items\n'
              '    for')

Fragment(uuid='30a5acca-a6a5-4d51-b3ef-e7062f942649',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1546,
         depth=1,
         type='function',
         name='format_query',
         text='    if runtime_having_condition is not None:\n'
              '        sql_expression = '
              'format_expression(runtime_having_condition)\n'
              '        having.append(sql_expression)\n'
              '\n'
              '    # Join the conditions together\n'
              "    where = ' AND '.join(where)\n"
              "    having = ' AND '.join(having)\n"
              '\n'
              '    # NOTE: The group_by expressions are formatted while the '
              'abstraction layer is generated.\n'
              '\n'
              '    # Format order by items\n'
              '    for')

Fragment(uuid='cae5535f-0439-4dd2-8b02-3bb20f8a8027',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1550,
         depth=2,
         type='documentation',
         name='',
         text='# Join the conditions together')

Fragment(uuid='1216fcaa-c6d4-49b5-95eb-f1b5a21d4523',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1554,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: The group_by expressions are formatted while the '
              'abstraction layer is generated.')

Fragment(uuid='09131dc0-b3e2-4920-8739-195fa06ae9a5',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1556,
         depth=2,
         type='documentation',
         name='',
         text='# Format order by items')

Fragment(uuid='81ae211f-c516-4d70-95c0-31dec9048a77',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1557,
         depth=0,
         type='module',
         name='',
         text='matted_order_by = format_order_by(order_by_map, order_by)\n'
              '\n'
              '    clauses = dblayer.backend.base.clauses.Clauses(\n'
              '        table_list=table_list,\n'
              '        field_list=field_list,\n'
              '        where=where,\n'
              '        group_by=group_by,\n'
              '        having=having,\n'
              '        order_by=formatted_order_by,\n'
              '        limit=limit,\n'
              '        offset=offset)\n'
              '\n'
              '    return (format_select(clauses), tuple(parameter_list))\n')

Fragment(uuid='fedcd3d2-22df-4c77-85bf-a872a20b7e34',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1557,
         depth=1,
         type='function',
         name='format_query',
         text='matted_order_by = format_order_by(order_by_map, order_by)\n'
              '\n'
              '    clauses = dblayer.backend.base.clauses.Clauses(\n'
              '        table_list=table_list,\n'
              '        field_list=field_list,\n'
              '        where=where,\n'
              '        group_by=group_by,\n'
              '        having=having,\n'
              '        order_by=formatted_order_by,\n'
              '        limit=limit,\n'
              '        offset=offset)\n'
              '\n'
              '    return (format_select(clauses), tuple(parameter_list))')

Fragment(uuid='08ce9d45-b7c4-4f9f-a9fc-3ddc5e756a63',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1570,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def format_order_by(order_by_map, order_by):\n'
              '    """ Formats the items of an ORDER BY clause\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(order_by_map, dict)\n'
              '        assert isinstance(order_by, (tuple, list))\n'
              '\n'
              '    formatted_order_by = list(map(order_by_map.get, order_by))\n'
              '\n'
              '    if None in formatted_order_by:\n'
              '        raise ValueError(\n'
              "            'Unparsable column order: %r' %\n"
              '            order_by[formatted_order_by.index(None)])\n'
              '\n'
              '    return formatted_order_by\n')

Fragment(uuid='b340a326-5d1d-4869-8be5-3c7ec89e91b8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1572,
         depth=1,
         type='function',
         name='format_order_by',
         text='def format_order_by(order_by_map, order_by):\n'
              '    """ Formats the items of an ORDER BY clause\n'
              '    """\n'
              '    if constants.DEBUG:\n'
              '        assert isinstance(order_by_map, dict)\n'
              '        assert isinstance(order_by, (tuple, list))\n'
              '\n'
              '    formatted_order_by = list(map(order_by_map.get, order_by))\n'
              '\n'
              '    if None in formatted_order_by:\n'
              '        raise ValueError(\n'
              "            'Unparsable column order: %r' %\n"
              '            order_by[formatted_order_by.index(None)])\n'
              '\n'
              '    return formatted_order_by')

Fragment(uuid='eba818de-9c19-4fe9-83a3-0eaeda8bb9b8',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1573,
         depth=4,
         type='documentation',
         name='',
         text=' Formats the items of an ORDER BY clause\n    ')

Fragment(uuid='7e997e4c-96a9-4921-afb4-3c69b995c8fa',
         path='/lib/dblayer/backend/base/format.py',
         lineno=1583,
         depth=9,
         type='documentation',
         name='',
         text='Unparsable column order: %r')

Fragment(uuid='329c946c-07f7-4114-a1f1-aa96b9401d49',
         path='/lib/dblayer/backend/base/record.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Base class for the generated record classes\n"""\n')

Fragment(uuid='ee83d7da-614b-4ccf-8b39-fd515788d6e2',
         path='/lib/dblayer/backend/base/record.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Base class for the generated record classes\n')

Fragment(uuid='2da262aa-0f54-456b-a0bb-40b9747de6d5',
         path='/lib/dblayer/backend/base/record.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/base/record.py\n'
              '  Classes: Record\n'
              '  Methods: __eq__ __repr__ finalize\n'
              '  Variables and usages: _column_default_map _column_name_list '
              '_nullable_column_name_set _table_name get_default_field_value '
              'getattr join name other rsplit\n')

Fragment(uuid='565ec54b-0ec2-4292-af0f-42b716b8f6c2',
         path='/lib/dblayer/backend/base/record.py',
         lineno=3,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Record:\n'
              '    """ Base class for the generated record classes\n'
              '    """\n'
              '\n'
              '    # Name of the corresponding database table storing the '
              'actual records\n'
              "    _table_name = ''\n"
              '\n'
              '    ### Runtime column information\n'
              '\n'
              '    # List of column names\n'
              '    _column_name_list = ()\n'
              '\n'
              '    # Set of names of nullable columns\n'
              '    _nullable_column_name_set = set()\n'
              '\n'
              "    # Map of column names to default field values (if there's "
              'one)\n'
              '    _column_default_map = {}\n'
              '\n'
              '    ### Optimization\n'
              '\n'
              '    # Subclasses will define record fields as slots\n'
              '    __slots__ = ()\n'
              '\n'
              '    ### Textual representation for logging and debugging\n')

Fragment(uuid='182e12e6-ea67-42f1-a04f-9b0de0bc95cc',
         path='/lib/dblayer/backend/base/record.py',
         lineno=5,
         depth=1,
         type='class',
         name='Record',
         text='class Record:\n'
              '    """ Base class for the generated record classes\n'
              '    """\n'
              '\n'
              '    # Name of the corresponding database table storing the '
              'actual records\n'
              "    _table_name = ''\n"
              '\n'
              '    ### Runtime column information\n'
              '\n'
              '    # List of column names\n'
              '    _column_name_list = ()\n'
              '\n'
              '    # Set of names of nullable columns\n'
              '    _nullable_column_name_set = set()\n'
              '\n'
              "    # Map of column names to default field values (if there's "
              'one)\n'
              '    _column_default_map = {}\n'
              '\n'
              '    ### Optimization\n'
              '\n'
              '    # Subclasses will define record fields as slots\n'
              '    __slots__ = ()\n'
              '\n'
              '    ### Textual representation for logging and debugging\n')

Fragment(uuid='ce7f3fd2-463b-4879-8e53-563f8b32a8f1',
         path='/lib/dblayer/backend/base/record.py',
         lineno=6,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for the generated record classes\n    ')

Fragment(uuid='259e4a4c-4bf2-4562-a6fc-898e36131961',
         path='/lib/dblayer/backend/base/record.py',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='# Name of the corresponding database table storing the actual '
              'records')

Fragment(uuid='b887c8df-ce2f-4c99-9dab-114b1cb0e2cf',
         path='/lib/dblayer/backend/base/record.py',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='### Runtime column information')

Fragment(uuid='90ecd24e-7631-4e53-908d-1d9443c1878e',
         path='/lib/dblayer/backend/base/record.py',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='# List of column names')

Fragment(uuid='2a9af487-1785-46a2-857b-b66373d1b4cd',
         path='/lib/dblayer/backend/base/record.py',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='# Set of names of nullable columns')

Fragment(uuid='29b6ac9b-11af-48b0-800a-61fe7fa94aec',
         path='/lib/dblayer/backend/base/record.py',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text="# Map of column names to default field values (if there's one)")

Fragment(uuid='970d1dfd-52f1-4bd8-9e80-f86ee6b06093',
         path='/lib/dblayer/backend/base/record.py',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='# Subclasses will define record fields as slots')

Fragment(uuid='6af45c3b-6437-439e-a1cc-93119c15e2ff',
         path='/lib/dblayer/backend/base/record.py',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='### Textual representation for logging and debugging')

Fragment(uuid='4a88be68-7369-4126-9c9b-bcf168c40d87',
         path='/lib/dblayer/backend/base/record.py',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              '        get_default_field_value = self._column_default_map.get\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, getattr(self, name))\n"
              '                for name in self._column_name_list\n'
              '                if getattr(self, name) is not '
              'get_default_field_value(name)))\n'
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='e1608014-356c-4770-881e-ca4bf52a6cab',
         path='/lib/dblayer/backend/base/record.py',
         lineno=29,
         depth=1,
         type='class',
         name='Record',
         text='\n'
              '    def __repr__(self):\n'
              '        get_default_field_value = self._column_default_map.get\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, getattr(self, name))\n"
              '                for name in self._column_name_list\n'
              '                if getattr(self, name) is not '
              'get_default_field_value(name)))\n'
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='ad915e96-f8b6-4a1a-9f3b-868ed7292c22',
         path='/lib/dblayer/backend/base/record.py',
         lineno=30,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              '        get_default_field_value = self._column_default_map.get\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, getattr(self, name))\n"
              '                for name in self._column_name_list\n'
              '                if getattr(self, name) is not '
              'get_default_field_value(name)))')

Fragment(uuid='a1f945e4-6fc2-4614-a711-c17af8ab63c8',
         path='/lib/dblayer/backend/base/record.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __eq__(self, other):\n'
              '        if other.__class__ is not self.__class__:\n'
              '            return False\n'
              '        for name in self._column_name_list:\n'
              '            if getattr(self, name) != getattr(other, name):\n'
              '                return False\n'
              '        return True\n')

Fragment(uuid='97fa538c-1bcc-48d8-9ac3-a596e014781c',
         path='/lib/dblayer/backend/base/record.py',
         lineno=41,
         depth=1,
         type='class',
         name='Record',
         text='\n'
              '    def __eq__(self, other):\n'
              '        if other.__class__ is not self.__class__:\n'
              '            return False\n'
              '        for name in self._column_name_list:\n'
              '            if getattr(self, name) != getattr(other, name):\n'
              '                return False\n'
              '        return True\n')

Fragment(uuid='15be6195-aa09-4039-9290-2dc4f554b937',
         path='/lib/dblayer/backend/base/record.py',
         lineno=42,
         depth=3,
         type='function',
         name='__eq__',
         text='def __eq__(self, other):\n'
              '        if other.__class__ is not self.__class__:\n'
              '            return False\n'
              '        for name in self._column_name_list:\n'
              '            if getattr(self, name) != getattr(other, name):\n'
              '                return False\n'
              '        return True')

Fragment(uuid='90d24f44-6832-4ee4-aef3-81886c577f98',
         path='/lib/dblayer/backend/base/record.py',
         lineno=49,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def finalize(self):\n'
              '        """ Finalizes the record\n'
              '        \n'
              '        Override in your subclass to provide calculated field '
              'values\n'
              '        right before storing or updating the record into the '
              'database.\n'
              '        Finalization should not raise exceptions normally.\n'
              '        \n'
              '        This method should only access this single record,\n'
              '        it must not execute queries for its operation.\n'
              '        \n'
              '        """\n')

Fragment(uuid='a4e1d596-4a3f-4ddc-9eaf-1d459070efa2',
         path='/lib/dblayer/backend/base/record.py',
         lineno=49,
         depth=1,
         type='class',
         name='Record',
         text='\n'
              '    def finalize(self):\n'
              '        """ Finalizes the record\n'
              '        \n'
              '        Override in your subclass to provide calculated field '
              'values\n'
              '        right before storing or updating the record into the '
              'database.\n'
              '        Finalization should not raise exceptions normally.\n'
              '        \n'
              '        This method should only access this single record,\n'
              '        it must not execute queries for its operation.\n'
              '        \n'
              '        """')

Fragment(uuid='6b0737e5-3d5c-4eba-aa72-032a0f6b9f5d',
         path='/lib/dblayer/backend/base/record.py',
         lineno=50,
         depth=3,
         type='function',
         name='finalize',
         text='def finalize(self):\n'
              '        """ Finalizes the record\n'
              '        \n'
              '        Override in your subclass to provide calculated field '
              'values\n'
              '        right before storing or updating the record into the '
              'database.\n'
              '        Finalization should not raise exceptions normally.\n'
              '        \n'
              '        This method should only access this single record,\n'
              '        it must not execute queries for its operation.\n'
              '        \n'
              '        """')

Fragment(uuid='3b2218f0-a529-41bc-a553-43cc3c5abe35',
         path='/lib/dblayer/backend/base/record.py',
         lineno=51,
         depth=6,
         type='documentation',
         name='',
         text=' Finalizes the record\n'
              '        \n'
              '        Override in your subclass to provide calculated field '
              'values\n'
              '        right before storing or updating the record into the '
              'database.\n'
              '        Finalization should not raise exceptions normally.\n'
              '        \n'
              '        This method should only access this single record,\n'
              '        it must not execute queries for its operation.\n'
              '        \n'
              '        ')

Fragment(uuid='6e9f6488-5f4a-44e9-8e75-6e6942a7a66f',
         path='/lib/dblayer/backend/postgresql/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" PostgreSQL database backend\n"""\n')

Fragment(uuid='57d70b55-70bf-4d84-b115-b0d85b10a89d',
         path='/lib/dblayer/backend/postgresql/__init__.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' PostgreSQL database backend\n')

Fragment(uuid='db01187a-e2d3-45cf-a0cf-0563a2f4680a',
         path='/lib/dblayer/backend/postgresql/clauses.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# noinspection PyUnresolvedReferences\n'
              'from dblayer.backend.base.clauses import Clauses\n')

Fragment(uuid='49b1cad4-b7b0-4ca1-9a21-03bca1ab6636',
         path='/lib/dblayer/backend/postgresql/clauses.py',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# noinspection PyUnresolvedReferences')

Fragment(uuid='7dd7d5cf-ff28-41ef-9e5e-8758f3473214',
         path='/lib/dblayer/backend/postgresql/clauses.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/clauses.py\n'
              '  Variables and usages: Clauses backend base clauses dblayer\n')

Fragment(uuid='9cad1467-e428-4e24-9fa8-66c2690435f1',
         path='/lib/dblayer/backend/postgresql/clauses.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='e629b8ec-0b55-4a40-a93e-415995231a1c',
         path='/lib/dblayer/backend/postgresql/clauses.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='81215182-42aa-476c-88da-38a0b020966a',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import psycopg2\n'
              'import psycopg2.extensions\n'
              '\n'
              'from dblayer.backend.base import database\n'
              '\n'
              '### Force returning of unicode string from the database\n'
              'psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)\n'
              'psycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)\n'
              '\n'
              '\n'
              'class DatabaseAbstraction(database.DatabaseAbstraction):\n'
              '\n'
              "    def _connect(self, dsn, client_encoding='UTF8'):\n"
              '        self.connection = psycopg2.connect(dsn)\n'
              '        self.connection.set_client_encoding(client_encoding)\n')

Fragment(uuid='d9633d15-1046-4b3a-8db0-ce1424b54b8b',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='7870a4db-1953-446e-a4a8-ea3b19a0a631',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/database.py\n'
              '  Classes: DatabaseAbstraction\n'
              '  Methods: _connect\n'
              '  Variables and usages: UNICODE UNICODEARRAY backend base '
              'client_encoding connect connection database dblayer extensions '
              'psycopg2 register_type set_client_encoding\n')

Fragment(uuid='6853487f-5c33-4430-8191-2aadc7c9816f',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='dd12a24f-9d4f-47da-871b-2a60f4a814ce',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='ace9f843-169c-4607-844d-8c12b79bed5c',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='c5fa2454-6e3d-4122-b5c9-d9620aeec5c8',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=6,
         depth=0,
         type='documentation',
         name='',
         text='### Force returning of unicode string from the database')

Fragment(uuid='e52b068c-aec2-4fcd-b124-6d121320c25b',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=11,
         depth=1,
         type='class',
         name='DatabaseAbstraction',
         text='class DatabaseAbstraction(database.DatabaseAbstraction):\n'
              '\n'
              "    def _connect(self, dsn, client_encoding='UTF8'):\n"
              '        self.connection = psycopg2.connect(dsn)\n'
              '        self.connection.set_client_encoding(client_encoding)')

Fragment(uuid='e7db4a1e-a8c2-43bd-8ffd-7bac13059f88',
         path='/lib/dblayer/backend/postgresql/database.py',
         lineno=13,
         depth=3,
         type='function',
         name='_connect',
         text="def _connect(self, dsn, client_encoding='UTF8'):\n"
              '        self.connection = psycopg2.connect(dsn)\n'
              '        self.connection.set_client_encoding(client_encoding)')

Fragment(uuid='b409c1ba-2a44-4dd0-8eaa-4b138c177ec9',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import psycopg2\n'
              '\n'
              'Warning = psycopg2.Warning\n'
              'Error = psycopg2.Error\n'
              'InterfaceError = psycopg2.InterfaceError\n'
              'DatabaseError = psycopg2.DatabaseError\n'
              'DataError = psycopg2.DataError\n'
              'OperationalError = psycopg2.OperationalError\n'
              'IntegrityError = psycopg2.IntegrityError\n'
              'InternalError = psycopg2.IntegrityError\n'
              'ProgrammingError = psycopg2.ProgrammingError\n'
              'NotSupportedError = psycopg2.NotSupportedError\n')

Fragment(uuid='a59649a4-7b37-4443-83cc-d5a295f978b0',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='37ac0b8a-2bbf-4857-ae06-a4d4a5f39657',
         path='/lib/dblayer/backend/postgresql/error.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/error.py\n'
              '  Variables and usages: DataError DatabaseError Error '
              'IntegrityError InterfaceError InternalError NotSupportedError '
              'OperationalError ProgrammingError Warning psycopg2\n')

Fragment(uuid='7adc345b-84a4-4410-93c5-eea2d537a161',
         path='/lib/dblayer/backend/postgresql/format.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='from dblayer.backend.base.format import *\n')

Fragment(uuid='110e0a5d-f29a-401b-ad93-016bd55149e5',
         path='/lib/dblayer/backend/postgresql/format.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='a363eeec-2fc3-4c9b-881a-f82760af3374',
         path='/lib/dblayer/backend/postgresql/format.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='ae255736-8c2f-4938-936e-391258aa5d0a',
         path='/lib/dblayer/backend/postgresql/format.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/format.py\n'
              '  Variables and usages: backend base dblayer format\n')

Fragment(uuid='e9039670-53b7-4a12-a94f-76eae6b8b9e5',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Database inspector for PostgreSQL\n'
              '"""\n'
              '\n'
              'from dblayer import util\n'
              '\n'
              'from dblayer.backend.postgresql import database as '
              'postgresql_database\n'
              'from dblayer.model import database, table, column, function\n')

Fragment(uuid='baff6376-c8d4-420e-bb98-bbdf45c0ba18',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Database inspector for PostgreSQL\n')

Fragment(uuid='a11ec6f3-e7f0-40e5-a5e8-35738b1ae0a2',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/inspector.py\n'
              '  Classes: ColumnInfo DatabaseInspector\n'
              '  Methods: __init__ __repr__ convert_table_name_to_python '
              'define_bigint_column define_boolean_column define_custom_column '
              'define_date_column define_double_column define_integer_column '
              'define_numeric_column define_primary_key_column '
              'define_real_column define_text_column define_timestamp_column '
              'define_tsvector_column define_varchar_column inspect '
              'inspect_tables load_information_schema\n'
              '  Variables and usages: BaseColumn Boolean COLUMN_FACTORY_MAP '
              'Custom Database DatabaseAbstraction Date Datetime Decimal Float '
              'Integer NotImplementedError PrimaryKey SearchDocument Table '
              'Text ValueError _table_name backend capitalize '
              'character_maximum_length class_dict class_name column '
              'column_default column_definition column_factory column_info '
              'column_name cursor data_type database database_class '
              'database_class_name dblayer default digits double '
              'execute_and_fetch_dict_iter function get_column_factory getattr '
              'implicit is_nullable join lower maxlength model name '
              'name_value_list null numeric_precision numeric_precision_radix '
              'numeric_scale postgresql postgresql_database precision '
              'primary_key_column_name_set primary_key_columns scale serial '
              'session setattr split sql_type table table_class '
              'table_class_list table_class_map table_name table_pk_columns '
              'type util value values word\n')

Fragment(uuid='49d3d1d1-d22f-4ee5-be54-7a28604ce3da',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='b181cfb4-0eb1-4f72-b72d-d32d97690549',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='737a4391-1744-4a31-812e-fcc433c9f06b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='36d5a300-f113-46de-8041-3dedfbe3b119',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='486eb12a-19cd-4b35-91b1-b144dcc24b01',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='e792ea12-a390-4b86-a265-4a09f4926bbe',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='f61471e5-dac6-412c-ad1d-fe0fa31bc09e',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=8,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class ColumnInfo:\n'
              '    __slots__ = (\n'
              "        'table_name',\n"
              "        'column_name',\n"
              "        'data_type',\n"
              "        'column_default',\n"
              "        'is_nullable',\n"
              "        'character_maximum_length',\n"
              "        'numeric_precision',\n"
              "        'numeric_precision_radix',\n"
              "        'numeric_scale',\n"
              '    )\n')

Fragment(uuid='161505a6-17b9-438c-9b8f-8310a52a3bd7',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=10,
         depth=1,
         type='class',
         name='ColumnInfo',
         text='class ColumnInfo:\n'
              '    __slots__ = (\n'
              "        'table_name',\n"
              "        'column_name',\n"
              "        'data_type',\n"
              "        'column_default',\n"
              "        'is_nullable',\n"
              "        'character_maximum_length',\n"
              "        'numeric_precision',\n"
              "        'numeric_precision_radix',\n"
              "        'numeric_scale',\n"
              '    )\n')

Fragment(uuid='b76389fd-bd55-4ac3-9824-13e4ed9c8b38',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=17,
         depth=6,
         type='documentation',
         name='',
         text='character_maximum_length')

Fragment(uuid='8251e0f8-6921-4288-881f-94a8ea681a4a',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=19,
         depth=6,
         type='documentation',
         name='',
         text='numeric_precision_radix')

Fragment(uuid='85c96cca-7e74-420d-b0ac-a9551272bdf3',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, table_name=None, column_name=None, '
              'data_type=None, column_default=None,\n'
              '                 is_nullable=None, '
              'character_maximum_length=None, numeric_precision=None,\n'
              '                 numeric_scale=None, '
              'numeric_precision_radix=None):\n'
              '        self.table_name = table_name\n'
              '        self.column_name = column_name\n'
              '        self.data_type = data_type\n'
              '        self.column_default = column_default\n'
              '        self.is_nullable = is_nullable\n'
              '        self.character_maximum_length = '
              'character_maximum_length\n'
              '        self.numeric_precision = numeric_precision\n'
              '        self.numeric_scale = numeric_scale\n'
              '        self.numeric_precision_radix = numeric_precision_radix\n')

Fragment(uuid='cf579c17-6472-4109-b944-a85916c38cfc',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=22,
         depth=1,
         type='class',
         name='ColumnInfo',
         text='\n'
              '    def __init__(self, table_name=None, column_name=None, '
              'data_type=None, column_default=None,\n'
              '                 is_nullable=None, '
              'character_maximum_length=None, numeric_precision=None,\n'
              '                 numeric_scale=None, '
              'numeric_precision_radix=None):\n'
              '        self.table_name = table_name\n'
              '        self.column_name = column_name\n'
              '        self.data_type = data_type\n'
              '        self.column_default = column_default\n'
              '        self.is_nullable = is_nullable\n'
              '        self.character_maximum_length = '
              'character_maximum_length\n'
              '        self.numeric_precision = numeric_precision\n'
              '        self.numeric_scale = numeric_scale\n'
              '        self.numeric_precision_radix = numeric_precision_radix\n')

Fragment(uuid='16c418d8-6d72-4714-8342-4103b5044e4e',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=23,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, table_name=None, column_name=None, '
              'data_type=None, column_default=None,\n'
              '                 is_nullable=None, '
              'character_maximum_length=None, numeric_precision=None,\n'
              '                 numeric_scale=None, '
              'numeric_precision_radix=None):\n'
              '        self.table_name = table_name\n'
              '        self.column_name = column_name\n'
              '        self.data_type = data_type\n'
              '        self.column_default = column_default\n'
              '        self.is_nullable = is_nullable\n'
              '        self.character_maximum_length = '
              'character_maximum_length\n'
              '        self.numeric_precision = numeric_precision\n'
              '        self.numeric_scale = numeric_scale\n'
              '        self.numeric_precision_radix = numeric_precision_radix')

Fragment(uuid='c9827a39-8bf2-4fc0-8487-ccc3ce22f60b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def load_information_schema(self, row):\n'
              '        """ Loads column information from a row selected from '
              'information_schema.columns table\n'
              '        """\n'
              '        for name in self.__slots__:\n'
              '            setattr(self, name, row[name])\n')

Fragment(uuid='2967c652-db53-4f94-afea-afd86b222edb',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=35,
         depth=1,
         type='class',
         name='ColumnInfo',
         text='\n'
              '    def load_information_schema(self, row):\n'
              '        """ Loads column information from a row selected from '
              'information_schema.columns table\n'
              '        """\n'
              '        for name in self.__slots__:\n'
              '            setattr(self, name, row[name])\n')

Fragment(uuid='22adfd1e-3c20-4f07-b071-51a43380cdeb',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=36,
         depth=3,
         type='function',
         name='load_information_schema',
         text='def load_information_schema(self, row):\n'
              '        """ Loads column information from a row selected from '
              'information_schema.columns table\n'
              '        """\n'
              '        for name in self.__slots__:\n'
              '            setattr(self, name, row[name])')

Fragment(uuid='57b1dd44-eb6f-4907-ad32-b711a3815e5e',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=37,
         depth=6,
         type='documentation',
         name='',
         text=' Loads column information from a row selected from '
              'information_schema.columns table\n'
              '        ')

Fragment(uuid='a5498e92-697b-4a58-b6fe-d1caf2960343',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              '        name_value_list = [(name, getattr(self, name)) for name '
              'in self.__slots__]\n'
              "        return '%s(%s)' % (\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in name_value_list\n'
              '                if value is not None))\n'
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='975f7c05-5a16-4a56-b68d-878540a22218',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=41,
         depth=1,
         type='class',
         name='ColumnInfo',
         text='\n'
              '    def __repr__(self):\n'
              '        name_value_list = [(name, getattr(self, name)) for name '
              'in self.__slots__]\n'
              "        return '%s(%s)' % (\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in name_value_list\n'
              '                if value is not None))\n'
              '\n'
              '    __str__ = __repr__')

Fragment(uuid='ae1d26c9-dc37-47a7-b5ab-82006020ca5b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=42,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              '        name_value_list = [(name, getattr(self, name)) for name '
              'in self.__slots__]\n'
              "        return '%s(%s)' % (\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(\n"
              "                '%s=%r' % (name, value)\n"
              '                for name, value in name_value_list\n'
              '                if value is not None))')

Fragment(uuid='45bb113a-a102-489f-b53f-2b6a11098d93',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=52,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class '
              'DatabaseInspector(postgresql_database.DatabaseAbstraction):\n')

Fragment(uuid='1f5e8478-1668-4d0c-8df6-20d7f7ec3d54',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=54,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='class '
              'DatabaseInspector(postgresql_database.DatabaseAbstraction):\n')

Fragment(uuid='3244ee70-47ad-404a-a38f-8f0fd2ab59aa',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=55,
         depth=0,
         type='module',
         name='',
         text='\n'
              "    def __init__(self, primary_key_column_name_set=('id',), "
              'primary_key_columns={}):\n'
              '        """ Database inspector\n'
              '        \n'
              '        Inspects an existing PostgreSQL database and builds up '
              'the database model classes runtime.\n'
              '        \n'
              '        primary_key_column_name_set: set of primary key column '
              "names, defaults to ('id', )\n"
              '        \n'
              '        primary_key_columns: primary key names by table: '
              '{table_name: primary_key_column_name_set}\n'
              '        \n'
              '        """\n'
              '        postgresql_database.DatabaseAbstraction.__init__(self)\n'
              '\n'
              '        self.primary_key_column_name_set = '
              'primary_key_column_name_set\n'
              '        self.primary_key_columns = primary_key_c')

Fragment(uuid='d4f1fe90-0ced-4617-8a90-bbdd7bd778c6',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=55,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              "    def __init__(self, primary_key_column_name_set=('id',), "
              'primary_key_columns={}):\n'
              '        """ Database inspector\n'
              '        \n'
              '        Inspects an existing PostgreSQL database and builds up '
              'the database model classes runtime.\n'
              '        \n'
              '        primary_key_column_name_set: set of primary key column '
              "names, defaults to ('id', )\n"
              '        \n'
              '        primary_key_columns: primary key names by table: '
              '{table_name: primary_key_column_name_set}\n'
              '        \n'
              '        """\n'
              '        postgresql_database.DatabaseAbstraction.__init__(self)\n'
              '\n'
              '        self.primary_key_column_name_set = '
              'primary_key_column_name_set\n'
              '        self.primary_key_columns = primary_key_c')

Fragment(uuid='071d4ab8-21d6-4b6a-ac3c-4f377cdcd571',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=56,
         depth=3,
         type='function',
         name='__init__',
         text="def __init__(self, primary_key_column_name_set=('id',), "
              'primary_key_columns={}):\n'
              '        """ Database inspector\n'
              '        \n'
              '        Inspects an existing PostgreSQL database and builds up '
              'the database model classes runtime.\n'
              '        \n'
              '        primary_key_column_name_set: set of primary key column '
              "names, defaults to ('id', )\n"
              '        \n'
              '        primary_key_columns: primary key names by table: '
              '{table_name: primary_key_column_name_set}\n'
              '        \n'
              '        """\n'
              '        postgresql_database.DatabaseAbstraction.__init__(self)\n'
              '\n'
              '        self.primary_key_column_name_set = '
              'primary_key_column_name_set\n'
              '        self.primary_key_columns = primary_key_col')

Fragment(uuid='946a729e-fd82-426b-b429-0b79a417d7e0',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=57,
         depth=6,
         type='documentation',
         name='',
         text=' Database inspector\n'
              '        \n'
              '        Inspects an existing PostgreSQL database and builds up '
              'the database model classes runtime.\n'
              '        \n'
              '        primary_key_column_name_set: set of primary key column '
              "names, defaults to ('id', )\n"
              '        \n'
              '        primary_key_columns: primary key names by table: '
              '{table_name: primary_key_column_name_set}\n'
              '        \n'
              '        ')

Fragment(uuid='f457d6c0-a8e6-416f-b453-ebe6ed84d0c9',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='olumns\n'
              '\n'
              '        self.COLUMN_FACTORY_MAP = {\n'
              "            'bigint': self.define_bigint_column,\n"
              "            'boolean': self.define_boolean_column,\n"
              "            'character varying': self.define_varchar_column,\n"
              "            'date': self.define_date_column,\n"
              "            'integer': self.define_integer_column,\n"
              "            'real': self.define_real_column,\n"
              "            'double precision': self.define_double_column,\n"
              "            'numeric': self.define_numeric_column,\n"
              "            'text': self.define_text_column,\n"
              "            'timestamp without time zone': "
              'self.define_timestamp_column,\n'
              "            'tsvector': self.define_tsvector_column,\n"
              '        }\n')

Fragment(uuid='4ac40d52-92bf-4b85-8071-f708d9b1e9b6',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=69,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='olumns\n'
              '\n'
              '        self.COLUMN_FACTORY_MAP = {\n'
              "            'bigint': self.define_bigint_column,\n"
              "            'boolean': self.define_boolean_column,\n"
              "            'character varying': self.define_varchar_column,\n"
              "            'date': self.define_date_column,\n"
              "            'integer': self.define_integer_column,\n"
              "            'real': self.define_real_column,\n"
              "            'double precision': self.define_double_column,\n"
              "            'numeric': self.define_numeric_column,\n"
              "            'text': self.define_text_column,\n"
              "            'timestamp without time zone': "
              'self.define_timestamp_column,\n'
              "            'tsvector': self.define_tsvector_column,\n"
              '        }\n')

Fragment(uuid='f7640959-7063-4857-9ae5-78a8a608ca59',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=69,
         depth=3,
         type='function',
         name='__init__',
         text='umns\n'
              '\n'
              '        self.COLUMN_FACTORY_MAP = {\n'
              "            'bigint': self.define_bigint_column,\n"
              "            'boolean': self.define_boolean_column,\n"
              "            'character varying': self.define_varchar_column,\n"
              "            'date': self.define_date_column,\n"
              "            'integer': self.define_integer_column,\n"
              "            'real': self.define_real_column,\n"
              "            'double precision': self.define_double_column,\n"
              "            'numeric': self.define_numeric_column,\n"
              "            'text': self.define_text_column,\n"
              "            'timestamp without time zone': "
              'self.define_timestamp_column,\n'
              "            'tsvector': self.define_tsvector_column,\n"
              '        }')

Fragment(uuid='c983e5e6-a18f-4d0c-b99b-1522b3d9c64c',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=81,
         depth=9,
         type='documentation',
         name='',
         text='timestamp without time zone')

Fragment(uuid='eb09399e-86fb-4ea0-89af-49c7bf1fc9ce',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=84,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def inspect(self, dsn, database_class_name):\n'
              '        """ Inspects a database and returns database model '
              'class\n'
              '        \n'
              '        You can use the pretty_format_class() class method on '
              'the database model class returned\n'
              '        to generate source code for the model.\n'
              '        \n'
              '        """\n'
              '        with self.session(dsn):\n'
              '            table_class_list = self.inspect_tables()\n'
              '\n'
              '        class_dict = {}\n'
              '        for table_class in table_class_list:\n'
              '            assert issubclass(table_class, table.Table)\n'
              '            class_dict[table_class._table_name] = '
              'table_class()\n'
              '\n'
              '        database_class = type(database_class_name, '
              '(database.Database,), class_dict)\n'
              '        assert issubclass(database_class, database.Database)\n'
              '\n'
              '        return database_class\n')

Fragment(uuid='c20c107c-cf61-4c74-aa0c-35e17bb55d69',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=84,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def inspect(self, dsn, database_class_name):\n'
              '        """ Inspects a database and returns database model '
              'class\n'
              '        \n'
              '        You can use the pretty_format_class() class method on '
              'the database model class returned\n'
              '        to generate source code for the model.\n'
              '        \n'
              '        """\n'
              '        with self.session(dsn):\n'
              '            table_class_list = self.inspect_tables()\n'
              '\n'
              '        class_dict = {}\n'
              '        for table_class in table_class_list:\n'
              '            assert issubclass(table_class, table.Table)\n'
              '            class_dict[table_class._table_name] = '
              'table_class()\n'
              '\n'
              '        database_class = type(database_class_name, '
              '(database.Database,), class_dict)\n'
              '        assert issubclass(database_class, database.Database)\n'
              '\n'
              '        return database_class\n')

Fragment(uuid='de46fe2c-bcea-45a0-91ed-961be57b5fc0',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=85,
         depth=3,
         type='function',
         name='inspect',
         text='def inspect(self, dsn, database_class_name):\n'
              '        """ Inspects a database and returns database model '
              'class\n'
              '        \n'
              '        You can use the pretty_format_class() class method on '
              'the database model class returned\n'
              '        to generate source code for the model.\n'
              '        \n'
              '        """\n'
              '        with self.session(dsn):\n'
              '            table_class_list = self.inspect_tables()\n'
              '\n'
              '        class_dict = {}\n'
              '        for table_class in table_class_list:\n'
              '            assert issubclass(table_class, table.Table)\n'
              '            class_dict[table_class._table_name] = '
              'table_class()\n'
              '\n'
              '        database_class = type(database_class_name, '
              '(database.Database,), class_dict)\n'
              '        assert issubclass(database_class, database.Database)\n'
              '\n'
              '        return database_class')

Fragment(uuid='9a4be196-b297-494d-ad6e-be925b6dc40d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=86,
         depth=6,
         type='documentation',
         name='',
         text=' Inspects a database and returns database model class\n'
              '        \n'
              '        You can use the pretty_format_class() class method on '
              'the database model class returned\n'
              '        to generate source code for the model.\n'
              '        \n'
              '        ')

Fragment(uuid='8d40c663-7fa9-48de-ba4a-c96e971de51d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=104,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def inspect_tables(self):\n'
              '        """ Inspects database tables and returns list of table '
              'definition classes\n'
              '        """\n'
              '        raise NotImplementedError()\n')

Fragment(uuid='e7adb930-494b-424f-988b-d88ee720a639',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=104,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def inspect_tables(self):\n'
              '        """ Inspects database tables and returns list of table '
              'definition classes\n'
              '        """\n'
              '        raise NotImplementedError()\n')

Fragment(uuid='26d4dc63-68ad-426e-90b0-1e98220ae1f1',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=105,
         depth=3,
         type='function',
         name='inspect_tables',
         text='def inspect_tables(self):\n'
              '        """ Inspects database tables and returns list of table '
              'definition classes\n'
              '        """\n'
              '        raise NotImplementedError()')

Fragment(uuid='4dd3188c-71ff-4c61-a51b-f44524eea608',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=106,
         depth=6,
         type='documentation',
         name='',
         text=' Inspects database tables and returns list of table definition '
              'classes\n'
              '        ')

Fragment(uuid='a8c38557-1c24-460f-81e5-f4751e712bc4',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=109,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def convert_table_name_to_python(self, table_name):\n'
              '        """ Converts underscore table name used in the database '
              'to CapitalizedWords format\n'
              '        """\n'
              "        return ''.join(word.capitalize() for word in "
              "table_name.split('_'))\n")

Fragment(uuid='9af77b2d-d794-465e-8a26-7708e1e51e2b',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=109,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def convert_table_name_to_python(self, table_name):\n'
              '        """ Converts underscore table name used in the database '
              'to CapitalizedWords format\n'
              '        """\n'
              "        return ''.join(word.capitalize() for word in "
              "table_name.split('_'))\n")

Fragment(uuid='8f8c1115-a721-47ee-949c-a62466680bab',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=110,
         depth=3,
         type='function',
         name='convert_table_name_to_python',
         text='def convert_table_name_to_python(self, table_name):\n'
              '        """ Converts underscore table name used in the database '
              'to CapitalizedWords format\n'
              '        """\n'
              "        return ''.join(word.capitalize() for word in "
              "table_name.split('_'))")

Fragment(uuid='b08ea7af-35de-4a07-8656-820df440f3ce',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=111,
         depth=6,
         type='documentation',
         name='',
         text=' Converts underscore table name used in the database to '
              'CapitalizedWords format\n'
              '        ')

Fragment(uuid='f99a796e-ee1c-4e87-afc2-b474f3095155',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=114,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def inspect_tables(self):\n'
              '\n'
              "        sql = '''\n"
              'SELECT * \n'
              'FROM information_schema.columns \n'
              "WHERE table_schema = 'public'\n"
              'ORDER BY table_name, ordinal_position;\n'
              "'''\n"
              '\n'
              '        get_column_factory = self.COLUMN_FACTORY_MAP.get\n'
              '\n'
              '        table_class_map = {}\n')

Fragment(uuid='dd42b38e-f0d0-4f69-bb6e-a9f5e42b2c9d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=114,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def inspect_tables(self):\n'
              '\n'
              "        sql = '''\n"
              'SELECT * \n'
              'FROM information_schema.columns \n'
              "WHERE table_schema = 'public'\n"
              'ORDER BY table_name, ordinal_position;\n'
              "'''\n"
              '\n'
              '        get_column_factory = self.COLUMN_FACTORY_MAP.get\n'
              '\n'
              '        table_class_map = {}\n')

Fragment(uuid='ed8603a3-3458-4053-8955-380511f0c147',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=115,
         depth=3,
         type='function',
         name='inspect_tables',
         text='def inspect_tables(self):\n'
              '\n'
              "        sql = '''\n"
              'SELECT * \n'
              'FROM information_schema.columns \n'
              "WHERE table_schema = 'public'\n"
              'ORDER BY table_name, ordinal_position;\n'
              "'''\n"
              '\n'
              '        get_column_factory = self.COLUMN_FACTORY_MAP.get\n'
              '\n'
              '        table_class_map = {}\n')

Fragment(uuid='fe05c29c-921b-40a7-8aad-022cba065bea',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=117,
         depth=7,
         type='documentation',
         name='',
         text='\n'
              'SELECT * \n'
              'FROM information_schema.columns \n'
              "WHERE table_schema = 'public'\n"
              'ORDER BY table_name, ordinal_position;\n')

Fragment(uuid='17e9600a-8ebb-4f57-b506-d76f7b41a623',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=127,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor() as cursor:\n')

Fragment(uuid='8673bce2-deec-40ef-bb30-259a052076b0',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=127,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='        with self.cursor() as cursor:\n')

Fragment(uuid='02a78aae-5c09-4dc0-a38b-91f71be9b15f',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=127,
         depth=3,
         type='function',
         name='inspect_tables',
         text='        with self.cursor() as cursor:\n')

Fragment(uuid='f8f44aa1-fa6c-41c1-9135-1131f51d3e18',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=128,
         depth=0,
         type='module',
         name='',
         text='            for row in self.execute_and_fetch_dict_iter(cursor, '
              'sql):\n'
              '\n'
              '                column_info = ColumnInfo()\n'
              '                column_info.load_information_schema(row)\n'
              '\n'
              '                table_class = '
              'table_class_map.get(column_info.table_name)\n')

Fragment(uuid='4e87d616-785c-466c-b999-03724f5e71b3',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=128,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='            for row in self.execute_and_fetch_dict_iter(cursor, '
              'sql):\n'
              '\n'
              '                column_info = ColumnInfo()\n'
              '                column_info.load_information_schema(row)\n'
              '\n'
              '                table_class = '
              'table_class_map.get(column_info.table_name)\n')

Fragment(uuid='d0827757-40c0-42b5-9a81-3f8925bf051d',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=128,
         depth=3,
         type='function',
         name='inspect_tables',
         text='            for row in self.execute_and_fetch_dict_iter(cursor, '
              'sql):\n'
              '\n'
              '                column_info = ColumnInfo()\n'
              '                column_info.load_information_schema(row)\n'
              '\n'
              '                table_class = '
              'table_class_map.get(column_info.table_name)\n')

Fragment(uuid='57e3b03e-4b65-4bdc-adf5-28e7ef1a52b9',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=134,
         depth=0,
         type='module',
         name='',
         text='                if table_class is None:\n'
              '                    class_name = '
              'str(self.convert_table_name_to_python(column_info.table_name))\n'
              '                    table_class = type(class_name, '
              '(table.Table,), {})\n'
              '                    table_class._table_name = '
              'column_info.table_name\n'
              '                    table_class_map[column_info.table_name] = '
              'table_class\n'
              '\n'
              '                table_pk_columns = '
              'self.primary_key_columns.get(column_info.column_name, ())\n')

Fragment(uuid='af3cf48b-b9ec-4d6f-b6da-30d54e2ad762',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=134,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='                if table_class is None:\n'
              '                    class_name = '
              'str(self.convert_table_name_to_python(column_info.table_name))\n'
              '                    table_class = type(class_name, '
              '(table.Table,), {})\n'
              '                    table_class._table_name = '
              'column_info.table_name\n'
              '                    table_class_map[column_info.table_name] = '
              'table_class\n'
              '\n'
              '                table_pk_columns = '
              'self.primary_key_columns.get(column_info.column_name, ())\n')

Fragment(uuid='1f5be99f-8288-43a9-a65e-3ea5c0cb5d17',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=134,
         depth=3,
         type='function',
         name='inspect_tables',
         text='                if table_class is None:\n'
              '                    class_name = '
              'str(self.convert_table_name_to_python(column_info.table_name))\n'
              '                    table_class = type(class_name, '
              '(table.Table,), {})\n'
              '                    table_class._table_name = '
              'column_info.table_name\n'
              '                    table_class_map[column_info.table_name] = '
              'table_class\n'
              '\n'
              '                table_pk_columns = '
              'self.primary_key_columns.get(column_info.column_name, ())\n')

Fragment(uuid='74784dda-1d1c-479b-adfc-6e7c7392e1d1',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=141,
         depth=0,
         type='module',
         name='',
         text='                if (column_info.column_name in '
              'self.primary_key_column_name_set or\n'
              '                        column_info.column_name in '
              'table_pk_columns):\n'
              '                    column_factory = '
              'self.define_primary_key_column\n'
              '                else:\n'
              '                    column_factory = get_column_factory(\n'
              '                        column_info.data_type, '
              'self.define_custom_column)\n'
              '\n'
              '                try:\n'
              '                    column_definition = '
              'column_factory(column_info)\n'
              '                except ValueError:\n'
              '                    util.log(\n'
              "                        'WARNING: Skipping column due to "
              "unparsable column info: %r' % column_info)\n"
              '                    continue\n'
              '                assert isinstance(column_definition, '
              'column.BaseColumn)\n'
              '\n'
              '                setattr(table_class, column_info.column_name, '
              'column_definition)\n'
              '\n'
              '        return table_class_map.values()\n')

Fragment(uuid='20993e25-b4f0-4a38-8c39-1114e907e0ff',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=141,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='                if (column_info.column_name in '
              'self.primary_key_column_name_set or\n'
              '                        column_info.column_name in '
              'table_pk_columns):\n'
              '                    column_factory = '
              'self.define_primary_key_column\n'
              '                else:\n'
              '                    column_factory = get_column_factory(\n'
              '                        column_info.data_type, '
              'self.define_custom_column)\n'
              '\n'
              '                try:\n'
              '                    column_definition = '
              'column_factory(column_info)\n'
              '                except ValueError:\n'
              '                    util.log(\n'
              "                        'WARNING: Skipping column due to "
              "unparsable column info: %r' % column_info)\n"
              '                    continue\n'
              '                assert isinstance(column_definition, '
              'column.BaseColumn)\n'
              '\n'
              '                setattr(table_class, column_info.column_name, '
              'column_definition)\n'
              '\n'
              '        return table_class_map.values()\n')

Fragment(uuid='14ea7061-c82b-4655-93bc-0b5ae788929e',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=141,
         depth=3,
         type='function',
         name='inspect_tables',
         text='                if (column_info.column_name in '
              'self.primary_key_column_name_set or\n'
              '                        column_info.column_name in '
              'table_pk_columns):\n'
              '                    column_factory = '
              'self.define_primary_key_column\n'
              '                else:\n'
              '                    column_factory = get_column_factory(\n'
              '                        column_info.data_type, '
              'self.define_custom_column)\n'
              '\n'
              '                try:\n'
              '                    column_definition = '
              'column_factory(column_info)\n'
              '                except ValueError:\n'
              '                    util.log(\n'
              "                        'WARNING: Skipping column due to "
              "unparsable column info: %r' % column_info)\n"
              '                    continue\n'
              '                assert isinstance(column_definition, '
              'column.BaseColumn)\n'
              '\n'
              '                setattr(table_class, column_info.column_name, '
              'column_definition)\n'
              '\n'
              '        return table_class_map.values()')

Fragment(uuid='2dd6fa98-b44c-439c-990f-f293a74c2896',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=152,
         depth=16,
         type='documentation',
         name='',
         text='WARNING: Skipping column due to unparsable column info: %r')

Fragment(uuid='f5a5f4a4-5d9c-4368-8f6c-fac88abd2563',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=159,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_custom_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Custom(\n'
              '            sql_type=column_info.data_type,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='a52c9811-9bbf-432d-b1cd-03a84e277318',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=159,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_custom_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Custom(\n'
              '            sql_type=column_info.data_type,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='0df1bc72-9c0e-4821-b140-19876de8c88e',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=160,
         depth=3,
         type='function',
         name='define_custom_column',
         text='def define_custom_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Custom(\n'
              '            sql_type=column_info.data_type,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='a5a268ad-b7e4-4226-ae83-a7f10404db61',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=167,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_primary_key_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              "        serial = 'nextval' in (column_info.column_default or "
              "'').lower()\n"
              '        column_definition = column.PrimaryKey(serial=serial)\n'
              '        return column_definition\n')

Fragment(uuid='5925169b-31aa-45a4-a1cc-6d8f7f858c2c',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=167,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_primary_key_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              "        serial = 'nextval' in (column_info.column_default or "
              "'').lower()\n"
              '        column_definition = column.PrimaryKey(serial=serial)\n'
              '        return column_definition\n')

Fragment(uuid='0c7a6d77-dee0-475b-88cd-a061a4f94af4',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=168,
         depth=3,
         type='function',
         name='define_primary_key_column',
         text='def define_primary_key_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              "        serial = 'nextval' in (column_info.column_default or "
              "'').lower()\n"
              '        column_definition = column.PrimaryKey(serial=serial)\n'
              '        return column_definition')

Fragment(uuid='1379ce2a-63b9-4bed-8ecd-8170c4416d10',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=173,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_bigint_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Integer(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='09f2f012-fc7b-4114-9b59-16658c4c94d9',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=173,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_bigint_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Integer(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='646ad6db-c851-4f27-bf02-8ee52eff6e6e',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=174,
         depth=3,
         type='function',
         name='define_bigint_column',
         text='def define_bigint_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Integer(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='98a9eff2-1b9e-4d8b-906e-f7c3d6a1294a',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=180,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_boolean_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Boolean(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='3c5dac38-4f04-4245-b287-e4e2a02a98c1',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=180,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_boolean_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Boolean(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='2b90ca8b-3160-4e74-889c-b4db291687d6',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=181,
         depth=3,
         type='function',
         name='define_boolean_column',
         text='def define_boolean_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Boolean(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='0e5034cd-de49-4105-bea7-7a9b3b35d6e1',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=187,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_varchar_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='4da9ee7f-daa4-432f-a32f-fc2ea1ed5056',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=187,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_varchar_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='2eb21436-4c43-4744-bb0c-ec18ae9990d6',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=188,
         depth=3,
         type='function',
         name='define_varchar_column',
         text='def define_varchar_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='5d70d495-7c99-414a-9a3d-a86d65d9a970',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=194,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_date_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Date(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='725fd609-706b-4582-a937-78b0ea790213',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=194,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_date_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Date(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='2e2a1bcc-8559-4ea1-aed7-833fda1daf06',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=195,
         depth=3,
         type='function',
         name='define_date_column',
         text='def define_date_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Date(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='5d9db934-939f-45bc-8582-f744a9963ebf',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=201,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_integer_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if isinstance(column_info.column_default, str):\n'
              '            default = '
              'function.Custom(column_info.column_default)\n'
              '        else:\n'
              '            default = column_info.column_default\n'
              '        column_definition = column.Integer(\n'
              '            default=default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='7532c5e3-238f-4d41-b054-128bd8366b42',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=201,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_integer_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if isinstance(column_info.column_default, str):\n'
              '            default = '
              'function.Custom(column_info.column_default)\n'
              '        else:\n'
              '            default = column_info.column_default\n'
              '        column_definition = column.Integer(\n'
              '            default=default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='edad99bd-8d2d-447e-924a-4bd427f9aaa2',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=202,
         depth=3,
         type='function',
         name='define_integer_column',
         text='def define_integer_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if isinstance(column_info.column_default, str):\n'
              '            default = '
              'function.Custom(column_info.column_default)\n'
              '        else:\n'
              '            default = column_info.column_default\n'
              '        column_definition = column.Integer(\n'
              '            default=default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='a6364889-cd4f-44ca-b8a2-10afd3a7eff5',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=212,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_real_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=False,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='ab2d6c70-99ef-43c0-8145-5fff26b07c76',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=212,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_real_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=False,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='83e72d16-9b68-47fc-a8f9-49c11d973f15',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=213,
         depth=3,
         type='function',
         name='define_real_column',
         text='def define_real_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=False,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='6eee8b27-c644-4607-b8fc-22889a3e44f0',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=220,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_double_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=True,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='58b6f7c6-b33a-460e-afab-723759ce90ec',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=220,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_double_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=True,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='a541c417-1eb1-4435-8db8-44fc8118ebe3',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=221,
         depth=3,
         type='function',
         name='define_double_column',
         text='def define_double_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Float(\n'
              '            double=True,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='0c270d46-d00d-4f21-894a-5f37813b513a',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=228,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_numeric_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if column_info.numeric_precision_radix != 10:\n'
              '            raise NotImplementedError()\n'
              '        if not column_info.numeric_scale:\n'
              '            column_definition = column.Integer(\n'
              '                digits=column_info.numeric_precision,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        else:\n'
              '            assert column_info.numeric_precision is not None\n'
              '            column_definition = column.Decimal(\n'
              '                precision=column_info.numeric_precision,\n'
              '                scale=column_info.numeric_scale,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='8314f445-6157-4bbd-a087-f55a9dc05289',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=228,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_numeric_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if column_info.numeric_precision_radix != 10:\n'
              '            raise NotImplementedError()\n'
              '        if not column_info.numeric_scale:\n'
              '            column_definition = column.Integer(\n'
              '                digits=column_info.numeric_precision,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        else:\n'
              '            assert column_info.numeric_precision is not None\n'
              '            column_definition = column.Decimal(\n'
              '                precision=column_info.numeric_precision,\n'
              '                scale=column_info.numeric_scale,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='322c6f63-3f87-4954-88f6-adcc0de76e53',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=229,
         depth=3,
         type='function',
         name='define_numeric_column',
         text='def define_numeric_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        if column_info.numeric_precision_radix != 10:\n'
              '            raise NotImplementedError()\n'
              '        if not column_info.numeric_scale:\n'
              '            column_definition = column.Integer(\n'
              '                digits=column_info.numeric_precision,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        else:\n'
              '            assert column_info.numeric_precision is not None\n'
              '            column_definition = column.Decimal(\n'
              '                precision=column_info.numeric_precision,\n'
              '                scale=column_info.numeric_scale,\n'
              '                default=column_info.column_default,\n'
              '                null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='52c4d3ca-4424-4ddf-9cad-674bbd433ea4',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=246,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_text_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='b123c131-5c4a-4bd3-8f6d-eb8abcf6b1a3',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=246,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_text_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='66180f1d-21b8-401c-84a6-cbef5ec3fd7a',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=247,
         depth=3,
         type='function',
         name='define_text_column',
         text='def define_text_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Text(\n'
              '            maxlength=column_info.character_maximum_length,\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='0ab2a8d4-685b-42db-9f88-0e18042e4993',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=254,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_timestamp_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Datetime(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='fbc33c59-10aa-4fa3-8fc5-ff12a3fcd06f',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=254,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_timestamp_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Datetime(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition\n')

Fragment(uuid='944e2fca-57e3-418b-9554-e61c2b8807d6',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=255,
         depth=3,
         type='function',
         name='define_timestamp_column',
         text='def define_timestamp_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = column.Datetime(\n'
              '            default=column_info.column_default,\n'
              '            null=column_info.is_nullable)\n'
              '        return column_definition')

Fragment(uuid='5e4b1f16-8cdd-4e16-980a-aeebc60d32ed',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=261,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def define_tsvector_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = '
              'column.SearchDocument(implicit=False)\n'
              '        return column_definition\n')

Fragment(uuid='2103a415-2543-4c1c-b06d-f61a6de30ac4',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=261,
         depth=1,
         type='class',
         name='DatabaseInspector',
         text='\n'
              '    def define_tsvector_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = '
              'column.SearchDocument(implicit=False)\n'
              '        return column_definition')

Fragment(uuid='a6ed5234-1782-4e64-8a5a-85af780fdfa1',
         path='/lib/dblayer/backend/postgresql/inspector.py',
         lineno=262,
         depth=3,
         type='function',
         name='define_tsvector_column',
         text='def define_tsvector_column(self, column_info):\n'
              '        assert isinstance(column_info, ColumnInfo)\n'
              '        column_definition = '
              'column.SearchDocument(implicit=False)\n'
              '        return column_definition')

Fragment(uuid='14c53905-1d7a-4c58-ae7f-8a8ab89cc147',
         path='/lib/dblayer/backend/postgresql/record.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# noinspection PyUnresolvedReferences\n'
              'from dblayer.backend.base.record import Record\n')

Fragment(uuid='751bd178-4ab3-4217-959b-dd02f45b2ed4',
         path='/lib/dblayer/backend/postgresql/record.py',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# noinspection PyUnresolvedReferences')

Fragment(uuid='26ea09c2-e2d6-4a3f-80bc-4594559dbd98',
         path='/lib/dblayer/backend/postgresql/record.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/backend/postgresql/record.py\n'
              '  Variables and usages: Record backend base dblayer record\n')

Fragment(uuid='66ff2a0d-d16e-4840-9e63-d550a4c247ea',
         path='/lib/dblayer/backend/postgresql/record.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='3f392d32-55ca-408b-a4a6-f53f3412227f',
         path='/lib/dblayer/backend/postgresql/record.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='a47a62f8-4335-461e-8679-2eddbed8e498',
         path='/lib/dblayer/constants.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Constants\n'
              '"""\n'
              '\n'
              'import os\n'
              '\n'
              '# Enables various sanity checks useful for development\n'
              "DEBUG = int(os.environ.get('DBLAYER_DEBUG', 0))\n"
              '\n'
              '# Encoding used to convert strings to unicode whenever needed\n'
              "ENCODING = 'utf8'\n"
              '\n'
              '# Full pathname of the code generator template directory\n'
              'GENERATOR_TEMPLATE_DIRECTORY_PATH = os.path.join(\n'
              "    os.path.dirname(__file__), 'generator', 'template')\n"
              '\n'
              '# Range of database ID values (actual values are chosen '
              'randomly)\n'
              'DATABASE_ID_RANGE = (2 ** 62, 2 ** 63)\n'
              '\n'
              '# Number of rows should be loaded from the database at once\n'
              'CURSOR_ARRAYSIZE = 12')

Fragment(uuid='e44ca622-f205-498e-8594-56d0b9d86aa1',
         path='/lib/dblayer/constants.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/constants.py\n'
              '  Classes: NA\n'
              '  Methods: __repr__\n'
              '  Variables and usages: CURSOR_ARRAYSIZE DATABASE_ID_RANGE '
              'DEBUG ENCODING GENERATOR_TEMPLATE_DIRECTORY_PATH INNER_JOIN '
              'JOIN_TYPES LEFT_JOIN LOG_SQL_ANALYSIS LOG_SQL_RESULT_ROWS '
              'LOG_SQL_STATEMENTS MAX_INSERT_RETRY_COUNT PROFILE_QUERIES '
              'dirname environ join path\n')

Fragment(uuid='94c083f2-1647-447a-a155-577f481c5d67',
         path='/lib/dblayer/constants.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='0c855526-7738-4113-b7f9-4d078f209136',
         path='/lib/dblayer/constants.py',
         lineno=6,
         depth=0,
         type='documentation',
         name='',
         text='# Enables various sanity checks useful for development')

Fragment(uuid='c7686962-bbef-4082-9a49-1714ad84436a',
         path='/lib/dblayer/constants.py',
         lineno=9,
         depth=0,
         type='documentation',
         name='',
         text='# Encoding used to convert strings to unicode whenever needed')

Fragment(uuid='e657911b-e554-41c4-abd6-16bed5a034e9',
         path='/lib/dblayer/constants.py',
         lineno=12,
         depth=0,
         type='documentation',
         name='',
         text='# Full pathname of the code generator template directory')

Fragment(uuid='409e10e1-107e-460f-96c8-239dcf222fa1',
         path='/lib/dblayer/constants.py',
         lineno=16,
         depth=0,
         type='documentation',
         name='',
         text='# Range of database ID values (actual values are chosen '
              'randomly)')

Fragment(uuid='0699daf1-b1be-414f-a5ec-8e923426466b',
         path='/lib/dblayer/constants.py',
         lineno=19,
         depth=0,
         type='documentation',
         name='',
         text='# Number of rows should be loaded from the database at once')

Fragment(uuid='25535ec0-ef78-456b-8600-d9fc5fcff839',
         path='/lib/dblayer/constants.py',
         lineno=20,
         depth=0,
         type='module',
         name='',
         text='8\n'
              '\n'
              '# Logging\n'
              'LOG_SQL_STATEMENTS = DEBUG and True\n'
              'LOG_SQL_RESULT_ROWS = DEBUG and False\n'
              '\n'
              '# Log analysis of SQL statements before executing them\n'
              'LOG_SQL_ANALYSIS = DEBUG and True\n'
              '\n'
              '# Measure the wall clock execution time of queries\n'
              'PROFILE_QUERIES = DEBUG and True\n'
              '\n'
              '# Maximum number of retries on a failing single row INSERT '
              'query\n'
              'MAX_INSERT_RETRY_COUNT = 100\n'
              '\n'
              '# Join types\n'
              "INNER_JOIN = 'INNER JOIN'\n"
              "LEFT_JOIN = 'LEFT JOIN'\n"
              'JOIN_TYPES = (INNER_JOIN, LEFT_JOIN)\n'
              '\n'
              '\n'
              '# Undefined singleton, used to detect missing parameters\n'
              '# while allowing None as a valid value\n'
              'class NA:\n')

Fragment(uuid='119f3898-606d-4e1c-8413-de1b320e180d',
         path='/lib/dblayer/constants.py',
         lineno=26,
         depth=0,
         type='documentation',
         name='',
         text='# Log analysis of SQL statements before executing them')

Fragment(uuid='20ccde79-8155-4c24-81e2-9917bd4b2fba',
         path='/lib/dblayer/constants.py',
         lineno=29,
         depth=0,
         type='documentation',
         name='',
         text='# Measure the wall clock execution time of queries')

Fragment(uuid='9e385fc1-e342-4815-923b-ea2f18f76622',
         path='/lib/dblayer/constants.py',
         lineno=32,
         depth=0,
         type='documentation',
         name='',
         text='# Maximum number of retries on a failing single row INSERT query')

Fragment(uuid='2cfd1311-516d-4d52-8d83-5ff8af6999a4',
         path='/lib/dblayer/constants.py',
         lineno=41,
         depth=0,
         type='documentation',
         name='',
         text='# Undefined singleton, used to detect missing parameters')

Fragment(uuid='e9f9897a-63fa-41f0-9c73-683537cb9cdc',
         path='/lib/dblayer/constants.py',
         lineno=42,
         depth=0,
         type='documentation',
         name='',
         text='# while allowing None as a valid value')

Fragment(uuid='49927975-e068-4ee6-9f30-16eeae2e85e0',
         path='/lib/dblayer/constants.py',
         lineno=43,
         depth=1,
         type='class',
         name='NA',
         text='class NA:\n'
              '    def __repr__(self):\n'
              "        return 'NA'\n"
              '\n'
              '    __str__ = __repr__')

Fragment(uuid='bc5c8b5f-f802-4a5a-9b17-0ef30d252838',
         path='/lib/dblayer/constants.py',
         lineno=44,
         depth=0,
         type='module',
         name='',
         text='    def __repr__(self):\n'
              "        return 'NA'\n"
              '\n'
              '    __str__ = __repr__\n'
              '\n'
              '\n'
              'NA = NA()\n')

Fragment(uuid='eecc94b4-3613-4d0b-9a6d-4720852d6c8f',
         path='/lib/dblayer/constants.py',
         lineno=44,
         depth=3,
         type='function',
         name='__repr__',
         text="def __repr__(self):\n        return 'NA'")

Fragment(uuid='a608b89e-645b-4f29-93a4-1575f644c950',
         path='/lib/dblayer/generator/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Database abstraction layer generator\n"""\n')

Fragment(uuid='28421627-fedb-47d9-b958-70a280895e4d',
         path='/lib/dblayer/generator/__init__.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Database abstraction layer generator\n')

Fragment(uuid='4fc5943f-ef16-4d41-956d-e0270e3342dc',
         path='/lib/dblayer/generator/generator.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Database abstraction layer code generator\n'
              '"""\n'
              '\n'
              'import datetime\n'
              '\n'
              'import bottle\n'
              'from dblayer import constants\n')

Fragment(uuid='0a0db009-d2bf-4f94-9ae7-576857b88521',
         path='/lib/dblayer/generator/generator.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Database abstraction layer code generator\n')

Fragment(uuid='f6ca929f-9cdb-49ee-a077-38981bab705f',
         path='/lib/dblayer/generator/generator.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/generator/generator.py\n'
              '  Functions: generate\n'
              '  Classes: GeneratorOptions\n'
              '  Variables and usages: GENERATOR_TEMPLATE_DIRECTORY_PATH '
              'abstraction_class_name backend bottle constants create database '
              'datetime dblayer delete drop format fromlist insert join '
              'noescape options template template_lookup template_settings '
              'update\n')

Fragment(uuid='9c00e237-e0fd-48e5-b769-7c0a61f4dcdb',
         path='/lib/dblayer/generator/generator.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='7b465226-b9e2-46b2-9189-137adfff6908',
         path='/lib/dblayer/generator/generator.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='63a7e48b-d23d-4677-8f27-d0792272e591',
         path='/lib/dblayer/generator/generator.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='f7cc280a-9398-424a-b9e2-db75ad0d4d39',
         path='/lib/dblayer/generator/generator.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='17e1aebf-3caa-4c4e-ba90-488e065d9d5c',
         path='/lib/dblayer/generator/generator.py',
         lineno=8,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class GeneratorOptions:\n'
              '    """ Code generation options\n'
              '    """\n'
              '    # Generate code for the following operations only\n'
              '    insert = True\n'
              '    update = True\n'
              '    delete = True\n'
              '    create = True\n'
              '    drop = True\n')

Fragment(uuid='30769c7a-3dab-4b96-be17-0c6986d6cdf3',
         path='/lib/dblayer/generator/generator.py',
         lineno=10,
         depth=1,
         type='class',
         name='GeneratorOptions',
         text='class GeneratorOptions:\n'
              '    """ Code generation options\n'
              '    """\n'
              '    # Generate code for the following operations only\n'
              '    insert = True\n'
              '    update = True\n'
              '    delete = True\n'
              '    create = True\n'
              '    drop = True')

Fragment(uuid='9248170c-7c3a-4b3a-85c6-bd6014ef7fa5',
         path='/lib/dblayer/generator/generator.py',
         lineno=11,
         depth=4,
         type='documentation',
         name='',
         text=' Code generation options\n    ')

Fragment(uuid='3be79cd5-9612-4aca-9b8b-34a40cbb60dc',
         path='/lib/dblayer/generator/generator.py',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='# Generate code for the following operations only')

Fragment(uuid='5841c263-03f4-4b9d-8519-9cd99e896ddc',
         path='/lib/dblayer/generator/generator.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def generate(database, backend, abstraction_class_name, '
              'options=None):\n'
              '    """ Generates database abstraction layer code for the given '
              'database\n'
              '    model using the given database server specific backend '
              'module\n'
              '    """\n')

Fragment(uuid='4a53962f-8ad5-4f40-8476-2461d06a027d',
         path='/lib/dblayer/generator/generator.py',
         lineno=21,
         depth=1,
         type='function',
         name='generate',
         text='def generate(database, backend, abstraction_class_name, '
              'options=None):\n'
              '    """ Generates database abstraction layer code for the given '
              'database\n'
              '    model using the given database server specific backend '
              'module\n'
              '    """\n')

Fragment(uuid='ad857717-0c1e-48e7-b0ff-283ae61cceb1',
         path='/lib/dblayer/generator/generator.py',
         lineno=22,
         depth=4,
         type='documentation',
         name='',
         text=' Generates database abstraction layer code for the given '
              'database\n'
              '    model using the given database server specific backend '
              'module\n'
              '    ')

Fragment(uuid='4d383a91-ae40-41ee-86c4-27634b6a5312',
         path='/lib/dblayer/generator/generator.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text='    if options is None:\n'
              '        options = GeneratorOptions()\n'
              '    else:\n'
              '        assert isinstance(options, GeneratorOptions)\n'
              '\n'
              '    format = __import__(backend.__name__, '
              "fromlist=('format',)).format\n"
              '\n'
              "    return ''.join(bottle.template(\n"
              "        'database',\n"
              '        '
              'template_lookup=[constants.GENERATOR_TEMPLATE_DIRECTORY_PATH],\n'
              '        template_settings=dict(noescape=True),\n'
              '        constants=constants,\n'
              '        database=database,\n'
              '        backend=backend,\n'
              '        options=options,\n'
              '        format=format,\n'
              '        abstraction_class_name=abstraction_class_name,\n'
              '        now=datetime.datetime.now()))\n')

Fragment(uuid='8ece8630-b5d2-4c9a-9d31-149df3648579',
         path='/lib/dblayer/generator/generator.py',
         lineno=25,
         depth=1,
         type='function',
         name='generate',
         text='    if options is None:\n'
              '        options = GeneratorOptions()\n'
              '    else:\n'
              '        assert isinstance(options, GeneratorOptions)\n'
              '\n'
              '    format = __import__(backend.__name__, '
              "fromlist=('format',)).format\n"
              '\n'
              "    return ''.join(bottle.template(\n"
              "        'database',\n"
              '        '
              'template_lookup=[constants.GENERATOR_TEMPLATE_DIRECTORY_PATH],\n'
              '        template_settings=dict(noescape=True),\n'
              '        constants=constants,\n'
              '        database=database,\n'
              '        backend=backend,\n'
              '        options=options,\n'
              '        format=format,\n'
              '        abstraction_class_name=abstraction_class_name,\n'
              '        now=datetime.datetime.now()))')

Fragment(uuid='07a0cd9f-1f08-4a08-9898-988ec8da3818',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" {{abstraction_class_name}} - generated database abstraction '
              'layer\n'
              '\n'
              'Database model: {{database.__class__.__name__}}\n'
              'Backend server: {{backend.__name__}}\n'
              "Generated   on: {{now.isoformat(' ').rsplit('.', 1)[0]}}\n"
              '\n'
              'NOTE: It is a generated database abstraction layer. Please do '
              'not modify.\n'
              '      All your changes will be lost next time this code is '
              'generated!\n'
              '      Please add your code in a subclass.\n'
              '\n'
              '"""\n'
              '\n'
              'import time\n'
              '\n'
              'import dblayer\n'
              'from dblayer import constants, util\n'
              'from {{backe')

Fragment(uuid='fb0224e7-be7a-4c82-9c2a-28fad22a9ca3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text=' {{abstraction_class_name}} - generated database abstraction '
              'layer\n'
              '\n'
              'Database model: {{database.__class__.__name__}}\n'
              'Backend server: {{backend.__name__}}\n'
              "Generated   on: {{now.isoformat(' ').rsplit('.', 1)[0]}}\n"
              '\n'
              'NOTE: It is a generated database abstraction layer. Please do '
              'not modify.\n'
              '      All your changes will be lost next time this code is '
              'generated!\n'
              '      Please add your code in a subclass.\n'
              '\n')

Fragment(uuid='545768e5-04d9-4d95-b35f-138750f22b22',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/generator/template/database.tpl\n'
              '  Classes: '
              '{{abstraction_class_name}}(database.DatabaseAbstraction) '
              '{{table.__class__.__name__}}Record(record.Record)\n'
              '  Methods: __init__ add_{{table. add_{{table._name}} '
              'create_all_languages create_all_procedures create_all_tables '
              'create_all_triggers create_procedure_ create_structure '
              'create_table_ create_trigger_ delete_ delete_{{table._name}} '
              'dict drop_all_procedures drop_all_tables drop_all_triggers '
              'drop_procedure_ drop_structure drop_table_ drop_trigger_ find_ '
              'get_ get_{{table. get_{{table._name}} query_{{query_name}} '
              'truncate_ truncate_all_tables tuple update_ '
              'update_{{table._name}}\n'
              '  Variables and usages: Clauses DEBUG DataError '
              'DatabaseAbstraction DatabaseError Error IntegrityError '
              'InterfaceError InternalError LOG_SQL_ANALYSIS NA '
              'NotSupportedError OperationalError PROFILE_QUERIES '
              'ProgrammingError Record ValueError Warning _CONDITION_MAP '
              '_FIELD_LIST _GROUP_BY _HAVING_CONDITION_MAP _ORDER_BY_MAP '
              '_SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT '
              '_SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT '
              '_SQL_IDENTITY_INSERT_SAVEPOINT _TABLE_LIST _WHERE_CONDITION_MAP '
              '_column_default_map _column_list _column_name_list '
              '_condition_list _count _creatable _format _group_by _iter _list '
              '_name _nullable_column_name_set _order_by _primary_key '
              '_procedure_list _quoted_column_name_list _table_list '
              '_table_name _trigger_list _writable abstraction_class_name '
              'accessible accessible_column_list add_ add_record '
              'add_record_list argument_name backend clauses column '
              'condition_info condition_name_list constants create '
              'create_language cursor database dblayer default delete '
              'delete_record delete_record_list drop else end_time error '
              'execute_and_fetch_iter execute_and_fetch_one '
              'execute_statement_list field_info field_list format '
              'format_create_procedure format_create_table '
              'format_create_trigger format_drop_procedure format_drop_table '
              'format_drop_trigger format_expression format_order_by '
              'format_query format_query_condition_map '
              'format_query_order_by_map format_release_savepoint '
              'format_result format_rollback_to_savepoint format_savepoint '
              'format_select format_table_condition_map '
              'format_table_order_by_map format_truncate_table '
              'format_truncate_table_list formatted_order_by '
              'formatting_function_name generate_id get_record get_record_iter '
              'get_record_list get_table_list has_custom_default having '
              'ignore_errors import insert items join language language_set '
              'limit log_analysis name named new_ offset options order_by '
              'parameter_tuple procedure property query query_ '
              'query_constant_prefix query_field_list query_group_by '
              'query_having_condition_map query_name query_order_by_map '
              'query_table_list query_where_condition_map quote_name record '
              'record_class record_list record_or_id record_or_id_list repr '
              'reversed row_list runtime_conditions serial sorted '
              'sql_expression start_time statement_list suffix table '
              'table_column_name_list table_condition_map '
              'table_constant_prefix table_info table_list table_name '
              'table_order_by_map table_quoted_column_list time trigger update '
              'update_record update_record_list upper util value_expression '
              'where\n')

Fragment(uuid='c7fa87ef-8440-435c-9033-3a6c12893ab3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=13,
         depth=2,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='db6f3eed-cf25-4777-a451-a581b4df56d6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=15,
         depth=2,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='98390a7a-21f3-4432-a64a-b107b1402157',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=16,
         depth=2,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='364bbb69-d7cd-4a80-b3c6-6deb2d68a6ea',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=16,
         depth=2,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='454740fe-a982-40ee-bd17-9112a6966607',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='nd.__name__}} import database, record\n'
              '\n'
              'NA = constants.NA\n'
              '\n'
              '### Record classes\n'
              '\n'
              '%for table in database._table_list:\n'
              '%accessible_column_list = [column for column in '
              'table._column_list if column.accessible]\n'
              'class {{table.__class__.__name__}}Record(record.Record):\n'
              '    """ {{table.__class__.__name__}} record\n'
              '    \n'
              '    %for column in accessible_column_list:\n'
              '    %if column.doc:\n'
              '    * {{column.name}}: {{column.doc}}\n'
              '    %else:\n'
              '    * {{column.name}}: Undocumented\n'
              '    %end\n'
              '      %if column')

Fragment(uuid='3b91c0ec-d120-496f-9470-b396b4da6cff',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=17,
         depth=2,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='c739a884-d403-49fd-95d1-dd394e7095ba',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=25,
         depth=2,
         type='class',
         name='{{table.__class__.__name__}}Record(record.Record)',
         text='class {{table.__class__.__name__}}Record(record.Record):')

Fragment(uuid='4cad9020-c694-41c4-a787-5f5e647b4c4c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=26,
         depth=3,
         type='documentation',
         name='',
         text=' {{table.__class__.__name__}} record\n'
              '    \n'
              '    %for column in accessible_column_list:\n'
              '    %if column.doc:\n'
              '    * {{column.name}}: {{column.doc}}\n'
              '    %else:\n'
              '    * {{column.name}}: Undocumented\n'
              '    %end\n'
              '      %if column.null:\n'
              '      Nullable, default: {{repr(column.default)}}\n'
              '      %else:\n'
              '      %if column.default is None:\n'
              '      Required\n'
              '      %else:\n'
              '      Required, default: {{repr(column.default)}}\n'
              '      %end\n'
              '      %end\n'
              '    \n'
              '    %end\n'
              '    ')

Fragment(uuid='fbc3e0ed-a340-458a-a1e8-0da36eefd95d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='.null:\n'
              '      Nullable, default: {{repr(column.default)}}\n'
              '      %else:\n'
              '      %if column.default is None:\n'
              '      Required\n'
              '      %else:\n'
              '      Required, default: {{repr(column.default)}}\n'
              '      %end\n'
              '      %end\n'
              '    \n'
              '    %end\n'
              '    """\n'
              '    \n'
              '    ### Runtime model information\n'
              '    \n'
              '    # Name of the corresponding database table storing the '
              'actual records\n'
              '    _table_name = {{repr(table._name)}}\n'
              '    \n'
              '    # Column information\n'
              '    _column_name_list = {{tuple(column.name for column in '
              'accessible')

Fragment(uuid='cca27adb-b6f3-435b-8e0a-8fa8d2d0a42d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=47,
         depth=1,
         type='documentation',
         name='',
         text='### Runtime model information')

Fragment(uuid='3069b16e-a984-482f-b2d0-6f3e21670680',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=49,
         depth=1,
         type='documentation',
         name='',
         text='# Name of the corresponding database table storing the actual '
              'records')

Fragment(uuid='4f3e6ffe-12e7-4a64-a822-5ffc5739f7f3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='# Column information')

Fragment(uuid='414d4419-3a6c-40d2-859f-f1350a1f4a32',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=53,
         depth=0,
         type='module',
         name='',
         text='_column_list)}}\n'
              '    _quoted_column_name_list = '
              '{{tuple(format.quote_name(column.name) for column in '
              'accessible_column_list)}}\n'
              '    _nullable_column_name_set = set({{tuple(column.name for '
              'column in accessible_column_list)}})\n'
              '    _column_default_map = {{dict((column.name, column.default) '
              'for column in accessible_column_list if column.default is not '
              'None and not column.has_custom_default)}}\n'
              '    \n'
              '    ### Optimization\n'
              '    \n'
              '    __slots__ = _column_name_list\n'
              '    \n'
              '    ### Implementation\n')

Fragment(uuid='743fb524-e48e-440a-869b-3132a4517eb0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=63,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def __init__(\n'
              '        self,\n'
              "        {{',\\n        '.join('%s=%r' % (column.name, (None if "
              'column.has_custom_default else column.default)) for column in '
              'accessible_column_list)}}):\n'
              '        """ Creates {{table.__class__.__name__}} record in '
              'memory\n'
              '        \n'
              '        %for column in accessible_column_list:\n'
              '        %if column.doc:\n'
              '        * {{column.name}}: {{column.doc}}\n'
              '        %else:\n'
              '        * {{column.name}}: Undocumented')

Fragment(uuid='454770e0-6d0e-4fe4-a173-bc42bc765042',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=64,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(\n'
              '        self,\n'
              "        {{',\\n        '.join('%s=%r' % (column.name, (None if "
              'column.has_custom_default else column.default)) for column in '
              'accessible_column_list)}}):')

Fragment(uuid='c358196c-af7d-4e97-8fed-c2faaebc90e6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=67,
         depth=3,
         type='documentation',
         name='',
         text=' Creates {{table.__class__.__name__}} record in memory\n'
              '        \n'
              '        %for column in accessible_column_list:\n'
              '        %if column.doc:\n'
              '        * {{column.name}}: {{column.doc}}\n'
              '        %else:\n'
              '        * {{column.name}}: Undocumented\n'
              '        %end\n'
              '          %if column.null:\n'
              '          Nullable, default: {{repr(column.default)}}\n'
              '          %else:\n'
              '          %if column.default is None:\n'
              '          Required\n'
              '          %else:\n'
              '          Required, default: {{repr(column.default)}}\n'
              '          %end\n'
              '          %end\n'
              '        \n'
              '        %end\n'
              '        ')

Fragment(uuid='f001172d-ac92-4f3e-b575-ce5e9bc976b3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        %end\n'
              '          %if column.null:\n'
              '          Nullable, default: {{repr(column.default)}}\n'
              '          %else:\n'
              '          %if column.default is None:\n'
              '          Required\n'
              '          %else:\n'
              '          Required, default: {{repr(column.default)}}\n'
              '          %end\n'
              '          %end\n'
              '        \n'
              '        %end\n'
              '        """\n'
              "        {{'\\n        '.join('self.%s = %s' % (column.name, "
              'column.name) for column in accessible_column_list)}}\n'
              '\n'
              '    @property\n')

Fragment(uuid='2459c281-13cd-42bb-8fd2-22f11bc96fc5',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=90,
         depth=0,
         type='module',
         name='',
         text='    def tuple(self):\n'
              '        """ Returns a tuple with the field values of this '
              '{{table.__class__.__name__}} record\n'
              '        """\n'
              '        return (\n'
              "            {{',\\n            '.join('self.%s' % column.name "
              'for column in accessible_column_list)}})\n'
              '    \n'
              '    @property\n')

Fragment(uuid='6b6f413d-efe9-4dea-8168-f80ea52ff02b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=90,
         depth=2,
         type='function',
         name='tuple',
         text='def tuple(self):\n'
              '        """ Returns a tuple with the field values of this '
              '{{table.__class__.__name__}} record\n'
              '        """\n'
              '        return (\n'
              "            {{',\\n            '.join('self.%s' % column.name "
              'for column in accessible_column_list)}})')

Fragment(uuid='1952fc98-eb18-4b5b-9c07-7898ff83a49a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=91,
         depth=5,
         type='documentation',
         name='',
         text=' Returns a tuple with the field values of this '
              '{{table.__class__.__name__}} record\n'
              '        ')

Fragment(uuid='399b3d50-bc3a-41af-b035-3985b03e7ae0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=97,
         depth=0,
         type='module',
         name='',
         text='    def dict(self):\n'
              '        """ Returns a dictionary with the field values of this '
              '{{table.__class__.__name__}} record\n'
              '        """\n'
              '        return dict(\n'
              "            {{',\\n            '.join('%s=self.%s' % "
              '(column.name, column.name) for column in '
              'accessible_column_list)}})\n'
              '\n'
              '%end\n'
              '### Database abstraction\n')

Fragment(uuid='5fc6fe39-a41a-44cf-a0de-5cc0f04fb82f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=97,
         depth=3,
         type='function',
         name='dict',
         text='def dict(self):\n'
              '        """ Returns a dictionary with the field values of this '
              '{{table.__class__.__name__}} record\n'
              '        """\n'
              '        return dict(\n'
              "            {{',\\n            '.join('%s=self.%s' % "
              '(column.name, column.name) for column in '
              'accessible_column_list)}})')

Fragment(uuid='928b3747-b5f8-4120-bb3e-7961c43c2ff9',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=98,
         depth=6,
         type='documentation',
         name='',
         text=' Returns a dictionary with the field values of this '
              '{{table.__class__.__name__}} record\n'
              '        ')

Fragment(uuid='40b47bec-4caa-4a97-84db-f473b853b1c4',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=104,
         depth=1,
         type='documentation',
         name='',
         text='### Database abstraction')

Fragment(uuid='8b75610c-dc25-4da5-877f-16dd8fd2cf20',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=105,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class '
              '{{abstraction_class_name}}(database.DatabaseAbstraction):\n'
              '    """ Database abstraction layer\n'
              '    \n'
              '    Database model: {{database.__class__.__name__}}\n'
              '    Backend server: {{backend.__name__}}\n'
              "    Generated   on: {{now.isoformat(' ').rsplit('.', 1)[0]}}\n"
              '    \n'
              '    """\n'
              '\n'
              '    # Database backend module, required by the methods in the '
              'DatabaseAbstraction base class\n'
              '    import {{backend.__name__}}.format as _format\n'
              '    \n'
              '    # Classes\n'
              '    from {{backend.__name__}}.clauses import Clauses\n'
              '    from {{backend.__name__}}.error impor')

Fragment(uuid='264361f0-e8e1-4286-9ea1-e55f3535c161',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=106,
         depth=2,
         type='class',
         name='{{abstraction_class_name}}(database.DatabaseAbstraction)',
         text='class {{abstraction_class_name}}(database.DatabaseAbstraction):')

Fragment(uuid='12770f99-58cf-439b-a90b-016b6e118591',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=107,
         depth=3,
         type='documentation',
         name='',
         text=' Database abstraction layer\n'
              '    \n'
              '    Database model: {{database.__class__.__name__}}\n'
              '    Backend server: {{backend.__name__}}\n'
              "    Generated   on: {{now.isoformat(' ').rsplit('.', 1)[0]}}\n"
              '    \n'
              '    ')

Fragment(uuid='f39a8649-c446-49e3-8a79-a3c736161e6d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=115,
         depth=1,
         type='documentation',
         name='',
         text='# Database backend module, required by the methods in the '
              'DatabaseAbstraction base class')

Fragment(uuid='a048ddbe-8116-4bf8-8203-75e058f2b432',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=116,
         depth=2,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='117f3b58-689d-4da4-8af6-049d8b43a064',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=119,
         depth=2,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='b3151206-c9fc-453f-be42-24a681ac88ae',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=119,
         depth=2,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='27f117c4-7910-4a31-8fb0-9d68b1d0cd63',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=120,
         depth=0,
         type='module',
         name='',
         text='t (\n'
              '        Warning, Error, InterfaceError, DatabaseError, '
              'DataError, OperationalError, \n'
              '        IntegrityError, InternalError, ProgrammingError, '
              'NotSupportedError)\n'
              '    \n'
              '    # Constants\n'
              '    \n'
              '    # SQL statement for the savepoint set before each indentity '
              'insert statement\n'
              '    _SQL_IDENTITY_INSERT_SAVEPOINT = '
              "{{repr(format.format_savepoint('before_identity_insert'))}}\n"
              '    \n'
              '    # SQL statement to release a savepoint after a successful '
              'identity insert\n'
              '    _SQL_IDENTITY_INSERT_RELEASE_SAVEPOINT = '
              '{{repr(format.format_release_sav')

Fragment(uuid='117b2059-4d3d-4385-9e81-7a16b419b498',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=120,
         depth=2,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='c30b277c-021d-4cc8-b535-f939efed6a35',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=126,
         depth=1,
         type='documentation',
         name='',
         text='# SQL statement for the savepoint set before each indentity '
              'insert statement')

Fragment(uuid='a5dfc175-4a39-48b7-a965-9faa9f746983',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=127,
         depth=10,
         type='documentation',
         name='',
         text='before_identity_insert')

Fragment(uuid='f2c8ad48-3629-4ae7-b6d4-50946259561d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=129,
         depth=1,
         type='documentation',
         name='',
         text='# SQL statement to release a savepoint after a successful '
              'identity insert')

Fragment(uuid='390cf46a-681b-4240-a583-c0751c339ca9',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=130,
         depth=0,
         type='module',
         name='',
         text="epoint('before_identity_insert'))}}\n"
              '    \n'
              '    # SQL statement for rolling back to the savepoint after a '
              'failing insert statement\n'
              '    _SQL_IDENTITY_INSERT_ROLLBACK_SAVEPOINT = '
              "{{repr(format.format_rollback_to_savepoint('before_identity_insert'))}}\n"
              '    \n'
              '    ### Creating in-memory records - override them to provide '
              'custom record classes\n'
              '    \n'
              '    %for table in database._table_list:\n'
              '    new_{{table._name}} = {{table.__class__.__name__}}Record\n'
              '    %end\n'
              '    \n'
              '    ### Selecting from the database\n'
              '    \n'
              '    %for table in database._table')

Fragment(uuid='03a6bce4-b229-427d-a093-232faabfc6a5',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=130,
         depth=10,
         type='documentation',
         name='',
         text='before_identity_insert')

Fragment(uuid='025aabf2-90ba-46b5-8dc0-790354cdf5cc',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=132,
         depth=1,
         type='documentation',
         name='',
         text='# SQL statement for rolling back to the savepoint after a '
              'failing insert statement')

Fragment(uuid='f6ad5884-bc80-4553-9485-ad9a530593f7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=133,
         depth=10,
         type='documentation',
         name='',
         text='before_identity_insert')

Fragment(uuid='24c73bc9-244b-4755-adba-3f997c8d921a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=135,
         depth=1,
         type='documentation',
         name='',
         text='### Creating in-memory records - override them to provide '
              'custom record classes')

Fragment(uuid='aa23732d-009d-41c2-81b0-63281b0a258a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=141,
         depth=2,
         type='documentation',
         name='',
         text='### Selecting from the database')

Fragment(uuid='787e9034-2d4a-4642-81d4-ec63959248ff',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=143,
         depth=0,
         type='module',
         name='',
         text='_list:\n'
              '    %table_name = table._name\n'
              "    %table_constant_prefix = '_%s' % table_name.upper()\n"
              '    %accessible_column_list = tuple(column for column in '
              'table._column_list if column.accessible)\n'
              '    %table_column_name_list = tuple(column.name for column in '
              'accessible_column_list)\n'
              '    %table_quoted_column_list = '
              'list(map(format.format_expression, accessible_column_list))\n'
              '    %table_order_by_map = '
              'format.format_table_order_by_map(table)\n'
              '    %table_condition_map = '
              'format.format_table_condition_map(table)\n'
              '    %if table._creatable:\n')

Fragment(uuid='faad6128-9193-486a-9613-014beb959b2e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=152,
         depth=0,
         type='module',
         name='',
         text='    def get_{{table._name}}(\n'
              '        self,\n'
              '        id=None,\n'
              '        where=None,\n'
              '        parameter_tuple=(),\n'
              '        order_by=(),\n'
              '        offset=None):\n'
              '        """ Retrieves a {{table.__class__.__name__}} record or '
              'None if not found\n'
              '        """\n')

Fragment(uuid='986eaab1-0057-4a54-8d2f-94bc4c66393f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=152,
         depth=2,
         type='function',
         name='get_{{table.',
         text='def get_{{table._name}}(\n'
              '        self,\n'
              '        id=None,\n'
              '        where=None,\n'
              '        parameter_tuple=(),\n'
              '        order_by=(),\n'
              '        offset=None):\n'
              '        """ Retrieves a {{table.__class__.__name__}} record or '
              'None if not found\n'
              '        """\n')

Fragment(uuid='70d1e6b9-0167-4df8-b854-1bd993b32832',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=159,
         depth=5,
         type='documentation',
         name='',
         text=' Retrieves a {{table.__class__.__name__}} record or None if not '
              'found\n'
              '        ')

Fragment(uuid='8080e90b-cb2d-47b0-ab80-f06bab437686',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=161,
         depth=0,
         type='module',
         name='',
         text='        if id is not None:\n'
              '            %if table._primary_key is None:\n'
              "            raise ValueError('The {{table.__class__.__name__}} "
              'table does not have a primary key, so no way to find a record '
              "by primary key value!')\n"
              '            %else:\n'
              '            %if constants.DEBUG:\n')

Fragment(uuid='ac20d39d-9c2d-4a8e-9d83-92de469f8eb5',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=161,
         depth=2,
         type='function',
         name='get_{{table.',
         text='        if id is not None:\n'
              '            %if table._primary_key is None:\n'
              "            raise ValueError('The {{table.__class__.__name__}} "
              'table does not have a primary key, so no way to find a record '
              "by primary key value!')\n"
              '            %else:\n'
              '            %if constants.DEBUG:\n')

Fragment(uuid='8bd8f712-e092-464b-8b6b-89a0340be594',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=163,
         depth=9,
         type='documentation',
         name='',
         text='The {{table.__class__.__name__}} table does not have a primary '
              'key, so no way to find a record by primary key value!')

Fragment(uuid='8934734f-f139-4e7c-a660-30e702172fb4',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=166,
         depth=0,
         type='module',
         name='',
         text='            if where is not None:\n'
              "                raise ValueError('Cannot pass a where condition "
              "while searching for a record by its primary key value (id)!')\n")

Fragment(uuid='20979d0d-f1a7-4e23-be86-c6a87bfb3b7c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=166,
         depth=2,
         type='function',
         name='get_{{table.',
         text='            if where is not None:\n'
              "                raise ValueError('Cannot pass a where condition "
              "while searching for a record by its primary key value (id)!')\n")

Fragment(uuid='366e4d89-374d-4259-be75-bce6627dddd2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=167,
         depth=9,
         type='documentation',
         name='',
         text='Cannot pass a where condition while searching for a record by '
              'its primary key value (id)!')

Fragment(uuid='33465dd2-4f5d-4a53-9854-56313441049d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=168,
         depth=0,
         type='module',
         name='',
         text='            if parameter_tuple:\n'
              "                raise ValueError('Cannot pass parameter_tuple "
              "while searching for a record by its primary key value (id)!')\n"
              '            %end\n'
              '            parameter_tuple = (id, )\n'
              '            where = '
              "'{{format.quote_name(table._primary_key.name)}} = %s'\n"
              '            %end\n'
              '        else:\n')

Fragment(uuid='c891c0b4-144c-4b29-b23a-7298482e4e6b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=168,
         depth=2,
         type='function',
         name='get_{{table.',
         text='            if parameter_tuple:\n'
              "                raise ValueError('Cannot pass parameter_tuple "
              "while searching for a record by its primary key value (id)!')\n"
              '            %end\n'
              '            parameter_tuple = (id, )\n'
              '            where = '
              "'{{format.quote_name(table._primary_key.name)}} = %s'\n"
              '            %end')

Fragment(uuid='80c1ba09-3a06-4351-bfac-a893a3069d72',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=169,
         depth=9,
         type='documentation',
         name='',
         text='Cannot pass parameter_tuple while searching for a record by its '
              'primary key value (id)!')

Fragment(uuid='fc27e1c1-40bb-4f98-9d54-c77b18437d20',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=172,
         depth=6,
         type='documentation',
         name='',
         text='{{format.quote_name(table._primary_key.name)}} = %s')

Fragment(uuid='8d5ae16e-dcab-482e-a663-3ab9ef833a32',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=175,
         depth=0,
         type='module',
         name='',
         text='            if not isinstance(where, str):\n'
              '                where = self._format.format_expression(where)\n'
              '                \n'
              '        formatted_order_by = '
              'self._format.format_order_by(self.{{table_constant_prefix}}_ORDER_BY_MAP, '
              'order_by)\n'
              '        \n'
              '        clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              '            '
              'field_list=self.new_{{table._name}}._quoted_column_name_list,\n'
              '            where=where,\n'
              '            order_by=formatted_order_by,\n'
              '            limit=1,\n'
              '            offset=offset)\n'
              '            \n'
              '        record = self.get_record(\n'
              '            self.new_{{table._name}},\n'
              '            clauses,\n'
              '            parameter_tuple)\n')

Fragment(uuid='758fe0a9-3d91-43e0-bdab-1f21c8b8d161',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=192,
         depth=0,
         type='module',
         name='',
         text='            \n'
              '        if 0:\n'
              '            assert isinstance(record, '
              '{{table.__class__.__name__}}Record)\n'
              '            \n'
              '        return record\n')

Fragment(uuid='27c7c15d-b4c1-40f6-9b50-73b4cc70a7b7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=197,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def get_{{table._name}}_list(\n'
              '        self,\n'
              "        where='',\n"
              '        parameter_tuple=(),\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None):\n'
              '        """ Retrieves list of {{table.__class__.__name__}} '
              'records\n'
              '        """\n'
              '        formatted_order_by = '
              'self._format.format_order_by(self.{{table_constant_prefix}}_ORDER_BY_MAP, '
              'order_by)\n'
              '        \n'
              '        clauses = self.Cl')

Fragment(uuid='f376643c-537d-4daa-a49e-4b14c1675db2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=198,
         depth=2,
         type='function',
         name='get_',
         text='\n'
              '        \n'
              '    def get_{{table._name}}_list(\n'
              '        self,\n'
              "        where='',\n"
              '        parameter_tuple=(),\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None):')

Fragment(uuid='690b73ad-dbfd-4cde-bca0-f5fc7fc86b1c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=205,
         depth=3,
         type='documentation',
         name='',
         text=' Retrieves list of {{table.__class__.__name__}} records\n'
              '        ')

Fragment(uuid='49ed1716-1e12-40fa-b3cf-2585ae98697d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=209,
         depth=0,
         type='module',
         name='',
         text='auses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              '            '
              'field_list=self.new_{{table._name}}._quoted_column_name_list,\n'
              '            where=where,\n'
              '            order_by=formatted_order_by,\n'
              '            limit=limit,\n'
              '            offset=offset)\n'
              '            \n'
              '        return self.get_record_list(\n'
              '            self.new_{{table._name}},\n'
              '            clauses,\n'
              '            parameter_tuple)\n')

Fragment(uuid='bc480175-2572-4244-b07a-0d3d37ba19af',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=221,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def get_{{table._name}}_iter(\n'
              '        self,\n'
              "        where='',\n"
              '        parameter_tuple=(),\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None):\n'
              '        """ Iterates on {{table.__class__.__name__}} records\n'
              '        """\n')

Fragment(uuid='9eba5786-af92-47e0-9fb4-a14727a7e1df',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=222,
         depth=2,
         type='function',
         name='get_',
         text='\n'
              '    \n'
              '    def get_{{table._name}}_iter(\n'
              '        self,\n'
              "        where='',\n"
              '        parameter_tuple=(),\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None):')

Fragment(uuid='6305f7bb-f15f-4090-8992-3baf876dc169',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=229,
         depth=3,
         type='documentation',
         name='',
         text=' Iterates on {{table.__class__.__name__}} records\n        ')

Fragment(uuid='3f85458a-30db-4fa4-ada2-1a1b1b7738f2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=231,
         depth=0,
         type='module',
         name='',
         text='        if not isinstance(where, str):\n'
              '            where = self._format.format_expression(where)\n'
              '        \n'
              '        formatted_order_by = '
              'self._format.format_order_by(self.{{table_constant_prefix}}_ORDER_BY_MAP, '
              'order_by)\n'
              '        \n'
              '        clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              '            '
              'field_list=self.new_{{table._name}}._quoted_column_name_list,\n'
              '            where=where,\n'
              '            order_by=formatted_order_by,\n'
              '            limit=limit,\n'
              '            offset=offset)\n')

Fragment(uuid='814ea326-6394-4fdf-a7a2-4027751cbcbc',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=243,
         depth=0,
         type='module',
         name='',
         text='            \n'
              '        for record in self.get_record_iter(\n'
              '                self.new_{{table._name}},\n'
              '                clauses,\n'
              '                parameter_tuple):\n'
              '            \n'
              '            yield record\n')

Fragment(uuid='1c37f661-8cc6-447e-9246-21aa4e7dfaf2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=250,
         depth=0,
         type='module',
         name='',
         text='            \n'
              '    def get_{{table._name}}_count(\n'
              '        self,\n'
              "        where='',\n"
              '        parameter_tuple=()):\n'
              '        """ Counts {{table.__class__.__name__}} records in the '
              'database\n'
              '        """\n'
              '        if not isinstance(where, str):\n'
              '            where = self._format.format_expression(where)\n'
              '        \n'
              '        clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              "            field_list=('COUNT(*)', ),\n"
              '            where=where)\n'
              '            \n'
              '        sql = self._format.format_select(clauses)\n')

Fragment(uuid='7e5ae1ac-f9e2-40e7-aad7-9ea2738d3596',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=251,
         depth=2,
         type='function',
         name='get_{{table._name}}',
         text='def get_{{table._name}}_count(\n'
              '        self,\n'
              "        where='',\n"
              '        parameter_tuple=()):\n'
              '        """ Counts {{table.__class__.__name__}} records in the '
              'database\n'
              '        """\n'
              '        if not isinstance(where, str):\n'
              '            where = self._format.format_expression(where)\n'
              '        \n'
              '        clauses = self.Clauses(\n'
              '            table_list=({{repr(table._table_name)}}, ),\n'
              "            field_list=('COUNT(*)', ),\n"
              '            where=where)\n'
              '            \n'
              '        sql = self._format.format_select(clauses)\n'
              '        \n'
              '        with self.cursor() as cursor:\n'
              '            return self.execute_and_fetch_one(cursor, sql)[0]')

Fragment(uuid='e3eaba1a-c4e7-41b8-92d1-59a22d96cd51',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=255,
         depth=5,
         type='documentation',
         name='',
         text=' Counts {{table.__class__.__name__}} records in the database\n'
              '        ')

Fragment(uuid='432cb2e5-7be4-498a-b71e-455d7e10a693',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=266,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '        with self.cursor() as cursor:\n'
              '            return self.execute_and_fetch_one(cursor, sql)[0]\n'
              '            \n'
              '    {{table_constant_prefix}}_TABLE_LIST = [\n'
              '        ({{repr(table._table_name)}}, {{repr(table_name)}})]\n'
              '        \n'
              '    {{table_constant_prefix}}_FIELD_LIST = [\n'
              '        %for field_info in table_quoted_column_list:\n'
              '        {{repr(field_info)}},\n'
              '        %end\n'
              '        ]\n'
              '        \n'
              '    {{table_constant_prefix}}_ORDER_BY_MAP = {\n'
              '        %for name, sql_express')

Fragment(uuid='b78a756f-7ead-43e0-bcb5-ee52f5aefa48',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=280,
         depth=0,
         type='module',
         name='',
         text='ion in sorted(table_order_by_map.items()):\n'
              '        {{repr(name)}}: {{repr(sql_expression)}},\n'
              '        %end\n'
              '        }\n'
              '        \n'
              '    {{table_constant_prefix}}_CONDITION_MAP = {\n'
              '        %for argument_name, condition_info in '
              'sorted(table_condition_map.items()):\n'
              '        %suffix, formatting_function_name, value_expression = '
              'condition_info\n'
              '        {{repr(argument_name)}}: ({{repr(suffix)}}, '
              '_format.{{formatting_function_name}}, '
              '{{repr(value_expression)}}),\n'
              '        %end\n'
              '        }\n')

Fragment(uuid='01cbbd1f-7ba0-42cb-aef0-b913bdd8e893',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=291,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def find_{{table_name}}(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=(),\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):\n'
              '        """ Finds {{table.__class__.__name__}} record by field '
              'values, returns None if not found\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        runtime_conditions[{{repr(name)}}]')

Fragment(uuid='2b69a3b0-dfec-402b-961e-15f8a4b0921f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=292,
         depth=2,
         type='function',
         name='find_',
         text='\n'
              '    \n'
              '    def find_{{table_name}}(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=(),\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):')

Fragment(uuid='c3cd1b21-c3e8-4979-ace6-a0e89fc859f8',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=303,
         depth=3,
         type='documentation',
         name='',
         text=' Finds {{table.__class__.__name__}} record by field values, '
              'returns None if not found\n'
              '        ')

Fragment(uuid='aba94ef4-72a6-477d-a696-d2615bf41dc6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=307,
         depth=0,
         type='module',
         name='',
         text=' = {{name}}\n'
              '        %end\n'
              '        \n'
              '        %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{table_constant_prefix}}_FIELD_LIST,\n'
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            self.{{table_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            1,\n'
              '            offset)\n')

Fragment(uuid='2e74ddae-880e-4c35-967a-0e0a3c714214',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=324,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        if row is None:\n'
              '            return None\n'
              '            \n'
              '        return self.new_{{table_name}}(*row)\n')

Fragment(uuid='90aaa15d-0d8e-4d32-958e-533d4d4e88cc',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=335,
         depth=7,
         type='documentation',
         name='',
         text='Query execution time: %dms')

Fragment(uuid='8c4c9b9f-351d-4cfe-b629-91a783a39e34',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=342,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def find_{{table_name}}_list(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):\n'
              '        """ Finds {{table.__class__.__name__}} records by field '
              'values\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '      ')

Fragment(uuid='15a9fd34-eea7-41e5-a176-4bef17aac1ca',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=343,
         depth=2,
         type='function',
         name='find_',
         text='\n'
              '        \n'
              '    def find_{{table_name}}_list(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):')

Fragment(uuid='1c9990e9-4d89-4e08-b2ef-7e3f3e842547',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=355,
         depth=3,
         type='documentation',
         name='',
         text=' Finds {{table.__class__.__name__}} records by field values\n'
              '        ')

Fragment(uuid='e1c8cd32-e707-422d-8915-c0ffac900988',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=361,
         depth=0,
         type='module',
         name='',
         text='  \n'
              '        %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{table_constant_prefix}}_FIELD_LIST,\n'
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            self.{{table_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{table_name}}    \n')

Fragment(uuid='8fdbfeeb-e6ad-4282-9738-18c34b305fbe',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=378,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            record_list = [\n'
              '                record_class(*row) \n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return record_list\n')

Fragment(uuid='03b2001f-0942-4875-8f4d-82ca069713ed',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=390,
         depth=9,
         type='documentation',
         name='',
         text='Query execution time: %dms')

Fragment(uuid='9c3a706f-50bb-4346-b6d6-431595399df7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=394,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def find_{{table_name}}_iter(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=(),\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):\n'
              '        """ Finds {{table.__class__.__name__}} records by field '
              'values and iterates on them\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '    ')

Fragment(uuid='41d403e7-388f-4179-9034-4d4247716d3f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=395,
         depth=7,
         type='function',
         name='find_',
         text='end\n'
              '            \n'
              '        return record_list\n'
              '        \n'
              '    def find_{{table_name}}')

Fragment(uuid='5c35b125-aa24-4a6b-bec2-209a012f61e3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=407,
         depth=7,
         type='documentation',
         name='',
         text=' Finds {{table.__class__.__name__}} records by field values and '
              'iterates on them\n'
              '        ')

Fragment(uuid='36764768-ad70-486c-9411-2e3cd5f7ac96',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=414,
         depth=0,
         type='module',
         name='',
         text='    %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{table_constant_prefix}}_FIELD_LIST,\n'
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            self.{{table_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{table_name}}\n'
              '        %if constants.LOG_SQL_ANALYSIS:\n')

Fragment(uuid='ff13372a-d2e3-4720-ba2a-7143aa41ab61',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=431,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor() as cursor:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '        %else:\n')

Fragment(uuid='a9b39eb0-77fd-402c-8912-f476daf06b00',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=434,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor(named=True) as cursor:\n'
              '        %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            row_list = list(self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple))\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            for row in row_list:\n'
              '                yield record_class(*row)\n'
              '            %else:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)\n'
              '            %end\n')

Fragment(uuid='4c871932-03a1-4e42-a7e2-05a040eb1920',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=440,
         depth=5,
         type='documentation',
         name='',
         text='Query execution time: %dms')

Fragment(uuid='06cd2275-ae6d-47e3-8141-221733b7e130',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=447,
         depth=0,
         type='module',
         name='',
         text='            \n'
              '    def find_{{table_name}}_count(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=None,\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):\n'
              '        """ Counds {{table.__class__.__name__}} records by '
              'field values\n'
              '\n'
              '        The record ordering is ignored, but can be passed to '
              'provide\n'
              '        compatible method signature with the actual find '
              'methods.\n'
              '        \n'
              '        """')

Fragment(uuid='c683933a-71ff-4683-8683-5a51efb0c474',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=448,
         depth=2,
         type='function',
         name='find_',
         text='\n'
              '            \n'
              '    def find_{{table_name}}_count(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=None,\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        **runtime_conditions):')

Fragment(uuid='eefa4d48-bd3c-4331-87aa-b8be16533743',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=460,
         depth=3,
         type='documentation',
         name='',
         text=' Counds {{table.__class__.__name__}} records by field values\n'
              '\n'
              '        The record ordering is ignored, but can be passed to '
              'provide\n'
              '        compatible method signature with the actual find '
              'methods.\n'
              '        \n'
              '        ')

Fragment(uuid='75c31ecb-1f77-42a6-ab50-e131803158cf',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=465,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        %if constants.DEBUG:\n'
              '        %for name in table_column_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '\n'
              '        %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{table_constant_prefix}}_TABLE_LIST,\n'
              "            ('COUNT(*)', ),\n"
              '            self.{{table_constant_prefix}}_CONDITION_MAP,\n'
              '            {},\n'
              '            [],\n'
              '            {},\n'
              '            where,\n'
              '            None,\n'
              '            runtime_conditions,\n'
              '            (),\n'
              '            limit,\n'
              '            offset)\n')

Fragment(uuid='25385f5e-330e-4c94-82d7-4c72e026b948',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=485,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return row[0]\n'
              '        \n'
              '    %else:\n'
              '    %query = table\n'
              '    %query_name = query._name\n'
              '  ')

Fragment(uuid='8fb92c80-0f72-4ac7-ae9b-66df42a08604',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=496,
         depth=7,
         type='documentation',
         name='',
         text='Query execution time: %dms')

Fragment(uuid='56de7ce4-d609-416b-bd65-524409f2a689',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=504,
         depth=0,
         type='module',
         name='',
         text="  %query_constant_prefix = '_%s' % query_name.upper()\n"
              '    %query_table_list = query.get_table_list()\n'
              '    %query_field_list = list(map(format.format_result, '
              'query._column_list))\n'
              '    %query_group_by = list(map(format.format_expression, '
              'query._group_by))\n'
              '    %query_order_by_map = '
              'format.format_query_order_by_map(query)\n'
              '    %query_where_condition_map, query_having_condition_map = '
              'format.format_query_condition_map(query)\n'
              '    %condition_name_list = [column.name for column in '
              'query._column_list + query._condition_list]\n'
              '    {{query_constant_prefix}}_TABLE_LIST = [\n'
              '        %for table_info in query_table_list:\n'
              '        {{repr(table_info)}}')

Fragment(uuid='aa1636ed-78ae-4b43-8366-24ce5b6c3e85',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=513,
         depth=0,
         type='module',
         name='',
         text=',\n'
              '        %end\n'
              '        ]\n'
              '        \n'
              '    {{query_constant_prefix}}_FIELD_LIST = [\n'
              '        %for field_info in query_field_list:\n'
              '        {{repr(field_info)}},\n'
              '        %end\n'
              '        ]\n'
              '        \n'
              '    {{query_constant_prefix}}_GROUP_BY = [\n'
              '        %for field_info in query_group_by:\n'
              '        {{repr(field_info)}},\n'
              '        %end\n'
              '        ]\n'
              '        \n'
              '    {{query_constant_prefix}}_ORDER_BY_MAP = {\n'
              '        %for name, sql_expression in '
              'sorted(query_order_by_map.items()):\n'
              '        {{repr(name)}}: {{repr(sql_expression)}},\n'
              '        %end\n'
              '        }\n'
              '        \n'
              '    {{query_constant_prefix}}_WHERE_CONDITION_MAP = {\n'
              '        %for argument_name, condition_info in')

Fragment(uuid='ecc790ec-9690-42fb-a75a-2c08ce2e80a6',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=536,
         depth=0,
         type='module',
         name='',
         text=' sorted(query_where_condition_map.items()):\n'
              '        %suffix, formatting_function_name, value_expression = '
              'condition_info\n'
              '        {{repr(argument_name)}}: ({{repr(suffix)}}, '
              '_format.{{formatting_function_name}}, '
              '{{repr(value_expression)}}),\n'
              '        %end\n'
              '        }\n'
              '        \n'
              '    {{query_constant_prefix}}_HAVING_CONDITION_MAP = {\n'
              '        %for argument_name, condition_info in '
              'sorted(query_having_condition_map.items()):\n'
              '        %suffix, formatting_function_name, value_expression = '
              'condition_info\n'
              '        {{repr(argument_name)}}: ({{repr(suffix)}}, '
              '_format.{{formatting_function_name}}, '
              '{{repr(value_expression)}}),\n'
              '        %end\n'
              '        }\n')

Fragment(uuid='d0c67c27-8972-4cb9-9cba-329f55102851',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=548,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def query_{{query_name}}_list(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by={{repr(query._order_by)}},\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'returns the resulting records\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '        %end\n'
              '  ')

Fragment(uuid='6fa0dea8-b2d6-44d3-ab02-e3d47894f116',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=549,
         depth=2,
         type='function',
         name='query_{{query_name}}',
         text='def query_{{query_name}}_list(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by={{repr(query._order_by)}},\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'returns the resulting records\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '        %end\n'
              '      ')

Fragment(uuid='ebb03b35-25ec-4a1a-9e92-d860efc857a7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=562,
         depth=7,
         type='documentation',
         name='',
         text=' Executes the {{query.__class__.__name__}} query and returns '
              'the resulting records\n'
              '        ')

Fragment(uuid='225f4e8c-d9ef-4a78-a607-67bd1182643b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=570,
         depth=0,
         type='module',
         name='',
         text='      sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{query_constant_prefix}}_FIELD_LIST,\n'
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            self.{{query_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{query_name}}    \n')

Fragment(uuid='d1c6e10b-c600-4954-9e8a-d6e9a0489d4c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=570,
         depth=2,
         type='function',
         name='query_{{query_name}}',
         text='  sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{query_constant_prefix}}_FIELD_LIST,\n'
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            self.{{query_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{query_name}}    \n')

Fragment(uuid='ea388ed5-1383-4cad-b85c-3b7d3a66254e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=585,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            record_list = [\n'
              '                record_class(*row) \n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return record_list\n')

Fragment(uuid='eaa4b5d2-21b8-4120-8ca0-647258433c6e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=585,
         depth=2,
         type='function',
         name='query_{{query_name}}',
         text='        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            record_list = [\n'
              '                record_class(*row) \n'
              '                for row in self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple)]\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return record_list')

Fragment(uuid='7366161f-d5ec-4371-a361-5195f884fdb0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=597,
         depth=9,
         type='documentation',
         name='',
         text='Query execution time: %dms')

Fragment(uuid='3f80eed8-404d-4d69-ac68-357e1efc236f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=601,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def query_{{query_name}}_iter(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by={{repr(query._order_by)}},\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'iterates on the resulting records\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '        %end\n'
              '        sql, par')

Fragment(uuid='f80062d1-0ae6-4872-836e-83ccd9bc24e8',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=602,
         depth=2,
         type='function',
         name='query_{{query_name}}',
         text='def query_{{query_name}}_iter(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by={{repr(query._order_by)}},\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'iterates on the resulting records\n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '        \n'
              '        %end\n'
              '        sql, parameter')

Fragment(uuid='78d0df8d-803c-4017-af41-f0b955a5c609',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=615,
         depth=7,
         type='documentation',
         name='',
         text=' Executes the {{query.__class__.__name__}} query and iterates '
              'on the resulting records\n'
              '        ')

Fragment(uuid='e8fcddc0-06e5-41a5-94e8-52dc48ee653d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=623,
         depth=0,
         type='module',
         name='',
         text='ameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{query_constant_prefix}}_FIELD_LIST,\n'
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            self.{{query_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{query_name}}\n'
              '        %if constants.LOG_SQL_ANALYSIS:\n')

Fragment(uuid='4ba70636-8d05-4849-809e-c5f453c434a9',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=623,
         depth=2,
         type='function',
         name='query_{{query_name}}',
         text='_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              '            self.{{query_constant_prefix}}_FIELD_LIST,\n'
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            self.{{query_constant_prefix}}_ORDER_BY_MAP,\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            order_by,\n'
              '            limit,\n'
              '            offset)\n'
              '        \n'
              '        record_class = self.new_{{query_name}}\n'
              '        %if constants.LOG_SQL_ANALYSIS:\n')

Fragment(uuid='87721ade-789b-43cd-b2f0-3628c9e302e4',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=639,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor() as cursor:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '        %else:\n')

Fragment(uuid='39423a36-1fe6-42c3-aa52-1536427d1d84',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=639,
         depth=2,
         type='function',
         name='query_{{query_name}}',
         text='        with self.cursor() as cursor:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '        %else:\n')

Fragment(uuid='d3af4f43-6720-44de-8758-2c435d6c481e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=642,
         depth=0,
         type='module',
         name='',
         text='        with self.cursor(named=True) as cursor:\n'
              '        %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            row_list = list(self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple))\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            for row in row_list:\n'
              '                yield record_class(*row)\n'
              '            %else:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)\n'
              '            %end\n')

Fragment(uuid='b4fd24f7-0e16-4a7d-a04e-4729b92e1323',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=642,
         depth=2,
         type='function',
         name='query_{{query_name}}',
         text='        with self.cursor(named=True) as cursor:\n'
              '        %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            row_list = list(self.execute_and_fetch_iter(cursor, '
              'sql, parameter_tuple))\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            for row in row_list:\n'
              '                yield record_class(*row)\n'
              '            %else:\n'
              '            for row in self.execute_and_fetch_iter(cursor, sql, '
              'parameter_tuple):\n'
              '                yield record_class(*row)\n'
              '            %end')

Fragment(uuid='f2d5cefb-524e-44ae-ae28-be40e3951069',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=648,
         depth=9,
         type='documentation',
         name='',
         text='Query execution time: %dms')

Fragment(uuid='38c54622-9dd4-45b8-9ae0-01c7e65cd8b4',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=655,
         depth=0,
         type='module',
         name='',
         text='            \n'
              '    def query_{{query_name}}_count(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=None,\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'counts the resulting records\n'
              '\n'
              '        The record ordering is ignored, but can be passed to '
              'provide\n'
              '        compatible method signature with the actual query '
              'methods.\n'
              '        \n'
              '        """\n'
              '        %if constants.DE')

Fragment(uuid='89a49ced-977b-494c-8dd7-58d2fbb06ea7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=656,
         depth=2,
         type='function',
         name='query_{{query_name}}',
         text='def query_{{query_name}}_count(\n'
              '        self,\n'
              '        %if constants.DEBUG:\n'
              '        %for name in condition_name_list:\n'
              '        {{name}}=NA,\n'
              '        %end\n'
              '        %end\n'
              '        order_by=None,\n'
              '        limit=None,\n'
              '        offset=None,\n'
              '        where=None,\n'
              '        having=None,\n'
              '        **runtime_conditions):\n'
              '        """ Executes the {{query.__class__.__name__}} query and '
              'counts the resulting records\n'
              '\n'
              '        The record ordering is ignored, but can be passed to '
              'provide\n'
              '        compatible method signature with the actual query '
              'methods.\n'
              '        \n'
              '        """\n'
              '        %if constants.DEBUG:\n'
              '    ')

Fragment(uuid='568269ca-2165-4d89-bfee-183c22ebe04f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=669,
         depth=7,
         type='documentation',
         name='',
         text=' Executes the {{query.__class__.__name__}} query and counts the '
              'resulting records\n'
              '\n'
              '        The record ordering is ignored, but can be passed to '
              'provide\n'
              '        compatible method signature with the actual query '
              'methods.\n'
              '        \n'
              '        ')

Fragment(uuid='5d2b9d61-bcf5-4c65-bd59-055628d91e96',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=675,
         depth=0,
         type='module',
         name='',
         text='BUG:\n'
              '        %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '\n'
              '        %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              "            ('COUNT(*)', ),\n"
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            {},\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            (),\n'
              '            limit,\n'
              '            offset)\n')

Fragment(uuid='181d8b76-70b2-4dea-8488-baaa1fc88744',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=676,
         depth=2,
         type='function',
         name='query_{{query_name}}',
         text='    %for name in condition_name_list:\n'
              '        runtime_conditions[{{repr(name)}}] = {{name}}\n'
              '        %end\n'
              '\n'
              '        %end\n'
              '        sql, parameter_tuple = self._format.format_query(\n'
              '            self.{{query_constant_prefix}}_TABLE_LIST,\n'
              "            ('COUNT(*)', ),\n"
              '            '
              'self.{{query_constant_prefix}}_WHERE_CONDITION_MAP,\n'
              '            '
              'self.{{query_constant_prefix}}_HAVING_CONDITION_MAP,\n'
              '            self.{{query_constant_prefix}}_GROUP_BY,\n'
              '            {},\n'
              '            where,\n'
              '            having,\n'
              '            runtime_conditions,\n'
              '            (),\n'
              '            limit,\n'
              '            offset)\n')

Fragment(uuid='c63a038f-0dbd-4317-a255-39e17ad74d36',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=694,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '            %if constants.PROFIL')

Fragment(uuid='b1d62905-9b36-4e47-b3e7-0651fc7886bb',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=694,
         depth=2,
         type='function',
         name='query_{{query_name}}',
         text='        \n'
              '        with self.cursor() as cursor:\n'
              '            %if constants.LOG_SQL_ANALYSIS:\n'
              '            self.log_analysis(cursor, sql, parameter_tuple)\n'
              '            %end\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            start_time = time.time()\n'
              '            %end\n'
              '            row = self.execute_and_fetch_one(cursor, sql, '
              'parameter_tuple)\n'
              '            %if constants.PROFILE_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return row[0]')

Fragment(uuid='449627b9-19c1-44ba-afa7-e5ea52baa52b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=703,
         depth=0,
         type='module',
         name='',
         text='E_QUERIES:\n'
              '            end_time = time.time()\n'
              "            util.log('Query execution time: %dms', "
              'int((end_time - start_time) * 1000 + 0.5))\n'
              '            %end\n'
              '            \n'
              '        return row[0]\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    %if options.insert:\n'
              '    ### Inserting into the database\n'
              '\n'
              '    %for table in database._table_list:\n'
              '    %if table._writable:\n'
              '    %if table._primary_key:\n')

Fragment(uuid='e66f00e2-87d2-460b-b7d2-b9c202da1ae2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=705,
         depth=9,
         type='documentation',
         name='',
         text='Query execution time: %dms')

Fragment(uuid='0f627b2e-1975-4247-83c9-03de02ef42a7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=713,
         depth=1,
         type='documentation',
         name='',
         text='### Inserting into the database')

Fragment(uuid='29cd144d-414f-40e2-bcb4-4b789c98c2ba',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=718,
         depth=0,
         type='module',
         name='',
         text='    def add_{{table._name}}(self, record, generate_id=True):\n'
              '        """ Inserts single {{table.__class__.__name__}} record '
              'into the {{table._name}} database table\n'
              '        """\n'
              '        self.add_record(self.new_{{table._name}}, record, '
              'generate_id, {{repr(table._primary_key.serial)}})\n')

Fragment(uuid='a783c405-40cb-4a25-a9a5-ccf5f094cf05',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=718,
         depth=2,
         type='function',
         name='add_{{table.',
         text='def add_{{table._name}}(self, record, generate_id=True):\n'
              '        """ Inserts single {{table.__class__.__name__}} record '
              'into the {{table._name}} database table\n'
              '        """\n'
              '        self.add_record(self.new_{{table._name}}, record, '
              'generate_id, {{repr(table._primary_key.serial)}})')

Fragment(uuid='698c86a3-8ce0-4071-9002-7d02ba8559ab',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=719,
         depth=5,
         type='documentation',
         name='',
         text=' Inserts single {{table.__class__.__name__}} record into the '
              '{{table._name}} database table\n'
              '        ')

Fragment(uuid='23a3967e-9a93-49cb-862d-95155c59e397',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=722,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def add_{{table._name}}_list(self, record_list, '
              'generate_id=True):\n'
              '        """ Inserts multiple {{table.__class__.__name__}} '
              'records into the {{table._name}} database table\n'
              '        """\n'
              '        self.add_record_list(self.new_{{table._name}}, '
              'record_list, generate_id, {{repr(table._primary_key.serial)}})\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %if options.update:\n'
              '    ### Updating into the database\n'
              '\n'
              '    %for table in database._table_list:\n'
              '    %if table._writable:\n'
              '    %if table._primary_key:\n')

Fragment(uuid='043d777a-fabb-446d-8f06-c49c1c7acfe5',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=723,
         depth=2,
         type='function',
         name='add_{{table._name}}',
         text='def add_{{table._name}}_list(self, record_list, '
              'generate_id=True):\n'
              '        """ Inserts multiple {{table.__class__.__name__}} '
              'records into the {{table._name}} database table\n'
              '        """\n'
              '        self.add_record_list(self.new_{{table._name}}, '
              'record_list, generate_id, {{repr(table._primary_key.serial)}})')

Fragment(uuid='a7e35927-51f2-4ed7-b430-2ba9ae1f004d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=724,
         depth=5,
         type='documentation',
         name='',
         text=' Inserts multiple {{table.__class__.__name__}} records into the '
              '{{table._name}} database table\n'
              '        ')

Fragment(uuid='bc9bb7bb-0afc-400d-9cd0-93694d779714',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=733,
         depth=1,
         type='documentation',
         name='',
         text='### Updating into the database')

Fragment(uuid='2d7d7ba7-43dd-4deb-8473-52e518eb0a82',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=738,
         depth=0,
         type='module',
         name='',
         text='    def update_{{table._name}}(self, record):\n'
              '        """ Updates single {{table.__class__.__name__}} record '
              'into the {{table._name}} database table\n'
              '        """\n'
              '        self.update_record(self.new_{{table._name}}, record)\n')

Fragment(uuid='40d332e2-27cc-4e30-9305-ad6d667798ae',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=738,
         depth=2,
         type='function',
         name='update_',
         text='def update_{{table._name}}(self, record):\n'
              '        """ Updates single {{table.__class__.__name__}} record '
              'into the {{table._name}} database table\n'
              '        """\n'
              '        self.update_record(self.new_{{table._name}}, record)')

Fragment(uuid='f2766d6e-39dd-40ee-870f-f8a635391af0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=739,
         depth=5,
         type='documentation',
         name='',
         text=' Updates single {{table.__class__.__name__}} record into the '
              '{{table._name}} database table\n'
              '        ')

Fragment(uuid='1998a95c-d01f-4086-a2a3-734fa2fd5ce0',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=742,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def update_{{table._name}}_list(self, record_list):\n'
              '        """ Updates multiple {{table.__class__.__name__}} '
              'records into the {{table._name}} database table\n'
              '        """\n'
              '        self.update_record_list(self.new_{{table._name}}, '
              'record_list)\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %if options.delete:\n'
              '    ### Deleting from the database\n'
              '\n'
              '    %for table in database._table_list:\n'
              '    %if table._writable:\n'
              '    %if table._primary_key:\n')

Fragment(uuid='0b0db38f-17ac-4a63-8abf-f96db56a10ed',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=743,
         depth=2,
         type='function',
         name='update_{{table._name}}',
         text='def update_{{table._name}}_list(self, record_list):\n'
              '        """ Updates multiple {{table.__class__.__name__}} '
              'records into the {{table._name}} database table\n'
              '        """\n'
              '        self.update_record_list(self.new_{{table._name}}, '
              'record_list)')

Fragment(uuid='d835ee9d-587e-4d73-819d-7a798c93d8d4',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=744,
         depth=5,
         type='documentation',
         name='',
         text=' Updates multiple {{table.__class__.__name__}} records into the '
              '{{table._name}} database table\n'
              '        ')

Fragment(uuid='5c68ce50-a04b-4b22-9dbb-e2d7acc9e2ef',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=753,
         depth=1,
         type='documentation',
         name='',
         text='### Deleting from the database')

Fragment(uuid='22990a8f-95af-49e7-8d33-fe068513b8f4',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=758,
         depth=0,
         type='module',
         name='',
         text='    def delete_{{table._name}}(self, record_or_id):\n'
              '        """ Deletes single {{table.__class__.__name__}} record '
              'from the {{table._name}} database table\n'
              '        """\n'
              '        self.delete_record(self.new_{{table._name}}, '
              'record_or_id)\n')

Fragment(uuid='12156fc7-7c3e-4ca9-9ff8-07dd6b52aca2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=758,
         depth=2,
         type='function',
         name='delete_',
         text='def delete_{{table._name}}(self, record_or_id):\n'
              '        """ Deletes single {{table.__class__.__name__}} record '
              'from the {{table._name}} database table\n'
              '        """\n'
              '        self.delete_record(self.new_{{table._name}}, '
              'record_or_id)')

Fragment(uuid='a6e86955-8c69-4677-8985-4c38749ad76b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=759,
         depth=5,
         type='documentation',
         name='',
         text=' Deletes single {{table.__class__.__name__}} record from the '
              '{{table._name}} database table\n'
              '        ')

Fragment(uuid='525785cc-00c9-492b-a451-c46b05d6492f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=762,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def delete_{{table._name}}_list(self, record_or_id_list):\n'
              '        """ Deletes multiple {{table.__class__.__name__}} '
              'records from the {{table._name}} database table\n'
              '        """\n'
              '        self.delete_record_list(self.new_{{table._name}}, '
              'record_or_id_list)\n')

Fragment(uuid='dd0607f8-1a52-4b63-9877-b38cf8e5240f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=763,
         depth=2,
         type='function',
         name='delete_{{table._name}}',
         text='def delete_{{table._name}}_list(self, record_or_id_list):\n'
              '        """ Deletes multiple {{table.__class__.__name__}} '
              'records from the {{table._name}} database table\n'
              '        """\n'
              '        self.delete_record_list(self.new_{{table._name}}, '
              'record_or_id_list)')

Fragment(uuid='7b7b53eb-db55-419f-b61c-d0459523952c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=764,
         depth=5,
         type='documentation',
         name='',
         text=' Deletes multiple {{table.__class__.__name__}} records from the '
              '{{table._name}} database table\n'
              '        ')

Fragment(uuid='db3d52cd-70a6-49fe-8f9a-23bc9dba41ee',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=767,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '    def truncate_{{table._name}}(self):\n'
              '        """ Truncates table {{table._name}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_truncate_table(table, database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, '
              'statement_list)\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    %end\n')

Fragment(uuid='1d0c32ac-fd4a-45a9-b7f7-b5ad4763394a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=768,
         depth=2,
         type='function',
         name='truncate_',
         text='def truncate_{{table._name}}(self):\n'
              '        """ Truncates table {{table._name}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_truncate_table(table, database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list)')

Fragment(uuid='df18530d-b5ef-4764-b641-74a0ff4d631b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=769,
         depth=5,
         type='documentation',
         name='',
         text=' Truncates table {{table._name}} in the database\n        ')

Fragment(uuid='22f85e08-1d74-4b41-a2c8-b4b6c0502e9c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=778,
         depth=0,
         type='module',
         name='',
         text='    def truncate_all_tables(self):\n'
              '        """ Truncates all the tables in the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable and '
              'table._primary_key)}}\n'
              '        \n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_truncate_table_list(database._table_list, '
              'database))}}\n'
              '        \n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, '
              'statement_list)\n'
              '            \n'
              '    %end\n'
              '    %if options.create or options.drop:\n'
              '    ### Creating and dropping stored procedures\n'
              '    \n'
              '    %for procedure in database._procedure_list:\n'
              '    %if options.create:\n')

Fragment(uuid='e4a04c08-3b4a-4e42-8e25-dd414f351b1f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=778,
         depth=2,
         type='function',
         name='truncate_all_tables',
         text='def truncate_all_tables(self):\n'
              '        """ Truncates all the tables in the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable and '
              'table._primary_key)}}\n'
              '        \n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_truncate_table_list(database._table_list, '
              'database))}}\n'
              '        \n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list)')

Fragment(uuid='42778e1a-b8fe-40af-abb8-0518034f92fa',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=779,
         depth=5,
         type='documentation',
         name='',
         text=' Truncates all the tables in the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable and '
              'table._primary_key)}}\n'
              '        \n'
              '        ')

Fragment(uuid='03d3edcb-63df-461e-abee-f29a9d93b2e7',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=791,
         depth=1,
         type='documentation',
         name='',
         text='### Creating and dropping stored procedures')

Fragment(uuid='b1d30c68-3b58-4e08-aecc-aa38d4ea9291',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=795,
         depth=0,
         type='module',
         name='',
         text='    def create_procedure_{{procedure.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Creates stored procedure '
              '{{table.__class__.__name__}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_procedure(procedure))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '            \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='61d3c5e2-c2db-4e20-8b55-7594f86aeeaf',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=795,
         depth=2,
         type='function',
         name='create_procedure_',
         text='def create_procedure_{{procedure.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Creates stored procedure '
              '{{table.__class__.__name__}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_procedure(procedure))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='d07b911d-5e49-4c00-8455-288c531efa95',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=796,
         depth=5,
         type='documentation',
         name='',
         text=' Creates stored procedure {{table.__class__.__name__}} in the '
              'database\n'
              '        ')

Fragment(uuid='720a052d-9fff-4649-a7b6-451f54e42817',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=804,
         depth=0,
         type='module',
         name='',
         text='    def drop_procedure_{{procedure.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Drops stored procedure {{table.__class__.__name__}} '
              'from the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_drop_procedure(procedure))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    ### Creating and dropping all the stored procedures at '
              'once\n'
              '    \n'
              '    %if options.create:\n')

Fragment(uuid='67971fa0-0732-4dc0-9956-b5d53b48cdec',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=804,
         depth=2,
         type='function',
         name='drop_procedure_',
         text='def drop_procedure_{{procedure.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Drops stored procedure {{table.__class__.__name__}} '
              'from the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_drop_procedure(procedure))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='7e1ae355-12e8-4b20-bbbd-dcf886617cba',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=805,
         depth=5,
         type='documentation',
         name='',
         text=' Drops stored procedure {{table.__class__.__name__}} from the '
              'database\n'
              '        ')

Fragment(uuid='c3b0e435-f442-474c-abcd-d48342740819',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=813,
         depth=1,
         type='documentation',
         name='',
         text='### Creating and dropping all the stored procedures at once')

Fragment(uuid='3bf97519-5fcd-431d-819a-8c1a76cc64ad',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=816,
         depth=0,
         type='module',
         name='',
         text='    def create_all_procedures(self, ignore_errors=False):\n'
              '        """ Creates all the stored procedures into the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(procedure.name for procedure in "
              'database._procedure_list)}}\n'
              '        \n'
              '        """\n'
              '        %for procedure in database._procedure_list:\n'
              '        '
              'self.create_procedure_{{procedure.name}}(ignore_errors)\n'
              '        %end\n'
              '        \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='1b11b240-f28f-4105-8f91-9e3ff880f333',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=816,
         depth=2,
         type='function',
         name='create_all_procedures',
         text='def create_all_procedures(self, ignore_errors=False):\n'
              '        """ Creates all the stored procedures into the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(procedure.name for procedure in "
              'database._procedure_list)}}\n'
              '        \n'
              '        """\n'
              '        %for procedure in database._procedure_list:\n'
              '        '
              'self.create_procedure_{{procedure.name}}(ignore_errors)\n'
              '        %end')

Fragment(uuid='67d884ee-c1eb-4f9c-af18-d70894cee63b',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=817,
         depth=5,
         type='documentation',
         name='',
         text=' Creates all the stored procedures into the database\n'
              '        \n'
              "        {{'\\n        '.join(procedure.name for procedure in "
              'database._procedure_list)}}\n'
              '        \n'
              '        ')

Fragment(uuid='5dac80ee-5ffc-4c21-9956-53cb4a60c26e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=828,
         depth=0,
         type='module',
         name='',
         text='    def drop_all_procedures(self, ignore_errors=False):\n'
              '        """ Drops all the stored procedures from the database\n'
              '        \n'
              "        {{'\\n        '.join(procedure.name for procedure in "
              'database._procedure_list)}}\n'
              '        \n'
              '        """\n'
              '        %for procedure in reversed(database._procedure_list):\n'
              '        self.drop_procedure_{{procedure.name}}(ignore_errors)\n'
              '        %end\n'
              '    \n'
              '    %end\n'
              '    ### Creating and dropping triggers\n'
              '    \n'
              '    %for table in database._table_list:\n'
              '    %if table._creatable:\n'
              '    %for trigger in table._trigger_list:\n'
              '    %for procedure in database._procedure_list:\n'
              '    %if options.create:\n')

Fragment(uuid='8bae29b9-2450-4b85-8507-e7c4b95f5c26',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=828,
         depth=2,
         type='function',
         name='drop_all_procedures',
         text='def drop_all_procedures(self, ignore_errors=False):\n'
              '        """ Drops all the stored procedures from the database\n'
              '        \n'
              "        {{'\\n        '.join(procedure.name for procedure in "
              'database._procedure_list)}}\n'
              '        \n'
              '        """\n'
              '        %for procedure in reversed(database._procedure_list):\n'
              '        self.drop_procedure_{{procedure.name}}(ignore_errors)\n'
              '        %end')

Fragment(uuid='a40ea368-2c81-4dce-ac1f-b57ee995df1a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=829,
         depth=5,
         type='documentation',
         name='',
         text=' Drops all the stored procedures from the database\n'
              '        \n'
              "        {{'\\n        '.join(procedure.name for procedure in "
              'database._procedure_list)}}\n'
              '        \n'
              '        ')

Fragment(uuid='55f31358-9006-4883-bc6d-c055eee06d45',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=839,
         depth=1,
         type='documentation',
         name='',
         text='### Creating and dropping triggers')

Fragment(uuid='0780078f-6d64-490e-9668-bf1f3a5b7876',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=846,
         depth=0,
         type='module',
         name='',
         text='    def create_trigger_{{table._name}}_{{trigger.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Creates trigger '
              '{{table.__class__.__name__}}.{{trigger.name}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_trigger(trigger))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '            \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='328bd70b-7f08-46a8-83bc-09a141481929',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=846,
         depth=2,
         type='function',
         name='create_trigger_',
         text='def create_trigger_{{table._name}}_{{trigger.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Creates trigger '
              '{{table.__class__.__name__}}.{{trigger.name}} in the database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_trigger(trigger))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='2fff548a-55ad-46fe-b2a5-10456325de00',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=847,
         depth=5,
         type='documentation',
         name='',
         text=' Creates trigger {{table.__class__.__name__}}.{{trigger.name}} '
              'in the database\n'
              '        ')

Fragment(uuid='db190189-f947-41ed-87bb-1ac01e42d959',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=855,
         depth=0,
         type='module',
         name='',
         text='    def drop_trigger_{{table._name}}_{{trigger.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Drops trigger '
              '{{table.__class__.__name__}}.{{trigger.name}} from the '
              'database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_drop_trigger(trigger))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '        \n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    ### Creating and dropping the triggers of all the tables at '
              'once\n'
              '    \n'
              '    %if options.create:\n')

Fragment(uuid='2a5ea5c1-7c16-4a13-8e41-bbb50863e427',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=855,
         depth=2,
         type='function',
         name='drop_trigger_',
         text='def drop_trigger_{{table._name}}_{{trigger.name}}(self, '
              'ignore_errors=False):\n'
              '        """ Drops trigger '
              '{{table.__class__.__name__}}.{{trigger.name}} from the '
              'database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_drop_trigger(trigger))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='8792cfeb-ce06-4003-99e6-2e72b4cc3832',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=856,
         depth=5,
         type='documentation',
         name='',
         text=' Drops trigger {{table.__class__.__name__}}.{{trigger.name}} '
              'from the database\n'
              '        ')

Fragment(uuid='2f8a1215-b60e-4bf4-95a3-b0ee8ae32215',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=867,
         depth=1,
         type='documentation',
         name='',
         text='### Creating and dropping the triggers of all the tables at once')

Fragment(uuid='2012d687-e2cb-429d-ac4b-3d0d3175c82a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=870,
         depth=0,
         type='module',
         name='',
         text='    def create_all_triggers(self, ignore_errors=False):\n'
              '        """ Creates the triggers for all the tables in the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'database._table_list if table._creatable and '
              'table._trigger_list)}}\n'
              '        \n'
              '        """\n'
              '        %for table in database._table_list:\n'
              '        %if table._creatable:\n'
              '        %for trigger in table._trigger_list:\n'
              '        '
              'self.create_trigger_{{table._name}}_{{trigger.name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        %end\n'
              '        \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='b7dfc888-c786-4377-bdb7-57ef23c7ffc9',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=870,
         depth=2,
         type='function',
         name='create_all_triggers',
         text='def create_all_triggers(self, ignore_errors=False):\n'
              '        """ Creates the triggers for all the tables in the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'database._table_list if table._creatable and '
              'table._trigger_list)}}\n'
              '        \n'
              '        """\n'
              '        %for table in database._table_list:\n'
              '        %if table._creatable:\n'
              '        %for trigger in table._trigger_list:\n'
              '        '
              'self.create_trigger_{{table._name}}_{{trigger.name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        %end')

Fragment(uuid='db045218-ec06-4267-947b-7a1be55fe4f2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=871,
         depth=5,
         type='documentation',
         name='',
         text=' Creates the triggers for all the tables in the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'database._table_list if table._creatable and '
              'table._trigger_list)}}\n'
              '        \n'
              '        ')

Fragment(uuid='359dff54-e65c-4bab-8ce2-c1531b5e1885',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=886,
         depth=0,
         type='module',
         name='',
         text='    def drop_all_triggers(self, ignore_errors=False):\n'
              '        """ Drops the triggers for all the tables from the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable and '
              'table._trigger_list)}}\n'
              '        \n'
              '        """\n'
              '        %for table in reversed(database._table_list)')

Fragment(uuid='1b7cce6d-c253-44cb-acb5-c137e60a53d1',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=886,
         depth=2,
         type='function',
         name='drop_all_triggers',
         text='def drop_all_triggers(self, ignore_errors=False):\n'
              '        """ Drops the triggers for all the tables from the '
              'database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable and '
              'table._trigger_list)}}\n'
              '        \n'
              '        """\n'
              '        %for table in reversed(database._table_list):\n'
              '        %if table._creatable:\n'
              '        %for trigger in table._trigger_list:\n'
              '        '
              'self.drop_trigger_{{table._name}}_{{trigger.name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        %end')

Fragment(uuid='10785032-93c8-43b2-9473-7b86664bb3e2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=887,
         depth=5,
         type='documentation',
         name='',
         text=' Drops the triggers for all the tables from the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable and '
              'table._trigger_list)}}\n'
              '        \n'
              '        ')

Fragment(uuid='ff29cd89-1c1e-45ae-bb53-705efbefeb17',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=892,
         depth=0,
         type='module',
         name='',
         text=':\n'
              '        %if table._creatable:\n'
              '        %for trigger in table._trigger_list:\n'
              '        '
              'self.drop_trigger_{{table._name}}_{{trigger.name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        %end\n'
              '        \n'
              '    %end\n'
              '    ### Creating and dropping tables\n'
              '\n'
              '    %for table in database._table_list:\n'
              '    %if table._creatable:\n'
              '    %if options.create:\n')

Fragment(uuid='c0e480b6-e9bd-4a9b-a542-32dcb78cb016',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=901,
         depth=1,
         type='documentation',
         name='',
         text='### Creating and dropping tables')

Fragment(uuid='5d96d141-68a4-4ca3-86d5-06f583de3ee3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=906,
         depth=0,
         type='module',
         name='',
         text='    def create_table_{{table._name}}(self, '
              'ignore_errors=False):\n'
              '        """ Creates table {{table.__class__.__name__}} in the '
              'database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_table(table, database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '        \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='4c60bc53-674c-463f-8e36-380d8b8c058f',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=906,
         depth=2,
         type='function',
         name='create_table_',
         text='def create_table_{{table._name}}(self, ignore_errors=False):\n'
              '        """ Creates table {{table.__class__.__name__}} in the '
              'database\n'
              '        """\n'
              '        statement_list = '
              '{{repr(format.format_create_table(table, database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='de0ca7fb-a719-4f26-aaf8-20b9d423b89c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=907,
         depth=5,
         type='documentation',
         name='',
         text=' Creates table {{table.__class__.__name__}} in the database\n'
              '        ')

Fragment(uuid='6f9f6d65-d3d2-456d-87c6-afbce706f8e3',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=915,
         depth=0,
         type='module',
         name='',
         text='    def drop_table_{{table._name}}(self, ignore_errors=False):\n'
              '        """ Drops table {{table.__class__.__name__}} from the '
              'database\n'
              '        """\n'
              '        statement_list = {{repr(format.format_drop_table(table, '
              'database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)\n'
              '            \n'
              '    %end\n'
              '    %end\n'
              '    %end\n'
              '    ### Creating, dropping and truncating all the tables at '
              'once\n'
              '    \n'
              '    %if options.create:\n')

Fragment(uuid='e3470207-6bca-42c3-92a5-efbc884895e1',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=915,
         depth=2,
         type='function',
         name='drop_table_',
         text='def drop_table_{{table._name}}(self, ignore_errors=False):\n'
              '        """ Drops table {{table.__class__.__name__}} from the '
              'database\n'
              '        """\n'
              '        statement_list = {{repr(format.format_drop_table(table, '
              'database))}}\n'
              '        with self.cursor() as cursor:\n'
              '            self.execute_statement_list(cursor, statement_list, '
              'ignore_errors)')

Fragment(uuid='39a3a5f4-22c4-4e2d-9fe9-18fdd266485d',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=916,
         depth=5,
         type='documentation',
         name='',
         text=' Drops table {{table.__class__.__name__}} from the database\n'
              '        ')

Fragment(uuid='427f4b89-b5bd-4bfe-96f5-f24cd57589e2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=925,
         depth=1,
         type='documentation',
         name='',
         text='### Creating, dropping and truncating all the tables at once')

Fragment(uuid='ee1aa6ab-ffff-4797-a397-c450e772423e',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=928,
         depth=0,
         type='module',
         name='',
         text='    def create_all_tables(self, ignore_errors=False):\n'
              '        """ Creates all the tables and views into the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'database._table_list if table._creatable)}}\n'
              '        \n'
              '        """\n'
              '        %for table in database._table_list:\n'
              '        %if table._creatable:\n'
              '        self.create_table_{{table._name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='fa7d94bc-944b-4f56-a327-fb7fc1a42e18',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=928,
         depth=2,
         type='function',
         name='create_all_tables',
         text='def create_all_tables(self, ignore_errors=False):\n'
              '        """ Creates all the tables and views into the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'database._table_list if table._creatable)}}\n'
              '        \n'
              '        """\n'
              '        %for table in database._table_list:\n'
              '        %if table._creatable:\n'
              '        self.create_table_{{table._name}}(ignore_errors)\n'
              '        %end\n'
              '        %end')

Fragment(uuid='91faa267-3d30-4906-a2c6-dd3afab242a9',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=929,
         depth=5,
         type='documentation',
         name='',
         text=' Creates all the tables and views into the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'database._table_list if table._creatable)}}\n'
              '        \n'
              '        ')

Fragment(uuid='3462059e-1e89-4491-a85f-307bf6e41984',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=942,
         depth=0,
         type='module',
         name='',
         text='    def drop_all_tables(self, ignore_errors=False):\n'
              '        """ Drops all the tables and views from the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable)}}\n'
              '        \n'
              '        """\n'
              '        %for table in reversed(database._table_list):\n'
              '        %if table._creatable:\n'
              '        self.drop_table_{{table._name}}(ignore_errors)\n'
              '        %end\n'
              '        %end\n'
              '        \n'
              '    %end\n'
              '    %if options.create:\n'
              '    ### Creating languages\n')

Fragment(uuid='26c858b3-f7fe-4f3b-b35d-1969b712e1ba',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=942,
         depth=2,
         type='function',
         name='drop_all_tables',
         text='def drop_all_tables(self, ignore_errors=False):\n'
              '        """ Drops all the tables and views from the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable)}}\n'
              '        \n'
              '        """\n'
              '        %for table in reversed(database._table_list):\n'
              '        %if table._creatable:\n'
              '        self.drop_table_{{table._name}}(ignore_errors)\n'
              '        %end\n'
              '        %end')

Fragment(uuid='1cd4db20-4ffb-4809-ae4c-73ad1e0e55ce',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=943,
         depth=5,
         type='documentation',
         name='',
         text=' Drops all the tables and views from the database\n'
              '        \n'
              "        {{'\\n        '.join(table._name for table in "
              'reversed(database._table_list) if table._creatable)}}\n'
              '        \n'
              '        ')

Fragment(uuid='329cab48-a60c-4306-ab8a-cb2b99be3365',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=956,
         depth=1,
         type='documentation',
         name='',
         text='### Creating languages')

Fragment(uuid='881a94a0-2cf5-4d37-8b2d-e9f9c2016617',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=957,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def create_all_languages(self, ignore_errors=True):\n'
              '        """ Creates all the procedural languages used in the '
              'procedures defined\n'
              '        """\n'
              "        %language_set = set(['plpgsql']) | "
              'set(procedure.language for procedure in '
              'database._procedure_list)\n'
              '        %for language in sorted(language_set):\n'
              '        self.create_language({{repr(language)}}, '
              'ignore_errors)\n'
              '        %end\n'
              '\n'
              '    %end\n'
              '    ### Creating and dropping the database structure\n'
              '    \n'
              '    %if options.create:\n')

Fragment(uuid='0f21b8af-6b59-4fbf-a02f-52741b8bff56',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=958,
         depth=2,
         type='function',
         name='create_all_languages',
         text='def create_all_languages(self, ignore_errors=True):\n'
              '        """ Creates all the procedural languages used in the '
              'procedures defined\n'
              '        """\n'
              "        %language_set = set(['plpgsql']) | "
              'set(procedure.language for procedure in '
              'database._procedure_list)\n'
              '        %for language in sorted(language_set):\n'
              '        self.create_language({{repr(language)}}, '
              'ignore_errors)\n'
              '        %end')

Fragment(uuid='a68e07a3-8437-4051-a612-a93bda2e31c2',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=959,
         depth=5,
         type='documentation',
         name='',
         text=' Creates all the procedural languages used in the procedures '
              'defined\n'
              '        ')

Fragment(uuid='d627fe6d-d5b1-4ed3-bdbe-04896c2ea61a',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=967,
         depth=1,
         type='documentation',
         name='',
         text='### Creating and dropping the database structure')

Fragment(uuid='32ff5188-7637-46d2-b162-7e5122fa9252',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=970,
         depth=0,
         type='module',
         name='',
         text='    def create_structure(self, ignore_errors=False):\n'
              '        """ Creates the whole database structure\n'
              '        """\n'
              '        self.create_all_languages()\n'
              '        \n'
              '        self.create_all_tables(ignore_errors)\n'
              '        self.create_all_procedures(ignore_errors)\n'
              '        self.create_all_triggers(ignore_errors)\n'
              '        \n'
              '    %end\n'
              '    %if options.drop:\n')

Fragment(uuid='a9dfd6a7-7184-4f44-9137-c888f135b358',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=970,
         depth=2,
         type='function',
         name='create_structure',
         text='def create_structure(self, ignore_errors=False):\n'
              '        """ Creates the whole database structure\n'
              '        """\n'
              '        self.create_all_languages()\n'
              '        \n'
              '        self.create_all_tables(ignore_errors)\n'
              '        self.create_all_procedures(ignore_errors)\n'
              '        self.create_all_triggers(ignore_errors)')

Fragment(uuid='51f349ea-558c-4385-8316-aa1ca844c32c',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=971,
         depth=5,
         type='documentation',
         name='',
         text=' Creates the whole database structure\n        ')

Fragment(uuid='1baf3f6c-20f5-4b82-90d8-1656b07215be',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=981,
         depth=0,
         type='module',
         name='',
         text='    def drop_structure(self, ignore_errors=False):\n'
              '        """ Drops the whole database structure\n'
              '        """\n'
              '        self.drop_all_triggers(ignore_errors)\n'
              '        self.drop_all_procedures(ignore_errors)\n'
              '        self.drop_all_tables(ignore_errors)\n'
              '        \n'
              '    %end\n'
              '    %end\n')

Fragment(uuid='02bef59d-53cc-4593-b2d8-8e9658952e32',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=981,
         depth=2,
         type='function',
         name='drop_structure',
         text='def drop_structure(self, ignore_errors=False):\n'
              '        """ Drops the whole database structure\n'
              '        """\n'
              '        self.drop_all_triggers(ignore_errors)\n'
              '        self.drop_all_procedures(ignore_errors)\n'
              '        self.drop_all_tables(ignore_errors)')

Fragment(uuid='c3147528-be8e-4e12-8283-f357b96acd76',
         path='/lib/dblayer/generator/template/database.tpl',
         lineno=982,
         depth=5,
         type='documentation',
         name='',
         text=' Drops the whole database structure\n        ')

Fragment(uuid='5e077253-ac03-4b82-9afc-66cf60eaf28f',
         path='/lib/dblayer/graph/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Helpers to export database graphs\n"""\n')

Fragment(uuid='b4361e11-2253-438b-b136-34fd68cf8450',
         path='/lib/dblayer/graph/__init__.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Helpers to export database graphs\n')

Fragment(uuid='58fa5dae-7dc4-4f28-8da9-93f35f3a7d22',
         path='/lib/dblayer/graph/gml.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Helpers to export the database graph in GraphML format\n'
              '\n'
              'Requires the NetworkX library: http://networkx.lanl.gov/\n'
              '\n'
              '"""\n'
              '\n'
              'import networkx\n'
              '\n'
              'from dblayer.model import database, table as table_model, '
              'column as column_model\n')

Fragment(uuid='7b0aead8-b137-4c43-9862-0d6a7680a35d',
         path='/lib/dblayer/graph/gml.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Helpers to export the database graph in GraphML format\n'
              '\n'
              'Requires the NetworkX library: http://networkx.lanl.gov/\n'
              '\n')

Fragment(uuid='f4040737-8a08-468a-9ad2-9400b4c84839',
         path='/lib/dblayer/graph/gml.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/graph/gml.py\n'
              '  Classes: GMLExporter\n'
              '  Methods: __init__ export\n'
              '  Variables and usages: Database ForeignKey MultiDiGraph Table '
              '_column_list _name _table_list add_edge add_node column '
              'column_label_list column_model database dblayer filepath '
              'fk_column join label model name networkx null referenced_table '
              'table table_model title upper write_gml\n')

Fragment(uuid='1f97775c-d942-4837-9d04-7c5322d48f43',
         path='/lib/dblayer/graph/gml.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='15fa4c86-c097-4cdb-9aa7-fc19dc5edea5',
         path='/lib/dblayer/graph/gml.py',
         lineno=9,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='5bf3cd49-0831-456e-9d0c-daa5bb04b91b',
         path='/lib/dblayer/graph/gml.py',
         lineno=9,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='37c289a8-4d6b-41b0-a4b9-35a89f572747',
         path='/lib/dblayer/graph/gml.py',
         lineno=10,
         depth=0,
         type='module',
         name='',
         text='\n\nclass GMLExporter:\n')

Fragment(uuid='a2fd9d01-56ad-4d03-926e-366d1e15afbb',
         path='/lib/dblayer/graph/gml.py',
         lineno=12,
         depth=1,
         type='class',
         name='GMLExporter',
         text='class GMLExporter:\n')

Fragment(uuid='1c6b7e76-51bb-46e1-8be6-1b6131dcffe4',
         path='/lib/dblayer/graph/gml.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, model):\n'
              '        assert isinstance(model, database.Database)\n'
              '        self.model = model\n')

Fragment(uuid='b9ab4ca7-a7e0-491a-af24-49ae8864a5d2',
         path='/lib/dblayer/graph/gml.py',
         lineno=13,
         depth=1,
         type='class',
         name='GMLExporter',
         text='\n'
              '    def __init__(self, model):\n'
              '        assert isinstance(model, database.Database)\n'
              '        self.model = model\n')

Fragment(uuid='b2f4e986-0605-4002-b5bd-85bc29e2125a',
         path='/lib/dblayer/graph/gml.py',
         lineno=14,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, model):\n'
              '        assert isinstance(model, database.Database)\n'
              '        self.model = model')

Fragment(uuid='40e0015f-7016-4fd8-92d4-3b59857c67e8',
         path='/lib/dblayer/graph/gml.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def export(self, filepath):\n'
              '\n'
              '        model = self.model\n'
              '        assert isinstance(model, database.Database)\n'
              '\n'
              '        g = networkx.MultiDiGraph()\n')

Fragment(uuid='df9a8377-9d15-4304-ae9d-210d822b720f',
         path='/lib/dblayer/graph/gml.py',
         lineno=17,
         depth=1,
         type='class',
         name='GMLExporter',
         text='\n'
              '    def export(self, filepath):\n'
              '\n'
              '        model = self.model\n'
              '        assert isinstance(model, database.Database)\n'
              '\n'
              '        g = networkx.MultiDiGraph()\n')

Fragment(uuid='9f6fd7e4-64a2-4a10-9735-9d0d968e19b2',
         path='/lib/dblayer/graph/gml.py',
         lineno=18,
         depth=3,
         type='function',
         name='export',
         text='def export(self, filepath):\n'
              '\n'
              '        model = self.model\n'
              '        assert isinstance(model, database.Database)\n'
              '\n'
              '        g = networkx.MultiDiGraph()\n')

Fragment(uuid='28ce038f-0293-45f7-892b-59d77b67faa6',
         path='/lib/dblayer/graph/gml.py',
         lineno=24,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for table in model._table_list:\n'
              '            if 0:\n'
              '                assert isinstance(table, table_model.Table)\n'
              '            title = table._name.upper()\n'
              '            column_label_list = [\n'
              "                '%s:%s%s%s' % (\n"
              '                    column.name,\n'
              '                    column.__class__.__name__,\n'
              "                    ' NULL' if column.null else '',\n"
              "                    '->' if isinstance(column, "
              "column_model.ForeignKey) else '')\n")

Fragment(uuid='3d04a66a-b022-4e82-aaf1-94110b21d68b',
         path='/lib/dblayer/graph/gml.py',
         lineno=24,
         depth=1,
         type='class',
         name='GMLExporter',
         text='\n'
              '        for table in model._table_list:\n'
              '            if 0:\n'
              '                assert isinstance(table, table_model.Table)\n'
              '            title = table._name.upper()\n'
              '            column_label_list = [\n'
              "                '%s:%s%s%s' % (\n"
              '                    column.name,\n'
              '                    column.__class__.__name__,\n'
              "                    ' NULL' if column.null else '',\n"
              "                    '->' if isinstance(column, "
              "column_model.ForeignKey) else '')\n")

Fragment(uuid='efcffd45-2f0d-457a-a3cc-0629005c8da3',
         path='/lib/dblayer/graph/gml.py',
         lineno=24,
         depth=3,
         type='function',
         name='export',
         text='\n'
              '        for table in model._table_list:\n'
              '            if 0:\n'
              '                assert isinstance(table, table_model.Table)\n'
              '            title = table._name.upper()\n'
              '            column_label_list = [\n'
              "                '%s:%s%s%s' % (\n"
              '                    column.name,\n'
              '                    column.__class__.__name__,\n'
              "                    ' NULL' if column.null else '',\n"
              "                    '->' if isinstance(column, "
              "column_model.ForeignKey) else '')\n")

Fragment(uuid='730c3596-546e-4889-9db1-1af64d303aac',
         path='/lib/dblayer/graph/gml.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='                for column in table._column_list]\n'
              "            label = '%s\\n\\n%s' % (title, "
              "'\\n'.join(column_label_list))\n"
              '            g.add_node(id(table), label=label)\n')

Fragment(uuid='91de1d23-e521-440f-9bcb-dc31cf97a245',
         path='/lib/dblayer/graph/gml.py',
         lineno=35,
         depth=1,
         type='class',
         name='GMLExporter',
         text='                for column in table._column_list]\n'
              "            label = '%s\\n\\n%s' % (title, "
              "'\\n'.join(column_label_list))\n"
              '            g.add_node(id(table), label=label)\n')

Fragment(uuid='2d204c16-ab53-4c17-bc3d-cd8e81447595',
         path='/lib/dblayer/graph/gml.py',
         lineno=35,
         depth=3,
         type='function',
         name='export',
         text='                for column in table._column_list]\n'
              "            label = '%s\\n\\n%s' % (title, "
              "'\\n'.join(column_label_list))\n"
              '            g.add_node(id(table), label=label)\n')

Fragment(uuid='566e10e2-c0bf-40a1-a023-0c19d0b38fe7',
         path='/lib/dblayer/graph/gml.py',
         lineno=38,
         depth=0,
         type='module',
         name='',
         text='\n        for table in model._table_list:\n')

Fragment(uuid='9fd2421c-6edd-460a-8c54-079f0886fcd9',
         path='/lib/dblayer/graph/gml.py',
         lineno=38,
         depth=1,
         type='class',
         name='GMLExporter',
         text='\n        for table in model._table_list:\n')

Fragment(uuid='ad759b7e-0e8d-4130-abe5-52cf36bfee1f',
         path='/lib/dblayer/graph/gml.py',
         lineno=38,
         depth=3,
         type='function',
         name='export',
         text='\n        for table in model._table_list:\n')

Fragment(uuid='19115ad8-2463-4b29-b922-96cc5caa0aa3',
         path='/lib/dblayer/graph/gml.py',
         lineno=40,
         depth=0,
         type='module',
         name='',
         text='            for fk_column in table._column_list:\n'
              '                if isinstance(fk_column, '
              'column_model.ForeignKey):\n'
              '                    g.add_edge(\n'
              '                        id(table),\n'
              '                        id(fk_column.referenced_table),\n'
              '                        label=fk_column.name)\n'
              '\n'
              '        networkx.write_gml(g, filepath)\n')

Fragment(uuid='d9582cf3-fa55-48f2-9931-166db2723d1f',
         path='/lib/dblayer/graph/gml.py',
         lineno=40,
         depth=1,
         type='class',
         name='GMLExporter',
         text='            for fk_column in table._column_list:\n'
              '                if isinstance(fk_column, '
              'column_model.ForeignKey):\n'
              '                    g.add_edge(\n'
              '                        id(table),\n'
              '                        id(fk_column.referenced_table),\n'
              '                        label=fk_column.name)\n'
              '\n'
              '        networkx.write_gml(g, filepath)')

Fragment(uuid='1484598e-5b7c-4876-b9f5-e2d168ab3f63',
         path='/lib/dblayer/graph/gml.py',
         lineno=40,
         depth=3,
         type='function',
         name='export',
         text='            for fk_column in table._column_list:\n'
              '                if isinstance(fk_column, '
              'column_model.ForeignKey):\n'
              '                    g.add_edge(\n'
              '                        id(table),\n'
              '                        id(fk_column.referenced_table),\n'
              '                        label=fk_column.name)\n'
              '\n'
              '        networkx.write_gml(g, filepath)')

Fragment(uuid='30643cbe-e07b-4693-aa29-24ff1ac7c193',
         path='/lib/dblayer/model/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Classes to build database models\n"""\n')

Fragment(uuid='610025b8-fd99-4c2b-b64c-10a40cb558f0',
         path='/lib/dblayer/model/__init__.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Classes to build database models\n')

Fragment(uuid='56d78a1f-ab49-40d4-9ec2-d34a7f64cf71',
         path='/lib/dblayer/model/aggregate.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Aggregate functions can be used in to aggregate data in '
              'queries\n'
              '"""\n'
              '\n'
              'from dblayer.model import function\n'
              '\n'
              '\n'
              'class BaseAggregate(function.BaseFunction):\n'
              '    """ Base class for aggregates\n'
              '    """\n'
              '\n'
              '    def __init__(self, *args):\n'
              '        function.BaseFunction.__init__(self, *args)\n'
              '\n'
              '        assert self.__class__ is not BaseAggregate, (\n'
              "            'Only subclasses of BaseAggregate can be "
              "instantiated!')\n"
              '\n'
              '\n'
              'class Count(BaseAggregate):\n'
              '    pass\n'
              '\n'
              '\n'
              'class Min(BaseAggregate):\n'
              '    pass\n'
              '\n'
              '\n'
              'class Max(BaseAggregate):\n'
              '    pass\n'
              '\n'
              '\n'
              'class Sum(BaseAggregate):\n'
              '    pass\n'
              '\n'
              '\n'
              'class Avg(BaseAggregate):\n'
              '    pass\n')

Fragment(uuid='f48d8102-9183-43d3-bfd1-75f44d869d5e',
         path='/lib/dblayer/model/aggregate.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Aggregate functions can be used in to aggregate data in '
              'queries\n')

Fragment(uuid='104bf1f2-92af-4023-bc4a-6d83dc8ed0c5',
         path='/lib/dblayer/model/aggregate.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/aggregate.py\n'
              '  Classes: Avg BaseAggregate Count Max Min Sum\n'
              '  Methods: __init__\n'
              '  Variables and usages: BaseFunction args dblayer function '
              'model\n')

Fragment(uuid='c8fd16f7-1598-4089-b3b8-16f854114a3d',
         path='/lib/dblayer/model/aggregate.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='ec446ba3-48d5-4aed-9a15-1fb2b7834a9e',
         path='/lib/dblayer/model/aggregate.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='c64d9464-847f-4136-b47e-cc1892e2da7b',
         path='/lib/dblayer/model/aggregate.py',
         lineno=7,
         depth=1,
         type='class',
         name='BaseAggregate',
         text='class BaseAggregate(function.BaseFunction):\n'
              '    """ Base class for aggregates\n'
              '    """\n'
              '\n'
              '    def __init__(self, *args):\n'
              '        function.BaseFunction.__init__(self, *args)\n'
              '\n'
              '        assert self.__class__ is not BaseAggregate, (\n'
              "            'Only subclasses of BaseAggregate can be "
              "instantiated!')")

Fragment(uuid='7e8607b5-7b53-4777-a7bf-c59f3057b6dc',
         path='/lib/dblayer/model/aggregate.py',
         lineno=8,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for aggregates\n    ')

Fragment(uuid='babdcedf-5f0d-49a9-9530-f36779c40a3c',
         path='/lib/dblayer/model/aggregate.py',
         lineno=11,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, *args):\n'
              '        function.BaseFunction.__init__(self, *args)\n'
              '\n'
              '        assert self.__class__ is not BaseAggregate, (\n'
              "            'Only subclasses of BaseAggregate can be "
              "instantiated!')")

Fragment(uuid='216fd451-316c-4f70-8dd3-cf5b6da99d4e',
         path='/lib/dblayer/model/aggregate.py',
         lineno=15,
         depth=7,
         type='documentation',
         name='',
         text='Only subclasses of BaseAggregate can be instantiated!')

Fragment(uuid='99094c61-2200-4369-a590-33ceccbecd07',
         path='/lib/dblayer/model/aggregate.py',
         lineno=18,
         depth=1,
         type='class',
         name='Count',
         text='class Count(BaseAggregate):\n    pass')

Fragment(uuid='87e78c96-5e68-49d4-b400-8bc31bf4d6e5',
         path='/lib/dblayer/model/aggregate.py',
         lineno=22,
         depth=1,
         type='class',
         name='Min',
         text='class Min(BaseAggregate):\n    pass')

Fragment(uuid='dcb95a43-8254-4dad-ab4d-b01e528c3783',
         path='/lib/dblayer/model/aggregate.py',
         lineno=26,
         depth=1,
         type='class',
         name='Max',
         text='class Max(BaseAggregate):\n    pass')

Fragment(uuid='85268874-1231-4639-ba9f-87925628ac94',
         path='/lib/dblayer/model/aggregate.py',
         lineno=30,
         depth=1,
         type='class',
         name='Sum',
         text='class Sum(BaseAggregate):\n    pass')

Fragment(uuid='89efdfa1-3a17-422e-aa33-7cfa362c1358',
         path='/lib/dblayer/model/aggregate.py',
         lineno=34,
         depth=1,
         type='class',
         name='Avg',
         text='class Avg(BaseAggregate):\n    pass')

Fragment(uuid='c200345c-dbb1-49c5-ba4c-8cb79e6c794b',
         path='/lib/dblayer/model/column.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Column types\n'
              '"""\n'
              '\n'
              'import inspect\n'
              'import types\n'
              '\n'
              'from dblayer import util\n'
              '\n'
              'from dblayer.model import index, function, constraint\n')

Fragment(uuid='cdd14480-e86e-460c-9f8b-5779a76832df',
         path='/lib/dblayer/model/column.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/column.py\n'
              '  Classes: BaseColumn Boolean Custom Date Datetime Decimal '
              'Float ForeignKey Integer PrimaryKey SearchDocument Text\n'
              '  Methods: __init__ __repr__ __str__ clone full_repr '
              'get_implicit_definition_list_for_table_class has_custom_default '
              'sort_key\n'
              '  Variables and usages: BaseFunction FullTextSearchIndex _name '
              'abstract_sql_column_type accessible append arg_iter args '
              'class_type constraint dblayer default defaults digits double '
              'expression formatted_argument_list full_repr_exclude '
              'fullargspec function get_next_definition_serial getattr '
              'getfullargspec implicit index inspect iter join maxlength model '
              'name next null precision primary_key property range '
              'referenced_table referenced_table_class repr rsplit scale '
              'serial size sql_type staticmethod table table_class type types '
              'update util value\n')

Fragment(uuid='cea22a96-f189-44e3-afa9-9a7e170b7d6f',
         path='/lib/dblayer/model/column.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='71fb867d-ecb9-4f35-9744-51a5ebd0cad5',
         path='/lib/dblayer/model/column.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='97089251-c039-4e37-b018-36fda98abd47',
         path='/lib/dblayer/model/column.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='705697e3-a0a6-4c29-a90b-90f35281455b',
         path='/lib/dblayer/model/column.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='68cae425-08cd-46fc-b35c-296919adf71d',
         path='/lib/dblayer/model/column.py',
         lineno=9,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='7837562f-16d4-4abb-a060-6cf941ad6442',
         path='/lib/dblayer/model/column.py',
         lineno=9,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='8dccc847-752e-4f42-afaf-2ca7ccbcaf3d',
         path='/lib/dblayer/model/column.py',
         lineno=10,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseColumn:\n'
              '    """ Base class for database column models\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Abstract name of the SQL column type\n'
              '    abstract_sql_column_type = None\n'
              '\n'
              '    # Reference to the table class containing this column\n'
              '    # NOTE: Set by __new__ of the table definit')

Fragment(uuid='e6b84360-c3b8-4a81-be3c-ab9f55693470',
         path='/lib/dblayer/model/column.py',
         lineno=12,
         depth=1,
         type='class',
         name='BaseColumn',
         text='class BaseColumn:\n'
              '    """ Base class for database column models\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Abstract name of the SQL column type\n'
              '    abstract_sql_column_type = None\n'
              '\n'
              '    # Reference to the table class containing this column\n'
              '    # NOTE: Set by __new__ of the table definiti')

Fragment(uuid='a65da8eb-4ec9-48f9-a2ec-ce8f9917950e',
         path='/lib/dblayer/model/column.py',
         lineno=13,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for database column models\n    ')

Fragment(uuid='b1061b17-0899-4e4d-bdbd-806bb972d302',
         path='/lib/dblayer/model/column.py',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='# Serial number to record the order of column definitions')

Fragment(uuid='642113a9-50c1-4320-a696-036aeca36a18',
         path='/lib/dblayer/model/column.py',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='# Abstract name of the SQL column type')

Fragment(uuid='766f9bc0-f4de-4cd5-b2cc-f5185dbeb705',
         path='/lib/dblayer/model/column.py',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='# Reference to the table class containing this column')

Fragment(uuid='4ed1e339-9725-4ab4-96d0-df475350457d',
         path='/lib/dblayer/model/column.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='ion class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this column or '
              'None for model columns\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'columns from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the column\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Makrs the')

Fragment(uuid='52a09d17-7229-4ae5-84e4-0aa2cc1ab769',
         path='/lib/dblayer/model/column.py',
         lineno=23,
         depth=1,
         type='class',
         name='BaseColumn',
         text='on class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this column or '
              'None for model columns\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'columns from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the column\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Makrs the ')

Fragment(uuid='16e300f3-7e7e-480a-86dd-d49469499b6d',
         path='/lib/dblayer/model/column.py',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the table definition class')

Fragment(uuid='85066cc2-e08a-444d-9e88-267117dd3111',
         path='/lib/dblayer/model/column.py',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='# Reference to the table instance containing this column or '
              'None for model columns')

Fragment(uuid='8e78f2d2-e77a-4067-a7cb-f32b721a772e',
         path='/lib/dblayer/model/column.py',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Filled in by Table.__init__ as part of cloning the '
              'columns from the class to the instance')

Fragment(uuid='1a4b16e0-a718-4411-9f40-4a30f2edaa4a',
         path='/lib/dblayer/model/column.py',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='# Name of the column')

Fragment(uuid='f3045dc6-760b-4547-912c-c0de6ee6196b',
         path='/lib/dblayer/model/column.py',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the table definition class')

Fragment(uuid='752ddc73-245c-42f6-8ca4-b94ba1f35e2f',
         path='/lib/dblayer/model/column.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text=' primary key column\n'
              '    primary_key = False\n'
              '\n'
              '    # True value indicates that this column is accessible to '
              'Python code\n'
              '    # as a filed on the associated Record subclass\n'
              '    accessible = True\n'
              '\n'
              '    # True value indicates that this column can be NULL (None '
              'in Python)\n'
              '    # NOTE: NOT NULL fields are required only if default is '
              'None.\n'
              '    null = False\n'
              '\n'
              '    ')

Fragment(uuid='d21fb118-93f8-41e5-8c99-594d88f1bd7a',
         path='/lib/dblayer/model/column.py',
         lineno=34,
         depth=1,
         type='class',
         name='BaseColumn',
         text='primary key column\n'
              '    primary_key = False\n'
              '\n'
              '    # True value indicates that this column is accessible to '
              'Python code\n'
              '    # as a filed on the associated Record subclass\n'
              '    accessible = True\n'
              '\n'
              '    # True value indicates that this column can be NULL (None '
              'in Python)\n'
              '    # NOTE: NOT NULL fields are required only if default is '
              'None.\n'
              '    null = False\n'
              '\n'
              '    #')

Fragment(uuid='00db4b1a-203c-4985-b7c7-dd3d8ec6b26e',
         path='/lib/dblayer/model/column.py',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='# Makrs the primary key column')

Fragment(uuid='2890cb42-0113-46c5-817c-a7953dfbac0c',
         path='/lib/dblayer/model/column.py',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='# True value indicates that this column is accessible to Python '
              'code')

Fragment(uuid='7c8b86a2-84a6-47f8-9dc5-3a20eb44df9a',
         path='/lib/dblayer/model/column.py',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='# as a filed on the associated Record subclass')

Fragment(uuid='c1e0f85e-e458-44cf-a3e7-c2b513db073b',
         path='/lib/dblayer/model/column.py',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='# True value indicates that this column can be NULL (None in '
              'Python)')

Fragment(uuid='75e2ac65-b45c-4128-be24-4dd180bc5728',
         path='/lib/dblayer/model/column.py',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: NOT NULL fields are required only if default is None.')

Fragment(uuid='bfcc0f77-cb2d-48d6-b098-a69f1adbdc7a',
         path='/lib/dblayer/model/column.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='# Default value for the column or None\n'
              '    # NOTE: It is a Python value, which will be converted to a '
              'database value.\n'
              '    # NOTE: Setting null=False and default=None makes this a '
              'required field.\n'
              '    default = None\n'
              '\n'
              '    # Documentation\n'
              '    doc = None\n'
              '\n'
              '    # Exclude these parameters from full repr formatting\n'
              '    full_repr_exclude = ()\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='5d1eba7a-0b4c-436a-9ca2-25eda9667d48',
         path='/lib/dblayer/model/column.py',
         lineno=45,
         depth=1,
         type='class',
         name='BaseColumn',
         text=' Default value for the column or None\n'
              '    # NOTE: It is a Python value, which will be converted to a '
              'database value.\n'
              '    # NOTE: Setting null=False and default=None makes this a '
              'required field.\n'
              '    default = None\n'
              '\n'
              '    # Documentation\n'
              '    doc = None\n'
              '\n'
              '    # Exclude these parameters from full repr formatting\n'
              '    full_repr_exclude = ()\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='3ad963b0-d9b6-44c7-a41b-ea26d1d10d05',
         path='/lib/dblayer/model/column.py',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='# Default value for the column or None')

Fragment(uuid='06f8a38b-deac-490d-8a0b-3c8f8eb58400',
         path='/lib/dblayer/model/column.py',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: It is a Python value, which will be converted to a '
              'database value.')

Fragment(uuid='8894fb9e-8ae6-4c1e-9754-b3b0c0e311af',
         path='/lib/dblayer/model/column.py',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Setting null=False and default=None makes this a '
              'required field.')

Fragment(uuid='806a392b-4d01-4caf-8aef-97a640298a3b',
         path='/lib/dblayer/model/column.py',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='# Exclude these parameters from full repr formatting')

Fragment(uuid='dd86b36d-a460-48dd-b5b0-1eae8e43a391',
         path='/lib/dblayer/model/column.py',
         lineno=57,
         depth=0,
         type='module',
         name='',
         text='    def sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__\n'
              '\n'
              '    @property\n')

Fragment(uuid='f8deb7e5-e03c-449e-81cf-4aebf7f7dded',
         path='/lib/dblayer/model/column.py',
         lineno=57,
         depth=1,
         type='class',
         name='BaseColumn',
         text='    def sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__\n'
              '\n'
              '    @property\n')

Fragment(uuid='c6b1c6af-d7ad-457d-8dba-0d245a3ebdab',
         path='/lib/dblayer/model/column.py',
         lineno=57,
         depth=4,
         type='function',
         name='sort_key',
         text='def sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__')

Fragment(uuid='1682c706-a5b8-4986-9753-d90cf5b9bb58',
         path='/lib/dblayer/model/column.py',
         lineno=58,
         depth=7,
         type='documentation',
         name='',
         text=' Sort key to preserve the lexical definition order\n        ')

Fragment(uuid='da13adc8-004a-4a2c-8b89-cded9400b27c',
         path='/lib/dblayer/model/column.py',
         lineno=63,
         depth=0,
         type='module',
         name='',
         text='    def has_custom_default(self):\n'
              '        """ Returns True if the column has an SQL expression as '
              'its default value\n'
              '        """\n'
              '        return isinstance(self.default, function.BaseFunction)\n')

Fragment(uuid='4fcebde2-6d32-42bd-aca3-48f8650b52b1',
         path='/lib/dblayer/model/column.py',
         lineno=63,
         depth=1,
         type='class',
         name='BaseColumn',
         text='    def has_custom_default(self):\n'
              '        """ Returns True if the column has an SQL expression as '
              'its default value\n'
              '        """\n'
              '        return isinstance(self.default, function.BaseFunction)\n')

Fragment(uuid='42ffb532-cf89-4ec3-903e-f91f611a3a3a',
         path='/lib/dblayer/model/column.py',
         lineno=63,
         depth=4,
         type='function',
         name='has_custom_default',
         text='def has_custom_default(self):\n'
              '        """ Returns True if the column has an SQL expression as '
              'its default value\n'
              '        """\n'
              '        return isinstance(self.default, function.BaseFunction)')

Fragment(uuid='1a7dcde0-c0f6-4cb4-9ba9-3d49dc07d082',
         path='/lib/dblayer/model/column.py',
         lineno=64,
         depth=7,
         type='documentation',
         name='',
         text=' Returns True if the column has an SQL expression as its '
              'default value\n'
              '        ')

Fragment(uuid='a2219e4a-80ae-47cd-8652-99fa8501ef7c',
         path='/lib/dblayer/model/column.py',
         lineno=67,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, doc=None):\n'
              '\n'
              '        assert self.__class__ is not BaseColumn, (\n'
              "            'Only subclasses of BaseColumn can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Store column documentation if any\n'
              '        if doc is not None:\n'
              '            self.doc = doc\n')

Fragment(uuid='49f0b16d-5068-4c93-bdf6-89e41feb43d1',
         path='/lib/dblayer/model/column.py',
         lineno=67,
         depth=1,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def __init__(self, doc=None):\n'
              '\n'
              '        assert self.__class__ is not BaseColumn, (\n'
              "            'Only subclasses of BaseColumn can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Store column documentation if any\n'
              '        if doc is not None:\n'
              '            self.doc = doc\n')

Fragment(uuid='8957acbe-2a19-4c97-88d9-b0459e942c03',
         path='/lib/dblayer/model/column.py',
         lineno=68,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, doc=None):\n'
              '\n'
              '        assert self.__class__ is not BaseColumn, (\n'
              "            'Only subclasses of BaseColumn can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Store column documentation if any\n'
              '        if doc is not None:\n'
              '            self.doc = doc')

Fragment(uuid='bdf4aa05-1d8f-4a23-bac3-12eca0c00fb5',
         path='/lib/dblayer/model/column.py',
         lineno=71,
         depth=7,
         type='documentation',
         name='',
         text='Only subclasses of BaseColumn can be instantiated!')

Fragment(uuid='34884467-003a-4ec6-b838-349ff747f4fa',
         path='/lib/dblayer/model/column.py',
         lineno=73,
         depth=4,
         type='documentation',
         name='',
         text='# Record the definition order')

Fragment(uuid='492d8b31-05e3-4c83-9912-3a4712b967f2',
         path='/lib/dblayer/model/column.py',
         lineno=76,
         depth=4,
         type='documentation',
         name='',
         text='# Store column documentation if any')

Fragment(uuid='0aafb23a-3620-44e2-9318-57685efae6c1',
         path='/lib/dblayer/model/column.py',
         lineno=79,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Column: %s.%s as %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            self.__class__.__name__)\n')

Fragment(uuid='3a18316c-bb90-4abd-b626-c902c03a47e4',
         path='/lib/dblayer/model/column.py',
         lineno=79,
         depth=1,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Column: %s.%s as %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            self.__class__.__name__)\n')

Fragment(uuid='734d8649-60f9-4946-94f6-670de5ed81e6',
         path='/lib/dblayer/model/column.py',
         lineno=80,
         depth=3,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Column: %s.%s as %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            self.__class__.__name__)')

Fragment(uuid='69602c4e-12f8-4a23-9aeb-2379fd9681f9',
         path='/lib/dblayer/model/column.py',
         lineno=81,
         depth=7,
         type='documentation',
         name='',
         text='<%s Column: %s.%s as %s>')

Fragment(uuid='5642a2d1-f94f-457b-a907-23a418e24469',
         path='/lib/dblayer/model/column.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              '        if self.table is None:\n'
              '            return self.name\n'
              "        return '%s.%s' % (self.table._name, self.name)\n")

Fragment(uuid='9d3f399a-8d87-4226-ad25-d7f709b06cb1',
         path='/lib/dblayer/model/column.py',
         lineno=86,
         depth=1,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def __repr__(self):\n'
              '        if self.table is None:\n'
              '            return self.name\n'
              "        return '%s.%s' % (self.table._name, self.name)\n")

Fragment(uuid='a750cf6b-1ce9-4228-a8d0-0274442b7c4f',
         path='/lib/dblayer/model/column.py',
         lineno=87,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              '        if self.table is None:\n'
              '            return self.name\n'
              "        return '%s.%s' % (self.table._name, self.name)")

Fragment(uuid='f5d594a5-3b39-4d4a-b84b-89f7bcc98b26',
         path='/lib/dblayer/model/column.py',
         lineno=91,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def full_repr(self):\n'
              '        """ Gives the full representation, only for use with '
              'class level column definitions\n'
              '        """\n'
              '        fullargspec = inspect.getfullargspec(self.__init__)\n'
              '        args = fullargspec.args\n'
              '        defaults = fullargspec.defaults\n'
              '\n'
              '        arg_iter = iter(args)\n'
              '        next(arg_iter)\n'
              '\n'
              '        formatted_argument_list = []\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='f5c3243e-e96e-411f-9e73-e687d5af0ca7',
         path='/lib/dblayer/model/column.py',
         lineno=91,
         depth=1,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def full_repr(self):\n'
              '        """ Gives the full representation, only for use with '
              'class level column definitions\n'
              '        """\n'
              '        fullargspec = inspect.getfullargspec(self.__init__)\n'
              '        args = fullargspec.args\n'
              '        defaults = fullargspec.defaults\n'
              '\n'
              '        arg_iter = iter(args)\n'
              '        next(arg_iter)\n'
              '\n'
              '        formatted_argument_list = []\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='ff5e3462-f1e3-462d-bfae-c38f309853f5',
         path='/lib/dblayer/model/column.py',
         lineno=92,
         depth=3,
         type='function',
         name='full_repr',
         text='def full_repr(self):\n'
              '        """ Gives the full representation, only for use with '
              'class level column definitions\n'
              '        """\n'
              '        fullargspec = inspect.getfullargspec(self.__init__)\n'
              '        args = fullargspec.args\n'
              '        defaults = fullargspec.defaults\n'
              '\n'
              '        arg_iter = iter(args)\n'
              '        next(arg_iter)\n'
              '\n'
              '        formatted_argument_list = []\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='8f60a9cd-151b-435a-889e-2244af039285',
         path='/lib/dblayer/model/column.py',
         lineno=93,
         depth=6,
         type='documentation',
         name='',
         text=' Gives the full representation, only for use with class level '
              'column definitions\n'
              '        ')

Fragment(uuid='1463112d-342c-430f-8a7d-744c63a9b1d3',
         path='/lib/dblayer/model/column.py',
         lineno=104,
         depth=0,
         type='module',
         name='',
         text='        for i in range(len(args) - 1 - len(defaults)):\n'
              '            name = next(arg_iter)\n'
              '            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n'
              '            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s' % "
              'value.__name__)\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s.%s' % (value.table_class.__name__, "
              'value.name))\n'
              '            else:\n'
              '                formatted_argument_list.append(repr(value))\n'
              '\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='9b4b3bac-f44d-4f61-a462-1a7bcb352080',
         path='/lib/dblayer/model/column.py',
         lineno=104,
         depth=1,
         type='class',
         name='BaseColumn',
         text='        for i in range(len(args) - 1 - len(defaults)):\n'
              '            name = next(arg_iter)\n'
              '            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n'
              '            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s' % "
              'value.__name__)\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s.%s' % (value.table_class.__name__, "
              'value.name))\n'
              '            else:\n'
              '                formatted_argument_list.append(repr(value))\n'
              '\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='c923d6ef-449d-4c46-bd64-3a76bcc233d5',
         path='/lib/dblayer/model/column.py',
         lineno=104,
         depth=3,
         type='function',
         name='full_repr',
         text='        for i in range(len(args) - 1 - len(defaults)):\n'
              '            name = next(arg_iter)\n'
              '            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n'
              '            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s' % "
              'value.__name__)\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s.%s' % (value.table_class.__name__, "
              'value.name))\n'
              '            else:\n'
              '                formatted_argument_list.append(repr(value))\n'
              '\n'
              '        class_type = type(BaseColumn)\n')

Fragment(uuid='d46d58d1-c7f9-4610-b922-e5f7a7c1a6aa',
         path='/lib/dblayer/model/column.py',
         lineno=118,
         depth=0,
         type='module',
         name='',
         text='        for name, default in zip(arg_iter, defaults):\n')

Fragment(uuid='b721e053-7365-4d36-aedf-b56d46d52cbf',
         path='/lib/dblayer/model/column.py',
         lineno=118,
         depth=1,
         type='class',
         name='BaseColumn',
         text='        for name, default in zip(arg_iter, defaults):\n')

Fragment(uuid='b2bd8dfa-64e4-4324-b70a-c9b97999f5fa',
         path='/lib/dblayer/model/column.py',
         lineno=118,
         depth=3,
         type='function',
         name='full_repr',
         text='        for name, default in zip(arg_iter, defaults):\n')

Fragment(uuid='8dca0e4d-7c64-434d-846f-bf6a7eb891c3',
         path='/lib/dblayer/model/column.py',
         lineno=119,
         depth=0,
         type='module',
         name='',
         text='            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n')

Fragment(uuid='d99372e3-2e38-42ee-8f6f-d8a9ac9b29f8',
         path='/lib/dblayer/model/column.py',
         lineno=119,
         depth=1,
         type='class',
         name='BaseColumn',
         text='            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n')

Fragment(uuid='330827e6-be69-4510-8319-19f1e0ed464a',
         path='/lib/dblayer/model/column.py',
         lineno=119,
         depth=3,
         type='function',
         name='full_repr',
         text='            if name in self.full_repr_exclude:\n'
              '                continue\n'
              '            value = getattr(self, name)\n')

Fragment(uuid='07a016b4-31e1-4d66-a8af-ad8aeb66538c',
         path='/lib/dblayer/model/column.py',
         lineno=122,
         depth=0,
         type='module',
         name='',
         text='            if value == default:\n                continue\n')

Fragment(uuid='a9611a07-78ad-4356-bf7f-15bd38fb6d0e',
         path='/lib/dblayer/model/column.py',
         lineno=122,
         depth=1,
         type='class',
         name='BaseColumn',
         text='            if value == default:\n                continue\n')

Fragment(uuid='06461505-f06d-47b1-bb17-a2ac492de4e8',
         path='/lib/dblayer/model/column.py',
         lineno=122,
         depth=3,
         type='function',
         name='full_repr',
         text='            if value == default:\n                continue\n')

Fragment(uuid='4fdd199a-3433-46c2-b0c1-271ad10ef00e',
         path='/lib/dblayer/model/column.py',
         lineno=124,
         depth=0,
         type='module',
         name='',
         text='            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s=%s' % (name, "
              'value.__name__))\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s=%s.%s' % (name, "
              'value.table_class.__name__, value.name))\n'
              '            else:\n'
              "                formatted_argument_list.append('%s=%r' % (name, "
              'value))\n'
              '\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(formatted_argument_list))\n")

Fragment(uuid='f90d2846-f0ab-403d-a209-c3caf9ff6504',
         path='/lib/dblayer/model/column.py',
         lineno=124,
         depth=1,
         type='class',
         name='BaseColumn',
         text='            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s=%s' % (name, "
              'value.__name__))\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s=%s.%s' % (name, "
              'value.table_class.__name__, value.name))\n'
              '            else:\n'
              "                formatted_argument_list.append('%s=%r' % (name, "
              'value))\n'
              '\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(formatted_argument_list))\n")

Fragment(uuid='865a3103-6ac7-40a4-899d-8c60de903d82',
         path='/lib/dblayer/model/column.py',
         lineno=124,
         depth=3,
         type='function',
         name='full_repr',
         text='            if type(value) == class_type:\n'
              "                formatted_argument_list.append('%s=%s' % (name, "
              'value.__name__))\n'
              '            elif isinstance(value, BaseColumn) and '
              'value.table_class is not self.__class__:\n'
              '                formatted_argument_list.append(\n'
              "                    '%s=%s.%s' % (name, "
              'value.table_class.__name__, value.name))\n'
              '            else:\n'
              "                formatted_argument_list.append('%s=%r' % (name, "
              'value))\n'
              '\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(formatted_argument_list))")

Fragment(uuid='19c1d041-52e0-4fcc-9e35-3d847e1a72cf',
         path='/lib/dblayer/model/column.py',
         lineno=136,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this column for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__()\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='f6832146-1f6e-4c3d-909e-093cc4329e16',
         path='/lib/dblayer/model/column.py',
         lineno=136,
         depth=1,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this column for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__()\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='104ae887-2c79-402c-8886-034b742567b1',
         path='/lib/dblayer/model/column.py',
         lineno=137,
         depth=3,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        """ Clone this column for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__()\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='14b92d95-7504-4f6a-97c1-e0e3b685d5b1',
         path='/lib/dblayer/model/column.py',
         lineno=138,
         depth=6,
         type='documentation',
         name='',
         text=' Clone this column for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        ')

Fragment(uuid='7188eb8c-4b93-4669-8300-dba8dfdcbdf5',
         path='/lib/dblayer/model/column.py',
         lineno=147,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []\n')

Fragment(uuid='3268b4e7-773f-4d33-b4c3-57aeea97d7b6',
         path='/lib/dblayer/model/column.py',
         lineno=147,
         depth=1,
         type='class',
         name='BaseColumn',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []')

Fragment(uuid='230aaa01-ef90-4d28-ad1e-1cfb1c80cc46',
         path='/lib/dblayer/model/column.py',
         lineno=148,
         depth=3,
         type='function',
         name='get_implicit_definition_list_for_table_class',
         text='def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []')

Fragment(uuid='dcc113f3-d192-4dc4-85b9-bd353ca147eb',
         path='/lib/dblayer/model/column.py',
         lineno=149,
         depth=6,
         type='documentation',
         name='',
         text=' Returns list of (name, definition) tuples for the implicit '
              'definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        ')

Fragment(uuid='dd73b99b-be98-490d-b534-9857ed081f07',
         path='/lib/dblayer/model/column.py',
         lineno=154,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Custom(BaseColumn):\n'
              '    """ Custom column type\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Custom'\n"
              '\n'
              '    def __init__(self, sql_type=None, default=None, null=False, '
              'doc=None):\n'
              '        self.sql_type = sql_type\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='a00db14b-7cc7-44ff-85ba-81ae0a657eb5',
         path='/lib/dblayer/model/column.py',
         lineno=156,
         depth=1,
         type='class',
         name='Custom',
         text='class Custom(BaseColumn):\n'
              '    """ Custom column type\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Custom'\n"
              '\n'
              '    def __init__(self, sql_type=None, default=None, null=False, '
              'doc=None):\n'
              '        self.sql_type = sql_type\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='f8122470-cea8-4005-a413-006f748630b5',
         path='/lib/dblayer/model/column.py',
         lineno=157,
         depth=4,
         type='documentation',
         name='',
         text=' Custom column type\n    ')

Fragment(uuid='a3dba5f9-47e1-44f5-9ecd-3ac7bff6c461',
         path='/lib/dblayer/model/column.py',
         lineno=162,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, sql_type=None, default=None, null=False, '
              'doc=None):\n'
              '        self.sql_type = sql_type\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='32a031b2-26ac-45ea-bf2e-592a140a6014',
         path='/lib/dblayer/model/column.py',
         lineno=167,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class PrimaryKey(BaseColumn):\n'
              '    """ Primary key column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'PrimaryKey'\n"
              '    primary_key = True\n'
              '\n'
              '    def __init__(self, serial=False, implicit=True, doc=None):\n'
              '        self.serial = bool(serial)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)\n'
              '\n'
              '        # Move the primary key fields to the top of the column '
              'list\n'
              '        self.__definition_serial__ -= 1000000000\n'
              '\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if self.serial or not self.implicit:\n'
              '            return []\n'
              "        return [('pk_%s' % self.name, "
              'constraint.PrimaryKey(self))]\n')

Fragment(uuid='b5c7fd65-a585-466a-a2e8-551c25bc9b84',
         path='/lib/dblayer/model/column.py',
         lineno=169,
         depth=1,
         type='class',
         name='PrimaryKey',
         text='class PrimaryKey(BaseColumn):\n'
              '    """ Primary key column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'PrimaryKey'\n"
              '    primary_key = True\n'
              '\n'
              '    def __init__(self, serial=False, implicit=True, doc=None):\n'
              '        self.serial = bool(serial)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)\n'
              '\n'
              '        # Move the primary key fields to the top of the column '
              'list\n'
              '        self.__definition_serial__ -= 1000000000\n'
              '\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if self.serial or not self.implicit:\n'
              '            return []\n'
              "        return [('pk_%s' % self.name, "
              'constraint.PrimaryKey(self))]')

Fragment(uuid='fefcd793-ed43-4156-92cf-d374760f8f29',
         path='/lib/dblayer/model/column.py',
         lineno=170,
         depth=4,
         type='documentation',
         name='',
         text=' Primary key column\n    ')

Fragment(uuid='e3841d52-b337-4613-898f-b94792d62cbd',
         path='/lib/dblayer/model/column.py',
         lineno=176,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, serial=False, implicit=True, doc=None):\n'
              '        self.serial = bool(serial)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)\n'
              '\n'
              '        # Move the primary key fields to the top of the column '
              'list\n'
              '        self.__definition_serial__ -= 1000000000')

Fragment(uuid='326b3945-d135-4a15-9622-15b7918d4562',
         path='/lib/dblayer/model/column.py',
         lineno=181,
         depth=4,
         type='documentation',
         name='',
         text='# Move the primary key fields to the top of the column list')

Fragment(uuid='a6cdaa57-ffd3-4d91-a0a5-8e9f86a8b813',
         path='/lib/dblayer/model/column.py',
         lineno=184,
         depth=3,
         type='function',
         name='get_implicit_definition_list_for_table_class',
         text='def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if self.serial or not self.implicit:\n'
              '            return []\n'
              "        return [('pk_%s' % self.name, "
              'constraint.PrimaryKey(self))]')

Fragment(uuid='e7245a0f-818f-4729-87c7-10d7fcacb617',
         path='/lib/dblayer/model/column.py',
         lineno=188,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class ForeignKey(BaseColumn):\n'
              '    """ Foreign key column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'ForeignKey'\n"
              '\n'
              '    # Definition of the referenced table\n'
              '    referenced_table_class = None\n'
              '\n'
              '    # Referenced table instance, filled in by Database.__init__ '
              'after\n'
              '    # creating all the database model objects\n'
              '    referenced_table = None\n')

Fragment(uuid='2e63fa5c-975f-4589-8820-8799fb6f91e8',
         path='/lib/dblayer/model/column.py',
         lineno=190,
         depth=1,
         type='class',
         name='ForeignKey',
         text='class ForeignKey(BaseColumn):\n'
              '    """ Foreign key column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'ForeignKey'\n"
              '\n'
              '    # Definition of the referenced table\n'
              '    referenced_table_class = None\n'
              '\n'
              '    # Referenced table instance, filled in by Database.__init__ '
              'after\n'
              '    # creating all the database model objects\n'
              '    referenced_table = None\n')

Fragment(uuid='8c24aa09-6cb5-4fe7-bfff-638cd6ac2e87',
         path='/lib/dblayer/model/column.py',
         lineno=191,
         depth=4,
         type='documentation',
         name='',
         text=' Foreign key column\n    ')

Fragment(uuid='456edc80-3974-4949-8e6b-9b8132c97153',
         path='/lib/dblayer/model/column.py',
         lineno=196,
         depth=2,
         type='documentation',
         name='',
         text='# Definition of the referenced table')

Fragment(uuid='78597fd9-47c6-43c4-a1ce-2a963769ab17',
         path='/lib/dblayer/model/column.py',
         lineno=199,
         depth=2,
         type='documentation',
         name='',
         text='# Referenced table instance, filled in by Database.__init__ '
              'after')

Fragment(uuid='ba423771-4959-4ba7-b260-f66bc9b77351',
         path='/lib/dblayer/model/column.py',
         lineno=200,
         depth=2,
         type='documentation',
         name='',
         text='# creating all the database model objects')

Fragment(uuid='01a1ccdf-e606-4880-a43a-6db3ca1554b3',
         path='/lib/dblayer/model/column.py',
         lineno=202,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, referenced_table_class=None, '
              'default=None, null=False, implicit=True, doc=None):\n'
              '        # NOTE: The referenced table class can be set to None '
              'and filled later\n'
              '        self.referenced_table_class = referenced_table_class\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='4f9fb78f-63d0-4e48-af15-e55ad5b09507',
         path='/lib/dblayer/model/column.py',
         lineno=202,
         depth=1,
         type='class',
         name='ForeignKey',
         text='\n'
              '    def __init__(self, referenced_table_class=None, '
              'default=None, null=False, implicit=True, doc=None):\n'
              '        # NOTE: The referenced table class can be set to None '
              'and filled later\n'
              '        self.referenced_table_class = referenced_table_class\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='66501774-81fe-45d6-9c4a-8815bc4223e5',
         path='/lib/dblayer/model/column.py',
         lineno=203,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, referenced_table_class=None, default=None, '
              'null=False, implicit=True, doc=None):\n'
              '        # NOTE: The referenced table class can be set to None '
              'and filled later\n'
              '        self.referenced_table_class = referenced_table_class\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='e71e3979-17ff-4dd8-9ee9-61dd8c5d9477',
         path='/lib/dblayer/model/column.py',
         lineno=204,
         depth=3,
         type='documentation',
         name='',
         text='# NOTE: The referenced table class can be set to None and '
              'filled later')

Fragment(uuid='46dc4289-cf6a-44ab-85ee-3ee9c209d600',
         path='/lib/dblayer/model/column.py',
         lineno=210,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        return [('fk_%s' % self.name, "
              'constraint.ForeignKey(self))]\n')

Fragment(uuid='3caa2102-c91e-4768-9be5-56663d15adfb',
         path='/lib/dblayer/model/column.py',
         lineno=210,
         depth=1,
         type='class',
         name='ForeignKey',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        return [('fk_%s' % self.name, "
              'constraint.ForeignKey(self))]')

Fragment(uuid='a3cf5dc8-e77b-4a00-b78e-8eaba22c42c4',
         path='/lib/dblayer/model/column.py',
         lineno=211,
         depth=3,
         type='function',
         name='get_implicit_definition_list_for_table_class',
         text='def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        return [('fk_%s' % self.name, "
              'constraint.ForeignKey(self))]')

Fragment(uuid='5e29962b-9c99-4187-b576-c9004ec9dbda',
         path='/lib/dblayer/model/column.py',
         lineno=215,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Boolean(BaseColumn):\n'
              '    """ Boolean column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Boolean'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='8720126d-8f23-4af7-8d7f-508742711c1f',
         path='/lib/dblayer/model/column.py',
         lineno=217,
         depth=1,
         type='class',
         name='Boolean',
         text='class Boolean(BaseColumn):\n'
              '    """ Boolean column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Boolean'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='367dc020-8b95-440e-b752-06e886575406',
         path='/lib/dblayer/model/column.py',
         lineno=218,
         depth=4,
         type='documentation',
         name='',
         text=' Boolean column\n    ')

Fragment(uuid='dda93f4e-cecc-4e0a-9712-5db3f8c94f1e',
         path='/lib/dblayer/model/column.py',
         lineno=223,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='5169f1a9-3a0b-4150-b4d0-e418c2fd6fa1',
         path='/lib/dblayer/model/column.py',
         lineno=227,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Integer(BaseColumn):\n'
              '    """ Integer column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Integer'\n"
              '\n'
              '    # Number of digits\n'
              '    digits = None\n'
              '\n'
              '    def __init__(self, digits=None, default=None, null=False, '
              'doc=None):\n'
              '        self.digits = int(digits) if digits else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='93311f1b-91c4-43df-b2ec-fcbaa1fdc857',
         path='/lib/dblayer/model/column.py',
         lineno=229,
         depth=1,
         type='class',
         name='Integer',
         text='class Integer(BaseColumn):\n'
              '    """ Integer column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Integer'\n"
              '\n'
              '    # Number of digits\n'
              '    digits = None\n'
              '\n'
              '    def __init__(self, digits=None, default=None, null=False, '
              'doc=None):\n'
              '        self.digits = int(digits) if digits else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='192e7861-ea6e-4fff-83c8-a0fe8eb2b642',
         path='/lib/dblayer/model/column.py',
         lineno=230,
         depth=4,
         type='documentation',
         name='',
         text=' Integer column\n    ')

Fragment(uuid='2d3794a3-b364-4081-9e39-cb5502154af8',
         path='/lib/dblayer/model/column.py',
         lineno=238,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, digits=None, default=None, null=False, '
              'doc=None):\n'
              '        self.digits = int(digits) if digits else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='2dfa2683-e588-4223-80e3-41f3877abd5c',
         path='/lib/dblayer/model/column.py',
         lineno=243,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Float(BaseColumn):\n'
              '    """ Float column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Float'\n"
              '\n'
              '    # True for double precision (8 bytes), False for single '
              'precision (4 bytes)\n'
              '    size = None\n'
              '\n'
              '    def __init__(self, double=True, default=None, null=False, '
              'doc=None):\n'
              '        self.double = bool(double)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='c1fc31c0-ca03-4b47-8981-02cae40b1546',
         path='/lib/dblayer/model/column.py',
         lineno=245,
         depth=1,
         type='class',
         name='Float',
         text='class Float(BaseColumn):\n'
              '    """ Float column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Float'\n"
              '\n'
              '    # True for double precision (8 bytes), False for single '
              'precision (4 bytes)\n'
              '    size = None\n'
              '\n'
              '    def __init__(self, double=True, default=None, null=False, '
              'doc=None):\n'
              '        self.double = bool(double)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='206ba327-8f40-4165-8139-efbf3db1bd79',
         path='/lib/dblayer/model/column.py',
         lineno=251,
         depth=2,
         type='documentation',
         name='',
         text='# True for double precision (8 bytes), False for single '
              'precision (4 bytes)')

Fragment(uuid='e4efe607-fce5-4e19-a099-0e08280994c8',
         path='/lib/dblayer/model/column.py',
         lineno=254,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, double=True, default=None, null=False, '
              'doc=None):\n'
              '        self.double = bool(double)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='426957f2-1a6a-4c68-8027-7b654ef7a73b',
         path='/lib/dblayer/model/column.py',
         lineno=259,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Decimal(BaseColumn):\n'
              '    """ Decimal column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Decimal'\n"
              '\n'
              '    # Total number of decimal digits (includes both the integer '
              'and fractional part)\n'
              '    precision = None\n'
              '\n'
              '    # Number of digits after the decimal point (fractional '
              'part)\n'
              '    scale = None\n'
              '\n'
              '    def __init__(self, precision=None, scale=None, '
              'default=None, null=False, doc=None):\n'
              '        self.precision = None if precision is None else '
              'int(precision)\n'
              '        self.scale = None if scale is None else int(scale)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='1192feba-ddb2-4115-8af8-2da93281f6ad',
         path='/lib/dblayer/model/column.py',
         lineno=261,
         depth=1,
         type='class',
         name='Decimal',
         text='class Decimal(BaseColumn):\n'
              '    """ Decimal column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Decimal'\n"
              '\n'
              '    # Total number of decimal digits (includes both the integer '
              'and fractional part)\n'
              '    precision = None\n'
              '\n'
              '    # Number of digits after the decimal point (fractional '
              'part)\n'
              '    scale = None\n'
              '\n'
              '    def __init__(self, precision=None, scale=None, '
              'default=None, null=False, doc=None):\n'
              '        self.precision = None if precision is None else '
              'int(precision)\n'
              '        self.scale = None if scale is None else int(scale)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='b04e40c4-cd0d-4bab-8a9f-346ea88d0557',
         path='/lib/dblayer/model/column.py',
         lineno=262,
         depth=4,
         type='documentation',
         name='',
         text=' Decimal column\n    ')

Fragment(uuid='f4e395a3-52ac-44c7-b935-9354b683b898',
         path='/lib/dblayer/model/column.py',
         lineno=267,
         depth=2,
         type='documentation',
         name='',
         text='# Total number of decimal digits (includes both the integer and '
              'fractional part)')

Fragment(uuid='bb5c2a18-eb89-4732-9c4d-29ee721c757e',
         path='/lib/dblayer/model/column.py',
         lineno=270,
         depth=2,
         type='documentation',
         name='',
         text='# Number of digits after the decimal point (fractional part)')

Fragment(uuid='5b285de7-fb56-4b80-bb8f-61b8934bea78',
         path='/lib/dblayer/model/column.py',
         lineno=273,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, precision=None, scale=None, default=None, '
              'null=False, doc=None):\n'
              '        self.precision = None if precision is None else '
              'int(precision)\n'
              '        self.scale = None if scale is None else int(scale)\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='07f7c918-e905-44d9-ba96-6b1e17bd5889',
         path='/lib/dblayer/model/column.py',
         lineno=279,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Text(BaseColumn):\n'
              '    """ Unicode text column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Text'\n"
              '\n'
              '    # Maximum number of characters in the string (unicode '
              'characters, not bytes)\n'
              '    maxlength = None\n'
              '\n'
              '    def __init__(self, maxlength=None, default=None, '
              'null=False, doc=None):\n'
              '        self.maxlength = int(maxlength) if maxlength else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='9ec71de9-42ff-40e2-b94b-63f8feb8cf65',
         path='/lib/dblayer/model/column.py',
         lineno=281,
         depth=1,
         type='class',
         name='Text',
         text='class Text(BaseColumn):\n'
              '    """ Unicode text column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Text'\n"
              '\n'
              '    # Maximum number of characters in the string (unicode '
              'characters, not bytes)\n'
              '    maxlength = None\n'
              '\n'
              '    def __init__(self, maxlength=None, default=None, '
              'null=False, doc=None):\n'
              '        self.maxlength = int(maxlength) if maxlength else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='ef5850ff-ca31-4e6c-9fbc-a8c14fae1b49',
         path='/lib/dblayer/model/column.py',
         lineno=282,
         depth=4,
         type='documentation',
         name='',
         text=' Unicode text column\n    ')

Fragment(uuid='e096f1de-f08b-43ba-ad21-be91d91f95e6',
         path='/lib/dblayer/model/column.py',
         lineno=287,
         depth=2,
         type='documentation',
         name='',
         text='# Maximum number of characters in the string (unicode '
              'characters, not bytes)')

Fragment(uuid='81506c50-1862-4a1f-93e0-4eae7b49d130',
         path='/lib/dblayer/model/column.py',
         lineno=290,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, maxlength=None, default=None, null=False, '
              'doc=None):\n'
              '        self.maxlength = int(maxlength) if maxlength else None\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='5a575600-1fa0-4176-8f4e-5cab40e0b12e',
         path='/lib/dblayer/model/column.py',
         lineno=295,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Date(BaseColumn):\n'
              '    """ Date column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Date'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='b9a5c028-9694-4850-88ea-c74a9f79bfb7',
         path='/lib/dblayer/model/column.py',
         lineno=297,
         depth=1,
         type='class',
         name='Date',
         text='class Date(BaseColumn):\n'
              '    """ Date column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Date'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='46e4705e-8540-404b-a924-3843b86564bd',
         path='/lib/dblayer/model/column.py',
         lineno=303,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='a32912e4-8b91-42aa-86ec-bc5bbc76816a',
         path='/lib/dblayer/model/column.py',
         lineno=307,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Datetime(BaseColumn):\n'
              '    """ Datetime (timestamp) column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Datetime'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)\n')

Fragment(uuid='47bd924b-887a-48d4-9e41-0ce8997d7d08',
         path='/lib/dblayer/model/column.py',
         lineno=309,
         depth=1,
         type='class',
         name='Datetime',
         text='class Datetime(BaseColumn):\n'
              '    """ Datetime (timestamp) column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'Datetime'\n"
              '\n'
              '    def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='62ff23d3-49ee-4c52-a47a-6128a33076d0',
         path='/lib/dblayer/model/column.py',
         lineno=310,
         depth=4,
         type='documentation',
         name='',
         text=' Datetime (timestamp) column\n    ')

Fragment(uuid='c37fa156-e2dd-4c1c-85cf-e92b5a2e3c0e',
         path='/lib/dblayer/model/column.py',
         lineno=315,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, default=None, null=False, doc=None):\n'
              '        self.default = default\n'
              '        self.null = bool(null)\n'
              '        BaseColumn.__init__(self, doc)')

Fragment(uuid='5b69ae82-722d-4606-a2f1-b5e4db3d2511',
         path='/lib/dblayer/model/column.py',
         lineno=319,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class SearchDocument(BaseColumn):\n'
              '    """ Search document column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'SearchDocument'\n"
              '\n'
              '    # Do not add this as a field on the Record subclass, hide '
              'from Python code\n'
              '    accessible = False\n'
              '\n'
              '    # Expression to generate the value of this column from the '
              'other columns.\n'
              '    # It is currently limited to a tuple of columns to '
              'concatenate with space\n'
              '    # separators to build up the search document.\n'
              '    # TODO: Allow for free form expressions using the function '
              'module.\n'
              '    expression = None\n')

Fragment(uuid='7f8eb502-85c0-428b-b5a2-3dc53df030bd',
         path='/lib/dblayer/model/column.py',
         lineno=321,
         depth=1,
         type='class',
         name='SearchDocument',
         text='class SearchDocument(BaseColumn):\n'
              '    """ Search document column\n'
              '    """\n'
              '\n'
              "    abstract_sql_column_type = 'SearchDocument'\n"
              '\n'
              '    # Do not add this as a field on the Record subclass, hide '
              'from Python code\n'
              '    accessible = False\n'
              '\n'
              '    # Expression to generate the value of this column from the '
              'other columns.\n'
              '    # It is currently limited to a tuple of columns to '
              'concatenate with space\n'
              '    # separators to build up the search document.\n'
              '    # TODO: Allow for free form expressions using the function '
              'module.\n'
              '    expression = None\n')

Fragment(uuid='276bf0a1-cd88-4c6e-bfff-7b4813e42287',
         path='/lib/dblayer/model/column.py',
         lineno=322,
         depth=4,
         type='documentation',
         name='',
         text=' Search document column\n    ')

Fragment(uuid='b445241d-2cfe-441d-bf70-9bcf79bb61e4',
         path='/lib/dblayer/model/column.py',
         lineno=327,
         depth=2,
         type='documentation',
         name='',
         text='# Do not add this as a field on the Record subclass, hide from '
              'Python code')

Fragment(uuid='53083828-5fc1-4bf0-ac11-e6dfbdabddf4',
         path='/lib/dblayer/model/column.py',
         lineno=330,
         depth=2,
         type='documentation',
         name='',
         text='# Expression to generate the value of this column from the '
              'other columns.')

Fragment(uuid='1386b07e-5acd-41a3-92f7-94eeb380f347',
         path='/lib/dblayer/model/column.py',
         lineno=331,
         depth=2,
         type='documentation',
         name='',
         text='# It is currently limited to a tuple of columns to concatenate '
              'with space')

Fragment(uuid='5b25aaa1-8c49-4942-8fb1-12f85b527103',
         path='/lib/dblayer/model/column.py',
         lineno=332,
         depth=2,
         type='documentation',
         name='',
         text='# separators to build up the search document.')

Fragment(uuid='59ae1f32-e8cf-4e3e-8e85-e94fed02e967',
         path='/lib/dblayer/model/column.py',
         lineno=333,
         depth=2,
         type='documentation',
         name='',
         text='# TODO: Allow for free form expressions using the function '
              'module.')

Fragment(uuid='11220df8-b570-419c-99a9-46be7b53fbbf',
         path='/lib/dblayer/model/column.py',
         lineno=335,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, expression=None, implicit=True, '
              'doc=None):\n'
              '        self.expression = expression\n'
              '        self.null = False\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc=doc)\n')

Fragment(uuid='68533627-1e80-4c6e-b00d-91a50c966472',
         path='/lib/dblayer/model/column.py',
         lineno=335,
         depth=1,
         type='class',
         name='SearchDocument',
         text='\n'
              '    def __init__(self, expression=None, implicit=True, '
              'doc=None):\n'
              '        self.expression = expression\n'
              '        self.null = False\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc=doc)\n')

Fragment(uuid='dcfa3c40-ea24-4137-938d-0577bd3fc414',
         path='/lib/dblayer/model/column.py',
         lineno=336,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, expression=None, implicit=True, doc=None):\n'
              '        self.expression = expression\n'
              '        self.null = False\n'
              '        self.implicit = bool(implicit)\n'
              '        BaseColumn.__init__(self, doc=doc)')

Fragment(uuid='7b7e9422-b7b8-4b9c-a33c-87bd5a949ae8',
         path='/lib/dblayer/model/column.py',
         lineno=341,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        assert self.expression, 'Expression to build up the "
              "search document must be given!'\n"
              "        return [(self.name + '_index', "
              'index.FullTextSearchIndex(*self.expression))]\n')

Fragment(uuid='b2c9cb59-1e13-4f29-9eed-e74ee5e44dc2',
         path='/lib/dblayer/model/column.py',
         lineno=341,
         depth=1,
         type='class',
         name='SearchDocument',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        assert self.expression, 'Expression to build up the "
              "search document must be given!'\n"
              "        return [(self.name + '_index', "
              'index.FullTextSearchIndex(*self.expression))]')

Fragment(uuid='fe56b70f-a896-47f1-8e03-3746873306a2',
         path='/lib/dblayer/model/column.py',
         lineno=342,
         depth=3,
         type='function',
         name='get_implicit_definition_list_for_table_class',
         text='def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        if not self.implicit:\n'
              '            return []\n'
              "        assert self.expression, 'Expression to build up the "
              "search document must be given!'\n"
              "        return [(self.name + '_index', "
              'index.FullTextSearchIndex(*self.expression))]')

Fragment(uuid='e065c3db-b51b-4e85-a7dd-82562eda3f20',
         path='/lib/dblayer/model/column.py',
         lineno=345,
         depth=6,
         type='documentation',
         name='',
         text='Expression to build up the search document must be given!')

Fragment(uuid='6a712e5e-0e0a-4231-8e30-ca3d7e0d2d5a',
         path='/lib/dblayer/model/constraint.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Constraint definitions\n"""\n\nfrom dblayer import util\n')

Fragment(uuid='44d0b112-0f78-4f86-855e-478fdd858d39',
         path='/lib/dblayer/model/constraint.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Constraint definitions\n')

Fragment(uuid='bfeb7788-4fa0-41fb-be46-3bcc197d2b73',
         path='/lib/dblayer/model/constraint.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/constraint.py\n'
              '  Classes: BaseColumnConstraint BaseConstraint Check ForeignKey '
              'PrimaryKey Unique\n'
              '  Methods: __init__ __repr__ __str__ clone sort_key\n'
              '  Variables and usages: column columns dblayer expression '
              'get_next_definition_serial getattr implicit join name rsplit '
              'staticmethod table table_class tuple update util\n')

Fragment(uuid='a02d35ef-63e9-412a-b9f8-f888794555f5',
         path='/lib/dblayer/model/constraint.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='115e4011-564a-4462-abc6-73407ca8e404',
         path='/lib/dblayer/model/constraint.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='54dea199-c453-4b67-94b1-9a8296fc86a8',
         path='/lib/dblayer/model/constraint.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseConstraint:\n'
              '    """ Base class for database constraints\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of constraint '
              'definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this constraint\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this constraint')

Fragment(uuid='6c25138e-84f3-4936-bafe-533938785f87',
         path='/lib/dblayer/model/constraint.py',
         lineno=7,
         depth=1,
         type='class',
         name='BaseConstraint',
         text='class BaseConstraint:\n'
              '    """ Base class for database constraints\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of constraint '
              'definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this constraint\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this '
              'constraint ')

Fragment(uuid='75bd79eb-f702-46eb-a774-ed5910f9dfca',
         path='/lib/dblayer/model/constraint.py',
         lineno=8,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for database constraints\n    ')

Fragment(uuid='685beba4-0654-45b9-b260-d4d29a972296',
         path='/lib/dblayer/model/constraint.py',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='# Serial number to record the order of constraint definitions')

Fragment(uuid='cacacecd-19f9-4333-afbf-1f6ddb9e2ab3',
         path='/lib/dblayer/model/constraint.py',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='# Reference to the table class containing this constraint')

Fragment(uuid='eb123c86-1811-4336-b535-584f79600767',
         path='/lib/dblayer/model/constraint.py',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the table definition class')

Fragment(uuid='5ab76f36-4d4f-4701-9721-5beb6dac15f0',
         path='/lib/dblayer/model/constraint.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text=' or None for model constraints\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'constraints from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the constraint\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='0cdb2a1e-da56-4a4c-999a-59fff767773a',
         path='/lib/dblayer/model/constraint.py',
         lineno=18,
         depth=1,
         type='class',
         name='BaseConstraint',
         text='or None for model constraints\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'constraints from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the constraint\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='03b31690-f5dd-4573-9297-427b037caafc',
         path='/lib/dblayer/model/constraint.py',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='# Reference to the table instance containing this constraint or '
              'None for model constraints')

Fragment(uuid='37a0da36-0f92-4f0f-a8bb-c6631ae34cdd',
         path='/lib/dblayer/model/constraint.py',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Filled in by Table.__init__ as part of cloning the '
              'constraints from the class to the instance')

Fragment(uuid='24591eb6-d60b-4a58-a084-a54888339db4',
         path='/lib/dblayer/model/constraint.py',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='# Name of the constraint')

Fragment(uuid='35fcf5a1-2d4b-46f5-8db1-7624b14b0ee6',
         path='/lib/dblayer/model/constraint.py',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the table definition class')

Fragment(uuid='0f2ef0f2-24d7-4070-bddb-4f7cf09d14e3',
         path='/lib/dblayer/model/constraint.py',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='# Indicates that this model object is added implicitly by some '
              'other model object')

Fragment(uuid='1a46811c-a452-4fee-bc5b-5b777d90a885',
         path='/lib/dblayer/model/constraint.py',
         lineno=30,
         depth=0,
         type='module',
         name='',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='e2eafea5-eaa6-4b9a-ba21-9f842c855626',
         path='/lib/dblayer/model/constraint.py',
         lineno=30,
         depth=1,
         type='class',
         name='BaseConstraint',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='475d2ff8-cf49-4be2-a9d9-d2cfabf14f1d',
         path='/lib/dblayer/model/constraint.py',
         lineno=30,
         depth=4,
         type='function',
         name='sort_key',
         text='def sort_key(obj):\n        return obj.__definition_serial__')

Fragment(uuid='ac445664-7c57-41a3-a04c-45b80a5df288',
         path='/lib/dblayer/model/constraint.py',
         lineno=32,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self):\n'
              '        assert self.__class__ is not BaseConstraint, (\n'
              "            'Only subclasses of BaseConstraint can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n')

Fragment(uuid='6c950ae6-742f-4955-8382-80ce334940fc',
         path='/lib/dblayer/model/constraint.py',
         lineno=32,
         depth=1,
         type='class',
         name='BaseConstraint',
         text='\n'
              '    def __init__(self):\n'
              '        assert self.__class__ is not BaseConstraint, (\n'
              "            'Only subclasses of BaseConstraint can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n')

Fragment(uuid='6d3c65e2-2645-45a6-877d-da090b0f0b64',
         path='/lib/dblayer/model/constraint.py',
         lineno=33,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self):\n'
              '        assert self.__class__ is not BaseConstraint, (\n'
              "            'Only subclasses of BaseConstraint can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()')

Fragment(uuid='5c1a6dc2-e70d-4acd-a204-d15d4f624751',
         path='/lib/dblayer/model/constraint.py',
         lineno=35,
         depth=7,
         type='documentation',
         name='',
         text='Only subclasses of BaseConstraint can be instantiated!')

Fragment(uuid='2fe7023f-e585-4398-add9-bba9dcb8367a',
         path='/lib/dblayer/model/constraint.py',
         lineno=37,
         depth=4,
         type='documentation',
         name='',
         text='# Record the definition order')

Fragment(uuid='42fb0704-e399-45cd-940a-da64134a3a34',
         path='/lib/dblayer/model/constraint.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Constraint: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)\n')

Fragment(uuid='dcfef125-c68f-4fc0-b936-fa29a30f7d93',
         path='/lib/dblayer/model/constraint.py',
         lineno=39,
         depth=1,
         type='class',
         name='BaseConstraint',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Constraint: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)\n')

Fragment(uuid='cbda07f8-fd18-4d63-a427-5d9c9a0e5394',
         path='/lib/dblayer/model/constraint.py',
         lineno=40,
         depth=3,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Constraint: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)')

Fragment(uuid='c80992a6-aa8c-4596-906e-89c6d62098de',
         path='/lib/dblayer/model/constraint.py',
         lineno=41,
         depth=7,
         type='documentation',
         name='',
         text='<%s Constraint: %s.%s>')

Fragment(uuid='a46ee280-2232-4374-88b1-2d293e9a3881',
         path='/lib/dblayer/model/constraint.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s()' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__)\n')

Fragment(uuid='3b87ce9f-639f-4d61-8978-b26f10b2bae6',
         path='/lib/dblayer/model/constraint.py',
         lineno=45,
         depth=1,
         type='class',
         name='BaseConstraint',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s()' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__)\n')

Fragment(uuid='abe2a39e-c74c-4a11-84b5-55ef09597676',
         path='/lib/dblayer/model/constraint.py',
         lineno=46,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s()' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__)')

Fragment(uuid='e28f63c8-8135-4790-a3a3-a198fbd0ad09',
         path='/lib/dblayer/model/constraint.py',
         lineno=50,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this constraint for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'constraints to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='5bb5452d-c19c-4902-a280-d75c88c44192',
         path='/lib/dblayer/model/constraint.py',
         lineno=50,
         depth=1,
         type='class',
         name='BaseConstraint',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this constraint for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'constraints to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='3224556e-6753-4ef3-9a3d-5bf80d1578c4',
         path='/lib/dblayer/model/constraint.py',
         lineno=51,
         depth=3,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        """ Clone this constraint for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'constraints to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='8d65e06a-1571-4efd-aa87-ca436bb2cf86',
         path='/lib/dblayer/model/constraint.py',
         lineno=52,
         depth=6,
         type='documentation',
         name='',
         text=' Clone this constraint for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'constraints to the table instance.\n'
              '        \n'
              '        ')

Fragment(uuid='74acbbf5-e10e-49b0-bc99-b02462605b4d',
         path='/lib/dblayer/model/constraint.py',
         lineno=61,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseColumnConstraint(BaseConstraint):\n'
              '    """ Base class for constraints applied on a single column '
              'or a set of columns\n'
              '    """\n'
              '    # Tuple of the member columns\n'
              '    columns = ()\n')

Fragment(uuid='46cdd668-9fc6-4293-b778-0253cfb73da9',
         path='/lib/dblayer/model/constraint.py',
         lineno=63,
         depth=1,
         type='class',
         name='BaseColumnConstraint',
         text='class BaseColumnConstraint(BaseConstraint):\n'
              '    """ Base class for constraints applied on a single column '
              'or a set of columns\n'
              '    """\n'
              '    # Tuple of the member columns\n'
              '    columns = ()\n')

Fragment(uuid='025d5aba-4d0b-461f-88a6-8bc1c22da0ae',
         path='/lib/dblayer/model/constraint.py',
         lineno=64,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for constraints applied on a single column or a set '
              'of columns\n'
              '    ')

Fragment(uuid='f2c25111-210d-4d12-990e-8e4512028109',
         path='/lib/dblayer/model/constraint.py',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='# Tuple of the member columns')

Fragment(uuid='7d119f67-00f8-4ebb-aff2-e572067ad674',
         path='/lib/dblayer/model/constraint.py',
         lineno=68,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, *columns):\n'
              '        BaseConstraint.__init__(self)\n'
              '\n'
              '        assert self.__class__ is not BaseColumnConstraint, (\n'
              "            'Only subclasses of BaseColumnConstraint can be "
              "instantiated!')\n"
              '\n'
              "        assert columns, 'This constraint must be applied to at "
              "least one column!'\n"
              '        self.columns = columns\n')

Fragment(uuid='e4868a0f-da02-43fa-9676-758a7fd80b9d',
         path='/lib/dblayer/model/constraint.py',
         lineno=68,
         depth=1,
         type='class',
         name='BaseColumnConstraint',
         text='\n'
              '    def __init__(self, *columns):\n'
              '        BaseConstraint.__init__(self)\n'
              '\n'
              '        assert self.__class__ is not BaseColumnConstraint, (\n'
              "            'Only subclasses of BaseColumnConstraint can be "
              "instantiated!')\n"
              '\n'
              "        assert columns, 'This constraint must be applied to at "
              "least one column!'\n"
              '        self.columns = columns\n')

Fragment(uuid='af76132d-071a-45ff-8db0-9a2ddcbeb4cc',
         path='/lib/dblayer/model/constraint.py',
         lineno=69,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, *columns):\n'
              '        BaseConstraint.__init__(self)\n'
              '\n'
              '        assert self.__class__ is not BaseColumnConstraint, (\n'
              "            'Only subclasses of BaseColumnConstraint can be "
              "instantiated!')\n"
              '\n'
              "        assert columns, 'This constraint must be applied to at "
              "least one column!'\n"
              '        self.columns = columns')

Fragment(uuid='721d4ea8-87bb-4b9d-86b2-0a761b7d7ed3',
         path='/lib/dblayer/model/constraint.py',
         lineno=73,
         depth=7,
         type='documentation',
         name='',
         text='Only subclasses of BaseColumnConstraint can be instantiated!')

Fragment(uuid='28a384ec-3642-49bd-a3da-fc228865a7ff',
         path='/lib/dblayer/model/constraint.py',
         lineno=75,
         depth=6,
         type='documentation',
         name='',
         text='This constraint must be applied to at least one column!')

Fragment(uuid='e6f40b33-b4e5-4e4e-b2df-451f27dcb433',
         path='/lib/dblayer/model/constraint.py',
         lineno=77,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Constraint: %s.%s on %r>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            tuple(column.name for column in self.columns))\n')

Fragment(uuid='853ec78c-5a20-4fb6-b8be-9f0b310afec8',
         path='/lib/dblayer/model/constraint.py',
         lineno=77,
         depth=1,
         type='class',
         name='BaseColumnConstraint',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Constraint: %s.%s on %r>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            tuple(column.name for column in self.columns))\n')

Fragment(uuid='bd2724cf-8b51-44cf-af2d-267e3fc733bb',
         path='/lib/dblayer/model/constraint.py',
         lineno=78,
         depth=3,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Constraint: %s.%s on %r>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              '            tuple(column.name for column in self.columns))')

Fragment(uuid='14071ee8-1d88-45a1-9720-6d8efd528797',
         path='/lib/dblayer/model/constraint.py',
         lineno=79,
         depth=7,
         type='documentation',
         name='',
         text='<%s Constraint: %s.%s on %r>')

Fragment(uuid='01402a96-b458-4d7d-9aab-a2a82ef40714',
         path='/lib/dblayer/model/constraint.py',
         lineno=84,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='17ad07f4-3b9f-4cf3-b120-0843dbaa1716',
         path='/lib/dblayer/model/constraint.py',
         lineno=84,
         depth=1,
         type='class',
         name='BaseColumnConstraint',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='eb805ee9-d484-40b2-862f-b12576f6fc38',
         path='/lib/dblayer/model/constraint.py',
         lineno=85,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))")

Fragment(uuid='788d9f61-c9d2-4484-b737-494544fd14b9',
         path='/lib/dblayer/model/constraint.py',
         lineno=90,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        clone = BaseConstraint.clone(self, table)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        return clone\n')

Fragment(uuid='603f2d38-e799-4beb-8b28-bbd00a9b5b63',
         path='/lib/dblayer/model/constraint.py',
         lineno=90,
         depth=1,
         type='class',
         name='BaseColumnConstraint',
         text='\n'
              '    def clone(self, table):\n'
              '        clone = BaseConstraint.clone(self, table)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        return clone')

Fragment(uuid='a3bccb6b-41fb-4df3-8f6c-095e15019e25',
         path='/lib/dblayer/model/constraint.py',
         lineno=91,
         depth=3,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        clone = BaseConstraint.clone(self, table)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        return clone')

Fragment(uuid='1281b5ed-a3de-4193-a8cd-5be3bfe5f015',
         path='/lib/dblayer/model/constraint.py',
         lineno=95,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class PrimaryKey(BaseColumnConstraint):\n'
              '    """ Primary key constraint\n'
              '    """\n')

Fragment(uuid='e06bd448-6fab-49cc-ad6c-715f7d0fbc1c',
         path='/lib/dblayer/model/constraint.py',
         lineno=97,
         depth=1,
         type='class',
         name='PrimaryKey',
         text='class PrimaryKey(BaseColumnConstraint):\n'
              '    """ Primary key constraint\n'
              '    """')

Fragment(uuid='181a68e8-5cc2-4174-bfd3-4f9ae9af0107',
         path='/lib/dblayer/model/constraint.py',
         lineno=98,
         depth=4,
         type='documentation',
         name='',
         text=' Primary key constraint\n    ')

Fragment(uuid='40b8b38c-a25e-4939-95bc-88b4bfa729cd',
         path='/lib/dblayer/model/constraint.py',
         lineno=100,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class ForeignKey(BaseColumnConstraint):\n'
              '    """ Foreign key constraint\n'
              '    """\n')

Fragment(uuid='e92e2619-ce3b-47ca-8c65-d11942a3646a',
         path='/lib/dblayer/model/constraint.py',
         lineno=102,
         depth=1,
         type='class',
         name='ForeignKey',
         text='class ForeignKey(BaseColumnConstraint):\n'
              '    """ Foreign key constraint\n'
              '    """')

Fragment(uuid='3667bede-33b8-43cf-b1b9-87c6ac652b87',
         path='/lib/dblayer/model/constraint.py',
         lineno=103,
         depth=4,
         type='documentation',
         name='',
         text=' Foreign key constraint\n    ')

Fragment(uuid='798d08f4-110f-4b67-9d86-c6ef34d01070',
         path='/lib/dblayer/model/constraint.py',
         lineno=105,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Unique(BaseColumnConstraint):\n'
              '    """ Unique index constraint\n'
              '    """\n')

Fragment(uuid='a266ce3b-a433-4c24-98b5-566706141f17',
         path='/lib/dblayer/model/constraint.py',
         lineno=107,
         depth=1,
         type='class',
         name='Unique',
         text='class Unique(BaseColumnConstraint):\n'
              '    """ Unique index constraint\n'
              '    """')

Fragment(uuid='429939c4-620e-457b-816e-34d0f0833f51',
         path='/lib/dblayer/model/constraint.py',
         lineno=108,
         depth=4,
         type='documentation',
         name='',
         text=' Unique index constraint\n    ')

Fragment(uuid='76a3aacd-56c5-4a2b-8083-0d628da69098',
         path='/lib/dblayer/model/constraint.py',
         lineno=110,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Check(BaseConstraint):\n'
              '    """ Constraint given as a free expression on the record '
              'fields\n'
              '    """\n'
              '\n'
              '    def __init__(self, expression):\n'
              '        BaseConstraint.__init__(self)\n'
              '        self.expression = expression\n'
              '\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.expression)\n')

Fragment(uuid='a25e5e9a-340d-49ab-9cbf-1d37038ec9b8',
         path='/lib/dblayer/model/constraint.py',
         lineno=112,
         depth=1,
         type='class',
         name='Check',
         text='class Check(BaseConstraint):\n'
              '    """ Constraint given as a free expression on the record '
              'fields\n'
              '    """\n'
              '\n'
              '    def __init__(self, expression):\n'
              '        BaseConstraint.__init__(self)\n'
              '        self.expression = expression\n'
              '\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.expression)')

Fragment(uuid='b88697d5-63ac-472a-8cc8-3378d0d23832',
         path='/lib/dblayer/model/constraint.py',
         lineno=113,
         depth=4,
         type='documentation',
         name='',
         text=' Constraint given as a free expression on the record fields\n'
              '    ')

Fragment(uuid='3eb52e76-9e8c-4c09-a14e-98ec4f9e94a3',
         path='/lib/dblayer/model/constraint.py',
         lineno=116,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, expression):\n'
              '        BaseConstraint.__init__(self)\n'
              '        self.expression = expression')

Fragment(uuid='acbe4a5e-c9a3-46bd-89fa-e127127cfe1e',
         path='/lib/dblayer/model/constraint.py',
         lineno=120,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.expression)')

Fragment(uuid='ed00bcb2-3bbf-448b-b03e-e9f052f0da93',
         path='/lib/dblayer/model/database.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Base class for database models\n'
              '\n'
              'Database models are used to collect the tables, views and '
              'queries building\n'
              'up a single database or schema. It is used to generate the code '
              'for the\n'
              'database abstraction layer used by the actual application. It '
              'is not used\n'
              'directly to access the database, it only represents the model '
              'of the database\n'
              'or schema.\n'
              '\n'
              '"""\n'
              '\n'
              'from dblayer.generator import generator\n'
              'from dblayer.model import table, column, procedure\n')

Fragment(uuid='93ab9984-42ae-4d5c-8e17-e8e99cee8c06',
         path='/lib/dblayer/model/database.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Base class for database models\n'
              '\n'
              'Database models are used to collect the tables, views and '
              'queries building\n'
              'up a single database or schema. It is used to generate the code '
              'for the\n'
              'database abstraction layer used by the actual application. It '
              'is not used\n'
              'directly to access the database, it only represents the model '
              'of the database\n'
              'or schema.\n'
              '\n')

Fragment(uuid='b29e7c51-1bb5-4664-b23a-bed9c5832e0a',
         path='/lib/dblayer/model/database.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/database.py\n'
              '  Classes: Database\n'
              '  Methods: __init__ __new__ __repr__ __str__ generate '
              'initialize pretty_format_class\n'
              '  Variables and usages: BaseProcedure ForeignKey Procedure '
              'Table _abstraction_class_name _column_list _database_class '
              '_initialized _name _procedure_list _sort_key _table_list '
              '_table_name abstraction_class_name append append_line args '
              'backend classmethod column database_class dblayer fk_column '
              'generator getattr join line_list model name options procedure '
              'referenced_table referenced_table_class rsplit sort sort_key '
              'split strip table table_instance table_map value\n')

Fragment(uuid='e2382677-b97e-45e5-a956-aa05450fce32',
         path='/lib/dblayer/model/database.py',
         lineno=11,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='9c332edc-8e40-455d-83b9-9581ceb43b23',
         path='/lib/dblayer/model/database.py',
         lineno=11,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='5446a5d8-452e-4f7f-82b8-c57a3071608b',
         path='/lib/dblayer/model/database.py',
         lineno=12,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='fb125297-c9a8-4ad1-a553-85fd33e38080',
         path='/lib/dblayer/model/database.py',
         lineno=12,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='969b64a0-d1cb-4299-9438-5d37b3f649f1',
         path='/lib/dblayer/model/database.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Database:\n'
              '    """ Base class for database models\n'
              '    """\n'
              '\n'
              '    # Flag indicating that the model has been initialized\n'
              '    _initialized = False\n'
              '\n'
              '    # List of initialized table models in the database\n'
              '    _table_list = ()\n'
              '\n'
              '    # List of initialized stored procedure definitions in the '
              'database\n'
              '    _procedure_list = ()\n'
              '\n'
              '    # Name of the abstraction layer class\n'
              "    _abstraction_class_name = ''\n")

Fragment(uuid='8cf0c4e5-d302-40f8-874e-6cd9eee73dbe',
         path='/lib/dblayer/model/database.py',
         lineno=15,
         depth=1,
         type='class',
         name='Database',
         text='class Database:\n'
              '    """ Base class for database models\n'
              '    """\n'
              '\n'
              '    # Flag indicating that the model has been initialized\n'
              '    _initialized = False\n'
              '\n'
              '    # List of initialized table models in the database\n'
              '    _table_list = ()\n'
              '\n'
              '    # List of initialized stored procedure definitions in the '
              'database\n'
              '    _procedure_list = ()\n'
              '\n'
              '    # Name of the abstraction layer class\n'
              "    _abstraction_class_name = ''\n")

Fragment(uuid='bf3876fd-01db-4e03-9f63-e95ed1d2c584',
         path='/lib/dblayer/model/database.py',
         lineno=16,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for database models\n    ')

Fragment(uuid='bdcb33b3-e879-42fa-882b-1dc6638dfdfd',
         path='/lib/dblayer/model/database.py',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='# Flag indicating that the model has been initialized')

Fragment(uuid='070175f5-2536-496b-834a-da6f6c41a1b1',
         path='/lib/dblayer/model/database.py',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='# List of initialized table models in the database')

Fragment(uuid='ff566b2d-078a-4edf-918a-cf2c27a8d517',
         path='/lib/dblayer/model/database.py',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='# List of initialized stored procedure definitions in the '
              'database')

Fragment(uuid='3333329f-e7ef-4ab9-a3dd-8c75651f69ea',
         path='/lib/dblayer/model/database.py',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='# Name of the abstraction layer class')

Fragment(uuid='b8db71b2-c5fa-4a81-8fbd-c0c0683d6b96',
         path='/lib/dblayer/model/database.py',
         lineno=30,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __new__(cls, *args, **kws):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Database, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='0a312faa-404c-4e59-8b58-70e00665329b',
         path='/lib/dblayer/model/database.py',
         lineno=30,
         depth=1,
         type='class',
         name='Database',
         text='\n'
              '    def __new__(cls, *args, **kws):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Database, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='0c292ceb-b9c8-4e53-a74e-44a6e0b28ed1',
         path='/lib/dblayer/model/database.py',
         lineno=31,
         depth=3,
         type='function',
         name='__new__',
         text='def __new__(cls, *args, **kws):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Database, cls).__new__(cls)')

Fragment(uuid='3f94c225-d7fe-4b5b-b25a-3703a8e27291',
         path='/lib/dblayer/model/database.py',
         lineno=32,
         depth=3,
         type='documentation',
         name='',
         text='# Initialize the class only once')

Fragment(uuid='93794c45-66e2-4b64-a53a-b7b8008f8401',
         path='/lib/dblayer/model/database.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='    def initialize(cls):\n'
              '        """ Initialize the model objects and resolve all '
              'cross-dependencies\n'
              '        """\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to tables and collect them\n'
              '        cls._table_list = []\n'
              '        cls._procedure_list = []\n')

Fragment(uuid='e510e6ad-0a30-4569-8191-398cdbaf7c25',
         path='/lib/dblayer/model/database.py',
         lineno=39,
         depth=1,
         type='class',
         name='Database',
         text='    def initialize(cls):\n'
              '        """ Initialize the model objects and resolve all '
              'cross-dependencies\n'
              '        """\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to tables and collect them\n'
              '        cls._table_list = []\n'
              '        cls._procedure_list = []\n')

Fragment(uuid='965164ce-b640-42bf-987a-00542dcd703f',
         path='/lib/dblayer/model/database.py',
         lineno=39,
         depth=4,
         type='function',
         name='initialize',
         text='def initialize(cls):\n'
              '        """ Initialize the model objects and resolve all '
              'cross-dependencies\n'
              '        """\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to tables and collect them\n'
              '        cls._table_list = []\n'
              '        cls._procedure_list = []\n')

Fragment(uuid='3dc7601d-8f54-4e48-a70c-82f48d8c084b',
         path='/lib/dblayer/model/database.py',
         lineno=40,
         depth=7,
         type='documentation',
         name='',
         text=' Initialize the model objects and resolve all '
              'cross-dependencies\n'
              '        ')

Fragment(uuid='abb3f978-5fd5-4008-8bb1-926480601026',
         path='/lib/dblayer/model/database.py',
         lineno=44,
         depth=5,
         type='documentation',
         name='',
         text='# Assign name to tables and collect them')

Fragment(uuid='6c2b40c0-9471-4a2c-ae26-24dcd69232b6',
         path='/lib/dblayer/model/database.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='291ea5b8-1f1b-4d74-a220-f3219a15f115',
         path='/lib/dblayer/model/database.py',
         lineno=47,
         depth=1,
         type='class',
         name='Database',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='d294be4b-3c64-4592-a7d4-802c6cc8c405',
         path='/lib/dblayer/model/database.py',
         lineno=47,
         depth=4,
         type='function',
         name='initialize',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='14c6090a-14e8-46c4-a9bb-1b0461358503',
         path='/lib/dblayer/model/database.py',
         lineno=49,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if isinstance(value, table.Table):\n'
              "                assert value._database_class is None, 'Table "
              "already bound to a database class!'\n"
              '                value.__class__._table_name = name\n'
              '                value._name = name\n'
              '                value._database_class = cls\n'
              '                cls._table_list.append(value)\n')

Fragment(uuid='4354c299-122f-4de3-8b37-4efd951d9a26',
         path='/lib/dblayer/model/database.py',
         lineno=49,
         depth=1,
         type='class',
         name='Database',
         text='\n'
              '            if isinstance(value, table.Table):\n'
              "                assert value._database_class is None, 'Table "
              "already bound to a database class!'\n"
              '                value.__class__._table_name = name\n'
              '                value._name = name\n'
              '                value._database_class = cls\n'
              '                cls._table_list.append(value)\n')

Fragment(uuid='c72f1039-a25a-4b91-8fcb-f19f52249ff5',
         path='/lib/dblayer/model/database.py',
         lineno=49,
         depth=4,
         type='function',
         name='initialize',
         text='\n'
              '            if isinstance(value, table.Table):\n'
              "                assert value._database_class is None, 'Table "
              "already bound to a database class!'\n"
              '                value.__class__._table_name = name\n'
              '                value._name = name\n'
              '                value._database_class = cls\n'
              '                cls._table_list.append(value)\n')

Fragment(uuid='238a26d6-1b28-4439-97d0-fadebb254a29',
         path='/lib/dblayer/model/database.py',
         lineno=51,
         depth=11,
         type='documentation',
         name='',
         text='Table already bound to a database class!')

Fragment(uuid='2882e3fd-8257-486e-811f-dff05d61e14e',
         path='/lib/dblayer/model/database.py',
         lineno=56,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            elif isinstance(value, procedure.BaseProcedure):\n'
              '                value.name = name\n'
              '                value.database_class = cls\n'
              '                cls._procedure_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._table_list.sort(key=table.Table._sort_key)\n'
              '        '
              'cls._procedure_list.sort(key=procedure.Procedure.sort_key)\n'
              '\n'
              '        # Connect all foreign keys by looking up the referenced '
              'tables\n'
              '        table_map = dict(\n'
              '            (table_instance.__class__.__name__, '
              'table_instance)\n')

Fragment(uuid='c04e921e-9175-4a3d-8ca2-4620f5b02822',
         path='/lib/dblayer/model/database.py',
         lineno=56,
         depth=1,
         type='class',
         name='Database',
         text='\n'
              '            elif isinstance(value, procedure.BaseProcedure):\n'
              '                value.name = name\n'
              '                value.database_class = cls\n'
              '                cls._procedure_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._table_list.sort(key=table.Table._sort_key)\n'
              '        '
              'cls._procedure_list.sort(key=procedure.Procedure.sort_key)\n'
              '\n'
              '        # Connect all foreign keys by looking up the referenced '
              'tables\n'
              '        table_map = dict(\n'
              '            (table_instance.__class__.__name__, '
              'table_instance)\n')

Fragment(uuid='76342573-3afd-4977-960e-6f0addf19b79',
         path='/lib/dblayer/model/database.py',
         lineno=56,
         depth=4,
         type='function',
         name='initialize',
         text='\n'
              '            elif isinstance(value, procedure.BaseProcedure):\n'
              '                value.name = name\n'
              '                value.database_class = cls\n'
              '                cls._procedure_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._table_list.sort(key=table.Table._sort_key)\n'
              '        '
              'cls._procedure_list.sort(key=procedure.Procedure.sort_key)\n'
              '\n'
              '        # Connect all foreign keys by looking up the referenced '
              'tables\n'
              '        table_map = dict(\n'
              '            (table_instance.__class__.__name__, '
              'table_instance)\n')

Fragment(uuid='54525f82-e922-46d9-b1f4-6b6ef01fb217',
         path='/lib/dblayer/model/database.py',
         lineno=62,
         depth=5,
         type='documentation',
         name='',
         text='# Sort them by definition order')

Fragment(uuid='42f59f02-684b-47c0-9539-fc0b21ca04f7',
         path='/lib/dblayer/model/database.py',
         lineno=66,
         depth=5,
         type='documentation',
         name='',
         text='# Connect all foreign keys by looking up the referenced tables')

Fragment(uuid='89758f9f-6f43-4084-b884-53e49629754d',
         path='/lib/dblayer/model/database.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='            for table_instance in cls._table_list)\n'
              '        assert len(table_map) == len(cls._table_list), (\n'
              "            'Some of the table classes were used more than once "
              "to construct the database model!')\n")

Fragment(uuid='0b669738-d346-475a-a62f-dba5b6ece68c',
         path='/lib/dblayer/model/database.py',
         lineno=69,
         depth=1,
         type='class',
         name='Database',
         text='            for table_instance in cls._table_list)\n'
              '        assert len(table_map) == len(cls._table_list), (\n'
              "            'Some of the table classes were used more than once "
              "to construct the database model!')\n")

Fragment(uuid='d5d90846-b103-48d6-9461-cc260d54a93d',
         path='/lib/dblayer/model/database.py',
         lineno=69,
         depth=4,
         type='function',
         name='initialize',
         text='            for table_instance in cls._table_list)\n'
              '        assert len(table_map) == len(cls._table_list), (\n'
              "            'Some of the table classes were used more than once "
              "to construct the database model!')\n")

Fragment(uuid='84f6f091-5275-4bfb-b4ed-52c9a9a20311',
         path='/lib/dblayer/model/database.py',
         lineno=71,
         depth=8,
         type='documentation',
         name='',
         text='Some of the table classes were used more than once to construct '
              'the database model!')

Fragment(uuid='77e2c4ba-53ad-49db-b543-4f8c22a3b775',
         path='/lib/dblayer/model/database.py',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='        for table_instance in cls._table_list:\n')

Fragment(uuid='04b419a0-bde7-4f39-b781-6ff5d7b0f712',
         path='/lib/dblayer/model/database.py',
         lineno=72,
         depth=1,
         type='class',
         name='Database',
         text='        for table_instance in cls._table_list:\n')

Fragment(uuid='bf8250ec-0175-4449-96ac-e4f42c170d0c',
         path='/lib/dblayer/model/database.py',
         lineno=72,
         depth=4,
         type='function',
         name='initialize',
         text='        for table_instance in cls._table_list:\n')

Fragment(uuid='67f510e6-28e2-4003-9f07-9e78e1d73ef2',
         path='/lib/dblayer/model/database.py',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text='            for fk_column in table_instance._column_list:\n'
              '                if isinstance(fk_column, column.ForeignKey):\n'
              '                    referenced_table = '
              'table_map.get(fk_column.referenced_table_class.__name__)\n'
              '                    assert referenced_table, (\n'
              "                            'Could not find referenced database "
              "table for foreign key: %s.%s' %\n"
              '                            (table_instance.__class__.__name__, '
              'fk_column.name))\n'
              '                    fk_column.referenced_table = '
              'referenced_table\n')

Fragment(uuid='16efcd7d-fe26-442a-afd7-448f4ec3d334',
         path='/lib/dblayer/model/database.py',
         lineno=73,
         depth=1,
         type='class',
         name='Database',
         text='            for fk_column in table_instance._column_list:\n'
              '                if isinstance(fk_column, column.ForeignKey):\n'
              '                    referenced_table = '
              'table_map.get(fk_column.referenced_table_class.__name__)\n'
              '                    assert referenced_table, (\n'
              "                            'Could not find referenced database "
              "table for foreign key: %s.%s' %\n"
              '                            (table_instance.__class__.__name__, '
              'fk_column.name))\n'
              '                    fk_column.referenced_table = '
              'referenced_table\n')

Fragment(uuid='63c276c2-80a3-433f-9824-9c644abd9b7e',
         path='/lib/dblayer/model/database.py',
         lineno=73,
         depth=4,
         type='function',
         name='initialize',
         text='            for fk_column in table_instance._column_list:\n'
              '                if isinstance(fk_column, column.ForeignKey):\n'
              '                    referenced_table = '
              'table_map.get(fk_column.referenced_table_class.__name__)\n'
              '                    assert referenced_table, (\n'
              "                            'Could not find referenced database "
              "table for foreign key: %s.%s' %\n"
              '                            (table_instance.__class__.__name__, '
              'fk_column.name))\n'
              '                    fk_column.referenced_table = '
              'referenced_table')

Fragment(uuid='8ee88124-f0f9-4b9c-9d7f-98fb341a7e45',
         path='/lib/dblayer/model/database.py',
         lineno=77,
         depth=15,
         type='documentation',
         name='',
         text='Could not find referenced database table for foreign key: %s.%s')

Fragment(uuid='a9127cbe-273b-4c78-a87a-90d363f2576a',
         path='/lib/dblayer/model/database.py',
         lineno=80,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, abstraction_class_name):\n'
              '        self._abstraction_class_name = abstraction_class_name\n')

Fragment(uuid='afcd7a01-5a6b-4750-8be9-cf9841aaa9d8',
         path='/lib/dblayer/model/database.py',
         lineno=80,
         depth=1,
         type='class',
         name='Database',
         text='\n'
              '    def __init__(self, abstraction_class_name):\n'
              '        self._abstraction_class_name = abstraction_class_name\n')

Fragment(uuid='5da5bcc9-6bad-401c-8acf-f4913a93364c',
         path='/lib/dblayer/model/database.py',
         lineno=81,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, abstraction_class_name):\n'
              '        self._abstraction_class_name = abstraction_class_name')

Fragment(uuid='143bf485-e2e1-4540-962a-ef8381345331',
         path='/lib/dblayer/model/database.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Database>' % self.__class__.__name__\n")

Fragment(uuid='8f470c81-769d-4241-b428-c2832ca7daea',
         path='/lib/dblayer/model/database.py',
         lineno=83,
         depth=1,
         type='class',
         name='Database',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Database>' % self.__class__.__name__\n")

Fragment(uuid='7a6cffa5-fa5a-428f-ba95-e1683b59e595',
         path='/lib/dblayer/model/database.py',
         lineno=84,
         depth=3,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Database>' % self.__class__.__name__")

Fragment(uuid='2415170f-f9d5-433f-9452-95c864dacb81',
         path='/lib/dblayer/model/database.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self._abstraction_class_name)\n')

Fragment(uuid='798611b3-d0f3-48b0-aff7-e70294b531e1',
         path='/lib/dblayer/model/database.py',
         lineno=86,
         depth=1,
         type='class',
         name='Database',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self._abstraction_class_name)\n')

Fragment(uuid='288cf482-e0aa-42f3-8aed-ff97db7e4b07',
         path='/lib/dblayer/model/database.py',
         lineno=87,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self._abstraction_class_name)')

Fragment(uuid='59c8112c-e139-4a65-93b7-e5def61cb024',
         path='/lib/dblayer/model/database.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def generate(self, backend, options=None):\n'
              '        """ Generate database abstraction layer module for use '
              'with the given\n'
              '        database server specific backend module\n'
              '        """\n'
              '        return generator.generate(self, backend, '
              'self._abstraction_class_name, options)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='878fa750-7fb6-4279-8aa2-430636629b28',
         path='/lib/dblayer/model/database.py',
         lineno=92,
         depth=1,
         type='class',
         name='Database',
         text='\n'
              '    def generate(self, backend, options=None):\n'
              '        """ Generate database abstraction layer module for use '
              'with the given\n'
              '        database server specific backend module\n'
              '        """\n'
              '        return generator.generate(self, backend, '
              'self._abstraction_class_name, options)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='1204a0dd-1905-4fae-89fd-230286ad93d9',
         path='/lib/dblayer/model/database.py',
         lineno=93,
         depth=3,
         type='function',
         name='generate',
         text='def generate(self, backend, options=None):\n'
              '        """ Generate database abstraction layer module for use '
              'with the given\n'
              '        database server specific backend module\n'
              '        """\n'
              '        return generator.generate(self, backend, '
              'self._abstraction_class_name, options)')

Fragment(uuid='d869e9dc-9406-424e-bf92-857ba4ddcddc',
         path='/lib/dblayer/model/database.py',
         lineno=94,
         depth=6,
         type='documentation',
         name='',
         text=' Generate database abstraction layer module for use with the '
              'given\n'
              '        database server specific backend module\n'
              '        ')

Fragment(uuid='36745021-bba1-4d7d-b918-6159cb54fade',
         path='/lib/dblayer/model/database.py',
         lineno=100,
         depth=0,
         type='module',
         name='',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the database model, '
              'including all the tables used in it\n'
              '        """\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = '''\\\n"
              'import dblayer\n'
              'import dblayer.backend.postgresql\n'
              'from dblayer.model import database, table, query\n'
              'from dblayer.model import column, index, constraint, aggregate, '
              'function, trigger, procedure\n'
              "'''.split('\\n')\n"
              '        append_line = line_list.append\n')

Fragment(uuid='46838704-9d62-40f8-97d2-9d7fbc4351d2',
         path='/lib/dblayer/model/database.py',
         lineno=100,
         depth=1,
         type='class',
         name='Database',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the database model, '
              'including all the tables used in it\n'
              '        """\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = '''\\\n"
              'import dblayer\n'
              'import dblayer.backend.postgresql\n'
              'from dblayer.model import database, table, query\n'
              'from dblayer.model import column, index, constraint, aggregate, '
              'function, trigger, procedure\n'
              "'''.split('\\n')\n"
              '        append_line = line_list.append\n')

Fragment(uuid='c41823b8-b16a-4b6e-ae17-5da2ce48efed',
         path='/lib/dblayer/model/database.py',
         lineno=100,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='def pretty_format_class(cls):\n'
              '        """ Formats source code defining the database model, '
              'including all the tables used in it\n'
              '        """\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = '''\\\n"
              'import dblayer\n'
              'import dblayer.backend.postgresql\n'
              'from dblayer.model import database, table, query\n'
              'from dblayer.model import column, index, constraint, aggregate, '
              'function, trigger, procedure\n'
              "'''.split('\\n')\n"
              '        append_line = line_list.append\n')

Fragment(uuid='e18af939-1f78-4dc5-9f7f-bf81b2d972fd',
         path='/lib/dblayer/model/database.py',
         lineno=101,
         depth=7,
         type='documentation',
         name='',
         text=' Formats source code defining the database model, including all '
              'the tables used in it\n'
              '        ')

Fragment(uuid='60156bd8-654b-4998-9d46-3e9c943f3364',
         path='/lib/dblayer/model/database.py',
         lineno=103,
         depth=5,
         type='documentation',
         name='',
         text='# Initialize the class only once')

Fragment(uuid='2cd66f03-c41f-4653-bc60-9f5ef779b6ec',
         path='/lib/dblayer/model/database.py',
         lineno=107,
         depth=10,
         type='documentation',
         name='',
         text='\\\n'
              'import dblayer\n'
              'import dblayer.backend.postgresql\n'
              'from dblayer.model import database, table, query\n'
              'from dblayer.model import column, index, constraint, aggregate, '
              'function, trigger, procedure\n')

Fragment(uuid='0e9a8c16-01e5-4b2c-a28c-47212d560873',
         path='/lib/dblayer/model/database.py',
         lineno=114,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              '            append_line(obj.__class__.pretty_format_class())\n'
              "            append_line('')\n"
              '\n'
              "        append_line('class %s(database.Database):' % "
              'cls.__name__)\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='b04c0944-0d87-4bfd-9bb2-7af918ff1b6d',
         path='/lib/dblayer/model/database.py',
         lineno=114,
         depth=1,
         type='class',
         name='Database',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              '            append_line(obj.__class__.pretty_format_class())\n'
              "            append_line('')\n"
              '\n'
              "        append_line('class %s(database.Database):' % "
              'cls.__name__)\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='3bf60ac1-c183-48b9-8214-6ca5368da695',
         path='/lib/dblayer/model/database.py',
         lineno=114,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              '            append_line(obj.__class__.pretty_format_class())\n'
              "            append_line('')\n"
              '\n'
              "        append_line('class %s(database.Database):' % "
              'cls.__name__)\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='5da37c70-61ab-4478-9e74-7bc68086d433',
         path='/lib/dblayer/model/database.py',
         lineno=120,
         depth=10,
         type='documentation',
         name='',
         text='class %s(database.Database):')

Fragment(uuid='0b17cf4f-2d6c-47ec-a30b-ec8a17b21de7',
         path='/lib/dblayer/model/database.py',
         lineno=129,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              "            append_line('    %s = %s()' % (obj._name, "
              'obj.__class__.__name__))\n')

Fragment(uuid='fb1ceafa-b230-44fc-a31b-497617a65f97',
         path='/lib/dblayer/model/database.py',
         lineno=129,
         depth=1,
         type='class',
         name='Database',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              "            append_line('    %s = %s()' % (obj._name, "
              'obj.__class__.__name__))\n')

Fragment(uuid='88744a9d-3dde-401c-9b27-c60136b97d5d',
         path='/lib/dblayer/model/database.py',
         lineno=129,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._table_list:\n'
              '            assert isinstance(obj, table.Table)\n'
              "            append_line('    %s = %s()' % (obj._name, "
              'obj.__class__.__name__))\n')

Fragment(uuid='e657914f-ba1f-4c2f-b5b3-5a8f0898b8bf',
         path='/lib/dblayer/model/database.py',
         lineno=133,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._procedure_list:\n'
              '            assert isinstance(obj, procedure.Procedure)\n'
              "            append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              "        return '\\n'.join(line_list)\n")

Fragment(uuid='67aec859-13ba-42f0-81c2-33ad66c569cf',
         path='/lib/dblayer/model/database.py',
         lineno=133,
         depth=1,
         type='class',
         name='Database',
         text='\n'
              '        for obj in cls._procedure_list:\n'
              '            assert isinstance(obj, procedure.Procedure)\n'
              "            append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='4c3e3f51-aec4-43cd-a20a-18fe6c5d0a7c',
         path='/lib/dblayer/model/database.py',
         lineno=133,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._procedure_list:\n'
              '            assert isinstance(obj, procedure.Procedure)\n'
              "            append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='aa6dddbb-f99b-4d3d-b347-5fb13ad2836b',
         path='/lib/dblayer/model/function.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Functions can be used in result expressions of queries\n'
              '"""\n')

Fragment(uuid='1958308e-40a1-43f4-8725-06d220a07308',
         path='/lib/dblayer/model/function.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Functions can be used in result expressions of queries\n')

Fragment(uuid='7bb8f952-0d9d-44d6-a69c-32bbe4f70fa7',
         path='/lib/dblayer/model/function.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/function.py\n'
              '  Classes: Add And BaseFunction Coalesce Concat Contains Custom '
              'Div Equal FullTextSearch GreaterThan GreaterThanOrEqual In Left '
              'LessThan LessThanOrEqual Like Match Mul Neg Not NotEqual NotIn '
              'NotLike NotMatch Or Right Sub Substring Var\n'
              '  Methods: __init__ __repr__ __str__\n'
              '  Variables and usages: args column join length pattern '
              'position repr rsplit substring text tuple\n')

Fragment(uuid='2e0a6cf1-6a18-4f6c-b854-8a906775de63',
         path='/lib/dblayer/model/function.py',
         lineno=3,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseFunction:\n'
              '    """ Base class for functions\n'
              '    """\n'
              '\n'
              '    def __init__(self, *args):\n'
              '        self.args = args\n'
              '\n'
              '        assert self.__class__ is not BaseFunction, (\n'
              "            'Only subclasses of BaseFunction can be "
              "instantiated!')\n"
              '\n'
              '    def __str__(self):\n'
              "        return '<%s%r>' % (self.__class__.__name__, "
              'tuple(self.args))\n'
              '\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(map(repr, self.args)))\n"
              '\n'
              '\n'
              '### Custom\n')

Fragment(uuid='040acab1-971d-4d77-a974-aa45e0a59531',
         path='/lib/dblayer/model/function.py',
         lineno=5,
         depth=1,
         type='class',
         name='BaseFunction',
         text='class BaseFunction:\n'
              '    """ Base class for functions\n'
              '    """\n'
              '\n'
              '    def __init__(self, *args):\n'
              '        self.args = args\n'
              '\n'
              '        assert self.__class__ is not BaseFunction, (\n'
              "            'Only subclasses of BaseFunction can be "
              "instantiated!')\n"
              '\n'
              '    def __str__(self):\n'
              "        return '<%s%r>' % (self.__class__.__name__, "
              'tuple(self.args))\n'
              '\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(map(repr, self.args)))")

Fragment(uuid='8ffae337-8d0c-441a-b98b-7e571d901027',
         path='/lib/dblayer/model/function.py',
         lineno=6,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for functions\n    ')

Fragment(uuid='dc41f63f-1afd-4fdc-9be2-54a6392419ba',
         path='/lib/dblayer/model/function.py',
         lineno=9,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, *args):\n'
              '        self.args = args\n'
              '\n'
              '        assert self.__class__ is not BaseFunction, (\n'
              "            'Only subclasses of BaseFunction can be "
              "instantiated!')")

Fragment(uuid='1b4deb38-b2d0-4e42-b0a7-62aefeb2d450',
         path='/lib/dblayer/model/function.py',
         lineno=13,
         depth=7,
         type='documentation',
         name='',
         text='Only subclasses of BaseFunction can be instantiated!')

Fragment(uuid='f0650fc1-f2c6-4d2e-bbef-e93070edb05c',
         path='/lib/dblayer/model/function.py',
         lineno=15,
         depth=3,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s%r>' % (self.__class__.__name__, "
              'tuple(self.args))')

Fragment(uuid='d16e473e-211b-4974-862e-e4b2fb92f03d',
         path='/lib/dblayer/model/function.py',
         lineno=18,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(map(repr, self.args)))")

Fragment(uuid='9ca6dbc4-5561-4d7c-89d6-616d7d08aac5',
         path='/lib/dblayer/model/function.py',
         lineno=26,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Custom(BaseFunction):\n'
              '    """ Custom function\n'
              '    \n'
              "    It is useful for inspected databases, where we don't have "
              'expressions in parsed format.\n'
              '    \n'
              '    """\n'
              '\n'
              '\n'
              '### Variable\n')

Fragment(uuid='8c47b125-8f49-4749-b010-35319f717c85',
         path='/lib/dblayer/model/function.py',
         lineno=27,
         depth=1,
         type='class',
         name='Custom',
         text='class Custom(BaseFunction):\n'
              '    """ Custom function\n'
              '    \n'
              "    It is useful for inspected databases, where we don't have "
              'expressions in parsed format.\n'
              '    \n'
              '    """')

Fragment(uuid='11b5adf6-84ee-48d5-9faa-01a81be8df07',
         path='/lib/dblayer/model/function.py',
         lineno=28,
         depth=4,
         type='documentation',
         name='',
         text=' Custom function\n'
              '    \n'
              "    It is useful for inspected databases, where we don't have "
              'expressions in parsed format.\n'
              '    \n'
              '    ')

Fragment(uuid='5e7df47e-8abf-42b7-a879-8d51177ea5f2',
         path='/lib/dblayer/model/function.py',
         lineno=36,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Var(BaseFunction):\n'
              '    """ Variable reference\n'
              '    \n'
              '    It is useful for triggers and domains, where the variable '
              'name\n'
              '    is determined by the SQL server ("new" or "value").\n'
              '    \n'
              '    """\n'
              '\n'
              '\n'
              '### Logical\n')

Fragment(uuid='7f1f1110-905f-4aef-9b24-906b6bda340a',
         path='/lib/dblayer/model/function.py',
         lineno=37,
         depth=1,
         type='class',
         name='Var',
         text='class Var(BaseFunction):\n'
              '    """ Variable reference\n'
              '    \n'
              '    It is useful for triggers and domains, where the variable '
              'name\n'
              '    is determined by the SQL server ("new" or "value").\n'
              '    \n'
              '    """')

Fragment(uuid='13232a0f-b1a4-467a-93ed-44995eaaa407',
         path='/lib/dblayer/model/function.py',
         lineno=38,
         depth=4,
         type='documentation',
         name='',
         text=' Variable reference\n'
              '    \n'
              '    It is useful for triggers and domains, where the variable '
              'name\n'
              '    is determined by the SQL server ("new" or "value").\n'
              '    \n'
              '    ')

Fragment(uuid='ead98969-6a82-4477-8ba3-c4ae5ea8922f',
         path='/lib/dblayer/model/function.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Not(BaseFunction):\n'
              '    """ Logical NOT of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a):\n'
              '        BaseFunction.__init__(self, a)\n')

Fragment(uuid='34b7e80a-ede5-4878-a64e-538155aa1151',
         path='/lib/dblayer/model/function.py',
         lineno=48,
         depth=1,
         type='class',
         name='Not',
         text='class Not(BaseFunction):\n'
              '    """ Logical NOT of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a):\n'
              '        BaseFunction.__init__(self, a)')

Fragment(uuid='8d7db294-8511-4587-88f7-2f1835474941',
         path='/lib/dblayer/model/function.py',
         lineno=49,
         depth=4,
         type='documentation',
         name='',
         text=' Logical NOT of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='9c1d0607-f538-44f7-aeaf-4d6cb22dd2e7',
         path='/lib/dblayer/model/function.py',
         lineno=55,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, a):\n        BaseFunction.__init__(self, a)')

Fragment(uuid='9be9d8fb-008d-499c-a5a3-721855e56145',
         path='/lib/dblayer/model/function.py',
         lineno=57,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class And(BaseFunction):\n'
              '    """ Logical AND of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n')

Fragment(uuid='940e76b7-d0ee-4871-8be5-a7bf86c181ee',
         path='/lib/dblayer/model/function.py',
         lineno=59,
         depth=1,
         type='class',
         name='And',
         text='class And(BaseFunction):\n'
              '    """ Logical AND of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """')

Fragment(uuid='44a89c3a-02b9-4c84-a8c3-9cf1d38bb873',
         path='/lib/dblayer/model/function.py',
         lineno=60,
         depth=4,
         type='documentation',
         name='',
         text=' Logical AND of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='c64eec1c-8807-45e7-bdd8-babb38c54ab0',
         path='/lib/dblayer/model/function.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Or(BaseFunction):\n'
              '    """ Logical OR of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '\n'
              '### Comparision\n')

Fragment(uuid='ea00dc20-b658-4ba2-b459-10ab23e71736',
         path='/lib/dblayer/model/function.py',
         lineno=67,
         depth=1,
         type='class',
         name='Or',
         text='class Or(BaseFunction):\n'
              '    """ Logical OR of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """')

Fragment(uuid='b0d4fa30-891a-4856-b09a-64d13ddca47c',
         path='/lib/dblayer/model/function.py',
         lineno=68,
         depth=4,
         type='documentation',
         name='',
         text=' Logical OR of its parameters\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='161090bc-fec7-48bc-b670-8afc90fa84f5',
         path='/lib/dblayer/model/function.py',
         lineno=76,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Equal(BaseFunction):\n'
              '    """ True if its two parameters are equal\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='96ce5ab6-b6ac-47ae-82c5-21a587557b79',
         path='/lib/dblayer/model/function.py',
         lineno=77,
         depth=1,
         type='class',
         name='Equal',
         text='class Equal(BaseFunction):\n'
              '    """ True if its two parameters are equal\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='94d8dc85-b9b6-47ae-88f0-05768a567fe8',
         path='/lib/dblayer/model/function.py',
         lineno=78,
         depth=4,
         type='documentation',
         name='',
         text=' True if its two parameters are equal\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='e1d6e643-6739-4a24-835c-7530c9a5aac2',
         path='/lib/dblayer/model/function.py',
         lineno=84,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='2a774af1-8d3c-4ad9-addb-ee685165c9ac',
         path='/lib/dblayer/model/function.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class NotEqual(BaseFunction):\n'
              '    """ True if its two parameters are not equal\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='92004d15-e5cb-4dab-8913-c88daee271fa',
         path='/lib/dblayer/model/function.py',
         lineno=88,
         depth=1,
         type='class',
         name='NotEqual',
         text='class NotEqual(BaseFunction):\n'
              '    """ True if its two parameters are not equal\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='6ab41d38-4978-4e07-88eb-6257196505b9',
         path='/lib/dblayer/model/function.py',
         lineno=89,
         depth=4,
         type='documentation',
         name='',
         text=' True if its two parameters are not equal\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='e7cfce8a-2c51-4584-a0ec-7219eb8294b6',
         path='/lib/dblayer/model/function.py',
         lineno=95,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='0e950564-aa0e-4aec-b27a-9ff99bd0bb0c',
         path='/lib/dblayer/model/function.py',
         lineno=97,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class LessThan(BaseFunction):\n'
              '    """ True if the first parameter is less than the second '
              'one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='aa1c68f0-56b2-4077-be6a-f1ecbd7e771e',
         path='/lib/dblayer/model/function.py',
         lineno=99,
         depth=1,
         type='class',
         name='LessThan',
         text='class LessThan(BaseFunction):\n'
              '    """ True if the first parameter is less than the second '
              'one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='294873f7-f17c-4a62-841c-f603e2ae9b0c',
         path='/lib/dblayer/model/function.py',
         lineno=100,
         depth=4,
         type='documentation',
         name='',
         text=' True if the first parameter is less than the second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='4add2754-af58-45c7-a713-e22dfb88ef5f',
         path='/lib/dblayer/model/function.py',
         lineno=106,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='0dcbde1c-5043-4fdf-bb6a-0b2385d6c09c',
         path='/lib/dblayer/model/function.py',
         lineno=108,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class LessThanOrEqual(BaseFunction):\n'
              '    """ True if the first parameter is less or equal than the '
              'second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='36307ded-3211-4184-9ba0-cb61878f0773',
         path='/lib/dblayer/model/function.py',
         lineno=110,
         depth=1,
         type='class',
         name='LessThanOrEqual',
         text='class LessThanOrEqual(BaseFunction):\n'
              '    """ True if the first parameter is less or equal than the '
              'second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='ca5682a2-701d-49fc-8580-02759e190965',
         path='/lib/dblayer/model/function.py',
         lineno=111,
         depth=4,
         type='documentation',
         name='',
         text=' True if the first parameter is less or equal than the second '
              'one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='0d2eee5e-1fb1-451e-bfbf-5ecb7415002b',
         path='/lib/dblayer/model/function.py',
         lineno=117,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='1203d63a-6e9f-4361-8c38-77930b312106',
         path='/lib/dblayer/model/function.py',
         lineno=119,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class GreaterThan(BaseFunction):\n'
              '    """ True if the first parameter is greater than the second '
              'one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='a642f756-2f29-45f2-b544-b1ef3c130c63',
         path='/lib/dblayer/model/function.py',
         lineno=121,
         depth=1,
         type='class',
         name='GreaterThan',
         text='class GreaterThan(BaseFunction):\n'
              '    """ True if the first parameter is greater than the second '
              'one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='55abfd8e-b5b2-46e8-9e65-543139bd6465',
         path='/lib/dblayer/model/function.py',
         lineno=122,
         depth=4,
         type='documentation',
         name='',
         text=' True if the first parameter is greater than the second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='f959e472-19ac-4522-a144-670c296e08d3',
         path='/lib/dblayer/model/function.py',
         lineno=128,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='cf0f9b4e-fe8a-4aa1-aa0d-d7d77f7c1b0f',
         path='/lib/dblayer/model/function.py',
         lineno=130,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class GreaterThanOrEqual(BaseFunction):\n'
              '    """ True if the first parameter is greater than or equal '
              'the second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='2fb091ac-19ea-4495-9c47-ce4ae1beac59',
         path='/lib/dblayer/model/function.py',
         lineno=132,
         depth=1,
         type='class',
         name='GreaterThanOrEqual',
         text='class GreaterThanOrEqual(BaseFunction):\n'
              '    """ True if the first parameter is greater than or equal '
              'the second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='0f6d8966-98b9-4d87-ab5f-b3f9ed91a9a1',
         path='/lib/dblayer/model/function.py',
         lineno=133,
         depth=4,
         type='documentation',
         name='',
         text=' True if the first parameter is greater than or equal the '
              'second one\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='3cb0f7b7-1d57-4c4a-8ce3-71deef330236',
         path='/lib/dblayer/model/function.py',
         lineno=139,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='56344651-a85b-4a45-b6d0-f961ed32185b',
         path='/lib/dblayer/model/function.py',
         lineno=141,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class In(BaseFunction):\n'
              '    """ True if its first parameter is in member of the '
              'expression passed as its second parameter\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n')

Fragment(uuid='01f87f61-bfcb-46fa-b5ca-f91a5ccfa020',
         path='/lib/dblayer/model/function.py',
         lineno=143,
         depth=1,
         type='class',
         name='In',
         text='class In(BaseFunction):\n'
              '    """ True if its first parameter is in member of the '
              'expression passed as its second parameter\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='e1ec74d4-76d4-4215-b906-04a2f106b758',
         path='/lib/dblayer/model/function.py',
         lineno=144,
         depth=4,
         type='documentation',
         name='',
         text=' True if its first parameter is in member of the expression '
              'passed as its second parameter\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='9126c416-98da-4871-a07d-0feade235bb9',
         path='/lib/dblayer/model/function.py',
         lineno=150,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='24641a8a-87c8-4710-bc58-a6e67e83e950',
         path='/lib/dblayer/model/function.py',
         lineno=152,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class NotIn(BaseFunction):\n'
              '    """ True if its first parameter is in member of the '
              'expression passed as its second parameter\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)\n'
              '\n'
              '\n'
              '### Numeric\n')

Fragment(uuid='90efbb91-78f7-44d0-9fca-6209a316ea45',
         path='/lib/dblayer/model/function.py',
         lineno=154,
         depth=1,
         type='class',
         name='NotIn',
         text='class NotIn(BaseFunction):\n'
              '    """ True if its first parameter is in member of the '
              'expression passed as its second parameter\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='efe7f984-c8bb-4cff-875c-c65fb4b9de58',
         path='/lib/dblayer/model/function.py',
         lineno=155,
         depth=4,
         type='documentation',
         name='',
         text=' True if its first parameter is in member of the expression '
              'passed as its second parameter\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='bc3b8655-056b-46dc-bacb-560db7b3a09b',
         path='/lib/dblayer/model/function.py',
         lineno=161,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, a, b):\n'
              '        BaseFunction.__init__(self, a, b)')

Fragment(uuid='b3ca90e3-b84c-4800-96b7-9eb7f3975b8f',
         path='/lib/dblayer/model/function.py',
         lineno=166,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Neg(BaseFunction):\n'
              '    """ Negate a single numeric value\n'
              '    """\n'
              '\n'
              '    def __init__(self, a):\n'
              '        BaseFunction.__init__(self, a)\n')

Fragment(uuid='95883c78-aee5-461f-863d-097833942220',
         path='/lib/dblayer/model/function.py',
         lineno=167,
         depth=1,
         type='class',
         name='Neg',
         text='class Neg(BaseFunction):\n'
              '    """ Negate a single numeric value\n'
              '    """\n'
              '\n'
              '    def __init__(self, a):\n'
              '        BaseFunction.__init__(self, a)')

Fragment(uuid='9cb46c0b-8207-4744-9b39-ed0b1f53a773',
         path='/lib/dblayer/model/function.py',
         lineno=168,
         depth=4,
         type='documentation',
         name='',
         text=' Negate a single numeric value\n    ')

Fragment(uuid='5e54d63c-a55c-4afa-a5e0-73212bf45cae',
         path='/lib/dblayer/model/function.py',
         lineno=171,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, a):\n        BaseFunction.__init__(self, a)')

Fragment(uuid='553b45dd-b0f5-477d-a45a-5fe6894bc2c3',
         path='/lib/dblayer/model/function.py',
         lineno=173,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Add(BaseFunction):\n'
              '    """ Add any number of numeric values\n'
              '    """\n')

Fragment(uuid='2b933099-df6c-4e8c-a3c7-4aba8cbe129f',
         path='/lib/dblayer/model/function.py',
         lineno=175,
         depth=1,
         type='class',
         name='Add',
         text='class Add(BaseFunction):\n'
              '    """ Add any number of numeric values\n'
              '    """')

Fragment(uuid='1237f9da-f42d-48e9-8f86-e23475effa9f',
         path='/lib/dblayer/model/function.py',
         lineno=176,
         depth=4,
         type='documentation',
         name='',
         text=' Add any number of numeric values\n    ')

Fragment(uuid='a5c4d5a9-f620-4339-8442-675baf7bd35f',
         path='/lib/dblayer/model/function.py',
         lineno=178,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Sub(BaseFunction):\n'
              '    """ Subtract any number of numeric values from the first '
              'one\n'
              '    """\n')

Fragment(uuid='ba98da60-0e09-42e8-8964-bb663cf97014',
         path='/lib/dblayer/model/function.py',
         lineno=180,
         depth=1,
         type='class',
         name='Sub',
         text='class Sub(BaseFunction):\n'
              '    """ Subtract any number of numeric values from the first '
              'one\n'
              '    """')

Fragment(uuid='5f1ad3e6-43db-4640-9888-4af34cd8aebe',
         path='/lib/dblayer/model/function.py',
         lineno=181,
         depth=4,
         type='documentation',
         name='',
         text=' Subtract any number of numeric values from the first one\n    ')

Fragment(uuid='0fa94838-6e79-49e5-8b36-f527868d1d53',
         path='/lib/dblayer/model/function.py',
         lineno=183,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Mul(BaseFunction):\n'
              '    """ Multiply any number of numeric values\n'
              '    """\n')

Fragment(uuid='4e1e60b9-b32a-4ccf-aab4-309b0739c416',
         path='/lib/dblayer/model/function.py',
         lineno=185,
         depth=1,
         type='class',
         name='Mul',
         text='class Mul(BaseFunction):\n'
              '    """ Multiply any number of numeric values\n'
              '    """')

Fragment(uuid='5b14bce1-016a-44f9-9ee1-81b7423d55f7',
         path='/lib/dblayer/model/function.py',
         lineno=186,
         depth=4,
         type='documentation',
         name='',
         text=' Multiply any number of numeric values\n    ')

Fragment(uuid='9f9517b1-d9eb-448a-ac8b-f663a206de43',
         path='/lib/dblayer/model/function.py',
         lineno=188,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Div(BaseFunction):\n'
              '    """ Divide the first numeric value with the subsequent '
              'ones\n'
              '    """\n'
              '\n'
              '\n'
              '# TODO: Pow, Exp, Log, ...\n'
              '\n'
              '### String\n')

Fragment(uuid='bf97e8f8-efb9-453a-970f-f03ec01d0219',
         path='/lib/dblayer/model/function.py',
         lineno=190,
         depth=1,
         type='class',
         name='Div',
         text='class Div(BaseFunction):\n'
              '    """ Divide the first numeric value with the subsequent '
              'ones\n'
              '    """')

Fragment(uuid='06504b64-ff24-4b01-98de-527f78e002c9',
         path='/lib/dblayer/model/function.py',
         lineno=191,
         depth=4,
         type='documentation',
         name='',
         text=' Divide the first numeric value with the subsequent ones\n    ')

Fragment(uuid='ed513a70-376a-4293-b2ca-8f0ba1d3dbd2',
         path='/lib/dblayer/model/function.py',
         lineno=195,
         depth=0,
         type='documentation',
         name='',
         text='# TODO: Pow, Exp, Log, ...')

Fragment(uuid='46479f17-fd3e-499e-bfbb-46f96fb65b03',
         path='/lib/dblayer/model/function.py',
         lineno=198,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Concat(BaseFunction):\n'
              '    """ Concatenates any number of values, also converts them '
              'to strings\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n')

Fragment(uuid='730236fb-20cb-4aa9-8141-db1ce4697101',
         path='/lib/dblayer/model/function.py',
         lineno=199,
         depth=1,
         type='class',
         name='Concat',
         text='class Concat(BaseFunction):\n'
              '    """ Concatenates any number of values, also converts them '
              'to strings\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """')

Fragment(uuid='b8241315-2aef-408a-837e-8ba5780b776d',
         path='/lib/dblayer/model/function.py',
         lineno=200,
         depth=4,
         type='documentation',
         name='',
         text=' Concatenates any number of values, also converts them to '
              'strings\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    ')

Fragment(uuid='b545ddcc-08a4-4ab8-95ba-20d2200474d3',
         path='/lib/dblayer/model/function.py',
         lineno=205,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Left(BaseFunction):\n'
              '    """ Take the leftmost characters of a string (string, '
              'count)\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)\n')

Fragment(uuid='06d46cc5-f183-4971-b7f5-835ced44b9c2',
         path='/lib/dblayer/model/function.py',
         lineno=207,
         depth=1,
         type='class',
         name='Left',
         text='class Left(BaseFunction):\n'
              '    """ Take the leftmost characters of a string (string, '
              'count)\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)')

Fragment(uuid='fe22667a-b04a-4015-bfb8-1301406bce47',
         path='/lib/dblayer/model/function.py',
         lineno=208,
         depth=4,
         type='documentation',
         name='',
         text=' Take the leftmost characters of a string (string, count)\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    ')

Fragment(uuid='d5f39372-fe06-4b53-9195-7c2603721db6',
         path='/lib/dblayer/model/function.py',
         lineno=214,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)')

Fragment(uuid='016bf078-db50-49aa-ac21-2eb2542e7406',
         path='/lib/dblayer/model/function.py',
         lineno=216,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Right(BaseFunction):\n'
              '    """ Take the rightmost characters of a string (string, '
              'count)\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)\n')

Fragment(uuid='35cda21e-6c4a-46b6-98ce-306bfec851cd',
         path='/lib/dblayer/model/function.py',
         lineno=218,
         depth=1,
         type='class',
         name='Right',
         text='class Right(BaseFunction):\n'
              '    """ Take the rightmost characters of a string (string, '
              'count)\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)')

Fragment(uuid='5e65fed8-7c63-4c9c-81eb-045142f3c77b',
         path='/lib/dblayer/model/function.py',
         lineno=219,
         depth=4,
         type='documentation',
         name='',
         text=' Take the rightmost characters of a string (string, count)\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    ')

Fragment(uuid='04b5b4d6-468b-49fe-b10b-a4e986c95884',
         path='/lib/dblayer/model/function.py',
         lineno=225,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, text, length):\n'
              '        BaseFunction.__init__(self, text, length)')

Fragment(uuid='c0444ed4-5039-426a-a49a-f0e5fffb1cd8',
         path='/lib/dblayer/model/function.py',
         lineno=227,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Substring(BaseFunction):\n'
              '    """ Extract substring (string, first_character[, count])\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, position, length=None):\n'
              '        if length is None:\n'
              '            BaseFunction.__init__(self, text, position)\n'
              '        else:\n'
              '            BaseFunction.__init__(self, text, position, '
              'length)\n')

Fragment(uuid='6e72bf64-21b3-4b6d-850c-12d66e56f567',
         path='/lib/dblayer/model/function.py',
         lineno=229,
         depth=1,
         type='class',
         name='Substring',
         text='class Substring(BaseFunction):\n'
              '    """ Extract substring (string, first_character[, count])\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, position, length=None):\n'
              '        if length is None:\n'
              '            BaseFunction.__init__(self, text, position)\n'
              '        else:\n'
              '            BaseFunction.__init__(self, text, position, length)')

Fragment(uuid='b2cfc1fc-ef67-47e9-af98-3898d24431f5',
         path='/lib/dblayer/model/function.py',
         lineno=230,
         depth=4,
         type='documentation',
         name='',
         text=' Extract substring (string, first_character[, count])\n'
              '    \n'
              '    Returns a string.\n'
              '    \n'
              '    ')

Fragment(uuid='2fa67a8d-ba29-4616-a550-501fb981d394',
         path='/lib/dblayer/model/function.py',
         lineno=236,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, text, position, length=None):\n'
              '        if length is None:\n'
              '            BaseFunction.__init__(self, text, position)\n'
              '        else:\n'
              '            BaseFunction.__init__(self, text, position, length)')

Fragment(uuid='1956bf32-17a1-4d02-b1bc-e213dbc05745',
         path='/lib/dblayer/model/function.py',
         lineno=241,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Contains(BaseFunction):\n'
              '    """ Checks whether a substring is in text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, substring):\n'
              '        BaseFunction.__init__(self, text, substring)\n')

Fragment(uuid='f30c77b7-a412-4656-88bb-c3611b1a5b51',
         path='/lib/dblayer/model/function.py',
         lineno=243,
         depth=1,
         type='class',
         name='Contains',
         text='class Contains(BaseFunction):\n'
              '    """ Checks whether a substring is in text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, substring):\n'
              '        BaseFunction.__init__(self, text, substring)')

Fragment(uuid='9080e2b6-7caa-425e-93c4-4c3536f1b062',
         path='/lib/dblayer/model/function.py',
         lineno=244,
         depth=4,
         type='documentation',
         name='',
         text=' Checks whether a substring is in text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='3e3ede8b-02c5-4fb3-83be-cedbe60e4166',
         path='/lib/dblayer/model/function.py',
         lineno=250,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, text, substring):\n'
              '        BaseFunction.__init__(self, text, substring)')

Fragment(uuid='41c79248-8812-4541-947f-7a1941ef0e63',
         path='/lib/dblayer/model/function.py',
         lineno=252,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Like(BaseFunction):\n'
              '    """ Checks whether a LIKE pattern matches text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)\n')

Fragment(uuid='4874f22b-a3b1-468b-bbfe-03f9fe2cdf1b',
         path='/lib/dblayer/model/function.py',
         lineno=254,
         depth=1,
         type='class',
         name='Like',
         text='class Like(BaseFunction):\n'
              '    """ Checks whether a LIKE pattern matches text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='a8ffa8ec-1bd2-4368-b2a8-bfadb9c606b5',
         path='/lib/dblayer/model/function.py',
         lineno=255,
         depth=4,
         type='documentation',
         name='',
         text=' Checks whether a LIKE pattern matches text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='e4d61a51-d6b1-4089-a21f-a7378aab100e',
         path='/lib/dblayer/model/function.py',
         lineno=261,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='b7fc490c-9e53-438f-a3bc-da11263ad805',
         path='/lib/dblayer/model/function.py',
         lineno=263,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class NotLike(BaseFunction):\n'
              '    """ Checks whether a LIKE pattern does not match text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)\n')

Fragment(uuid='43541bef-e3ff-445e-9572-d02858389844',
         path='/lib/dblayer/model/function.py',
         lineno=265,
         depth=1,
         type='class',
         name='NotLike',
         text='class NotLike(BaseFunction):\n'
              '    """ Checks whether a LIKE pattern does not match text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='57effeac-857a-4ffc-b517-d23075198a39',
         path='/lib/dblayer/model/function.py',
         lineno=266,
         depth=4,
         type='documentation',
         name='',
         text=' Checks whether a LIKE pattern does not match text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='159afe7a-0cfc-4a4c-ba37-8ef669f78c95',
         path='/lib/dblayer/model/function.py',
         lineno=272,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='bfc8d5c1-8ddb-4287-82f3-44790f00441d',
         path='/lib/dblayer/model/function.py',
         lineno=274,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Match(BaseFunction):\n'
              '    """ Checks whether a regular expression matches text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)\n')

Fragment(uuid='cc725982-2a92-41e2-98c1-cdb4059c0925',
         path='/lib/dblayer/model/function.py',
         lineno=276,
         depth=1,
         type='class',
         name='Match',
         text='class Match(BaseFunction):\n'
              '    """ Checks whether a regular expression matches text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='1f0e8393-c54d-4029-a996-4d1d946078d9',
         path='/lib/dblayer/model/function.py',
         lineno=277,
         depth=4,
         type='documentation',
         name='',
         text=' Checks whether a regular expression matches text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='a083e88d-0bd8-4964-bdcf-436ed8392162',
         path='/lib/dblayer/model/function.py',
         lineno=283,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='bcd2d929-b457-4121-b947-562c20fc0330',
         path='/lib/dblayer/model/function.py',
         lineno=285,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class NotMatch(BaseFunction):\n'
              '    """ Checks whether a regular expression does not matche '
              'text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)\n')

Fragment(uuid='c5e8b962-4e8e-4dde-9418-1b94b2df165d',
         path='/lib/dblayer/model/function.py',
         lineno=287,
         depth=1,
         type='class',
         name='NotMatch',
         text='class NotMatch(BaseFunction):\n'
              '    """ Checks whether a regular expression does not matche '
              'text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='342222ec-c0c5-4f10-a6e8-86719f6fd5c4',
         path='/lib/dblayer/model/function.py',
         lineno=288,
         depth=4,
         type='documentation',
         name='',
         text=' Checks whether a regular expression does not matche text\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='62a997ce-cedd-4ebb-b99f-585e5b10257d',
         path='/lib/dblayer/model/function.py',
         lineno=294,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, text, pattern):\n'
              '        BaseFunction.__init__(self, text, pattern)')

Fragment(uuid='29d2f1e2-6ea3-4a5e-9dfa-b0bdc024e7f8',
         path='/lib/dblayer/model/function.py',
         lineno=296,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class FullTextSearch(BaseFunction):\n'
              '    """ Performs full text search\n'
              '    \n'
              '    For optimal performance the expression should be a column '
              'with a \n'
              '    full text search index on it, but it also works for any '
              'expression\n'
              '    resulting in a string or a value can be converted to a '
              'string.\n'
              '    \n'
              '    The pattern is like: word1 & word2\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, column, pattern):\n'
              '        BaseFunction.__init__(self, column, pattern)\n'
              '\n'
              '\n'
              '### Selection\n')

Fragment(uuid='0b35086c-992b-4bd0-84b6-1ebd711fa2fc',
         path='/lib/dblayer/model/function.py',
         lineno=298,
         depth=1,
         type='class',
         name='FullTextSearch',
         text='class FullTextSearch(BaseFunction):\n'
              '    """ Performs full text search\n'
              '    \n'
              '    For optimal performance the expression should be a column '
              'with a \n'
              '    full text search index on it, but it also works for any '
              'expression\n'
              '    resulting in a string or a value can be converted to a '
              'string.\n'
              '    \n'
              '    The pattern is like: word1 & word2\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    """\n'
              '\n'
              '    def __init__(self, column, pattern):\n'
              '        BaseFunction.__init__(self, column, pattern)')

Fragment(uuid='53493ed7-38e5-4dc2-8043-82c8af2f9e3a',
         path='/lib/dblayer/model/function.py',
         lineno=299,
         depth=4,
         type='documentation',
         name='',
         text=' Performs full text search\n'
              '    \n'
              '    For optimal performance the expression should be a column '
              'with a \n'
              '    full text search index on it, but it also works for any '
              'expression\n'
              '    resulting in a string or a value can be converted to a '
              'string.\n'
              '    \n'
              '    The pattern is like: word1 & word2\n'
              '    \n'
              '    Returns a boolean.\n'
              '    \n'
              '    ')

Fragment(uuid='d2efe792-61a2-4ad7-8719-7263fd756e8b',
         path='/lib/dblayer/model/function.py',
         lineno=311,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, column, pattern):\n'
              '        BaseFunction.__init__(self, column, pattern)')

Fragment(uuid='19e93890-52b7-4eb2-8b99-a4119028b441',
         path='/lib/dblayer/model/function.py',
         lineno=316,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class Coalesce(BaseFunction):\n'
              '    """ Results in the first not-NULL expression or NULL if all '
              'are NULL\n'
              '    """\n'
              '\n'
              '# TODO: If-Else, Case-Else\n'
              '\n'
              '### GIS functions\n'
              '\n'
              '# TODO\n')

Fragment(uuid='e3504729-be3e-441d-84f2-0b18d011d332',
         path='/lib/dblayer/model/function.py',
         lineno=317,
         depth=1,
         type='class',
         name='Coalesce',
         text='class Coalesce(BaseFunction):\n'
              '    """ Results in the first not-NULL expression or NULL if all '
              'are NULL\n'
              '    """')

Fragment(uuid='d55e4cb5-de0b-455c-b5e7-039c13bdf783',
         path='/lib/dblayer/model/function.py',
         lineno=318,
         depth=4,
         type='documentation',
         name='',
         text=' Results in the first not-NULL expression or NULL if all are '
              'NULL\n'
              '    ')

Fragment(uuid='aca603c1-aee9-41ea-9336-66fc836544ec',
         path='/lib/dblayer/model/function.py',
         lineno=321,
         depth=0,
         type='documentation',
         name='',
         text='# TODO: If-Else, Case-Else')

Fragment(uuid='681c808b-0a0c-4b03-9090-e401068d5d28',
         path='/lib/dblayer/model/index.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Index definitions\n"""\n\nfrom dblayer import util\n')

Fragment(uuid='e776b56d-7430-4afa-9c28-7a5dd89c315a',
         path='/lib/dblayer/model/index.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/index.py\n'
              '  Classes: BaseIndex FullTextSearchIndex Index\n'
              '  Methods: __init__ __repr__ __str__ clone '
              'get_implicit_definition_list_for_table_class sort_key\n'
              '  Variables and usages: column columns dblayer '
              'get_next_definition_serial getattr implicit join name rsplit '
              'staticmethod table table_class update util\n')

Fragment(uuid='25e36821-2fc3-402f-b00a-a1c234e122db',
         path='/lib/dblayer/model/index.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='c9eb477a-c5f2-4af4-8680-df01f54c65a1',
         path='/lib/dblayer/model/index.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='505761ff-35b7-474b-a5a5-ec82b1704727',
         path='/lib/dblayer/model/index.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseIndex:\n'
              '    """ Base class for database indexes models\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this column\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this column or '
              'None for model columns\n'
              '  ')

Fragment(uuid='00223ea1-7761-4f7f-831b-2c8212fc002a',
         path='/lib/dblayer/model/index.py',
         lineno=7,
         depth=1,
         type='class',
         name='BaseIndex',
         text='class BaseIndex:\n'
              '    """ Base class for database indexes models\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this column\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this column or '
              'None for model columns\n'
              '   ')

Fragment(uuid='b121c84c-002a-4e83-b093-f89e4ac89fd5',
         path='/lib/dblayer/model/index.py',
         lineno=8,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for database indexes models\n    ')

Fragment(uuid='92950cb1-7c4a-4b12-b266-1836e48b0993',
         path='/lib/dblayer/model/index.py',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='# Serial number to record the order of column definitions')

Fragment(uuid='5f7c962a-cfce-483c-b42f-4139a197c506',
         path='/lib/dblayer/model/index.py',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='# Reference to the table class containing this column')

Fragment(uuid='7565071d-7e35-4deb-9a7f-e31681b7fb06',
         path='/lib/dblayer/model/index.py',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the table definition class')

Fragment(uuid='b8f28c86-4693-4f11-b218-cd5849a00fee',
         path='/lib/dblayer/model/index.py',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='# Reference to the table instance containing this column or '
              'None for model columns')

Fragment(uuid='8415eed4-eb05-4cd3-b7e2-821689d3b2a7',
         path='/lib/dblayer/model/index.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text='  # NOTE: Filled in by Table.__init__ as part of cloning the '
              'columns from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the constraint\n'
              '    # NOTE: Set by __new__ in the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # List of the member columns\n'
              '    columns = ()\n'
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='c02b66ef-60f1-4bfd-bc61-91ab286afb55',
         path='/lib/dblayer/model/index.py',
         lineno=19,
         depth=1,
         type='class',
         name='BaseIndex',
         text=' # NOTE: Filled in by Table.__init__ as part of cloning the '
              'columns from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the constraint\n'
              '    # NOTE: Set by __new__ in the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # List of the member columns\n'
              '    columns = ()\n'
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='90067acf-e2d6-4eb1-b30a-1c7081c1ef33',
         path='/lib/dblayer/model/index.py',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Filled in by Table.__init__ as part of cloning the '
              'columns from the class to the instance')

Fragment(uuid='090bece7-9a86-4910-a2ac-544283ff5ad7',
         path='/lib/dblayer/model/index.py',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='# Name of the constraint')

Fragment(uuid='5d2d308d-e56c-483b-ad4c-5713736c1c78',
         path='/lib/dblayer/model/index.py',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ in the table definition class')

Fragment(uuid='9fbf4312-28b6-4fba-a260-77ff5c03341e',
         path='/lib/dblayer/model/index.py',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='# List of the member columns')

Fragment(uuid='b6be0f6c-e484-4e8d-b6e5-8aa6c87696b2',
         path='/lib/dblayer/model/index.py',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='# Indicates that this model object is added implicitly by some '
              'other model object')

Fragment(uuid='0adeed95-d40b-4175-952e-549599729ca2',
         path='/lib/dblayer/model/index.py',
         lineno=33,
         depth=0,
         type='module',
         name='',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='e58c69e9-6154-420f-8958-0f25ed6bbbfe',
         path='/lib/dblayer/model/index.py',
         lineno=33,
         depth=1,
         type='class',
         name='BaseIndex',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='c46f9968-7959-40da-b09f-464853ddcf43',
         path='/lib/dblayer/model/index.py',
         lineno=33,
         depth=4,
         type='function',
         name='sort_key',
         text='def sort_key(obj):\n        return obj.__definition_serial__')

Fragment(uuid='507f9b91-2700-4416-b17e-9b83eb92bd97',
         path='/lib/dblayer/model/index.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, *columns):\n'
              '        assert self.__class__ is not BaseIndex, (\n'
              "            'Only subclasses of BaseIndex can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Verify\n'
              "        assert columns, 'This index must be applied to at least "
              "one column!'\n"
              '        self.columns = columns\n')

Fragment(uuid='c566b719-339c-4a02-b220-0762683d8aa4',
         path='/lib/dblayer/model/index.py',
         lineno=35,
         depth=1,
         type='class',
         name='BaseIndex',
         text='\n'
              '    def __init__(self, *columns):\n'
              '        assert self.__class__ is not BaseIndex, (\n'
              "            'Only subclasses of BaseIndex can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Verify\n'
              "        assert columns, 'This index must be applied to at least "
              "one column!'\n"
              '        self.columns = columns\n')

Fragment(uuid='da1035b1-d85d-46eb-acc9-02f26beb33f9',
         path='/lib/dblayer/model/index.py',
         lineno=36,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, *columns):\n'
              '        assert self.__class__ is not BaseIndex, (\n'
              "            'Only subclasses of BaseIndex can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Verify\n'
              "        assert columns, 'This index must be applied to at least "
              "one column!'\n"
              '        self.columns = columns')

Fragment(uuid='1b71ebd4-a317-47c9-9fe6-f1364a2389f1',
         path='/lib/dblayer/model/index.py',
         lineno=38,
         depth=7,
         type='documentation',
         name='',
         text='Only subclasses of BaseIndex can be instantiated!')

Fragment(uuid='cb562e2e-7d8b-4b2f-a331-31305849dbd7',
         path='/lib/dblayer/model/index.py',
         lineno=40,
         depth=4,
         type='documentation',
         name='',
         text='# Record the definition order')

Fragment(uuid='b476969c-cb77-4f10-bb88-162a5c77f26d',
         path='/lib/dblayer/model/index.py',
         lineno=44,
         depth=6,
         type='documentation',
         name='',
         text='This index must be applied to at least one column!')

Fragment(uuid='463597ad-79de-4f50-84ee-556a09d7fca9',
         path='/lib/dblayer/model/index.py',
         lineno=46,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Index: %s.%s on %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='d08061ac-dc3f-45f7-92d4-d3d5fe54b068',
         path='/lib/dblayer/model/index.py',
         lineno=46,
         depth=1,
         type='class',
         name='BaseIndex',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Index: %s.%s on %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='4ca64fa9-6ca5-4037-9c1d-77613aa9b5cd',
         path='/lib/dblayer/model/index.py',
         lineno=47,
         depth=3,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Index: %s.%s on %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name,\n'
              "            ', '.join(column.name for column in self.columns))")

Fragment(uuid='2889b95f-0388-4063-be87-50f0fa0a9005',
         path='/lib/dblayer/model/index.py',
         lineno=48,
         depth=7,
         type='documentation',
         name='',
         text='<%s Index: %s.%s on %s>')

Fragment(uuid='f907ac06-3e61-4e3d-ab19-9b695fc4474d',
         path='/lib/dblayer/model/index.py',
         lineno=53,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='5b04113a-e6c2-41e9-83c2-390a97c09cae',
         path='/lib/dblayer/model/index.py',
         lineno=53,
         depth=1,
         type='class',
         name='BaseIndex',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))\n")

Fragment(uuid='6f6403ed-9c15-45cb-9d65-f46bf357bda5',
         path='/lib/dblayer/model/index.py',
         lineno=54,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              "            ', '.join(column.name for column in self.columns))")

Fragment(uuid='5cd94e24-ff34-4515-80dd-4d2929ee5465',
         path='/lib/dblayer/model/index.py',
         lineno=59,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this index for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='054f4867-337c-4d8c-984b-4c6cb4ec3261',
         path='/lib/dblayer/model/index.py',
         lineno=59,
         depth=1,
         type='class',
         name='BaseIndex',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this index for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='4dabab17-17cc-4a59-9f81-319603c90176',
         path='/lib/dblayer/model/index.py',
         lineno=60,
         depth=3,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        """ Clone this index for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.columns = [getattr(table, column.name) for column '
              'in self.columns]\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='c55b152e-1a0f-4499-9736-f3e9fd032f1f',
         path='/lib/dblayer/model/index.py',
         lineno=61,
         depth=6,
         type='documentation',
         name='',
         text=' Clone this index for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        ')

Fragment(uuid='c14a5ff0-022d-4ebd-a90f-a2a2314244bd',
         path='/lib/dblayer/model/index.py',
         lineno=71,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []\n')

Fragment(uuid='c419ead6-42db-4aeb-ad15-2271745597a6',
         path='/lib/dblayer/model/index.py',
         lineno=71,
         depth=1,
         type='class',
         name='BaseIndex',
         text='\n'
              '    def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []')

Fragment(uuid='109e0cd3-19a5-441d-b367-6c7a36f4f594',
         path='/lib/dblayer/model/index.py',
         lineno=72,
         depth=3,
         type='function',
         name='get_implicit_definition_list_for_table_class',
         text='def get_implicit_definition_list_for_table_class(self, '
              'table_class):\n'
              '        """ Returns list of (name, definition) tuples for the '
              'implicit definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        """\n'
              '        return []')

Fragment(uuid='0d32c39f-d676-4279-8f95-9c2b0f5d53ee',
         path='/lib/dblayer/model/index.py',
         lineno=73,
         depth=6,
         type='documentation',
         name='',
         text=' Returns list of (name, definition) tuples for the implicit '
              'definitions\n'
              '        required on the table model class level\n'
              '        \n'
              '        ')

Fragment(uuid='a4f9ad78-15c5-4bfa-9db7-45140efd8999',
         path='/lib/dblayer/model/index.py',
         lineno=78,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Index(BaseIndex):\n'
              '    """ Regular B-Tree based index\n'
              '    """\n')

Fragment(uuid='9fec6c2c-6916-4ead-8dfa-ec0e06a3034e',
         path='/lib/dblayer/model/index.py',
         lineno=80,
         depth=1,
         type='class',
         name='Index',
         text='class Index(BaseIndex):\n'
              '    """ Regular B-Tree based index\n'
              '    """')

Fragment(uuid='cf1ea4cc-f7ab-44c5-8c19-c179096bc566',
         path='/lib/dblayer/model/index.py',
         lineno=81,
         depth=4,
         type='documentation',
         name='',
         text=' Regular B-Tree based index\n    ')

Fragment(uuid='87ba7677-8a79-4574-9e7e-a1f8a565e2ce',
         path='/lib/dblayer/model/index.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class FullTextSearchIndex(BaseIndex):\n'
              '    """ Full text search index\n'
              '    \n'
              '    This kind of index is automatically applied to a '
              'SearchDocument columns.\n'
              '    \n'
              '    """\n')

Fragment(uuid='b8970725-d92a-4718-b5e0-756e46eca9db',
         path='/lib/dblayer/model/index.py',
         lineno=85,
         depth=1,
         type='class',
         name='FullTextSearchIndex',
         text='class FullTextSearchIndex(BaseIndex):\n'
              '    """ Full text search index\n'
              '    \n'
              '    This kind of index is automatically applied to a '
              'SearchDocument columns.\n'
              '    \n'
              '    """')

Fragment(uuid='7f8d2b02-9b44-4257-8117-81da8457208e',
         path='/lib/dblayer/model/index.py',
         lineno=86,
         depth=4,
         type='documentation',
         name='',
         text=' Full text search index\n'
              '    \n'
              '    This kind of index is automatically applied to a '
              'SearchDocument columns.\n'
              '    \n'
              '    ')

Fragment(uuid='04e7217e-badc-4e06-a32d-aa34b1e7c618',
         path='/lib/dblayer/model/procedure.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Procedure definitions\n"""\n\nfrom dblayer import util\n')

Fragment(uuid='b8f1927c-751c-4af3-b96b-409360f7cd8c',
         path='/lib/dblayer/model/procedure.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Procedure definitions\n')

Fragment(uuid='11ecbe38-f52d-4000-88df-8cc4c49c862c',
         path='/lib/dblayer/model/procedure.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/procedure.py\n'
              '  Classes: BaseProcedure Procedure\n'
              '  Methods: __init__ __repr__ __str__ clone sort_key\n'
              '  Variables and usages: argument_list body database '
              'database_class dblayer get_next_definition_serial language name '
              'result rsplit staticmethod tuple update util\n')

Fragment(uuid='306b1c15-561b-4b65-9d12-251a1ee743d6',
         path='/lib/dblayer/model/procedure.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='73959bb8-4f8b-4b97-8a5a-18749412c20a',
         path='/lib/dblayer/model/procedure.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='f46e5650-5276-461d-849f-77ba2ae5af85',
         path='/lib/dblayer/model/procedure.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseProcedure:\n'
              '    """ Base class for stored procedures\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of procedure '
              'definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the database class containing this '
              'procedure\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              '    database_class = None\n'
              '\n'
              '    # Name of the procedure\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              "    name = ''\n"
              '\n'
              '    @staticmethod\n')

Fragment(uuid='d8025be3-ed02-496c-aff9-6b98533603a3',
         path='/lib/dblayer/model/procedure.py',
         lineno=7,
         depth=1,
         type='class',
         name='BaseProcedure',
         text='class BaseProcedure:\n'
              '    """ Base class for stored procedures\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of procedure '
              'definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the database class containing this '
              'procedure\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              '    database_class = None\n'
              '\n'
              '    # Name of the procedure\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              "    name = ''\n"
              '\n'
              '    @staticmethod\n')

Fragment(uuid='86840925-550b-44b0-9fd4-7b19112f65c8',
         path='/lib/dblayer/model/procedure.py',
         lineno=8,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for stored procedures\n    ')

Fragment(uuid='eed1bfa2-8b70-49fa-9a91-fc192fcacece',
         path='/lib/dblayer/model/procedure.py',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='# Serial number to record the order of procedure definitions')

Fragment(uuid='43c83523-6040-41c6-9873-50014c458bd5',
         path='/lib/dblayer/model/procedure.py',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='# Reference to the database class containing this procedure')

Fragment(uuid='da83f3ca-f0ee-4c74-8664-1dedae1dab17',
         path='/lib/dblayer/model/procedure.py',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the database definition class')

Fragment(uuid='368e470f-8491-4d16-b220-022b604d9097',
         path='/lib/dblayer/model/procedure.py',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='# Name of the procedure')

Fragment(uuid='16c7ffaa-a751-4473-b404-fe3e0be513b0',
         path='/lib/dblayer/model/procedure.py',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the database definition class')

Fragment(uuid='522c71ff-28b8-4b26-8e14-b01555f0d52e',
         path='/lib/dblayer/model/procedure.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='c3ab898f-41d3-43fe-8a5b-8233dd605dda',
         path='/lib/dblayer/model/procedure.py',
         lineno=23,
         depth=1,
         type='class',
         name='BaseProcedure',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='20e691d9-490d-46d1-aca3-d1861456bf82',
         path='/lib/dblayer/model/procedure.py',
         lineno=23,
         depth=4,
         type='function',
         name='sort_key',
         text='def sort_key(obj):\n        return obj.__definition_serial__')

Fragment(uuid='866c72ae-2dca-4cbe-9b76-c6bacce0b8d4',
         path='/lib/dblayer/model/procedure.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, language, argument_list, result, body):\n'
              '        assert self.__class__ is not BaseProcedure, (\n'
              "            'Only subclasses of BaseProcedure can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.language = language\n'
              '        self.argument_list = argument_list\n'
              '        self.result = result\n'
              '        self.body = body\n')

Fragment(uuid='bcec5d7a-379f-4274-94f5-32a4c3678c50',
         path='/lib/dblayer/model/procedure.py',
         lineno=25,
         depth=1,
         type='class',
         name='BaseProcedure',
         text='\n'
              '    def __init__(self, language, argument_list, result, body):\n'
              '        assert self.__class__ is not BaseProcedure, (\n'
              "            'Only subclasses of BaseProcedure can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.language = language\n'
              '        self.argument_list = argument_list\n'
              '        self.result = result\n'
              '        self.body = body\n')

Fragment(uuid='07a4b8e9-9f79-413d-aaf2-fcf6ddd26156',
         path='/lib/dblayer/model/procedure.py',
         lineno=26,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, language, argument_list, result, body):\n'
              '        assert self.__class__ is not BaseProcedure, (\n'
              "            'Only subclasses of BaseProcedure can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.language = language\n'
              '        self.argument_list = argument_list\n'
              '        self.result = result\n'
              '        self.body = body')

Fragment(uuid='1831c768-1f50-4fdd-a101-e26c5f6153d0',
         path='/lib/dblayer/model/procedure.py',
         lineno=28,
         depth=7,
         type='documentation',
         name='',
         text='Only subclasses of BaseProcedure can be instantiated!')

Fragment(uuid='b77c8729-6f47-4da2-900a-49eb82085ab9',
         path='/lib/dblayer/model/procedure.py',
         lineno=30,
         depth=4,
         type='documentation',
         name='',
         text='# Record the definition order')

Fragment(uuid='bd269302-52c1-449f-b5f9-fe7bc5a1c20c',
         path='/lib/dblayer/model/procedure.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s: %s%r returns %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.name,\n'
              '            tuple(self.argument_list),\n'
              '            self.result)\n')

Fragment(uuid='5d4bdc56-ca7e-449b-85e2-2b85f0f01309',
         path='/lib/dblayer/model/procedure.py',
         lineno=37,
         depth=1,
         type='class',
         name='BaseProcedure',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s: %s%r returns %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.name,\n'
              '            tuple(self.argument_list),\n'
              '            self.result)\n')

Fragment(uuid='87e5d689-322d-446e-abed-e245acfe7fcc',
         path='/lib/dblayer/model/procedure.py',
         lineno=38,
         depth=3,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s: %s%r returns %s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.name,\n'
              '            tuple(self.argument_list),\n'
              '            self.result)')

Fragment(uuid='594ab41e-632f-44bc-ae70-85b8263ad82a',
         path='/lib/dblayer/model/procedure.py',
         lineno=39,
         depth=7,
         type='documentation',
         name='',
         text='<%s: %s%r returns %s>')

Fragment(uuid='dea51c51-a463-4727-910e-f3a8724fe7eb',
         path='/lib/dblayer/model/procedure.py',
         lineno=44,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r, %r, %r, %r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.language,\n'
              '            self.argument_list,\n'
              '            self.result,\n'
              '            self.body)\n')

Fragment(uuid='2ddd3c30-23bc-4507-be25-eaa532d76718',
         path='/lib/dblayer/model/procedure.py',
         lineno=44,
         depth=1,
         type='class',
         name='BaseProcedure',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r, %r, %r, %r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.language,\n'
              '            self.argument_list,\n'
              '            self.result,\n'
              '            self.body)\n')

Fragment(uuid='67cbb01d-c929-4106-b494-b4665679d5cb',
         path='/lib/dblayer/model/procedure.py',
         lineno=45,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%r, %r, %r, %r)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.language,\n'
              '            self.argument_list,\n'
              '            self.result,\n'
              '            self.body)')

Fragment(uuid='68cdb278-7c91-46e2-8a22-18c01a384cfb',
         path='/lib/dblayer/model/procedure.py',
         lineno=46,
         depth=7,
         type='documentation',
         name='',
         text='%s.%s(%r, %r, %r, %r)')

Fragment(uuid='3383279c-0a3f-496c-9df2-b292ca247cae',
         path='/lib/dblayer/model/procedure.py',
         lineno=53,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, database):\n'
              '        """ Clone this procedure for the database instance\n'
              '        \n'
              '        NOTE: It is called by Database.__init__ to bound the '
              'procedures to the database instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.database = database\n'
              '        return clone\n')

Fragment(uuid='76f3b92a-166a-43bd-ab1d-c0c885dcf3b8',
         path='/lib/dblayer/model/procedure.py',
         lineno=53,
         depth=1,
         type='class',
         name='BaseProcedure',
         text='\n'
              '    def clone(self, database):\n'
              '        """ Clone this procedure for the database instance\n'
              '        \n'
              '        NOTE: It is called by Database.__init__ to bound the '
              'procedures to the database instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.database = database\n'
              '        return clone')

Fragment(uuid='152c0a34-e74e-45b0-b545-c25957b24c55',
         path='/lib/dblayer/model/procedure.py',
         lineno=54,
         depth=3,
         type='function',
         name='clone',
         text='def clone(self, database):\n'
              '        """ Clone this procedure for the database instance\n'
              '        \n'
              '        NOTE: It is called by Database.__init__ to bound the '
              'procedures to the database instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.database = database\n'
              '        return clone')

Fragment(uuid='595d8688-fc14-4c38-8749-e58ef51a122b',
         path='/lib/dblayer/model/procedure.py',
         lineno=55,
         depth=6,
         type='documentation',
         name='',
         text=' Clone this procedure for the database instance\n'
              '        \n'
              '        NOTE: It is called by Database.__init__ to bound the '
              'procedures to the database instance.\n'
              '        \n'
              '        ')

Fragment(uuid='84e6f1b4-4e75-41ba-a647-36d6ce3e9cf5',
         path='/lib/dblayer/model/procedure.py',
         lineno=64,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Procedure(BaseProcedure):\n'
              '    """ Stored procedure\n'
              '    """\n')

Fragment(uuid='fdeb662a-4e81-4a65-ad61-74661a53e4ca',
         path='/lib/dblayer/model/procedure.py',
         lineno=66,
         depth=1,
         type='class',
         name='Procedure',
         text='class Procedure(BaseProcedure):\n'
              '    """ Stored procedure\n'
              '    """')

Fragment(uuid='dd51ae0d-9a5f-4ba8-af5c-f2ca1e7be7bb',
         path='/lib/dblayer/model/procedure.py',
         lineno=67,
         depth=4,
         type='documentation',
         name='',
         text=' Stored procedure\n    ')

Fragment(uuid='617eff77-bd1e-41c0-a852-5614b1636b70',
         path='/lib/dblayer/model/query.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Base class for query definitions\n'
              '"""\n'
              '\n'
              'from dblayer import constants\n'
              '\n'
              'from dblayer.model import table, column, index\n')

Fragment(uuid='d6a8538a-ba90-4ba4-a38e-27a51954bde8',
         path='/lib/dblayer/model/query.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Base class for query definitions\n')

Fragment(uuid='d22860f2-8b4d-4a88-a4f2-027b82e01b09',
         path='/lib/dblayer/model/query.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/query.py\n'
              '  Classes: BaseQueryResult Condition PostCondition Query '
              'Result\n'
              '  Methods: __init__ __new__ __repr__ '
              '_collect_result_condition_list clone get_table_list initialize '
              'iterate_joined_tables pretty_format_class\n'
              '  Variables and usages: BaseColumn DEBUG FullTextSearchIndex '
              'INNER_JOIN LEFT_JOIN Table Text _column_list _condition_list '
              '_creatable _group_by _initialized _name _order_by _primary_key '
              '_referer _table_map _table_name _writable after_group_by alias '
              'alias_name append append_line classmethod column column_type '
              'constants copy dblayer expression foreign_key full_repr '
              'full_repr_exclude getattr index item items join join_type '
              'line_list model name null range referer referer_table sort '
              'sort_key sorted strip table table_class table_list table_map '
              'update value visited\n')

Fragment(uuid='b4e94dc9-6c55-44d3-94a4-ef2be4474563',
         path='/lib/dblayer/model/query.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='49151507-511e-414f-8592-dfc53151cbeb',
         path='/lib/dblayer/model/query.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='4906977c-b81a-4c56-bed6-da90a6c7346e',
         path='/lib/dblayer/model/query.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='9b75bb55-8192-4c63-97bb-66f09eeca8a7',
         path='/lib/dblayer/model/query.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='c6da92c7-6614-43d6-9536-6ae515ac5750',
         path='/lib/dblayer/model/query.py',
         lineno=7,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Query(table.Table):\n'
              '    """ Query\n'
              '    """\n'
              '    # Queries need not be created and cannot be written\n'
              '    _creatable = False\n'
              '    _writable = False\n'
              '\n'
              '    # Mapping of alias names to the source Table instances\n'
              '    # NOTE: Filled in by the __new__ class method\n'
              '    _table_map = None\n'
              '\n'
              '    # Conditions\n'
              '    # NOTE: Filled in by the __new__ class method\n'
              '    _condition_list = ()\n'
              '\n'
              '    # Group by expressions (override in your subclass)\n'
              '    _group_by = ()\n'
              '\n'
              '    # Ordering expressions (override in your subclass)\n'
              '    _order_by = ()\n')

Fragment(uuid='913b9ef4-e5b4-43c8-a385-2f5cc46c7539',
         path='/lib/dblayer/model/query.py',
         lineno=9,
         depth=1,
         type='class',
         name='Query',
         text='class Query(table.Table):\n'
              '    """ Query\n'
              '    """\n'
              '    # Queries need not be created and cannot be written\n'
              '    _creatable = False\n'
              '    _writable = False\n'
              '\n'
              '    # Mapping of alias names to the source Table instances\n'
              '    # NOTE: Filled in by the __new__ class method\n'
              '    _table_map = None\n'
              '\n'
              '    # Conditions\n'
              '    # NOTE: Filled in by the __new__ class method\n'
              '    _condition_list = ()\n'
              '\n'
              '    # Group by expressions (override in your subclass)\n'
              '    _group_by = ()\n'
              '\n'
              '    # Ordering expressions (override in your subclass)\n'
              '    _order_by = ()\n')

Fragment(uuid='dbd97d06-38cf-410f-bd34-955d48c41ba5',
         path='/lib/dblayer/model/query.py',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='# Queries need not be created and cannot be written')

Fragment(uuid='53b27009-54f5-45e0-a0dc-4ebf026d192d',
         path='/lib/dblayer/model/query.py',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='# Mapping of alias names to the source Table instances')

Fragment(uuid='5354567b-85f0-4f17-acd6-800e0bc71ef4',
         path='/lib/dblayer/model/query.py',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Filled in by the __new__ class method')

Fragment(uuid='f2d8a142-d756-48b8-9fff-fd145f292474',
         path='/lib/dblayer/model/query.py',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Filled in by the __new__ class method')

Fragment(uuid='f0b5f5b8-50f1-483f-960f-e9e1a71bec1a',
         path='/lib/dblayer/model/query.py',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='# Group by expressions (override in your subclass)')

Fragment(uuid='4f66ae7f-607d-4b42-bc64-4c64844ee97b',
         path='/lib/dblayer/model/query.py',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='# Ordering expressions (override in your subclass)')

Fragment(uuid='b834f6c9-08a4-4598-8545-e73f42e26725',
         path='/lib/dblayer/model/query.py',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Query, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='cc11ec6e-3934-4362-be77-5f33c29ba35a',
         path='/lib/dblayer/model/query.py',
         lineno=29,
         depth=1,
         type='class',
         name='Query',
         text='\n'
              '    def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Query, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='9ac351d3-83e2-4152-9a11-517eef2397e6',
         path='/lib/dblayer/model/query.py',
         lineno=30,
         depth=3,
         type='function',
         name='__new__',
         text='def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Query, cls).__new__(cls)')

Fragment(uuid='36ef0824-8ff9-49ad-896e-085371fd7d23',
         path='/lib/dblayer/model/query.py',
         lineno=31,
         depth=3,
         type='documentation',
         name='',
         text='# Initialize the class only once')

Fragment(uuid='a0785c5f-3abb-4c9b-a664-2bdb20fa6fe9',
         path='/lib/dblayer/model/query.py',
         lineno=38,
         depth=0,
         type='module',
         name='',
         text='    def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              "        # NOTE: It prevent Table's initialization from being "
              'executed, it is intentional\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Collect objects from the class definition\n'
              '        cls._collect_result_condition_list()\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='8ecfa9db-ecb2-4eb1-98b2-b2828c127559',
         path='/lib/dblayer/model/query.py',
         lineno=38,
         depth=1,
         type='class',
         name='Query',
         text='    def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              "        # NOTE: It prevent Table's initialization from being "
              'executed, it is intentional\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Collect objects from the class definition\n'
              '        cls._collect_result_condition_list()\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='37d579c5-fc57-48ce-909e-46a7bbc27958',
         path='/lib/dblayer/model/query.py',
         lineno=38,
         depth=4,
         type='function',
         name='initialize',
         text='def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              "        # NOTE: It prevent Table's initialization from being "
              'executed, it is intentional\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Collect objects from the class definition\n'
              '        cls._collect_result_condition_list()')

Fragment(uuid='dbbd4230-bbb4-4aa0-9866-b76ce7a3c884',
         path='/lib/dblayer/model/query.py',
         lineno=40,
         depth=4,
         type='documentation',
         name='',
         text='# Mark the class as initialized')

Fragment(uuid='162b2645-20b2-429b-8f2e-fd18dd720f77',
         path='/lib/dblayer/model/query.py',
         lineno=41,
         depth=4,
         type='documentation',
         name='',
         text="# NOTE: It prevent Table's initialization from being executed, "
              'it is intentional')

Fragment(uuid='e81bf0d3-4710-4fc5-a848-2d89f97b5612',
         path='/lib/dblayer/model/query.py',
         lineno=44,
         depth=5,
         type='documentation',
         name='',
         text='# Collect objects from the class definition')

Fragment(uuid='baa7ccbd-8242-4444-b349-ce83055cbd27',
         path='/lib/dblayer/model/query.py',
         lineno=48,
         depth=0,
         type='module',
         name='',
         text='    def _collect_result_condition_list(cls):\n'
              '        """ Collects the result column and condition '
              'definitions from the model class\n'
              '        """\n'
              '        cls._table_map = {}\n'
              '        cls._column_list = []\n'
              '        cls._condition_list = []\n')

Fragment(uuid='466d19af-29d4-422a-a074-7cf44da01783',
         path='/lib/dblayer/model/query.py',
         lineno=48,
         depth=1,
         type='class',
         name='Query',
         text='    def _collect_result_condition_list(cls):\n'
              '        """ Collects the result column and condition '
              'definitions from the model class\n'
              '        """\n'
              '        cls._table_map = {}\n'
              '        cls._column_list = []\n'
              '        cls._condition_list = []\n')

Fragment(uuid='edd96c18-cb6f-4519-91af-cb8ab8373d8b',
         path='/lib/dblayer/model/query.py',
         lineno=48,
         depth=4,
         type='function',
         name='_collect_result_condition_list',
         text='def _collect_result_condition_list(cls):\n'
              '        """ Collects the result column and condition '
              'definitions from the model class\n'
              '        """\n'
              '        cls._table_map = {}\n'
              '        cls._column_list = []\n'
              '        cls._condition_list = []\n')

Fragment(uuid='a3498a9c-a00d-4562-ba43-9a41fa4d00da',
         path='/lib/dblayer/model/query.py',
         lineno=49,
         depth=7,
         type='documentation',
         name='',
         text=' Collects the result column and condition definitions from the '
              'model class\n'
              '        ')

Fragment(uuid='1866973b-dc46-4419-96e3-1357609a1636',
         path='/lib/dblayer/model/query.py',
         lineno=54,
         depth=0,
         type='module',
         name='',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n'
              '\n'
              '            if isinstance(value, table.Table):\n'
              '                value._name = name\n'
              '                cls._table_map[name] = value\n'
              '\n'
              '            elif isinstance(value, Result):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._column_list.append(value)\n'
              '\n'
              '            elif isinstance(value, Condition):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._condition_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        cls._condition_list.sort(key=Condition.sort_key)\n')

Fragment(uuid='024f9fa6-d91b-4b21-a45a-77ee9d0c6cfc',
         path='/lib/dblayer/model/query.py',
         lineno=54,
         depth=1,
         type='class',
         name='Query',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n'
              '\n'
              '            if isinstance(value, table.Table):\n'
              '                value._name = name\n'
              '                cls._table_map[name] = value\n'
              '\n'
              '            elif isinstance(value, Result):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._column_list.append(value)\n'
              '\n'
              '            elif isinstance(value, Condition):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._condition_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        cls._condition_list.sort(key=Condition.sort_key)\n')

Fragment(uuid='616c2f77-6854-4b9b-a05b-b471d74218c0',
         path='/lib/dblayer/model/query.py',
         lineno=54,
         depth=4,
         type='function',
         name='_collect_result_condition_list',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n'
              '\n'
              '            if isinstance(value, table.Table):\n'
              '                value._name = name\n'
              '                cls._table_map[name] = value\n'
              '\n'
              '            elif isinstance(value, Result):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._column_list.append(value)\n'
              '\n'
              '            elif isinstance(value, Condition):\n'
              '                value.table_class = cls\n'
              '                value.name = name\n'
              '                cls._condition_list.append(value)\n'
              '\n'
              '        # Sort them by definition order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        cls._condition_list.sort(key=Condition.sort_key)')

Fragment(uuid='bde82d88-06ba-4dd1-b48c-9da82a6c4e3c',
         path='/lib/dblayer/model/query.py',
         lineno=71,
         depth=5,
         type='documentation',
         name='',
         text='# Sort them by definition order')

Fragment(uuid='7a0d4837-a99f-4dfe-8572-e330a643091d',
         path='/lib/dblayer/model/query.py',
         lineno=74,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '<Query: %s>' % self._name\n"
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='975ccc2f-7d8a-4acd-92f3-5ff00836e18e',
         path='/lib/dblayer/model/query.py',
         lineno=74,
         depth=1,
         type='class',
         name='Query',
         text='\n'
              '    def __repr__(self):\n'
              "        return '<Query: %s>' % self._name\n"
              '\n'
              '    __str__ = __repr__\n')

Fragment(uuid='e5bc56c1-77d0-40db-ba53-c0796c981ccf',
         path='/lib/dblayer/model/query.py',
         lineno=75,
         depth=3,
         type='function',
         name='__repr__',
         text="def __repr__(self):\n        return '<Query: %s>' % self._name")

Fragment(uuid='ace6cfd0-6edd-42be-b745-9da38b7d68ea',
         path='/lib/dblayer/model/query.py',
         lineno=79,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_table_list(self):\n'
              '        """ Returns the table list for the clauses of the '
              'SELECT statement\n'
              '        \n'
              '        Items of the returned list can be either:\n'
              '        \n'
              '        (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        (table_name, alias_name, join_type, id_field_name, '
              'referer_table_name, fk_field_name) to continue one.\n'
              '        \n'
              '        Unaliased tables are not used here.\n'
              '        \n'
              '        """\n'
              '        table_map = self._table_map.copy()\n')

Fragment(uuid='e4db05f4-14fd-4b34-816f-049e0052c239',
         path='/lib/dblayer/model/query.py',
         lineno=79,
         depth=1,
         type='class',
         name='Query',
         text='\n'
              '    def get_table_list(self):\n'
              '        """ Returns the table list for the clauses of the '
              'SELECT statement\n'
              '        \n'
              '        Items of the returned list can be either:\n'
              '        \n'
              '        (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        (table_name, alias_name, join_type, id_field_name, '
              'referer_table_name, fk_field_name) to continue one.\n'
              '        \n'
              '        Unaliased tables are not used here.\n'
              '        \n'
              '        """\n'
              '        table_map = self._table_map.copy()\n')

Fragment(uuid='b1af70d6-422b-4514-b96a-706b2ad134c1',
         path='/lib/dblayer/model/query.py',
         lineno=80,
         depth=3,
         type='function',
         name='get_table_list',
         text='def get_table_list(self):\n'
              '        """ Returns the table list for the clauses of the '
              'SELECT statement\n'
              '        \n'
              '        Items of the returned list can be either:\n'
              '        \n'
              '        (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        (table_name, alias_name, join_type, id_field_name, '
              'referer_table_name, fk_field_name) to continue one.\n'
              '        \n'
              '        Unaliased tables are not used here.\n'
              '        \n'
              '        """\n'
              '        table_map = self._table_map.copy()\n')

Fragment(uuid='cdba6a5e-35ce-4ac2-94a9-cc970a20e678',
         path='/lib/dblayer/model/query.py',
         lineno=81,
         depth=6,
         type='documentation',
         name='',
         text=' Returns the table list for the clauses of the SELECT '
              'statement\n'
              '        \n'
              '        Items of the returned list can be either:\n'
              '        \n'
              '        (table_name, alias_name) to start a new cross join '
              'group or\n'
              '        (table_name, alias_name, join_type, id_field_name, '
              'referer_table_name, fk_field_name) to continue one.\n'
              '        \n'
              '        Unaliased tables are not used here.\n'
              '        \n'
              '        ')

Fragment(uuid='3b0c4db6-0837-489a-8b8c-805c9a3df05e',
         path='/lib/dblayer/model/query.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        def iterate_joined_tables(referer, visited):\n'
              '            """ Appends tables referenced from the given table '
              'to the table list\n'
              '            """\n'
              '            # Iterate on all the tables remained in the table '
              'map\n')

Fragment(uuid='f575fa6f-58aa-475b-ad8f-7e263138ea68',
         path='/lib/dblayer/model/query.py',
         lineno=92,
         depth=1,
         type='class',
         name='Query',
         text='\n'
              '        def iterate_joined_tables(referer, visited):\n'
              '            """ Appends tables referenced from the given table '
              'to the table list\n'
              '            """\n'
              '            # Iterate on all the tables remained in the table '
              'map\n')

Fragment(uuid='507f7623-c0cf-4a19-aaae-de60e7aa0c80',
         path='/lib/dblayer/model/query.py',
         lineno=92,
         depth=3,
         type='function',
         name='get_table_list',
         text='\n'
              '        def iterate_joined_tables(referer, visited):\n'
              '            """ Appends tables referenced from the given table '
              'to the table list\n'
              '            """\n'
              '            # Iterate on all the tables remained in the table '
              'map\n')

Fragment(uuid='c361df0d-012f-4dfe-95a5-bf9c5e44135d',
         path='/lib/dblayer/model/query.py',
         lineno=93,
         depth=5,
         type='function',
         name='iterate_joined_tables',
         text='def iterate_joined_tables(referer, visited):\n'
              '            """ Appends tables referenced from the given table '
              'to the table list\n'
              '            """\n'
              '            # Iterate on all the tables remained in the table '
              'map\n')

Fragment(uuid='38b8ce6a-6957-491f-bdb7-f2e39d3bb57b',
         path='/lib/dblayer/model/query.py',
         lineno=94,
         depth=8,
         type='documentation',
         name='',
         text=' Appends tables referenced from the given table to the table '
              'list\n'
              '            ')

Fragment(uuid='f5f11829-ce6a-47e6-b80d-95b65b6e3ff1',
         path='/lib/dblayer/model/query.py',
         lineno=96,
         depth=6,
         type='documentation',
         name='',
         text='# Iterate on all the tables remained in the table map')

Fragment(uuid='a5517159-0e20-4a5a-a5b6-932bc55a4624',
         path='/lib/dblayer/model/query.py',
         lineno=97,
         depth=0,
         type='module',
         name='',
         text='            for alias_name, table in table_map.items():\n'
              '\n'
              '                # Determine the referer table for this table in '
              'the JOIN chain\n'
              '                foreign_key = table._referer\n'
              '                referer_table = foreign_key.table if '
              'foreign_key else None\n'
              '\n'
              "                # Is the referer the table we're looking for?\n")

Fragment(uuid='6ad71f79-d1fc-44ff-b594-d1f7c3057cd0',
         path='/lib/dblayer/model/query.py',
         lineno=97,
         depth=1,
         type='class',
         name='Query',
         text='            for alias_name, table in table_map.items():\n'
              '\n'
              '                # Determine the referer table for this table in '
              'the JOIN chain\n'
              '                foreign_key = table._referer\n'
              '                referer_table = foreign_key.table if '
              'foreign_key else None\n'
              '\n'
              "                # Is the referer the table we're looking for?\n")

Fragment(uuid='2bdecb32-3c2c-4f8a-8523-f879cfb300b6',
         path='/lib/dblayer/model/query.py',
         lineno=97,
         depth=3,
         type='function',
         name='get_table_list',
         text='            for alias_name, table in table_map.items():\n'
              '\n'
              '                # Determine the referer table for this table in '
              'the JOIN chain\n'
              '                foreign_key = table._referer\n'
              '                referer_table = foreign_key.table if '
              'foreign_key else None\n'
              '\n'
              "                # Is the referer the table we're looking for?\n")

Fragment(uuid='7aebed90-6658-469a-97d8-3e4c96919bc9',
         path='/lib/dblayer/model/query.py',
         lineno=97,
         depth=5,
         type='function',
         name='iterate_joined_tables',
         text='            for alias_name, table in table_map.items():\n'
              '\n'
              '                # Determine the referer table for this table in '
              'the JOIN chain\n'
              '                foreign_key = table._referer\n'
              '                referer_table = foreign_key.table if '
              'foreign_key else None\n'
              '\n'
              "                # Is the referer the table we're looking for?\n")

Fragment(uuid='3fb86a02-0b80-4342-b0b3-13b3ec2b0107',
         path='/lib/dblayer/model/query.py',
         lineno=99,
         depth=7,
         type='documentation',
         name='',
         text='# Determine the referer table for this table in the JOIN chain')

Fragment(uuid='5f23ddde-893c-4435-9124-583328afad5f',
         path='/lib/dblayer/model/query.py',
         lineno=103,
         depth=8,
         type='documentation',
         name='',
         text="# Is the referer the table we're looking for?")

Fragment(uuid='a79b3b16-2507-45d1-9972-0d58e00d59b8',
         path='/lib/dblayer/model/query.py',
         lineno=104,
         depth=0,
         type='module',
         name='',
         text='                if referer_table is referer and alias_name not '
              'in visited:\n'
              '\n'
              '                    # Consider each table only once\n'
              '                    visited.add(alias_name)\n'
              '\n'
              '                    # Construct table list item\n')

Fragment(uuid='8f2dd9d0-d158-46f3-919b-5b646c32f910',
         path='/lib/dblayer/model/query.py',
         lineno=104,
         depth=1,
         type='class',
         name='Query',
         text='                if referer_table is referer and alias_name not '
              'in visited:\n'
              '\n'
              '                    # Consider each table only once\n'
              '                    visited.add(alias_name)\n'
              '\n'
              '                    # Construct table list item\n')

Fragment(uuid='5a5a4248-3e95-4337-a1d6-c9082c565e86',
         path='/lib/dblayer/model/query.py',
         lineno=104,
         depth=3,
         type='function',
         name='get_table_list',
         text='                if referer_table is referer and alias_name not '
              'in visited:\n'
              '\n'
              '                    # Consider each table only once\n'
              '                    visited.add(alias_name)\n'
              '\n'
              '                    # Construct table list item\n')

Fragment(uuid='9ae42ab2-181a-48af-bd64-38d5789fa26d',
         path='/lib/dblayer/model/query.py',
         lineno=104,
         depth=5,
         type='function',
         name='iterate_joined_tables',
         text='                if referer_table is referer and alias_name not '
              'in visited:\n'
              '\n'
              '                    # Consider each table only once\n'
              '                    visited.add(alias_name)\n'
              '\n'
              '                    # Construct table list item\n')

Fragment(uuid='f585884f-f845-4c49-86d6-886d5830a810',
         path='/lib/dblayer/model/query.py',
         lineno=106,
         depth=9,
         type='documentation',
         name='',
         text='# Consider each table only once')

Fragment(uuid='cebf341b-5af7-4557-badd-32227ed25de9',
         path='/lib/dblayer/model/query.py',
         lineno=109,
         depth=10,
         type='documentation',
         name='',
         text='# Construct table list item')

Fragment(uuid='c889ab32-6b72-4ca7-81a7-7f6e81e4d80f',
         path='/lib/dblayer/model/query.py',
         lineno=110,
         depth=0,
         type='module',
         name='',
         text='                    if referer is None:\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                            # Alias name in this query for this '
              'table\n'
              '                            alias_name)\n'
              '                    else:\n'
              '                        join_type = constants.LEFT_JOIN if '
              'foreign_key.null else constants.INNER_JOIN\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                       ')

Fragment(uuid='1bdc1c0d-3111-4f53-a9d3-ac94e80c6a16',
         path='/lib/dblayer/model/query.py',
         lineno=110,
         depth=1,
         type='class',
         name='Query',
         text='                    if referer is None:\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                            # Alias name in this query for this '
              'table\n'
              '                            alias_name)\n'
              '                    else:\n'
              '                        join_type = constants.LEFT_JOIN if '
              'foreign_key.null else constants.INNER_JOIN\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                       ')

Fragment(uuid='5903bb14-3b91-4481-bbe3-de1f093a1845',
         path='/lib/dblayer/model/query.py',
         lineno=110,
         depth=3,
         type='function',
         name='get_table_list',
         text='                    if referer is None:\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                            # Alias name in this query for this '
              'table\n'
              '                            alias_name)\n'
              '                    else:\n'
              '                        join_type = constants.LEFT_JOIN if '
              'foreign_key.null else constants.INNER_JOIN\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                       ')

Fragment(uuid='620f52ae-9064-4902-b9cf-b1f2af598936',
         path='/lib/dblayer/model/query.py',
         lineno=110,
         depth=5,
         type='function',
         name='iterate_joined_tables',
         text='                    if referer is None:\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                            # Alias name in this query for this '
              'table\n'
              '                            alias_name)\n'
              '                    else:\n'
              '                        join_type = constants.LEFT_JOIN if '
              'foreign_key.null else constants.INNER_JOIN\n'
              '                        item = (\n'
              '                            # Database table name, not the '
              'alias in this query\n'
              '                            table._table_name,\n'
              '                       ')

Fragment(uuid='38b13ae4-ffc5-4ce5-99fb-7e5cf2a21d73',
         path='/lib/dblayer/model/query.py',
         lineno=112,
         depth=15,
         type='documentation',
         name='',
         text='# Database table name, not the alias in this query')

Fragment(uuid='169dff2a-ad55-4616-918e-9aafa45acc81',
         path='/lib/dblayer/model/query.py',
         lineno=114,
         depth=15,
         type='documentation',
         name='',
         text='# Alias name in this query for this table')

Fragment(uuid='f1f60516-23b4-4116-9a56-883582ab2b86',
         path='/lib/dblayer/model/query.py',
         lineno=119,
         depth=16,
         type='documentation',
         name='',
         text='# Database table name, not the alias in this query')

Fragment(uuid='e24898eb-a368-47e6-8605-1fd10d11c851',
         path='/lib/dblayer/model/query.py',
         lineno=121,
         depth=0,
         type='module',
         name='',
         text='     # Alias name in this query for this table\n'
              '                            alias_name,\n'
              '                            # Type of this joine, like INNER '
              'JOIN or LEFT JOIN\n'
              '                            join_type,\n'
              '                            # Name of the primary key column in '
              'the joined table\n'
              '                            table._primary_key.name,\n'
              '                            # Alias name of the referer '
              '(already joined) table\n'
              '                            referer_table._name,\n'
              '                            # Name of the referer foreign key '
              'column in the referer (already joined) table\n'
              '                            foreign_key.name)\n')

Fragment(uuid='98e4da12-8948-453d-a1ce-9f4dae87db02',
         path='/lib/dblayer/model/query.py',
         lineno=121,
         depth=1,
         type='class',
         name='Query',
         text='     # Alias name in this query for this table\n'
              '                            alias_name,\n'
              '                            # Type of this joine, like INNER '
              'JOIN or LEFT JOIN\n'
              '                            join_type,\n'
              '                            # Name of the primary key column in '
              'the joined table\n'
              '                            table._primary_key.name,\n'
              '                            # Alias name of the referer '
              '(already joined) table\n'
              '                            referer_table._name,\n'
              '                            # Name of the referer foreign key '
              'column in the referer (already joined) table\n'
              '                            foreign_key.name)\n')

Fragment(uuid='4628f919-7698-4741-b62a-fa7a178ccf93',
         path='/lib/dblayer/model/query.py',
         lineno=121,
         depth=3,
         type='function',
         name='get_table_list',
         text='     # Alias name in this query for this table\n'
              '                            alias_name,\n'
              '                            # Type of this joine, like INNER '
              'JOIN or LEFT JOIN\n'
              '                            join_type,\n'
              '                            # Name of the primary key column in '
              'the joined table\n'
              '                            table._primary_key.name,\n'
              '                            # Alias name of the referer '
              '(already joined) table\n'
              '                            referer_table._name,\n'
              '                            # Name of the referer foreign key '
              'column in the referer (already joined) table\n'
              '                            foreign_key.name)\n')

Fragment(uuid='36511df2-a0ed-4b4a-95b3-172866bc538b',
         path='/lib/dblayer/model/query.py',
         lineno=121,
         depth=5,
         type='function',
         name='iterate_joined_tables',
         text='     # Alias name in this query for this table\n'
              '                            alias_name,\n'
              '                            # Type of this joine, like INNER '
              'JOIN or LEFT JOIN\n'
              '                            join_type,\n'
              '                            # Name of the primary key column in '
              'the joined table\n'
              '                            table._primary_key.name,\n'
              '                            # Alias name of the referer '
              '(already joined) table\n'
              '                            referer_table._name,\n'
              '                            # Name of the referer foreign key '
              'column in the referer (already joined) table\n'
              '                            foreign_key.name)\n')

Fragment(uuid='3ace971a-4e9c-457f-b5da-b3988a36f242',
         path='/lib/dblayer/model/query.py',
         lineno=121,
         depth=16,
         type='documentation',
         name='',
         text='# Alias name in this query for this table')

Fragment(uuid='cf2ed06f-dd40-4337-9fdc-1839e8708899',
         path='/lib/dblayer/model/query.py',
         lineno=123,
         depth=16,
         type='documentation',
         name='',
         text='# Type of this joine, like INNER JOIN or LEFT JOIN')

Fragment(uuid='f2b83569-2fa4-497c-bf7c-b223be363f4d',
         path='/lib/dblayer/model/query.py',
         lineno=125,
         depth=16,
         type='documentation',
         name='',
         text='# Name of the primary key column in the joined table')

Fragment(uuid='30a120e2-7efe-47d6-9dcb-5cc15f6cec3a',
         path='/lib/dblayer/model/query.py',
         lineno=127,
         depth=16,
         type='documentation',
         name='',
         text='# Alias name of the referer (already joined) table')

Fragment(uuid='64e312ac-557f-4d8a-9dcf-7dbab9cbdf72',
         path='/lib/dblayer/model/query.py',
         lineno=129,
         depth=16,
         type='documentation',
         name='',
         text='# Name of the referer foreign key column in the referer '
              '(already joined) table')

Fragment(uuid='ec321e46-9b62-4214-9bed-1cfbda75ece5',
         path='/lib/dblayer/model/query.py',
         lineno=131,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                    if constants.DEBUG:\n'
              '                        assert not sum(1 for x in item if not '
              "x), 'Empty name(s) in join definition item: %r' % (item,)\n"
              '\n'
              '                    # Yield table list item\n'
              '                    yield item\n'
              '\n'
              '                    # Find all the referer tables below this '
              'point in the tree\n')

Fragment(uuid='c9dc1361-0d3e-4065-8748-dcefdbf2bb5c',
         path='/lib/dblayer/model/query.py',
         lineno=131,
         depth=1,
         type='class',
         name='Query',
         text='\n'
              '                    if constants.DEBUG:\n'
              '                        assert not sum(1 for x in item if not '
              "x), 'Empty name(s) in join definition item: %r' % (item,)\n"
              '\n'
              '                    # Yield table list item\n'
              '                    yield item\n'
              '\n'
              '                    # Find all the referer tables below this '
              'point in the tree\n')

Fragment(uuid='86563fce-eca9-4e36-b688-30975be6d428',
         path='/lib/dblayer/model/query.py',
         lineno=131,
         depth=3,
         type='function',
         name='get_table_list',
         text='\n'
              '                    if constants.DEBUG:\n'
              '                        assert not sum(1 for x in item if not '
              "x), 'Empty name(s) in join definition item: %r' % (item,)\n"
              '\n'
              '                    # Yield table list item\n'
              '                    yield item\n'
              '\n'
              '                    # Find all the referer tables below this '
              'point in the tree\n')

Fragment(uuid='5a2ef86c-8762-4d07-afb6-12bc85927aae',
         path='/lib/dblayer/model/query.py',
         lineno=131,
         depth=5,
         type='function',
         name='iterate_joined_tables',
         text='\n'
              '                    if constants.DEBUG:\n'
              '                        assert not sum(1 for x in item if not '
              "x), 'Empty name(s) in join definition item: %r' % (item,)\n"
              '\n'
              '                    # Yield table list item\n'
              '                    yield item\n'
              '\n'
              '                    # Find all the referer tables below this '
              'point in the tree\n')

Fragment(uuid='7a9a85ae-0452-4d8f-944b-57bbb480350b',
         path='/lib/dblayer/model/query.py',
         lineno=133,
         depth=15,
         type='documentation',
         name='',
         text='Empty name(s) in join definition item: %r')

Fragment(uuid='751a5fb7-8104-470b-87ba-41bb4325361d',
         path='/lib/dblayer/model/query.py',
         lineno=135,
         depth=10,
         type='documentation',
         name='',
         text='# Yield table list item')

Fragment(uuid='14d12e5f-a70f-4788-8214-32d3e98ccdbd',
         path='/lib/dblayer/model/query.py',
         lineno=138,
         depth=10,
         type='documentation',
         name='',
         text='# Find all the referer tables below this point in the tree')

Fragment(uuid='f96dd8d5-9cdd-481d-918d-059f61c081dd',
         path='/lib/dblayer/model/query.py',
         lineno=139,
         depth=0,
         type='module',
         name='',
         text='                    for item in iterate_joined_tables(table, '
              'visited):\n'
              '                        yield item\n'
              '\n'
              '        visited = set()\n'
              '        table_list = list(iterate_joined_tables(None, '
              'visited))\n'
              '        assert len(visited) == len(table_map)\n'
              '\n'
              '        return table_list\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='5a4c776d-6470-4b0c-b578-c9a84f3b9309',
         path='/lib/dblayer/model/query.py',
         lineno=139,
         depth=1,
         type='class',
         name='Query',
         text='                    for item in iterate_joined_tables(table, '
              'visited):\n'
              '                        yield item\n'
              '\n'
              '        visited = set()\n'
              '        table_list = list(iterate_joined_tables(None, '
              'visited))\n'
              '        assert len(visited) == len(table_map)\n'
              '\n'
              '        return table_list\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='a76e874b-0b31-45ac-94a6-afbf71062628',
         path='/lib/dblayer/model/query.py',
         lineno=139,
         depth=3,
         type='function',
         name='get_table_list',
         text='                    for item in iterate_joined_tables(table, '
              'visited):\n'
              '                        yield item\n'
              '\n'
              '        visited = set()\n'
              '        table_list = list(iterate_joined_tables(None, '
              'visited))\n'
              '        assert len(visited) == len(table_map)\n'
              '\n'
              '        return table_list')

Fragment(uuid='0dc412c6-30da-4bb1-968f-a16edd3984e2',
         path='/lib/dblayer/model/query.py',
         lineno=139,
         depth=5,
         type='function',
         name='iterate_joined_tables',
         text='                    for item in iterate_joined_tables(table, '
              'visited):\n'
              '                        yield item')

Fragment(uuid='130ff349-0962-4e52-b54c-2737fb2b3711',
         path='/lib/dblayer/model/query.py',
         lineno=149,
         depth=0,
         type='module',
         name='',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the query\n'
              '        """\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = ['class %s(query.Query):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='e279b9de-bae7-4b83-b697-f64d742f68ec',
         path='/lib/dblayer/model/query.py',
         lineno=149,
         depth=1,
         type='class',
         name='Query',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the query\n'
              '        """\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = ['class %s(query.Query):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='3ca44c94-008e-48c2-bb9c-bc1de8d34e32',
         path='/lib/dblayer/model/query.py',
         lineno=149,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='def pretty_format_class(cls):\n'
              '        """ Formats source code defining the query\n'
              '        """\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              "        line_list = ['class %s(query.Query):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n")

Fragment(uuid='990c4cad-b91d-480d-8b57-7add8b0f5a44',
         path='/lib/dblayer/model/query.py',
         lineno=150,
         depth=7,
         type='documentation',
         name='',
         text=' Formats source code defining the query\n        ')

Fragment(uuid='5e05a70c-b7c9-4d67-824c-a5fa5a884319',
         path='/lib/dblayer/model/query.py',
         lineno=155,
         depth=10,
         type='documentation',
         name='',
         text='class %s(query.Query):')

Fragment(uuid='b1878b7f-667f-4fb8-bf1f-2a6095fe68a9',
         path='/lib/dblayer/model/query.py',
         lineno=165,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for alias, table in sorted(cls._table_map.items()):\n'
              "            append_line('    %s = %s()' % (alias, "
              'table.__class__.__name__))\n'
              "        append_line('')\n")

Fragment(uuid='04b13eeb-c07e-465b-a351-11c25caaec5a',
         path='/lib/dblayer/model/query.py',
         lineno=165,
         depth=1,
         type='class',
         name='Query',
         text='\n'
              '        for alias, table in sorted(cls._table_map.items()):\n'
              "            append_line('    %s = %s()' % (alias, "
              'table.__class__.__name__))\n'
              "        append_line('')\n")

Fragment(uuid='eae8751b-391b-48d8-b7a0-a8be56266a48',
         path='/lib/dblayer/model/query.py',
         lineno=165,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for alias, table in sorted(cls._table_map.items()):\n'
              "            append_line('    %s = %s()' % (alias, "
              'table.__class__.__name__))\n'
              "        append_line('')\n")

Fragment(uuid='dcfe4274-7cf6-4e88-bc68-787715561ad9',
         path='/lib/dblayer/model/query.py',
         lineno=169,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._column_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n")

Fragment(uuid='3a94e7ec-f78d-4038-89af-dccc46ae0eb0',
         path='/lib/dblayer/model/query.py',
         lineno=169,
         depth=1,
         type='class',
         name='Query',
         text='\n'
              '        for obj in cls._column_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n")

Fragment(uuid='680b2244-c1e1-4bd1-aac0-429b4f25a7e1',
         path='/lib/dblayer/model/query.py',
         lineno=169,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._column_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n")

Fragment(uuid='94f01e7e-bb91-4e67-a4e3-fc9d8e10553f',
         path='/lib/dblayer/model/query.py',
         lineno=174,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._condition_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n"
              '\n'
              '        if cls._group_by:\n'
              "            append_line('    _group_by = %r' % "
              '(cls._group_by,))\n'
              '\n'
              '        if cls._order_by:\n'
              "            append_line('    _order_by = %r' % "
              '(cls._order_by,))\n')

Fragment(uuid='62478c77-52dd-4175-8b4d-065031759cb6',
         path='/lib/dblayer/model/query.py',
         lineno=174,
         depth=1,
         type='class',
         name='Query',
         text='\n'
              '        for obj in cls._condition_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n"
              '\n'
              '        if cls._group_by:\n'
              "            append_line('    _group_by = %r' % "
              '(cls._group_by,))\n'
              '\n'
              '        if cls._order_by:\n'
              "            append_line('    _order_by = %r' % "
              '(cls._order_by,))\n')

Fragment(uuid='bfeca47d-9a05-4e41-acf4-a80ffac496ff',
         path='/lib/dblayer/model/query.py',
         lineno=174,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._condition_list:\n'
              "            append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '\n'
              "        append_line('')\n"
              '\n'
              '        if cls._group_by:\n'
              "            append_line('    _group_by = %r' % "
              '(cls._group_by,))\n'
              '\n'
              '        if cls._order_by:\n'
              "            append_line('    _order_by = %r' % "
              '(cls._order_by,))\n')

Fragment(uuid='fbbf4409-e6e0-428c-bac1-ab89902ea0f5',
         path='/lib/dblayer/model/query.py',
         lineno=185,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for i in range(len(line_list) - 1, 1, -1):\n'
              '            if not line_list[i] and not line_list[i - 1]:\n'
              '                del line_list[i]\n'
              '\n'
              "        return '\\n'.join(line_list)\n")

Fragment(uuid='c118e31c-e6f1-4177-a5b0-de45da11fe88',
         path='/lib/dblayer/model/query.py',
         lineno=185,
         depth=1,
         type='class',
         name='Query',
         text='\n'
              '        for i in range(len(line_list) - 1, 1, -1):\n'
              '            if not line_list[i] and not line_list[i - 1]:\n'
              '                del line_list[i]\n'
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='de4ccf7d-5594-4e8b-aabe-e4cf4787ab69',
         path='/lib/dblayer/model/query.py',
         lineno=185,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for i in range(len(line_list) - 1, 1, -1):\n'
              '            if not line_list[i] and not line_list[i - 1]:\n'
              '                del line_list[i]\n'
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='643b586d-c69e-4ab7-ace5-cb8538cc848f',
         path='/lib/dblayer/model/query.py',
         lineno=191,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseQueryResult(column.BaseColumn):\n'
              '    """ Base class for columns used in a query either as a '
              'result or a condition\n'
              '    \n'
              '    The expression can be a column of a source table or any '
              'expression built\n'
              '    from functions and aggregations in any way acceptable in an '
              'SQL statement.\n'
              '    \n'
              '    """\n'
              '\n'
              '    # Expression to evaluate to get the value of the given '
              'result column\n'
              '    expression = None\n'
              '\n'
              '    # Column definition for calculated results, required for '
              'expressions,\n'
              '    # filled automatically in the case of simple source column '
              'results\n'
              '    column_type = None\n'
              '\n'
              '    # True value indicates that the expression is written into '
              'the HAVING clause\n'
              '    after_group_by = False\n')

Fragment(uuid='95cee25b-558c-46a8-b74f-a1e7d2a79f39',
         path='/lib/dblayer/model/query.py',
         lineno=193,
         depth=1,
         type='class',
         name='BaseQueryResult',
         text='class BaseQueryResult(column.BaseColumn):\n'
              '    """ Base class for columns used in a query either as a '
              'result or a condition\n'
              '    \n'
              '    The expression can be a column of a source table or any '
              'expression built\n'
              '    from functions and aggregations in any way acceptable in an '
              'SQL statement.\n'
              '    \n'
              '    """\n'
              '\n'
              '    # Expression to evaluate to get the value of the given '
              'result column\n'
              '    expression = None\n'
              '\n'
              '    # Column definition for calculated results, required for '
              'expressions,\n'
              '    # filled automatically in the case of simple source column '
              'results\n'
              '    column_type = None\n'
              '\n'
              '    # True value indicates that the expression is written into '
              'the HAVING clause\n'
              '    after_group_by = False\n')

Fragment(uuid='cd70acc1-5e43-48b2-91d5-0936467ce1fb',
         path='/lib/dblayer/model/query.py',
         lineno=194,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for columns used in a query either as a result or a '
              'condition\n'
              '    \n'
              '    The expression can be a column of a source table or any '
              'expression built\n'
              '    from functions and aggregations in any way acceptable in an '
              'SQL statement.\n'
              '    \n'
              '    ')

Fragment(uuid='8a068e5c-1e14-40ab-b8e7-ee1e7a248a5d',
         path='/lib/dblayer/model/query.py',
         lineno=201,
         depth=2,
         type='documentation',
         name='',
         text='# Expression to evaluate to get the value of the given result '
              'column')

Fragment(uuid='1ef856e1-414c-44d1-9d3e-61c739258ee4',
         path='/lib/dblayer/model/query.py',
         lineno=204,
         depth=2,
         type='documentation',
         name='',
         text='# Column definition for calculated results, required for '
              'expressions,')

Fragment(uuid='c72a1321-d460-4d06-b457-0d61aad2092e',
         path='/lib/dblayer/model/query.py',
         lineno=205,
         depth=2,
         type='documentation',
         name='',
         text='# filled automatically in the case of simple source column '
              'results')

Fragment(uuid='efb49742-b1cd-44cb-81ea-43f9a92b2fe0',
         path='/lib/dblayer/model/query.py',
         lineno=208,
         depth=2,
         type='documentation',
         name='',
         text='# True value indicates that the expression is written into the '
              'HAVING clause')

Fragment(uuid='1b2ce42f-ff13-42d5-9b30-1dc97fa726b8',
         path='/lib/dblayer/model/query.py',
         lineno=210,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, expression, column_type=None, '
              'doc=None):\n'
              '        column.BaseColumn.__init__(self, doc=doc)\n'
              '\n'
              '        assert self.__class__ is not BaseQueryResult, (\n'
              "            'Only subclasses of BaseQueryResult can be "
              "instantiated!')\n"
              '\n'
              '        # Cloning the column?\n')

Fragment(uuid='47177209-0fa2-4f56-9dd1-891d0f2a4570',
         path='/lib/dblayer/model/query.py',
         lineno=210,
         depth=1,
         type='class',
         name='BaseQueryResult',
         text='\n'
              '    def __init__(self, expression, column_type=None, '
              'doc=None):\n'
              '        column.BaseColumn.__init__(self, doc=doc)\n'
              '\n'
              '        assert self.__class__ is not BaseQueryResult, (\n'
              "            'Only subclasses of BaseQueryResult can be "
              "instantiated!')\n"
              '\n'
              '        # Cloning the column?\n')

Fragment(uuid='fac6a144-959e-4855-9568-7b6f07f64d84',
         path='/lib/dblayer/model/query.py',
         lineno=211,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, expression, column_type=None, doc=None):\n'
              '        column.BaseColumn.__init__(self, doc=doc)\n'
              '\n'
              '        assert self.__class__ is not BaseQueryResult, (\n'
              "            'Only subclasses of BaseQueryResult can be "
              "instantiated!')\n"
              '\n'
              '        # Cloning the column?\n')

Fragment(uuid='ad550608-55e2-4c87-b125-d399619a48e3',
         path='/lib/dblayer/model/query.py',
         lineno=215,
         depth=7,
         type='documentation',
         name='',
         text='Only subclasses of BaseQueryResult can be instantiated!')

Fragment(uuid='fae1591e-e470-4dad-b621-3d2c1a89b09b',
         path='/lib/dblayer/model/query.py',
         lineno=217,
         depth=4,
         type='documentation',
         name='',
         text='# Cloning the column?')

Fragment(uuid='2aebfed4-9c33-40d8-b899-799739a122f3',
         path='/lib/dblayer/model/query.py',
         lineno=218,
         depth=0,
         type='module',
         name='',
         text='        if expression is None:\n'
              '            return\n'
              '\n'
              '        # Automatically set the column_type in the case of '
              'simple results\n')

Fragment(uuid='b7282674-63c2-43c2-beb7-24157cc52f1b',
         path='/lib/dblayer/model/query.py',
         lineno=218,
         depth=1,
         type='class',
         name='BaseQueryResult',
         text='        if expression is None:\n'
              '            return\n'
              '\n'
              '        # Automatically set the column_type in the case of '
              'simple results\n')

Fragment(uuid='a51a16a2-8380-4fb0-848c-1b6ad488a79f',
         path='/lib/dblayer/model/query.py',
         lineno=218,
         depth=3,
         type='function',
         name='__init__',
         text='        if expression is None:\n'
              '            return\n'
              '\n'
              '        # Automatically set the column_type in the case of '
              'simple results\n')

Fragment(uuid='3cdb89c5-a2be-4b1c-ba39-bcf4a42e205e',
         path='/lib/dblayer/model/query.py',
         lineno=221,
         depth=4,
         type='documentation',
         name='',
         text='# Automatically set the column_type in the case of simple '
              'results')

Fragment(uuid='b5456fb7-05d2-4873-b4f9-37bba1027917',
         path='/lib/dblayer/model/query.py',
         lineno=222,
         depth=0,
         type='module',
         name='',
         text='        if isinstance(expression, column.BaseColumn):\n'
              "            assert column_type is None, 'Passing column_type is "
              "not required in the case of simple column references!'\n"
              '            column_type = getattr(expression.table_class, '
              'expression.name)\n'
              "            self.full_repr_exclude = ('column_type',)\n"
              '        elif isinstance(expression, '
              'index.FullTextSearchIndex):\n'
              '            column_type = column.Text\n'
              '        else:\n'
              "            assert column_type is not None, 'Passing "
              'column_type is required in the case of calculated '
              "expressions!'\n"
              "            assert column_type.table is None, 'Pass an unbound "
              "column type, not the column of a bound table!'\n"
              '\n'
              '        self.expression = expression\n'
              '        self.column_type = column_type\n')

Fragment(uuid='b5ed5e50-b19d-4a14-800c-cdefb1ebe50c',
         path='/lib/dblayer/model/query.py',
         lineno=222,
         depth=1,
         type='class',
         name='BaseQueryResult',
         text='        if isinstance(expression, column.BaseColumn):\n'
              "            assert column_type is None, 'Passing column_type is "
              "not required in the case of simple column references!'\n"
              '            column_type = getattr(expression.table_class, '
              'expression.name)\n'
              "            self.full_repr_exclude = ('column_type',)\n"
              '        elif isinstance(expression, '
              'index.FullTextSearchIndex):\n'
              '            column_type = column.Text\n'
              '        else:\n'
              "            assert column_type is not None, 'Passing "
              'column_type is required in the case of calculated '
              "expressions!'\n"
              "            assert column_type.table is None, 'Pass an unbound "
              "column type, not the column of a bound table!'\n"
              '\n'
              '        self.expression = expression\n'
              '        self.column_type = column_type\n')

Fragment(uuid='871a7c94-6700-4308-9442-a91d25360c6a',
         path='/lib/dblayer/model/query.py',
         lineno=222,
         depth=3,
         type='function',
         name='__init__',
         text='        if isinstance(expression, column.BaseColumn):\n'
              "            assert column_type is None, 'Passing column_type is "
              "not required in the case of simple column references!'\n"
              '            column_type = getattr(expression.table_class, '
              'expression.name)\n'
              "            self.full_repr_exclude = ('column_type',)\n"
              '        elif isinstance(expression, '
              'index.FullTextSearchIndex):\n'
              '            column_type = column.Text\n'
              '        else:\n'
              "            assert column_type is not None, 'Passing "
              'column_type is required in the case of calculated '
              "expressions!'\n"
              "            assert column_type.table is None, 'Pass an unbound "
              "column type, not the column of a bound table!'\n"
              '\n'
              '        self.expression = expression\n'
              '        self.column_type = column_type')

Fragment(uuid='03b536ef-9f8f-4b04-90be-8f07eb09bd80',
         path='/lib/dblayer/model/query.py',
         lineno=223,
         depth=8,
         type='documentation',
         name='',
         text='Passing column_type is not required in the case of simple '
              'column references!')

Fragment(uuid='170231aa-e12a-460a-b871-464e1304fdb3',
         path='/lib/dblayer/model/query.py',
         lineno=229,
         depth=9,
         type='documentation',
         name='',
         text='Passing column_type is required in the case of calculated '
              'expressions!')

Fragment(uuid='0f405594-0be7-49b0-9fb3-702c99c0e33d',
         path='/lib/dblayer/model/query.py',
         lineno=230,
         depth=9,
         type='documentation',
         name='',
         text='Pass an unbound column type, not the column of a bound table!')

Fragment(uuid='d56233ce-f893-4fdd-abe0-dc9c3a079276',
         path='/lib/dblayer/model/query.py',
         lineno=234,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this query result column for a table '
              'instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='fd3b019a-da3c-401f-b661-315d6dbd4c94',
         path='/lib/dblayer/model/query.py',
         lineno=234,
         depth=1,
         type='class',
         name='BaseQueryResult',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this query result column for a table '
              'instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='1efdf3c3-2360-41a6-8c9f-2963d8104f11',
         path='/lib/dblayer/model/query.py',
         lineno=235,
         depth=3,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        """ Clone this query result column for a table '
              'instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='bb6ae282-10e8-494b-9add-d2de8ba472e9',
         path='/lib/dblayer/model/query.py',
         lineno=236,
         depth=6,
         type='documentation',
         name='',
         text=' Clone this query result column for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'columns to the table instance.\n'
              '        \n'
              '        ')

Fragment(uuid='48ff98e3-8296-466d-bb37-5c9b5fc2a9a4',
         path='/lib/dblayer/model/query.py',
         lineno=245,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Result(BaseQueryResult):\n'
              '    """ Query result\n'
              '    """\n')

Fragment(uuid='2af0d027-5fb5-4279-9494-0f8678642e0c',
         path='/lib/dblayer/model/query.py',
         lineno=247,
         depth=1,
         type='class',
         name='Result',
         text='class Result(BaseQueryResult):\n    """ Query result\n    """')

Fragment(uuid='fd92b970-781e-47e1-8f36-0e6531dbda0b',
         path='/lib/dblayer/model/query.py',
         lineno=250,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Condition(BaseQueryResult):\n'
              '    """ Query condition precessed before processing the '
              'aggregates (where)\n'
              '    """\n')

Fragment(uuid='714978dd-0381-4225-9bf8-478cc4619f31',
         path='/lib/dblayer/model/query.py',
         lineno=252,
         depth=1,
         type='class',
         name='Condition',
         text='class Condition(BaseQueryResult):\n'
              '    """ Query condition precessed before processing the '
              'aggregates (where)\n'
              '    """')

Fragment(uuid='6d9a0665-8c94-41f7-8412-ec20842501c3',
         path='/lib/dblayer/model/query.py',
         lineno=253,
         depth=4,
         type='documentation',
         name='',
         text=' Query condition precessed before processing the aggregates '
              '(where)\n'
              '    ')

Fragment(uuid='ce2ea42f-a707-4fa0-930e-8a9de9ff1d4d',
         path='/lib/dblayer/model/query.py',
         lineno=255,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class PostCondition(Condition):\n'
              '    """ Query condition precessed after processing the '
              'aggregates (having)\n'
              '    """\n'
              '    # The expression is written into the HAVING clause\n'
              '    after_group_by = True\n')

Fragment(uuid='132678d7-7688-44dd-8789-ea3d6b0ac702',
         path='/lib/dblayer/model/query.py',
         lineno=257,
         depth=1,
         type='class',
         name='PostCondition',
         text='class PostCondition(Condition):\n'
              '    """ Query condition precessed after processing the '
              'aggregates (having)\n'
              '    """\n'
              '    # The expression is written into the HAVING clause\n'
              '    after_group_by = True')

Fragment(uuid='7bbcbe6a-5426-40ab-864e-7864f5409cd2',
         path='/lib/dblayer/model/query.py',
         lineno=258,
         depth=4,
         type='documentation',
         name='',
         text=' Query condition precessed after processing the aggregates '
              '(having)\n'
              '    ')

Fragment(uuid='8a9a8900-7b92-4bd2-8672-194f50eaf226',
         path='/lib/dblayer/model/query.py',
         lineno=260,
         depth=2,
         type='documentation',
         name='',
         text='# The expression is written into the HAVING clause')

Fragment(uuid='04c37dca-e692-489e-9622-e36dc27274c2',
         path='/lib/dblayer/model/table.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Base class for database table definitions\n'
              '"""\n'
              '\n'
              'from dblayer import util, constants\n'
              '\n'
              'from dblayer.model import column, constraint, index, trigger\n')

Fragment(uuid='1c4f881b-9de0-4070-98eb-a7c9896290c4',
         path='/lib/dblayer/model/table.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Base class for database table definitions\n')

Fragment(uuid='3d51b49d-c846-4785-a1a8-5abbbcd24031',
         path='/lib/dblayer/model/table.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/table.py\n'
              '  Classes: Table\n'
              '  Methods: __init__ __new__ __repr__ _prepare_table_definition '
              '_sort_key initialize join pretty_format_class\n'
              '  Variables and usages: BaseColumn BaseConstraint BaseIndex '
              'BaseTrigger DEBUG ForeignKey TypeError _column_list '
              '_constraint_list _creatable _database_class _index_list '
              '_initialized _name _primary_key _referer _table_name '
              '_trigger_list _writable append append_line classmethod clone '
              'column constants constraint dblayer definition extend '
              'extra_line_list foreign_key_column full_repr '
              'get_implicit_definition_list_for_table_class '
              'get_next_definition_serial getattr hasattr implicit index '
              'line_list member model name primary_key referenced_table_class '
              'setattr sort sort_key staticmethod strip table table_class '
              'trigger util value\n')

Fragment(uuid='1ecd1d6d-94b5-4b16-ae1e-c073d51e4f2e',
         path='/lib/dblayer/model/table.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='cfcdb2ea-b3ce-48f8-8716-964fbb9accdd',
         path='/lib/dblayer/model/table.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='19509640-3770-4668-aff5-8df68ce38c7a',
         path='/lib/dblayer/model/table.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='bb58159e-bfa0-4916-a98c-ad90160266c6',
         path='/lib/dblayer/model/table.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='a15590eb-2718-4fc2-8f24-7ea5b8365e19',
         path='/lib/dblayer/model/table.py',
         lineno=7,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Table:\n'
              '    """ Base class for database table models\n'
              '    \n'
              '    Subclasses are the table models.\n'
              '    \n'
              '    Instances represent actual database tables bound to a '
              'database model.\n'
              '    \n'
              '    Instances contain cloned column, constraint and index '
              'objects bound\n'
              '    to that instance. It is needed to implement cross table '
              'references\n'
              '    like foreign keys and joins.\n'
              '    \n'
              '    """\n'
              '\n'
              '    # True value indicates that this object has to be created '
              'in the database\n'
              '    _creatable = True\n'
              '\n'
              '   ')

Fragment(uuid='2bcd049e-bb3e-4ba3-b00e-3ff92e8fc79d',
         path='/lib/dblayer/model/table.py',
         lineno=9,
         depth=1,
         type='class',
         name='Table',
         text='class Table:\n'
              '    """ Base class for database table models\n'
              '    \n'
              '    Subclasses are the table models.\n'
              '    \n'
              '    Instances represent actual database tables bound to a '
              'database model.\n'
              '    \n'
              '    Instances contain cloned column, constraint and index '
              'objects bound\n'
              '    to that instance. It is needed to implement cross table '
              'references\n'
              '    like foreign keys and joins.\n'
              '    \n'
              '    """\n'
              '\n'
              '    # True value indicates that this object has to be created '
              'in the database\n'
              '    _creatable = True\n'
              '\n'
              '    #')

Fragment(uuid='ed4c8865-3701-46e5-93f5-e2fc9749e0be',
         path='/lib/dblayer/model/table.py',
         lineno=10,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for database table models\n'
              '    \n'
              '    Subclasses are the table models.\n'
              '    \n'
              '    Instances represent actual database tables bound to a '
              'database model.\n'
              '    \n'
              '    Instances contain cloned column, constraint and index '
              'objects bound\n'
              '    to that instance. It is needed to implement cross table '
              'references\n'
              '    like foreign keys and joins.\n'
              '    \n'
              '    ')

Fragment(uuid='43ecdf88-0711-47fe-87fc-de66ed9a1baf',
         path='/lib/dblayer/model/table.py',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='# True value indicates that this object has to be created in '
              'the database')

Fragment(uuid='c436a187-bf52-42dc-999f-97ccb659fd52',
         path='/lib/dblayer/model/table.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text=' # True value indicates that this object is writable in the '
              'database\n'
              '    _writable = True\n'
              '\n'
              '    # Flag indicating that the model has been initialized\n'
              '    _initialized = False\n'
              '\n'
              '    # Reference to the database class containing this table\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              '    _database_class = None\n'
              '\n'
              '    # Name of the database table (never the alias name)\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              "    _table_name = ''\n"
              '\n'
              '    # Name of the ta')

Fragment(uuid='7533be8f-d33c-4bed-8eb0-b23c6530528d',
         path='/lib/dblayer/model/table.py',
         lineno=25,
         depth=1,
         type='class',
         name='Table',
         text=' True value indicates that this object is writable in the '
              'database\n'
              '    _writable = True\n'
              '\n'
              '    # Flag indicating that the model has been initialized\n'
              '    _initialized = False\n'
              '\n'
              '    # Reference to the database class containing this table\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              '    _database_class = None\n'
              '\n'
              '    # Name of the database table (never the alias name)\n'
              '    # NOTE: Set by __new__ of the database definition class\n'
              "    _table_name = ''\n"
              '\n'
              '    # Name of the tab')

Fragment(uuid='3c162599-5845-4ed2-a570-fac426b20f9f',
         path='/lib/dblayer/model/table.py',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='# True value indicates that this object is writable in the '
              'database')

Fragment(uuid='58349120-a820-4ef5-a992-b4422f1cbd60',
         path='/lib/dblayer/model/table.py',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='# Flag indicating that the model has been initialized')

Fragment(uuid='17bb86e8-8d90-40d7-b1b0-b6923f18ccfe',
         path='/lib/dblayer/model/table.py',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='# Reference to the database class containing this table')

Fragment(uuid='f69644bc-fca9-4a0b-a223-7fb3744120d1',
         path='/lib/dblayer/model/table.py',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the database definition class')

Fragment(uuid='934d7408-e438-4342-94ba-120f62d4006a',
         path='/lib/dblayer/model/table.py',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='# Name of the database table (never the alias name)')

Fragment(uuid='3e5cb428-9a9a-40fc-9b50-a807efc6e0c8',
         path='/lib/dblayer/model/table.py',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the database definition class')

Fragment(uuid='a369ebe9-e049-488a-b624-736350943acd',
         path='/lib/dblayer/model/table.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='ble, it can be either a database table name in the case\n'
              '    # of a physical table or an alias name while referencing '
              'from a view\n'
              '    # NOTE: Set by __new__ of the database and query definition '
              'classes\n'
              "    _name = ''\n"
              '\n'
              '    # List of column definitions in definition order\n'
              '    _column_list = ()\n'
              '\n'
              '    # List of database constraints in definition order\n'
              '    _constraint_list = ()\n'
              '\n'
              '    # List of database indexes in definition order\n'
              '    _index_list = ()\n'
              '\n'
              '    # List of database triggers i')

Fragment(uuid='b6336d7b-4c5e-4124-8962-67d08e744802',
         path='/lib/dblayer/model/table.py',
         lineno=39,
         depth=1,
         type='class',
         name='Table',
         text='le, it can be either a database table name in the case\n'
              '    # of a physical table or an alias name while referencing '
              'from a view\n'
              '    # NOTE: Set by __new__ of the database and query definition '
              'classes\n'
              "    _name = ''\n"
              '\n'
              '    # List of column definitions in definition order\n'
              '    _column_list = ()\n'
              '\n'
              '    # List of database constraints in definition order\n'
              '    _constraint_list = ()\n'
              '\n'
              '    # List of database indexes in definition order\n'
              '    _index_list = ()\n'
              '\n'
              '    # List of database triggers i')

Fragment(uuid='1b8822fa-5655-49e7-94ce-20d49e7c991b',
         path='/lib/dblayer/model/table.py',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='# Name of the table, it can be either a database table name in '
              'the case')

Fragment(uuid='b3d19483-7f5c-41ee-911c-ebf57f544942',
         path='/lib/dblayer/model/table.py',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='# of a physical table or an alias name while referencing from a '
              'view')

Fragment(uuid='79277fd5-9388-45c8-93d3-6fd0c8910512',
         path='/lib/dblayer/model/table.py',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the database and query definition '
              'classes')

Fragment(uuid='c369f0f1-88b3-4ed7-9b59-8619258e8c0c',
         path='/lib/dblayer/model/table.py',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='# List of column definitions in definition order')

Fragment(uuid='00ffafe4-5bfb-4b29-970c-cc9cdbe5e56e',
         path='/lib/dblayer/model/table.py',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='# List of database constraints in definition order')

Fragment(uuid='c55e98b7-efff-417b-a531-582038f353c8',
         path='/lib/dblayer/model/table.py',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='# List of database indexes in definition order')

Fragment(uuid='1add3a31-c5e5-423e-b865-2f53101ae110',
         path='/lib/dblayer/model/table.py',
         lineno=53,
         depth=0,
         type='module',
         name='',
         text='n definition order\n'
              '    _trigger_list = ()\n'
              '\n'
              '    # The definition of the primary key column for this table,\n'
              '    # which is just a reference to the PrimaryKey column '
              'definition instance.\n'
              '    # It can also be None for read-only tables and views '
              'without a primary key.\n'
              '    _primary_key = None\n'
              '\n'
              '    # Foreign key column referencing this table instance inside '
              'a query if any\n'
              '    _referer = None\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n')

Fragment(uuid='c79581f7-aae2-4963-8a7e-f2e0d0b5d5d3',
         path='/lib/dblayer/model/table.py',
         lineno=53,
         depth=1,
         type='class',
         name='Table',
         text='n definition order\n'
              '    _trigger_list = ()\n'
              '\n'
              '    # The definition of the primary key column for this table,\n'
              '    # which is just a reference to the PrimaryKey column '
              'definition instance.\n'
              '    # It can also be None for read-only tables and views '
              'without a primary key.\n'
              '    _primary_key = None\n'
              '\n'
              '    # Foreign key column referencing this table instance inside '
              'a query if any\n'
              '    _referer = None\n'
              '\n'
              '    # Serial number to record the order of column definitions\n'
              '    __definition_serial__ = 0\n')

Fragment(uuid='683b3455-87df-4657-b4b3-e09d58fd97ce',
         path='/lib/dblayer/model/table.py',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='# List of database triggers in definition order')

Fragment(uuid='20365b0a-b1bf-441c-8b83-2289319d2de2',
         path='/lib/dblayer/model/table.py',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='# The definition of the primary key column for this table,')

Fragment(uuid='75f1065a-21d3-4a37-98ac-12b2e38cb256',
         path='/lib/dblayer/model/table.py',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='# which is just a reference to the PrimaryKey column definition '
              'instance.')

Fragment(uuid='a7fa9251-06bc-469d-bc10-030ddc3a6249',
         path='/lib/dblayer/model/table.py',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='# It can also be None for read-only tables and views without a '
              'primary key.')

Fragment(uuid='671e533e-fe2a-488c-8a8e-30b7dd5b756e',
         path='/lib/dblayer/model/table.py',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='# Foreign key column referencing this table instance inside a '
              'query if any')

Fragment(uuid='5182bc76-87d5-40de-9538-235fb9062fa5',
         path='/lib/dblayer/model/table.py',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='# Serial number to record the order of column definitions')

Fragment(uuid='91893bcc-2528-41f6-9b5f-24479e5a948f',
         path='/lib/dblayer/model/table.py',
         lineno=66,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '<Table: %s>' % self._name\n"
              '\n'
              '    __str__ = __repr__\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='5a69168d-d3a4-43dc-8dd7-562a8f17c041',
         path='/lib/dblayer/model/table.py',
         lineno=66,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '    def __repr__(self):\n'
              "        return '<Table: %s>' % self._name\n"
              '\n'
              '    __str__ = __repr__\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='053b9096-b1f7-48cc-9017-f915a54ad360',
         path='/lib/dblayer/model/table.py',
         lineno=67,
         depth=3,
         type='function',
         name='__repr__',
         text="def __repr__(self):\n        return '<Table: %s>' % self._name")

Fragment(uuid='314d1c1d-995f-4ee7-8aac-eb2d3cfc069e',
         path='/lib/dblayer/model/table.py',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text='    def _sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='9207380f-3063-487c-af74-236d954f92cc',
         path='/lib/dblayer/model/table.py',
         lineno=73,
         depth=1,
         type='class',
         name='Table',
         text='    def _sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='a4aae557-9f0a-4407-9682-63a63d9ddaa4',
         path='/lib/dblayer/model/table.py',
         lineno=73,
         depth=4,
         type='function',
         name='_sort_key',
         text='def _sort_key(obj):\n'
              '        """ Sort key to preserve the lexical definition order\n'
              '        """\n'
              '        return obj.__definition_serial__')

Fragment(uuid='9a58aadd-f443-4a76-9364-db735a9b5d2d',
         path='/lib/dblayer/model/table.py',
         lineno=74,
         depth=7,
         type='documentation',
         name='',
         text=' Sort key to preserve the lexical definition order\n        ')

Fragment(uuid='8503fc05-225c-4839-832c-643e2e66f597',
         path='/lib/dblayer/model/table.py',
         lineno=77,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Table, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='507d9598-87ff-45d1-84b4-f953af63fd09',
         path='/lib/dblayer/model/table.py',
         lineno=77,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '    def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Table, cls).__new__(cls)\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='ae8ee148-282e-4dd4-95dc-eb5aa3a8e44c',
         path='/lib/dblayer/model/table.py',
         lineno=78,
         depth=3,
         type='function',
         name='__new__',
         text='def __new__(cls):\n'
              '        # Initialize the class only once\n'
              '        if not cls._initialized:\n'
              '            cls.initialize()\n'
              '\n'
              '        return super(Table, cls).__new__(cls)')

Fragment(uuid='4c458136-cb31-4a27-bd47-90f91db06ee3',
         path='/lib/dblayer/model/table.py',
         lineno=79,
         depth=3,
         type='documentation',
         name='',
         text='# Initialize the class only once')

Fragment(uuid='3f446145-de53-40af-804a-99eed5368fd8',
         path='/lib/dblayer/model/table.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='    def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to constraints and indexes and collect '
              'them\n'
              '        cls._prepare_table_definition()\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='03a84aa6-73f7-4524-afad-9911d17fbb19',
         path='/lib/dblayer/model/table.py',
         lineno=86,
         depth=1,
         type='class',
         name='Table',
         text='    def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to constraints and indexes and collect '
              'them\n'
              '        cls._prepare_table_definition()\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='f98f04d9-f8d5-47e4-a150-c1143fc364c2',
         path='/lib/dblayer/model/table.py',
         lineno=86,
         depth=4,
         type='function',
         name='initialize',
         text='def initialize(cls):\n'
              '\n'
              '        # Mark the class as initialized\n'
              '        cls._initialized = True\n'
              '\n'
              '        # Assign name to constraints and indexes and collect '
              'them\n'
              '        cls._prepare_table_definition()')

Fragment(uuid='f5ecd79e-68f2-404f-bc5e-50c41d0b50b0',
         path='/lib/dblayer/model/table.py',
         lineno=88,
         depth=4,
         type='documentation',
         name='',
         text='# Mark the class as initialized')

Fragment(uuid='069bc70e-b6f2-4430-a9b8-d9449efdbfb5',
         path='/lib/dblayer/model/table.py',
         lineno=91,
         depth=5,
         type='documentation',
         name='',
         text='# Assign name to constraints and indexes and collect them')

Fragment(uuid='b3e6554d-af03-4778-8ebf-5437c59973ea',
         path='/lib/dblayer/model/table.py',
         lineno=95,
         depth=0,
         type='module',
         name='',
         text='    def _prepare_table_definition(cls):\n'
              '        """ Prepares the table definition before the first '
              'instantiation\n'
              '        """\n'
              '        cls._column_list = []\n'
              '        cls._constraint_list = []\n'
              '        cls._index_list = []\n'
              '        cls._trigger_list = []\n')

Fragment(uuid='410c147d-5e43-4182-a59d-2f87ad13a243',
         path='/lib/dblayer/model/table.py',
         lineno=95,
         depth=1,
         type='class',
         name='Table',
         text='    def _prepare_table_definition(cls):\n'
              '        """ Prepares the table definition before the first '
              'instantiation\n'
              '        """\n'
              '        cls._column_list = []\n'
              '        cls._constraint_list = []\n'
              '        cls._index_list = []\n'
              '        cls._trigger_list = []\n')

Fragment(uuid='34cca9bb-31de-47fd-be2b-1dc5224ca14b',
         path='/lib/dblayer/model/table.py',
         lineno=95,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='def _prepare_table_definition(cls):\n'
              '        """ Prepares the table definition before the first '
              'instantiation\n'
              '        """\n'
              '        cls._column_list = []\n'
              '        cls._constraint_list = []\n'
              '        cls._index_list = []\n'
              '        cls._trigger_list = []\n')

Fragment(uuid='065b3d0d-70b8-4163-a104-0115615ad943',
         path='/lib/dblayer/model/table.py',
         lineno=96,
         depth=7,
         type='documentation',
         name='',
         text=' Prepares the table definition before the first instantiation\n'
              '        ')

Fragment(uuid='49ddedf5-bfcc-4b1c-872e-aeb12b547967',
         path='/lib/dblayer/model/table.py',
         lineno=102,
         depth=0,
         type='module',
         name='',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='f4733156-2a91-499f-b293-cefefbcbfe77',
         path='/lib/dblayer/model/table.py',
         lineno=102,
         depth=1,
         type='class',
         name='Table',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='0d1b600d-348c-43fd-8d79-1bdd8b37f014',
         path='/lib/dblayer/model/table.py',
         lineno=102,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='        for name in dir(cls):\n'
              '            value = getattr(cls, name)\n')

Fragment(uuid='ee6a4627-4fef-4b29-9168-b381b7ef9c2f',
         path='/lib/dblayer/model/table.py',
         lineno=104,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if isinstance(value, column.BaseColumn):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._column_list.append(value)\n')

Fragment(uuid='f5325df1-bcb3-4df5-abb4-6a0d759fe280',
         path='/lib/dblayer/model/table.py',
         lineno=104,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '            if isinstance(value, column.BaseColumn):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._column_list.append(value)\n')

Fragment(uuid='6d35fab3-9b12-410b-9c73-31cc9ea80527',
         path='/lib/dblayer/model/table.py',
         lineno=104,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='\n'
              '            if isinstance(value, column.BaseColumn):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._column_list.append(value)\n')

Fragment(uuid='a4766773-3a50-4d91-b85e-e49aa1869add',
         path='/lib/dblayer/model/table.py',
         lineno=109,
         depth=0,
         type='module',
         name='',
         text='                if value.primary_key:\n'
              "                    assert cls._primary_key is None, 'More than "
              "one primary key columns are defined for table: %s' % "
              'cls.__name__\n'
              '                    cls._primary_key = value\n')

Fragment(uuid='015ffe81-36ff-4e3d-8b84-81336c74ec2c',
         path='/lib/dblayer/model/table.py',
         lineno=109,
         depth=1,
         type='class',
         name='Table',
         text='                if value.primary_key:\n'
              "                    assert cls._primary_key is None, 'More than "
              "one primary key columns are defined for table: %s' % "
              'cls.__name__\n'
              '                    cls._primary_key = value\n')

Fragment(uuid='0e24fa2e-de28-413a-b42c-6b5408d4825e',
         path='/lib/dblayer/model/table.py',
         lineno=109,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='                if value.primary_key:\n'
              "                    assert cls._primary_key is None, 'More than "
              "one primary key columns are defined for table: %s' % "
              'cls.__name__\n'
              '                    cls._primary_key = value\n')

Fragment(uuid='4090452e-0a67-4a1b-b513-0472be468994',
         path='/lib/dblayer/model/table.py',
         lineno=110,
         depth=14,
         type='documentation',
         name='',
         text='More than one primary key columns are defined for table: %s')

Fragment(uuid='bb361cdd-114b-4337-849b-7954b430228c',
         path='/lib/dblayer/model/table.py',
         lineno=112,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            elif isinstance(value, constraint.BaseConstraint):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._constraint_list.append(value)\n')

Fragment(uuid='ec32ba96-6b3c-49eb-b24c-caea4aa74834',
         path='/lib/dblayer/model/table.py',
         lineno=112,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '            elif isinstance(value, constraint.BaseConstraint):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._constraint_list.append(value)\n')

Fragment(uuid='e5510982-b131-4bbd-a59b-406d32b6b36b',
         path='/lib/dblayer/model/table.py',
         lineno=112,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='\n'
              '            elif isinstance(value, constraint.BaseConstraint):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._constraint_list.append(value)\n')

Fragment(uuid='398906ff-080d-440f-948e-4ef0ef7a1535',
         path='/lib/dblayer/model/table.py',
         lineno=117,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            elif isinstance(value, index.BaseIndex):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._index_list.append(value)\n')

Fragment(uuid='22622cd2-db1c-41dd-8762-97c11c7fbf27',
         path='/lib/dblayer/model/table.py',
         lineno=117,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '            elif isinstance(value, index.BaseIndex):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._index_list.append(value)\n')

Fragment(uuid='c4dc0338-de0b-402f-a3ab-588b6c647da2',
         path='/lib/dblayer/model/table.py',
         lineno=117,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='\n'
              '            elif isinstance(value, index.BaseIndex):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._index_list.append(value)\n')

Fragment(uuid='6964495f-8941-4923-9591-c00d7a8fb594',
         path='/lib/dblayer/model/table.py',
         lineno=122,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            elif isinstance(value, trigger.BaseTrigger):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._trigger_list.append(value)\n'
              '\n'
              '        # Sort the definition objects to keep their source code '
              'order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        '
              'cls._constraint_list.sort(key=constraint.BaseConstraint.sort_key)\n'
              '        cls._index_list.sort(key=index.BaseIndex.sort_key)\n'
              '        '
              'cls._trigger_list.sort(key=trigger.BaseTrigger.sort_key)\n'
              '\n'
              '        # If we have a primary key column, then it must be the '
              'first one\n')

Fragment(uuid='d262a6a4-9d7c-4c2c-a209-987e80009819',
         path='/lib/dblayer/model/table.py',
         lineno=122,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '            elif isinstance(value, trigger.BaseTrigger):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._trigger_list.append(value)\n'
              '\n'
              '        # Sort the definition objects to keep their source code '
              'order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        '
              'cls._constraint_list.sort(key=constraint.BaseConstraint.sort_key)\n'
              '        cls._index_list.sort(key=index.BaseIndex.sort_key)\n'
              '        '
              'cls._trigger_list.sort(key=trigger.BaseTrigger.sort_key)\n'
              '\n'
              '        # If we have a primary key column, then it must be the '
              'first one\n')

Fragment(uuid='a6517a8b-e658-4ce8-8ae3-0eea39e43fe1',
         path='/lib/dblayer/model/table.py',
         lineno=122,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='\n'
              '            elif isinstance(value, trigger.BaseTrigger):\n'
              '                value.name = name\n'
              '                value.table_class = cls\n'
              '                cls._trigger_list.append(value)\n'
              '\n'
              '        # Sort the definition objects to keep their source code '
              'order\n'
              '        cls._column_list.sort(key=column.BaseColumn.sort_key)\n'
              '        '
              'cls._constraint_list.sort(key=constraint.BaseConstraint.sort_key)\n'
              '        cls._index_list.sort(key=index.BaseIndex.sort_key)\n'
              '        '
              'cls._trigger_list.sort(key=trigger.BaseTrigger.sort_key)\n'
              '\n'
              '        # If we have a primary key column, then it must be the '
              'first one\n')

Fragment(uuid='1141abbc-5b70-4aac-bdd7-c13227ffed30',
         path='/lib/dblayer/model/table.py',
         lineno=128,
         depth=5,
         type='documentation',
         name='',
         text='# Sort the definition objects to keep their source code order')

Fragment(uuid='6e8663cb-41c5-44d7-a5d2-11444aceb90d',
         path='/lib/dblayer/model/table.py',
         lineno=134,
         depth=5,
         type='documentation',
         name='',
         text='# If we have a primary key column, then it must be the first one')

Fragment(uuid='4ba33816-2145-4a94-9b0b-c0826453d166',
         path='/lib/dblayer/model/table.py',
         lineno=135,
         depth=0,
         type='module',
         name='',
         text='        if cls._primary_key:\n'
              '            assert cls._column_list[0] is cls._primary_key, (\n'
              "                    'The primary key column must be the first "
              "one defined for table: %s' % cls.__name__)\n"
              '\n'
              '        # Add implicit definitions required by some of the '
              'existing definitions\n')

Fragment(uuid='73d1bf3b-1857-40b4-aa8a-98586b0d1e31',
         path='/lib/dblayer/model/table.py',
         lineno=135,
         depth=1,
         type='class',
         name='Table',
         text='        if cls._primary_key:\n'
              '            assert cls._column_list[0] is cls._primary_key, (\n'
              "                    'The primary key column must be the first "
              "one defined for table: %s' % cls.__name__)\n"
              '\n'
              '        # Add implicit definitions required by some of the '
              'existing definitions\n')

Fragment(uuid='bc506894-7777-45d6-b95d-c045bbf26b75',
         path='/lib/dblayer/model/table.py',
         lineno=135,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='        if cls._primary_key:\n'
              '            assert cls._column_list[0] is cls._primary_key, (\n'
              "                    'The primary key column must be the first "
              "one defined for table: %s' % cls.__name__)\n"
              '\n'
              '        # Add implicit definitions required by some of the '
              'existing definitions\n')

Fragment(uuid='068d407d-e04c-4186-963a-ac5fb857e010',
         path='/lib/dblayer/model/table.py',
         lineno=137,
         depth=11,
         type='documentation',
         name='',
         text='The primary key column must be the first one defined for table: '
              '%s')

Fragment(uuid='2a8406fa-c3e5-4eba-a4d9-474b48faa1a0',
         path='/lib/dblayer/model/table.py',
         lineno=139,
         depth=5,
         type='documentation',
         name='',
         text='# Add implicit definitions required by some of the existing '
              'definitions')

Fragment(uuid='a896d0be-2ec1-4bc8-819f-d41f1fb7c9a1',
         path='/lib/dblayer/model/table.py',
         lineno=140,
         depth=0,
         type='module',
         name='',
         text='        for member in cls._column_list + cls._index_list:\n')

Fragment(uuid='9b430ccb-cf3f-433b-8a21-605fbb1c0f3c',
         path='/lib/dblayer/model/table.py',
         lineno=140,
         depth=1,
         type='class',
         name='Table',
         text='        for member in cls._column_list + cls._index_list:\n')

Fragment(uuid='bf42463d-c716-4e60-bd08-0caaf0ee2f3e',
         path='/lib/dblayer/model/table.py',
         lineno=140,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='        for member in cls._column_list + cls._index_list:\n')

Fragment(uuid='f7451462-cbf5-4955-9aad-e7bb566d4da4',
         path='/lib/dblayer/model/table.py',
         lineno=141,
         depth=0,
         type='module',
         name='',
         text='            for name, definition in '
              'member.get_implicit_definition_list_for_table_class(cls):\n'
              '                assert not hasattr(cls, name), (\n'
              "                        'Attribute name %s.%s collides with "
              "implicit %s definition required by %s.%s!' %\n"
              '                        (cls.__name__, name, '
              'definition.__class__.__name__, cls.__name__, member.name))\n')

Fragment(uuid='068042ce-d400-42f6-9712-a7d23d9042fc',
         path='/lib/dblayer/model/table.py',
         lineno=141,
         depth=1,
         type='class',
         name='Table',
         text='            for name, definition in '
              'member.get_implicit_definition_list_for_table_class(cls):\n'
              '                assert not hasattr(cls, name), (\n'
              "                        'Attribute name %s.%s collides with "
              "implicit %s definition required by %s.%s!' %\n"
              '                        (cls.__name__, name, '
              'definition.__class__.__name__, cls.__name__, member.name))\n')

Fragment(uuid='069ff5df-d300-4d1b-824d-141623c8c9be',
         path='/lib/dblayer/model/table.py',
         lineno=141,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='            for name, definition in '
              'member.get_implicit_definition_list_for_table_class(cls):\n'
              '                assert not hasattr(cls, name), (\n'
              "                        'Attribute name %s.%s collides with "
              "implicit %s definition required by %s.%s!' %\n"
              '                        (cls.__name__, name, '
              'definition.__class__.__name__, cls.__name__, member.name))\n')

Fragment(uuid='7816c17d-01ab-47c0-95d5-0170830e5183',
         path='/lib/dblayer/model/table.py',
         lineno=143,
         depth=13,
         type='documentation',
         name='',
         text='Attribute name %s.%s collides with implicit %s definition '
              'required by %s.%s!')

Fragment(uuid='948bde51-790a-4e23-afbb-9420bf0b55c2',
         path='/lib/dblayer/model/table.py',
         lineno=145,
         depth=0,
         type='module',
         name='',
         text='                if isinstance(definition, '
              'constraint.BaseConstraint):\n'
              '                    cls._constraint_list.append(definition)\n'
              '                elif isinstance(definition, index.BaseIndex):\n'
              '                    cls._index_list.append(definition)\n'
              '                elif isinstance(definition, '
              'trigger.BaseTrigger):\n'
              '                    cls._trigger_list.append(definition)\n'
              '                else:\n'
              '                    raise TypeError(\n'
              "                        'Unsupported implicit definition "
              "required by %s.%s: %r' %\n"
              '                        (cls.__name__, member.name, '
              'definition))\n'
              '                definition.table_class = cls\n'
              '                definition.name = name\n'
              '                definition.implicit = True\n'
              '                setattr(cls, name, definition)\n')

Fragment(uuid='6345714c-289c-4925-895b-37c25d58e7a6',
         path='/lib/dblayer/model/table.py',
         lineno=145,
         depth=1,
         type='class',
         name='Table',
         text='                if isinstance(definition, '
              'constraint.BaseConstraint):\n'
              '                    cls._constraint_list.append(definition)\n'
              '                elif isinstance(definition, index.BaseIndex):\n'
              '                    cls._index_list.append(definition)\n'
              '                elif isinstance(definition, '
              'trigger.BaseTrigger):\n'
              '                    cls._trigger_list.append(definition)\n'
              '                else:\n'
              '                    raise TypeError(\n'
              "                        'Unsupported implicit definition "
              "required by %s.%s: %r' %\n"
              '                        (cls.__name__, member.name, '
              'definition))\n'
              '                definition.table_class = cls\n'
              '                definition.name = name\n'
              '                definition.implicit = True\n'
              '                setattr(cls, name, definition)\n')

Fragment(uuid='4be75517-e2a9-42d7-8ecf-90bda917917c',
         path='/lib/dblayer/model/table.py',
         lineno=145,
         depth=4,
         type='function',
         name='_prepare_table_definition',
         text='                if isinstance(definition, '
              'constraint.BaseConstraint):\n'
              '                    cls._constraint_list.append(definition)\n'
              '                elif isinstance(definition, index.BaseIndex):\n'
              '                    cls._index_list.append(definition)\n'
              '                elif isinstance(definition, '
              'trigger.BaseTrigger):\n'
              '                    cls._trigger_list.append(definition)\n'
              '                else:\n'
              '                    raise TypeError(\n'
              "                        'Unsupported implicit definition "
              "required by %s.%s: %r' %\n"
              '                        (cls.__name__, member.name, '
              'definition))\n'
              '                definition.table_class = cls\n'
              '                definition.name = name\n'
              '                definition.implicit = True\n'
              '                setattr(cls, name, definition)')

Fragment(uuid='43586cc0-2eb3-40fd-b16e-2d56ac9f9aaa',
         path='/lib/dblayer/model/table.py',
         lineno=153,
         depth=17,
         type='documentation',
         name='',
         text='Unsupported implicit definition required by %s.%s: %r')

Fragment(uuid='e432d9a8-0de8-4a40-9519-d184f4b884ed',
         path='/lib/dblayer/model/table.py',
         lineno=159,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self):\n'
              '        # Do not allow initialization of the abstract base '
              'class\n'
              '        assert self.__class__ is not Table, (\n'
              "            'Only subclasses of Table can be instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Clone columns, constraints and indexes\n'
              '        self._column_list')

Fragment(uuid='ab960f8c-08d8-4653-a1b1-27ca1ff41160',
         path='/lib/dblayer/model/table.py',
         lineno=159,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '    def __init__(self):\n'
              '        # Do not allow initialization of the abstract base '
              'class\n'
              '        assert self.__class__ is not Table, (\n'
              "            'Only subclasses of Table can be instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Clone columns, constraints and indexes\n'
              '        self._column_list')

Fragment(uuid='5d1beecc-a3dc-4b09-8b78-e91b1ea60f28',
         path='/lib/dblayer/model/table.py',
         lineno=160,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self):\n'
              '        # Do not allow initialization of the abstract base '
              'class\n'
              '        assert self.__class__ is not Table, (\n'
              "            'Only subclasses of Table can be instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        # Clone columns, constraints and indexes\n'
              '        self._column_list =')

Fragment(uuid='6b8c22d8-05b2-46c0-b634-475c4523e589',
         path='/lib/dblayer/model/table.py',
         lineno=161,
         depth=3,
         type='documentation',
         name='',
         text='# Do not allow initialization of the abstract base class')

Fragment(uuid='64ba472a-3e68-4243-8055-d33499447898',
         path='/lib/dblayer/model/table.py',
         lineno=163,
         depth=7,
         type='documentation',
         name='',
         text='Only subclasses of Table can be instantiated!')

Fragment(uuid='e3d76c2b-4236-41ef-929a-6f44193a24d8',
         path='/lib/dblayer/model/table.py',
         lineno=165,
         depth=4,
         type='documentation',
         name='',
         text='# Record the definition order')

Fragment(uuid='4adc5645-6961-446c-84a6-c9a4bc493131',
         path='/lib/dblayer/model/table.py',
         lineno=168,
         depth=4,
         type='documentation',
         name='',
         text='# Clone columns, constraints and indexes')

Fragment(uuid='ed7fdbfc-713c-4b55-8ed9-84abcb16b275',
         path='/lib/dblayer/model/table.py',
         lineno=169,
         depth=0,
         type='module',
         name='',
         text=' = [column.clone(self) for column in self._column_list]\n'
              '        self._constraint_list = [constraint.clone(self) for '
              'constraint in self._constraint_list]\n'
              '        self._index_list = [index.clone(self) for index in '
              'self._index_list]\n'
              '        self._trigger_list = [trigger.clone(self) for trigger '
              'in self._trigger_list]\n'
              '\n'
              '        # Override the model definitions with the bound '
              'instances\n')

Fragment(uuid='5789ab67-02aa-4078-9c4f-8839e343c775',
         path='/lib/dblayer/model/table.py',
         lineno=169,
         depth=1,
         type='class',
         name='Table',
         text=' = [column.clone(self) for column in self._column_list]\n'
              '        self._constraint_list = [constraint.clone(self) for '
              'constraint in self._constraint_list]\n'
              '        self._index_list = [index.clone(self) for index in '
              'self._index_list]\n'
              '        self._trigger_list = [trigger.clone(self) for trigger '
              'in self._trigger_list]\n'
              '\n'
              '        # Override the model definitions with the bound '
              'instances\n')

Fragment(uuid='cadf335b-aaf8-41be-b5b6-52ff4edecd9b',
         path='/lib/dblayer/model/table.py',
         lineno=169,
         depth=3,
         type='function',
         name='__init__',
         text=' [column.clone(self) for column in self._column_list]\n'
              '        self._constraint_list = [constraint.clone(self) for '
              'constraint in self._constraint_list]\n'
              '        self._index_list = [index.clone(self) for index in '
              'self._index_list]\n'
              '        self._trigger_list = [trigger.clone(self) for trigger '
              'in self._trigger_list]\n'
              '\n'
              '        # Override the model definitions with the bound '
              'instances\n')

Fragment(uuid='e73915b4-5e68-4678-a92a-4bc641b3857b',
         path='/lib/dblayer/model/table.py',
         lineno=174,
         depth=4,
         type='documentation',
         name='',
         text='# Override the model definitions with the bound instances')

Fragment(uuid='491a63dc-5b45-4464-b1af-52b2d562e9a3',
         path='/lib/dblayer/model/table.py',
         lineno=175,
         depth=0,
         type='module',
         name='',
         text='        for column in self._column_list:\n'
              '            setattr(self, column.name, column)\n')

Fragment(uuid='13948fe1-799c-45fe-8fb8-2c211e91bf71',
         path='/lib/dblayer/model/table.py',
         lineno=175,
         depth=1,
         type='class',
         name='Table',
         text='        for column in self._column_list:\n'
              '            setattr(self, column.name, column)\n')

Fragment(uuid='d22dedb5-49d4-4e42-ab7f-8b9edb072f23',
         path='/lib/dblayer/model/table.py',
         lineno=175,
         depth=3,
         type='function',
         name='__init__',
         text='        for column in self._column_list:\n'
              '            setattr(self, column.name, column)\n')

Fragment(uuid='511f68b0-868c-4f07-8969-f61fda444531',
         path='/lib/dblayer/model/table.py',
         lineno=177,
         depth=0,
         type='module',
         name='',
         text='        for constraint in self._constraint_list:\n'
              '            setattr(self, constraint.name, constraint)\n')

Fragment(uuid='f47d6a57-c29b-4225-8dae-d75e3449635a',
         path='/lib/dblayer/model/table.py',
         lineno=177,
         depth=1,
         type='class',
         name='Table',
         text='        for constraint in self._constraint_list:\n'
              '            setattr(self, constraint.name, constraint)\n')

Fragment(uuid='f5cae95f-95a9-4a07-adf1-9509aefe41b4',
         path='/lib/dblayer/model/table.py',
         lineno=177,
         depth=3,
         type='function',
         name='__init__',
         text='        for constraint in self._constraint_list:\n'
              '            setattr(self, constraint.name, constraint)\n')

Fragment(uuid='7fe80406-ff5c-492d-a9aa-0ef84bfa1c17',
         path='/lib/dblayer/model/table.py',
         lineno=179,
         depth=0,
         type='module',
         name='',
         text='        for index in self._index_list:\n'
              '            setattr(self, index.name, index)\n')

Fragment(uuid='58156d7f-889e-4ce6-b4a5-4b163be3e4c8',
         path='/lib/dblayer/model/table.py',
         lineno=179,
         depth=1,
         type='class',
         name='Table',
         text='        for index in self._index_list:\n'
              '            setattr(self, index.name, index)\n')

Fragment(uuid='55455119-ca00-48b8-945a-c1fff250dd15',
         path='/lib/dblayer/model/table.py',
         lineno=179,
         depth=3,
         type='function',
         name='__init__',
         text='        for index in self._index_list:\n'
              '            setattr(self, index.name, index)\n')

Fragment(uuid='a374b96c-0d3f-4aba-b0c2-028bffb66c32',
         path='/lib/dblayer/model/table.py',
         lineno=181,
         depth=0,
         type='module',
         name='',
         text='        for trigger in self._trigger_list:\n'
              '            setattr(self, trigger.name, trigger)\n'
              '\n'
              '        # Reassign the primary key\n'
              '        if self._primary_key:\n'
              '            self._primary_key = getattr(self, '
              'self._primary_key.name)\n')

Fragment(uuid='327a146d-185c-47d5-b7ae-a32588b99197',
         path='/lib/dblayer/model/table.py',
         lineno=181,
         depth=1,
         type='class',
         name='Table',
         text='        for trigger in self._trigger_list:\n'
              '            setattr(self, trigger.name, trigger)\n'
              '\n'
              '        # Reassign the primary key\n'
              '        if self._primary_key:\n'
              '            self._primary_key = getattr(self, '
              'self._primary_key.name)\n')

Fragment(uuid='22f84733-d971-436a-b141-a553f390c52c',
         path='/lib/dblayer/model/table.py',
         lineno=181,
         depth=3,
         type='function',
         name='__init__',
         text='        for trigger in self._trigger_list:\n'
              '            setattr(self, trigger.name, trigger)\n'
              '\n'
              '        # Reassign the primary key\n'
              '        if self._primary_key:\n'
              '            self._primary_key = getattr(self, '
              'self._primary_key.name)')

Fragment(uuid='f1d57481-7dd6-430d-b349-8009a7fbaefb',
         path='/lib/dblayer/model/table.py',
         lineno=184,
         depth=4,
         type='documentation',
         name='',
         text='# Reassign the primary key')

Fragment(uuid='a5178b1d-c9f7-4de7-92b2-60a1380b77cc',
         path='/lib/dblayer/model/table.py',
         lineno=187,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def join(self, foreign_key_column):\n'
              '        """ Joins this table inside a query with the given '
              'foreign key\n'
              '        \n'
              '        It is an INNER JOIN for non-nullable foreign keys and a '
              'LEFT JOIN\n')

Fragment(uuid='1aca0b76-f97c-4f88-85ac-911be1ea823f',
         path='/lib/dblayer/model/table.py',
         lineno=187,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '    def join(self, foreign_key_column):\n'
              '        """ Joins this table inside a query with the given '
              'foreign key\n'
              '        \n'
              '        It is an INNER JOIN for non-nullable foreign keys and a '
              'LEFT JOIN\n')

Fragment(uuid='2afede73-5156-4809-8b87-a1cea82eb338',
         path='/lib/dblayer/model/table.py',
         lineno=188,
         depth=3,
         type='function',
         name='join',
         text='def join(self, foreign_key_column):\n'
              '        """ Joins this table inside a query with the given '
              'foreign key\n'
              '        \n'
              '        It is an INNER JOIN for non-nullable foreign keys and a '
              'LEFT JOIN\n')

Fragment(uuid='adc5e8b0-6c51-43d5-ba1d-12bba1b5be51',
         path='/lib/dblayer/model/table.py',
         lineno=189,
         depth=6,
         type='documentation',
         name='',
         text=' Joins this table inside a query with the given foreign key\n'
              '        \n'
              '        It is an INNER JOIN for non-nullable foreign keys and a '
              'LEFT JOIN\n'
              '        for nullable ones. It just records the joined table as '
              'a source to\n'
              '        build views, does not generate actual SQL.\n'
              '        \n'
              '        Each table can be joined with a single foreign key.\n'
              '        Unjoined tables are cross-joined.\n'
              '        \n'
              '        ')

Fragment(uuid='055fb24f-4495-421b-8862-12dd8225368d',
         path='/lib/dblayer/model/table.py',
         lineno=192,
         depth=0,
         type='module',
         name='',
         text='        for nullable ones. It just records the joined table as '
              'a source to\n'
              '        build views, does not generate actual SQL.\n'
              '        \n'
              '        Each table can be joined with a single foreign key.\n'
              '        Unjoined tables are cross-joined.\n'
              '        \n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(foreign_key_column, '
              'column.ForeignKey)\n'
              '            assert foreign_key_column.table, (\n'
              "                'Only foreign keys bound to a table instance "
              "can be used to join tables.')\n"
              '            assert self._referer is None, (\n'
              "                    'Table or view %s has already been joined "
              "with foreign key column: %s' %\n"
              '                    (self.__class__.__name__, '
              'foreign_key_column._name))\n'
              '\n'
              '        self._referer = foreign_key_column\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='21961baf-730f-46e0-93ed-b9ff8fdfaa79',
         path='/lib/dblayer/model/table.py',
         lineno=192,
         depth=1,
         type='class',
         name='Table',
         text='        for nullable ones. It just records the joined table as '
              'a source to\n'
              '        build views, does not generate actual SQL.\n'
              '        \n'
              '        Each table can be joined with a single foreign key.\n'
              '        Unjoined tables are cross-joined.\n'
              '        \n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(foreign_key_column, '
              'column.ForeignKey)\n'
              '            assert foreign_key_column.table, (\n'
              "                'Only foreign keys bound to a table instance "
              "can be used to join tables.')\n"
              '            assert self._referer is None, (\n'
              "                    'Table or view %s has already been joined "
              "with foreign key column: %s' %\n"
              '                    (self.__class__.__name__, '
              'foreign_key_column._name))\n'
              '\n'
              '        self._referer = foreign_key_column\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='021f4b5e-41d6-4935-bbb7-c7769f58e2d1',
         path='/lib/dblayer/model/table.py',
         lineno=192,
         depth=3,
         type='function',
         name='join',
         text='        for nullable ones. It just records the joined table as '
              'a source to\n'
              '        build views, does not generate actual SQL.\n'
              '        \n'
              '        Each table can be joined with a single foreign key.\n'
              '        Unjoined tables are cross-joined.\n'
              '        \n'
              '        """\n'
              '        if constants.DEBUG:\n'
              '            assert isinstance(foreign_key_column, '
              'column.ForeignKey)\n'
              '            assert foreign_key_column.table, (\n'
              "                'Only foreign keys bound to a table instance "
              "can be used to join tables.')\n"
              '            assert self._referer is None, (\n'
              "                    'Table or view %s has already been joined "
              "with foreign key column: %s' %\n"
              '                    (self.__class__.__name__, '
              'foreign_key_column._name))\n'
              '\n'
              '        self._referer = foreign_key_column')

Fragment(uuid='48e33a06-4aca-4c05-9d87-6cecfa993594',
         path='/lib/dblayer/model/table.py',
         lineno=202,
         depth=9,
         type='documentation',
         name='',
         text='Only foreign keys bound to a table instance can be used to join '
              'tables.')

Fragment(uuid='0b85591c-bce0-4102-ab27-8d2771c954d0',
         path='/lib/dblayer/model/table.py',
         lineno=204,
         depth=10,
         type='documentation',
         name='',
         text='Table or view %s has already been joined with foreign key '
              'column: %s')

Fragment(uuid='7ac334c5-1150-47e1-ab2c-07d3501b7a3d',
         path='/lib/dblayer/model/table.py',
         lineno=210,
         depth=0,
         type='module',
         name='',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the table\n'
              '        """\n'
              "        line_list = ['class %s(table.Table):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n"
              '\n'
              '        extra_line_list = []\n')

Fragment(uuid='7a7d99bb-1615-401d-bf22-7aa0df7dd29f',
         path='/lib/dblayer/model/table.py',
         lineno=210,
         depth=1,
         type='class',
         name='Table',
         text='    def pretty_format_class(cls):\n'
              '        """ Formats source code defining the table\n'
              '        """\n'
              "        line_list = ['class %s(table.Table):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n"
              '\n'
              '        extra_line_list = []\n')

Fragment(uuid='d953714c-b7f2-4078-b98d-63733a9c26d7',
         path='/lib/dblayer/model/table.py',
         lineno=210,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='def pretty_format_class(cls):\n'
              '        """ Formats source code defining the table\n'
              '        """\n'
              "        line_list = ['class %s(table.Table):' % cls.__name__]\n"
              '        append_line = line_list.append\n'
              '\n'
              '        if cls.__doc__:\n'
              "            if '\\n' in cls.__doc__:\n"
              '                append_line(\'    """%s"""\' % cls.__doc__)\n'
              '            else:\n'
              '                append_line(\'    """ %s """\' % '
              'cls.__doc__.strip())\n'
              '        else:\n'
              "            append_line('')\n"
              '\n'
              '        extra_line_list = []\n')

Fragment(uuid='53f181d7-e56e-45cf-8368-b2d1882d4088',
         path='/lib/dblayer/model/table.py',
         lineno=211,
         depth=7,
         type='documentation',
         name='',
         text=' Formats source code defining the table\n        ')

Fragment(uuid='9d8e5b82-fbb1-4714-8b95-4cd60485021a',
         path='/lib/dblayer/model/table.py',
         lineno=213,
         depth=10,
         type='documentation',
         name='',
         text='class %s(table.Table):')

Fragment(uuid='8e1969d6-8993-47f2-b223-e031fdbb2e6d',
         path='/lib/dblayer/model/table.py',
         lineno=225,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._column_list:\n'
              '            if isinstance(obj, column.ForeignKey) and '
              'obj.referenced_table_class is cls:\n'
              '                obj.referenced_table_class = None\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '                obj.referenced_table_class = cls\n'
              '                '
              "extra_line_list.append('%s.%s.referenced_table_class = %s' % (\n"
              '                    cls.__name__, obj.name, cls.__name__))\n'
              '            else:\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n')

Fragment(uuid='f72985e1-8d02-4a88-afe4-42a217a55851',
         path='/lib/dblayer/model/table.py',
         lineno=225,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '        for obj in cls._column_list:\n'
              '            if isinstance(obj, column.ForeignKey) and '
              'obj.referenced_table_class is cls:\n'
              '                obj.referenced_table_class = None\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '                obj.referenced_table_class = cls\n'
              '                '
              "extra_line_list.append('%s.%s.referenced_table_class = %s' % (\n"
              '                    cls.__name__, obj.name, cls.__name__))\n'
              '            else:\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n')

Fragment(uuid='0de7f607-c67b-45e2-a51b-b9f700392507',
         path='/lib/dblayer/model/table.py',
         lineno=225,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._column_list:\n'
              '            if isinstance(obj, column.ForeignKey) and '
              'obj.referenced_table_class is cls:\n'
              '                obj.referenced_table_class = None\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n'
              '                obj.referenced_table_class = cls\n'
              '                '
              "extra_line_list.append('%s.%s.referenced_table_class = %s' % (\n"
              '                    cls.__name__, obj.name, cls.__name__))\n'
              '            else:\n'
              "                append_line('    %s = %s' % (obj.name, "
              'obj.full_repr()))\n')

Fragment(uuid='b7fa5a00-c2d9-4826-97ba-3fd65f941e0e',
         path='/lib/dblayer/model/table.py',
         lineno=231,
         depth=14,
         type='documentation',
         name='',
         text='%s.%s.referenced_table_class = %s')

Fragment(uuid='90486f7d-5419-4efe-a85d-8eb55ea31234',
         path='/lib/dblayer/model/table.py',
         lineno=235,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._constraint_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='69577472-2b71-42ac-803b-dd6776de2af0',
         path='/lib/dblayer/model/table.py',
         lineno=235,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '        for obj in cls._constraint_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='cec2114c-00c9-42e2-83da-d6abf053c19c',
         path='/lib/dblayer/model/table.py',
         lineno=235,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._constraint_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='c48793e3-2311-4787-90b6-6d17e6fcc765',
         path='/lib/dblayer/model/table.py',
         lineno=239,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._index_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='0ca65cb3-0af8-4e3d-afdf-06b196e98516',
         path='/lib/dblayer/model/table.py',
         lineno=239,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '        for obj in cls._index_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='10d4ae65-d54e-41c0-82ab-0d62523d2390',
         path='/lib/dblayer/model/table.py',
         lineno=239,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._index_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n")

Fragment(uuid='736372fe-6aa6-4a6f-a466-37e9fc9e015c',
         path='/lib/dblayer/model/table.py',
         lineno=243,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        for obj in cls._trigger_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              '        if extra_line_list:\n'
              "            append_line('')\n"
              '            line_list.extend(extra_line_list)\n'
              '\n'
              "        return '\\n'.join(line_list)\n")

Fragment(uuid='5d06072f-23fa-43a4-9e8c-cb9ea22ed689',
         path='/lib/dblayer/model/table.py',
         lineno=243,
         depth=1,
         type='class',
         name='Table',
         text='\n'
              '        for obj in cls._trigger_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              '        if extra_line_list:\n'
              "            append_line('')\n"
              '            line_list.extend(extra_line_list)\n'
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='16156c85-5467-45c4-8262-6190c80792ec',
         path='/lib/dblayer/model/table.py',
         lineno=243,
         depth=4,
         type='function',
         name='pretty_format_class',
         text='\n'
              '        for obj in cls._trigger_list:\n'
              '            if not obj.implicit:\n'
              "                append_line('    %s = %r' % (obj.name, obj))\n"
              '\n'
              '        if extra_line_list:\n'
              "            append_line('')\n"
              '            line_list.extend(extra_line_list)\n'
              '\n'
              "        return '\\n'.join(line_list)")

Fragment(uuid='1fc19990-6e18-404d-8712-1187d94925a3',
         path='/lib/dblayer/model/trigger.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Trigger definitions\n"""\n\nfrom dblayer import util\n')

Fragment(uuid='c7a5ff8a-4395-434a-bd2e-d57ab6da06a1',
         path='/lib/dblayer/model/trigger.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Trigger definitions\n')

Fragment(uuid='21a6f712-7f10-4af6-825b-a476e2b88f1c',
         path='/lib/dblayer/model/trigger.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/model/trigger.py\n'
              '  Classes: AfterDeleteRow AfterDeleteStatement '
              'AfterInsertOrUpdateRow AfterInsertOrUpdateStatement '
              'AfterInsertRow AfterInsertStatement AfterUpdateRow '
              'AfterUpdateStatement BaseTrigger BeforeDeleteRow '
              'BeforeDeleteStatement BeforeInsertOrUpdateRow '
              'BeforeInsertOrUpdateStatement BeforeInsertRow '
              'BeforeInsertStatement BeforeUpdateRow BeforeUpdateStatement\n'
              '  Methods: __init__ __repr__ __str__ clone sort_key\n'
              '  Variables and usages: dblayer get_next_definition_serial '
              'implicit join name parameter procedure_name '
              'procedure_parameters rsplit staticmethod table table_class '
              'update util\n')

Fragment(uuid='5a498a13-67c0-471d-aec1-d63ed5928ff3',
         path='/lib/dblayer/model/trigger.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='795ebea3-ca4e-445a-9186-bfc764e69a2d',
         path='/lib/dblayer/model/trigger.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='e1ff1680-c6e3-4c31-917e-7c8ec1fdca82',
         path='/lib/dblayer/model/trigger.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BaseTrigger:\n'
              '    """ Base class for database triggers\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of trigger definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this trigger\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this t')

Fragment(uuid='4d188424-6f0f-4fc2-bfc9-73eb68db7130',
         path='/lib/dblayer/model/trigger.py',
         lineno=7,
         depth=1,
         type='class',
         name='BaseTrigger',
         text='class BaseTrigger:\n'
              '    """ Base class for database triggers\n'
              '    """\n'
              '\n'
              '    # Serial number to record the order of trigger definitions\n'
              '    __definition_serial__ = 0\n'
              '\n'
              '    # Reference to the table class containing this trigger\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              '    table_class = None\n'
              '\n'
              '    # Reference to the table instance containing this tr')

Fragment(uuid='279a823d-4607-4419-833f-779ef8d94dae',
         path='/lib/dblayer/model/trigger.py',
         lineno=8,
         depth=4,
         type='documentation',
         name='',
         text=' Base class for database triggers\n    ')

Fragment(uuid='3cdaf169-4bf8-4b6b-9a17-2a7a60deb164',
         path='/lib/dblayer/model/trigger.py',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='# Serial number to record the order of trigger definitions')

Fragment(uuid='7f3e8ef4-4b05-4abb-b97f-b2d70a57ff23',
         path='/lib/dblayer/model/trigger.py',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='# Reference to the table class containing this trigger')

Fragment(uuid='c74431a8-f18c-4905-9e78-56ba15d40399',
         path='/lib/dblayer/model/trigger.py',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the table definition class')

Fragment(uuid='bc0179bd-7c26-4337-a1d7-1d3d379f3b8f',
         path='/lib/dblayer/model/trigger.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text='rigger or None for model triggers\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'triggers from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the trigger\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n')

Fragment(uuid='119e984e-f37b-4f74-8f92-022661696727',
         path='/lib/dblayer/model/trigger.py',
         lineno=18,
         depth=1,
         type='class',
         name='BaseTrigger',
         text='igger or None for model triggers\n'
              '    # NOTE: Filled in by Table.__init__ as part of cloning the '
              'triggers from the class to the instance\n'
              '    table = None\n'
              '\n'
              '    # Name of the trigger\n'
              '    # NOTE: Set by __new__ of the table definition class\n'
              "    name = ''\n"
              '\n'
              '    # Indicates that this model object is added implicitly by '
              'some other model object\n'
              '    implicit = False\n')

Fragment(uuid='cf718b73-f596-4f28-b24b-755bad91fb28',
         path='/lib/dblayer/model/trigger.py',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='# Reference to the table instance containing this trigger or '
              'None for model triggers')

Fragment(uuid='3b48ffe1-c5c6-4d89-9356-71874b0fc032',
         path='/lib/dblayer/model/trigger.py',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Filled in by Table.__init__ as part of cloning the '
              'triggers from the class to the instance')

Fragment(uuid='d8e62194-e277-4a10-be98-8cd9c95a04a6',
         path='/lib/dblayer/model/trigger.py',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='# Name of the trigger')

Fragment(uuid='b2818748-5c7b-428e-a65c-31efb0bc0469',
         path='/lib/dblayer/model/trigger.py',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Set by __new__ of the table definition class')

Fragment(uuid='51bfa335-d2ef-475e-9de3-8d1a95656250',
         path='/lib/dblayer/model/trigger.py',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='# Indicates that this model object is added implicitly by some '
              'other model object')

Fragment(uuid='5194e191-b707-43c8-bbb0-d39a728f2721',
         path='/lib/dblayer/model/trigger.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Trigger: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)\n')

Fragment(uuid='903b755e-e0a9-4250-b192-2d71c537f9af',
         path='/lib/dblayer/model/trigger.py',
         lineno=28,
         depth=1,
         type='class',
         name='BaseTrigger',
         text='\n'
              '    def __str__(self):\n'
              "        return '<%s Trigger: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)\n')

Fragment(uuid='528ad124-27ba-4c1e-9cc0-efd05296aadc',
         path='/lib/dblayer/model/trigger.py',
         lineno=29,
         depth=3,
         type='function',
         name='__str__',
         text='def __str__(self):\n'
              "        return '<%s Trigger: %s.%s>' % (\n"
              '            self.__class__.__name__,\n'
              '            self.table_class.__name__ if self.table_class else '
              "'?',\n"
              '            self.name)')

Fragment(uuid='70c37071-b4c3-414f-92fb-0ecf928be54a',
         path='/lib/dblayer/model/trigger.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.procedure_name,\n'
              "            ''.join(', %r' % parameter for parameter in "
              'self.procedure_parameters))\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='7fbd5942-80af-4f97-a754-5cca36ee2aa5',
         path='/lib/dblayer/model/trigger.py',
         lineno=34,
         depth=1,
         type='class',
         name='BaseTrigger',
         text='\n'
              '    def __repr__(self):\n'
              "        return '%s.%s(%r%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.procedure_name,\n'
              "            ''.join(', %r' % parameter for parameter in "
              'self.procedure_parameters))\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='b5a938e5-a6f8-4eb1-89e0-c8427db84111',
         path='/lib/dblayer/model/trigger.py',
         lineno=35,
         depth=3,
         type='function',
         name='__repr__',
         text='def __repr__(self):\n'
              "        return '%s.%s(%r%s)' % (\n"
              "            self.__class__.__module__.rsplit('.', 1)[-1],\n"
              '            self.__class__.__name__,\n'
              '            self.procedure_name,\n'
              "            ''.join(', %r' % parameter for parameter in "
              'self.procedure_parameters))')

Fragment(uuid='429ca5d5-47f4-4efa-9a0b-4b46995ce257',
         path='/lib/dblayer/model/trigger.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='f190a0b6-42a5-4ae7-b58e-baef030f4e19',
         path='/lib/dblayer/model/trigger.py',
         lineno=43,
         depth=1,
         type='class',
         name='BaseTrigger',
         text='    def sort_key(obj):\n'
              '        return obj.__definition_serial__\n')

Fragment(uuid='7b92ed70-491c-4ba3-b798-6ca589f3391c',
         path='/lib/dblayer/model/trigger.py',
         lineno=43,
         depth=4,
         type='function',
         name='sort_key',
         text='def sort_key(obj):\n        return obj.__definition_serial__')

Fragment(uuid='b7dddf17-07c9-43b4-8238-0e171885ebae',
         path='/lib/dblayer/model/trigger.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __init__(self, procedure_name, *procedure_parameters):\n'
              '        assert self.__class__ is not BaseTrigger, (\n'
              "            'Only subclasses of BaseTrigger can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.procedure_name = procedure_name\n'
              '        self.procedure_parameters = procedure_parameters\n')

Fragment(uuid='63f6e05d-e8a7-4211-b278-d5139350c47a',
         path='/lib/dblayer/model/trigger.py',
         lineno=45,
         depth=1,
         type='class',
         name='BaseTrigger',
         text='\n'
              '    def __init__(self, procedure_name, *procedure_parameters):\n'
              '        assert self.__class__ is not BaseTrigger, (\n'
              "            'Only subclasses of BaseTrigger can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.procedure_name = procedure_name\n'
              '        self.procedure_parameters = procedure_parameters\n')

Fragment(uuid='24925fe3-5385-4c62-abd7-673cfb999bbe',
         path='/lib/dblayer/model/trigger.py',
         lineno=46,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, procedure_name, *procedure_parameters):\n'
              '        assert self.__class__ is not BaseTrigger, (\n'
              "            'Only subclasses of BaseTrigger can be "
              "instantiated!')\n"
              '\n'
              '        # Record the definition order\n'
              '        self.__definition_serial__ = '
              'util.get_next_definition_serial()\n'
              '\n'
              '        self.procedure_name = procedure_name\n'
              '        self.procedure_parameters = procedure_parameters')

Fragment(uuid='73dcc989-dc7b-469e-829c-fb0d6b48e6d3',
         path='/lib/dblayer/model/trigger.py',
         lineno=48,
         depth=7,
         type='documentation',
         name='',
         text='Only subclasses of BaseTrigger can be instantiated!')

Fragment(uuid='09fe7e3e-da1a-4dc2-bb25-0543839f5691',
         path='/lib/dblayer/model/trigger.py',
         lineno=50,
         depth=4,
         type='documentation',
         name='',
         text='# Record the definition order')

Fragment(uuid='e6f262fd-c3db-4e3d-aebb-17cbdf795daf',
         path='/lib/dblayer/model/trigger.py',
         lineno=55,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this trigger for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'triggers to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone\n')

Fragment(uuid='ec6973ed-063a-47f2-9767-37237811017e',
         path='/lib/dblayer/model/trigger.py',
         lineno=55,
         depth=1,
         type='class',
         name='BaseTrigger',
         text='\n'
              '    def clone(self, table):\n'
              '        """ Clone this trigger for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'triggers to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='d575cfec-0019-419f-a80b-23093d6f4d38',
         path='/lib/dblayer/model/trigger.py',
         lineno=56,
         depth=3,
         type='function',
         name='clone',
         text='def clone(self, table):\n'
              '        """ Clone this trigger for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'triggers to the table instance.\n'
              '        \n'
              '        """\n'
              '        clone = self.__class__(None)\n'
              '        clone.__dict__.update(self.__dict__)\n'
              '        clone.table = table\n'
              '        return clone')

Fragment(uuid='e522e16a-5b0a-4221-bfbc-bd246768045d',
         path='/lib/dblayer/model/trigger.py',
         lineno=57,
         depth=6,
         type='documentation',
         name='',
         text=' Clone this trigger for a table instance\n'
              '        \n'
              '        NOTE: It is called by Table.__init__ to bound the '
              'triggers to the table instance.\n'
              '        \n'
              '        ')

Fragment(uuid='3e90c30d-81b1-46a0-9500-5e053094f5c6',
         path='/lib/dblayer/model/trigger.py',
         lineno=66,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeInsertRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting a database row\n'
              '    """\n')

Fragment(uuid='9dd165fd-e2ac-48f8-8aaf-f60ea2f82f4e',
         path='/lib/dblayer/model/trigger.py',
         lineno=68,
         depth=1,
         type='class',
         name='BeforeInsertRow',
         text='class BeforeInsertRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting a database row\n'
              '    """')

Fragment(uuid='e1ff844a-2d3a-484c-926a-1a7c7aca99ea',
         path='/lib/dblayer/model/trigger.py',
         lineno=69,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before inserting a database row\n    ')

Fragment(uuid='387e05f9-aa26-4712-95b0-d2d3b071fc8d',
         path='/lib/dblayer/model/trigger.py',
         lineno=71,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before updating a database row\n'
              '    """\n')

Fragment(uuid='47bd9860-d3ed-44d7-bbe3-f0bb0963ad84',
         path='/lib/dblayer/model/trigger.py',
         lineno=73,
         depth=1,
         type='class',
         name='BeforeUpdateRow',
         text='class BeforeUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before updating a database row\n'
              '    """')

Fragment(uuid='6c6f544b-843e-4017-9140-50ae45478052',
         path='/lib/dblayer/model/trigger.py',
         lineno=74,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before updating a database row\n    ')

Fragment(uuid='1ab88fca-5416-405e-93eb-bea766669cd5',
         path='/lib/dblayer/model/trigger.py',
         lineno=76,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeInsertOrUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting or updating a '
              'database row\n'
              '    """\n')

Fragment(uuid='fa38bb4c-b5d2-4b7b-8ccc-877eebf5aa3f',
         path='/lib/dblayer/model/trigger.py',
         lineno=78,
         depth=1,
         type='class',
         name='BeforeInsertOrUpdateRow',
         text='class BeforeInsertOrUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting or updating a '
              'database row\n'
              '    """')

Fragment(uuid='923a0aa4-39b7-4f08-ac82-3fae760576f1',
         path='/lib/dblayer/model/trigger.py',
         lineno=79,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before inserting or updating a database row\n'
              '    ')

Fragment(uuid='a1940cec-f397-41af-ab38-a6e10d5e6727',
         path='/lib/dblayer/model/trigger.py',
         lineno=81,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeDeleteRow(BaseTrigger):\n'
              '    """ Trigger executed before deleting a database row\n'
              '    """\n')

Fragment(uuid='544532ae-9790-47dc-973b-a80616366198',
         path='/lib/dblayer/model/trigger.py',
         lineno=83,
         depth=1,
         type='class',
         name='BeforeDeleteRow',
         text='class BeforeDeleteRow(BaseTrigger):\n'
              '    """ Trigger executed before deleting a database row\n'
              '    """')

Fragment(uuid='7cd56eed-e4d2-4ebd-90ac-76360ccecae2',
         path='/lib/dblayer/model/trigger.py',
         lineno=84,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before deleting a database row\n    ')

Fragment(uuid='7566dbff-d4ed-4d6d-bfe8-ffd6669a9dd0',
         path='/lib/dblayer/model/trigger.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeInsertStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert statement\n'
              '    """\n')

Fragment(uuid='bf6ca076-0259-44b5-b7ee-7fa7fbf3ecfe',
         path='/lib/dblayer/model/trigger.py',
         lineno=88,
         depth=1,
         type='class',
         name='BeforeInsertStatement',
         text='class BeforeInsertStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert statement\n'
              '    """')

Fragment(uuid='80e7eee4-55b2-4f91-9d71-49fcbf572026',
         path='/lib/dblayer/model/trigger.py',
         lineno=89,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before executing an insert statement\n    ')

Fragment(uuid='c8a3aa3e-8cf8-47df-9336-30cb3b3150ea',
         path='/lib/dblayer/model/trigger.py',
         lineno=91,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an update statement\n'
              '    """\n')

Fragment(uuid='5d3ff811-db37-4f5f-b4c3-f277acfecd4b',
         path='/lib/dblayer/model/trigger.py',
         lineno=93,
         depth=1,
         type='class',
         name='BeforeUpdateStatement',
         text='class BeforeUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an update statement\n'
              '    """')

Fragment(uuid='46a61287-ae18-45ea-b8f1-1ffb82880172',
         path='/lib/dblayer/model/trigger.py',
         lineno=94,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before executing an update statement\n    ')

Fragment(uuid='aa1da826-1026-47a1-bb54-91d3455579f7',
         path='/lib/dblayer/model/trigger.py',
         lineno=96,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeInsertOrUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert or update '
              'statement\n'
              '    """\n')

Fragment(uuid='ee82fcd5-ea36-4d37-8e3a-af7104e5f5e6',
         path='/lib/dblayer/model/trigger.py',
         lineno=98,
         depth=1,
         type='class',
         name='BeforeInsertOrUpdateStatement',
         text='class BeforeInsertOrUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert or update '
              'statement\n'
              '    """')

Fragment(uuid='47ee3bcf-5da8-4a48-b127-a1c88f678525',
         path='/lib/dblayer/model/trigger.py',
         lineno=99,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before executing an insert or update '
              'statement\n'
              '    ')

Fragment(uuid='ad2368a7-d313-4a39-9d94-5156c3a5d76f',
         path='/lib/dblayer/model/trigger.py',
         lineno=101,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class BeforeDeleteStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing a delete statement\n'
              '    """\n')

Fragment(uuid='d7c06873-7c19-486d-9589-b7e32b658737',
         path='/lib/dblayer/model/trigger.py',
         lineno=103,
         depth=1,
         type='class',
         name='BeforeDeleteStatement',
         text='class BeforeDeleteStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing a delete statement\n'
              '    """')

Fragment(uuid='fcabfb17-f6ac-457a-b9f3-655d2c0b6e6b',
         path='/lib/dblayer/model/trigger.py',
         lineno=104,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before executing a delete statement\n    ')

Fragment(uuid='dd9a33db-8f11-4b97-ab1d-9f0dad7fe7d0',
         path='/lib/dblayer/model/trigger.py',
         lineno=106,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterInsertRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting a database row\n'
              '    """\n')

Fragment(uuid='30083d3a-e1d6-4235-b0e0-f93cf328ba8c',
         path='/lib/dblayer/model/trigger.py',
         lineno=108,
         depth=1,
         type='class',
         name='AfterInsertRow',
         text='class AfterInsertRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting a database row\n'
              '    """')

Fragment(uuid='e4ffedae-6da6-4e01-9753-cadcd699981b',
         path='/lib/dblayer/model/trigger.py',
         lineno=109,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before inserting a database row\n    ')

Fragment(uuid='99f6bdc9-d164-4288-b895-738890d9f8d5',
         path='/lib/dblayer/model/trigger.py',
         lineno=111,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before updating a database row\n'
              '    """\n')

Fragment(uuid='73ebe9c4-6cab-40a0-8b8f-55d424f86780',
         path='/lib/dblayer/model/trigger.py',
         lineno=113,
         depth=1,
         type='class',
         name='AfterUpdateRow',
         text='class AfterUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before updating a database row\n'
              '    """')

Fragment(uuid='0e9fc30c-caaf-4846-abe1-1c8bf872318f',
         path='/lib/dblayer/model/trigger.py',
         lineno=114,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before updating a database row\n    ')

Fragment(uuid='e6926983-397e-4ad3-87e4-895b0c46d578',
         path='/lib/dblayer/model/trigger.py',
         lineno=116,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterInsertOrUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting or updating a '
              'database row\n'
              '    """\n')

Fragment(uuid='59e9bb87-ff22-4cfb-a806-cf17144b0042',
         path='/lib/dblayer/model/trigger.py',
         lineno=118,
         depth=1,
         type='class',
         name='AfterInsertOrUpdateRow',
         text='class AfterInsertOrUpdateRow(BaseTrigger):\n'
              '    """ Trigger executed before inserting or updating a '
              'database row\n'
              '    """')

Fragment(uuid='4f9dfed1-5a6d-4347-b951-6f8cb877f348',
         path='/lib/dblayer/model/trigger.py',
         lineno=119,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before inserting or updating a database row\n'
              '    ')

Fragment(uuid='8c4669ec-c0d0-468b-ab1c-b568ef85ae89',
         path='/lib/dblayer/model/trigger.py',
         lineno=121,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterDeleteRow(BaseTrigger):\n'
              '    """ Trigger executed before deleting a database row\n'
              '    """\n')

Fragment(uuid='c553adcf-ced1-4049-8638-d8a841e64da4',
         path='/lib/dblayer/model/trigger.py',
         lineno=123,
         depth=1,
         type='class',
         name='AfterDeleteRow',
         text='class AfterDeleteRow(BaseTrigger):\n'
              '    """ Trigger executed before deleting a database row\n'
              '    """')

Fragment(uuid='828a6f1e-673a-444c-adb5-45affe62a664',
         path='/lib/dblayer/model/trigger.py',
         lineno=124,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before deleting a database row\n    ')

Fragment(uuid='0ff1f62b-8029-4cdf-8b82-39483abe2933',
         path='/lib/dblayer/model/trigger.py',
         lineno=126,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterInsertStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert statement\n'
              '    """\n')

Fragment(uuid='79ece325-f2a6-4535-9e43-fa25e978af8c',
         path='/lib/dblayer/model/trigger.py',
         lineno=128,
         depth=1,
         type='class',
         name='AfterInsertStatement',
         text='class AfterInsertStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert statement\n'
              '    """')

Fragment(uuid='ec68aab6-ba2f-4c27-9255-cc96ed1b85e5',
         path='/lib/dblayer/model/trigger.py',
         lineno=129,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before executing an insert statement\n    ')

Fragment(uuid='c622b0ca-3732-4809-aeeb-2f333651b007',
         path='/lib/dblayer/model/trigger.py',
         lineno=131,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an update statement\n'
              '    """\n')

Fragment(uuid='c667f4bb-e8c1-4aa6-9d7f-f3e542e3c830',
         path='/lib/dblayer/model/trigger.py',
         lineno=133,
         depth=1,
         type='class',
         name='AfterUpdateStatement',
         text='class AfterUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an update statement\n'
              '    """')

Fragment(uuid='b202f2f4-8ab8-411c-8ebf-dc4f85bf4749',
         path='/lib/dblayer/model/trigger.py',
         lineno=134,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before executing an update statement\n    ')

Fragment(uuid='4c00c10b-4578-4704-ac9e-b9f8534eb480',
         path='/lib/dblayer/model/trigger.py',
         lineno=136,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterInsertOrUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert or update '
              'statement\n'
              '    """\n')

Fragment(uuid='885e1a66-a8fe-4da8-9740-cb32df094021',
         path='/lib/dblayer/model/trigger.py',
         lineno=138,
         depth=1,
         type='class',
         name='AfterInsertOrUpdateStatement',
         text='class AfterInsertOrUpdateStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing an insert or update '
              'statement\n'
              '    """')

Fragment(uuid='4ff739b1-787b-4b53-b2ec-9f14843739c3',
         path='/lib/dblayer/model/trigger.py',
         lineno=139,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before executing an insert or update '
              'statement\n'
              '    ')

Fragment(uuid='13ea28e2-f360-47fe-8029-94bf4a6ff471',
         path='/lib/dblayer/model/trigger.py',
         lineno=141,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class AfterDeleteStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing a delete statement\n'
              '    """\n')

Fragment(uuid='19779dfa-4614-4395-9a5a-d3d8b307a9c2',
         path='/lib/dblayer/model/trigger.py',
         lineno=143,
         depth=1,
         type='class',
         name='AfterDeleteStatement',
         text='class AfterDeleteStatement(BaseTrigger):\n'
              '    """ Trigger executed before executing a delete statement\n'
              '    """')

Fragment(uuid='f293aeba-e85a-4a1d-b006-5d67b52c755f',
         path='/lib/dblayer/model/trigger.py',
         lineno=144,
         depth=4,
         type='documentation',
         name='',
         text=' Trigger executed before executing a delete statement\n    ')

Fragment(uuid='f52d2f9f-52df-4163-b7d7-d208d16c9b5f',
         path='/lib/dblayer/test/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Unit test cases for the database package\n"""\n')

Fragment(uuid='05960337-981f-40d0-8a20-96a685c6566d',
         path='/lib/dblayer/test/__init__.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Unit test cases for the database package\n')

Fragment(uuid='d5e4ba28-550a-4942-8857-dab61fc2a707',
         path='/lib/dblayer/test/constants.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Test constants\n'
              '"""\n'
              '\n'
              '# Enable this to debug rolling back to savepoints on '
              'conflicting primary keys\n'
              '##if constants.DEBUG:\n'
              '##    constants.DATABASE_ID_RANGE = (1, 10)\n'
              '##    constants.MAX_INSERT_RETRY_COUNT = 3\n'
              '\n'
              '# Database to use for testing\n'
              'TEST_DSN = "dbname=\'dblayer\' user=\'dblayer\' ho')

Fragment(uuid='b5c8740b-a821-4d98-91cb-af38babe7097',
         path='/lib/dblayer/test/constants.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/test/constants.py\n'
              '  Variables and usages: LEAVE_CLEAN_DATABASE RXP_EMAIL '
              'RXP_IDENTIFIER TEST_DSN\n')

Fragment(uuid='771be363-2fa8-4d39-b9fc-8640ad3874b3',
         path='/lib/dblayer/test/constants.py',
         lineno=4,
         depth=0,
         type='documentation',
         name='',
         text='# Enable this to debug rolling back to savepoints on '
              'conflicting primary keys')

Fragment(uuid='b68c7ecf-4b6a-4e61-b465-4fc9cbf90df3',
         path='/lib/dblayer/test/constants.py',
         lineno=5,
         depth=0,
         type='documentation',
         name='',
         text='##if constants.DEBUG:')

Fragment(uuid='7a0b6236-970c-492e-8f9a-50a40a37e7d6',
         path='/lib/dblayer/test/constants.py',
         lineno=6,
         depth=0,
         type='documentation',
         name='',
         text='##    constants.DATABASE_ID_RANGE = (1, 10)')

Fragment(uuid='bea23ab0-efba-45dc-b579-02b8f43f42ac',
         path='/lib/dblayer/test/constants.py',
         lineno=7,
         depth=0,
         type='documentation',
         name='',
         text='##    constants.MAX_INSERT_RETRY_COUNT = 3')

Fragment(uuid='64c44419-3e57-4c9c-834a-2ca1e58b4e8d',
         path='/lib/dblayer/test/constants.py',
         lineno=9,
         depth=0,
         type='documentation',
         name='',
         text='# Database to use for testing')

Fragment(uuid='109b8748-6f20-454e-ab3d-cc4cf8228600',
         path='/lib/dblayer/test/constants.py',
         lineno=10,
         depth=0,
         type='module',
         name='',
         text='st=\'localhost\' password=\'dblayer\'"\n'
              '\n'
              '# Enables dropping of the test tables after running the unit '
              'test cases\n'
              'LEAVE_CLEAN_DATABASE = True\n'
              '\n'
              '# Regular expressions used by the test check constraints\n'
              "RXP_IDENTIFIER = r'^[a-zA-Z_][a-zA-Z_0-9]*$'\n"
              "RXP_EMAIL = r'^[\\w\\-\\.]+@[\\w\\-]+(?:\\.[\\w\\-]+)*$'\n")

Fragment(uuid='dde9a248-af45-46d4-8431-2f91508590d9',
         path='/lib/dblayer/test/constants.py',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text="dbname='dblayer' user='dblayer' host='localhost' "
              "password='dblayer'")

Fragment(uuid='d9b1b5c6-ca25-4812-85c0-1d140289783c',
         path='/lib/dblayer/test/constants.py',
         lineno=12,
         depth=0,
         type='documentation',
         name='',
         text='# Enables dropping of the test tables after running the unit '
              'test cases')

Fragment(uuid='553e60a1-15e8-4e16-8ea1-bd6a07d4d361',
         path='/lib/dblayer/test/constants.py',
         lineno=15,
         depth=0,
         type='documentation',
         name='',
         text='# Regular expressions used by the test check constraints')

Fragment(uuid='47bb500e-31a4-439b-971b-fb5708fee2ac',
         path='/lib/dblayer/test/constants.py',
         lineno=16,
         depth=3,
         type='documentation',
         name='',
         text='^[a-zA-Z_][a-zA-Z_0-9]*$')

Fragment(uuid='59263c5e-25e0-40de-b030-681a77b4908e',
         path='/lib/dblayer/test/constants.py',
         lineno=17,
         depth=3,
         type='documentation',
         name='',
         text='^[\\w\\-\\.]+@[\\w\\-]+(?:\\.[\\w\\-]+)*$')

Fragment(uuid='cccac490-e7d9-4c17-a001-04e8612ddb81',
         path='/lib/dblayer/test/model.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Data model used for the unit test cases\n'
              '"""\n'
              '\n'
              'import dblayer\n'
              '\n'
              'import dblayer.backend.postgresql\n'
              'from dblayer.model import database, table, column, index, '
              'constraint\n'
              'from dblayer.model import query, aggregate, function, trigger, '
              'procedure\n'
              'from dblayer.test import constants\n'
              '\n'
              '\n'
              '### Mixins\n')

Fragment(uuid='b092d6f0-1011-4da8-b14c-dbd052c31d66',
         path='/lib/dblayer/test/model.py',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text=' Data model used for the unit test cases\n')

Fragment(uuid='b1906617-067f-482a-8338-f5394ba1d8c1',
         path='/lib/dblayer/test/model.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/test/model.py\n'
              '  Functions: generate\n'
              '  Classes: Activation Group GroupRole GroupUser Invoice '
              'InvoiceItem Payment Product ProductSale Role SlugMixin '
              'TestDatabaseModel User UserContact\n'
              '  Variables and usages: BeforeInsertOrUpdateRow Boolean Check '
              'Condition Database Date Datetime Decimal Float ForeignKey Index '
              'Integer Match PrimaryKey Procedure Query RXP_EMAIL '
              'RXP_IDENTIFIER Result SearchDocument Sum Table Text Unique '
              '_group_by _order_by abstraction_class_name activation active '
              'aggregate amount argument_list backend base body column '
              'commission_percent constants constraint customer database '
              'database_model_class dblayer default digits double due_date '
              'email expression first_day first_name fn_set_last_modified '
              'full_text function gross_amount group group_role group_user '
              'index invoice invoice_item issued issued_date join language '
              'last_day last_modified last_name maxlength model module_file '
              'module_path name net_amount notes null open paid_date passed '
              'payment payment_date phone postgresql precision predecessor '
              'procedure product product_id product_model product_name '
              'product_sale quantity query real_name_index '
              'referenced_table_class replace result role sale scale secret '
              'seller serial set_last_modified slug source table test '
              'test_database_model trigger unique_email unique_group_role '
              'unique_group_user unique_name unique_serial unique_slug user '
              'user_contact valid_until validate_email validate_slug '
              'vat_amount vat_percent write\n')

Fragment(uuid='835db4c8-9708-4e09-9b5a-3ebf855dac73',
         path='/lib/dblayer/test/model.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='f1b899fa-c1e1-4643-8995-cc7ba817d326',
         path='/lib/dblayer/test/model.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='0773df9c-101e-47e4-aa5e-09a87d95f725',
         path='/lib/dblayer/test/model.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='031ec8c1-b57f-4d21-8550-0d7ac6cde367',
         path='/lib/dblayer/test/model.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='6df92500-8c0a-4ba3-9b70-696b0eddb98c',
         path='/lib/dblayer/test/model.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='080bc50f-6cc0-43cc-9be3-387be419a5cf',
         path='/lib/dblayer/test/model.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='f38e7256-399f-49ff-a482-ff232073569d',
         path='/lib/dblayer/test/model.py',
         lineno=9,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='5976809c-efa4-4eba-ad84-2a25c6f79bb5',
         path='/lib/dblayer/test/model.py',
         lineno=9,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='f43213e1-eb28-4c7d-8e51-c3bcde6a13bd',
         path='/lib/dblayer/test/model.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class SlugMixin:\n'
              '    """ Adds a slug field with the proper constraints\n'
              '    """\n'
              '    slug = column.Text(maxlength=30)\n'
              '    validate_slug = constraint.Check(function.Match(slug, '
              'constants.RXP_IDENTIFIER))\n'
              '    unique_slug = constraint.Unique(slug)\n'
              '\n'
              '\n'
              '### Table models\n')

Fragment(uuid='eb9559b4-66c6-4dfc-9448-41a75dde3634',
         path='/lib/dblayer/test/model.py',
         lineno=14,
         depth=1,
         type='class',
         name='SlugMixin',
         text='class SlugMixin:\n'
              '    """ Adds a slug field with the proper constraints\n'
              '    """\n'
              '    slug = column.Text(maxlength=30)\n'
              '    validate_slug = constraint.Check(function.Match(slug, '
              'constants.RXP_IDENTIFIER))\n'
              '    unique_slug = constraint.Unique(slug)')

Fragment(uuid='9e592e1d-64b5-43df-abaf-dcd6794e4cd4',
         path='/lib/dblayer/test/model.py',
         lineno=15,
         depth=4,
         type='documentation',
         name='',
         text=' Adds a slug field with the proper constraints\n    ')

Fragment(uuid='d9531639-57a0-4fa6-a4b3-007416cf7315',
         path='/lib/dblayer/test/model.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class User(table.Table):\n'
              '    """ User\n'
              '    """\n'
              '    id = column.PrimaryKey(serial=True)\n'
              '    email = column.Text(maxlength=150)\n'
              '    first_name = column.Text(maxlength=150)\n'
              '    last_name = column.Text(maxlength=150)\n'
              '    phone = column.Text(maxlength=100, null=True)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n"
              '\n'
              '    validate_email = constra')

Fragment(uuid='7c4076e1-9d34-4908-956e-a3c1c05717c3',
         path='/lib/dblayer/test/model.py',
         lineno=24,
         depth=1,
         type='class',
         name='User',
         text='class User(table.Table):\n'
              '    """ User\n'
              '    """\n'
              '    id = column.PrimaryKey(serial=True)\n'
              '    email = column.Text(maxlength=150)\n'
              '    first_name = column.Text(maxlength=150)\n'
              '    last_name = column.Text(maxlength=150)\n'
              '    phone = column.Text(maxlength=100, null=True)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n"
              '\n'
              '    validate_email = constra')

Fragment(uuid='5434b00e-693e-44c5-8b97-cc192401466e',
         path='/lib/dblayer/test/model.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='int.Check(function.Match(email, constants.RXP_EMAIL))\n'
              '    unique_email = constraint.Unique(email)\n'
              '\n'
              '    real_name_index = index.Index(first_name, last_name)\n'
              '\n'
              '    full_text = column.SearchDocument(\n'
              '        expression=(email, first_name, last_name, phone, '
              'notes),\n'
              "        doc='Full text search document to find users by all of "
              "their text attributes')\n")

Fragment(uuid='e2fef019-89fb-4bda-af58-a35845be1596',
         path='/lib/dblayer/test/model.py',
         lineno=34,
         depth=1,
         type='class',
         name='User',
         text='int.Check(function.Match(email, constants.RXP_EMAIL))\n'
              '    unique_email = constraint.Unique(email)\n'
              '\n'
              '    real_name_index = index.Index(first_name, last_name)\n'
              '\n'
              '    full_text = column.SearchDocument(\n'
              '        expression=(email, first_name, last_name, phone, '
              'notes),\n'
              "        doc='Full text search document to find users by all of "
              "their text attributes')")

Fragment(uuid='55dc21ae-18b3-4b69-8e9f-140d211d32db',
         path='/lib/dblayer/test/model.py',
         lineno=41,
         depth=8,
         type='documentation',
         name='',
         text='Full text search document to find users by all of their text '
              'attributes')

Fragment(uuid='063dd228-0309-436f-8b7c-3f50e458b18e',
         path='/lib/dblayer/test/model.py',
         lineno=42,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Group(table.Table, SlugMixin):\n'
              '    """ Group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    name = column.Text(maxlength=100)\n'
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n")

Fragment(uuid='164d2d82-0990-4872-9638-77a3818e07da',
         path='/lib/dblayer/test/model.py',
         lineno=44,
         depth=1,
         type='class',
         name='Group',
         text='class Group(table.Table, SlugMixin):\n'
              '    """ Group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    name = column.Text(maxlength=100)\n'
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')")

Fragment(uuid='a5b15294-8172-4332-9491-ccc113416b4e',
         path='/lib/dblayer/test/model.py',
         lineno=51,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class GroupUser(table.Table):\n'
              '    """ User associated to group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    group = column.ForeignKey(Group)\n'
              '    user = column.ForeignKey(User)\n'
              '    unique_group_user = constraint.Unique(group, user)\n')

Fragment(uuid='c5938c29-b4ea-4a20-bda9-0b4d3306aee3',
         path='/lib/dblayer/test/model.py',
         lineno=53,
         depth=1,
         type='class',
         name='GroupUser',
         text='class GroupUser(table.Table):\n'
              '    """ User associated to group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    group = column.ForeignKey(Group)\n'
              '    user = column.ForeignKey(User)\n'
              '    unique_group_user = constraint.Unique(group, user)')

Fragment(uuid='5848fa16-ccf7-4c5f-8e32-789704d795a7',
         path='/lib/dblayer/test/model.py',
         lineno=54,
         depth=4,
         type='documentation',
         name='',
         text=' User associated to group\n    ')

Fragment(uuid='77fa57d5-ebf5-4b7b-ba55-fceb1ef45346',
         path='/lib/dblayer/test/model.py',
         lineno=60,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Role(table.Table, SlugMixin):\n'
              '    """ Role\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    name = column.Text(maxlength=100)\n'
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n")

Fragment(uuid='a6c2a7cf-0df2-4f44-aeb5-d021ea9aac34',
         path='/lib/dblayer/test/model.py',
         lineno=62,
         depth=1,
         type='class',
         name='Role',
         text='class Role(table.Table, SlugMixin):\n'
              '    """ Role\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    name = column.Text(maxlength=100)\n'
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')")

Fragment(uuid='63d2fe29-0d13-4c2f-bef5-0dfd42704df4',
         path='/lib/dblayer/test/model.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class GroupRole(table.Table):\n'
              '    """ Role associated to group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    group = column.ForeignKey(Group)\n'
              '    role = column.ForeignKey(Role)\n'
              '    unique_group_role = constraint.Unique(group, role)\n')

Fragment(uuid='5c9062c3-ecf2-48cf-8d2f-558948c78c00',
         path='/lib/dblayer/test/model.py',
         lineno=71,
         depth=1,
         type='class',
         name='GroupRole',
         text='class GroupRole(table.Table):\n'
              '    """ Role associated to group\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    group = column.ForeignKey(Group)\n'
              '    role = column.ForeignKey(Role)\n'
              '    unique_group_role = constraint.Unique(group, role)')

Fragment(uuid='1b9b20bd-ea49-4ea6-a4e3-0b1d6b79aaf5',
         path='/lib/dblayer/test/model.py',
         lineno=72,
         depth=4,
         type='documentation',
         name='',
         text=' Role associated to group\n    ')

Fragment(uuid='8acc71ab-e879-41d4-ab14-054b12993fa6',
         path='/lib/dblayer/test/model.py',
         lineno=78,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Activation(table.Table):\n'
              '    """ Activation attempt\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    user = column.ForeignKey(User)\n'
              "    secret = column.Integer(digits=30, doc='Secret activation "
              "code needs to be presented.')\n"
              "    issued = column.Datetime(doc='Timestamp of the activation "
              "e-mail sent to the user.')\n"
              "    valid_until = column.Datetime(doc='The user is deleted if "
              "not activated before this time limit.')\n"
              "    passed = column.Boolean(doc='Successful activation sets "
              "this field to True.')\n")

Fragment(uuid='6a10e186-46fa-412d-9efb-6d5bb11b49c8',
         path='/lib/dblayer/test/model.py',
         lineno=80,
         depth=1,
         type='class',
         name='Activation',
         text='class Activation(table.Table):\n'
              '    """ Activation attempt\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              '    user = column.ForeignKey(User)\n'
              "    secret = column.Integer(digits=30, doc='Secret activation "
              "code needs to be presented.')\n"
              "    issued = column.Datetime(doc='Timestamp of the activation "
              "e-mail sent to the user.')\n"
              "    valid_until = column.Datetime(doc='The user is deleted if "
              "not activated before this time limit.')\n"
              "    passed = column.Boolean(doc='Successful activation sets "
              "this field to True.')")

Fragment(uuid='c4850e7e-8b86-4c37-96db-ccdfa68471b4',
         path='/lib/dblayer/test/model.py',
         lineno=81,
         depth=4,
         type='documentation',
         name='',
         text=' Activation attempt\n    ')

Fragment(uuid='4788f7b8-a68a-4636-bd30-a062c5dead00',
         path='/lib/dblayer/test/model.py',
         lineno=85,
         depth=8,
         type='documentation',
         name='',
         text='Secret activation code needs to be presented.')

Fragment(uuid='94de6070-8773-4b25-8283-a91c5cd1b881',
         path='/lib/dblayer/test/model.py',
         lineno=86,
         depth=8,
         type='documentation',
         name='',
         text='Timestamp of the activation e-mail sent to the user.')

Fragment(uuid='7be44cd1-f140-40bd-a9b2-125d755ec3d2',
         path='/lib/dblayer/test/model.py',
         lineno=87,
         depth=8,
         type='documentation',
         name='',
         text='The user is deleted if not activated before this time limit.')

Fragment(uuid='df58718c-8030-45fc-b0a7-ea4fd408b880',
         path='/lib/dblayer/test/model.py',
         lineno=88,
         depth=8,
         type='documentation',
         name='',
         text='Successful activation sets this field to True.')

Fragment(uuid='7786fc6c-9b0c-449b-84e1-decd5cc9bbd2',
         path='/lib/dblayer/test/model.py',
         lineno=89,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Product(table.Table):\n'
              '    """ Product or service\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    base = column.ForeignKey(null=True, doc='Base (parent) "
              "product or service')\n"
              '    predecessor = column.ForeignKey(null=True, '
              "doc='Predecessor')\n"
              "    active = column.Boolean(default=True, doc='Only active "
              "products should be ordered')\n"
              "    model = column.Text(null=True, maxlength=50, doc='Model "
              'number or other internal product identifier for fast sear')

Fragment(uuid='c5da1fe8-a4d0-4d61-aa70-65ed78129637',
         path='/lib/dblayer/test/model.py',
         lineno=91,
         depth=1,
         type='class',
         name='Product',
         text='class Product(table.Table):\n'
              '    """ Product or service\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    base = column.ForeignKey(null=True, doc='Base (parent) "
              "product or service')\n"
              '    predecessor = column.ForeignKey(null=True, '
              "doc='Predecessor')\n"
              "    active = column.Boolean(default=True, doc='Only active "
              "products should be ordered')\n"
              "    model = column.Text(null=True, maxlength=50, doc='Model "
              'number ')

Fragment(uuid='6288b5ad-c9cf-47ad-9c1e-b275d952bb5f',
         path='/lib/dblayer/test/model.py',
         lineno=92,
         depth=4,
         type='documentation',
         name='',
         text=' Product or service\n    ')

Fragment(uuid='3bc466d4-6dcd-4eda-807c-bbfb933c16bc',
         path='/lib/dblayer/test/model.py',
         lineno=95,
         depth=8,
         type='documentation',
         name='',
         text='Base (parent) product or service')

Fragment(uuid='a9b18a80-8ae8-44db-96e0-e42323b8f9c3',
         path='/lib/dblayer/test/model.py',
         lineno=97,
         depth=8,
         type='documentation',
         name='',
         text='Only active products should be ordered')

Fragment(uuid='2feffe5f-c788-4082-a9d1-f7efbb758991',
         path='/lib/dblayer/test/model.py',
         lineno=98,
         depth=0,
         type='module',
         name='',
         text="ching')\n"
              "    name = column.Text(maxlength=200, doc='Official name of the "
              "product')\n"
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n"
              "    last_modified = column.Datetime(null=True, doc='Last "
              "modification date and time')\n"
              '    set_last_modified = '
              "trigger.BeforeInsertOrUpdateRow('fn_set_last_modified')\n"
              '\n'
              '\n'
              'Product.base.referenced_table_class = Product\n'
              'Product.predecessor.referenced_table_class = Product\n')

Fragment(uuid='aa19d44d-8c68-4176-858b-61b80a3154e9',
         path='/lib/dblayer/test/model.py',
         lineno=98,
         depth=1,
         type='class',
         name='Product',
         text="or other internal product identifier for fast searching')\n"
              "    name = column.Text(maxlength=200, doc='Official name of the "
              "product')\n"
              '    unique_name = constraint.Unique(name)\n'
              "    notes = column.Text(null=True, doc='Custom notes')\n"
              "    last_modified = column.Datetime(null=True, doc='Last "
              "modification date and time')\n"
              '    set_last_modified = '
              "trigger.BeforeInsertOrUpdateRow('fn_set_last_modified')")

Fragment(uuid='4a9c362c-1708-4df6-9de7-76d7c315a044',
         path='/lib/dblayer/test/model.py',
         lineno=98,
         depth=8,
         type='documentation',
         name='',
         text='Model number or other internal product identifier for fast '
              'searching')

Fragment(uuid='2cd2d0e5-b8f2-4cdc-bf3b-89422b514960',
         path='/lib/dblayer/test/model.py',
         lineno=99,
         depth=8,
         type='documentation',
         name='',
         text='Official name of the product')

Fragment(uuid='896655ce-0745-48da-88b7-05fab942f4f5',
         path='/lib/dblayer/test/model.py',
         lineno=102,
         depth=8,
         type='documentation',
         name='',
         text='Last modification date and time')

Fragment(uuid='144286c8-9c83-4843-b98e-5b6ddf83313e',
         path='/lib/dblayer/test/model.py',
         lineno=103,
         depth=7,
         type='documentation',
         name='',
         text='fn_set_last_modified')

Fragment(uuid='87fddabd-c8fe-46e7-b901-c223efd206ca',
         path='/lib/dblayer/test/model.py',
         lineno=108,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Invoice(table.Table):\n'
              '    """ Invoice\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    serial = column.Text(maxlength=30, doc='Strictly serially "
              'incremented invoice number, generated only as the very last '
              "step.')\n"
              '    unique_serial = constraint.Unique(serial)\n'
              '    seller = column.ForeignKey(User)\n'
              '    customer = column.ForeignKey(User)\n'
              '    net_amou')

Fragment(uuid='97a75956-7d8d-4b14-b13c-dedaacf96e43',
         path='/lib/dblayer/test/model.py',
         lineno=110,
         depth=1,
         type='class',
         name='Invoice',
         text='class Invoice(table.Table):\n'
              '    """ Invoice\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    serial = column.Text(maxlength=30, doc='Strictly serially "
              'incremented invoice number, generated only as the very last '
              "step.')\n"
              '    unique_serial = constraint.Unique(serial)\n'
              '    seller = column.ForeignKey(User)\n'
              '    customer = column.ForeignKey(User)\n'
              '    net_amoun')

Fragment(uuid='a6b34590-6739-4d77-b2a6-829568d8c4e8',
         path='/lib/dblayer/test/model.py',
         lineno=114,
         depth=8,
         type='documentation',
         name='',
         text='Strictly serially incremented invoice number, generated only as '
              'the very last step.')

Fragment(uuid='7d55edf4-9271-43b0-b107-61f5abc29755',
         path='/lib/dblayer/test/model.py',
         lineno=118,
         depth=0,
         type='module',
         name='',
         text='nt = column.Decimal(precision=18, scale=2)\n'
              '    vat_amount = column.Integer(digits=18, default=0)\n'
              '    gross_amount = column.Decimal(precision=18, scale=2)\n'
              '    issued_date = column.Date()\n'
              '    due_date = column.Date()\n'
              "    paid_date = column.Date(null=True, doc='Date of the last "
              'payment which was sufficient to fully pay this invoice in FIFO '
              "order.')\n")

Fragment(uuid='231e8159-4b28-4abb-820a-42e1957bc6a0',
         path='/lib/dblayer/test/model.py',
         lineno=118,
         depth=1,
         type='class',
         name='Invoice',
         text='t = column.Decimal(precision=18, scale=2)\n'
              '    vat_amount = column.Integer(digits=18, default=0)\n'
              '    gross_amount = column.Decimal(precision=18, scale=2)\n'
              '    issued_date = column.Date()\n'
              '    due_date = column.Date()\n'
              "    paid_date = column.Date(null=True, doc='Date of the last "
              'payment which was sufficient to fully pay this invoice in FIFO '
              "order.')")

Fragment(uuid='f60d8d31-ff63-43d3-bd11-c39008666e19',
         path='/lib/dblayer/test/model.py',
         lineno=123,
         depth=8,
         type='documentation',
         name='',
         text='Date of the last payment which was sufficient to fully pay this '
              'invoice in FIFO order.')

Fragment(uuid='b33bb4ed-79e5-4694-9777-93068636b50d',
         path='/lib/dblayer/test/model.py',
         lineno=124,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class InvoiceItem(table.Table):\n'
              '    """ Service\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    invoice = column.ForeignKey(Invoice, doc='The invoice this "
              "item is belonging to.')\n"
              "    product = column.ForeignKey(Product, doc='Product or "
              "service sold.')\n"
              "    first_day = column.Date(null=True, doc='First day of "
              "service if applicable.')\n"
              "    last_day = column.Date(null=True, doc='Last day of service "
              'if applicable')

Fragment(uuid='66103690-fc9b-4ad4-8959-262b148fa2f9',
         path='/lib/dblayer/test/model.py',
         lineno=126,
         depth=1,
         type='class',
         name='InvoiceItem',
         text='class InvoiceItem(table.Table):\n'
              '    """ Service\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    invoice = column.ForeignKey(Invoice, doc='The invoice this "
              "item is belonging to.')\n"
              "    product = column.ForeignKey(Product, doc='Product or "
              "service sold.')\n"
              "    first_day = column.Date(null=True, doc='First day of "
              "service if applicable.')\n"
              "    last_day = column.Date(null=True, doc='Last day of service "
              'if applicable')

Fragment(uuid='f75f13af-4d33-46a2-a06d-bc601c7589c4',
         path='/lib/dblayer/test/model.py',
         lineno=130,
         depth=8,
         type='documentation',
         name='',
         text='The invoice this item is belonging to.')

Fragment(uuid='1e50ea10-4875-4de6-ba83-1f29662a5279',
         path='/lib/dblayer/test/model.py',
         lineno=131,
         depth=8,
         type='documentation',
         name='',
         text='Product or service sold.')

Fragment(uuid='974d88ca-a535-4a23-93de-7f8803be5ada',
         path='/lib/dblayer/test/model.py',
         lineno=132,
         depth=8,
         type='documentation',
         name='',
         text='First day of service if applicable.')

Fragment(uuid='aee4f6c9-0abf-4030-95d7-8d175fcb36a4',
         path='/lib/dblayer/test/model.py',
         lineno=133,
         depth=0,
         type='module',
         name='',
         text=".')\n"
              '    quantity = column.Integer(digits=9, null=True, '
              "doc='Quantity sold if applicable.')\n"
              '    net_amount = column.Decimal(precision=18, scale=2)\n'
              '    vat_percent = column.Float(double=False, default=0)\n'
              '    vat_amount = column.Integer(digits=18, default=0)\n'
              '    gross_amount = column.Decimal(precision=18, scale=2)\n'
              "    notes = column.Text(null=True, maxlength=200, doc='Custom "
              "notes for this item if any.')\n")

Fragment(uuid='e17d0b43-6fb3-4115-8f88-5391e571bad7',
         path='/lib/dblayer/test/model.py',
         lineno=133,
         depth=1,
         type='class',
         name='InvoiceItem',
         text=".')\n"
              '    quantity = column.Integer(digits=9, null=True, '
              "doc='Quantity sold if applicable.')\n"
              '    net_amount = column.Decimal(precision=18, scale=2)\n'
              '    vat_percent = column.Float(double=False, default=0)\n'
              '    vat_amount = column.Integer(digits=18, default=0)\n'
              '    gross_amount = column.Decimal(precision=18, scale=2)\n'
              "    notes = column.Text(null=True, maxlength=200, doc='Custom "
              "notes for this item if any.')")

Fragment(uuid='cf0d3755-cb68-44c6-b3f9-7ff7054a368b',
         path='/lib/dblayer/test/model.py',
         lineno=133,
         depth=8,
         type='documentation',
         name='',
         text='Last day of service if applicable.')

Fragment(uuid='7533f653-a76e-46c7-966d-9c6676132f20',
         path='/lib/dblayer/test/model.py',
         lineno=134,
         depth=8,
         type='documentation',
         name='',
         text='Quantity sold if applicable.')

Fragment(uuid='6fabbda7-ef31-43fb-a0b3-7a3a73a75f4b',
         path='/lib/dblayer/test/model.py',
         lineno=139,
         depth=8,
         type='documentation',
         name='',
         text='Custom notes for this item if any.')

Fragment(uuid='cd5ddab5-6c96-45fc-ac65-6ea7646c99aa',
         path='/lib/dblayer/test/model.py',
         lineno=140,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Payment(table.Table):\n'
              '    """ Payment\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    invoice = column.ForeignKey(Invoice, doc='Invoice this "
              "payment is for.')\n"
              "    user = column.ForeignKey(User, doc='Actual user paying for "
              "the invoice. It should match the user on the invoice.')\n"
              "    payment_date = column.Date(doc='Effective date of "
              "payment.')\n"
              "    amount = column.Integer(digits=18, doc='Amount payed. It is "
              "accounted against the gross amount of the invoice.')\n"
              '    commission_percent = column.Float(default=0.0, '
              "doc='Commission percentage')\n"
              '\n'
              '\n'
              '### Queries\n')

Fragment(uuid='752bb36b-30a3-4f21-800d-e86cf0e30514',
         path='/lib/dblayer/test/model.py',
         lineno=142,
         depth=1,
         type='class',
         name='Payment',
         text='class Payment(table.Table):\n'
              '    """ Payment\n'
              '    """\n'
              '    id = column.PrimaryKey()\n'
              "    invoice = column.ForeignKey(Invoice, doc='Invoice this "
              "payment is for.')\n"
              "    user = column.ForeignKey(User, doc='Actual user paying for "
              "the invoice. It should match the user on the invoice.')\n"
              "    payment_date = column.Date(doc='Effective date of "
              "payment.')\n"
              "    amount = column.Integer(digits=18, doc='Amount payed. It is "
              "accounted against the gross amount of the invoice.')\n"
              '    commission_percent = column.Float(default=0.0, '
              "doc='Commission percentage')")

Fragment(uuid='5082e826-9834-45a4-b719-828edfc59f26',
         path='/lib/dblayer/test/model.py',
         lineno=146,
         depth=8,
         type='documentation',
         name='',
         text='Invoice this payment is for.')

Fragment(uuid='f86cc988-ca4f-4d90-9789-e2a11cd46d2d',
         path='/lib/dblayer/test/model.py',
         lineno=147,
         depth=8,
         type='documentation',
         name='',
         text='Actual user paying for the invoice. It should match the user on '
              'the invoice.')

Fragment(uuid='94471f72-a6cc-4727-8091-936b691265ef',
         path='/lib/dblayer/test/model.py',
         lineno=148,
         depth=8,
         type='documentation',
         name='',
         text='Effective date of payment.')

Fragment(uuid='7d08d61e-288c-4f51-a768-6b82911005dd',
         path='/lib/dblayer/test/model.py',
         lineno=149,
         depth=8,
         type='documentation',
         name='',
         text='Amount payed. It is accounted against the gross amount of the '
              'invoice.')

Fragment(uuid='65eae7d9-42dd-4e86-9bc9-5c27f6adfe93',
         path='/lib/dblayer/test/model.py',
         lineno=150,
         depth=8,
         type='documentation',
         name='',
         text='Commission percentage')

Fragment(uuid='4037c1fc-35db-4a54-ad35-59a9a3bf8d84',
         path='/lib/dblayer/test/model.py',
         lineno=154,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class UserContact(query.Query):\n'
              '    """ Contact details of the users\n'
              '    """\n'
              '    # Source tables\n'
              '    user = User()\n'
              '\n'
              '    # Result fields\n'
              '    id = query.Result(user.id)\n'
              '    first_name = query.Result(user.first_name)\n'
              '    last_name = query.Result(user.last_name)\n'
              '    email = query.Result(user.email)\n'
              '    phone = query.Result(user.phone)\n'
              '\n'
              '    # Order by\n'
              "    _order_by = ('first_name', 'last_name')\n")

Fragment(uuid='b6839cfe-85ac-4cd7-9872-62f9604910c0',
         path='/lib/dblayer/test/model.py',
         lineno=155,
         depth=1,
         type='class',
         name='UserContact',
         text='class UserContact(query.Query):\n'
              '    """ Contact details of the users\n'
              '    """\n'
              '    # Source tables\n'
              '    user = User()\n'
              '\n'
              '    # Result fields\n'
              '    id = query.Result(user.id)\n'
              '    first_name = query.Result(user.first_name)\n'
              '    last_name = query.Result(user.last_name)\n'
              '    email = query.Result(user.email)\n'
              '    phone = query.Result(user.phone)\n'
              '\n'
              '    # Order by\n'
              "    _order_by = ('first_name', 'last_name')")

Fragment(uuid='aa097c35-7f2a-4e32-bf28-c7986d04d830',
         path='/lib/dblayer/test/model.py',
         lineno=156,
         depth=4,
         type='documentation',
         name='',
         text=' Contact details of the users\n    ')

Fragment(uuid='ed53f353-8904-473f-b042-865beca8e0a6',
         path='/lib/dblayer/test/model.py',
         lineno=170,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class ProductSale(query.Query):\n'
              '    """ Sales by product based on the invoices\n'
              '    """\n'
              '    # Source tables\n'
              '    sale = InvoiceItem()\n'
              '    invoice = Invoice()\n'
              '    product = Product()\n'
              '\n'
              '    # Table joins\n'
              '    invoice.join(sale.invoice)\n'
              '    product.join(sale.product)\n'
              '\n'
              '    # Result fields\n'
              '    product_id = query.Result(product.id)\n'
              '    product_model = query.Result(product.model)\n'
              '  ')

Fragment(uuid='9c71a434-fb64-46b3-846b-578dda69306b',
         path='/lib/dblayer/test/model.py',
         lineno=172,
         depth=1,
         type='class',
         name='ProductSale',
         text='class ProductSale(query.Query):\n'
              '    """ Sales by product based on the invoices\n'
              '    """\n'
              '    # Source tables\n'
              '    sale = InvoiceItem()\n'
              '    invoice = Invoice()\n'
              '    product = Product()\n'
              '\n'
              '    # Table joins\n'
              '    invoice.join(sale.invoice)\n'
              '    product.join(sale.product)\n'
              '\n'
              '    # Result fields\n'
              '    product_id = query.Result(product.id)\n'
              '    product_model = query.Result(product.model)\n'
              '    product_name = query.Result(product.name)\n'
              '    quantity = query.Result(aggregate.Sum(sale.quantity), '
              'InvoiceItem.quantity)\n'
              '    net_amount = query.Result(aggregate.Sum(sale.net_amount), '
              'InvoiceItem.net_amount)\n'
              '  ')

Fragment(uuid='13a2629b-87b4-462d-b3eb-8cd8b35f6bd9',
         path='/lib/dblayer/test/model.py',
         lineno=173,
         depth=4,
         type='documentation',
         name='',
         text=' Sales by product based on the invoices\n    ')

Fragment(uuid='97f9bad9-9f10-401f-8cb2-49c814422e36',
         path='/lib/dblayer/test/model.py',
         lineno=187,
         depth=0,
         type='module',
         name='',
         text='  product_name = query.Result(product.name)\n'
              '    quantity = query.Result(aggregate.Sum(sale.quantity), '
              'InvoiceItem.quantity)\n'
              '    net_amount = query.Result(aggregate.Sum(sale.net_amount), '
              'InvoiceItem.net_amount)\n'
              '    vat_amount = query.Result(aggregate.Sum(sale.vat_amount), '
              'InvoiceItem.vat_amount)\n'
              '    gross_amount = '
              'query.Result(aggregate.Sum(sale.gross_amount), InvoiceItem.gro')

Fragment(uuid='c9fc37c6-1d4d-4605-8870-2a9e6c8fe969',
         path='/lib/dblayer/test/model.py',
         lineno=190,
         depth=1,
         type='class',
         name='ProductSale',
         text='  vat_amount = query.Result(aggregate.Sum(sale.vat_amount), '
              'InvoiceItem.vat_amount)\n'
              '    gross_amount = '
              'query.Result(aggregate.Sum(sale.gross_amount), '
              'InvoiceItem.gross_amount)\n'
              '\n'
              '    # Conditions\n'
              '    model = query.Condition(product.model)\n'
              '    active = query.Condition(product.active)\n'
              '    seller = query.Condition(invoice.seller)\n'
              '    customer = query.Condition(invoice.customer)\n'
              '    issued_date = query.Condition(invoice.issued_date)\n'
              '\n'
              '    # Group by\n'
              '    _group_by = (product.id, product.model, product.name)\n'
              '\n'
              '    # Order by\n'
              "    _order_by = ('product_name', '+product_model', "
              "'-net_amount')")

Fragment(uuid='8210fcb5-0518-4380-993c-9bc154bc8371',
         path='/lib/dblayer/test/model.py',
         lineno=191,
         depth=0,
         type='module',
         name='',
         text='ss_amount)\n'
              '\n'
              '    # Conditions\n'
              '    model = query.Condition(product.model)\n'
              '    active = query.Condition(product.active)\n'
              '    seller = query.Condition(invoice.seller)\n'
              '    customer = query.Condition(invoice.customer)\n'
              '    issued_date = query.Condition(invoice.issued_date)\n'
              '\n'
              '    # Group by\n'
              '    _group_by = (product.id, product.model, product.name)\n'
              '\n'
              '    # Order by\n'
              "    _order_by = ('pr")

Fragment(uuid='cc8d6ac7-a1b1-46ab-beb1-f3bfc3c166dd',
         path='/lib/dblayer/test/model.py',
         lineno=204,
         depth=0,
         type='module',
         name='',
         text="oduct_name', '+product_model', '-net_amount')\n"
              '\n'
              '\n'
              '##class InvoicePaymentView(view.View):\n'
              '##    """ Total payments by invoice\n'
              '##    """\n'
              '##    \n'
              '##class ProductIncomeView(view.View):\n'
              '##    """ Actual income by product based both on the invoices '
              'and the payments\n'
              '##    """\n'
              '##\n'
              '##class UserPaymentView(view.View):\n'
              '##    """ Total income and debt per user\n'
              '##    """\n'
              '\n'
              '### Database model\n')

Fragment(uuid='95930364-d162-4ca9-8437-10ef96b0f0f2',
         path='/lib/dblayer/test/model.py',
         lineno=207,
         depth=0,
         type='documentation',
         name='',
         text='##class InvoicePaymentView(view.View):')

Fragment(uuid='95721d46-d364-414a-a02f-eb4a73faabf0',
         path='/lib/dblayer/test/model.py',
         lineno=208,
         depth=0,
         type='documentation',
         name='',
         text='##    """ Total payments by invoice')

Fragment(uuid='3866675d-a0a0-45b7-89ed-42a0e766d6c7',
         path='/lib/dblayer/test/model.py',
         lineno=211,
         depth=0,
         type='documentation',
         name='',
         text='##class ProductIncomeView(view.View):')

Fragment(uuid='86a0ca02-1915-4854-a3d2-107036921f09',
         path='/lib/dblayer/test/model.py',
         lineno=212,
         depth=0,
         type='documentation',
         name='',
         text='##    """ Actual income by product based both on the invoices '
              'and the payments')

Fragment(uuid='6b00dd92-27b8-4266-ae6e-f88f63596d09',
         path='/lib/dblayer/test/model.py',
         lineno=215,
         depth=0,
         type='documentation',
         name='',
         text='##class UserPaymentView(view.View):')

Fragment(uuid='d003fd35-c76c-46b2-8588-4d0820f409ea',
         path='/lib/dblayer/test/model.py',
         lineno=216,
         depth=0,
         type='documentation',
         name='',
         text='##    """ Total income and debt per user')

Fragment(uuid='2211b369-31c9-45f4-bdd6-be15ba00ab15',
         path='/lib/dblayer/test/model.py',
         lineno=220,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class TestDatabaseModel(database.Database):\n'
              '    """ Test database model\n'
              '    """\n'
              '\n'
              '    # Tables\n'
              '    user = User()\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    user = User()\n'
              '    group = Group()\n'
              '    group_user = GroupUser()\n'
              '    role = Role()\n'
              '    group_role = GroupRole()\n'
              '    activation = Activation()\n'
              '    product = Product()\n'
              '    invoice = Invoice()\n'
              '    invoice_item = InvoiceItem()\n'
              '    payment = Payment()\n'
              '\n'
              '    # Q')

Fragment(uuid='f2506570-8b10-48a0-bd3f-bd3f03532c7f',
         path='/lib/dblayer/test/model.py',
         lineno=221,
         depth=1,
         type='class',
         name='TestDatabaseModel',
         text='class TestDatabaseModel(database.Database):\n'
              '    """ Test database model\n'
              '    """\n'
              '\n'
              '    # Tables\n'
              '    user = User()\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    user = User()\n'
              '    group = Group()\n'
              '    group_user = GroupUser()\n'
              '    role = Role()\n'
              '    group_role = GroupRole()\n'
              '    activation = Activation()\n'
              '    product = Product()\n'
              '    invoice = Invoice()\n'
              '    invoice_item = InvoiceItem()\n'
              '    payment')

Fragment(uuid='187102ae-d83c-4491-90d2-31de8466a979',
         path='/lib/dblayer/test/model.py',
         lineno=222,
         depth=4,
         type='documentation',
         name='',
         text=' Test database model\n    ')

Fragment(uuid='6f897f7c-a9f0-4a62-aeb0-9913626d7e26',
         path='/lib/dblayer/test/model.py',
         lineno=227,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Create twice to test single initialization in __new__')

Fragment(uuid='0fe29685-1dc6-456a-a9dc-cda36ae91ef0',
         path='/lib/dblayer/test/model.py',
         lineno=237,
         depth=1,
         type='class',
         name='TestDatabaseModel',
         text=' = Payment()\n'
              '\n'
              '    # Queries\n'
              '    user_contact = UserContact()\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    user_contact = UserContact()\n'
              '    product_sale = ProductSale()\n'
              '\n'
              '    # Stored procedures\n'
              '    fn_set_last_modified = procedure.Procedure(\n'
              "        language='plpgsql',\n"
              '        argument_list=(),\n'
              "        result='trigger AS $$',\n"
              "        body='''\\\n"
              'new.last_modified := NOW();\n'
              'RETURN new;\n'
              "''')")

Fragment(uuid='8f8c6282-f959-432b-ba85-ac69376ce33c',
         path='/lib/dblayer/test/model.py',
         lineno=239,
         depth=0,
         type='module',
         name='',
         text='ueries\n'
              '    user_contact = UserContact()\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    user_contact = UserContact()\n'
              '    product_sale = ProductSale()\n'
              '\n'
              '    # Stored procedures\n'
              '    fn_set_last_modified = procedure.Procedure(\n'
              "        language='plpgsql',\n"
              '        argument_list=(),\n'
              "        result='trigger AS $$',\n"
              "        body='''\\\n"
              'new.last_modified := NOW();\n'
              'RETURN new;\n'
              "''')\n"
              '\n'
              '\n'
              '### Generate database abstraction layer\n')

Fragment(uuid='59ef2a54-4726-4784-b3a3-34b1bc5c2ace',
         path='/lib/dblayer/test/model.py',
         lineno=241,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Create twice to test single initialization in __new__')

Fragment(uuid='552a4bb9-abb8-40cf-bf80-22b341d216ba',
         path='/lib/dblayer/test/model.py',
         lineno=250,
         depth=8,
         type='documentation',
         name='',
         text='\\\nnew.last_modified := NOW();\nRETURN new;\n')

Fragment(uuid='9f03ea77-40a7-46df-a676-8d3025e8271b',
         path='/lib/dblayer/test/model.py',
         lineno=256,
         depth=0,
         type='documentation',
         name='',
         text='### Generate database abstraction layer')

Fragment(uuid='0e2d5b92-3f2a-452f-9a07-66c564793a24',
         path='/lib/dblayer/test/model.py',
         lineno=257,
         depth=0,
         type='module',
         name='',
         text='\n'
              "def generate(module_path='abstraction.py',\n"
              '             database_model_class=TestDatabaseModel,\n'
              "             abstraction_class_name='TestDatabase'):\n"
              '    test_database_model = '
              'database_model_class(abstraction_class_name)\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    test_database_model = '
              'database_model_class(abstraction_class_name)\n'
              '    source = '
              'test_database_model.generate(dblayer.backend.postgresql)\n'
              "    with open(module_path, 'wt') as module_file:\n"
              "        module_file.write(source.replace('\\r\\n', '\\n'))\n")

Fragment(uuid='46512540-9489-4774-b257-83e385c564be',
         path='/lib/dblayer/test/model.py',
         lineno=258,
         depth=1,
         type='function',
         name='generate',
         text="def generate(module_path='abstraction.py',\n"
              '             database_model_class=TestDatabaseModel,\n'
              "             abstraction_class_name='TestDatabase'):\n"
              '    test_database_model = '
              'database_model_class(abstraction_class_name)\n'
              '    # NOTE: Create twice to test single initialization in '
              '__new__\n'
              '    test_database_model = '
              'database_model_class(abstraction_class_name)\n'
              '    source = '
              'test_database_model.generate(dblayer.backend.postgresql)\n'
              "    with open(module_path, 'wt') as module_file:\n"
              "        module_file.write(source.replace('\\r\\n', '\\n'))")

Fragment(uuid='ca9437c7-954d-4b99-a4aa-2090fa54c59b',
         path='/lib/dblayer/test/model.py',
         lineno=262,
         depth=2,
         type='documentation',
         name='',
         text='# NOTE: Create twice to test single initialization in __new__')

Fragment(uuid='43144d84-2847-4466-872f-83962a4294c2',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# -*- coding: utf8 -*-\n'
              '\n'
              'import datetime\n'
              'import os\n'
              'import re\n'
              'import unittest\n'
              '\n'
              'import dblayer\n'
              '\n'
              'import dblayer.model.database\n'
              'import dblayer.model.table\n'
              'from dblayer.test import model\n'
              '\n'
              'MODEL_DIR = os.path.dirname(model.__file__)\n'
              '\n'
              'from dblayer import constants\n'
              'from dblayer.backend.base import clauses\n'
              'from dblayer.graph import gml\n'
              '\n'
              'from dblayer.test import constants as test_constants\n')

Fragment(uuid='18b71789-0936-43b0-9d05-a34d13389e7e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# -*- coding: utf8 -*-')

Fragment(uuid='c6441e38-269e-4620-b708-e59dbd3e5aa6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/test/test_abstraction.py\n'
              '  Classes: TestAbstraction TestGraph\n'
              '  Methods: do_failed_transaction load_data modify_data setUp '
              'tearDown testGML test_class_formatting test_clauses_class '
              'test_database_session test_duplicate_insert '
              'test_full_text_search test_insert_select test_inspection '
              'test_order_by test_product_sale_query test_random_id_selection '
              'test_repr_str test_triggers test_truncate test_tuple_dict '
              'test_update_delete test_user_contact_query verify_data\n'
              '  Variables and usages: Clauses DATABASE_ID_RANGE Database '
              'DatabaseInspector Error GMLExporter InspectedDatabase '
              'IntegrityError LEAVE_CLEAN_DATABASE MODEL_DIR Product '
              'ProductRecord ProductSale RX_TIMESTAMP TEST_DSN Table TestCase '
              'TestDatabase TestDatabaseModel User ValueError '
              '_column_name_list _table_list _table_name abstraction '
              'abstraction_class_name add_group add_group_list add_group_user '
              'add_group_user_list add_invoice add_invoice_item_list '
              'add_product add_product_list add_user add_user_list admin anna '
              'anna2 anna_groups annacska assertAlmostEqual assertEqual '
              'assertFalse assertIsInstance assertNotEqual assertRaises '
              'assertTrue backend bar_sales base clauses clauses_cache close '
              'code commit compile connect connected constants consulting '
              'create_structure created cursor customer database '
              'database_class database_model_class date datetime days dblayer '
              'delete_group delete_group_list delete_group_user '
              'delete_group_user_list dirname disable_transactions '
              'drop_structure due_date email empty_clauses empty_hash '
              'enable_transactions eval exec execute export exporter '
              'field_dict field_list field_tuple find_group '
              'find_group_user_list find_product find_result_list find_user '
              'find_user_list first_day first_name fn_find fn_get fn_update '
              'foo_sales full_clauses full_hash full_text_search generate '
              'generate_id get_group_count get_group_iter get_group_user_count '
              'get_group_user_list get_product get_product_iter '
              'get_result_list get_user_count get_user_list getattr graph '
              'gross_amount group group_by group_list group_membership '
              'group_user group_user_count group_user_id_list group_user_list '
              'group_x hasattr hash having ignore_errors inspect '
              'inspected_abstraction inspected_database inspected_model '
              'inspected_model_file inspected_model_path inspector invoice '
              'is_primary_key_conflict issued_date item1 item2 join last_day '
              'last_modified last_name limit model model_instance module_file '
              'module_path name namespace net_amount new_group new_group_user '
              'new_invoice new_invoice_item new_product new_source new_user '
              'obj_list offset old_source open order_by original_range path '
              'phone phone_in phone_ne phone_not_in postgresql '
              'pretty_format_class product product_name product_sale_list '
              'product_sale_list2 provider quantity query_product_sale_count '
              'query_product_sale_iter query_product_sale_list '
              'query_user_contact_count range read reason record1 record2 repr '
              'reverse rollback seller serial session slug sort sorted source '
              'startswith subn table table_list test test_constants timedelta '
              'transaction truncate_all_tables tuple unittest update_product '
              'update_user update_user_list user user_list value vat_amount '
              'vat_percent viktor viktor_groups where write\n')

Fragment(uuid='55c015f2-ad5d-4bc4-8f3b-d2b6cda96ab3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='db804da1-fe4c-4987-8f5b-66524491ac65',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='b897a509-66d9-4a3a-b2c0-b680f94011e5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='69d0967c-9fa5-46ab-8124-c00da8e84314',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='ec9c4a4a-73d7-4147-aed7-3aa5020a2724',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='41c1dfa3-16a1-4ba0-85b0-680f0319e91b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=10,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='c17846bb-fa79-4262-aec1-a3ed949fc429',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=11,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='bca74523-88c9-481c-b66d-389c5023f4d2',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=12,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='70c4711d-0665-44b7-a7d6-edbe613b8622',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=12,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='5a4f6918-b7ed-447e-b9c7-53d5baf18eb9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=16,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='fa6f2559-75a6-4783-8628-d51568dc8cde',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=16,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='986c1254-95aa-4f41-ab40-9ba32e60e722',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=17,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='22f7589e-35cb-4c15-860f-c9aa326cb9f6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=17,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='342a9cc0-6fb9-4e3d-bdab-56117b967bbd',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=18,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='e7d71d25-d0a1-4d50-98a1-83bfc170a39f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=18,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='28857574-8882-4b22-9787-e3f9f8a1b7a6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=20,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='600de9fa-2171-4cc1-bfe9-2989c6c3d689',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=20,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='70426196-1796-4e3b-9041-53246a1120cd',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=21,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class TestGraph(unittest.TestCase):\n'
              '\n'
              '    def setUp(self) -> None:\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')\n"
              '\n'
              '    def testGML(self):\n'
              '        model_instance = '
              "model.TestDatabaseModel('TestDatabase')\n"
              '        exporter = gml.GMLExporter(model_instance)\n'
              "        exporter.export('model.gml')\n")

Fragment(uuid='353a8b05-66de-4ecf-8fdc-ffa940441160',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=23,
         depth=1,
         type='class',
         name='TestGraph',
         text='class TestGraph(unittest.TestCase):\n'
              '\n'
              '    def setUp(self) -> None:\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')\n"
              '\n'
              '    def testGML(self):\n'
              '        model_instance = '
              "model.TestDatabaseModel('TestDatabase')\n"
              '        exporter = gml.GMLExporter(model_instance)\n'
              "        exporter.export('model.gml')")

Fragment(uuid='3337f59a-9caa-483f-9e4a-83aa7605f22e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=25,
         depth=3,
         type='function',
         name='setUp',
         text='def setUp(self) -> None:\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')")

Fragment(uuid='235e321c-f17d-4b11-a6c5-4e59838338a7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=29,
         depth=3,
         type='function',
         name='testGML',
         text='def testGML(self):\n'
              '        model_instance = '
              "model.TestDatabaseModel('TestDatabase')\n"
              '        exporter = gml.GMLExporter(model_instance)\n'
              "        exporter.export('model.gml')")

Fragment(uuid='ff2dc2e6-e298-4729-b110-cb07b29b3c5b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=33,
         depth=0,
         type='module',
         name='',
         text='\n\nclass TestAbstraction(unittest.TestCase):\n')

Fragment(uuid='c1f888ee-4f7d-491b-9875-6c8e97fc5291',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=35,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='class TestAbstraction(unittest.TestCase):\n')

Fragment(uuid='7ecb402a-d4c7-44f9-814d-0dff48cfd396',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=36,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def setUp(self):\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')\n"
              '        self.db = self.abstraction.TestDatabase()\n'
              '        self.db.connect(test_constants.TEST_DSN)\n'
              '        self.db.enable_transactions()\n'
              '        with self.db.transaction():\n'
              '            self.db.drop_structure(ignore_errors=True)\n'
              '        with self.db.transaction():\n'
              '            self.db.create_structure()\n')

Fragment(uuid='fcd73d13-ffe0-4c03-a83b-6d2a21127d70',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=36,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def setUp(self):\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')\n"
              '        self.db = self.abstraction.TestDatabase()\n'
              '        self.db.connect(test_constants.TEST_DSN)\n'
              '        self.db.enable_transactions()\n'
              '        with self.db.transaction():\n'
              '            self.db.drop_structure(ignore_errors=True)\n'
              '        with self.db.transaction():\n'
              '            self.db.create_structure()\n')

Fragment(uuid='f43eb509-0376-40ec-b9e9-62f61aef0fea',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=37,
         depth=3,
         type='function',
         name='setUp',
         text='def setUp(self):\n'
              '        model.generate()\n'
              "        self.abstraction = __import__('abstraction')\n"
              '        self.db = self.abstraction.TestDatabase()\n'
              '        self.db.connect(test_constants.TEST_DSN)\n'
              '        self.db.enable_transactions()\n'
              '        with self.db.transaction():\n'
              '            self.db.drop_structure(ignore_errors=True)\n'
              '        with self.db.transaction():\n'
              '            self.db.create_structure()')

Fragment(uuid='434d0c1d-9b57-41de-be58-706cc9c17213',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def tearDown(self):\n'
              '        if test_constants.LEAVE_CLEAN_DATABASE:\n'
              '            self.db.rollback()\n'
              '            with self.db.transaction():\n'
              '                self.db.drop_structure(ignore_errors=True)\n'
              '        self.db.disable_transactions()\n'
              '        self.db.close()\n'
              '\n'
              '        # It must not fail\n'
              '        self.db.close()\n')

Fragment(uuid='7bc95037-e2a4-4033-9f41-fdfada59bc97',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=47,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def tearDown(self):\n'
              '        if test_constants.LEAVE_CLEAN_DATABASE:\n'
              '            self.db.rollback()\n'
              '            with self.db.transaction():\n'
              '                self.db.drop_structure(ignore_errors=True)\n'
              '        self.db.disable_transactions()\n'
              '        self.db.close()\n'
              '\n'
              '        # It must not fail\n'
              '        self.db.close()\n')

Fragment(uuid='d520b5ae-596e-474c-94bc-9744955ca238',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=48,
         depth=3,
         type='function',
         name='tearDown',
         text='def tearDown(self):\n'
              '        if test_constants.LEAVE_CLEAN_DATABASE:\n'
              '            self.db.rollback()\n'
              '            with self.db.transaction():\n'
              '                self.db.drop_structure(ignore_errors=True)\n'
              '        self.db.disable_transactions()\n'
              '        self.db.close()\n'
              '\n'
              '        # It must not fail\n'
              '        self.db.close()')

Fragment(uuid='cb7940bb-f934-4053-8f84-8e9cc72cc24b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=58,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_database_session(self):\n'
              '        db2 = self.abstraction.TestDatabase()\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='d40d75a9-7d10-49e9-8254-22aade7dcd53',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=58,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_database_session(self):\n'
              '        db2 = self.abstraction.TestDatabase()\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='6a287f61-e6de-4557-b239-e1024fce0093',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=59,
         depth=3,
         type='function',
         name='test_database_session',
         text='def test_database_session(self):\n'
              '        db2 = self.abstraction.TestDatabase()\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='5a429e49-e4c9-4309-89ec-c6731fd9d686',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=62,
         depth=0,
         type='module',
         name='',
         text='        with db2.session(test_constants.TEST_DSN):\n'
              '            self.assertTrue(db2.connected)\n')

Fragment(uuid='a0be9a99-c89b-4909-9a89-49de29892f9a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=62,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        with db2.session(test_constants.TEST_DSN):\n'
              '            self.assertTrue(db2.connected)\n')

Fragment(uuid='95fd8072-31c7-41c2-b6ee-c98103377b67',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=62,
         depth=3,
         type='function',
         name='test_database_session',
         text='        with db2.session(test_constants.TEST_DSN):\n'
              '            self.assertTrue(db2.connected)\n')

Fragment(uuid='7f816ff7-7ecb-436f-8dfd-e67f42537998',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=64,
         depth=0,
         type='module',
         name='',
         text='            with db2.transaction():\n'
              "                hdd = db2.new_product(name='hdd')\n"
              '                db2.add_product(hdd)\n'
              '            self.assertTrue(db2.connected)\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='189fa8f6-882f-424f-ba39-944f76208b4b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=64,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='            with db2.transaction():\n'
              "                hdd = db2.new_product(name='hdd')\n"
              '                db2.add_product(hdd)\n'
              '            self.assertTrue(db2.connected)\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='c0426a65-7f70-4d29-bec9-d42432b472c9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=64,
         depth=3,
         type='function',
         name='test_database_session',
         text='            with db2.transaction():\n'
              "                hdd = db2.new_product(name='hdd')\n"
              '                db2.add_product(hdd)\n'
              '            self.assertTrue(db2.connected)\n'
              '        self.assertTrue(not db2.connected)\n')

Fragment(uuid='ac20f0fa-e42b-414c-a9e5-c231dfe4c62f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with self.db.transaction():\n'
              '            '
              "self.assertEqual(self.db.find_product(name='hdd').id, hdd.id)\n"
              '\n'
              '        # Automatic closing of connection in __del__ in '
              'no-error condition\n'
              '        db3 = self.abstraction.TestDatabase()\n'
              '        db3.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db3.connected)\n'
              '        del db3\n'
              '\n'
              '        # Automatic closing of connection in __del__ after a '
              'database error\n'
              '        db4 = self.abstraction.TestDatabase()\n'
              '        db4.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db4.connected)\n')

Fragment(uuid='525c6d6c-8cd1-423e-88f3-66cec1dcdc88',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=69,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '        with self.db.transaction():\n'
              '            '
              "self.assertEqual(self.db.find_product(name='hdd').id, hdd.id)\n"
              '\n'
              '        # Automatic closing of connection in __del__ in '
              'no-error condition\n'
              '        db3 = self.abstraction.TestDatabase()\n'
              '        db3.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db3.connected)\n'
              '        del db3\n'
              '\n'
              '        # Automatic closing of connection in __del__ after a '
              'database error\n'
              '        db4 = self.abstraction.TestDatabase()\n'
              '        db4.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db4.connected)\n')

Fragment(uuid='a6cb1121-2528-48f5-ad7e-d064cbe30e99',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=69,
         depth=3,
         type='function',
         name='test_database_session',
         text='\n'
              '        with self.db.transaction():\n'
              '            '
              "self.assertEqual(self.db.find_product(name='hdd').id, hdd.id)\n"
              '\n'
              '        # Automatic closing of connection in __del__ in '
              'no-error condition\n'
              '        db3 = self.abstraction.TestDatabase()\n'
              '        db3.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db3.connected)\n'
              '        del db3\n'
              '\n'
              '        # Automatic closing of connection in __del__ after a '
              'database error\n'
              '        db4 = self.abstraction.TestDatabase()\n'
              '        db4.connect(test_constants.TEST_DSN)\n'
              '        self.assertTrue(db4.connected)\n')

Fragment(uuid='b95e2648-c260-42de-831c-2282d2531065',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=73,
         depth=4,
         type='documentation',
         name='',
         text='# Automatic closing of connection in __del__ in no-error '
              'condition')

Fragment(uuid='3c60f9f2-b04d-4167-9f74-1586dcafe385',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=79,
         depth=4,
         type='documentation',
         name='',
         text='# Automatic closing of connection in __del__ after a database '
              'error')

Fragment(uuid='831d2860-2e12-4ac6-87e9-75aaf506a7ae',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='        with db4.cursor() as cursor:\n'
              '            self.assertRaises(db4.Error, db4.execute, cursor, '
              "'BAD SQL')\n"
              '        del db4\n')

Fragment(uuid='527c19ee-3bef-44e6-8f8e-b297b0d27517',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=83,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        with db4.cursor() as cursor:\n'
              '            self.assertRaises(db4.Error, db4.execute, cursor, '
              "'BAD SQL')\n"
              '        del db4\n')

Fragment(uuid='aaf8a210-7247-4a86-b997-834a525fbf40',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=83,
         depth=3,
         type='function',
         name='test_database_session',
         text='        with db4.cursor() as cursor:\n'
              '            self.assertRaises(db4.Error, db4.execute, cursor, '
              "'BAD SQL')\n"
              '        del db4')

Fragment(uuid='b1d3c42c-a2db-4722-9ce6-98b8a035bccb',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_truncate(self):\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.assertNotEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n')

Fragment(uuid='bcb497de-a5f9-46ec-b368-f9a03c3288db',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=86,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_truncate(self):\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.assertNotEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n')

Fragment(uuid='9f1304d3-8106-4a36-a2ef-8d33d1576297',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=87,
         depth=3,
         type='function',
         name='test_truncate',
         text='def test_truncate(self):\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.assertNotEqual(self.db.get_user_count(), 0)\n'
              '        with self.db.transaction():\n'
              '            self.db.truncate_all_tables()\n'
              '        self.assertEqual(self.db.get_user_count(), 0)')

Fragment(uuid='c99a246d-f80b-424f-a21d-be653f901443',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=98,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_insert_select(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        with self.db.transaction():\n'
              '            self.verify_data()\n'
              '        self.db.commit()\n')

Fragment(uuid='ed310434-a3be-4f57-b8ca-65681ff04464',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=98,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_insert_select(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        with self.db.transaction():\n'
              '            self.verify_data()\n'
              '        self.db.commit()\n')

Fragment(uuid='f5e7e4f8-fefa-46e9-bc8e-6988bdb684f5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=99,
         depth=3,
         type='function',
         name='test_insert_select',
         text='def test_insert_select(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        with self.db.transaction():\n'
              '            self.verify_data()\n'
              '        self.db.commit()')

Fragment(uuid='e7eb6345-8c4e-4832-9f2d-00ce587e7ca3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=105,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_duplicate_insert(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        user_list = self.db.get_user_list()\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user, user_list[0], generate_id=False)\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user_list, user_list, generate_id=False)\n')

Fragment(uuid='18114f48-58d9-4042-92a8-7dddc2ce4f45',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=105,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_duplicate_insert(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        user_list = self.db.get_user_list()\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user, user_list[0], generate_id=False)\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user_list, user_list, generate_id=False)\n')

Fragment(uuid='3fa1eb41-95b2-4171-a130-65abb688a5bf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=106,
         depth=3,
         type='function',
         name='test_duplicate_insert',
         text='def test_duplicate_insert(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        user_list = self.db.get_user_list()\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user, user_list[0], generate_id=False)\n'
              '        with self.db.transaction():\n'
              '            self.assertRaises(self.db.IntegrityError, '
              'self.db.add_user_list, user_list, generate_id=False)')

Fragment(uuid='b1dc3d05-d94a-4595-b9f6-4ec7bb30987a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=114,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_update_delete(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.modify_data()\n'
              '        self.do_failed_transaction()\n')

Fragment(uuid='0f3fa838-3146-44ff-aad9-f201b1ac50b0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=114,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_update_delete(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.modify_data()\n'
              '        self.do_failed_transaction()\n')

Fragment(uuid='67b054f1-299e-414e-a2c3-6d65f2249317',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=115,
         depth=3,
         type='function',
         name='test_update_delete',
         text='def test_update_delete(self):\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '        self.modify_data()\n'
              '        self.do_failed_transaction()')

Fragment(uuid='581f1a15-b1ed-4d62-9984-303fd6d728ff',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=120,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def load_data(self, db=None):\n'
              '        """ Loads test data\n'
              '        """\n')

Fragment(uuid='3750e97d-7299-4a5f-9470-d66a2faf8472',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=120,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def load_data(self, db=None):\n'
              '        """ Loads test data\n'
              '        """\n')

Fragment(uuid='1b541dde-d4e4-41a4-9b9e-db7d9e0f6c51',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=121,
         depth=3,
         type='function',
         name='load_data',
         text='def load_data(self, db=None):\n'
              '        """ Loads test data\n'
              '        """\n')

Fragment(uuid='d4b6b388-0ebd-41fa-8c46-30bac5560a8c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=122,
         depth=6,
         type='documentation',
         name='',
         text=' Loads test data\n        ')

Fragment(uuid='a4aa414a-ef3f-4291-ba8d-024f30512097',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=124,
         depth=0,
         type='module',
         name='',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='836b4a32-7219-4ae4-85f1-781630e7042c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=124,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='62be4574-9022-4191-81b2-405b64ed7623',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=124,
         depth=3,
         type='function',
         name='load_data',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='4c0295a2-f0ca-4ec5-bd1c-d7487bc77578',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=126,
         depth=0,
         type='module',
         name='',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              '        # Users\n'
              '        viktor = db.new_user(\n'
              "            email='viktor@ferenczi.eu',\n"
              "            first_name='Viktor',\n"
              "            last_name='Ferenczi',\n"
              "            phone='1234567')\n"
              '        anna = db.new_user(\n'
              "            email='anna@cx.hu',\n"
              '            first_na')

Fragment(uuid='22dfd8be-7c9a-45c1-97b9-db236a93f345',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=126,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              '        # Users\n'
              '        viktor = db.new_user(\n'
              "            email='viktor@ferenczi.eu',\n"
              "            first_name='Viktor',\n"
              "            last_name='Ferenczi',\n"
              "            phone='1234567')\n"
              '        anna = db.new_user(\n'
              "            email='anna@cx.hu',\n"
              '            first_na')

Fragment(uuid='9ae5980c-35f6-4307-973b-821e79b3f715',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=126,
         depth=3,
         type='function',
         name='load_data',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              '        # Users\n'
              '        viktor = db.new_user(\n'
              "            email='viktor@ferenczi.eu',\n"
              "            first_name='Viktor',\n"
              "            last_name='Ferenczi',\n"
              "            phone='1234567')\n"
              '        anna = db.new_user(\n'
              "            email='anna@cx.hu',\n"
              '            first_na')

Fragment(uuid='3a43dfa1-64ab-411f-98e0-9d9a22e92fee',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=137,
         depth=0,
         type='module',
         name='',
         text="me='Anna',\n"
              "            last_name='Szili',\n"
              "            phone='2345678')\n"
              '        isi = db.new_user(\n'
              "            email='isi@cx.hu',\n"
              "            first_name='István',\n"
              "            last_name='Horváth')\n"
              '        annacska = db.new_user(\n'
              "            email='anna@ferenczi.eu',\n"
              "            first_name='Anna',\n"
              "            last_name='Ferenczi',\n"
              '            ')

Fragment(uuid='05576e5e-5eeb-4d7e-8741-af4d1966eae3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=137,
         depth=1,
         type='class',
         name='TestAbstraction',
         text="me='Anna',\n"
              "            last_name='Szili',\n"
              "            phone='2345678')\n"
              '        isi = db.new_user(\n'
              "            email='isi@cx.hu',\n"
              "            first_name='István',\n"
              "            last_name='Horváth')\n"
              '        annacska = db.new_user(\n'
              "            email='anna@ferenczi.eu',\n"
              "            first_name='Anna',\n"
              "            last_name='Ferenczi',\n"
              '            ')

Fragment(uuid='7d35734b-cf80-4657-9051-ba37797632a9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=137,
         depth=3,
         type='function',
         name='load_data',
         text="me='Anna',\n"
              "            last_name='Szili',\n"
              "            phone='2345678')\n"
              '        isi = db.new_user(\n'
              "            email='isi@cx.hu',\n"
              "            first_name='István',\n"
              "            last_name='Horváth')\n"
              '        annacska = db.new_user(\n'
              "            email='anna@ferenczi.eu',\n"
              "            first_name='Anna',\n"
              "            last_name='Ferenczi',\n"
              '            ')

Fragment(uuid='fcf2d9cc-4b4f-4567-aad9-1d2bd45fe879',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=148,
         depth=0,
         type='module',
         name='',
         text="phone='4567890')\n"
              '        self.assertTrue(viktor.id is None)\n'
              '        db.add_user(viktor)\n'
              '        self.assertFalse(viktor.id is None)\n'
              '        db.add_user_list([anna, isi])\n'
              '        self.assertFalse(anna.id is None)\n'
              '        self.assertFalse(isi.id is None)\n'
              '        db.add_user_list([annacska])\n'
              '        self.assertFalse(annacska.id is None)\n'
              '      ')

Fragment(uuid='1d2c6205-81b6-4ea0-a081-5e270e918b11',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=148,
         depth=1,
         type='class',
         name='TestAbstraction',
         text="phone='4567890')\n"
              '        self.assertTrue(viktor.id is None)\n'
              '        db.add_user(viktor)\n'
              '        self.assertFalse(viktor.id is None)\n'
              '        db.add_user_list([anna, isi])\n'
              '        self.assertFalse(anna.id is None)\n'
              '        self.assertFalse(isi.id is None)\n'
              '        db.add_user_list([annacska])\n'
              '        self.assertFalse(annacska.id is None)\n'
              '      ')

Fragment(uuid='2310b7c9-791e-4432-a743-ffcc22283b70',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=148,
         depth=3,
         type='function',
         name='load_data',
         text="phone='4567890')\n"
              '        self.assertTrue(viktor.id is None)\n'
              '        db.add_user(viktor)\n'
              '        self.assertFalse(viktor.id is None)\n'
              '        db.add_user_list([anna, isi])\n'
              '        self.assertFalse(anna.id is None)\n'
              '        self.assertFalse(isi.id is None)\n'
              '        db.add_user_list([annacska])\n'
              '        self.assertFalse(annacska.id is None)\n'
              '      ')

Fragment(uuid='530a7c4d-ad66-47ab-a9ef-84eedab80864',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=157,
         depth=0,
         type='module',
         name='',
         text='  self.assertEqual(db.get_user_count(), 4)\n'
              '        db.add_user_list([])\n'
              '        self.assertEqual(db.get_user_count(), 4)\n'
              "        self.assertNotEqual(viktor, 'not a record')\n"
              '        self.assertNotEqual(viktor, anna)\n'
              '        self.assertNotEqual(viktor.id, anna.id)\n'
              '        self.assertNotEqual(viktor.id, isi.id)\n'
              '        self.assertNotEqual(vikto')

Fragment(uuid='3a8a2b24-4e63-4dbd-ba65-615defdf2d7a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=157,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='  self.assertEqual(db.get_user_count(), 4)\n'
              '        db.add_user_list([])\n'
              '        self.assertEqual(db.get_user_count(), 4)\n'
              "        self.assertNotEqual(viktor, 'not a record')\n"
              '        self.assertNotEqual(viktor, anna)\n'
              '        self.assertNotEqual(viktor.id, anna.id)\n'
              '        self.assertNotEqual(viktor.id, isi.id)\n'
              '        self.assertNotEqual(vikto')

Fragment(uuid='7099f87d-857b-4427-b816-1a8a17ae3de6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=157,
         depth=3,
         type='function',
         name='load_data',
         text='  self.assertEqual(db.get_user_count(), 4)\n'
              '        db.add_user_list([])\n'
              '        self.assertEqual(db.get_user_count(), 4)\n'
              "        self.assertNotEqual(viktor, 'not a record')\n"
              '        self.assertNotEqual(viktor, anna)\n'
              '        self.assertNotEqual(viktor.id, anna.id)\n'
              '        self.assertNotEqual(viktor.id, isi.id)\n'
              '        self.assertNotEqual(vikto')

Fragment(uuid='0a11d118-a1c5-4ad2-ab41-da1ed1175942',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=164,
         depth=0,
         type='module',
         name='',
         text='r.id, annacska.id)\n'
              '        user_list = db.get_user_list()\n'
              '        self.assertEqual(len(user_list), db.get_user_count())\n'
              '\n'
              '        # Groups\n'
              '        admin = db.new_group(\n'
              "            slug='admin',\n"
              "            name='Admin')\n"
              '        provider = db.new_group(\n'
              "            slug='provider',\n"
              "            name='Service provider')\n"
              '        customer = db.new_group(\n'
              "            slug='customer',\n"
              "            name='Customer')\n"
              '        group_list = sorted([admin, provider, customer], '
              'key=lambda r: r.slug)\n'
              '        db.add_group_list(group_list)\n'
              '        self.assertEqual(len(group_list), '
              'db.get_group_count())\n'
              '        self.assertEqual(group_list, '
              'sorted(list(db.get_group_iter()), key=lambda r: r.slug))')

Fragment(uuid='ef116c0d-c70c-4e58-a901-974d58895e12',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=164,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='r.id, annacska.id)\n'
              '        user_list = db.get_user_list()\n'
              '        self.assertEqual(len(user_list), db.get_user_count())\n'
              '\n'
              '        # Groups\n'
              '        admin = db.new_group(\n'
              "            slug='admin',\n"
              "            name='Admin')\n"
              '        provider = db.new_group(\n'
              "            slug='provider',\n"
              "            name='Service provider')\n"
              '        customer = db.new_group(\n'
              "            slug='customer',\n"
              "            name='Customer')\n"
              '        group_list = sorted([admin, provider, customer], '
              'key=lambda r: r.slug)\n'
              '        db.add_group_list(group_list)\n'
              '        self.assertEqual(len(group_list), '
              'db.get_group_count())\n'
              '        self.assertEqual(group_list, '
              'sorted(list(db.get_group_iter()), key=lambda r: r.slug))')

Fragment(uuid='f27e0b3d-c06e-4688-ad87-f71fb8ea09be',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=164,
         depth=3,
         type='function',
         name='load_data',
         text='r.id, annacska.id)\n'
              '        user_list = db.get_user_list()\n'
              '        self.assertEqual(len(user_list), db.get_user_count())\n'
              '\n'
              '        # Groups\n'
              '        admin = db.new_group(\n'
              "            slug='admin',\n"
              "            name='Admin')\n"
              '        provider = db.new_group(\n'
              "            slug='provider',\n"
              "            name='Service provider')\n"
              '        customer = db.new_group(\n'
              "            slug='customer',\n"
              "            name='Customer')\n"
              '        group_list = sorted([admin, provider, customer], '
              'key=lambda r: r.slug)\n'
              '        db.add_group_list(group_list)\n'
              '        self.assertEqual(len(group_list), '
              'db.get_group_count())\n'
              '        self.assertEqual(group_list, '
              'sorted(list(db.get_group_iter()), key=lambda r: r.slug))')

Fragment(uuid='062f727f-0e6b-46b4-8d8c-120599b20c27',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=181,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              '        # Associate users with groups\n'
              '        group_user_list = [\n'
              '            db.new_group_user(group=admin.id, user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=annacska.id),\n'
              '            db.new_group_user(group=customer.id, '
              'user=viktor.id),\n'
              '           ')

Fragment(uuid='06f7c3f6-acdf-42a5-9662-58f5489b4da5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=181,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '\n'
              '        # Associate users with groups\n'
              '        group_user_list = [\n'
              '            db.new_group_user(group=admin.id, user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=annacska.id),\n'
              '            db.new_group_user(group=customer.id, '
              'user=viktor.id),\n'
              '           ')

Fragment(uuid='ca34b53d-1db9-47ec-81a8-8a2a0b6a2833',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=181,
         depth=3,
         type='function',
         name='load_data',
         text='\n'
              '\n'
              '        # Associate users with groups\n'
              '        group_user_list = [\n'
              '            db.new_group_user(group=admin.id, user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=viktor.id),\n'
              '            db.new_group_user(group=provider.id, '
              'user=annacska.id),\n'
              '            db.new_group_user(group=customer.id, '
              'user=viktor.id),\n'
              '           ')

Fragment(uuid='88198ac9-55a9-40a0-b780-b2c461efb191',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=183,
         depth=4,
         type='documentation',
         name='',
         text='# Associate users with groups')

Fragment(uuid='0165f2ff-7f87-4497-9de8-94f452f4beab',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=189,
         depth=0,
         type='module',
         name='',
         text=' db.new_group_user(group=customer.id, user=anna.id),\n'
              '            db.new_group_user(group=customer.id, user=isi.id)]\n'
              '        db.add_group_user_list(group_user_list)\n'
              '\n'
              '        # Verify data\n'
              '        group_user_id_list = set([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(len(group_user_list), '
              'len(group_user_id_list))\n')

Fragment(uuid='ff84a90c-1f10-4d43-91aa-2be000ebbae6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=189,
         depth=1,
         type='class',
         name='TestAbstraction',
         text=' db.new_group_user(group=customer.id, user=anna.id),\n'
              '            db.new_group_user(group=customer.id, user=isi.id)]\n'
              '        db.add_group_user_list(group_user_list)\n'
              '\n'
              '        # Verify data\n'
              '        group_user_id_list = set([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(len(group_user_list), '
              'len(group_user_id_list))\n')

Fragment(uuid='ea291d56-c4a5-4c4d-9627-e69c5060884c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=189,
         depth=3,
         type='function',
         name='load_data',
         text=' db.new_group_user(group=customer.id, user=anna.id),\n'
              '            db.new_group_user(group=customer.id, user=isi.id)]\n'
              '        db.add_group_user_list(group_user_list)\n'
              '\n'
              '        # Verify data\n'
              '        group_user_id_list = set([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(len(group_user_list), '
              'len(group_user_id_list))\n')

Fragment(uuid='dd3b58ee-8a37-4571-a25c-9f143755bdbd',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=196,
         depth=0,
         type='module',
         name='',
         text='        for group_user in db.get_group_user_list():\n'
              '            self.assertTrue(group_user.id in '
              'group_user_id_list)\n'
              '        self.assertEqual(len(group_user_list), '
              'db.get_group_user_count())\n'
              '        self.assertEqual(viktor, '
              "db.find_user(email='viktor@ferenczi.eu'))\n"
              '        self.assertEqual(anna, '
              "db.find_user(last_name='Szili'))\n"
              '\n'
              '        # Add products\n'
              "        hdd = db.new_product(name='hdd')\n"
              "        consulting = db.new_product(name='consulting')\n"
              '        db.add_product_list([hdd, consulting])\n'
              '\n'
              '        # Add two invoices\n')

Fragment(uuid='736cbcbf-c5e8-4f2f-a4bf-90db622006e3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=196,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        for group_user in db.get_group_user_list():\n'
              '            self.assertTrue(group_user.id in '
              'group_user_id_list)\n'
              '        self.assertEqual(len(group_user_list), '
              'db.get_group_user_count())\n'
              '        self.assertEqual(viktor, '
              "db.find_user(email='viktor@ferenczi.eu'))\n"
              '        self.assertEqual(anna, '
              "db.find_user(last_name='Szili'))\n"
              '\n'
              '        # Add products\n'
              "        hdd = db.new_product(name='hdd')\n"
              "        consulting = db.new_product(name='consulting')\n"
              '        db.add_product_list([hdd, consulting])\n'
              '\n'
              '        # Add two invoices\n')

Fragment(uuid='c2ca8516-b545-4cae-8ae9-5f880c9bfd4e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=196,
         depth=3,
         type='function',
         name='load_data',
         text='        for group_user in db.get_group_user_list():\n'
              '            self.assertTrue(group_user.id in '
              'group_user_id_list)\n'
              '        self.assertEqual(len(group_user_list), '
              'db.get_group_user_count())\n'
              '        self.assertEqual(viktor, '
              "db.find_user(email='viktor@ferenczi.eu'))\n"
              '        self.assertEqual(anna, '
              "db.find_user(last_name='Szili'))\n"
              '\n'
              '        # Add products\n'
              "        hdd = db.new_product(name='hdd')\n"
              "        consulting = db.new_product(name='consulting')\n"
              '        db.add_product_list([hdd, consulting])\n'
              '\n'
              '        # Add two invoices\n')

Fragment(uuid='860fe71f-3d8f-4b34-a01a-bd48534f45e9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=208,
         depth=0,
         type='module',
         name='',
         text='        for m, customer in [(1, anna), (2, isi)]:\n'
              '            invoice = db.new_invoice(\n'
              "                serial='2010/%04d' % m,\n"
              '                seller=viktor.id,\n'
              '                customer=customer.id,\n'
              '                net_amount=4600 * m,\n'
              '                vat_amount=1150 * m,\n'
              '                gross_amount=5750 * m,\n'
              '                issued_date=datetime.date(2010, 3, 31),\n'
              '                due_date=datetime.date(2010, 4, 30))\n'
              '            db.add_invoice(invoice)\n'
              '            item1 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=hdd.id,\n'
              '                quantity=6 * m,\n'
              '    ')

Fragment(uuid='67d0e899-6389-4f29-a206-1cd7256940a4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=208,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        for m, customer in [(1, anna), (2, isi)]:\n'
              '            invoice = db.new_invoice(\n'
              "                serial='2010/%04d' % m,\n"
              '                seller=viktor.id,\n'
              '                customer=customer.id,\n'
              '                net_amount=4600 * m,\n'
              '                vat_amount=1150 * m,\n'
              '                gross_amount=5750 * m,\n'
              '                issued_date=datetime.date(2010, 3, 31),\n'
              '                due_date=datetime.date(2010, 4, 30))\n'
              '            db.add_invoice(invoice)\n'
              '            item1 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=hdd.id,\n'
              '                quantity=6 * m,\n'
              '    ')

Fragment(uuid='3512cd63-451d-4f77-af64-4663c77058b9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=208,
         depth=3,
         type='function',
         name='load_data',
         text='        for m, customer in [(1, anna), (2, isi)]:\n'
              '            invoice = db.new_invoice(\n'
              "                serial='2010/%04d' % m,\n"
              '                seller=viktor.id,\n'
              '                customer=customer.id,\n'
              '                net_amount=4600 * m,\n'
              '                vat_amount=1150 * m,\n'
              '                gross_amount=5750 * m,\n'
              '                issued_date=datetime.date(2010, 3, 31),\n'
              '                due_date=datetime.date(2010, 4, 30))\n'
              '            db.add_invoice(invoice)\n'
              '            item1 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=hdd.id,\n'
              '                quantity=6 * m,\n'
              '    ')

Fragment(uuid='ff3c1b4f-6c00-4f53-be6b-97c402aa7306',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=223,
         depth=0,
         type='module',
         name='',
         text='            net_amount=600 * m,\n'
              '                vat_percent=2500 * m,\n'
              '                vat_amount=150 * m,\n'
              '                gross_amount=750 * m)\n'
              '            item2 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=consulting.id,\n'
              '                quantity=20 * m,\n'
              '                first_day=datetime.date(2010, 4, 1),\n'
              '                last_day=datetime.date(2010, 4, 30),\n'
              '                net_amount=4000 * m,\n'
              '                vat_percent=25000 * m,\n'
              '                vat_amount=1000 * m,\n'
              '                gross_amount=5000 * m)\n'
              '            db.add_invoice_item_list([item1, item2])\n')

Fragment(uuid='a88f47f1-e87f-4d73-951d-2cd58c3d3a12',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=223,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='            net_amount=600 * m,\n'
              '                vat_percent=2500 * m,\n'
              '                vat_amount=150 * m,\n'
              '                gross_amount=750 * m)\n'
              '            item2 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=consulting.id,\n'
              '                quantity=20 * m,\n'
              '                first_day=datetime.date(2010, 4, 1),\n'
              '                last_day=datetime.date(2010, 4, 30),\n'
              '                net_amount=4000 * m,\n'
              '                vat_percent=25000 * m,\n'
              '                vat_amount=1000 * m,\n'
              '                gross_amount=5000 * m)\n'
              '            db.add_invoice_item_list([item1, item2])\n')

Fragment(uuid='94f00469-daea-402c-ab00-4793fa435c8f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=223,
         depth=3,
         type='function',
         name='load_data',
         text='            net_amount=600 * m,\n'
              '                vat_percent=2500 * m,\n'
              '                vat_amount=150 * m,\n'
              '                gross_amount=750 * m)\n'
              '            item2 = db.new_invoice_item(\n'
              '                invoice=invoice.id,\n'
              '                product=consulting.id,\n'
              '                quantity=20 * m,\n'
              '                first_day=datetime.date(2010, 4, 1),\n'
              '                last_day=datetime.date(2010, 4, 30),\n'
              '                net_amount=4000 * m,\n'
              '                vat_percent=25000 * m,\n'
              '                vat_amount=1000 * m,\n'
              '                gross_amount=5000 * m)\n'
              '            db.add_invoice_item_list([item1, item2])')

Fragment(uuid='0a66421a-eeb4-46da-b328-6bd2119c63b7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=238,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def verify_data(self, db=None):\n'
              '        """ Do data verification\n'
              '        """\n')

Fragment(uuid='4418de43-4494-408b-91cb-ccbd399fd535',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=238,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def verify_data(self, db=None):\n'
              '        """ Do data verification\n'
              '        """\n')

Fragment(uuid='e34c9318-f119-4769-89cf-4b44ba793875',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=239,
         depth=3,
         type='function',
         name='verify_data',
         text='def verify_data(self, db=None):\n'
              '        """ Do data verification\n'
              '        """\n')

Fragment(uuid='8e70a276-5b1c-4256-b32e-ae45a429c422',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=240,
         depth=6,
         type='documentation',
         name='',
         text=' Do data verification\n        ')

Fragment(uuid='fbbb705a-5210-4405-ad34-51263b80cdfc',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=242,
         depth=0,
         type='module',
         name='',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='34d84b5e-d693-4132-a35a-6a0d83ca18d1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=242,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='480e5b13-a251-404e-bbad-140215ded61e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=242,
         depth=3,
         type='function',
         name='verify_data',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='797551b5-610e-4ae8-bd32-d4e904be3364',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=244,
         depth=0,
         type='module',
         name='',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        viktor = db.find_user(email='viktor@ferenczi.eu')\n"
              '        self.assertFalse(viktor is None)\n'
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        self.assertFalse(anna is None)\n'
              '\n'
              '        viktor_groups = db.find_group_user_list(user=vi')

Fragment(uuid='5adfea31-e1ae-4bb6-9934-72cd737e4b3f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=244,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        viktor = db.find_user(email='viktor@ferenczi.eu')\n"
              '        self.assertFalse(viktor is None)\n'
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        self.assertFalse(anna is None)\n'
              '\n'
              '        viktor_groups = db.find_group_user_list(user=vi')

Fragment(uuid='b2e5c7dd-f1e4-438b-bb64-a228d1b7ad11',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=244,
         depth=3,
         type='function',
         name='verify_data',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        viktor = db.find_user(email='viktor@ferenczi.eu')\n"
              '        self.assertFalse(viktor is None)\n'
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        self.assertFalse(anna is None)\n'
              '\n'
              '        viktor_groups = db.find_group_user_list(user=vi')

Fragment(uuid='657b821a-275d-417f-8a00-a667f0691220',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=252,
         depth=0,
         type='module',
         name='',
         text='ktor.id)\n'
              '        self.assertEqual(len(viktor_groups), 3)\n'
              '\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 1)\n'
              '\n'
              '        get_result_list = db.get_user_list()\n'
              '        find_result_list = db.find_user_list()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n')

Fragment(uuid='6bb54315-3941-44ee-b2ed-cfdb5ec7e59c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=252,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='ktor.id)\n'
              '        self.assertEqual(len(viktor_groups), 3)\n'
              '\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 1)\n'
              '\n'
              '        get_result_list = db.get_user_list()\n'
              '        find_result_list = db.find_user_list()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n')

Fragment(uuid='3391ae8a-7a1c-412a-8c3b-663eb04c52a0',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=252,
         depth=3,
         type='function',
         name='verify_data',
         text='ktor.id)\n'
              '        self.assertEqual(len(viktor_groups), 3)\n'
              '\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 1)\n'
              '\n'
              '        get_result_list = db.get_user_list()\n'
              '        find_result_list = db.find_user_list()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)')

Fragment(uuid='46426605-b23c-4bed-9070-d86477164fa6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=261,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def modify_data(self, db=None):\n'
              '        """ Do data modification\n'
              '        """\n')

Fragment(uuid='31b4d049-c598-49bb-93ed-77f06cb3e686',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=261,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def modify_data(self, db=None):\n'
              '        """ Do data modification\n'
              '        """\n')

Fragment(uuid='a665f39a-0457-484d-9e08-75649e8aa8fe',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=262,
         depth=3,
         type='function',
         name='modify_data',
         text='def modify_data(self, db=None):\n'
              '        """ Do data modification\n'
              '        """\n')

Fragment(uuid='495d2580-46ab-4f55-bede-92f43f4873c5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=263,
         depth=6,
         type='documentation',
         name='',
         text=' Do data modification\n        ')

Fragment(uuid='ee817cbb-8c82-483e-856f-dde8935f76e8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=265,
         depth=0,
         type='module',
         name='',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='58dc1ff1-f5ec-48bc-bf8e-6fa547a16be2',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=265,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='cbea0160-4811-4068-88a9-700779b2a48b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=265,
         depth=3,
         type='function',
         name='modify_data',
         text='        if db is None:\n            db = self.db\n')

Fragment(uuid='08c1d892-15be-4dd0-942c-7925a403ebee',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=267,
         depth=0,
         type='module',
         name='',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        admin = db.find_group(slug='admin')\n"
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        group_membership = db.new_group_user(group=admin.id, '
              'user=anna.id)\n'
              '        db.add_group_user(group_membership)\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 2)\n'
              '\n'
              "        anna.email = 'wrong@email.address'\n"
              '        db.update_user(anna)\n'
              '\n'
              "        anna.email = 'szanna@pmgsz.hu'\n"
              '    ')

Fragment(uuid='d4197970-0eb8-4643-883d-c499eec86ea9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=267,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        admin = db.find_group(slug='admin')\n"
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        group_membership = db.new_group_user(group=admin.id, '
              'user=anna.id)\n'
              '        db.add_group_user(group_membership)\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 2)\n'
              '\n'
              "        anna.email = 'wrong@email.address'\n"
              '        db.update_user(anna)\n'
              '\n'
              "        anna.email = 'szanna@pmgsz.hu'\n"
              '    ')

Fragment(uuid='cc53fe17-9b4d-4690-9571-cb54554afab7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=267,
         depth=3,
         type='function',
         name='modify_data',
         text='        if 0:\n'
              '            assert isinstance(db, '
              'self.abstraction.TestDatabase)\n'
              '\n'
              "        admin = db.find_group(slug='admin')\n"
              "        anna = db.find_user(email='anna@cx.hu')\n"
              '        group_membership = db.new_group_user(group=admin.id, '
              'user=anna.id)\n'
              '        db.add_group_user(group_membership)\n'
              '        anna_groups = db.find_group_user_list(user=anna.id)\n'
              '        self.assertEqual(len(anna_groups), 2)\n'
              '\n'
              "        anna.email = 'wrong@email.address'\n"
              '        db.update_user(anna)\n'
              '\n'
              "        anna.email = 'szanna@pmgsz.hu'\n"
              '    ')

Fragment(uuid='24305aab-d7c9-40c0-8d8e-797d1878d93b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=281,
         depth=0,
         type='module',
         name='',
         text='    db.update_user(anna)\n'
              '\n'
              "        anna2 = db.find_user(last_name='Szili')\n"
              '        self.assertEqual(anna, anna2)\n'
              '        self.assertEqual(repr(anna), repr(anna2))\n'
              '        self.assertEqual(repr(anna), str(anna2))\n'
              '\n'
              '        group_user_count = db.get_group_user_count()\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '\n'
              '       ')

Fragment(uuid='240e621b-0513-4f44-9e2b-8cb68ae96c2f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=281,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='    db.update_user(anna)\n'
              '\n'
              "        anna2 = db.find_user(last_name='Szili')\n"
              '        self.assertEqual(anna, anna2)\n'
              '        self.assertEqual(repr(anna), repr(anna2))\n'
              '        self.assertEqual(repr(anna), str(anna2))\n'
              '\n'
              '        group_user_count = db.get_group_user_count()\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '\n'
              '       ')

Fragment(uuid='91c7f507-e607-4a81-8a95-bea4d68333e4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=281,
         depth=3,
         type='function',
         name='modify_data',
         text='    db.update_user(anna)\n'
              '\n'
              "        anna2 = db.find_user(last_name='Szili')\n"
              '        self.assertEqual(anna, anna2)\n'
              '        self.assertEqual(repr(anna), repr(anna2))\n'
              '        self.assertEqual(repr(anna), str(anna2))\n'
              '\n'
              '        group_user_count = db.get_group_user_count()\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '        db.delete_group_user(group_membership)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'group_user_count - 1)\n'
              '\n'
              '      ')

Fragment(uuid='f423e068-29d7-409b-9fe8-9ee6f755d176',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=294,
         depth=0,
         type='module',
         name='',
         text=' db.add_group_user(group_membership)\n'
              '\n'
              '        self.assertRaises(\n'
              '            db.IntegrityError,\n'
              '            db.add_group_user,\n'
              '            group_membership)\n'
              '        db.rollback()\n'
              '\n'
              '        user_list = db.get_user_list()\n'
              '        db.update_user_list(user_list)\n'
              '        db.update_user_list(user_list[:1])\n'
              '        db.update_user_list([])\n'
              '        db.rollback()\n'
              '\n'
              '        group_user_list = db.get_group_user_list()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0])\n'
              '        self.assertEqual(db.get_group_user_count(), len(g')

Fragment(uuid='df5caf4c-660d-4098-b437-82ec7ce44405',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=294,
         depth=1,
         type='class',
         name='TestAbstraction',
         text=' db.add_group_user(group_membership)\n'
              '\n'
              '        self.assertRaises(\n'
              '            db.IntegrityError,\n'
              '            db.add_group_user,\n'
              '            group_membership)\n'
              '        db.rollback()\n'
              '\n'
              '        user_list = db.get_user_list()\n'
              '        db.update_user_list(user_list)\n'
              '        db.update_user_list(user_list[:1])\n'
              '        db.update_user_list([])\n'
              '        db.rollback()\n'
              '\n'
              '        group_user_list = db.get_group_user_list()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0])\n'
              '        self.assertEqual(db.get_group_user_count(), len(g')

Fragment(uuid='b975b6a4-2fc0-41b1-9402-acfa2baacab6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=294,
         depth=3,
         type='function',
         name='modify_data',
         text='  db.add_group_user(group_membership)\n'
              '\n'
              '        self.assertRaises(\n'
              '            db.IntegrityError,\n'
              '            db.add_group_user,\n'
              '            group_membership)\n'
              '        db.rollback()\n'
              '\n'
              '        user_list = db.get_user_list()\n'
              '        db.update_user_list(user_list)\n'
              '        db.update_user_list(user_list[:1])\n'
              '        db.update_user_list([])\n'
              '        db.rollback()\n'
              '\n'
              '        group_user_list = db.get_group_user_list()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0])\n'
              '        self.assertEqual(db.get_group_user_count(), len(')

Fragment(uuid='7f8e6f04-9860-4e86-8f01-eec6ca8e0bb3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=311,
         depth=0,
         type='module',
         name='',
         text='roup_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0].id)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list(group_user_list[:2])\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 2)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(db.get_group_user_count(), 0)\n'
              '        db.rollback()\n')

Fragment(uuid='5f22e3c5-e390-463c-8116-57fcbb19df0c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=311,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='roup_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0].id)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list(group_user_list[:2])\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 2)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(db.get_group_user_count(), 0)\n'
              '        db.rollback()\n')

Fragment(uuid='172b38a6-ff77-4fe7-a0a1-ccf224ae2a67',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=311,
         depth=3,
         type='function',
         name='modify_data',
         text='group_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user(group_user_list[0].id)\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 1)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list(group_user_list[:2])\n'
              '        self.assertEqual(db.get_group_user_count(), '
              'len(group_user_list) - 2)\n'
              '        db.rollback()\n'
              '\n'
              '        db.delete_group_user_list([group_user.id for group_user '
              'in group_user_list])\n'
              '        self.assertEqual(db.get_group_user_count(), 0)\n'
              '        db.rollback()')

Fragment(uuid='932791a2-6ef0-44ca-ac79-8894be6d6b4b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=325,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def do_failed_transaction(self):\n'
              '        try:\n'
              '            with self.db.transaction():\n'
              "                group_x = self.db.new_group(slug='x', "
              "name='y')\n"
              '                self.db.add_group(group_x)\n'
              '                raise ValueError()\n'
              '        except ValueError:\n'
              '            pass\n'
              '\n'
              "        self.assertTrue(self.db.find_group(slug='x') is None)\n")

Fragment(uuid='adece2f5-787a-4e89-8511-b54388b9cf82',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=325,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def do_failed_transaction(self):\n'
              '        try:\n'
              '            with self.db.transaction():\n'
              "                group_x = self.db.new_group(slug='x', "
              "name='y')\n"
              '                self.db.add_group(group_x)\n'
              '                raise ValueError()\n'
              '        except ValueError:\n'
              '            pass\n'
              '\n'
              "        self.assertTrue(self.db.find_group(slug='x') is None)\n")

Fragment(uuid='66693dff-59ac-44c9-92ea-f88e2346243f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=326,
         depth=3,
         type='function',
         name='do_failed_transaction',
         text='def do_failed_transaction(self):\n'
              '        try:\n'
              '            with self.db.transaction():\n'
              "                group_x = self.db.new_group(slug='x', "
              "name='y')\n"
              '                self.db.add_group(group_x)\n'
              '                raise ValueError()\n'
              '        except ValueError:\n'
              '            pass\n'
              '\n'
              "        self.assertTrue(self.db.find_group(slug='x') is None)")

Fragment(uuid='1f137a0b-e196-49c2-9f3f-007c4ed9c45b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=336,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_clauses_class(self):\n'
              '        """ Tests the Clauses class\n'
              '        """\n'
              '\n'
              '        Clauses = self.db.Clauses\n'
              '        ns = dict(clauses=clauses)\n'
              '\n'
              "        empty_clauses = Clauses(table_list=('tbl1',))\n"
              '        self.assertEqual(eval(repr(empty_clauses), ns), '
              'empty_clauses)\n'
              '\n'
              '        full_clauses = Clauses(\n'
              "            table_list=('tbl2',),\n"
              '            ')

Fragment(uuid='73db1f9b-95a9-4732-8793-c5d40702054c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=336,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_clauses_class(self):\n'
              '        """ Tests the Clauses class\n'
              '        """\n'
              '\n'
              '        Clauses = self.db.Clauses\n'
              '        ns = dict(clauses=clauses)\n'
              '\n'
              "        empty_clauses = Clauses(table_list=('tbl1',))\n"
              '        self.assertEqual(eval(repr(empty_clauses), ns), '
              'empty_clauses)\n'
              '\n'
              '        full_clauses = Clauses(\n'
              "            table_list=('tbl2',),\n"
              '            ')

Fragment(uuid='e52f57c2-f44e-4c31-81fb-d3573066cc09',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=337,
         depth=3,
         type='function',
         name='test_clauses_class',
         text='def test_clauses_class(self):\n'
              '        """ Tests the Clauses class\n'
              '        """\n'
              '\n'
              '        Clauses = self.db.Clauses\n'
              '        ns = dict(clauses=clauses)\n'
              '\n'
              "        empty_clauses = Clauses(table_list=('tbl1',))\n"
              '        self.assertEqual(eval(repr(empty_clauses), ns), '
              'empty_clauses)\n'
              '\n'
              '        full_clauses = Clauses(\n'
              "            table_list=('tbl2',),\n"
              '            fie')

Fragment(uuid='8970decf-e816-4b0c-8b01-ce7692aaf564',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=338,
         depth=6,
         type='documentation',
         name='',
         text=' Tests the Clauses class\n        ')

Fragment(uuid='9b7a1e28-92af-4c9a-a02c-b7daa2298979',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=349,
         depth=0,
         type='module',
         name='',
         text="field_list=('a', 'b', 'c', 'COUNT(*) AS cnt'),\n"
              '            where=\'"a" = ?\',\n'
              "            group_by=('d',),\n"
              "            having='cnt > 3',\n"
              "            order_by=('b', 'c'),\n"
              '            limit=10,\n'
              '            offset=20)\n'
              '        self.assertEqual(eval(repr(full_clauses), ns), '
              'full_clauses)\n'
              '\n'
              '        empty_hash = hash(empty_clauses)\n'
              '        self.assertEqual(empty_has')

Fragment(uuid='c91e64da-3168-4c94-9f9f-d60dbe455113',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=349,
         depth=1,
         type='class',
         name='TestAbstraction',
         text="field_list=('a', 'b', 'c', 'COUNT(*) AS cnt'),\n"
              '            where=\'"a" = ?\',\n'
              "            group_by=('d',),\n"
              "            having='cnt > 3',\n"
              "            order_by=('b', 'c'),\n"
              '            limit=10,\n'
              '            offset=20)\n'
              '        self.assertEqual(eval(repr(full_clauses), ns), '
              'full_clauses)\n'
              '\n'
              '        empty_hash = hash(empty_clauses)\n'
              '        self.assertEqual(empty_has')

Fragment(uuid='3bf98fe9-944e-4523-8da0-f4d668fa298c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=349,
         depth=3,
         type='function',
         name='test_clauses_class',
         text="ld_list=('a', 'b', 'c', 'COUNT(*) AS cnt'),\n"
              '            where=\'"a" = ?\',\n'
              "            group_by=('d',),\n"
              "            having='cnt > 3',\n"
              "            order_by=('b', 'c'),\n"
              '            limit=10,\n'
              '            offset=20)\n'
              '        self.assertEqual(eval(repr(full_clauses), ns), '
              'full_clauses)\n'
              '\n'
              '        empty_hash = hash(empty_clauses)\n'
              '        self.assertEqual(empty_hash,')

Fragment(uuid='0f8287eb-49f3-4f8f-bb6d-0b0228ee6765',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=359,
         depth=0,
         type='module',
         name='',
         text='h, hash(empty_clauses))\n'
              '        self.assertEqual(empty_clauses, empty_clauses)\n'
              '\n'
              '        full_hash = hash(full_clauses)\n'
              '        self.assertEqual(full_clauses, full_clauses)\n'
              '        self.assertEqual(full_hash, hash(full_clauses))\n'
              '\n'
              "        self.assertNotEqual(empty_clauses, 'something else')\n"
              '        self.assertNotEqual(empty_clauses, full_clauses)\n'
              '        sel')

Fragment(uuid='61057224-522d-4cb3-a33f-ca6f0193f89c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=359,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='h, hash(empty_clauses))\n'
              '        self.assertEqual(empty_clauses, empty_clauses)\n'
              '\n'
              '        full_hash = hash(full_clauses)\n'
              '        self.assertEqual(full_clauses, full_clauses)\n'
              '        self.assertEqual(full_hash, hash(full_clauses))\n'
              '\n'
              "        self.assertNotEqual(empty_clauses, 'something else')\n"
              '        self.assertNotEqual(empty_clauses, full_clauses)\n'
              '        sel')

Fragment(uuid='59a80d1e-fdaf-4834-9b49-d43296a436ca',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=359,
         depth=3,
         type='function',
         name='test_clauses_class',
         text=' hash(empty_clauses))\n'
              '        self.assertEqual(empty_clauses, empty_clauses)\n'
              '\n'
              '        full_hash = hash(full_clauses)\n'
              '        self.assertEqual(full_clauses, full_clauses)\n'
              '        self.assertEqual(full_hash, hash(full_clauses))\n'
              '\n'
              "        self.assertNotEqual(empty_clauses, 'something else')\n"
              '        self.assertNotEqual(empty_clauses, full_clauses)\n'
              '        sel')

Fragment(uuid='f870b4df-df3f-49f4-9ed4-06680d16b6fa',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=368,
         depth=0,
         type='module',
         name='',
         text='f.assertNotEqual(empty_hash, full_hash)  # Probably and should '
              'be\n'
              '\n'
              '        clauses_cache = {}\n'
              '        clauses_cache[empty_clauses] = repr(empty_clauses)\n'
              '        self.assertEqual(clauses_cache[empty_clauses], '
              'str(empty_clauses))\n'
              '        clauses_cache[full_clauses] = repr(full_clauses)\n'
              '        self.assertEqual(clauses_cache[full_clauses], '
              'str(full_clauses))\n')

Fragment(uuid='5d12e29f-b035-493e-ac45-c1fe806daef4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=368,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='f.assertNotEqual(empty_hash, full_hash)  # Probably and should '
              'be\n'
              '\n'
              '        clauses_cache = {}\n'
              '        clauses_cache[empty_clauses] = repr(empty_clauses)\n'
              '        self.assertEqual(clauses_cache[empty_clauses], '
              'str(empty_clauses))\n'
              '        clauses_cache[full_clauses] = repr(full_clauses)\n'
              '        self.assertEqual(clauses_cache[full_clauses], '
              'str(full_clauses))\n')

Fragment(uuid='c183c9cc-9362-4ac0-9996-290cc7502a0f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=368,
         depth=3,
         type='function',
         name='test_clauses_class',
         text='f.assertNotEqual(empty_hash, full_hash)  # Probably and should '
              'be\n'
              '\n'
              '        clauses_cache = {}\n'
              '        clauses_cache[empty_clauses] = repr(empty_clauses)\n'
              '        self.assertEqual(clauses_cache[empty_clauses], '
              'str(empty_clauses))\n'
              '        clauses_cache[full_clauses] = repr(full_clauses)\n'
              '        self.assertEqual(clauses_cache[full_clauses], '
              'str(full_clauses))')

Fragment(uuid='36b5f918-1769-4dd2-ac98-bb5855e82009',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=368,
         depth=4,
         type='documentation',
         name='',
         text='# Probably and should be')

Fragment(uuid='c1251c3c-43d1-44a5-947f-30fdca9e06bf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=375,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_random_id_selection(self):\n'
              '        """ Tests whether colliding random IDs are properly '
              'replaced\n'
              '        """\n'
              '\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # Use a very narrow random ID range for the tests\n'
              '        original_range = constants.DATABASE_ID_RANGE\n'
              '        constants.DATABASE_ID_RANGE = (1, 10)\n'
              '        try:\n'
              '            group_list = [\n'
              "                db.new_group(slug='g%d' % n, name='G%d' % n)\n"
              '                for n in range(*constants.DATABASE_ID_RANGE)]\n'
              '\n'
              '            # Add all ten possible records multiple times\n'
              '            for n in range(10):\n'
              '                # Add ony by one\n')

Fragment(uuid='216b9112-c283-4300-84b5-3f062fdc5219',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=375,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_random_id_selection(self):\n'
              '        """ Tests whether colliding random IDs are properly '
              'replaced\n'
              '        """\n'
              '\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # Use a very narrow random ID range for the tests\n'
              '        original_range = constants.DATABASE_ID_RANGE\n'
              '        constants.DATABASE_ID_RANGE = (1, 10)\n'
              '        try:\n'
              '            group_list = [\n'
              "                db.new_group(slug='g%d' % n, name='G%d' % n)\n"
              '                for n in range(*constants.DATABASE_ID_RANGE)]\n'
              '\n'
              '            # Add all ten possible records multiple times\n'
              '            for n in range(10):\n'
              '                # Add ony by one\n')

Fragment(uuid='282cc4ef-011a-48ed-a8cd-9c36e442802e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=376,
         depth=3,
         type='function',
         name='test_random_id_selection',
         text='def test_random_id_selection(self):\n'
              '        """ Tests whether colliding random IDs are properly '
              'replaced\n'
              '        """\n'
              '\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # Use a very narrow random ID range for the tests\n'
              '        original_range = constants.DATABASE_ID_RANGE\n'
              '        constants.DATABASE_ID_RANGE = (1, 10)\n'
              '        try:\n'
              '            group_list = [\n'
              "                db.new_group(slug='g%d' % n, name='G%d' % n)\n"
              '                for n in range(*constants.DATABASE_ID_RANGE)]\n'
              '\n'
              '            # Add all ten possible records multiple times\n'
              '            for n in range(10):\n'
              '                # Add ony by one\n')

Fragment(uuid='fbce0689-fbca-4955-be4f-98b3af120344',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=377,
         depth=6,
         type='documentation',
         name='',
         text=' Tests whether colliding random IDs are properly replaced\n'
              '        ')

Fragment(uuid='0b16be49-b962-4fd5-8060-69822a91c054',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=383,
         depth=4,
         type='documentation',
         name='',
         text='# Use a very narrow random ID range for the tests')

Fragment(uuid='a1c9f237-227c-4d53-81ed-df720ea7cd8e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=391,
         depth=6,
         type='documentation',
         name='',
         text='# Add all ten possible records multiple times')

Fragment(uuid='e960c820-dbc3-44eb-9256-292c9613373e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=394,
         depth=0,
         type='module',
         name='',
         text='                with db.transaction():\n'
              '                    for group in group_list:\n'
              '                        db.add_group(group)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '                # Add as a list\n')

Fragment(uuid='8136a906-45b7-4f8b-b7b8-fcf9ae2a2302',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=394,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='                with db.transaction():\n'
              '                    for group in group_list:\n'
              '                        db.add_group(group)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '                # Add as a list\n')

Fragment(uuid='16365b58-b898-4b5a-9926-2fbad127d49e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=394,
         depth=3,
         type='function',
         name='test_random_id_selection',
         text='                with db.transaction():\n'
              '                    for group in group_list:\n'
              '                        db.add_group(group)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '                # Add as a list\n')

Fragment(uuid='ee8685d8-2eb4-44cc-a5cf-c89f520d425d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=400,
         depth=0,
         type='module',
         name='',
         text='                with db.transaction():\n'
              '                    db.add_group_list(group_list)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '            # Add them again\n')

Fragment(uuid='b66b55da-9f27-4d7b-aa1a-d816c2c931e9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=400,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='                with db.transaction():\n'
              '                    db.add_group_list(group_list)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '            # Add them again\n')

Fragment(uuid='0085ffcc-cd4b-44ed-937d-d26c908e585c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=400,
         depth=3,
         type='function',
         name='test_random_id_selection',
         text='                with db.transaction():\n'
              '                    db.add_group_list(group_list)\n'
              '                    db.delete_group_list(group_list)\n'
              '\n'
              '            # Add them again\n')

Fragment(uuid='49e3567e-f55b-4c24-8b2c-b3a2caa96cf3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=405,
         depth=0,
         type='module',
         name='',
         text='            with db.transaction():\n'
              '                db.add_group_list(group_list)\n'
              '\n'
              '            # Try to add one more, it should result in an '
              'IntegrityError all the time\n'
              "            group = db.new_group(slug='gX', name='GX')\n"
              '            for n in range(10):\n')

Fragment(uuid='ab8ba6e8-decb-42cb-878b-943c8d38c6dd',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=405,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='            with db.transaction():\n'
              '                db.add_group_list(group_list)\n'
              '\n'
              '            # Try to add one more, it should result in an '
              'IntegrityError all the time\n'
              "            group = db.new_group(slug='gX', name='GX')\n"
              '            for n in range(10):\n')

Fragment(uuid='73d5303f-484b-4f61-86e0-3aa721c2d4b6',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=405,
         depth=3,
         type='function',
         name='test_random_id_selection',
         text='            with db.transaction():\n'
              '                db.add_group_list(group_list)\n'
              '\n'
              '            # Try to add one more, it should result in an '
              'IntegrityError all the time\n'
              "            group = db.new_group(slug='gX', name='GX')\n"
              '            for n in range(10):\n')

Fragment(uuid='c364ae40-a54f-4876-80f4-f41df3460b73',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=408,
         depth=6,
         type='documentation',
         name='',
         text='# Try to add one more, it should result in an IntegrityError '
              'all the time')

Fragment(uuid='fb50397e-241d-4f95-a309-2567e9ad703b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=411,
         depth=0,
         type='module',
         name='',
         text='                with db.transaction():\n'
              '                    self.assertRaises(db.IntegrityError, '
              'db.add_group, group)\n'
              '\n'
              '            # Verify the detection function\n'
              '            try:\n'
              '                db.add_group_list([group, group])\n'
              '            except db.IntegrityError as reason:\n'
              '                '
              'self.assertTrue(db.is_primary_key_conflict(reason))\n'
              '            else:\n'
              '                self.assertTrue(False)\n'
              '            db.rollback()\n'
              '\n'
              '            # Verify that other unique constraint conflicts are '
              'not misdetected as an ID conflict\n')

Fragment(uuid='c39cbfdb-2d98-41be-b048-50f35d471fc7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=411,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='                with db.transaction():\n'
              '                    self.assertRaises(db.IntegrityError, '
              'db.add_group, group)\n'
              '\n'
              '            # Verify the detection function\n'
              '            try:\n'
              '                db.add_group_list([group, group])\n'
              '            except db.IntegrityError as reason:\n'
              '                '
              'self.assertTrue(db.is_primary_key_conflict(reason))\n'
              '            else:\n'
              '                self.assertTrue(False)\n'
              '            db.rollback()\n'
              '\n'
              '            # Verify that other unique constraint conflicts are '
              'not misdetected as an ID conflict\n')

Fragment(uuid='9640fce4-19dc-4a38-b1cc-0a494e68a95c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=411,
         depth=3,
         type='function',
         name='test_random_id_selection',
         text='                with db.transaction():\n'
              '                    self.assertRaises(db.IntegrityError, '
              'db.add_group, group)\n'
              '\n'
              '            # Verify the detection function\n'
              '            try:\n'
              '                db.add_group_list([group, group])\n'
              '            except db.IntegrityError as reason:\n'
              '                '
              'self.assertTrue(db.is_primary_key_conflict(reason))\n'
              '            else:\n'
              '                self.assertTrue(False)\n'
              '            db.rollback()\n'
              '\n'
              '            # Verify that other unique constraint conflicts are '
              'not misdetected as an ID conflict\n')

Fragment(uuid='b036897f-628a-4d6f-90a3-2476f4ea8c0a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=414,
         depth=6,
         type='documentation',
         name='',
         text='# Verify the detection function')

Fragment(uuid='ec1d0a28-8c8e-4a13-b20a-f27d633f1826',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=423,
         depth=6,
         type='documentation',
         name='',
         text='# Verify that other unique constraint conflicts are not '
              'misdetected as an ID conflict')

Fragment(uuid='043ff0d0-7f50-491d-b89f-aea8aaa6c160',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=424,
         depth=0,
         type='module',
         name='',
         text='            with db.transaction():\n'
              '                # Reserve a single ID for the new record\n'
              '                db.delete_group(group_list[0])\n')

Fragment(uuid='1e18485f-f3dc-46a8-b95f-7b19d70ceb73',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=424,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='            with db.transaction():\n'
              '                # Reserve a single ID for the new record\n'
              '                db.delete_group(group_list[0])\n')

Fragment(uuid='10be3af0-2973-4c62-94bd-cc45ec5ffeaf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=424,
         depth=3,
         type='function',
         name='test_random_id_selection',
         text='            with db.transaction():\n'
              '                # Reserve a single ID for the new record\n'
              '                db.delete_group(group_list[0])\n')

Fragment(uuid='dddfe5f1-fff8-47eb-94cc-7227babdce81',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=425,
         depth=7,
         type='documentation',
         name='',
         text='# Reserve a single ID for the new record')

Fragment(uuid='c6d5ec8a-86de-41c8-abb1-fede1eea780e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=427,
         depth=0,
         type='module',
         name='',
         text='            with db.transaction():\n'
              '                try:\n'
              "                    # Conflicting group name, but there's a "
              'free ID\n'
              '                    db.add_group(group_list[1])\n'
              '                except db.IntegrityError as reason:\n'
              '                    self.assertTrue(not '
              'db.is_primary_key_conflict(reason))\n'
              '                    db.rollback()\n'
              '                else:\n'
              '                    self.assertTrue(False)\n'
              '        finally:\n'
              '            constants.DATABASE_ID_RANGE = (1, 11)\n')

Fragment(uuid='1be5a8e6-0ff9-4b95-b6b4-d9ec4ca25fbd',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=427,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='            with db.transaction():\n'
              '                try:\n'
              "                    # Conflicting group name, but there's a "
              'free ID\n'
              '                    db.add_group(group_list[1])\n'
              '                except db.IntegrityError as reason:\n'
              '                    self.assertTrue(not '
              'db.is_primary_key_conflict(reason))\n'
              '                    db.rollback()\n'
              '                else:\n'
              '                    self.assertTrue(False)\n'
              '        finally:\n'
              '            constants.DATABASE_ID_RANGE = (1, 11)\n')

Fragment(uuid='ce3275e9-4101-48cd-aa86-68156c434af2',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=427,
         depth=3,
         type='function',
         name='test_random_id_selection',
         text='            with db.transaction():\n'
              '                try:\n'
              "                    # Conflicting group name, but there's a "
              'free ID\n'
              '                    db.add_group(group_list[1])\n'
              '                except db.IntegrityError as reason:\n'
              '                    self.assertTrue(not '
              'db.is_primary_key_conflict(reason))\n'
              '                    db.rollback()\n'
              '                else:\n'
              '                    self.assertTrue(False)\n'
              '        finally:\n'
              '            constants.DATABASE_ID_RANGE = (1, 11)')

Fragment(uuid='f34b89cc-7598-4205-a9b2-5d8264b9b4e8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=429,
         depth=9,
         type='documentation',
         name='',
         text="# Conflicting group name, but there's a free ID")

Fragment(uuid='a874ee40-335f-4c83-b673-e7b5b9516dd1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=438,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_user_contact_query(self):\n'
              '        """ Test the UserContact query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='1bb0ffae-a58c-46d2-9b7b-cf60c073b6fe',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=438,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_user_contact_query(self):\n'
              '        """ Test the UserContact query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='c59d7967-38e3-4876-9e90-11f690909c94',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=439,
         depth=3,
         type='function',
         name='test_user_contact_query',
         text='def test_user_contact_query(self):\n'
              '        """ Test the UserContact query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='b718ee57-ab6b-4beb-bc01-939d9c1debac',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=440,
         depth=6,
         type='documentation',
         name='',
         text=' Test the UserContact query\n        ')

Fragment(uuid='d72e6908-bdbd-4047-891a-1691b4ff2bd2',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=444,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        self.assertEqual(db.query_user_contact_count(), 4)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone=None), 1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_ne=None), '
              '3)\n'
              "        self.assertEqual(db.query_user_contact_count(phone=''), "
              '0)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone='1234567'), "
              '1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_in=()), 0)\n'
              ' ')

Fragment(uuid='10ff00cc-a0bf-42a6-b16d-f2eaa114599d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=444,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        self.assertEqual(db.query_user_contact_count(), 4)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone=None), 1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_ne=None), '
              '3)\n'
              "        self.assertEqual(db.query_user_contact_count(phone=''), "
              '0)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone='1234567'), "
              '1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_in=()), 0)\n'
              ' ')

Fragment(uuid='485d3f68-519f-4ee4-b696-d0e83dffb3fe',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=444,
         depth=3,
         type='function',
         name='test_user_contact_query',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        self.assertEqual(db.query_user_contact_count(), 4)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone=None), 1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_ne=None), '
              '3)\n'
              "        self.assertEqual(db.query_user_contact_count(phone=''), "
              '0)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone='1234567'), "
              '1)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_in=()), 0)\n'
              ' ')

Fragment(uuid='6e9e5659-bcf3-4ecb-bf23-426ac436ce31',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=454,
         depth=0,
         type='module',
         name='',
         text='       '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567',)), "
              '1)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=['1234567', "
              "'2345678']), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567', "
              "'2345678')), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_not_in=['1234567']), "
              '2)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_not_in=[]), '
              '4)\n'
              '        # TODO: Add tests for all the other operators here\n')

Fragment(uuid='479024b6-6f29-48ce-8f5f-1ebe9867103c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=454,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='       '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567',)), "
              '1)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=['1234567', "
              "'2345678']), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567', "
              "'2345678')), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_not_in=['1234567']), "
              '2)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_not_in=[]), '
              '4)\n'
              '        # TODO: Add tests for all the other operators here\n')

Fragment(uuid='b44e0c5a-ab89-4a02-becc-813853d44726',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=454,
         depth=3,
         type='function',
         name='test_user_contact_query',
         text='       '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567',)), "
              '1)\n'
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=['1234567', "
              "'2345678']), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_in=('1234567', "
              "'2345678')), 2)\n"
              '        '
              "self.assertEqual(db.query_user_contact_count(phone_not_in=['1234567']), "
              '2)\n'
              '        '
              'self.assertEqual(db.query_user_contact_count(phone_not_in=[]), '
              '4)\n'
              '        # TODO: Add tests for all the other operators here')

Fragment(uuid='15de5e3d-bec2-40c0-9833-7be0ffa1be78',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=459,
         depth=4,
         type='documentation',
         name='',
         text='# TODO: Add tests for all the other operators here')

Fragment(uuid='f708b583-a5d6-4ae5-a756-680f4cd18a9a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=460,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_product_sale_query(self):\n'
              '        """ Tests the ProductSale query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='cc32c9ea-db12-4b0d-80a9-2714b389a543',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=460,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_product_sale_query(self):\n'
              '        """ Tests the ProductSale query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='b7613d67-82cc-4911-bf3a-5326fd982d94',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=461,
         depth=3,
         type='function',
         name='test_product_sale_query',
         text='def test_product_sale_query(self):\n'
              '        """ Tests the ProductSale query\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='1f3eabfe-9cff-4710-b852-e7911936cc05',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=462,
         depth=6,
         type='documentation',
         name='',
         text=' Tests the ProductSale query\n        ')

Fragment(uuid='6df2d042-8251-4bbd-86e5-9e908402bb9c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=466,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        product_sale_list = db.query_product_sale_list()\n'
              '        product_sale_list.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        product_sale_list2 = '
              'list(db.query_product_sale_iter())\n'
              '        product_sale_list2.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        self.assertEqual(product_sale_list, '
              'product_sale_list2)\n'
              '\n'
              '        self.assertEqual(len(product_sale_list), 2)\n'
              '        self.assertEqual(db.query_product_sale_count(), 2)\n'
              '\n'
              '        bar_sales, foo_sales = product_sale_list\n'
              '\n'
              "        self.assertEqual(bar_sales.product_name, 'consulting')\n"
              "        self.assertEqual(foo_sales.product_name, 'hdd')\n")

Fragment(uuid='3fdcea78-cb84-4615-a3ff-898b4491df8b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=466,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        product_sale_list = db.query_product_sale_list()\n'
              '        product_sale_list.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        product_sale_list2 = '
              'list(db.query_product_sale_iter())\n'
              '        product_sale_list2.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        self.assertEqual(product_sale_list, '
              'product_sale_list2)\n'
              '\n'
              '        self.assertEqual(len(product_sale_list), 2)\n'
              '        self.assertEqual(db.query_product_sale_count(), 2)\n'
              '\n'
              '        bar_sales, foo_sales = product_sale_list\n'
              '\n'
              "        self.assertEqual(bar_sales.product_name, 'consulting')\n"
              "        self.assertEqual(foo_sales.product_name, 'hdd')\n")

Fragment(uuid='8fe426c3-b00a-46c2-a53e-ba82b9b635a1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=466,
         depth=3,
         type='function',
         name='test_product_sale_query',
         text='\n'
              '        with db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        product_sale_list = db.query_product_sale_list()\n'
              '        product_sale_list.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        product_sale_list2 = '
              'list(db.query_product_sale_iter())\n'
              '        product_sale_list2.sort(key=lambda r: r.product_name)\n'
              '\n'
              '        self.assertEqual(product_sale_list, '
              'product_sale_list2)\n'
              '\n'
              '        self.assertEqual(len(product_sale_list), 2)\n'
              '        self.assertEqual(db.query_product_sale_count(), 2)\n'
              '\n'
              '        bar_sales, foo_sales = product_sale_list\n'
              '\n'
              "        self.assertEqual(bar_sales.product_name, 'consulting')\n"
              "        self.assertEqual(foo_sales.product_name, 'hdd')")

Fragment(uuid='6d388cd5-f72b-49f4-a1a8-4df923986914',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=485,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_triggers(self):\n'
              '        """ Tests whether the triggers are working\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # After insert or update trigger\n')

Fragment(uuid='3bb3752b-d2a7-4571-8caa-5f1c643312bd',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=485,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_triggers(self):\n'
              '        """ Tests whether the triggers are working\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # After insert or update trigger\n')

Fragment(uuid='efb4d5ee-8bbb-4af1-8131-1df7f7b21cb4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=486,
         depth=3,
         type='function',
         name='test_triggers',
         text='def test_triggers(self):\n'
              '        """ Tests whether the triggers are working\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n'
              '\n'
              '        # After insert or update trigger\n')

Fragment(uuid='97165963-8760-42cb-b8f2-1686672af92b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=487,
         depth=6,
         type='documentation',
         name='',
         text=' Tests whether the triggers are working\n        ')

Fragment(uuid='218d0035-36b1-4cfc-afce-32d7665ec6e5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=492,
         depth=4,
         type='documentation',
         name='',
         text='# After insert or update trigger')

Fragment(uuid='ee3ec586-fbdf-489b-a3a4-e1e56b7d0b26',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=493,
         depth=0,
         type='module',
         name='',
         text='        with db.transaction():\n'
              '            # Add a product\n'
              "            hdd = db.new_product(name='hdd')\n"
              '            self.assertTrue(hdd.last_modified is None)\n'
              '            db.add_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is filled '
              'in\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            created = hdd.last_modified\n'
              '            self.assertTrue(created')

Fragment(uuid='487771fe-69f3-45d8-9e6f-4d90c2e16472',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=493,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        with db.transaction():\n'
              '            # Add a product\n'
              "            hdd = db.new_product(name='hdd')\n"
              '            self.assertTrue(hdd.last_modified is None)\n'
              '            db.add_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is filled '
              'in\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            created = hdd.last_modified\n'
              '            self.assertTrue(created')

Fragment(uuid='28705435-d524-4d2e-8fd2-730977c32b6d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=493,
         depth=3,
         type='function',
         name='test_triggers',
         text='        with db.transaction():\n'
              '            # Add a product\n'
              "            hdd = db.new_product(name='hdd')\n"
              '            self.assertTrue(hdd.last_modified is None)\n'
              '            db.add_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is filled '
              'in\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            created = hdd.last_modified\n'
              '            self.assertTrue(created)\n'
              '\n'
              '            # Modify the product\n'
              "            hdd.model = 'Samsung'\n"
              '            hdd.last_modified = created - '
              'datetime.timedelta(days=1)\n'
              '            db.update_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is updated\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            self.assertTrue(hdd.last_modified >= created)\n'
              '\n'
              '        # TODO: Test more triggers')

Fragment(uuid='3e229487-9573-4df5-b465-c87382fb5cbc',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=499,
         depth=6,
         type='documentation',
         name='',
         text='# Check whether the last modified time is filled in')

Fragment(uuid='07d5f891-c323-42ea-a12c-0f2f4a3bbe71',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=502,
         depth=0,
         type='module',
         name='',
         text=')\n'
              '\n'
              '            # Modify the product\n'
              "            hdd.model = 'Samsung'\n"
              '            hdd.last_modified = created - '
              'datetime.timedelta(days=1)\n'
              '            db.update_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is updated\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            self.assertTrue(hdd.last_modified >= created)\n'
              '\n'
              '        # TODO: Test more triggers\n')

Fragment(uuid='3b62852e-b666-4d5b-90ce-654b53257000',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=502,
         depth=1,
         type='class',
         name='TestAbstraction',
         text=')\n'
              '\n'
              '            # Modify the product\n'
              "            hdd.model = 'Samsung'\n"
              '            hdd.last_modified = created - '
              'datetime.timedelta(days=1)\n'
              '            db.update_product(hdd)\n'
              '\n'
              '            # Check whether the last modified time is updated\n'
              '            hdd = db.get_product(hdd.id)\n'
              '            self.assertTrue(hdd.last_modified >= created)\n'
              '\n'
              '        # TODO: Test more triggers\n')

Fragment(uuid='31eb8958-f9cc-4340-b02e-895a4e728d1e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=504,
         depth=6,
         type='documentation',
         name='',
         text='# Modify the product')

Fragment(uuid='db34663f-2944-41a8-b49c-b2f3f6e7608c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=509,
         depth=6,
         type='documentation',
         name='',
         text='# Check whether the last modified time is updated')

Fragment(uuid='4a6eaec8-4360-49a1-97c6-7d04efcbb10d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=513,
         depth=4,
         type='documentation',
         name='',
         text='# TODO: Test more triggers')

Fragment(uuid='77f0e828-22aa-44c3-94e8-5e16d5f74533',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=514,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_full_text_search(self):\n'
              '        """ Tests full text search index\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='3e360f54-50af-487b-9187-ec9d50007d9e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=514,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_full_text_search(self):\n'
              '        """ Tests full text search index\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='9bf26e6f-5e60-49f8-9630-e14d2e56780b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=515,
         depth=3,
         type='function',
         name='test_full_text_search',
         text='def test_full_text_search(self):\n'
              '        """ Tests full text search index\n'
              '        """\n'
              '        db = self.db\n'
              '        assert isinstance(db, self.abstraction.TestDatabase)\n')

Fragment(uuid='b1bf983d-18fa-47e8-a970-e7880ff07959',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=516,
         depth=6,
         type='documentation',
         name='',
         text=' Tests full text search index\n        ')

Fragment(uuid='17f5090f-f847-4af8-abef-1bc5b8bfc265',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=520,
         depth=0,
         type='module',
         name='',
         text='\n        with db.transaction():\n            self.load_data()\n')

Fragment(uuid='29736f78-f823-40d7-b7d2-878687b7000e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=520,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n        with db.transaction():\n            self.load_data()\n')

Fragment(uuid='f98f059a-1f12-4602-b95e-ce42e7280279',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=520,
         depth=3,
         type='function',
         name='test_full_text_search',
         text='\n        with db.transaction():\n            self.load_data()\n')

Fragment(uuid='26db9821-aea3-4ae3-af50-f06dd175856f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=523,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = '
              "db.find_user_list(full_text_search='viktor:*')\n"
              '        self.assertEqual(len(user_list), 1)\n'
              "        self.assertEqual(user_list[0].first_name, 'Viktor')\n")

Fragment(uuid='9d5618c4-3c93-473e-9bf7-520b91662d66',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=523,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = '
              "db.find_user_list(full_text_search='viktor:*')\n"
              '        self.assertEqual(len(user_list), 1)\n'
              "        self.assertEqual(user_list[0].first_name, 'Viktor')\n")

Fragment(uuid='35c27a43-af52-476c-b50f-0be3ca0d4e6a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=523,
         depth=3,
         type='function',
         name='test_full_text_search',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = '
              "db.find_user_list(full_text_search='viktor:*')\n"
              '        self.assertEqual(len(user_list), 1)\n'
              "        self.assertEqual(user_list[0].first_name, 'Viktor')\n")

Fragment(uuid='43560331-72dc-41e0-807a-dcff72a6cdfd',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=528,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = db.find_user_list(\n'
              "                full_text_search='ferenczi', "
              "order_by=('first_name', 'last_name'))\n"
              '        self.assertEqual(len(user_list), 2)\n'
              "        self.assertEqual(user_list[0].first_name, 'Anna')\n"
              "        self.assertEqual(user_list[1].first_name, 'Viktor')\n")

Fragment(uuid='c8f1583a-a492-4140-8e50-6757f528724d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=528,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = db.find_user_list(\n'
              "                full_text_search='ferenczi', "
              "order_by=('first_name', 'last_name'))\n"
              '        self.assertEqual(len(user_list), 2)\n'
              "        self.assertEqual(user_list[0].first_name, 'Anna')\n"
              "        self.assertEqual(user_list[1].first_name, 'Viktor')\n")

Fragment(uuid='b56b0b6a-734f-4bef-a91c-23faa3df1c27',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=528,
         depth=3,
         type='function',
         name='test_full_text_search',
         text='\n'
              '        with db.transaction():\n'
              '            user_list = db.find_user_list(\n'
              "                full_text_search='ferenczi', "
              "order_by=('first_name', 'last_name'))\n"
              '        self.assertEqual(len(user_list), 2)\n'
              "        self.assertEqual(user_list[0].first_name, 'Anna')\n"
              "        self.assertEqual(user_list[1].first_name, 'Viktor')")

Fragment(uuid='6a810d0a-d7f8-48ca-9291-31221537c5da',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=535,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_repr_str(self):\n'
              '        """ Tests whether all the objects can be printed\n'
              '        """\n'
              '        obj_list = (\n'
              '            self.db,\n'
              '            self.abstraction.TestDatabase,\n'
              '            model.User,\n'
              '            model.Product,\n'
              '            model.ProductSale)\n'
              '        for obj in obj_list:\n'
              '            for name in dir(obj):\n'
              "                if name.startswith('__'):\n"
              '                    continue\n'
              '                value = getattr(obj, name)\n'
              '                self.assertTrue(repr(value))\n'
              "                self.assertTrue(':' + str(value))\n")

Fragment(uuid='0d7919b2-7169-42d4-b5ae-bb311906d2cf',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=535,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_repr_str(self):\n'
              '        """ Tests whether all the objects can be printed\n'
              '        """\n'
              '        obj_list = (\n'
              '            self.db,\n'
              '            self.abstraction.TestDatabase,\n'
              '            model.User,\n'
              '            model.Product,\n'
              '            model.ProductSale)\n'
              '        for obj in obj_list:\n'
              '            for name in dir(obj):\n'
              "                if name.startswith('__'):\n"
              '                    continue\n'
              '                value = getattr(obj, name)\n'
              '                self.assertTrue(repr(value))\n'
              "                self.assertTrue(':' + str(value))\n")

Fragment(uuid='87757b8d-967e-4e4d-ae1d-1b3313eaf833',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=536,
         depth=3,
         type='function',
         name='test_repr_str',
         text='def test_repr_str(self):\n'
              '        """ Tests whether all the objects can be printed\n'
              '        """\n'
              '        obj_list = (\n'
              '            self.db,\n'
              '            self.abstraction.TestDatabase,\n'
              '            model.User,\n'
              '            model.Product,\n'
              '            model.ProductSale)\n'
              '        for obj in obj_list:\n'
              '            for name in dir(obj):\n'
              "                if name.startswith('__'):\n"
              '                    continue\n'
              '                value = getattr(obj, name)\n'
              '                self.assertTrue(repr(value))\n'
              "                self.assertTrue(':' + str(value))")

Fragment(uuid='9e21a506-58df-4d98-beb0-bae5761134b3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=537,
         depth=6,
         type='documentation',
         name='',
         text=' Tests whether all the objects can be printed\n        ')

Fragment(uuid='5fcc5515-c649-4076-8f32-6124f12c3fbe',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=552,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_tuple_dict(self):\n'
              '        """ Tests whether the field values can be acquired\n'
              '        """\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        for product in self.db.get_product_iter():\n'
              '            break\n'
              '        assert isinstance(product, '
              'self.abstraction.ProductRecord)\n'
              '\n'
              '        field_dict = product.dict\n'
              '        field_tuple = product.tuple\n'
              '        self.assertEqual(len(field_dict), len(field_tuple))\n'
              '        self.assertEqual(field_tuple, tuple(field_dict[name] '
              'for name in product._column_name_list))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(*field_tuple))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(**field_dict))\n')

Fragment(uuid='ed50ae3d-3748-4521-9477-37bcbb0c246e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=552,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_tuple_dict(self):\n'
              '        """ Tests whether the field values can be acquired\n'
              '        """\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        for product in self.db.get_product_iter():\n'
              '            break\n'
              '        assert isinstance(product, '
              'self.abstraction.ProductRecord)\n'
              '\n'
              '        field_dict = product.dict\n'
              '        field_tuple = product.tuple\n'
              '        self.assertEqual(len(field_dict), len(field_tuple))\n'
              '        self.assertEqual(field_tuple, tuple(field_dict[name] '
              'for name in product._column_name_list))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(*field_tuple))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(**field_dict))\n')

Fragment(uuid='1d2ad1a0-0a48-415c-82bb-5b428d1709f7',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=553,
         depth=3,
         type='function',
         name='test_tuple_dict',
         text='def test_tuple_dict(self):\n'
              '        """ Tests whether the field values can be acquired\n'
              '        """\n'
              '        with self.db.transaction():\n'
              '            self.load_data()\n'
              '\n'
              '        for product in self.db.get_product_iter():\n'
              '            break\n'
              '        assert isinstance(product, '
              'self.abstraction.ProductRecord)\n'
              '\n'
              '        field_dict = product.dict\n'
              '        field_tuple = product.tuple\n'
              '        self.assertEqual(len(field_dict), len(field_tuple))\n'
              '        self.assertEqual(field_tuple, tuple(field_dict[name] '
              'for name in product._column_name_list))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(*field_tuple))\n'
              '        self.assertEqual(product, '
              'self.db.new_product(**field_dict))')

Fragment(uuid='d55a533d-e86d-4153-9964-4a17cb16e64d',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=554,
         depth=6,
         type='documentation',
         name='',
         text=' Tests whether the field values can be acquired\n        ')

Fragment(uuid='d0f68362-8500-4877-8db3-f2f4afd28431',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=569,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_order_by(self):\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('+first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, find_result_l')

Fragment(uuid='51dcd5c6-c80a-4c4c-9f80-8e1099ffd9c2',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=569,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_order_by(self):\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('+first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, find_result_l')

Fragment(uuid='7275101c-4a55-4838-ae38-0690c2db18c4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=570,
         depth=3,
         type='function',
         name='test_order_by',
         text='def test_order_by(self):\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('+first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, find_result_lis')

Fragment(uuid='e5c6cab4-9c68-4ee5-be77-4bfb1e24cf60',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=578,
         depth=0,
         type='module',
         name='',
         text='ist)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('-first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+id',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-id',))\n"
              '        find_result_list.reverse()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n')

Fragment(uuid='559506c2-c6c6-4ef2-b869-6ae0f8f3a84e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=578,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='ist)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('-first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+id',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-id',))\n"
              '        find_result_list.reverse()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n')

Fragment(uuid='3c685e9e-41cc-4b2f-b0bf-a1ca8ef7c683',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=578,
         depth=3,
         type='function',
         name='test_order_by',
         text='t)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('-first_name',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-first_name',))\n"
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)\n'
              '\n'
              '        get_result_list = '
              "self.db.get_user_list(order_by=('+id',))\n"
              '        find_result_list = '
              "self.db.find_user_list(order_by=('-id',))\n"
              '        find_result_list.reverse()\n'
              '        self.assertAlmostEqual(get_result_list, '
              'find_result_list)')

Fragment(uuid='ba475e53-f8b4-4854-b824-c24435df92a8',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=588,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_class_formatting(self):\n'
              '\n'
              '        code = model.TestDatabaseModel.pretty_format_class()\n'
              '        namespace = {}\n'
              '        exec(code, namespace, namespace)\n'
              '        database_model_class = '
              "namespace.get('TestDatabaseModel')\n"
              '        self.assertTrue(issubclass(database_model_class, '
              'model.database.Database))\n')

Fragment(uuid='2a63b5ab-a0fe-407b-bf0e-e6eb4abafc09',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=588,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_class_formatting(self):\n'
              '\n'
              '        code = model.TestDatabaseModel.pretty_format_class()\n'
              '        namespace = {}\n'
              '        exec(code, namespace, namespace)\n'
              '        database_model_class = '
              "namespace.get('TestDatabaseModel')\n"
              '        self.assertTrue(issubclass(database_model_class, '
              'model.database.Database))\n')

Fragment(uuid='270cc816-86af-4fd1-a7b0-5ce669694cc1',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=589,
         depth=3,
         type='function',
         name='test_class_formatting',
         text='def test_class_formatting(self):\n'
              '\n'
              '        code = model.TestDatabaseModel.pretty_format_class()\n'
              '        namespace = {}\n'
              '        exec(code, namespace, namespace)\n'
              '        database_model_class = '
              "namespace.get('TestDatabaseModel')\n"
              '        self.assertTrue(issubclass(database_model_class, '
              'model.database.Database))\n')

Fragment(uuid='8ec8fe93-e6df-4028-b455-44cfff189a56',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=596,
         depth=0,
         type='module',
         name='',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            old_source = module_file.read()\n'
              '\n'
              '        '
              'model.generate(database_model_class=database_model_class)\n')

Fragment(uuid='16582c67-f525-4dd8-95b4-9b580a3c7487',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=596,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            old_source = module_file.read()\n'
              '\n'
              '        '
              'model.generate(database_model_class=database_model_class)\n')

Fragment(uuid='7163c9a9-672a-4fc4-ac07-3b512e11f321',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=596,
         depth=3,
         type='function',
         name='test_class_formatting',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            old_source = module_file.read()\n'
              '\n'
              '        '
              'model.generate(database_model_class=database_model_class)\n')

Fragment(uuid='1c9ad21a-5ac5-4c95-aeb2-2d7ca783ed40',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=601,
         depth=0,
         type='module',
         name='',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            new_source = module_file.read()\n'
              '\n'
              '        # Ignore the module docstring, since that contains a '
              'timestamp\n'
              "        RX_TIMESTAMP = re.compile('\\d{4}-\\d{2}-\\d{2} "
              "\\d{2}:\\d{2}:\\d{2}')\n"
              "        old_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'old_source)[1]\n'
              "        new_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'new_source)[1]\n'
              '\n'
              '        self.assertEqual(old_source, new_source)\n')

Fragment(uuid='17cf1270-1426-4795-ac61-230698fc2fda',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=601,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            new_source = module_file.read()\n'
              '\n'
              '        # Ignore the module docstring, since that contains a '
              'timestamp\n'
              "        RX_TIMESTAMP = re.compile('\\d{4}-\\d{2}-\\d{2} "
              "\\d{2}:\\d{2}:\\d{2}')\n"
              "        old_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'old_source)[1]\n'
              "        new_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'new_source)[1]\n'
              '\n'
              '        self.assertEqual(old_source, new_source)\n')

Fragment(uuid='7dbb8c3d-db46-4bf9-98ba-fd16ff5f202e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=601,
         depth=3,
         type='function',
         name='test_class_formatting',
         text='\n'
              "        with open('abstraction.py', 'rt') as module_file:\n"
              '            new_source = module_file.read()\n'
              '\n'
              '        # Ignore the module docstring, since that contains a '
              'timestamp\n'
              "        RX_TIMESTAMP = re.compile('\\d{4}-\\d{2}-\\d{2} "
              "\\d{2}:\\d{2}:\\d{2}')\n"
              "        old_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'old_source)[1]\n'
              "        new_source = RX_TIMESTAMP.subn('<TIMESTAMP>', "
              'new_source)[1]\n'
              '\n'
              '        self.assertEqual(old_source, new_source)')

Fragment(uuid='614ee003-fae4-4a6f-a9f7-ffa0a712f06e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=605,
         depth=4,
         type='documentation',
         name='',
         text='# Ignore the module docstring, since that contains a timestamp')

Fragment(uuid='44ae5bad-6195-4843-8102-70216243e78a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=606,
         depth=9,
         type='documentation',
         name='',
         text='\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}')

Fragment(uuid='82343e87-6223-4eab-b899-3d1819bdcd9b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=611,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_inspection(self):\n'
              '\n'
              '        from dblayer.backend.postgresql import inspector\n'
              '\n'
              '        dsn = test_constants.TEST_DSN\n'
              '        \n'
              '        db = inspector.DatabaseInspector()\n'
              "        database_class = db.inspect(dsn, 'InspectedDatabase')\n"
              '        self.assertTrue(issubclass(database_class, '
              'dblayer.model.database.Database))\n'
              '\n'
              '        source = database_class.pretty_format_class()\n'
              '\n'
              '        inspected_model_path = os.path.join(MODEL_DIR, '
              "'inspected_model.py')\n")

Fragment(uuid='0436e9cb-2f14-4b99-9da6-8afd96c77a77',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=611,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '    def test_inspection(self):\n'
              '\n'
              '        from dblayer.backend.postgresql import inspector\n'
              '\n'
              '        dsn = test_constants.TEST_DSN\n'
              '        \n'
              '        db = inspector.DatabaseInspector()\n'
              "        database_class = db.inspect(dsn, 'InspectedDatabase')\n"
              '        self.assertTrue(issubclass(database_class, '
              'dblayer.model.database.Database))\n'
              '\n'
              '        source = database_class.pretty_format_class()\n'
              '\n'
              '        inspected_model_path = os.path.join(MODEL_DIR, '
              "'inspected_model.py')\n")

Fragment(uuid='bb0ef7c4-4602-42b7-8a17-a9424e072a1e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=612,
         depth=3,
         type='function',
         name='test_inspection',
         text='def test_inspection(self):\n'
              '\n'
              '        from dblayer.backend.postgresql import inspector\n'
              '\n'
              '        dsn = test_constants.TEST_DSN\n'
              '        \n'
              '        db = inspector.DatabaseInspector()\n'
              "        database_class = db.inspect(dsn, 'InspectedDatabase')\n"
              '        self.assertTrue(issubclass(database_class, '
              'dblayer.model.database.Database))\n'
              '\n'
              '        source = database_class.pretty_format_class()\n'
              '\n'
              '        inspected_model_path = os.path.join(MODEL_DIR, '
              "'inspected_model.py')\n")

Fragment(uuid='00f4a4dc-e61f-4df4-8c62-3c6cd5d94bd4',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=614,
         depth=5,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='f226d17b-c6aa-44d6-a483-06e7f7cd7c13',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=614,
         depth=5,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='448f1410-064c-4e9f-98cd-369e3190d75a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=625,
         depth=0,
         type='module',
         name='',
         text="        with open(inspected_model_path, 'wt') as "
              'inspected_model_file:\n'
              '            inspected_model_file.write(source)\n'
              '\n'
              '        from dblayer.test import inspected_model\n'
              '\n'
              '        inspected_database = inspected_model.InspectedDatabase\n'
              '        self.assertTrue(inspected_database, '
              'dblayer.model.database.Database)\n'
              '\n'
              '        for table in inspected_database._table_list:\n'
              '            self.assertIsInstance(table, '
              'dblayer.model.table.Table)\n'
              '\n'
              '        model.generate(\n'
              "            module_path='inspected_abstraction.py',\n"
              '            database_model_class=inspected_database,\n'
              "            abstraction_class_name='InspectedDatabase')\n"
              '\n'
              '        from dblayer.test import inspected_abstraction\n'
              '\n'
              '        db = inspected_abstraction.InspectedDatabase()\n')

Fragment(uuid='ddb76d26-9ebe-48eb-bf48-1ff3e27c404c',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=625,
         depth=1,
         type='class',
         name='TestAbstraction',
         text="        with open(inspected_model_path, 'wt') as "
              'inspected_model_file:\n'
              '            inspected_model_file.write(source)\n'
              '\n'
              '        from dblayer.test import inspected_model\n'
              '\n'
              '        inspected_database = inspected_model.InspectedDatabase\n'
              '        self.assertTrue(inspected_database, '
              'dblayer.model.database.Database)\n'
              '\n'
              '        for table in inspected_database._table_list:\n'
              '            self.assertIsInstance(table, '
              'dblayer.model.table.Table)\n'
              '\n'
              '        model.generate(\n'
              "            module_path='inspected_abstraction.py',\n"
              '            database_model_class=inspected_database,\n'
              "            abstraction_class_name='InspectedDatabase')\n"
              '\n'
              '        from dblayer.test import inspected_abstraction\n'
              '\n'
              '        db = inspected_abstraction.InspectedDatabase()\n')

Fragment(uuid='9a004304-27ae-4e7a-b040-810854566045',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=625,
         depth=3,
         type='function',
         name='test_inspection',
         text="        with open(inspected_model_path, 'wt') as "
              'inspected_model_file:\n'
              '            inspected_model_file.write(source)\n'
              '\n'
              '        from dblayer.test import inspected_model\n'
              '\n'
              '        inspected_database = inspected_model.InspectedDatabase\n'
              '        self.assertTrue(inspected_database, '
              'dblayer.model.database.Database)\n'
              '\n'
              '        for table in inspected_database._table_list:\n'
              '            self.assertIsInstance(table, '
              'dblayer.model.table.Table)\n'
              '\n'
              '        model.generate(\n'
              "            module_path='inspected_abstraction.py',\n"
              '            database_model_class=inspected_database,\n'
              "            abstraction_class_name='InspectedDatabase')\n"
              '\n'
              '        from dblayer.test import inspected_abstraction\n'
              '\n'
              '        db = inspected_abstraction.InspectedDatabase()\n')

Fragment(uuid='95c1a68d-3e7b-42db-a34f-13f22ab47d29',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=628,
         depth=5,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='022d4362-a886-4644-9242-1912924c77ec',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=628,
         depth=5,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='3395c792-494a-48e7-ad32-fac2502bfbd5',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=637,
         depth=9,
         type='documentation',
         name='',
         text='inspected_abstraction.py')

Fragment(uuid='aca495c0-47ab-43da-9032-ffe8ffedc3e9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=641,
         depth=5,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='4f58202a-8fa3-4901-888a-807fc4a52e58',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=641,
         depth=5,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='23d3d6e1-ea03-4185-8628-c28ec5afd238',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=644,
         depth=0,
         type='module',
         name='',
         text='        with db.session(dsn):\n')

Fragment(uuid='8fcafe40-d8ab-46a4-8b55-1303ec74e6ae',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=644,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='        with db.session(dsn):\n')

Fragment(uuid='3f18716c-6df2-458b-9ba4-74fa21afbff9',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=644,
         depth=3,
         type='function',
         name='test_inspection',
         text='        with db.session(dsn):\n')

Fragment(uuid='ef01b645-ba8a-4d61-bf9d-7dd248097d4f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=645,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            with db.transaction():\n'
              '                self.load_data(db)\n')

Fragment(uuid='8ec15030-2789-4219-93ca-d84622a1dd02',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=645,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='\n'
              '            with db.transaction():\n'
              '                self.load_data(db)\n')

Fragment(uuid='2bd5764f-1f0c-4eaa-bd04-20cf7a7f770b',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=645,
         depth=3,
         type='function',
         name='test_inspection',
         text='\n'
              '            with db.transaction():\n'
              '                self.load_data(db)\n')

Fragment(uuid='6023d7aa-1157-4a77-8fec-ba20547d51d3',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=648,
         depth=0,
         type='module',
         name='',
         text='            with db.transaction():\n'
              '                self.verify_data(db)\n')

Fragment(uuid='68789c6c-4852-4944-8909-3fbf7b48ef4e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=648,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='            with db.transaction():\n'
              '                self.verify_data(db)\n')

Fragment(uuid='be9a350a-3a49-4477-b8ea-0cec1b452d7f',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=648,
         depth=3,
         type='function',
         name='test_inspection',
         text='            with db.transaction():\n'
              '                self.verify_data(db)\n')

Fragment(uuid='20ccdd64-4946-4b8b-8693-1c125e2eea4a',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=650,
         depth=0,
         type='module',
         name='',
         text='            with db.transaction():\n'
              '                self.modify_data(db)\n'
              '\n'
              '            for table in inspected_database._table_list:\n')

Fragment(uuid='901574ad-9dbb-4e5b-b9bc-4ff905f89d5e',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=650,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='            with db.transaction():\n'
              '                self.modify_data(db)\n'
              '\n'
              '            for table in inspected_database._table_list:\n')

Fragment(uuid='4a2873b9-0439-4b77-9069-c3ad837e4014',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=650,
         depth=3,
         type='function',
         name='test_inspection',
         text='            with db.transaction():\n'
              '                self.modify_data(db)\n'
              '\n'
              '            for table in inspected_database._table_list:\n')

Fragment(uuid='1bc63d4b-3b49-4d61-8216-8934e0931999',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=654,
         depth=0,
         type='module',
         name='',
         text='                with db.transaction():\n'
              '                    assert isinstance(table, '
              'dblayer.model.table.Table)\n'
              "                    fn_get = getattr(db, 'get_%s' % "
              'table._table_name)\n'
              "                    fn_find = getattr(db, 'find_%s' % "
              'table._table_name)\n'
              "                    fn_update = getattr(db, 'update_%s' % "
              'table._table_name, None)\n'
              '                    record1 = fn_find()\n'
              '                    if record1 is None:\n'
              '                        continue\n'
              '                    fn_update(record1)\n'
              '                    record2 = fn_get(id=record1.id)\n'
              "                    if hasattr(record2, 'last_modified'):\n"
              '                        record2.last_modified = '
              'record1.last_modified\n'
              '                    self.assertEqual(record1, record2)\n')

Fragment(uuid='8fdbcd41-d8b2-4d65-9d6c-575462681c70',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=654,
         depth=1,
         type='class',
         name='TestAbstraction',
         text='                with db.transaction():\n'
              '                    assert isinstance(table, '
              'dblayer.model.table.Table)\n'
              "                    fn_get = getattr(db, 'get_%s' % "
              'table._table_name)\n'
              "                    fn_find = getattr(db, 'find_%s' % "
              'table._table_name)\n'
              "                    fn_update = getattr(db, 'update_%s' % "
              'table._table_name, None)\n'
              '                    record1 = fn_find()\n'
              '                    if record1 is None:\n'
              '                        continue\n'
              '                    fn_update(record1)\n'
              '                    record2 = fn_get(id=record1.id)\n'
              "                    if hasattr(record2, 'last_modified'):\n"
              '                        record2.last_modified = '
              'record1.last_modified\n'
              '                    self.assertEqual(record1, record2)')

Fragment(uuid='335c871d-c5f7-4e23-b882-c66fd725b472',
         path='/lib/dblayer/test/test_abstraction.py',
         lineno=654,
         depth=3,
         type='function',
         name='test_inspection',
         text='                with db.transaction():\n'
              '                    assert isinstance(table, '
              'dblayer.model.table.Table)\n'
              "                    fn_get = getattr(db, 'get_%s' % "
              'table._table_name)\n'
              "                    fn_find = getattr(db, 'find_%s' % "
              'table._table_name)\n'
              "                    fn_update = getattr(db, 'update_%s' % "
              'table._table_name, None)\n'
              '                    record1 = fn_find()\n'
              '                    if record1 is None:\n'
              '                        continue\n'
              '                    fn_update(record1)\n'
              '                    record2 = fn_get(id=record1.id)\n'
              "                    if hasattr(record2, 'last_modified'):\n"
              '                        record2.last_modified = '
              'record1.last_modified\n'
              '                    self.assertEqual(record1, record2)')

Fragment(uuid='1d168db3-75ed-4fc7-96ff-a7ea777c2699',
         path='/lib/dblayer/util.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='""" Utility functions\n'
              '"""\n'
              '\n'
              'import datetime\n'
              'import itertools\n'
              'import random\n'
              '\n'
              'from dblayer import constants\n'
              '\n'
              '\n'
              'def get_next_definition_serial(iterator=itertools.count()):\n'
              '    """ Returns the next serial used to sort model definition '
              'instances\n'
              '    """\n'
              '    return next(iterator)\n'
              '\n'
              '\n'
              'def get_random_id(random=random.SystemRandom()):\n'
              '    """ Returns a new random database ID value\n'
              '    """\n'
              '    return random.randrange(*constants.DATABASE_ID_RANGE)\n'
              '\n'
              '\n'
              'def log(msg, *args):\n'
              '    """ Log\n'
              '    """\n'
              '    print\n'
              "    '%s: %s' % (\n"
              "        datetime.datetime.now().isoformat(' '),\n"
              '        msg % args)\n')

Fragment(uuid='b0ae42b2-35e5-43bc-a865-241ec93ffad7',
         path='/lib/dblayer/util.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/dblayer/util.py\n'
              '  Functions: get_next_definition_serial get_random_id log\n'
              '  Variables and usages: DATABASE_ID_RANGE SystemRandom args '
              'constants count datetime dblayer isoformat iterator itertools '
              'next print random randrange\n')

Fragment(uuid='7fd2d1ce-507b-4274-98f7-ee0e0c682168',
         path='/lib/dblayer/util.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='50a75728-7178-4915-9551-1f81dd20e567',
         path='/lib/dblayer/util.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='f6926ac4-4e2d-4b94-945d-31db244b7c62',
         path='/lib/dblayer/util.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='1c0eeb9d-4752-40bb-a4be-2197882694cc',
         path='/lib/dblayer/util.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='31302d74-b426-49cd-975c-ed0a24299df5',
         path='/lib/dblayer/util.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='681139e8-f927-42c2-b569-b444c25c45d2',
         path='/lib/dblayer/util.py',
         lineno=11,
         depth=1,
         type='function',
         name='get_next_definition_serial',
         text='def get_next_definition_serial(iterator=itertools.count()):\n'
              '    """ Returns the next serial used to sort model definition '
              'instances\n'
              '    """\n'
              '    return next(iterator)')

Fragment(uuid='68ab4094-1f27-4339-9768-aba1b787fbb2',
         path='/lib/dblayer/util.py',
         lineno=12,
         depth=4,
         type='documentation',
         name='',
         text=' Returns the next serial used to sort model definition '
              'instances\n'
              '    ')

Fragment(uuid='2e3a2fe0-4c5b-4dae-b37e-20b44e76e578',
         path='/lib/dblayer/util.py',
         lineno=17,
         depth=1,
         type='function',
         name='get_random_id',
         text='def get_random_id(random=random.SystemRandom()):\n'
              '    """ Returns a new random database ID value\n'
              '    """\n'
              '    return random.randrange(*constants.DATABASE_ID_RANGE)')

Fragment(uuid='d4e4e8b6-de8e-45a4-896a-6260e570637e',
         path='/lib/dblayer/util.py',
         lineno=18,
         depth=4,
         type='documentation',
         name='',
         text=' Returns a new random database ID value\n    ')

Fragment(uuid='5cf6e54e-7028-4e1c-91e9-fa8c37ef5ebc',
         path='/lib/dblayer/util.py',
         lineno=23,
         depth=1,
         type='function',
         name='log',
         text='def log(msg, *args):\n'
              '    """ Log\n'
              '    """\n'
              '    print\n'
              "    '%s: %s' % (\n"
              "        datetime.datetime.now().isoformat(' '),\n"
              '        msg % args)')

Fragment(uuid='1b340a14-cbd3-4cca-a944-e71c4b6115b8',
         path='/lib/dblayer/version.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text="__version__ = '0.7'\n__release__ = '0.7.0'\n")

Fragment(uuid='aab6ec44-e9fc-41b4-879a-6293dfadf369',
         path='/lib/setup.cfg',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text="[egg_info]\ntag_svn_revision = 0\ntag_build = ''\ntag_date = 0\n")

Fragment(uuid='ac9fcd69-0ba6-4dd2-bb63-78cf2f644cc5',
         path='/lib/setup.cfg',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /lib/setup.cfg\n')

Fragment(uuid='2ee9bc15-150c-40a7-b9a7-eaac4dfe86e0',
         path='/lib/setup.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import setuptools\n'
              '\n'
              '# Get version info\n'
              '__version__ = None\n'
              '__release__ = None\n'
              'exec\n'
              "open('dblayer/version.py')\n"
              '\n'
              'setuptools.setup(\n'
              "    name='dblayer',\n"
              '    version=__release__,\n'
              "    description='Database Abstraction Layer Generator',\n"
              "    long_description='''\\\n"
              'Generates database abstraction layer in Python based on a\n'
              'readable definition written as Python classes. Supports\n'
              'defining of tables, basic column types, indexes,\n'
              'con')

Fragment(uuid='640d5cb8-eb94-44d3-ab36-6ccdd6282fd0',
         path='/lib/setup.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='cf4d3d70-ed2d-4286-b69e-beb3665cf073',
         path='/lib/setup.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /lib/setup.py\n'
              '  Variables and usages: author author_email classifiers '
              'description exec include_package_data install_requires keywords '
              'license long_description name open package_data packages setup '
              'setuptools test_suite version zip_safe\n')

Fragment(uuid='cc2de873-9da7-4138-893c-f0577a4c65a0',
         path='/lib/setup.py',
         lineno=12,
         depth=5,
         type='documentation',
         name='',
         text='Database Abstraction Layer Generator')

Fragment(uuid='e51e6534-8dd4-4b97-b97e-1988cc1d6185',
         path='/lib/setup.py',
         lineno=13,
         depth=5,
         type='documentation',
         name='',
         text='\\\n'
              'Generates database abstraction layer in Python based on a\n'
              'readable definition written as Python classes. Supports\n'
              'defining of tables, basic column types, indexes,\n'
              'constraints, full text search and complex queries.\n'
              'Provides a light-weight approach of database access with\n'
              'minimal runtime overhead and without any kind of hidden\n'
              'magic, metaclasses or so. Provides maximum possible\n'
              'support for auto completion in Python IDEs.')

Fragment(uuid='9eb4c47e-6c4b-48af-8917-66ae2d6483b4',
         path='/lib/setup.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='straints, full text search and complex queries.\n'
              'Provides a light-weight approach of database access with\n'
              'minimal runtime overhead and without any kind of hidden\n'
              'magic, metaclasses or so. Provides maximum possible\n'
              "support for auto completion in Python IDEs.''',\n"
              '    classifiers=[\n'
              "        'Development Status :: 3 - Alpha',\n"
              "        'Operating System :: OS Independent',\n"
              "        'Intended Audience :: Developers',\n"
              "        '")

Fragment(uuid='645e01ae-66aa-490c-845c-dd7fb3d670fc',
         path='/lib/setup.py',
         lineno=23,
         depth=6,
         type='documentation',
         name='',
         text='Development Status :: 3 - Alpha')

Fragment(uuid='268d7ecb-73b1-4bc5-9ca8-06c4a7fc7f17',
         path='/lib/setup.py',
         lineno=24,
         depth=6,
         type='documentation',
         name='',
         text='Operating System :: OS Independent')

Fragment(uuid='4c22972b-6fab-42b2-ae62-e09ff291bd6f',
         path='/lib/setup.py',
         lineno=25,
         depth=6,
         type='documentation',
         name='',
         text='Intended Audience :: Developers')

Fragment(uuid='31b81603-7642-49ea-ad8c-c231b5ad96fe',
         path='/lib/setup.py',
         lineno=26,
         depth=0,
         type='module',
         name='',
         text="License :: OSI Approved :: MIT License',\n"
              "        'Topic :: Software Development :: Libraries :: Python "
              "Modules',\n"
              "        'Topic :: Database',\n"
              "        'Topic :: Software Development :: Code Generators',\n"
              '    ],\n'
              "    keywords='python database orm postgresql abstraction layer "
              "generator codegeneration performance',\n"
              "    author='Viktor Ferenczi',\n"
              "    author_email='viktor@ferenczi.eu',\n"
              "    url='http://code.google.com/p/dblaye")

Fragment(uuid='91eff075-6bac-4565-89dc-1b8fcd801321',
         path='/lib/setup.py',
         lineno=26,
         depth=6,
         type='documentation',
         name='',
         text='License :: OSI Approved :: MIT License')

Fragment(uuid='bbf97917-8b5c-46e3-b66a-045dc2f9450f',
         path='/lib/setup.py',
         lineno=27,
         depth=6,
         type='documentation',
         name='',
         text='Topic :: Software Development :: Libraries :: Python Modules')

Fragment(uuid='453da0bc-a645-43af-a98a-d558948b52d0',
         path='/lib/setup.py',
         lineno=29,
         depth=6,
         type='documentation',
         name='',
         text='Topic :: Software Development :: Code Generators')

Fragment(uuid='fd0a8906-5ec6-4222-ac91-b744a94bcf42',
         path='/lib/setup.py',
         lineno=31,
         depth=5,
         type='documentation',
         name='',
         text='python database orm postgresql abstraction layer generator '
              'codegeneration performance')

Fragment(uuid='677d41e1-a23f-4979-9c7b-dcb29cb543b9',
         path='/lib/setup.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text="r',\n"
              "    license='MIT',\n"
              '    packages=[\n'
              "        'dblayer',\n"
              "        'dblayer.backend.base',\n"
              "        'dblayer.backend.postgresql',\n"
              "        'dblayer.generator',\n"
              "        'dblayer.graph',\n"
              "        'dblayer.model',\n"
              "        'dblayer.test',\n"
              '    ],\n'
              '    package_data={\n'
              "        '': ['template/*.tpl'],\n"
              '    },\n'
              '    include_package_data=True,\n'
              "    test_suite='unittest',\n"
              '    zip_safe=False,\n'
              "    install_requires=['bottle', 'psycopg2'],\n"
              ')\n')

Fragment(uuid='a7d42f6e-cbe2-4706-92e7-f9e5517f1429',
         path='/lib/setup.py',
         lineno=34,
         depth=5,
         type='documentation',
         name='',
         text='http://code.google.com/p/dblayer')

Fragment(uuid='adc78140-0881-47a8-8659-8cc1f86e5af2',
         path='/lib/setup.py',
         lineno=38,
         depth=6,
         type='documentation',
         name='',
         text='dblayer.backend.base')

Fragment(uuid='ab6cf578-0356-4626-a356-e62a46e88ccb',
         path='/lib/setup.py',
         lineno=39,
         depth=6,
         type='documentation',
         name='',
         text='dblayer.backend.postgresql')