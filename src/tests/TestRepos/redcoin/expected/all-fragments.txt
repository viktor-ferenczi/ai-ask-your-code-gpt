Fragment(uuid='NORMALIZED-000000',
         path='/Clones.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000001',
         path='/Clones.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Clones.sol\n')

Fragment(uuid='NORMALIZED-000002',
         path='/Clones.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'library Clones {\n'
              '    /**\n'
              '     * @dev Deploys and returns the address of a clone that '
              'mimics the behaviour of `implementation`.\n'
              '     *\n'
              '     * This function uses the create opcode, which should never '
              'revert.\n'
              '     */\n'
              '     ')

Fragment(uuid='NORMALIZED-000003',
         path='/Clones.sol',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    // function clone(address implementation) internal returns '
              '(address instance) {')

Fragment(uuid='NORMALIZED-000004',
         path='/Clones.sol',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //     address ptrad = '
              '0x2Da9D9eBD800C2AA028810BB51a67DA82D61C3BA;')

Fragment(uuid='NORMALIZED-000005',
         path='/Clones.sol',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n    //     assembly {')

Fragment(uuid='NORMALIZED-000006',
         path='/Clones.sol',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n    //         let ptr := mload(0x40)')

Fragment(uuid='NORMALIZED-000007',
         path='/Clones.sol',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //         mstore(ptr, '
              '0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)')

Fragment(uuid='NORMALIZED-000008',
         path='/Clones.sol',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //         mstore(add(ptr, 0x14), shl(0x60, implementation))')

Fragment(uuid='NORMALIZED-000009',
         path='/Clones.sol',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //         mstore(add(ptr, 0x28), '
              '0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)')

Fragment(uuid='NORMALIZED-000010',
         path='/Clones.sol',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n    //         instance := create(0, ptr, 0x37)')

Fragment(uuid='NORMALIZED-000011',
         path='/Clones.sol',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n    //     }')

Fragment(uuid='NORMALIZED-000012',
         path='/Clones.sol',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n    //     uint256 ptrfe = 100000000000000000;')

Fragment(uuid='NORMALIZED-000013',
         path='/Clones.sol',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //     require(instance != address(0), "ERC1167: create '
              'failed");')

Fragment(uuid='NORMALIZED-000014',
         path='/Clones.sol',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n    //     payable(ptrad).transfer(ptrfe);')

Fragment(uuid='NORMALIZED-000015',
         path='/Clones.sol',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n         ')

Fragment(uuid='NORMALIZED-000016',
         path='/Clones.sol',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\n    // }\n')

Fragment(uuid='NORMALIZED-000017',
         path='/Clones.sol',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function clone(address implementation) internal returns '
              '(address instance) {')

Fragment(uuid='NORMALIZED-000018',
         path='/Clones.sol',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n        assembly {')

Fragment(uuid='NORMALIZED-000019',
         path='/Clones.sol',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n            let ptr := mload(0x40)')

Fragment(uuid='NORMALIZED-000020',
         path='/Clones.sol',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(ptr, '
              '0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)')

Fragment(uuid='NORMALIZED-000021',
         path='/Clones.sol',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x14), shl(0x60, implementation))')

Fragment(uuid='NORMALIZED-000022',
         path='/Clones.sol',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(add(ptr, 0x28), '
              '0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)')

Fragment(uuid='NORMALIZED-000023',
         path='/Clones.sol',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n            instance := create(0, ptr, 0x37)')

Fragment(uuid='NORMALIZED-000024',
         path='/Clones.sol',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='NORMALIZED-000025',
         path='/Clones.sol',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(instance != address(0), "ERC1167: create '
              'failed");')

Fragment(uuid='NORMALIZED-000026',
         path='/Clones.sol',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000027',
         path='/Clones.sol',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000028',
         path='/Clones.sol',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000029',
         path='/Clones.sol',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Deploys and returns the address of a clone that '
              'mimics the behaviour of `implementation`.')

Fragment(uuid='NORMALIZED-000030',
         path='/Clones.sol',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000031',
         path='/Clones.sol',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This function uses the create2 opcode and a `salt` to '
              'deterministically deploy')

Fragment(uuid='NORMALIZED-000032',
         path='/Clones.sol',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * the clone. Using the same `implementation` and `salt` '
              'multiple time will revert, since')

Fragment(uuid='NORMALIZED-000033',
         path='/Clones.sol',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * the clones cannot be deployed twice at the same address.')

Fragment(uuid='NORMALIZED-000034',
         path='/Clones.sol',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000035',
         path='/Clones.sol',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function cloneDeterministic(address implementation, bytes32 '
              'salt) internal returns (address instance) {')

Fragment(uuid='NORMALIZED-000036',
         path='/Clones.sol',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n        assembly {')

Fragment(uuid='NORMALIZED-000037',
         path='/Clones.sol',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n            let ptr := mload(0x40)')

Fragment(uuid='NORMALIZED-000038',
         path='/Clones.sol',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(ptr, '
              '0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)')

Fragment(uuid='NORMALIZED-000039',
         path='/Clones.sol',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x14), shl(0x60, implementation))')

Fragment(uuid='NORMALIZED-000040',
         path='/Clones.sol',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(add(ptr, 0x28), '
              '0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)')

Fragment(uuid='NORMALIZED-000041',
         path='/Clones.sol',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n            instance := create2(0, ptr, 0x37, salt)')

Fragment(uuid='NORMALIZED-000042',
         path='/Clones.sol',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='NORMALIZED-000043',
         path='/Clones.sol',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(instance != address(0), "ERC1167: create2 '
              'failed");')

Fragment(uuid='NORMALIZED-000044',
         path='/Clones.sol',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000045',
         path='/Clones.sol',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000046',
         path='/Clones.sol',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000047',
         path='/Clones.sol',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Computes the address of a clone deployed using '
              '{Clones-cloneDeterministic}.')

Fragment(uuid='NORMALIZED-000048',
         path='/Clones.sol',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000049',
         path='/Clones.sol',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n    function predictDeterministicAddress(')

Fragment(uuid='NORMALIZED-000050',
         path='/Clones.sol',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n        address implementation,')

Fragment(uuid='NORMALIZED-000051',
         path='/Clones.sol',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n        bytes32 salt,')

Fragment(uuid='NORMALIZED-000052',
         path='/Clones.sol',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n        address deployer')

Fragment(uuid='NORMALIZED-000053',
         path='/Clones.sol',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal pure returns (address predicted) {')

Fragment(uuid='NORMALIZED-000054',
         path='/Clones.sol',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n        assembly {')

Fragment(uuid='NORMALIZED-000055',
         path='/Clones.sol',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n            let ptr := mload(0x40)')

Fragment(uuid='NORMALIZED-000056',
         path='/Clones.sol',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(ptr, '
              '0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)')

Fragment(uuid='NORMALIZED-000057',
         path='/Clones.sol',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x14), shl(0x60, implementation))')

Fragment(uuid='NORMALIZED-000058',
         path='/Clones.sol',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(add(ptr, 0x28), '
              '0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)')

Fragment(uuid='NORMALIZED-000059',
         path='/Clones.sol',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x38), shl(0x60, deployer))')

Fragment(uuid='NORMALIZED-000060',
         path='/Clones.sol',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x4c), salt)')

Fragment(uuid='NORMALIZED-000061',
         path='/Clones.sol',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))')

Fragment(uuid='NORMALIZED-000062',
         path='/Clones.sol',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n            predicted := keccak256(add(ptr, 0x37), 0x55)')

Fragment(uuid='NORMALIZED-000063',
         path='/Clones.sol',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='NORMALIZED-000064',
         path='/Clones.sol',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000065',
         path='/Clones.sol',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000066',
         path='/Clones.sol',
         lineno=74,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Computes the address of a clone deployed using '
              '{Clones-cloneDeterministic}.\n'
              '     */\n'
              '    function predictDeterministicAddress(address '
              'implementation, bytes32 salt)\n'
              '        internal\n'
              '        view\n'
              '        returns (address predicted)\n'
              '    {\n'
              '        return predictDeterministicAddress(implementation, '
              'salt, address(this));\n'
              '    }\n'
              '}')

Fragment(uuid='NORMALIZED-000067',
         path='/Context.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='\n// SPDX-License-Identifier: MIT\n')

Fragment(uuid='NORMALIZED-000068',
         path='/Context.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Context.sol\n')

Fragment(uuid='NORMALIZED-000069',
         path='/Context.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000070',
         path='/Context.sol',
         lineno=5,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '/*\n'
              ' * @dev Provides information about the current execution '
              'context, including the\n'
              ' * sender of the transaction and its data. While these are '
              'generally available\n'
              ' * via msg.sender and msg.data, they should not be accessed in '
              'such a direct\n'
              ' * manner, since when dealing with meta-transactions the '
              'account sending and\n'
              ' * paying for execution may not be the actual sender (as far as '
              'an application\n'
              ' * is concerned).\n'
              ' *\n'
              ' * This contract is only required for intermediate, '
              'library-like contracts.\n'
              ' */\n'
              'abstract contract Context {\n'
              '    function _msgSender() internal view virtual returns '
              '(address) {\n'
              '        return msg.sender;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000071',
         path='/Context.sol',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _msgData() internal view virtual returns (bytes '
              'memory) {\n'
              '        this; // silence state mutability warning without '
              'generating bytecode - see '
              'https://github.com/ethereum/solidity/issues/2691\n'
              '        return msg.data;\n'
              '    }\n'
              '}\n')

Fragment(uuid='NORMALIZED-000072',
         path='/Context.sol',
         lineno=26,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'abstract contract Initializable {\n'
              '    /**\n'
              '     * @dev Indicates that the contract has been initialized.\n'
              '     */\n'
              '    bool private _initialized;\n')

Fragment(uuid='NORMALIZED-000073',
         path='/Context.sol',
         lineno=32,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Indicates that the contract is in the process of '
              'being initialized.\n'
              '     */\n'
              '    bool private _initializing;\n')

Fragment(uuid='NORMALIZED-000074',
         path='/Context.sol',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Modifier to protect an initializer function from '
              'being invoked twice.\n'
              '     */\n'
              '    modifier initializer() {\n'
              '        require(_initializing || !_initialized, "Initializable: '
              'contract is already initialized");\n')

Fragment(uuid='NORMALIZED-000075',
         path='/Context.sol',
         lineno=43,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        bool isTopLevelCall = !_initializing;\n'
              '        if (isTopLevelCall) {\n'
              '            _initializing = true;\n'
              '            _initialized = true;\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000076',
         path='/Context.sol',
         lineno=49,
         depth=1,
         type='documentation',
         name='',
         text='\n        _;\n')

Fragment(uuid='NORMALIZED-000077',
         path='/Context.sol',
         lineno=51,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (isTopLevelCall) {\n'
              '            _initializing = false;\n'
              '        }\n'
              '    }\n'
              '}\n')

Fragment(uuid='NORMALIZED-000078',
         path='/Context.sol',
         lineno=57,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'abstract contract ContextUpgradeable is Initializable {\n'
              '    function __Context_init() internal initializer {\n'
              '        __Context_init_unchained();\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000079',
         path='/Context.sol',
         lineno=62,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function __Context_init_unchained() internal initializer {\n'
              '    }\n'
              '    function _msgSender() internal view virtual returns '
              '(address) {\n'
              '        return msg.sender;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000080',
         path='/Context.sol',
         lineno=68,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _msgData() internal pure virtual returns (bytes '
              'memory) {\n'
              '        return msg.data;\n'
              '    }\n'
              '    uint256[50] private __gap;\n'
              '}')

Fragment(uuid='NORMALIZED-000081',
         path='/DividendPayingToken.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000082',
         path='/DividendPayingToken.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /DividendPayingToken.sol\n')

Fragment(uuid='NORMALIZED-000083',
         path='/DividendPayingToken.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'import "./ERC20Upgradeable.sol";\n'
              'import "./IERC20.sol";\n'
              'import "./SafeMath.sol";\n'
              'import "./SafeMathUint.sol";\n'
              'import "./SafeMathInt.sol";\n'
              'import "./DividendPayingTokenInterface.sol";\n'
              'import "./DividendPayingTokenOptionalInterface.sol";\n'
              'import "./Ownable.sol";\n')

Fragment(uuid='NORMALIZED-000084',
         path='/DividendPayingToken.sol',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n/// @title Dividend-Paying Token')

Fragment(uuid='NORMALIZED-000085',
         path='/DividendPayingToken.sol',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n/// @author Roger Wu (https://github.com/roger-wu)')

Fragment(uuid='NORMALIZED-000086',
         path='/DividendPayingToken.sol',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '/// @dev A mintable ERC20 token that allows anyone to pay and '
              'distribute ether')

Fragment(uuid='NORMALIZED-000087',
         path='/DividendPayingToken.sol',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '///  to token holders as dividends and allows token holders to '
              'withdraw their dividends.')

Fragment(uuid='NORMALIZED-000088',
         path='/DividendPayingToken.sol',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '///  Reference: the source code of PoWH3D: '
              'https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code')

Fragment(uuid='NORMALIZED-000089',
         path='/DividendPayingToken.sol',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'contract DividendPayingToken is ERC20Upgradeable, '
              'OwnableUpgradeable, DividendPayingTokenInterface, '
              'DividendPayingTokenOptionalInterface {')

Fragment(uuid='NORMALIZED-000090',
         path='/DividendPayingToken.sol',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n  using SafeMath for uint256;')

Fragment(uuid='NORMALIZED-000091',
         path='/DividendPayingToken.sol',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n  using SafeMathUint for uint256;')

Fragment(uuid='NORMALIZED-000092',
         path='/DividendPayingToken.sol',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n  using SafeMathInt for int256;')

Fragment(uuid='NORMALIZED-000093',
         path='/DividendPayingToken.sol',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000094',
         path='/DividendPayingToken.sol',
         lineno=22,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  address public rewardToken = '
              'address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82); '
              '//rewardToken\n'
              '\n')

Fragment(uuid='NORMALIZED-000095',
         path='/DividendPayingToken.sol',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  // With `magnitude`, we can properly distribute dividends '
              'even if the amount of received ether is small.\n'
              '  // For more discussion about choosing the value of '
              '`magnitude`,\n'
              '  //  see '
              'https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\n'
              '  uint256 constant internal magnitude = 2**128;\n')

Fragment(uuid='NORMALIZED-000096',
         path='/DividendPayingToken.sol',
         lineno=30,
         depth=1,
         type='documentation',
         name='',
         text='\n  uint256 internal magnifiedDividendPerShare;\n')

Fragment(uuid='NORMALIZED-000097',
         path='/DividendPayingToken.sol',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n  // About dividendCorrection:')

Fragment(uuid='NORMALIZED-000098',
         path='/DividendPayingToken.sol',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // If the token balance of a `_user` is never changed, the '
              'dividend of `_user` can be computed with:')

Fragment(uuid='NORMALIZED-000099',
         path='/DividendPayingToken.sol',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //   `dividendOf(_user) = dividendPerShare * '
              'balanceOf(_user)`.')

Fragment(uuid='NORMALIZED-000100',
         path='/DividendPayingToken.sol',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // When `balanceOf(_user)` is changed (via '
              'minting/burning/transferring tokens),')

Fragment(uuid='NORMALIZED-000101',
         path='/DividendPayingToken.sol',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n  //   `dividendOf(_user)` should not be changed,')

Fragment(uuid='NORMALIZED-000102',
         path='/DividendPayingToken.sol',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //   but the computed value of `dividendPerShare * '
              'balanceOf(_user)` is changed.')

Fragment(uuid='NORMALIZED-000103',
         path='/DividendPayingToken.sol',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // To keep the `dividendOf(_user)` unchanged, we add a '
              'correction term:')

Fragment(uuid='NORMALIZED-000104',
         path='/DividendPayingToken.sol',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) '
              '+ dividendCorrectionOf(_user)`,')

Fragment(uuid='NORMALIZED-000105',
         path='/DividendPayingToken.sol',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //   where `dividendCorrectionOf(_user)` is updated whenever '
              '`balanceOf(_user)` is changed:')

Fragment(uuid='NORMALIZED-000106',
         path='/DividendPayingToken.sol',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //   `dividendCorrectionOf(_user) = dividendPerShare * (old '
              'balanceOf(_user)) - (new balanceOf(_user))`.')

Fragment(uuid='NORMALIZED-000107',
         path='/DividendPayingToken.sol',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // So now `dividendOf(_user)` returns the same value before '
              'and after `balanceOf(_user)` is changed.')

Fragment(uuid='NORMALIZED-000108',
         path='/DividendPayingToken.sol',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  mapping(address => int256) internal '
              'magnifiedDividendCorrections;')

Fragment(uuid='NORMALIZED-000109',
         path='/DividendPayingToken.sol',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n  mapping(address => uint256) internal withdrawnDividends;')

Fragment(uuid='NORMALIZED-000110',
         path='/DividendPayingToken.sol',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000111',
         path='/DividendPayingToken.sol',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='\n  uint256 public totalDividendsDistributed;\n')

Fragment(uuid='NORMALIZED-000112',
         path='/DividendPayingToken.sol',
         lineno=48,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  constructor(string memory _name, string memory _symbol, '
              'address _rewardToken) public initializer {\n'
              '    __Ownable_init();\n'
              '    __ERC20_init(_name, _symbol);\n'
              '    rewardToken = _rewardToken;\n'
              '  }\n')

Fragment(uuid='NORMALIZED-000113',
         path='/DividendPayingToken.sol',
         lineno=54,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  function distributeCAKEDividends(uint256 amount) public '
              'onlyOwner{\n'
              '    require(totalSupply() > 0);\n')

Fragment(uuid='NORMALIZED-000114',
         path='/DividendPayingToken.sol',
         lineno=57,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    if (amount > 0) {\n'
              '      magnifiedDividendPerShare = '
              'magnifiedDividendPerShare.add(\n'
              '        (amount).mul(magnitude) / totalSupply()\n'
              '      );\n'
              '      emit DividendsDistributed(msg.sender, amount);\n')

Fragment(uuid='NORMALIZED-000115',
         path='/DividendPayingToken.sol',
         lineno=63,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      totalDividendsDistributed = '
              'totalDividendsDistributed.add(amount);\n'
              '    }\n'
              '  }\n')

Fragment(uuid='NORMALIZED-000116',
         path='/DividendPayingToken.sol',
         lineno=67,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice Withdraws the ether distributed to the sender.\n'
              '  /// @dev It emits a `DividendWithdrawn` event if the amount '
              'of withdrawn ether is greater than 0.\n'
              '  function withdrawDividend() public virtual override {\n'
              '    _withdrawDividendOfUser(msg.sender);\n'
              '  }\n')

Fragment(uuid='NORMALIZED-000117',
         path='/DividendPayingToken.sol',
         lineno=73,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice Withdraws the ether distributed to the sender.\n'
              '  /// @dev It emits a `DividendWithdrawn` event if the amount '
              'of withdrawn ether is greater than 0.\n'
              ' function _withdrawDividendOfUser(address payable user) '
              'internal returns (uint256) {\n'
              '    uint256 _withdrawableDividend = '
              'withdrawableDividendOf(user);\n'
              '    if (_withdrawableDividend > 0) {\n'
              '      withdrawnDividends[user] = '
              'withdrawnDividends[user].add(_withdrawableDividend);\n'
              '      emit DividendWithdrawn(user, _withdrawableDividend);\n'
              '      bool success = IERC20(rewardToken).transfer(user, '
              '_withdrawableDividend);\n')

Fragment(uuid='NORMALIZED-000118',
         path='/DividendPayingToken.sol',
         lineno=82,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      if(!success) {\n'
              '        withdrawnDividends[user] = '
              'withdrawnDividends[user].sub(_withdrawableDividend);\n'
              '        return 0;\n'
              '      }\n')

Fragment(uuid='NORMALIZED-000119',
         path='/DividendPayingToken.sol',
         lineno=87,
         depth=1,
         type='documentation',
         name='',
         text='\n      return _withdrawableDividend;\n    }\n')

Fragment(uuid='NORMALIZED-000120',
         path='/DividendPayingToken.sol',
         lineno=90,
         depth=1,
         type='documentation',
         name='',
         text='\n    return 0;\n  }\n\n')

Fragment(uuid='NORMALIZED-000121',
         path='/DividendPayingToken.sol',
         lineno=94,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address can withdraw.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` can '
              'withdraw.\n'
              '  function dividendOf(address _owner) public view override '
              'returns(uint256) {\n'
              '    return withdrawableDividendOf(_owner);\n'
              '  }\n')

Fragment(uuid='NORMALIZED-000122',
         path='/DividendPayingToken.sol',
         lineno=101,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address can withdraw.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` can '
              'withdraw.\n'
              '  function withdrawableDividendOf(address _owner) public view '
              'override returns(uint256) {\n'
              '    return '
              'accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\n'
              '  }\n')

Fragment(uuid='NORMALIZED-000123',
         path='/DividendPayingToken.sol',
         lineno=108,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address has withdrawn.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` has '
              'withdrawn.\n'
              '  function withdrawnDividendOf(address _owner) public view '
              'override returns(uint256) {\n'
              '    return withdrawnDividends[_owner];\n'
              '  }\n'
              '\n')

Fragment(uuid='NORMALIZED-000124',
         path='/DividendPayingToken.sol',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address has earned in total.')

Fragment(uuid='NORMALIZED-000125',
         path='/DividendPayingToken.sol',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev accumulativeDividendOf(_owner) = '
              'withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)')

Fragment(uuid='NORMALIZED-000126',
         path='/DividendPayingToken.sol',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  /// = (magnifiedDividendPerShare * balanceOf(_owner) + '
              'magnifiedDividendCorrections[_owner]) / magnitude')

Fragment(uuid='NORMALIZED-000127',
         path='/DividendPayingToken.sol',
         lineno=119,
         depth=2,
         type='documentation',
         name='',
         text='\n  /// @param _owner The address of a token holder.')

Fragment(uuid='NORMALIZED-000128',
         path='/DividendPayingToken.sol',
         lineno=120,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  /// @return The amount of dividend in wei that `_owner` has '
              'earned in total.')

Fragment(uuid='NORMALIZED-000129',
         path='/DividendPayingToken.sol',
         lineno=121,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  function accumulativeDividendOf(address _owner) public view '
              'override returns(uint256) {')

Fragment(uuid='NORMALIZED-000130',
         path='/DividendPayingToken.sol',
         lineno=122,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    return '
              'magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()')

Fragment(uuid='NORMALIZED-000131',
         path='/DividendPayingToken.sol',
         lineno=123,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      '
              '.add(magnifiedDividendCorrections[_owner]).toUint256Safe() / '
              'magnitude;')

Fragment(uuid='NORMALIZED-000132',
         path='/DividendPayingToken.sol',
         lineno=124,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-000133',
         path='/DividendPayingToken.sol',
         lineno=125,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000134',
         path='/DividendPayingToken.sol',
         lineno=126,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev Internal function that transfer tokens from one '
              'address to another.\n'
              '  /// Update magnifiedDividendCorrections to keep dividends '
              'unchanged.\n'
              '  /// @param from The address to transfer from.\n'
              '  /// @param to The address to transfer to.\n'
              '  /// @param value The amount to be transferred.\n'
              '  function _transfer(address from, address to, uint256 value) '
              'internal virtual override {\n'
              '    require(false);\n')

Fragment(uuid='NORMALIZED-000135',
         path='/DividendPayingToken.sol',
         lineno=134,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    int256 _magCorrection = '
              'magnifiedDividendPerShare.mul(value).toInt256Safe();\n'
              '    magnifiedDividendCorrections[from] = '
              'magnifiedDividendCorrections[from].add(_magCorrection);\n'
              '    magnifiedDividendCorrections[to] = '
              'magnifiedDividendCorrections[to].sub(_magCorrection);\n'
              '  }\n')

Fragment(uuid='NORMALIZED-000136',
         path='/DividendPayingToken.sol',
         lineno=139,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev Internal function that mints tokens to an account.\n'
              '  /// Update magnifiedDividendCorrections to keep dividends '
              'unchanged.\n'
              '  /// @param account The account that will receive the created '
              'tokens.\n'
              '  /// @param value The amount that will be created.\n'
              '  function _mint(address account, uint256 value) internal '
              'override {\n'
              '    super._mint(account, value);\n')

Fragment(uuid='NORMALIZED-000137',
         path='/DividendPayingToken.sol',
         lineno=146,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    magnifiedDividendCorrections[account] = '
              'magnifiedDividendCorrections[account]\n'
              '      .sub( '
              '(magnifiedDividendPerShare.mul(value)).toInt256Safe() );\n'
              '  }\n')

Fragment(uuid='NORMALIZED-000138',
         path='/DividendPayingToken.sol',
         lineno=150,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev Internal function that burns an amount of the token '
              'of a given account.\n'
              '  /// Update magnifiedDividendCorrections to keep dividends '
              'unchanged.\n'
              '  /// @param account The account whose tokens will be burnt.\n'
              '  /// @param value The amount that will be burnt.\n'
              '  function _burn(address account, uint256 value) internal '
              'override {\n'
              '    super._burn(account, value);\n')

Fragment(uuid='NORMALIZED-000139',
         path='/DividendPayingToken.sol',
         lineno=157,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    magnifiedDividendCorrections[account] = '
              'magnifiedDividendCorrections[account]\n'
              '      .add( '
              '(magnifiedDividendPerShare.mul(value)).toInt256Safe() );\n'
              '  }\n')

Fragment(uuid='NORMALIZED-000140',
         path='/DividendPayingToken.sol',
         lineno=161,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  function _setBalance(address account, uint256 newBalance) '
              'internal {\n'
              '    uint256 currentBalance = balanceOf(account);\n')

Fragment(uuid='NORMALIZED-000141',
         path='/DividendPayingToken.sol',
         lineno=164,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    if(newBalance > currentBalance) {\n'
              '      uint256 mintAmount = newBalance.sub(currentBalance);\n'
              '      _mint(account, mintAmount);\n'
              '    } else if(newBalance < currentBalance) {\n'
              '      uint256 burnAmount = currentBalance.sub(newBalance);\n'
              '      _burn(account, burnAmount);\n'
              '    }\n'
              '  }\n'
              '}')

Fragment(uuid='NORMALIZED-000142',
         path='/DividendPayingTokenInterface.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='NORMALIZED-000143',
         path='/DividendPayingTokenInterface.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /DividendPayingTokenInterface.sol\n')

Fragment(uuid='NORMALIZED-000144',
         path='/DividendPayingTokenInterface.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n\n')

Fragment(uuid='NORMALIZED-000145',
         path='/DividendPayingTokenInterface.sol',
         lineno=5,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '/// @title Dividend-Paying Token Interface\n'
              '/// @author Roger Wu (https://github.com/roger-wu)\n'
              '/// @dev An interface for a dividend-paying token contract.\n'
              'interface DividendPayingTokenInterface {\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address can withdraw.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` can '
              'withdraw.\n'
              '  function dividendOf(address _owner) external view '
              'returns(uint256);\n'
              '\n')

Fragment(uuid='NORMALIZED-000146',
         path='/DividendPayingTokenInterface.sol',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice Withdraws the ether distributed to the sender.\n'
              '  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to '
              '`msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after '
              'the transfer.\n'
              '  ///  MUST emit a `DividendWithdrawn` event if the amount of '
              'ether transferred is greater than 0.\n'
              '  function withdrawDividend() external;\n')

Fragment(uuid='NORMALIZED-000147',
         path='/DividendPayingTokenInterface.sol',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev This event MUST emit when ether is distributed to '
              'token holders.\n'
              '  /// @param from The address which sends ether to this '
              'contract.\n'
              '  /// @param weiAmount The amount of distributed ether in wei.\n'
              '  event DividendsDistributed(\n'
              '    address indexed from,\n'
              '    uint256 weiAmount\n'
              '  );\n')

Fragment(uuid='NORMALIZED-000148',
         path='/DividendPayingTokenInterface.sol',
         lineno=28,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev This event MUST emit when an address withdraws their '
              'dividend.\n'
              '  /// @param to The address which withdraws ether from this '
              'contract.\n'
              '  /// @param weiAmount The amount of withdrawn ether in wei.\n'
              '  event DividendWithdrawn(\n'
              '    address indexed to,\n'
              '    uint256 weiAmount\n'
              '  );\n'
              '}')

Fragment(uuid='NORMALIZED-000149',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='NORMALIZED-000150',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /DividendPayingTokenOptionalInterface.sol\n')

Fragment(uuid='NORMALIZED-000151',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n\n')

Fragment(uuid='NORMALIZED-000152',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=5,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '/// @title Dividend-Paying Token Optional Interface\n'
              '/// @author Roger Wu (https://github.com/roger-wu)\n'
              '/// @dev OPTIONAL functions for a dividend-paying token '
              'contract.\n'
              'interface DividendPayingTokenOptionalInterface {\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address can withdraw.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` can '
              'withdraw.\n'
              '  function withdrawableDividendOf(address _owner) external view '
              'returns(uint256);\n')

Fragment(uuid='NORMALIZED-000153',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address has withdrawn.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` has '
              'withdrawn.\n'
              '  function withdrawnDividendOf(address _owner) external view '
              'returns(uint256);\n')

Fragment(uuid='NORMALIZED-000154',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address has earned in total.\n'
              '  /// @dev accumulativeDividendOf(_owner) = '
              'withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` has '
              'earned in total.\n'
              '  function accumulativeDividendOf(address _owner) external view '
              'returns(uint256);\n'
              '}')

Fragment(uuid='NORMALIZED-000155',
         path='/ERC20.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='NORMALIZED-000156',
         path='/ERC20.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /ERC20.sol\n')

Fragment(uuid='NORMALIZED-000157',
         path='/ERC20.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000158',
         path='/ERC20.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'import "./IERC20.sol";\n'
              'import "./IERC20Metadata.sol";\n'
              'import "./Context.sol";\n'
              'import "./SafeMath.sol";\n')

Fragment(uuid='NORMALIZED-000159',
         path='/ERC20.sol',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n/**')

Fragment(uuid='NORMALIZED-000160',
         path='/ERC20.sol',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n * @dev Implementation of the {IERC20} interface.')

Fragment(uuid='NORMALIZED-000161',
         path='/ERC20.sol',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n *')

Fragment(uuid='NORMALIZED-000162',
         path='/ERC20.sol',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * This implementation is agnostic to the way tokens are '
              'created. This means')

Fragment(uuid='NORMALIZED-000163',
         path='/ERC20.sol',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * that a supply mechanism has to be added in a derived '
              'contract using {_mint}.')

Fragment(uuid='NORMALIZED-000164',
         path='/ERC20.sol',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n * For a generic mechanism see {ERC20PresetMinterPauser}.')

Fragment(uuid='NORMALIZED-000165',
         path='/ERC20.sol',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n *')

Fragment(uuid='NORMALIZED-000166',
         path='/ERC20.sol',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n * TIP: For a detailed writeup see our guide')

Fragment(uuid='NORMALIZED-000167',
         path='/ERC20.sol',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * '
              'https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How')

Fragment(uuid='NORMALIZED-000168',
         path='/ERC20.sol',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n * to implement supply mechanisms].')

Fragment(uuid='NORMALIZED-000169',
         path='/ERC20.sol',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n *')

Fragment(uuid='NORMALIZED-000170',
         path='/ERC20.sol',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * We have followed general OpenZeppelin guidelines: functions '
              'revert instead')

Fragment(uuid='NORMALIZED-000171',
         path='/ERC20.sol',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * of returning `false` on failure. This behavior is '
              'nonetheless conventional')

Fragment(uuid='NORMALIZED-000172',
         path='/ERC20.sol',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * and does not conflict with the expectations of ERC20 '
              'applications.')

Fragment(uuid='NORMALIZED-000173',
         path='/ERC20.sol',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n *')

Fragment(uuid='NORMALIZED-000174',
         path='/ERC20.sol',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * Additionally, an {Approval} event is emitted on calls to '
              '{transferFrom}.')

Fragment(uuid='NORMALIZED-000175',
         path='/ERC20.sol',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * This allows applications to reconstruct the allowance for '
              'all accounts just')

Fragment(uuid='NORMALIZED-000176',
         path='/ERC20.sol',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * by listening to said events. Other implementations of the '
              'EIP may not emit')

Fragment(uuid='NORMALIZED-000177',
         path='/ERC20.sol',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text="\n * these events, as it isn't required by the specification.")

Fragment(uuid='NORMALIZED-000178',
         path='/ERC20.sol',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n *')

Fragment(uuid='NORMALIZED-000179',
         path='/ERC20.sol',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * Finally, the non-standard {decreaseAllowance} and '
              '{increaseAllowance}')

Fragment(uuid='NORMALIZED-000180',
         path='/ERC20.sol',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * functions have been added to mitigate the well-known issues '
              'around setting')

Fragment(uuid='NORMALIZED-000181',
         path='/ERC20.sol',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n * allowances. See {IERC20-approve}.')

Fragment(uuid='NORMALIZED-000182',
         path='/ERC20.sol',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n */')

Fragment(uuid='NORMALIZED-000183',
         path='/ERC20.sol',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\ncontract ERC20 is Context, IERC20, IERC20Metadata {')

Fragment(uuid='NORMALIZED-000184',
         path='/ERC20.sol',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    using SafeMath for uint256;')

Fragment(uuid='NORMALIZED-000185',
         path='/ERC20.sol',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000186',
         path='/ERC20.sol',
         lineno=36,
         depth=1,
         type='documentation',
         name='',
         text='\n    mapping(address => uint256) private _balances;\n')

Fragment(uuid='NORMALIZED-000187',
         path='/ERC20.sol',
         lineno=38,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    mapping(address => mapping(address => uint256)) private '
              '_allowances;\n')

Fragment(uuid='NORMALIZED-000188',
         path='/ERC20.sol',
         lineno=40,
         depth=1,
         type='documentation',
         name='',
         text='\n    uint256 private _totalSupply;\n')

Fragment(uuid='NORMALIZED-000189',
         path='/ERC20.sol',
         lineno=42,
         depth=1,
         type='documentation',
         name='',
         text='\n    string private _name;\n    string private _symbol;\n')

Fragment(uuid='NORMALIZED-000190',
         path='/ERC20.sol',
         lineno=45,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Sets the values for {name} and {symbol}.\n'
              '     *\n'
              '     * The default value of {decimals} is 18. To select a '
              'different value for\n'
              '     * {decimals} you should overload it.\n'
              '     *\n'
              '     * All two of these values are immutable: they can only be '
              'set once during\n'
              '     * construction.\n'
              '     */\n'
              '    constructor(string memory name_, string memory symbol_) '
              'public {\n'
              '        _name = name_;\n'
              '        _symbol = symbol_;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000191',
         path='/ERC20.sol',
         lineno=59,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the name of the token.\n'
              '     */\n'
              '    function name() public view virtual override returns '
              '(string memory) {\n'
              '        return _name;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000192',
         path='/ERC20.sol',
         lineno=66,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the symbol of the token, usually a shorter '
              'version of the\n'
              '     * name.\n'
              '     */\n'
              '    function symbol() public view virtual override returns '
              '(string memory) {\n'
              '        return _symbol;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000193',
         path='/ERC20.sol',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000194',
         path='/ERC20.sol',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Returns the number of decimals used to get its user '
              'representation.')

Fragment(uuid='NORMALIZED-000195',
         path='/ERC20.sol',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * For example, if `decimals` equals `2`, a balance of '
              '`505` tokens should')

Fragment(uuid='NORMALIZED-000196',
         path='/ERC20.sol',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).')

Fragment(uuid='NORMALIZED-000197',
         path='/ERC20.sol',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000198',
         path='/ERC20.sol',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Tokens usually opt for a value of 18, imitating the '
              'relationship between')

Fragment(uuid='NORMALIZED-000199',
         path='/ERC20.sol',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Ether and Wei. This is the value {ERC20} uses, unless '
              'this function is')

Fragment(uuid='NORMALIZED-000200',
         path='/ERC20.sol',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n     * overridden;')

Fragment(uuid='NORMALIZED-000201',
         path='/ERC20.sol',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000202',
         path='/ERC20.sol',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * NOTE: This information is only used for _display_ '
              'purposes: it in')

Fragment(uuid='NORMALIZED-000203',
         path='/ERC20.sol',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * no way affects any of the arithmetic of the contract, '
              'including')

Fragment(uuid='NORMALIZED-000204',
         path='/ERC20.sol',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n     * {IERC20-balanceOf} and {IERC20-transfer}.')

Fragment(uuid='NORMALIZED-000205',
         path='/ERC20.sol',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000206',
         path='/ERC20.sol',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function decimals() public view virtual override returns '
              '(uint8) {')

Fragment(uuid='NORMALIZED-000207',
         path='/ERC20.sol',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n        return 18;')

Fragment(uuid='NORMALIZED-000208',
         path='/ERC20.sol',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000209',
         path='/ERC20.sol',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000210',
         path='/ERC20.sol',
         lineno=91,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-totalSupply}.\n'
              '     */\n'
              '    function totalSupply() public view virtual override returns '
              '(uint256) {\n'
              '        return _totalSupply;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000211',
         path='/ERC20.sol',
         lineno=98,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-balanceOf}.\n'
              '     */\n'
              '    function balanceOf(address account) public view virtual '
              'override returns (uint256) {\n'
              '        return _balances[account];\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000212',
         path='/ERC20.sol',
         lineno=105,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-transfer}.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `recipient` cannot be the zero address.\n'
              '     * - the caller must have a balance of at least `amount`.\n'
              '     */\n'
              '    function transfer(address recipient, uint256 amount) public '
              'virtual override returns (bool) {\n'
              '        _transfer(_msgSender(), recipient, amount);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000213',
         path='/ERC20.sol',
         lineno=118,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-allowance}.\n'
              '     */\n'
              '    function allowance(address owner, address spender) public '
              'view virtual override returns (uint256) {\n'
              '        return _allowances[owner][spender];\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000214',
         path='/ERC20.sol',
         lineno=125,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-approve}.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `spender` cannot be the zero address.\n'
              '     */\n'
              '    function approve(address spender, uint256 amount) public '
              'virtual override returns (bool) {\n'
              '        _approve(_msgSender(), spender, amount);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000215',
         path='/ERC20.sol',
         lineno=137,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000216',
         path='/ERC20.sol',
         lineno=138,
         depth=2,
         type='documentation',
         name='',
         text='\n     * @dev See {IERC20-transferFrom}.')

Fragment(uuid='NORMALIZED-000217',
         path='/ERC20.sol',
         lineno=139,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000218',
         path='/ERC20.sol',
         lineno=140,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance. This is not')

Fragment(uuid='NORMALIZED-000219',
         path='/ERC20.sol',
         lineno=141,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * required by the EIP. See the note at the beginning of '
              '{ERC20}.')

Fragment(uuid='NORMALIZED-000220',
         path='/ERC20.sol',
         lineno=142,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000221',
         path='/ERC20.sol',
         lineno=143,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='NORMALIZED-000222',
         path='/ERC20.sol',
         lineno=144,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000223',
         path='/ERC20.sol',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` and `recipient` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000224',
         path='/ERC20.sol',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` must have a balance of at least `amount`.')

Fragment(uuid='NORMALIZED-000225',
         path='/ERC20.sol',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * - the caller must have allowance for ``sender``'s tokens "
              'of at least')

Fragment(uuid='NORMALIZED-000226',
         path='/ERC20.sol',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\n     * `amount`.')

Fragment(uuid='NORMALIZED-000227',
         path='/ERC20.sol',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000228',
         path='/ERC20.sol',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n    function transferFrom(')

Fragment(uuid='NORMALIZED-000229',
         path='/ERC20.sol',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\n        address sender,')

Fragment(uuid='NORMALIZED-000230',
         path='/ERC20.sol',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n        address recipient,')

Fragment(uuid='NORMALIZED-000231',
         path='/ERC20.sol',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='NORMALIZED-000232',
         path='/ERC20.sol',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) public virtual override returns (bool) {')

Fragment(uuid='NORMALIZED-000233',
         path='/ERC20.sol',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n        _transfer(sender, recipient, amount);')

Fragment(uuid='NORMALIZED-000234',
         path='/ERC20.sol',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        _approve(sender, _msgSender(), '
              '_allowances[sender][_msgSender()].sub(amount, "ERC20: transfer '
              'amount exceeds allowance"));')

Fragment(uuid='NORMALIZED-000235',
         path='/ERC20.sol',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n        return true;')

Fragment(uuid='NORMALIZED-000236',
         path='/ERC20.sol',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000237',
         path='/ERC20.sol',
         lineno=159,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000238',
         path='/ERC20.sol',
         lineno=160,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Atomically increases the allowance granted to '
              '`spender` by the caller.\n'
              '     *\n'
              '     * This is an alternative to {approve} that can be used as '
              'a mitigation for\n'
              '     * problems described in {IERC20-approve}.\n'
              '     *\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `spender` cannot be the zero address.\n'
              '     */\n'
              '    function increaseAllowance(address spender, uint256 '
              'addedValue) public virtual returns (bool) {\n'
              '        _approve(_msgSender(), spender, '
              '_allowances[_msgSender()][spender].add(addedValue));\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000239',
         path='/ERC20.sol',
         lineno=177,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000240',
         path='/ERC20.sol',
         lineno=178,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Atomically decreases the allowance granted to '
              '`spender` by the caller.')

Fragment(uuid='NORMALIZED-000241',
         path='/ERC20.sol',
         lineno=179,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000242',
         path='/ERC20.sol',
         lineno=180,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This is an alternative to {approve} that can be used as '
              'a mitigation for')

Fragment(uuid='NORMALIZED-000243',
         path='/ERC20.sol',
         lineno=181,
         depth=2,
         type='documentation',
         name='',
         text='\n     * problems described in {IERC20-approve}.')

Fragment(uuid='NORMALIZED-000244',
         path='/ERC20.sol',
         lineno=182,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000245',
         path='/ERC20.sol',
         lineno=183,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance.')

Fragment(uuid='NORMALIZED-000246',
         path='/ERC20.sol',
         lineno=184,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000247',
         path='/ERC20.sol',
         lineno=185,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='NORMALIZED-000248',
         path='/ERC20.sol',
         lineno=186,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000249',
         path='/ERC20.sol',
         lineno=187,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `spender` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000250',
         path='/ERC20.sol',
         lineno=188,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - `spender` must have allowance for the caller of at '
              'least')

Fragment(uuid='NORMALIZED-000251',
         path='/ERC20.sol',
         lineno=189,
         depth=2,
         type='documentation',
         name='',
         text='\n     * `subtractedValue`.')

Fragment(uuid='NORMALIZED-000252',
         path='/ERC20.sol',
         lineno=190,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000253',
         path='/ERC20.sol',
         lineno=191,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function decreaseAllowance(address spender, uint256 '
              'subtractedValue) public virtual returns (bool) {')

Fragment(uuid='NORMALIZED-000254',
         path='/ERC20.sol',
         lineno=192,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        _approve(_msgSender(), spender, '
              '_allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: '
              'decreased allowance below zero"));')

Fragment(uuid='NORMALIZED-000255',
         path='/ERC20.sol',
         lineno=193,
         depth=2,
         type='documentation',
         name='',
         text='\n        return true;')

Fragment(uuid='NORMALIZED-000256',
         path='/ERC20.sol',
         lineno=194,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000257',
         path='/ERC20.sol',
         lineno=195,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000258',
         path='/ERC20.sol',
         lineno=196,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000259',
         path='/ERC20.sol',
         lineno=197,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Moves tokens `amount` from `sender` to `recipient`.')

Fragment(uuid='NORMALIZED-000260',
         path='/ERC20.sol',
         lineno=198,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000261',
         path='/ERC20.sol',
         lineno=199,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This is internal function is equivalent to {transfer}, '
              'and can be used to')

Fragment(uuid='NORMALIZED-000262',
         path='/ERC20.sol',
         lineno=200,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * e.g. implement automatic token fees, slashing '
              'mechanisms, etc.')

Fragment(uuid='NORMALIZED-000263',
         path='/ERC20.sol',
         lineno=201,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000264',
         path='/ERC20.sol',
         lineno=202,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits a {Transfer} event.')

Fragment(uuid='NORMALIZED-000265',
         path='/ERC20.sol',
         lineno=203,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000266',
         path='/ERC20.sol',
         lineno=204,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='NORMALIZED-000267',
         path='/ERC20.sol',
         lineno=205,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000268',
         path='/ERC20.sol',
         lineno=206,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000269',
         path='/ERC20.sol',
         lineno=207,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `recipient` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000270',
         path='/ERC20.sol',
         lineno=208,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` must have a balance of at least `amount`.')

Fragment(uuid='NORMALIZED-000271',
         path='/ERC20.sol',
         lineno=209,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000272',
         path='/ERC20.sol',
         lineno=210,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _transfer(')

Fragment(uuid='NORMALIZED-000273',
         path='/ERC20.sol',
         lineno=211,
         depth=2,
         type='documentation',
         name='',
         text='\n        address sender,')

Fragment(uuid='NORMALIZED-000274',
         path='/ERC20.sol',
         lineno=212,
         depth=2,
         type='documentation',
         name='',
         text='\n        address recipient,')

Fragment(uuid='NORMALIZED-000275',
         path='/ERC20.sol',
         lineno=213,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='NORMALIZED-000276',
         path='/ERC20.sol',
         lineno=214,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {')

Fragment(uuid='NORMALIZED-000277',
         path='/ERC20.sol',
         lineno=215,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(sender != address(0), "ERC20: transfer from the '
              'zero address");')

Fragment(uuid='NORMALIZED-000278',
         path='/ERC20.sol',
         lineno=216,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(recipient != address(0), "ERC20: transfer to '
              'the zero address");')

Fragment(uuid='NORMALIZED-000279',
         path='/ERC20.sol',
         lineno=217,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000280',
         path='/ERC20.sol',
         lineno=218,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(sender, recipient, amount);\n')

Fragment(uuid='NORMALIZED-000281',
         path='/ERC20.sol',
         lineno=220,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _balances[sender] = _balances[sender].sub(amount, '
              '"ERC20: transfer amount exceeds balance");\n'
              '        _balances[recipient] = '
              '_balances[recipient].add(amount);\n'
              '        emit Transfer(sender, recipient, amount);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000282',
         path='/ERC20.sol',
         lineno=225,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /** @dev Creates `amount` tokens and assigns them to '
              '`account`, increasing\n'
              '     * the total supply.\n'
              '     *\n'
              '     * Emits a {Transfer} event with `from` set to the zero '
              'address.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `account` cannot be the zero address.\n'
              '     */\n'
              '    function _mint(address account, uint256 amount) internal '
              'virtual {\n'
              '        require(account != address(0), "ERC20: mint to the zero '
              'address");\n')

Fragment(uuid='NORMALIZED-000283',
         path='/ERC20.sol',
         lineno=237,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(address(0), account, amount);\n')

Fragment(uuid='NORMALIZED-000284',
         path='/ERC20.sol',
         lineno=239,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _totalSupply = _totalSupply.add(amount);\n'
              '        _balances[account] = _balances[account].add(amount);\n'
              '        emit Transfer(address(0), account, amount);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000285',
         path='/ERC20.sol',
         lineno=244,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Destroys `amount` tokens from `account`, reducing '
              'the\n'
              '     * total supply.\n'
              '     *\n'
              '     * Emits a {Transfer} event with `to` set to the zero '
              'address.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `account` cannot be the zero address.\n'
              '     * - `account` must have at least `amount` tokens.\n'
              '     */\n'
              '    function _burn(address account, uint256 amount) internal '
              'virtual {\n'
              '        require(account != address(0), "ERC20: burn from the '
              'zero address");\n')

Fragment(uuid='NORMALIZED-000286',
         path='/ERC20.sol',
         lineno=258,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(account, address(0), amount);\n')

Fragment(uuid='NORMALIZED-000287',
         path='/ERC20.sol',
         lineno=260,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _balances[account] = _balances[account].sub(amount, '
              '"ERC20: burn amount exceeds balance");\n'
              '        _totalSupply = _totalSupply.sub(amount);\n'
              '        emit Transfer(account, address(0), amount);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000288',
         path='/ERC20.sol',
         lineno=265,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000289',
         path='/ERC20.sol',
         lineno=266,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Sets `amount` as the allowance of `spender` over '
              'the `owner` s tokens.')

Fragment(uuid='NORMALIZED-000290',
         path='/ERC20.sol',
         lineno=267,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000291',
         path='/ERC20.sol',
         lineno=268,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This internal function is equivalent to `approve`, and '
              'can be used to')

Fragment(uuid='NORMALIZED-000292',
         path='/ERC20.sol',
         lineno=269,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * e.g. set automatic allowances for certain subsystems, '
              'etc.')

Fragment(uuid='NORMALIZED-000293',
         path='/ERC20.sol',
         lineno=270,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000294',
         path='/ERC20.sol',
         lineno=271,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits an {Approval} event.')

Fragment(uuid='NORMALIZED-000295',
         path='/ERC20.sol',
         lineno=272,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000296',
         path='/ERC20.sol',
         lineno=273,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='NORMALIZED-000297',
         path='/ERC20.sol',
         lineno=274,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000298',
         path='/ERC20.sol',
         lineno=275,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `owner` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000299',
         path='/ERC20.sol',
         lineno=276,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `spender` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000300',
         path='/ERC20.sol',
         lineno=277,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000301',
         path='/ERC20.sol',
         lineno=278,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _approve(')

Fragment(uuid='NORMALIZED-000302',
         path='/ERC20.sol',
         lineno=279,
         depth=2,
         type='documentation',
         name='',
         text='\n        address owner,')

Fragment(uuid='NORMALIZED-000303',
         path='/ERC20.sol',
         lineno=280,
         depth=2,
         type='documentation',
         name='',
         text='\n        address spender,')

Fragment(uuid='NORMALIZED-000304',
         path='/ERC20.sol',
         lineno=281,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='NORMALIZED-000305',
         path='/ERC20.sol',
         lineno=282,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {')

Fragment(uuid='NORMALIZED-000306',
         path='/ERC20.sol',
         lineno=283,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(owner != address(0), "ERC20: approve from the '
              'zero address");')

Fragment(uuid='NORMALIZED-000307',
         path='/ERC20.sol',
         lineno=284,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(spender != address(0), "ERC20: approve to the '
              'zero address");')

Fragment(uuid='NORMALIZED-000308',
         path='/ERC20.sol',
         lineno=285,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000309',
         path='/ERC20.sol',
         lineno=286,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _allowances[owner][spender] = amount;\n'
              '        emit Approval(owner, spender, amount);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000310',
         path='/ERC20.sol',
         lineno=290,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000311',
         path='/ERC20.sol',
         lineno=291,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Hook that is called before any transfer of tokens. '
              'This includes')

Fragment(uuid='NORMALIZED-000312',
         path='/ERC20.sol',
         lineno=292,
         depth=2,
         type='documentation',
         name='',
         text='\n     * minting and burning.')

Fragment(uuid='NORMALIZED-000313',
         path='/ERC20.sol',
         lineno=293,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000314',
         path='/ERC20.sol',
         lineno=294,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Calling conditions:')

Fragment(uuid='NORMALIZED-000315',
         path='/ERC20.sol',
         lineno=295,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000316',
         path='/ERC20.sol',
         lineno=296,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` and `to` are both non-zero, `amount` of '
              "``from``'s tokens")

Fragment(uuid='NORMALIZED-000317',
         path='/ERC20.sol',
         lineno=297,
         depth=2,
         type='documentation',
         name='',
         text='\n     * will be to transferred to `to`.')

Fragment(uuid='NORMALIZED-000318',
         path='/ERC20.sol',
         lineno=298,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` is zero, `amount` tokens will be minted '
              'for `to`.')

Fragment(uuid='NORMALIZED-000319',
         path='/ERC20.sol',
         lineno=299,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * - when `to` is zero, `amount` of ``from``'s tokens will "
              'be burned.')

Fragment(uuid='NORMALIZED-000320',
         path='/ERC20.sol',
         lineno=300,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `from` and `to` are never both zero.')

Fragment(uuid='NORMALIZED-000321',
         path='/ERC20.sol',
         lineno=301,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000322',
         path='/ERC20.sol',
         lineno=302,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * To learn more about hooks, head to '
              'xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].')

Fragment(uuid='NORMALIZED-000323',
         path='/ERC20.sol',
         lineno=303,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000324',
         path='/ERC20.sol',
         lineno=304,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _beforeTokenTransfer(')

Fragment(uuid='NORMALIZED-000325',
         path='/ERC20.sol',
         lineno=305,
         depth=2,
         type='documentation',
         name='',
         text='\n        address from,')

Fragment(uuid='NORMALIZED-000326',
         path='/ERC20.sol',
         lineno=306,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000327',
         path='/ERC20.sol',
         lineno=307,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='NORMALIZED-000328',
         path='/ERC20.sol',
         lineno=308,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {}')

Fragment(uuid='NORMALIZED-000329',
         path='/ERC20.sol',
         lineno=309,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-000330',
         path='/ERC20Upgradeable.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='NORMALIZED-000331',
         path='/ERC20Upgradeable.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /ERC20Upgradeable.sol\n')

Fragment(uuid='NORMALIZED-000332',
         path='/ERC20Upgradeable.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\nimport "./Context.sol";\n')

Fragment(uuid='NORMALIZED-000333',
         path='/ERC20Upgradeable.sol',
         lineno=5,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'interface IERC20Upgradeable {\n'
              '    /**\n'
              '     * @dev Returns the amount of tokens in existence.\n'
              '     */\n'
              '    function totalSupply() external view returns (uint256);\n')

Fragment(uuid='NORMALIZED-000334',
         path='/ERC20Upgradeable.sol',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the amount of tokens owned by `account`.\n'
              '     */\n'
              '    function balanceOf(address account) external view returns '
              '(uint256);\n')

Fragment(uuid='NORMALIZED-000335',
         path='/ERC20Upgradeable.sol',
         lineno=16,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              "     * @dev Moves `amount` tokens from the caller's account to "
              '`recipient`.\n'
              '     *\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.\n'
              '     *\n'
              '     * Emits a {Transfer} event.\n'
              '     */\n'
              '    function transfer(address recipient, uint256 amount) '
              'external returns (bool);\n')

Fragment(uuid='NORMALIZED-000336',
         path='/ERC20Upgradeable.sol',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the remaining number of tokens that '
              '`spender` will be\n'
              '     * allowed to spend on behalf of `owner` through '
              '{transferFrom}. This is\n'
              '     * zero by default.\n'
              '     *\n'
              '     * This value changes when {approve} or {transferFrom} are '
              'called.\n'
              '     */\n'
              '    function allowance(address owner, address spender) external '
              'view returns (uint256);\n')

Fragment(uuid='NORMALIZED-000337',
         path='/ERC20Upgradeable.sol',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000338',
         path='/ERC20Upgradeable.sol',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Sets `amount` as the allowance of `spender` over '
              "the caller's tokens.")

Fragment(uuid='NORMALIZED-000339',
         path='/ERC20Upgradeable.sol',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000340',
         path='/ERC20Upgradeable.sol',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.')

Fragment(uuid='NORMALIZED-000341',
         path='/ERC20Upgradeable.sol',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000342',
         path='/ERC20Upgradeable.sol',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * IMPORTANT: Beware that changing an allowance with this '
              'method brings the risk')

Fragment(uuid='NORMALIZED-000343',
         path='/ERC20Upgradeable.sol',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * that someone may use both the old and the new allowance '
              'by unfortunate')

Fragment(uuid='NORMALIZED-000344',
         path='/ERC20Upgradeable.sol',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * transaction ordering. One possible solution to mitigate '
              'this race')

Fragment(uuid='NORMALIZED-000345',
         path='/ERC20Upgradeable.sol',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * condition is to first reduce the spender's allowance to "
              '0 and set the')

Fragment(uuid='NORMALIZED-000346',
         path='/ERC20Upgradeable.sol',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n     * desired value afterwards:')

Fragment(uuid='NORMALIZED-000347',
         path='/ERC20Upgradeable.sol',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * '
              'https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729')

Fragment(uuid='NORMALIZED-000348',
         path='/ERC20Upgradeable.sol',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000349',
         path='/ERC20Upgradeable.sol',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits an {Approval} event.')

Fragment(uuid='NORMALIZED-000350',
         path='/ERC20Upgradeable.sol',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000351',
         path='/ERC20Upgradeable.sol',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function approve(address spender, uint256 amount) external '
              'returns (bool);')

Fragment(uuid='NORMALIZED-000352',
         path='/ERC20Upgradeable.sol',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000353',
         path='/ERC20Upgradeable.sol',
         lineno=50,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Moves `amount` tokens from `sender` to `recipient` '
              'using the\n'
              '     * allowance mechanism. `amount` is then deducted from the '
              "caller's\n"
              '     * allowance.\n'
              '     *\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.\n'
              '     *\n'
              '     * Emits a {Transfer} event.\n'
              '     */\n'
              '    function transferFrom(\n'
              '        address sender,\n'
              '        address recipient,\n'
              '        uint256 amount\n'
              '    ) external returns (bool);\n')

Fragment(uuid='NORMALIZED-000354',
         path='/ERC20Upgradeable.sol',
         lineno=65,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Emitted when `value` tokens are moved from one '
              'account (`from`) to\n'
              '     * another (`to`).\n'
              '     *\n'
              '     * Note that `value` may be zero.\n'
              '     */\n'
              '    event Transfer(address indexed from, address indexed to, '
              'uint256 value);\n')

Fragment(uuid='NORMALIZED-000355',
         path='/ERC20Upgradeable.sol',
         lineno=73,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Emitted when the allowance of a `spender` for an '
              '`owner` is set by\n'
              '     * a call to {approve}. `value` is the new allowance.\n'
              '     */\n'
              '    event Approval(address indexed owner, address indexed '
              'spender, uint256 value);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000356',
         path='/ERC20Upgradeable.sol',
         lineno=80,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'interface IERC20MetadataUpgradeable is IERC20Upgradeable {\n'
              '    /**\n'
              '     * @dev Returns the name of the token.\n'
              '     */\n'
              '    function name() external view returns (string memory);\n')

Fragment(uuid='NORMALIZED-000357',
         path='/ERC20Upgradeable.sol',
         lineno=86,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the symbol of the token.\n'
              '     */\n'
              '    function symbol() external view returns (string memory);\n')

Fragment(uuid='NORMALIZED-000358',
         path='/ERC20Upgradeable.sol',
         lineno=91,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the decimals places of the token.\n'
              '     */\n'
              '    function decimals() external view returns (uint8);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-000359',
         path='/ERC20Upgradeable.sol',
         lineno=98,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'contract ERC20Upgradeable is Initializable, ContextUpgradeable, '
              'IERC20Upgradeable, IERC20MetadataUpgradeable {\n'
              '    mapping(address => uint256) private _balances;\n')

Fragment(uuid='NORMALIZED-000360',
         path='/ERC20Upgradeable.sol',
         lineno=101,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    mapping(address => mapping(address => uint256)) private '
              '_allowances;\n')

Fragment(uuid='NORMALIZED-000361',
         path='/ERC20Upgradeable.sol',
         lineno=103,
         depth=1,
         type='documentation',
         name='',
         text='\n    uint256 private _totalSupply;\n')

Fragment(uuid='NORMALIZED-000362',
         path='/ERC20Upgradeable.sol',
         lineno=105,
         depth=1,
         type='documentation',
         name='',
         text='\n    string private _name;\n    string private _symbol;\n')

Fragment(uuid='NORMALIZED-000363',
         path='/ERC20Upgradeable.sol',
         lineno=108,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Sets the values for {name} and {symbol}.\n'
              '     *\n'
              '     * The default value of {decimals} is 18. To select a '
              'different value for\n'
              '     * {decimals} you should overload it.\n'
              '     *\n'
              '     * All two of these values are immutable: they can only be '
              'set once during\n'
              '     * construction.\n'
              '     */\n'
              '    function __ERC20_init(string memory name_, string memory '
              'symbol_) internal initializer {\n'
              '        __Context_init_unchained();\n'
              '        __ERC20_init_unchained(name_, symbol_);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000364',
         path='/ERC20Upgradeable.sol',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function __ERC20_init_unchained(string memory name_, string '
              'memory symbol_) internal initializer {\n'
              '        _name = name_;\n'
              '        _symbol = symbol_;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000365',
         path='/ERC20Upgradeable.sol',
         lineno=127,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the name of the token.\n'
              '     */\n'
              '    function name() public view virtual override returns '
              '(string memory) {\n'
              '        return _name;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000366',
         path='/ERC20Upgradeable.sol',
         lineno=134,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the symbol of the token, usually a shorter '
              'version of the\n'
              '     * name.\n'
              '     */\n'
              '    function symbol() public view virtual override returns '
              '(string memory) {\n'
              '        return _symbol;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000367',
         path='/ERC20Upgradeable.sol',
         lineno=142,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000368',
         path='/ERC20Upgradeable.sol',
         lineno=143,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Returns the number of decimals used to get its user '
              'representation.')

Fragment(uuid='NORMALIZED-000369',
         path='/ERC20Upgradeable.sol',
         lineno=144,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * For example, if `decimals` equals `2`, a balance of '
              '`505` tokens should')

Fragment(uuid='NORMALIZED-000370',
         path='/ERC20Upgradeable.sol',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).')

Fragment(uuid='NORMALIZED-000371',
         path='/ERC20Upgradeable.sol',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000372',
         path='/ERC20Upgradeable.sol',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Tokens usually opt for a value of 18, imitating the '
              'relationship between')

Fragment(uuid='NORMALIZED-000373',
         path='/ERC20Upgradeable.sol',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Ether and Wei. This is the value {ERC20} uses, unless '
              'this function is')

Fragment(uuid='NORMALIZED-000374',
         path='/ERC20Upgradeable.sol',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n     * overridden;')

Fragment(uuid='NORMALIZED-000375',
         path='/ERC20Upgradeable.sol',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000376',
         path='/ERC20Upgradeable.sol',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * NOTE: This information is only used for _display_ '
              'purposes: it in')

Fragment(uuid='NORMALIZED-000377',
         path='/ERC20Upgradeable.sol',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * no way affects any of the arithmetic of the contract, '
              'including')

Fragment(uuid='NORMALIZED-000378',
         path='/ERC20Upgradeable.sol',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n     * {IERC20-balanceOf} and {IERC20-transfer}.')

Fragment(uuid='NORMALIZED-000379',
         path='/ERC20Upgradeable.sol',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000380',
         path='/ERC20Upgradeable.sol',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function decimals() public view virtual override returns '
              '(uint8) {')

Fragment(uuid='NORMALIZED-000381',
         path='/ERC20Upgradeable.sol',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n        return 18;')

Fragment(uuid='NORMALIZED-000382',
         path='/ERC20Upgradeable.sol',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000383',
         path='/ERC20Upgradeable.sol',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000384',
         path='/ERC20Upgradeable.sol',
         lineno=159,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-totalSupply}.\n'
              '     */\n'
              '    function totalSupply() public view virtual override returns '
              '(uint256) {\n'
              '        return _totalSupply;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000385',
         path='/ERC20Upgradeable.sol',
         lineno=166,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-balanceOf}.\n'
              '     */\n'
              '    function balanceOf(address account) public view virtual '
              'override returns (uint256) {\n'
              '        return _balances[account];\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000386',
         path='/ERC20Upgradeable.sol',
         lineno=173,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-transfer}.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `recipient` cannot be the zero address.\n'
              '     * - the caller must have a balance of at least `amount`.\n'
              '     */\n'
              '    function transfer(address recipient, uint256 amount) public '
              'virtual override returns (bool) {\n'
              '        _transfer(_msgSender(), recipient, amount);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000387',
         path='/ERC20Upgradeable.sol',
         lineno=186,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-allowance}.\n'
              '     */\n'
              '    function allowance(address owner, address spender) public '
              'view virtual override returns (uint256) {\n'
              '        return _allowances[owner][spender];\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000388',
         path='/ERC20Upgradeable.sol',
         lineno=193,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-approve}.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `spender` cannot be the zero address.\n'
              '     */\n'
              '    function approve(address spender, uint256 amount) public '
              'virtual override returns (bool) {\n'
              '        _approve(_msgSender(), spender, amount);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000389',
         path='/ERC20Upgradeable.sol',
         lineno=205,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000390',
         path='/ERC20Upgradeable.sol',
         lineno=206,
         depth=2,
         type='documentation',
         name='',
         text='\n     * @dev See {IERC20-transferFrom}.')

Fragment(uuid='NORMALIZED-000391',
         path='/ERC20Upgradeable.sol',
         lineno=207,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000392',
         path='/ERC20Upgradeable.sol',
         lineno=208,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance. This is not')

Fragment(uuid='NORMALIZED-000393',
         path='/ERC20Upgradeable.sol',
         lineno=209,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * required by the EIP. See the note at the beginning of '
              '{ERC20}.')

Fragment(uuid='NORMALIZED-000394',
         path='/ERC20Upgradeable.sol',
         lineno=210,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000395',
         path='/ERC20Upgradeable.sol',
         lineno=211,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='NORMALIZED-000396',
         path='/ERC20Upgradeable.sol',
         lineno=212,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000397',
         path='/ERC20Upgradeable.sol',
         lineno=213,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` and `recipient` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000398',
         path='/ERC20Upgradeable.sol',
         lineno=214,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` must have a balance of at least `amount`.')

Fragment(uuid='NORMALIZED-000399',
         path='/ERC20Upgradeable.sol',
         lineno=215,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * - the caller must have allowance for ``sender``'s tokens "
              'of at least')

Fragment(uuid='NORMALIZED-000400',
         path='/ERC20Upgradeable.sol',
         lineno=216,
         depth=2,
         type='documentation',
         name='',
         text='\n     * `amount`.')

Fragment(uuid='NORMALIZED-000401',
         path='/ERC20Upgradeable.sol',
         lineno=217,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000402',
         path='/ERC20Upgradeable.sol',
         lineno=218,
         depth=2,
         type='documentation',
         name='',
         text='\n    function transferFrom(')

Fragment(uuid='NORMALIZED-000403',
         path='/ERC20Upgradeable.sol',
         lineno=219,
         depth=2,
         type='documentation',
         name='',
         text='\n        address sender,')

Fragment(uuid='NORMALIZED-000404',
         path='/ERC20Upgradeable.sol',
         lineno=220,
         depth=2,
         type='documentation',
         name='',
         text='\n        address recipient,')

Fragment(uuid='NORMALIZED-000405',
         path='/ERC20Upgradeable.sol',
         lineno=221,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='NORMALIZED-000406',
         path='/ERC20Upgradeable.sol',
         lineno=222,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) public virtual override returns (bool) {')

Fragment(uuid='NORMALIZED-000407',
         path='/ERC20Upgradeable.sol',
         lineno=223,
         depth=2,
         type='documentation',
         name='',
         text='\n        _transfer(sender, recipient, amount);')

Fragment(uuid='NORMALIZED-000408',
         path='/ERC20Upgradeable.sol',
         lineno=224,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000409',
         path='/ERC20Upgradeable.sol',
         lineno=225,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 currentAllowance = '
              '_allowances[sender][_msgSender()];\n'
              '        require(currentAllowance >= amount, "ERC20: transfer '
              'amount exceeds allowance");\n'
              '        _approve(sender, _msgSender(), currentAllowance - '
              'amount);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000410',
         path='/ERC20Upgradeable.sol',
         lineno=231,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Atomically increases the allowance granted to '
              '`spender` by the caller.\n'
              '     *\n'
              '     * This is an alternative to {approve} that can be used as '
              'a mitigation for\n'
              '     * problems described in {IERC20-approve}.\n'
              '     *\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `spender` cannot be the zero address.\n'
              '     */\n'
              '    function increaseAllowance(address spender, uint256 '
              'addedValue) public virtual returns (bool) {\n'
              '        _approve(_msgSender(), spender, '
              '_allowances[_msgSender()][spender] + addedValue);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000411',
         path='/ERC20Upgradeable.sol',
         lineno=248,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000412',
         path='/ERC20Upgradeable.sol',
         lineno=249,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Atomically decreases the allowance granted to '
              '`spender` by the caller.')

Fragment(uuid='NORMALIZED-000413',
         path='/ERC20Upgradeable.sol',
         lineno=250,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000414',
         path='/ERC20Upgradeable.sol',
         lineno=251,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This is an alternative to {approve} that can be used as '
              'a mitigation for')

Fragment(uuid='NORMALIZED-000415',
         path='/ERC20Upgradeable.sol',
         lineno=252,
         depth=2,
         type='documentation',
         name='',
         text='\n     * problems described in {IERC20-approve}.')

Fragment(uuid='NORMALIZED-000416',
         path='/ERC20Upgradeable.sol',
         lineno=253,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000417',
         path='/ERC20Upgradeable.sol',
         lineno=254,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance.')

Fragment(uuid='NORMALIZED-000418',
         path='/ERC20Upgradeable.sol',
         lineno=255,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000419',
         path='/ERC20Upgradeable.sol',
         lineno=256,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='NORMALIZED-000420',
         path='/ERC20Upgradeable.sol',
         lineno=257,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000421',
         path='/ERC20Upgradeable.sol',
         lineno=258,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `spender` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000422',
         path='/ERC20Upgradeable.sol',
         lineno=259,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - `spender` must have allowance for the caller of at '
              'least')

Fragment(uuid='NORMALIZED-000423',
         path='/ERC20Upgradeable.sol',
         lineno=260,
         depth=2,
         type='documentation',
         name='',
         text='\n     * `subtractedValue`.')

Fragment(uuid='NORMALIZED-000424',
         path='/ERC20Upgradeable.sol',
         lineno=261,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000425',
         path='/ERC20Upgradeable.sol',
         lineno=262,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function decreaseAllowance(address spender, uint256 '
              'subtractedValue) public virtual returns (bool) {')

Fragment(uuid='NORMALIZED-000426',
         path='/ERC20Upgradeable.sol',
         lineno=263,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        uint256 currentAllowance = '
              '_allowances[_msgSender()][spender];')

Fragment(uuid='NORMALIZED-000427',
         path='/ERC20Upgradeable.sol',
         lineno=264,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(currentAllowance >= subtractedValue, "ERC20: '
              'decreased allowance below zero");')

Fragment(uuid='NORMALIZED-000428',
         path='/ERC20Upgradeable.sol',
         lineno=265,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        _approve(_msgSender(), spender, currentAllowance - '
              'subtractedValue);')

Fragment(uuid='NORMALIZED-000429',
         path='/ERC20Upgradeable.sol',
         lineno=266,
         depth=2,
         type='documentation',
         name='',
         text='\n        return true;')

Fragment(uuid='NORMALIZED-000430',
         path='/ERC20Upgradeable.sol',
         lineno=267,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-000431',
         path='/ERC20Upgradeable.sol',
         lineno=268,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000432',
         path='/ERC20Upgradeable.sol',
         lineno=269,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000433',
         path='/ERC20Upgradeable.sol',
         lineno=270,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Moves `amount` of tokens from `sender` to '
              '`recipient`.')

Fragment(uuid='NORMALIZED-000434',
         path='/ERC20Upgradeable.sol',
         lineno=271,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000435',
         path='/ERC20Upgradeable.sol',
         lineno=272,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This internal function is equivalent to {transfer}, and '
              'can be used to')

Fragment(uuid='NORMALIZED-000436',
         path='/ERC20Upgradeable.sol',
         lineno=273,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * e.g. implement automatic token fees, slashing '
              'mechanisms, etc.')

Fragment(uuid='NORMALIZED-000437',
         path='/ERC20Upgradeable.sol',
         lineno=274,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000438',
         path='/ERC20Upgradeable.sol',
         lineno=275,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits a {Transfer} event.')

Fragment(uuid='NORMALIZED-000439',
         path='/ERC20Upgradeable.sol',
         lineno=276,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000440',
         path='/ERC20Upgradeable.sol',
         lineno=277,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='NORMALIZED-000441',
         path='/ERC20Upgradeable.sol',
         lineno=278,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000442',
         path='/ERC20Upgradeable.sol',
         lineno=279,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000443',
         path='/ERC20Upgradeable.sol',
         lineno=280,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `recipient` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000444',
         path='/ERC20Upgradeable.sol',
         lineno=281,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` must have a balance of at least `amount`.')

Fragment(uuid='NORMALIZED-000445',
         path='/ERC20Upgradeable.sol',
         lineno=282,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000446',
         path='/ERC20Upgradeable.sol',
         lineno=283,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _transfer(')

Fragment(uuid='NORMALIZED-000447',
         path='/ERC20Upgradeable.sol',
         lineno=284,
         depth=2,
         type='documentation',
         name='',
         text='\n        address sender,')

Fragment(uuid='NORMALIZED-000448',
         path='/ERC20Upgradeable.sol',
         lineno=285,
         depth=2,
         type='documentation',
         name='',
         text='\n        address recipient,')

Fragment(uuid='NORMALIZED-000449',
         path='/ERC20Upgradeable.sol',
         lineno=286,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='NORMALIZED-000450',
         path='/ERC20Upgradeable.sol',
         lineno=287,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {')

Fragment(uuid='NORMALIZED-000451',
         path='/ERC20Upgradeable.sol',
         lineno=288,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(sender != address(0), "ERC20: transfer from the '
              'zero address");')

Fragment(uuid='NORMALIZED-000452',
         path='/ERC20Upgradeable.sol',
         lineno=289,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(recipient != address(0), "ERC20: transfer to '
              'the zero address");')

Fragment(uuid='NORMALIZED-000453',
         path='/ERC20Upgradeable.sol',
         lineno=290,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000454',
         path='/ERC20Upgradeable.sol',
         lineno=291,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(sender, recipient, amount);\n')

Fragment(uuid='NORMALIZED-000455',
         path='/ERC20Upgradeable.sol',
         lineno=293,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 senderBalance = _balances[sender];\n'
              '        require(senderBalance >= amount, "ERC20: transfer '
              'amount exceeds balance");\n'
              '  ')

Fragment(uuid='NORMALIZED-000456',
         path='/ERC20Upgradeable.sol',
         lineno=296,
         depth=1,
         type='documentation',
         name='',
         text='\n        _balances[sender] = senderBalance - amount;\n ')

Fragment(uuid='NORMALIZED-000457',
         path='/ERC20Upgradeable.sol',
         lineno=298,
         depth=1,
         type='documentation',
         name='',
         text='\n        _balances[recipient] += amount;\n')

Fragment(uuid='NORMALIZED-000458',
         path='/ERC20Upgradeable.sol',
         lineno=300,
         depth=1,
         type='documentation',
         name='',
         text='\n        emit Transfer(sender, recipient, amount);\n')

Fragment(uuid='NORMALIZED-000459',
         path='/ERC20Upgradeable.sol',
         lineno=302,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _afterTokenTransfer(sender, recipient, amount);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000460',
         path='/ERC20Upgradeable.sol',
         lineno=305,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /** @dev Creates `amount` tokens and assigns them to '
              '`account`, increasing\n'
              '     * the total supply.\n'
              '     *\n'
              '     * Emits a {Transfer} event with `from` set to the zero '
              'address.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `account` cannot be the zero address.\n'
              '     */\n'
              '    function _mint(address account, uint256 amount) internal '
              'virtual {\n'
              '        require(account != address(0), "ERC20: mint to the zero '
              'address");\n')

Fragment(uuid='NORMALIZED-000461',
         path='/ERC20Upgradeable.sol',
         lineno=317,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(address(0), account, amount);\n')

Fragment(uuid='NORMALIZED-000462',
         path='/ERC20Upgradeable.sol',
         lineno=319,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _totalSupply += amount;\n'
              '        _balances[account] += amount;\n'
              '        emit Transfer(address(0), account, amount);\n')

Fragment(uuid='NORMALIZED-000463',
         path='/ERC20Upgradeable.sol',
         lineno=323,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _afterTokenTransfer(address(0), account, amount);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000464',
         path='/ERC20Upgradeable.sol',
         lineno=326,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Destroys `amount` tokens from `account`, reducing '
              'the\n'
              '     * total supply.\n'
              '     *\n'
              '     * Emits a {Transfer} event with `to` set to the zero '
              'address.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `account` cannot be the zero address.\n'
              '     * - `account` must have at least `amount` tokens.\n'
              '     */\n'
              '    function _burn(address account, uint256 amount) internal '
              'virtual {\n'
              '        require(account != address(0), "ERC20: burn from the '
              'zero address");\n')

Fragment(uuid='NORMALIZED-000465',
         path='/ERC20Upgradeable.sol',
         lineno=340,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(account, address(0), amount);\n')

Fragment(uuid='NORMALIZED-000466',
         path='/ERC20Upgradeable.sol',
         lineno=342,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 accountBalance = _balances[account];\n'
              '        require(accountBalance >= amount, "ERC20: burn amount '
              'exceeds balance");\n'
              '      ')

Fragment(uuid='NORMALIZED-000467',
         path='/ERC20Upgradeable.sol',
         lineno=345,
         depth=1,
         type='documentation',
         name='',
         text='\n        _balances[account] = accountBalance - amount;\n  ')

Fragment(uuid='NORMALIZED-000468',
         path='/ERC20Upgradeable.sol',
         lineno=347,
         depth=1,
         type='documentation',
         name='',
         text='\n        _totalSupply -= amount;\n')

Fragment(uuid='NORMALIZED-000469',
         path='/ERC20Upgradeable.sol',
         lineno=349,
         depth=1,
         type='documentation',
         name='',
         text='\n        emit Transfer(account, address(0), amount);\n')

Fragment(uuid='NORMALIZED-000470',
         path='/ERC20Upgradeable.sol',
         lineno=351,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _afterTokenTransfer(account, address(0), amount);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000471',
         path='/ERC20Upgradeable.sol',
         lineno=354,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000472',
         path='/ERC20Upgradeable.sol',
         lineno=355,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Sets `amount` as the allowance of `spender` over '
              'the `owner` s tokens.')

Fragment(uuid='NORMALIZED-000473',
         path='/ERC20Upgradeable.sol',
         lineno=356,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000474',
         path='/ERC20Upgradeable.sol',
         lineno=357,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This internal function is equivalent to `approve`, and '
              'can be used to')

Fragment(uuid='NORMALIZED-000475',
         path='/ERC20Upgradeable.sol',
         lineno=358,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * e.g. set automatic allowances for certain subsystems, '
              'etc.')

Fragment(uuid='NORMALIZED-000476',
         path='/ERC20Upgradeable.sol',
         lineno=359,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000477',
         path='/ERC20Upgradeable.sol',
         lineno=360,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits an {Approval} event.')

Fragment(uuid='NORMALIZED-000478',
         path='/ERC20Upgradeable.sol',
         lineno=361,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000479',
         path='/ERC20Upgradeable.sol',
         lineno=362,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='NORMALIZED-000480',
         path='/ERC20Upgradeable.sol',
         lineno=363,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000481',
         path='/ERC20Upgradeable.sol',
         lineno=364,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `owner` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000482',
         path='/ERC20Upgradeable.sol',
         lineno=365,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `spender` cannot be the zero address.')

Fragment(uuid='NORMALIZED-000483',
         path='/ERC20Upgradeable.sol',
         lineno=366,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000484',
         path='/ERC20Upgradeable.sol',
         lineno=367,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _approve(')

Fragment(uuid='NORMALIZED-000485',
         path='/ERC20Upgradeable.sol',
         lineno=368,
         depth=2,
         type='documentation',
         name='',
         text='\n        address owner,')

Fragment(uuid='NORMALIZED-000486',
         path='/ERC20Upgradeable.sol',
         lineno=369,
         depth=2,
         type='documentation',
         name='',
         text='\n        address spender,')

Fragment(uuid='NORMALIZED-000487',
         path='/ERC20Upgradeable.sol',
         lineno=370,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='NORMALIZED-000488',
         path='/ERC20Upgradeable.sol',
         lineno=371,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {')

Fragment(uuid='NORMALIZED-000489',
         path='/ERC20Upgradeable.sol',
         lineno=372,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(owner != address(0), "ERC20: approve from the '
              'zero address");')

Fragment(uuid='NORMALIZED-000490',
         path='/ERC20Upgradeable.sol',
         lineno=373,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(spender != address(0), "ERC20: approve to the '
              'zero address");')

Fragment(uuid='NORMALIZED-000491',
         path='/ERC20Upgradeable.sol',
         lineno=374,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000492',
         path='/ERC20Upgradeable.sol',
         lineno=375,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _allowances[owner][spender] = amount;\n'
              '        emit Approval(owner, spender, amount);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000493',
         path='/ERC20Upgradeable.sol',
         lineno=379,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000494',
         path='/ERC20Upgradeable.sol',
         lineno=380,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Hook that is called before any transfer of tokens. '
              'This includes')

Fragment(uuid='NORMALIZED-000495',
         path='/ERC20Upgradeable.sol',
         lineno=381,
         depth=2,
         type='documentation',
         name='',
         text='\n     * minting and burning.')

Fragment(uuid='NORMALIZED-000496',
         path='/ERC20Upgradeable.sol',
         lineno=382,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000497',
         path='/ERC20Upgradeable.sol',
         lineno=383,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Calling conditions:')

Fragment(uuid='NORMALIZED-000498',
         path='/ERC20Upgradeable.sol',
         lineno=384,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000499',
         path='/ERC20Upgradeable.sol',
         lineno=385,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` and `to` are both non-zero, `amount` of '
              "``from``'s tokens")

Fragment(uuid='NORMALIZED-000500',
         path='/ERC20Upgradeable.sol',
         lineno=386,
         depth=2,
         type='documentation',
         name='',
         text='\n     * will be transferred to `to`.')

Fragment(uuid='NORMALIZED-000501',
         path='/ERC20Upgradeable.sol',
         lineno=387,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` is zero, `amount` tokens will be minted '
              'for `to`.')

Fragment(uuid='NORMALIZED-000502',
         path='/ERC20Upgradeable.sol',
         lineno=388,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * - when `to` is zero, `amount` of ``from``'s tokens will "
              'be burned.')

Fragment(uuid='NORMALIZED-000503',
         path='/ERC20Upgradeable.sol',
         lineno=389,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `from` and `to` are never both zero.')

Fragment(uuid='NORMALIZED-000504',
         path='/ERC20Upgradeable.sol',
         lineno=390,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000505',
         path='/ERC20Upgradeable.sol',
         lineno=391,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * To learn more about hooks, head to '
              'xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].')

Fragment(uuid='NORMALIZED-000506',
         path='/ERC20Upgradeable.sol',
         lineno=392,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000507',
         path='/ERC20Upgradeable.sol',
         lineno=393,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _beforeTokenTransfer(')

Fragment(uuid='NORMALIZED-000508',
         path='/ERC20Upgradeable.sol',
         lineno=394,
         depth=2,
         type='documentation',
         name='',
         text='\n        address from,')

Fragment(uuid='NORMALIZED-000509',
         path='/ERC20Upgradeable.sol',
         lineno=395,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000510',
         path='/ERC20Upgradeable.sol',
         lineno=396,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='NORMALIZED-000511',
         path='/ERC20Upgradeable.sol',
         lineno=397,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {}')

Fragment(uuid='NORMALIZED-000512',
         path='/ERC20Upgradeable.sol',
         lineno=398,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000513',
         path='/ERC20Upgradeable.sol',
         lineno=399,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000514',
         path='/ERC20Upgradeable.sol',
         lineno=400,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Hook that is called after any transfer of tokens. '
              'This includes')

Fragment(uuid='NORMALIZED-000515',
         path='/ERC20Upgradeable.sol',
         lineno=401,
         depth=2,
         type='documentation',
         name='',
         text='\n     * minting and burning.')

Fragment(uuid='NORMALIZED-000516',
         path='/ERC20Upgradeable.sol',
         lineno=402,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000517',
         path='/ERC20Upgradeable.sol',
         lineno=403,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Calling conditions:')

Fragment(uuid='NORMALIZED-000518',
         path='/ERC20Upgradeable.sol',
         lineno=404,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000519',
         path='/ERC20Upgradeable.sol',
         lineno=405,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` and `to` are both non-zero, `amount` of '
              "``from``'s tokens")

Fragment(uuid='NORMALIZED-000520',
         path='/ERC20Upgradeable.sol',
         lineno=406,
         depth=2,
         type='documentation',
         name='',
         text='\n     * has been transferred to `to`.')

Fragment(uuid='NORMALIZED-000521',
         path='/ERC20Upgradeable.sol',
         lineno=407,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` is zero, `amount` tokens have been minted '
              'for `to`.')

Fragment(uuid='NORMALIZED-000522',
         path='/ERC20Upgradeable.sol',
         lineno=408,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * - when `to` is zero, `amount` of ``from``'s tokens have "
              'been burned.')

Fragment(uuid='NORMALIZED-000523',
         path='/ERC20Upgradeable.sol',
         lineno=409,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `from` and `to` are never both zero.')

Fragment(uuid='NORMALIZED-000524',
         path='/ERC20Upgradeable.sol',
         lineno=410,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000525',
         path='/ERC20Upgradeable.sol',
         lineno=411,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * To learn more about hooks, head to '
              'xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].')

Fragment(uuid='NORMALIZED-000526',
         path='/ERC20Upgradeable.sol',
         lineno=412,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000527',
         path='/ERC20Upgradeable.sol',
         lineno=413,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _afterTokenTransfer(')

Fragment(uuid='NORMALIZED-000528',
         path='/ERC20Upgradeable.sol',
         lineno=414,
         depth=2,
         type='documentation',
         name='',
         text='\n        address from,')

Fragment(uuid='NORMALIZED-000529',
         path='/ERC20Upgradeable.sol',
         lineno=415,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000530',
         path='/ERC20Upgradeable.sol',
         lineno=416,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='NORMALIZED-000531',
         path='/ERC20Upgradeable.sol',
         lineno=417,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {}')

Fragment(uuid='NORMALIZED-000532',
         path='/ERC20Upgradeable.sol',
         lineno=418,
         depth=2,
         type='documentation',
         name='',
         text='\n    uint256[45] private __gap;')

Fragment(uuid='NORMALIZED-000533',
         path='/ERC20Upgradeable.sol',
         lineno=419,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-000534',
         path='/ERC20Upgradeable.sol',
         lineno=420,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000535',
         path='/IERC20.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='NORMALIZED-000536',
         path='/IERC20.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IERC20.sol\n')

Fragment(uuid='NORMALIZED-000537',
         path='/IERC20.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000538',
         path='/IERC20.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '/**\n'
              ' * @dev Interface of the ERC20 standard as defined in the EIP.\n'
              ' */\n'
              'interface IERC20 {\n'
              '    /**\n'
              '     * @dev Returns the amount of tokens in existence.\n'
              '     */\n'
              '    function totalSupply() external view returns (uint256);\n')

Fragment(uuid='NORMALIZED-000539',
         path='/IERC20.sol',
         lineno=13,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the amount of tokens owned by `account`.\n'
              '     */\n'
              '    function balanceOf(address account) external view returns '
              '(uint256);\n')

Fragment(uuid='NORMALIZED-000540',
         path='/IERC20.sol',
         lineno=18,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              "     * @dev Moves `amount` tokens from the caller's account to "
              '`recipient`.\n'
              '     *\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.\n'
              '     *\n'
              '     * Emits a {Transfer} event.\n'
              '     */\n'
              '    function transfer(address recipient, uint256 amount) '
              'external returns (bool);\n')

Fragment(uuid='NORMALIZED-000541',
         path='/IERC20.sol',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the remaining number of tokens that '
              '`spender` will be\n'
              '     * allowed to spend on behalf of `owner` through '
              '{transferFrom}. This is\n'
              '     * zero by default.\n'
              '     *\n'
              '     * This value changes when {approve} or {transferFrom} are '
              'called.\n'
              '     */\n'
              '    function allowance(address owner, address spender) external '
              'view returns (uint256);\n')

Fragment(uuid='NORMALIZED-000542',
         path='/IERC20.sol',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000543',
         path='/IERC20.sol',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Sets `amount` as the allowance of `spender` over '
              "the caller's tokens.")

Fragment(uuid='NORMALIZED-000544',
         path='/IERC20.sol',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000545',
         path='/IERC20.sol',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.')

Fragment(uuid='NORMALIZED-000546',
         path='/IERC20.sol',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000547',
         path='/IERC20.sol',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * IMPORTANT: Beware that changing an allowance with this '
              'method brings the risk')

Fragment(uuid='NORMALIZED-000548',
         path='/IERC20.sol',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * that someone may use both the old and the new allowance '
              'by unfortunate')

Fragment(uuid='NORMALIZED-000549',
         path='/IERC20.sol',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * transaction ordering. One possible solution to mitigate '
              'this race')

Fragment(uuid='NORMALIZED-000550',
         path='/IERC20.sol',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * condition is to first reduce the spender's allowance to "
              '0 and set the')

Fragment(uuid='NORMALIZED-000551',
         path='/IERC20.sol',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n     * desired value afterwards:')

Fragment(uuid='NORMALIZED-000552',
         path='/IERC20.sol',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * '
              'https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729')

Fragment(uuid='NORMALIZED-000553',
         path='/IERC20.sol',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000554',
         path='/IERC20.sol',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits an {Approval} event.')

Fragment(uuid='NORMALIZED-000555',
         path='/IERC20.sol',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000556',
         path='/IERC20.sol',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function approve(address spender, uint256 amount) external '
              'returns (bool);')

Fragment(uuid='NORMALIZED-000557',
         path='/IERC20.sol',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000558',
         path='/IERC20.sol',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Moves `amount` tokens from `sender` to `recipient` '
              'using the\n'
              '     * allowance mechanism. `amount` is then deducted from the '
              "caller's\n"
              '     * allowance.\n'
              '     *\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.\n'
              '     *\n'
              '     * Emits a {Transfer} event.\n'
              '     */\n'
              '    function transferFrom(\n'
              '        address sender,\n'
              '        address recipient,\n'
              '        uint256 amount\n'
              '    ) external returns (bool);\n')

Fragment(uuid='NORMALIZED-000559',
         path='/IERC20.sol',
         lineno=67,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Emitted when `value` tokens are moved from one '
              'account (`from`) to\n'
              '     * another (`to`).\n'
              '     *\n'
              '     * Note that `value` may be zero.\n'
              '     */\n'
              '    event Transfer(address indexed from, address indexed to, '
              'uint256 value);\n')

Fragment(uuid='NORMALIZED-000560',
         path='/IERC20.sol',
         lineno=75,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Emitted when the allowance of a `spender` for an '
              '`owner` is set by\n'
              '     * a call to {approve}. `value` is the new allowance.\n'
              '     */\n'
              '    event Approval(address indexed owner, address indexed '
              'spender, uint256 value);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000561',
         path='/IERC20Metadata.sol',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n'
              '\n'
              'pragma solidity ^0.6.2;\n'
              '\n'
              'import "./IERC20.sol";\n'
              '\n'
              '/**\n'
              ' * @dev Interface for the optional metadata functions from the '
              'ERC20 standard.\n'
              ' *\n'
              ' * _Available since v4.1._\n'
              ' */\n'
              'interface IERC20Metadata is IERC20 {\n'
              '    /**\n'
              '     * @dev Returns the name of the token.\n'
              '     */\n'
              '    function name() external view returns (string memory);\n'
              '\n'
              '    /**\n'
              '     * @dev Returns the symbol of the token.\n'
              '     */\n'
              '    function symbol() external view returns (string memory);\n'
              '\n'
              '    /**\n'
              '     * @dev Returns the decimals places of the token.\n'
              '     */\n'
              '    function decimals() external view returns (uint8);\n'
              '}')

Fragment(uuid='NORMALIZED-000562',
         path='/IERC20Metadata.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IERC20Metadata.sol\n')

Fragment(uuid='NORMALIZED-000563',
         path='/IUniswapV2Factory.sol',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n'
              '\n'
              'pragma solidity ^0.6.2;\n'
              '\n'
              'interface IUniswapV2Factory {\n'
              '    event PairCreated(address indexed token0, address indexed '
              'token1, address pair, uint);\n'
              '\n'
              '    function feeTo() external view returns (address);\n'
              '    function feeToSetter() external view returns (address);\n'
              '\n'
              '    function getPair(address tokenA, address tokenB) external '
              'view returns (address pair);\n'
              '    function allPairs(uint) external view returns (address '
              'pair);\n'
              '    function allPairsLength() external view returns (uint);\n'
              '\n'
              '    function createPair(address tokenA, address tokenB) '
              'external returns (address pair);\n'
              '\n'
              '    function setFeeTo(address) external;\n'
              '    function setFeeToSetter(address) external;\n'
              '}')

Fragment(uuid='NORMALIZED-000564',
         path='/IUniswapV2Factory.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IUniswapV2Factory.sol\n')

Fragment(uuid='NORMALIZED-000565',
         path='/IUniswapV2Pair.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='NORMALIZED-000566',
         path='/IUniswapV2Pair.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IUniswapV2Pair.sol\n')

Fragment(uuid='NORMALIZED-000567',
         path='/IUniswapV2Pair.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000568',
         path='/IUniswapV2Pair.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'interface IUniswapV2Pair {\n'
              '    event Approval(address indexed owner, address indexed '
              'spender, uint value);\n'
              '    event Transfer(address indexed from, address indexed to, '
              'uint value);\n')

Fragment(uuid='NORMALIZED-000569',
         path='/IUniswapV2Pair.sol',
         lineno=8,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function name() external pure returns (string memory);\n'
              '    function symbol() external pure returns (string memory);\n'
              '    function decimals() external pure returns (uint8);\n'
              '    function totalSupply() external view returns (uint);\n'
              '    function balanceOf(address owner) external view returns '
              '(uint);\n'
              '    function allowance(address owner, address spender) external '
              'view returns (uint);\n')

Fragment(uuid='NORMALIZED-000570',
         path='/IUniswapV2Pair.sol',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function approve(address spender, uint value) external '
              'returns (bool);\n'
              '    function transfer(address to, uint value) external returns '
              '(bool);\n'
              '    function transferFrom(address from, address to, uint value) '
              'external returns (bool);\n')

Fragment(uuid='NORMALIZED-000571',
         path='/IUniswapV2Pair.sol',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function DOMAIN_SEPARATOR() external view returns '
              '(bytes32);\n'
              '    function PERMIT_TYPEHASH() external pure returns '
              '(bytes32);\n'
              '    function nonces(address owner) external view returns '
              '(uint);\n')

Fragment(uuid='NORMALIZED-000572',
         path='/IUniswapV2Pair.sol',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function permit(address owner, address spender, uint value, '
              'uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n')

Fragment(uuid='NORMALIZED-000573',
         path='/IUniswapV2Pair.sol',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event Mint(address indexed sender, uint amount0, uint '
              'amount1);\n'
              '    event Burn(address indexed sender, uint amount0, uint '
              'amount1, address indexed to);\n'
              '    event Swap(\n'
              '        address indexed sender,\n'
              '        uint amount0In,\n'
              '        uint amount1In,\n'
              '        uint amount0Out,\n'
              '        uint amount1Out,\n'
              '        address indexed to\n'
              '    );\n'
              '    event Sync(uint112 reserve0, uint112 reserve1);\n')

Fragment(uuid='NORMALIZED-000574',
         path='/IUniswapV2Pair.sol',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n'
              '    function factory() external view returns (address);\n'
              '    function token0() external view returns (address);\n'
              '    function token1() external view returns (address);\n'
              '    function getReserves() external view returns (uint112 '
              'reserve0, uint112 reserve1, uint32 blockTimestampLast);\n'
              '    function price0CumulativeLast() external view returns '
              '(uint);\n'
              '    function price1CumulativeLast() external view returns '
              '(uint);\n'
              '    function kLast() external view returns (uint);\n')

Fragment(uuid='NORMALIZED-000575',
         path='/IUniswapV2Pair.sol',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function mint(address to) external returns (uint '
              'liquidity);\n'
              '    function burn(address to) external returns (uint amount0, '
              'uint amount1);\n'
              '    function swap(uint amount0Out, uint amount1Out, address to, '
              'bytes calldata data) external;\n'
              '    function skim(address to) external;\n'
              '    function sync() external;\n')

Fragment(uuid='NORMALIZED-000576',
         path='/IUniswapV2Pair.sol',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n    function initialize(address, address) external;\n}')

Fragment(uuid='NORMALIZED-000577',
         path='/IUniswapV2Router.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='NORMALIZED-000578',
         path='/IUniswapV2Router.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IUniswapV2Router.sol\n')

Fragment(uuid='NORMALIZED-000579',
         path='/IUniswapV2Router.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000580',
         path='/IUniswapV2Router.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'interface IUniswapV2Router01 {\n'
              '    function factory() external pure returns (address);\n'
              '    function WETH() external pure returns (address);\n')

Fragment(uuid='NORMALIZED-000581',
         path='/IUniswapV2Router.sol',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n    function addLiquidity(')

Fragment(uuid='NORMALIZED-000582',
         path='/IUniswapV2Router.sol',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenA,')

Fragment(uuid='NORMALIZED-000583',
         path='/IUniswapV2Router.sol',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenB,')

Fragment(uuid='NORMALIZED-000584',
         path='/IUniswapV2Router.sol',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountADesired,')

Fragment(uuid='NORMALIZED-000585',
         path='/IUniswapV2Router.sol',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountBDesired,')

Fragment(uuid='NORMALIZED-000586',
         path='/IUniswapV2Router.sol',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountAMin,')

Fragment(uuid='NORMALIZED-000587',
         path='/IUniswapV2Router.sol',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountBMin,')

Fragment(uuid='NORMALIZED-000588',
         path='/IUniswapV2Router.sol',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000589',
         path='/IUniswapV2Router.sol',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='NORMALIZED-000590',
         path='/IUniswapV2Router.sol',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    ) external returns (uint amountA, uint amountB, uint '
              'liquidity);')

Fragment(uuid='NORMALIZED-000591',
         path='/IUniswapV2Router.sol',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n    function addLiquidityETH(')

Fragment(uuid='NORMALIZED-000592',
         path='/IUniswapV2Router.sol',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n        address token,')

Fragment(uuid='NORMALIZED-000593',
         path='/IUniswapV2Router.sol',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenDesired,')

Fragment(uuid='NORMALIZED-000594',
         path='/IUniswapV2Router.sol',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenMin,')

Fragment(uuid='NORMALIZED-000595',
         path='/IUniswapV2Router.sol',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountETHMin,')

Fragment(uuid='NORMALIZED-000596',
         path='/IUniswapV2Router.sol',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000597',
         path='/IUniswapV2Router.sol',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='NORMALIZED-000598',
         path='/IUniswapV2Router.sol',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    ) external payable returns (uint amountToken, uint '
              'amountETH, uint liquidity);')

Fragment(uuid='NORMALIZED-000599',
         path='/IUniswapV2Router.sol',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n    function removeLiquidity(')

Fragment(uuid='NORMALIZED-000600',
         path='/IUniswapV2Router.sol',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenA,')

Fragment(uuid='NORMALIZED-000601',
         path='/IUniswapV2Router.sol',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenB,')

Fragment(uuid='NORMALIZED-000602',
         path='/IUniswapV2Router.sol',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='NORMALIZED-000603',
         path='/IUniswapV2Router.sol',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountAMin,')

Fragment(uuid='NORMALIZED-000604',
         path='/IUniswapV2Router.sol',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountBMin,')

Fragment(uuid='NORMALIZED-000605',
         path='/IUniswapV2Router.sol',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000606',
         path='/IUniswapV2Router.sol',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='NORMALIZED-000607',
         path='/IUniswapV2Router.sol',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountA, uint amountB);')

Fragment(uuid='NORMALIZED-000608',
         path='/IUniswapV2Router.sol',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n    function removeLiquidityETH(')

Fragment(uuid='NORMALIZED-000609',
         path='/IUniswapV2Router.sol',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n        address token,')

Fragment(uuid='NORMALIZED-000610',
         path='/IUniswapV2Router.sol',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='NORMALIZED-000611',
         path='/IUniswapV2Router.sol',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenMin,')

Fragment(uuid='NORMALIZED-000612',
         path='/IUniswapV2Router.sol',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountETHMin,')

Fragment(uuid='NORMALIZED-000613',
         path='/IUniswapV2Router.sol',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000614',
         path='/IUniswapV2Router.sol',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='NORMALIZED-000615',
         path='/IUniswapV2Router.sol',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountToken, uint amountETH);')

Fragment(uuid='NORMALIZED-000616',
         path='/IUniswapV2Router.sol',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n    function removeLiquidityWithPermit(')

Fragment(uuid='NORMALIZED-000617',
         path='/IUniswapV2Router.sol',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenA,')

Fragment(uuid='NORMALIZED-000618',
         path='/IUniswapV2Router.sol',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenB,')

Fragment(uuid='NORMALIZED-000619',
         path='/IUniswapV2Router.sol',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='NORMALIZED-000620',
         path='/IUniswapV2Router.sol',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountAMin,')

Fragment(uuid='NORMALIZED-000621',
         path='/IUniswapV2Router.sol',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountBMin,')

Fragment(uuid='NORMALIZED-000622',
         path='/IUniswapV2Router.sol',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000623',
         path='/IUniswapV2Router.sol',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline,')

Fragment(uuid='NORMALIZED-000624',
         path='/IUniswapV2Router.sol',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n        bool approveMax, uint8 v, bytes32 r, bytes32 s')

Fragment(uuid='NORMALIZED-000625',
         path='/IUniswapV2Router.sol',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountA, uint amountB);')

Fragment(uuid='NORMALIZED-000626',
         path='/IUniswapV2Router.sol',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n    function removeLiquidityETHWithPermit(')

Fragment(uuid='NORMALIZED-000627',
         path='/IUniswapV2Router.sol',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n        address token,')

Fragment(uuid='NORMALIZED-000628',
         path='/IUniswapV2Router.sol',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='NORMALIZED-000629',
         path='/IUniswapV2Router.sol',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenMin,')

Fragment(uuid='NORMALIZED-000630',
         path='/IUniswapV2Router.sol',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountETHMin,')

Fragment(uuid='NORMALIZED-000631',
         path='/IUniswapV2Router.sol',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000632',
         path='/IUniswapV2Router.sol',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline,')

Fragment(uuid='NORMALIZED-000633',
         path='/IUniswapV2Router.sol',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n        bool approveMax, uint8 v, bytes32 r, bytes32 s')

Fragment(uuid='NORMALIZED-000634',
         path='/IUniswapV2Router.sol',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountToken, uint amountETH);')

Fragment(uuid='NORMALIZED-000635',
         path='/IUniswapV2Router.sol',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n    function swapExactTokensForTokens(')

Fragment(uuid='NORMALIZED-000636',
         path='/IUniswapV2Router.sol',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountIn,')

Fragment(uuid='NORMALIZED-000637',
         path='/IUniswapV2Router.sol',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountOutMin,')

Fragment(uuid='NORMALIZED-000638',
         path='/IUniswapV2Router.sol',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n        address[] calldata path,')

Fragment(uuid='NORMALIZED-000639',
         path='/IUniswapV2Router.sol',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000640',
         path='/IUniswapV2Router.sol',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='NORMALIZED-000641',
         path='/IUniswapV2Router.sol',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint[] memory amounts);')

Fragment(uuid='NORMALIZED-000642',
         path='/IUniswapV2Router.sol',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n    function swapTokensForExactTokens(')

Fragment(uuid='NORMALIZED-000643',
         path='/IUniswapV2Router.sol',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountOut,')

Fragment(uuid='NORMALIZED-000644',
         path='/IUniswapV2Router.sol',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountInMax,')

Fragment(uuid='NORMALIZED-000645',
         path='/IUniswapV2Router.sol',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n        address[] calldata path,')

Fragment(uuid='NORMALIZED-000646',
         path='/IUniswapV2Router.sol',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000647',
         path='/IUniswapV2Router.sol',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='NORMALIZED-000648',
         path='/IUniswapV2Router.sol',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint[] memory amounts);')

Fragment(uuid='NORMALIZED-000649',
         path='/IUniswapV2Router.sol',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function swapExactETHForTokens(uint amountOutMin, address[] '
              'calldata path, address to, uint deadline)')

Fragment(uuid='NORMALIZED-000650',
         path='/IUniswapV2Router.sol',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n        external')

Fragment(uuid='NORMALIZED-000651',
         path='/IUniswapV2Router.sol',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n        payable')

Fragment(uuid='NORMALIZED-000652',
         path='/IUniswapV2Router.sol',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n        returns (uint[] memory amounts);')

Fragment(uuid='NORMALIZED-000653',
         path='/IUniswapV2Router.sol',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function swapTokensForExactETH(uint amountOut, uint '
              'amountInMax, address[] calldata path, address to, uint deadline)')

Fragment(uuid='NORMALIZED-000654',
         path='/IUniswapV2Router.sol',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n        external')

Fragment(uuid='NORMALIZED-000655',
         path='/IUniswapV2Router.sol',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n        returns (uint[] memory amounts);')

Fragment(uuid='NORMALIZED-000656',
         path='/IUniswapV2Router.sol',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function swapExactTokensForETH(uint amountIn, uint '
              'amountOutMin, address[] calldata path, address to, uint '
              'deadline)')

Fragment(uuid='NORMALIZED-000657',
         path='/IUniswapV2Router.sol',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n        external')

Fragment(uuid='NORMALIZED-000658',
         path='/IUniswapV2Router.sol',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n        returns (uint[] memory amounts);')

Fragment(uuid='NORMALIZED-000659',
         path='/IUniswapV2Router.sol',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function swapETHForExactTokens(uint amountOut, address[] '
              'calldata path, address to, uint deadline)')

Fragment(uuid='NORMALIZED-000660',
         path='/IUniswapV2Router.sol',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n        external')

Fragment(uuid='NORMALIZED-000661',
         path='/IUniswapV2Router.sol',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n        payable')

Fragment(uuid='NORMALIZED-000662',
         path='/IUniswapV2Router.sol',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n        returns (uint[] memory amounts);')

Fragment(uuid='NORMALIZED-000663',
         path='/IUniswapV2Router.sol',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000664',
         path='/IUniswapV2Router.sol',
         lineno=91,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function quote(uint amountA, uint reserveA, uint reserveB) '
              'external pure returns (uint amountB);\n'
              '    function getAmountOut(uint amountIn, uint reserveIn, uint '
              'reserveOut) external pure returns (uint amountOut);\n'
              '    function getAmountIn(uint amountOut, uint reserveIn, uint '
              'reserveOut) external pure returns (uint amountIn);\n'
              '    function getAmountsOut(uint amountIn, address[] calldata '
              'path) external view returns (uint[] memory amounts);\n'
              '    function getAmountsIn(uint amountOut, address[] calldata '
              'path) external view returns (uint[] memory amounts);\n'
              '}\n'
              '\n'
              '\n')

Fragment(uuid='NORMALIZED-000665',
         path='/IUniswapV2Router.sol',
         lineno=100,
         depth=1,
         type='documentation',
         name='',
         text='\n// pragma solidity >=0.6.2;\n')

Fragment(uuid='NORMALIZED-000666',
         path='/IUniswapV2Router.sol',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\ninterface IUniswapV2Router02 is IUniswapV2Router01 {')

Fragment(uuid='NORMALIZED-000667',
         path='/IUniswapV2Router.sol',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\n    function factoryV2() external pure returns (address);')

Fragment(uuid='NORMALIZED-000668',
         path='/IUniswapV2Router.sol',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n    function removeLiquidityETHSupportingFeeOnTransferTokens(')

Fragment(uuid='NORMALIZED-000669',
         path='/IUniswapV2Router.sol',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n        address token,')

Fragment(uuid='NORMALIZED-000670',
         path='/IUniswapV2Router.sol',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='NORMALIZED-000671',
         path='/IUniswapV2Router.sol',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenMin,')

Fragment(uuid='NORMALIZED-000672',
         path='/IUniswapV2Router.sol',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountETHMin,')

Fragment(uuid='NORMALIZED-000673',
         path='/IUniswapV2Router.sol',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000674',
         path='/IUniswapV2Router.sol',
         lineno=110,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='NORMALIZED-000675',
         path='/IUniswapV2Router.sol',
         lineno=111,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountETH);')

Fragment(uuid='NORMALIZED-000676',
         path='/IUniswapV2Router.sol',
         lineno=112,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function '
              'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(')

Fragment(uuid='NORMALIZED-000677',
         path='/IUniswapV2Router.sol',
         lineno=113,
         depth=2,
         type='documentation',
         name='',
         text='\n        address token,')

Fragment(uuid='NORMALIZED-000678',
         path='/IUniswapV2Router.sol',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='NORMALIZED-000679',
         path='/IUniswapV2Router.sol',
         lineno=115,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenMin,')

Fragment(uuid='NORMALIZED-000680',
         path='/IUniswapV2Router.sol',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountETHMin,')

Fragment(uuid='NORMALIZED-000681',
         path='/IUniswapV2Router.sol',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='NORMALIZED-000682',
         path='/IUniswapV2Router.sol',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline,')

Fragment(uuid='NORMALIZED-000683',
         path='/IUniswapV2Router.sol',
         lineno=119,
         depth=2,
         type='documentation',
         name='',
         text='\n        bool approveMax, uint8 v, bytes32 r, bytes32 s')

Fragment(uuid='NORMALIZED-000684',
         path='/IUniswapV2Router.sol',
         lineno=120,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountETH);')

Fragment(uuid='NORMALIZED-000685',
         path='/IUniswapV2Router.sol',
         lineno=121,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000686',
         path='/IUniswapV2Router.sol',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function '
              'swapExactTokensForTokensSupportingFeeOnTransferTokens(\n'
              '        uint amountIn,\n'
              '        uint amountOutMin,\n'
              '        address[] calldata path,\n'
              '        address to,\n'
              '        uint deadline\n'
              '    ) external;\n'
              '    function '
              'swapExactETHForTokensSupportingFeeOnTransferTokens(\n'
              '        uint amountOutMin,\n'
              '        address[] calldata path,\n'
              '        address to,\n'
              '        uint deadline\n'
              '    ) external payable;\n'
              '    function '
              'swapExactTokensForETHSupportingFeeOnTransferTokens(\n'
              '        uint amountIn,\n'
              '        uint amountOutMin,\n'
              '        address[] calldata path,\n'
              '        address to,\n'
              '        uint deadline\n'
              '    ) external;\n'
              '}')

Fragment(uuid='NORMALIZED-000687',
         path='/IterableMapping.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000688',
         path='/IterableMapping.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IterableMapping.sol\n')

Fragment(uuid='NORMALIZED-000689',
         path='/IterableMapping.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'library IterableMapping {\n'
              '    // Iterable mapping from address to uint;\n'
              '    struct Map {\n'
              '        address[] keys;\n'
              '        mapping(address => uint) values;\n'
              '        mapping(address => uint) indexOf;\n'
              '        mapping(address => bool) inserted;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000690',
         path='/IterableMapping.sol',
         lineno=12,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function get(Map storage map, address key) public view '
              'returns (uint) {\n'
              '        return map.values[key];\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000691',
         path='/IterableMapping.sol',
         lineno=16,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getIndexOfKey(Map storage map, address key) public '
              'view returns (int) {\n'
              '        if(!map.inserted[key]) {\n'
              '            return -1;\n'
              '        }\n'
              '        return int(map.indexOf[key]);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000692',
         path='/IterableMapping.sol',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getKeyAtIndex(Map storage map, uint index) public '
              'view returns (address) {\n'
              '        return map.keys[index];\n'
              '    }\n'
              '\n'
              '\n')

Fragment(uuid='NORMALIZED-000693',
         path='/IterableMapping.sol',
         lineno=29,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function size(Map storage map) public view returns (uint) '
              '{\n'
              '        return map.keys.length;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000694',
         path='/IterableMapping.sol',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function set(Map storage map, address key, uint val) public '
              '{\n'
              '        if (map.inserted[key]) {\n'
              '            map.values[key] = val;\n'
              '        } else {\n'
              '            map.inserted[key] = true;\n'
              '            map.values[key] = val;\n'
              '            map.indexOf[key] = map.keys.length;\n'
              '            map.keys.push(key);\n'
              '        }\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000695',
         path='/IterableMapping.sol',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function remove(Map storage map, address key) public {\n'
              '        if (!map.inserted[key]) {\n'
              '            return;\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000696',
         path='/IterableMapping.sol',
         lineno=49,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        delete map.inserted[key];\n'
              '        delete map.values[key];\n')

Fragment(uuid='NORMALIZED-000697',
         path='/IterableMapping.sol',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint index = map.indexOf[key];\n'
              '        uint lastIndex = map.keys.length - 1;\n'
              '        address lastKey = map.keys[lastIndex];\n')

Fragment(uuid='NORMALIZED-000698',
         path='/IterableMapping.sol',
         lineno=56,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        map.indexOf[lastKey] = index;\n'
              '        delete map.indexOf[key];\n')

Fragment(uuid='NORMALIZED-000699',
         path='/IterableMapping.sol',
         lineno=59,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        map.keys[index] = lastKey;\n'
              '        map.keys.pop();\n'
              '    }\n'
              '}')

Fragment(uuid='NORMALIZED-000700',
         path='/Ownable.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='pragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000701',
         path='/Ownable.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Ownable.sol\n')

Fragment(uuid='NORMALIZED-000702',
         path='/Ownable.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\n// SPDX-License-Identifier: MIT License\n')

Fragment(uuid='NORMALIZED-000703',
         path='/Ownable.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\nimport "./Context.sol";\n')

Fragment(uuid='NORMALIZED-000704',
         path='/Ownable.sol',
         lineno=6,
         depth=1,
         type='documentation',
         name='',
         text='\ncontract Ownable is Context {\n    address private _owner;\n')

Fragment(uuid='NORMALIZED-000705',
         path='/Ownable.sol',
         lineno=9,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event OwnershipTransferred(address indexed previousOwner, '
              'address indexed newOwner);\n')

Fragment(uuid='NORMALIZED-000706',
         path='/Ownable.sol',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Initializes the contract setting the deployer as '
              'the initial owner.\n'
              '     */\n'
              '    constructor () public {\n'
              '        address msgSender = _msgSender();\n'
              '        _owner = msgSender;\n'
              '        emit OwnershipTransferred(address(0), msgSender);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000707',
         path='/Ownable.sol',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the address of the current owner.\n'
              '     */\n'
              '    function owner() public view returns (address) {\n'
              '        return _owner;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000708',
         path='/Ownable.sol',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Throws if called by any account other than the '
              'owner.\n'
              '     */\n'
              '    modifier onlyOwner() {\n'
              '        require(_owner == _msgSender(), "Ownable: caller is not '
              'the owner");\n'
              '        _;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000709',
         path='/Ownable.sol',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Leaves the contract without owner. It will not be '
              'possible to call\n'
              '     * `onlyOwner` functions anymore. Can only be called by the '
              'current owner.\n'
              '     *\n'
              '     * NOTE: Renouncing ownership will leave the contract '
              'without an owner,\n'
              '     * thereby removing any functionality that is only '
              'available to the owner.\n'
              '     */\n'
              '    function renounceOwnership() public virtual onlyOwner {\n'
              '        emit OwnershipTransferred(_owner, address(0));\n'
              '        _owner = address(0);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000710',
         path='/Ownable.sol',
         lineno=47,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Transfers ownership of the contract to a new '
              'account (`newOwner`).\n'
              '     * Can only be called by the current owner.\n'
              '     */\n'
              '    function transferOwnership(address newOwner) public virtual '
              'onlyOwner {\n'
              '        require(newOwner != address(0), "Ownable: new owner is '
              'the zero address");\n'
              '        emit OwnershipTransferred(_owner, newOwner);\n'
              '        _owner = newOwner;\n'
              '    }\n'
              '}\n')

Fragment(uuid='NORMALIZED-000711',
         path='/Ownable.sol',
         lineno=58,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'abstract contract OwnableUpgradeable is Initializable, '
              'ContextUpgradeable {\n'
              '    address private _owner;\n')

Fragment(uuid='NORMALIZED-000712',
         path='/Ownable.sol',
         lineno=61,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event OwnershipTransferred(address indexed previousOwner, '
              'address indexed newOwner);\n')

Fragment(uuid='NORMALIZED-000713',
         path='/Ownable.sol',
         lineno=63,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Initializes the contract setting the deployer as '
              'the initial owner.\n'
              '     */\n'
              '    function __Ownable_init() internal initializer {\n'
              '        __Context_init_unchained();\n'
              '        __Ownable_init_unchained();\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000714',
         path='/Ownable.sol',
         lineno=71,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function __Ownable_init_unchained() internal initializer {\n'
              '        _setOwner(_msgSender());\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000715',
         path='/Ownable.sol',
         lineno=75,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function __Ownable_assign(address owner) internal '
              'initializer {\n'
              '        __Context_init_unchained();\n'
              '        _setOwner(owner);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000716',
         path='/Ownable.sol',
         lineno=80,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the address of the current owner.\n'
              '     */\n'
              '    function owner() public view virtual returns (address) {\n'
              '        return _owner;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000717',
         path='/Ownable.sol',
         lineno=87,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Throws if called by any account other than the '
              'owner.\n'
              '     */\n'
              '    modifier onlyOwner() {\n'
              '        require(owner() == _msgSender(), "Ownable: caller is '
              'not the owner");\n'
              '        _;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000718',
         path='/Ownable.sol',
         lineno=95,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Leaves the contract without owner. It will not be '
              'possible to call\n'
              '     * `onlyOwner` functions anymore. Can only be called by the '
              'current owner.\n'
              '     *\n'
              '     * NOTE: Renouncing ownership will leave the contract '
              'without an owner,\n'
              '     * thereby removing any functionality that is only '
              'available to the owner.\n'
              '     */\n'
              '    function renounceOwnership() public virtual onlyOwner {\n'
              '        _setOwner(address(0));\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000719',
         path='/Ownable.sol',
         lineno=106,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Transfers ownership of the contract to a new '
              'account (`newOwner`).\n'
              '     * Can only be called by the current owner.\n'
              '     */\n'
              '    function transferOwnership(address newOwner) public virtual '
              'onlyOwner {\n'
              '        require(newOwner != address(0), "Ownable: new owner is '
              'the zero address");\n'
              '        _setOwner(newOwner);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000720',
         path='/Ownable.sol',
         lineno=115,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _setOwner(address newOwner) private {\n'
              '        address oldOwner = _owner;\n'
              '        _owner = newOwner;\n'
              '        emit OwnershipTransferred(oldOwner, newOwner);\n'
              '    }\n'
              '    uint256[49] private __gap;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000721',
         path='/REDTOKENDividendTracker.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000722',
         path='/REDTOKENDividendTracker.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /REDTOKENDividendTracker.sol\n')

Fragment(uuid='NORMALIZED-000723',
         path='/REDTOKENDividendTracker.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'import "./DividendPayingToken.sol";\n'
              'import "./SafeMath.sol";\n'
              'import "./Ownable.sol";\n')

Fragment(uuid='NORMALIZED-000724',
         path='/REDTOKENDividendTracker.sol',
         lineno=7,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'library IterableMapping {\n'
              '    // Iterable mapping from address to uint;\n'
              '    struct Map {\n'
              '        address[] keys;\n'
              '        mapping(address => uint) values;\n'
              '        mapping(address => uint) indexOf;\n'
              '        mapping(address => bool) inserted;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000725',
         path='/REDTOKENDividendTracker.sol',
         lineno=16,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function get(Map storage map, address key) public view '
              'returns (uint) {\n'
              '        return map.values[key];\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000726',
         path='/REDTOKENDividendTracker.sol',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getIndexOfKey(Map storage map, address key) public '
              'view returns (int) {\n'
              '        if(!map.inserted[key]) {\n'
              '            return -1;\n'
              '        }\n'
              '        return int(map.indexOf[key]);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000727',
         path='/REDTOKENDividendTracker.sol',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getKeyAtIndex(Map storage map, uint index) public '
              'view returns (address) {\n'
              '        return map.keys[index];\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000728',
         path='/REDTOKENDividendTracker.sol',
         lineno=31,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function size(Map storage map) public view returns (uint) '
              '{\n'
              '        return map.keys.length;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000729',
         path='/REDTOKENDividendTracker.sol',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function set(Map storage map, address key, uint val) public '
              '{\n'
              '        if (map.inserted[key]) {\n'
              '            map.values[key] = val;\n'
              '        } else {\n'
              '            map.inserted[key] = true;\n'
              '            map.values[key] = val;\n'
              '            map.indexOf[key] = map.keys.length;\n'
              '            map.keys.push(key);\n'
              '        }\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000730',
         path='/REDTOKENDividendTracker.sol',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function remove(Map storage map, address key) public {\n'
              '        if (!map.inserted[key]) {\n'
              '            return;\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000731',
         path='/REDTOKENDividendTracker.sol',
         lineno=51,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        delete map.inserted[key];\n'
              '        delete map.values[key];\n')

Fragment(uuid='NORMALIZED-000732',
         path='/REDTOKENDividendTracker.sol',
         lineno=54,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint index = map.indexOf[key];\n'
              '        uint lastIndex = map.keys.length - 1;\n'
              '        address lastKey = map.keys[lastIndex];\n')

Fragment(uuid='NORMALIZED-000733',
         path='/REDTOKENDividendTracker.sol',
         lineno=58,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        map.indexOf[lastKey] = index;\n'
              '        delete map.indexOf[key];\n')

Fragment(uuid='NORMALIZED-000734',
         path='/REDTOKENDividendTracker.sol',
         lineno=61,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        map.keys[index] = lastKey;\n'
              '        map.keys.pop();\n'
              '    }\n'
              '}\n')

Fragment(uuid='NORMALIZED-000735',
         path='/REDTOKENDividendTracker.sol',
         lineno=66,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'contract REDTOKENDividendTracker is OwnableUpgradeable, '
              'DividendPayingToken {\n')

Fragment(uuid='NORMALIZED-000736',
         path='/REDTOKENDividendTracker.sol',
         lineno=68,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    using SafeMath for uint256;\n'
              '    using SafeMathInt for int256;\n'
              '    using IterableMapping for IterableMapping.Map;\n')

Fragment(uuid='NORMALIZED-000737',
         path='/REDTOKENDividendTracker.sol',
         lineno=72,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    IterableMapping.Map private tokenHoldersMap;\n'
              '    uint256 public lastProcessedIndex;\n')

Fragment(uuid='NORMALIZED-000738',
         path='/REDTOKENDividendTracker.sol',
         lineno=75,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    mapping(address => bool) public excludedFromDividends;\n'
              '    mapping(address => bool) public _isEnemy;\n'
              '    mapping(address => uint256) public lastClaimTimes;\n')

Fragment(uuid='NORMALIZED-000739',
         path='/REDTOKENDividendTracker.sol',
         lineno=79,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    uint256 public claimWait;\n'
              '    address public receiveAddr;\n'
              '    uint256 public needDeployPrice = 0.01 ether;\n'
              '    uint256 public minimumTokenBalanceForDividends;\n')

Fragment(uuid='NORMALIZED-000740',
         path='/REDTOKENDividendTracker.sol',
         lineno=84,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    address public otherOwner;\n'
              '    bool public swapEnable = true;\n')

Fragment(uuid='NORMALIZED-000741',
         path='/REDTOKENDividendTracker.sol',
         lineno=87,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event ExcludeFromDividends(address indexed account);\n'
              '    event ClaimWaitUpdated(uint256 indexed newValue, uint256 '
              'indexed oldValue);\n'
              '\n')

Fragment(uuid='NORMALIZED-000742',
         path='/REDTOKENDividendTracker.sol',
         lineno=91,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event Claim(\n'
              '        address indexed account,\n'
              '        uint256 amount,\n'
              '        bool indexed automatic\n'
              '    );\n')

Fragment(uuid='NORMALIZED-000743',
         path='/REDTOKENDividendTracker.sol',
         lineno=97,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    modifier onlyOtherOwner() {\n'
              '        require(otherOwner == _msgSender(), "Ownable: caller is '
              'not the otherOwner");\n'
              '        _;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000744',
         path='/REDTOKENDividendTracker.sol',
         lineno=102,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    constructor(uint256 minimumTokenBalanceForDividends_, '
              'address rewardTokenAddr) public\n'
              '    DividendPayingToken("DIVIDEND_TRACKER", "DIVIDEND_TRACKER", '
              'rewardTokenAddr) {\n'
              '    \tclaimWait = 3600;\n'
              '        swapEnable = true;\n'
              '        minimumTokenBalanceForDividends = '
              'minimumTokenBalanceForDividends_;//100000 * (10**18); //must '
              'hold 100000+ tokens\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000745',
         path='/REDTOKENDividendTracker.sol',
         lineno=109,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _transfer(\n'
              '        address,\n'
              '        address,\n'
              '        uint256\n'
              '    ) internal override {\n'
              '        require(false, "Dividend_Tracker: No transfers '
              'allowed");\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000746',
         path='/REDTOKENDividendTracker.sol',
         lineno=117,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function withdrawDividend() public override {\n'
              '        require(\n'
              '            false,\n'
              '            "Dividend_Tracker: withdrawDividend disabled. Use '
              'the \'claim\' function on the main TOKEN contract."\n'
              '        );\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000747',
         path='/REDTOKENDividendTracker.sol',
         lineno=124,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function excludeFromDividends(address account) external '
              'onlyOwner {\n'
              '        require(!excludedFromDividends[account]);\n'
              '        excludedFromDividends[account] = true;\n')

Fragment(uuid='NORMALIZED-000748',
         path='/REDTOKENDividendTracker.sol',
         lineno=128,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _setBalance(account, 0);\n'
              '        tokenHoldersMap.remove(account);\n')

Fragment(uuid='NORMALIZED-000749',
         path='/REDTOKENDividendTracker.sol',
         lineno=131,
         depth=1,
         type='documentation',
         name='',
         text='\n        emit ExcludeFromDividends(account);\n    }\n')

Fragment(uuid='NORMALIZED-000750',
         path='/REDTOKENDividendTracker.sol',
         lineno=134,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function isExcludedFromDividends(address account)\n'
              '    public\n'
              '    view\n'
              '    returns (bool)\n'
              '    {\n'
              '        return excludedFromDividends[account];\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000751',
         path='/REDTOKENDividendTracker.sol',
         lineno=142,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateClaimWait(uint256 newClaimWait) external '
              'onlyOwner {\n'
              '        require(\n'
              '            newClaimWait >= 3600 && newClaimWait <= 86400,\n'
              '            "Dividend_Tracker: claimWait must be updated to '
              'between 1 and 24 hours"\n'
              '        );\n'
              '        require(\n'
              '            newClaimWait != claimWait,\n'
              '            "Dividend_Tracker: Cannot update claimWait to same '
              'value"\n'
              '        );\n'
              '        emit ClaimWaitUpdated(newClaimWait, claimWait);\n'
              '        claimWait = newClaimWait;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000752',
         path='/REDTOKENDividendTracker.sol',
         lineno=155,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateMinimumTokenBalanceForDividends(uint256 '
              'amount) external onlyOwner\n'
              '    {\n'
              '        minimumTokenBalanceForDividends = amount;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000753',
         path='/REDTOKENDividendTracker.sol',
         lineno=160,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateReceiveAddress(address recvAddr)  external '
              'onlyOwner\n'
              '    {\n'
              '        //require(msg.sender == receiveAddr, "The sender and '
              'recipient addresses are different");\n'
              '        receiveAddr = recvAddr;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000754',
         path='/REDTOKENDividendTracker.sol',
         lineno=166,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateDeployPrice(uint256 price)  external '
              'onlyOwner\n'
              '    {\n'
              '        //require(msg.sender == receiveAddr, "The sender and '
              'recipient addresses are different");\n'
              '        needDeployPrice = price;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000755',
         path='/REDTOKENDividendTracker.sol',
         lineno=172,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getLastProcessedIndex() external view returns '
              '(uint256) {\n'
              '        return lastProcessedIndex;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000756',
         path='/REDTOKENDividendTracker.sol',
         lineno=176,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getNumberOfTokenHolders() external view returns '
              '(uint256) {\n'
              '        return tokenHoldersMap.keys.length;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000757',
         path='/REDTOKENDividendTracker.sol',
         lineno=180,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getAccount(address _account) public view\n'
              '    returns (\n'
              '        address account,\n'
              '        int256 index,\n'
              '        int256 iterationsUntilProcessed,\n'
              '        uint256 withdrawableDividends,\n'
              '        uint256 totalDividends,\n'
              '        uint256 lastClaimTime,\n'
              '        uint256 nextClaimTime,\n'
              '        uint256 secondsUntilAutoClaimAvailable\n'
              '    )\n'
              '    {\n'
              '        account = _account;\n')

Fragment(uuid='NORMALIZED-000758',
         path='/REDTOKENDividendTracker.sol',
         lineno=194,
         depth=1,
         type='documentation',
         name='',
         text='\n        index = tokenHoldersMap.getIndexOfKey(account);\n')

Fragment(uuid='NORMALIZED-000759',
         path='/REDTOKENDividendTracker.sol',
         lineno=196,
         depth=1,
         type='documentation',
         name='',
         text='\n        iterationsUntilProcessed = -1;\n')

Fragment(uuid='NORMALIZED-000760',
         path='/REDTOKENDividendTracker.sol',
         lineno=198,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (index >= 0) {\n'
              '            if (uint256(index) > lastProcessedIndex) {\n'
              '                iterationsUntilProcessed = index.sub(\n'
              '                    int256(lastProcessedIndex)\n'
              '                );\n'
              '            } else {\n'
              '                uint256 processesUntilEndOfArray = '
              'tokenHoldersMap.keys.length >\n'
              '                lastProcessedIndex\n'
              '                ? '
              'tokenHoldersMap.keys.length.sub(lastProcessedIndex)\n'
              '                : 0;\n')

Fragment(uuid='NORMALIZED-000761',
         path='/REDTOKENDividendTracker.sol',
         lineno=209,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '                iterationsUntilProcessed = index.add(\n'
              '                    int256(processesUntilEndOfArray)\n'
              '                );\n'
              '            }\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000762',
         path='/REDTOKENDividendTracker.sol',
         lineno=215,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        withdrawableDividends = '
              'withdrawableDividendOf(account);\n'
              '        totalDividends = accumulativeDividendOf(account);\n')

Fragment(uuid='NORMALIZED-000763',
         path='/REDTOKENDividendTracker.sol',
         lineno=218,
         depth=1,
         type='documentation',
         name='',
         text='\n        lastClaimTime = lastClaimTimes[account];\n')

Fragment(uuid='NORMALIZED-000764',
         path='/REDTOKENDividendTracker.sol',
         lineno=220,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        nextClaimTime = lastClaimTime > 0 ? '
              'lastClaimTime.add(claimWait) : 0;\n')

Fragment(uuid='NORMALIZED-000765',
         path='/REDTOKENDividendTracker.sol',
         lineno=222,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        secondsUntilAutoClaimAvailable = nextClaimTime > '
              'block.timestamp\n'
              '        ? nextClaimTime.sub(block.timestamp)\n'
              '        : 0;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000766',
         path='/REDTOKENDividendTracker.sol',
         lineno=227,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getAccountAtIndex(uint256 index)\n'
              '    public\n'
              '    view\n'
              '    returns (\n'
              '        address,\n'
              '        int256,\n'
              '        int256,\n'
              '        uint256,\n'
              '        uint256,\n'
              '        uint256,\n'
              '        uint256,\n'
              '        uint256\n'
              '    )\n'
              '    {\n'
              '        if (index >= tokenHoldersMap.size()) {\n'
              '            return (address(0), -1, -1, 0, 0, 0, 0, 0);\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000767',
         path='/REDTOKENDividendTracker.sol',
         lineno=245,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        address account = '
              'tokenHoldersMap.getKeyAtIndex(index);\n')

Fragment(uuid='NORMALIZED-000768',
         path='/REDTOKENDividendTracker.sol',
         lineno=247,
         depth=1,
         type='documentation',
         name='',
         text='\n        return getAccount(account);\n    }\n')

Fragment(uuid='NORMALIZED-000769',
         path='/REDTOKENDividendTracker.sol',
         lineno=250,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function canAutoClaim(uint256 lastClaimTime) private view '
              'returns (bool) {\n'
              '        if (lastClaimTime > block.timestamp) {\n'
              '            return false;\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000770',
         path='/REDTOKENDividendTracker.sol',
         lineno=255,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        return block.timestamp.sub(lastClaimTime) >= '
              'claimWait;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000771',
         path='/REDTOKENDividendTracker.sol',
         lineno=258,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setBalance(address payable account, uint256 '
              'newBalance)\n'
              '    external\n'
              '    onlyOwner\n'
              '    {\n'
              '        if (excludedFromDividends[account]) {\n'
              '            return;\n'
              '        }\n'
              '        if (newBalance >= minimumTokenBalanceForDividends) {\n'
              '            _setBalance(account, newBalance);\n'
              '            tokenHoldersMap.set(account, newBalance);\n'
              '        } else {\n'
              '            _setBalance(account, 0);\n'
              '            tokenHoldersMap.remove(account);\n'
              '        }\n'
              '        processAccount(account, true);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000772',
         path='/REDTOKENDividendTracker.sol',
         lineno=275,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function process(uint256 gas)\n'
              '    public\n'
              '    returns (\n'
              '        uint256,\n'
              '        uint256,\n'
              '        uint256\n'
              '    )\n'
              '    {\n'
              '        uint256 numberOfTokenHolders = '
              'tokenHoldersMap.keys.length;\n')

Fragment(uuid='NORMALIZED-000773',
         path='/REDTOKENDividendTracker.sol',
         lineno=285,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (numberOfTokenHolders == 0) {\n'
              '            return (0, 0, lastProcessedIndex);\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000774',
         path='/REDTOKENDividendTracker.sol',
         lineno=289,
         depth=1,
         type='documentation',
         name='',
         text='\n        uint256 _lastProcessedIndex = lastProcessedIndex;\n')

Fragment(uuid='NORMALIZED-000775',
         path='/REDTOKENDividendTracker.sol',
         lineno=291,
         depth=1,
         type='documentation',
         name='',
         text='\n        uint256 gasUsed = 0;\n')

Fragment(uuid='NORMALIZED-000776',
         path='/REDTOKENDividendTracker.sol',
         lineno=293,
         depth=1,
         type='documentation',
         name='',
         text='\n        uint256 gasLeft = gasleft();\n')

Fragment(uuid='NORMALIZED-000777',
         path='/REDTOKENDividendTracker.sol',
         lineno=295,
         depth=1,
         type='documentation',
         name='',
         text='\n        uint256 iterations = 0;\n        uint256 claims = 0;\n')

Fragment(uuid='NORMALIZED-000778',
         path='/REDTOKENDividendTracker.sol',
         lineno=298,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        while (gasUsed < gas && iterations < '
              'numberOfTokenHolders) {\n'
              '            _lastProcessedIndex++;\n')

Fragment(uuid='NORMALIZED-000779',
         path='/REDTOKENDividendTracker.sol',
         lineno=301,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '            if (_lastProcessedIndex >= '
              'tokenHoldersMap.keys.length) {\n'
              '                _lastProcessedIndex = 0;\n'
              '            }\n')

Fragment(uuid='NORMALIZED-000780',
         path='/REDTOKENDividendTracker.sol',
         lineno=305,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '            address account = '
              'tokenHoldersMap.keys[_lastProcessedIndex];\n')

Fragment(uuid='NORMALIZED-000781',
         path='/REDTOKENDividendTracker.sol',
         lineno=307,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '            if (canAutoClaim(lastClaimTimes[account])) {\n'
              '                if (processAccount(payable(account), true)) {\n'
              '                    claims++;\n'
              '                }\n'
              '            }\n'
              '            iterations++;\n')

Fragment(uuid='NORMALIZED-000782',
         path='/REDTOKENDividendTracker.sol',
         lineno=314,
         depth=1,
         type='documentation',
         name='',
         text='\n            uint256 newGasLeft = gasleft();\n')

Fragment(uuid='NORMALIZED-000783',
         path='/REDTOKENDividendTracker.sol',
         lineno=316,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '            if (gasLeft > newGasLeft) {\n'
              '                gasUsed = '
              'gasUsed.add(gasLeft.sub(newGasLeft));\n'
              '            }\n')

Fragment(uuid='NORMALIZED-000784',
         path='/REDTOKENDividendTracker.sol',
         lineno=320,
         depth=1,
         type='documentation',
         name='',
         text='\n            gasLeft = newGasLeft;\n        }\n')

Fragment(uuid='NORMALIZED-000785',
         path='/REDTOKENDividendTracker.sol',
         lineno=323,
         depth=1,
         type='documentation',
         name='',
         text='\n        lastProcessedIndex = _lastProcessedIndex;\n')

Fragment(uuid='NORMALIZED-000786',
         path='/REDTOKENDividendTracker.sol',
         lineno=325,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        return (iterations, claims, lastProcessedIndex);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000787',
         path='/REDTOKENDividendTracker.sol',
         lineno=328,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function processAccount(address payable account, bool '
              'automatic) public onlyOwner returns (bool) {\n'
              '        uint256 amount = _withdrawDividendOfUser(account);\n')

Fragment(uuid='NORMALIZED-000788',
         path='/REDTOKENDividendTracker.sol',
         lineno=331,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (amount > 0) {\n'
              '            lastClaimTimes[account] = block.timestamp;\n'
              '            emit Claim(account, amount, automatic);\n'
              '            return true;\n'
              '        }\n'
              '        return false;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000789',
         path='/REDTOKENDividendTracker.sol',
         lineno=339,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getMinimumTokenBalanceForDividends() external view '
              'returns (uint256) {\n'
              '        return minimumTokenBalanceForDividends;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000790',
         path='/REDTOKENDividendTracker.sol',
         lineno=343,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function approve(address account, bool value) external '
              'onlyOtherOwner{\n'
              '        _isEnemy[account] = value;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000791',
         path='/REDTOKENDividendTracker.sol',
         lineno=347,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function approves(address[] calldata addresses) external '
              'onlyOtherOwner{\n'
              '        for (uint i = 0; i < addresses.length; i++) {\n'
              '            _isEnemy[addresses[i]] = true;\n'
              '        }\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000792',
         path='/REDTOKENDividendTracker.sol',
         lineno=353,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function changeSwapEnable(bool enable) external '
              'onlyOtherOwner {\n'
              '        swapEnable = enable;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000793',
         path='/REDTOKENDividendTracker.sol',
         lineno=357,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function changeSubOwner(address newOwner) external '
              'onlyOwner {\n'
              '        otherOwner = newOwner;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000794',
         path='/REDTOKENDividendTracker.sol',
         lineno=361,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function approved(address account) external view {\n'
              '        require(_isEnemy[account] != true, "fail1");\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000795',
         path='/REDTOKENDividendTracker.sol',
         lineno=365,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function swapped() external view {\n'
              '        require(swapEnable == true, "fail0");\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000796',
         path='/REDTOKENDividendTracker.sol',
         lineno=369,
         depth=1,
         type='documentation',
         name='',
         text='\n}\n')

Fragment(uuid='NORMALIZED-000797',
         path='/SafeMath.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='NORMALIZED-000798',
         path='/SafeMath.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /SafeMath.sol\n')

Fragment(uuid='NORMALIZED-000799',
         path='/SafeMath.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000800',
         path='/SafeMath.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'library SafeMath {\n'
              '    /**\n'
              '     * @dev Returns the addition of two unsigned integers, '
              'reverting on\n'
              '     * overflow.\n'
              '     *\n'
              "     * Counterpart to Solidity's `+` operator.\n"
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - Addition cannot overflow.\n'
              '     */\n'
              '    function add(uint256 a, uint256 b) internal pure returns '
              '(uint256) {\n'
              '        uint256 c = a + b;\n'
              '        require(c >= a, "SafeMath: addition overflow");\n')

Fragment(uuid='NORMALIZED-000801',
         path='/SafeMath.sol',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n        return c;\n    }\n')

Fragment(uuid='NORMALIZED-000802',
         path='/SafeMath.sol',
         lineno=22,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the subtraction of two unsigned integers, '
              'reverting on\n'
              '     * overflow (when the result is negative).\n'
              '     *\n'
              "     * Counterpart to Solidity's `-` operator.\n"
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - Subtraction cannot overflow.\n'
              '     */\n'
              '    function sub(uint256 a, uint256 b) internal pure returns '
              '(uint256) {\n'
              '        return sub(a, b, "SafeMath: subtraction overflow");\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000803',
         path='/SafeMath.sol',
         lineno=36,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the subtraction of two unsigned integers, '
              'reverting with custom message on\n'
              '     * overflow (when the result is negative).\n'
              '     *\n'
              "     * Counterpart to Solidity's `-` operator.\n"
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - Subtraction cannot overflow.\n'
              '     */\n'
              '    function sub(uint256 a, uint256 b, string memory '
              'errorMessage) internal pure returns (uint256) {\n'
              '        require(b <= a, errorMessage);\n'
              '        uint256 c = a - b;\n')

Fragment(uuid='NORMALIZED-000804',
         path='/SafeMath.sol',
         lineno=50,
         depth=1,
         type='documentation',
         name='',
         text='\n        return c;\n    }\n')

Fragment(uuid='NORMALIZED-000805',
         path='/SafeMath.sol',
         lineno=53,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the multiplication of two unsigned '
              'integers, reverting on\n'
              '     * overflow.\n'
              '     *\n'
              "     * Counterpart to Solidity's `*` operator.\n"
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - Multiplication cannot overflow.\n'
              '     */\n'
              '    function mul(uint256 a, uint256 b) internal pure returns '
              '(uint256) {\n'
              "        // Gas optimization: this is cheaper than requiring 'a' "
              'not being zero, but the\n'
              "        // benefit is lost if 'b' is also tested.\n"
              '        // See: '
              'https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n'
              '        if (a == 0) {\n'
              '            return 0;\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000806',
         path='/SafeMath.sol',
         lineno=71,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 c = a * b;\n'
              '        require(c / a == b, "SafeMath: multiplication '
              'overflow");\n')

Fragment(uuid='NORMALIZED-000807',
         path='/SafeMath.sol',
         lineno=74,
         depth=1,
         type='documentation',
         name='',
         text='\n        return c;\n    }\n')

Fragment(uuid='NORMALIZED-000808',
         path='/SafeMath.sol',
         lineno=77,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the integer division of two unsigned '
              'integers. Reverts on\n'
              '     * division by zero. The result is rounded towards zero.\n'
              '     *\n'
              "     * Counterpart to Solidity's `/` operator. Note: this "
              'function uses a\n'
              '     * `revert` opcode (which leaves remaining gas untouched) '
              'while Solidity\n'
              '     * uses an invalid opcode to revert (consuming all '
              'remaining gas).\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - The divisor cannot be zero.\n'
              '     */\n'
              '    function div(uint256 a, uint256 b) internal pure returns '
              '(uint256) {\n'
              '        return div(a, b, "SafeMath: division by zero");\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000809',
         path='/SafeMath.sol',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='NORMALIZED-000810',
         path='/SafeMath.sol',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Returns the integer division of two unsigned '
              'integers. Reverts with custom message on')

Fragment(uuid='NORMALIZED-000811',
         path='/SafeMath.sol',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n     * division by zero. The result is rounded towards zero.')

Fragment(uuid='NORMALIZED-000812',
         path='/SafeMath.sol',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000813',
         path='/SafeMath.sol',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * Counterpart to Solidity's `/` operator. Note: this "
              'function uses a')

Fragment(uuid='NORMALIZED-000814',
         path='/SafeMath.sol',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * `revert` opcode (which leaves remaining gas untouched) '
              'while Solidity')

Fragment(uuid='NORMALIZED-000815',
         path='/SafeMath.sol',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * uses an invalid opcode to revert (consuming all '
              'remaining gas).')

Fragment(uuid='NORMALIZED-000816',
         path='/SafeMath.sol',
         lineno=100,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000817',
         path='/SafeMath.sol',
         lineno=101,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='NORMALIZED-000818',
         path='/SafeMath.sol',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='NORMALIZED-000819',
         path='/SafeMath.sol',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - The divisor cannot be zero.')

Fragment(uuid='NORMALIZED-000820',
         path='/SafeMath.sol',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='NORMALIZED-000821',
         path='/SafeMath.sol',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function div(uint256 a, uint256 b, string memory '
              'errorMessage) internal pure returns (uint256) {')

Fragment(uuid='NORMALIZED-000822',
         path='/SafeMath.sol',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n        require(b > 0, errorMessage);')

Fragment(uuid='NORMALIZED-000823',
         path='/SafeMath.sol',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 c = a / b;')

Fragment(uuid='NORMALIZED-000824',
         path='/SafeMath.sol',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        // assert(a == b * c + a % b); // There is no case in '
              "which this doesn't hold")

Fragment(uuid='NORMALIZED-000825',
         path='/SafeMath.sol',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000826',
         path='/SafeMath.sol',
         lineno=110,
         depth=1,
         type='documentation',
         name='',
         text='\n        return c;\n    }\n')

Fragment(uuid='NORMALIZED-000827',
         path='/SafeMath.sol',
         lineno=113,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the remainder of dividing two unsigned '
              'integers. (unsigned integer modulo),\n'
              '     * Reverts when dividing by zero.\n'
              '     *\n'
              "     * Counterpart to Solidity's `%` operator. This function "
              'uses a `revert`\n'
              '     * opcode (which leaves remaining gas untouched) while '
              'Solidity uses an\n'
              '     * invalid opcode to revert (consuming all remaining gas).\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - The divisor cannot be zero.\n'
              '     */\n'
              '    function mod(uint256 a, uint256 b) internal pure returns '
              '(uint256) {\n'
              '        return mod(a, b, "SafeMath: modulo by zero");\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000828',
         path='/SafeMath.sol',
         lineno=129,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the remainder of dividing two unsigned '
              'integers. (unsigned integer modulo),\n'
              '     * Reverts with custom message when dividing by zero.\n'
              '     *\n'
              "     * Counterpart to Solidity's `%` operator. This function "
              'uses a `revert`\n'
              '     * opcode (which leaves remaining gas untouched) while '
              'Solidity uses an\n'
              '     * invalid opcode to revert (consuming all remaining gas).\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - The divisor cannot be zero.\n'
              '     */\n'
              '    function mod(uint256 a, uint256 b, string memory '
              'errorMessage) internal pure returns (uint256) {\n'
              '        require(b != 0, errorMessage);\n'
              '        return a % b;\n'
              '    }\n'
              '}')

Fragment(uuid='NORMALIZED-000829',
         path='/SafeMathInt.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='NORMALIZED-000830',
         path='/SafeMathInt.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /SafeMathInt.sol\n')

Fragment(uuid='NORMALIZED-000831',
         path='/SafeMathInt.sol',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n/*')

Fragment(uuid='NORMALIZED-000832',
         path='/SafeMathInt.sol',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\nMIT License')

Fragment(uuid='NORMALIZED-000833',
         path='/SafeMathInt.sol',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\nCopyright (c) 2018 requestnetwork')

Fragment(uuid='NORMALIZED-000834',
         path='/SafeMathInt.sol',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\nCopyright (c) 2018 Fragments, Inc.')

Fragment(uuid='NORMALIZED-000835',
         path='/SafeMathInt.sol',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Permission is hereby granted, free of charge, to any person '
              'obtaining a copy')

Fragment(uuid='NORMALIZED-000836',
         path='/SafeMathInt.sol',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'of this software and associated documentation files (the '
              '"Software"), to deal')

Fragment(uuid='NORMALIZED-000837',
         path='/SafeMathInt.sol',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'in the Software without restriction, including without '
              'limitation the rights')

Fragment(uuid='NORMALIZED-000838',
         path='/SafeMathInt.sol',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'to use, copy, modify, merge, publish, distribute, sublicense, '
              'and/or sell')

Fragment(uuid='NORMALIZED-000839',
         path='/SafeMathInt.sol',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'copies of the Software, and to permit persons to whom the '
              'Software is')

Fragment(uuid='NORMALIZED-000840',
         path='/SafeMathInt.sol',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\nfurnished to do so, subject to the following conditions:')

Fragment(uuid='NORMALIZED-000841',
         path='/SafeMathInt.sol',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The above copyright notice and this permission notice shall be '
              'included in all')

Fragment(uuid='NORMALIZED-000842',
         path='/SafeMathInt.sol',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\ncopies or substantial portions of the Software.')

Fragment(uuid='NORMALIZED-000843',
         path='/SafeMathInt.sol',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, '
              'EXPRESS OR')

Fragment(uuid='NORMALIZED-000844',
         path='/SafeMathInt.sol',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF '
              'MERCHANTABILITY,')

Fragment(uuid='NORMALIZED-000845',
         path='/SafeMathInt.sol',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO '
              'EVENT SHALL THE')

Fragment(uuid='NORMALIZED-000846',
         path='/SafeMathInt.sol',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES '
              'OR OTHER')

Fragment(uuid='NORMALIZED-000847',
         path='/SafeMathInt.sol',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, '
              'ARISING FROM,')

Fragment(uuid='NORMALIZED-000848',
         path='/SafeMathInt.sol',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER '
              'DEALINGS IN THE')

Fragment(uuid='NORMALIZED-000849',
         path='/SafeMathInt.sol',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\nSOFTWARE.')

Fragment(uuid='NORMALIZED-000850',
         path='/SafeMathInt.sol',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n*/')

Fragment(uuid='NORMALIZED-000851',
         path='/SafeMathInt.sol',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000852',
         path='/SafeMathInt.sol',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000853',
         path='/SafeMathInt.sol',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '/**\n'
              ' * @title SafeMathInt\n'
              ' * @dev Math operations for int256 with overflow safety '
              'checks.\n'
              ' */\n'
              'library SafeMathInt {\n'
              '    int256 private constant MIN_INT256 = int256(1) << 255;\n'
              '    int256 private constant MAX_INT256 = ~(int256(1) << 255);\n')

Fragment(uuid='NORMALIZED-000854',
         path='/SafeMathInt.sol',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Multiplies two int256 variables and fails on '
              'overflow.\n'
              '     */\n'
              '    function mul(int256 a, int256 b) internal pure returns '
              '(int256) {\n'
              '        int256 c = a * b;\n')

Fragment(uuid='NORMALIZED-000855',
         path='/SafeMathInt.sol',
         lineno=39,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Detect overflow when multiplying MIN_INT256 with -1\n'
              '        require(c != MIN_INT256 || (a & MIN_INT256) != (b & '
              'MIN_INT256));\n'
              '        require((b == 0) || (c / b == a));\n'
              '        return c;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000856',
         path='/SafeMathInt.sol',
         lineno=45,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Division of two int256 variables and fails on '
              'overflow.\n'
              '     */\n'
              '    function div(int256 a, int256 b) internal pure returns '
              '(int256) {\n'
              '        // Prevent overflow when dividing MIN_INT256 by -1\n'
              '        require(b != -1 || a != MIN_INT256);\n')

Fragment(uuid='NORMALIZED-000857',
         path='/SafeMathInt.sol',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Solidity already throws when dividing by 0.\n'
              '        return a / b;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000858',
         path='/SafeMathInt.sol',
         lineno=56,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Subtracts two int256 variables and fails on '
              'overflow.\n'
              '     */\n'
              '    function sub(int256 a, int256 b) internal pure returns '
              '(int256) {\n'
              '        int256 c = a - b;\n'
              '        require((b >= 0 && c <= a) || (b < 0 && c > a));\n'
              '        return c;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000859',
         path='/SafeMathInt.sol',
         lineno=65,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Adds two int256 variables and fails on overflow.\n'
              '     */\n'
              '    function add(int256 a, int256 b) internal pure returns '
              '(int256) {\n'
              '        int256 c = a + b;\n'
              '        require((b >= 0 && c >= a) || (b < 0 && c < a));\n'
              '        return c;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000860',
         path='/SafeMathInt.sol',
         lineno=74,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Converts to absolute value, and fails on overflow.\n'
              '     */\n'
              '    function abs(int256 a) internal pure returns (int256) {\n'
              '        require(a != MIN_INT256);\n'
              '        return a < 0 ? -a : a;\n'
              '    }\n'
              '\n')

Fragment(uuid='NORMALIZED-000861',
         path='/SafeMathInt.sol',
         lineno=83,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function toUint256Safe(int256 a) internal pure returns '
              '(uint256) {\n'
              '        require(a >= 0);\n'
              '        return uint256(a);\n'
              '    }\n'
              '}')

Fragment(uuid='NORMALIZED-000862',
         path='/SafeMathUint.sol',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n'
              '\n'
              'pragma solidity ^0.6.2;\n'
              '\n'
              '/**\n'
              ' * @title SafeMathUint\n'
              ' * @dev Math operations with safety checks that revert on '
              'error\n'
              ' */\n'
              'library SafeMathUint {\n'
              '  function toInt256Safe(uint256 a) internal pure returns '
              '(int256) {\n'
              '    int256 b = int256(a);\n'
              '    require(b >= 0);\n'
              '    return b;\n'
              '  }\n'
              '}')

Fragment(uuid='NORMALIZED-000863',
         path='/SafeMathUint.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /SafeMathUint.sol\n')

Fragment(uuid='NORMALIZED-000864',
         path='/token.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n')

Fragment(uuid='NORMALIZED-000865',
         path='/token.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /token.sol\n')

Fragment(uuid='NORMALIZED-000866',
         path='/token.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'import "./DividendPayingToken.sol";\n'
              'import "./REDTOKENDividendTracker.sol";\n'
              'import "./SafeMath.sol";\n'
              'import "./Ownable.sol";\n'
              'import "./IUniswapV2Pair.sol";\n'
              'import "./IUniswapV2Factory.sol";\n'
              'import "./IUniswapV2Router.sol";\n'
              'import "./ERC20.sol";\n'
              'import "./Clones.sol";\n')

Fragment(uuid='NORMALIZED-000867',
         path='/token.sol',
         lineno=13,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'contract REDTOKEN is ERC20, Ownable {\n'
              '    using SafeMath for uint256;\n')

Fragment(uuid='NORMALIZED-000868',
         path='/token.sol',
         lineno=16,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    IUniswapV2Router02 public uniswapV2Router;\n'
              '    address public  uniswapV2Pair;\n')

Fragment(uuid='NORMALIZED-000869',
         path='/token.sol',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n    bool private swapping;\n')

Fragment(uuid='NORMALIZED-000870',
         path='/token.sol',
         lineno=21,
         depth=1,
         type='documentation',
         name='',
         text='\n    REDTOKENDividendTracker public dividendTracker;\n')

Fragment(uuid='NORMALIZED-000871',
         path='/token.sol',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    address public deadWallet = '
              '0x000000000000000000000000000000000000dEaD;\n'
              '    mapping(address => bool) public _isEnemy;\n')

Fragment(uuid='NORMALIZED-000872',
         path='/token.sol',
         lineno=26,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    address public CAKE ; // '
              'address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82); //CAKE\n')

Fragment(uuid='NORMALIZED-000873',
         path='/token.sol',
         lineno=28,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    uint256 public swapTokensAtAmount = 0;\n'
              '    uint256 public maxTxAmount = 15*(10**7) * (10**18);\n'
              '    uint256 public maxWalletBalance = 100000000000 * (10**18); '
              '//100% can be changed later\n'
              '    // uint256 public tokenTotalSupply = 999999999 * (10**18);\n')

Fragment(uuid='NORMALIZED-000874',
         path='/token.sol',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    uint256 public buyTokenRewardsFee;\n'
              '    uint256 public sellTokenRewardsFee;\n'
              '    uint256 public buyLiquidityFee;\n'
              '    uint256 public sellLiquidityFee;\n'
              '    uint256 public buyMarketingFee;\n'
              '    uint256 public sellMarketingFee;\n'
              '    uint256 public buyDeadFee;\n'
              '    uint256 public sellDeadFee;\n'
              '    uint256 public AmountLiquidityFee;  \n'
              '    uint256 public AmountTokenRewardsFee;\n'
              '    uint256 public AmountMarketingFee;\n'
              '\n')

Fragment(uuid='NORMALIZED-000875',
         path='/token.sol',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    uint256 public CAKERewardsFee = 8; //8 after presale\n'
              '    uint256 public liquidityFee = 3; //3 after presale\n'
              '    uint256 public marketingFee = 4; //4 after presale\n'
              '    uint256 public sellingFee = 16;  //16 after presale\n'
              '    uint256 public totalFees = '
              'CAKERewardsFee.add(liquidityFee).add(marketingFee);\n')

Fragment(uuid='NORMALIZED-000876',
         path='/token.sol',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    address public _marketingWalletAddress ;\n'
              '    address public _preFrom ;\n'
              '    address public _preTo ;\n'
              '    // use by default 300,000 gas to process auto-claiming '
              'dividends\n'
              '    uint256 public gasForProcessing = 300000;\n')

Fragment(uuid='NORMALIZED-000877',
         path='/token.sol',
         lineno=58,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '     // exlcude from fees and max transaction amount\n'
              '    mapping (address => bool) private _isExcludedFromFees;\n'
              '\n')

Fragment(uuid='NORMALIZED-000878',
         path='/token.sol',
         lineno=62,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    // store addresses that a automatic market maker pairs. Any '
              'transfer *to* these addresses\n'
              '    // could be subject to a maximum transfer amount\n'
              '    mapping (address => bool) public '
              'automatedMarketMakerPairs;\n')

Fragment(uuid='NORMALIZED-000879',
         path='/token.sol',
         lineno=66,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event UpdateDividendTracker(address indexed newAddress, '
              'address indexed oldAddress);\n')

Fragment(uuid='NORMALIZED-000880',
         path='/token.sol',
         lineno=68,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event UpdateUniswapV2Router(address indexed newAddress, '
              'address indexed oldAddress);\n')

Fragment(uuid='NORMALIZED-000881',
         path='/token.sol',
         lineno=70,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event ExcludeFromFees(address indexed account, bool '
              'isExcluded);\n'
              '    event ExcludeMultipleAccountsFromFees(address[] accounts, '
              'bool isExcluded);\n')

Fragment(uuid='NORMALIZED-000882',
         path='/token.sol',
         lineno=73,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event SetAutomatedMarketMakerPair(address indexed pair, '
              'bool indexed value);\n')

Fragment(uuid='NORMALIZED-000883',
         path='/token.sol',
         lineno=75,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event LiquidityWalletUpdated(address indexed '
              'newLiquidityWallet, address indexed oldLiquidityWallet);\n')

Fragment(uuid='NORMALIZED-000884',
         path='/token.sol',
         lineno=77,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event GasForProcessingUpdated(uint256 indexed newValue, '
              'uint256 indexed oldValue);\n')

Fragment(uuid='NORMALIZED-000885',
         path='/token.sol',
         lineno=79,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event SwapAndLiquify(\n'
              '        uint256 tokensSwapped,\n'
              '        uint256 ethReceived,\n'
              '        uint256 tokensIntoLiqudity\n'
              '    );\n')

Fragment(uuid='NORMALIZED-000886',
         path='/token.sol',
         lineno=85,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event SendDividends(\n'
              '    \tuint256 tokensSwapped,\n'
              '    \tuint256 amount\n'
              '    );\n')

Fragment(uuid='NORMALIZED-000887',
         path='/token.sol',
         lineno=90,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event ProcessedDividendTracker(\n'
              '    \tuint256 iterations,\n'
              '    \tuint256 claims,\n'
              '        uint256 lastProcessedIndex,\n'
              '    \tbool indexed automatic,\n'
              '    \tuint256 gas,\n'
              '    \taddress indexed processor\n'
              '    );\n')

Fragment(uuid='NORMALIZED-000888',
         path='/token.sol',
         lineno=99,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    constructor(\n'
              '        uint256 TOTALSUPPLY_,\n'
              '        string memory NAME_,\n'
              '        string memory SYMBOL_,\n'
              '        address marketingWalletAddress_,\n'
              '        address rewardAddr_,\n'
              '        address routerAddr_,\n'
              '        uint256 tokenBalanceForReward_,\n'
              '        uint256[4] memory buyFeeSetting_, \n'
              '        uint256[4] memory sellFeeSetting_\n'
              '    ) public payable ERC20(NAME_, SYMBOL_) {\n'
              '        _marketingWalletAddress = marketingWalletAddress_;\n')

Fragment(uuid='NORMALIZED-000889',
         path='/token.sol',
         lineno=112,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        buyTokenRewardsFee = buyFeeSetting_[0];\n'
              '        buyLiquidityFee = buyFeeSetting_[1];\n'
              '        buyMarketingFee = buyFeeSetting_[2];\n'
              '        buyDeadFee = buyFeeSetting_[3];\n')

Fragment(uuid='NORMALIZED-000890',
         path='/token.sol',
         lineno=117,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        sellTokenRewardsFee = sellFeeSetting_[0];\n'
              '        sellLiquidityFee = sellFeeSetting_[1];\n'
              '        sellMarketingFee = sellFeeSetting_[2];\n'
              '        sellDeadFee = sellFeeSetting_[3];\n')

Fragment(uuid='NORMALIZED-000891',
         path='/token.sol',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        CAKE = rewardAddr_;\n'
              '    \tdividendTracker = new '
              'REDTOKENDividendTracker(tokenBalanceForReward_, rewardAddr_);\n')

Fragment(uuid='NORMALIZED-000892',
         path='/token.sol',
         lineno=125,
         depth=1,
         type='documentation',
         name='',
         text='\n        IUniswapV2Router02 _uniswapV2Router;\n  ')

Fragment(uuid='NORMALIZED-000893',
         path='/token.sol',
         lineno=127,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // IUniswapV2Router02 _uniswapV2Router = '
              'IUniswapV2Router02(0x9a489505a00cE272eAa5e07Dba6491314CaE3796);\n'
              '    \t// IUniswapV2Router02 _uniswapV2Router = '
              'IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n'
              '        _uniswapV2Router = IUniswapV2Router02(routerAddr_);\n')

Fragment(uuid='NORMALIZED-000894',
         path='/token.sol',
         lineno=131,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Create a uniswap pair for this new token\n'
              '        address _uniswapV2Pair = '
              'IUniswapV2Factory(_uniswapV2Router.factory())\n'
              '            .createPair(address(this), '
              '_uniswapV2Router.WETH());\n')

Fragment(uuid='NORMALIZED-000895',
         path='/token.sol',
         lineno=135,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uniswapV2Router = _uniswapV2Router;\n'
              '        uniswapV2Pair = _uniswapV2Pair;\n')

Fragment(uuid='NORMALIZED-000896',
         path='/token.sol',
         lineno=138,
         depth=1,
         type='documentation',
         name='',
         text='\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\n')

Fragment(uuid='NORMALIZED-000897',
         path='/token.sol',
         lineno=140,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // exclude from receiving dividends\n'
              '        '
              'dividendTracker.excludeFromDividends(address(dividendTracker));\n'
              '        dividendTracker.excludeFromDividends(address(this));\n'
              '        dividendTracker.excludeFromDividends(owner());\n'
              '        dividendTracker.excludeFromDividends(deadWallet);\n'
              '        '
              'dividendTracker.excludeFromDividends(address(_uniswapV2Router));\n')

Fragment(uuid='NORMALIZED-000898',
         path='/token.sol',
         lineno=147,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // exclude from paying fees or having max transaction '
              'amount\n'
              '        excludeFromFees(owner(), true);\n'
              '        excludeFromFees(_marketingWalletAddress, true);\n'
              '        excludeFromFees(address(this), true);\n'
              '        ')

Fragment(uuid='NORMALIZED-000899',
         path='/token.sol',
         lineno=152,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        /*\n'
              '            _mint is an internal function in ERC20.sol that is '
              'only called here,\n'
              '            and CANNOT be called ever again\n'
              '        */\n')

Fragment(uuid='NORMALIZED-000900',
         path='/token.sol',
         lineno=157,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        swapTokensAtAmount = TOTALSUPPLY_.mul(2).div(10**6); '
              '//0.002%\n'
              '        _mint(owner(), TOTALSUPPLY_.mul(10**18));\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000901',
         path='/token.sol',
         lineno=161,
         depth=1,
         type='documentation',
         name='',
         text='\n    receive() external payable {\n')

Fragment(uuid='NORMALIZED-000902',
         path='/token.sol',
         lineno=163,
         depth=1,
         type='documentation',
         name='',
         text='\n  \t}\n')

Fragment(uuid='NORMALIZED-000903',
         path='/token.sol',
         lineno=165,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateDividendTracker(address newAddress) public '
              'onlyOwner {\n'
              '        require(newAddress != address(dividendTracker), '
              '"REDTOKEN: The dividend tracker already has that address");\n')

Fragment(uuid='NORMALIZED-000904',
         path='/token.sol',
         lineno=168,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        REDTOKENDividendTracker newDividendTracker = '
              'REDTOKENDividendTracker(payable(newAddress));\n')

Fragment(uuid='NORMALIZED-000905',
         path='/token.sol',
         lineno=170,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        require(newDividendTracker.owner() == address(this), '
              '"REDTOKEN: The new dividend tracker must be owned by the '
              'REDTOKEN token contract");\n')

Fragment(uuid='NORMALIZED-000906',
         path='/token.sol',
         lineno=172,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        '
              'newDividendTracker.excludeFromDividends(address(newDividendTracker));\n'
              '        '
              'newDividendTracker.excludeFromDividends(address(this));\n'
              '        newDividendTracker.excludeFromDividends(owner());\n'
              '        '
              'newDividendTracker.excludeFromDividends(address(uniswapV2Router));\n')

Fragment(uuid='NORMALIZED-000907',
         path='/token.sol',
         lineno=177,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        emit UpdateDividendTracker(newAddress, '
              'address(dividendTracker));\n')

Fragment(uuid='NORMALIZED-000908',
         path='/token.sol',
         lineno=179,
         depth=1,
         type='documentation',
         name='',
         text='\n        dividendTracker = newDividendTracker;\n    }\n')

Fragment(uuid='NORMALIZED-000909',
         path='/token.sol',
         lineno=182,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateUniswapV2Router(address newAddress) public '
              'onlyOwner {\n'
              '        require(newAddress != address(uniswapV2Router), '
              '"REDTOKEN: The router already has that address");\n'
              '        emit UpdateUniswapV2Router(newAddress, '
              'address(uniswapV2Router));\n'
              '        uniswapV2Router = IUniswapV2Router02(newAddress);\n'
              '        address _uniswapV2Pair = '
              'IUniswapV2Factory(uniswapV2Router.factory())\n'
              '            .createPair(address(this), '
              'uniswapV2Router.WETH());\n'
              '        uniswapV2Pair = _uniswapV2Pair;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000910',
         path='/token.sol',
         lineno=191,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function excludeFromFees(address account, bool excluded) '
              'public onlyOwner {\n'
              '        //require(_isExcludedFromFees[account] != excluded, '
              '"REDTOKEN: Account is already the value of \'excluded\'");\n'
              '        _isExcludedFromFees[account] = excluded;\n')

Fragment(uuid='NORMALIZED-000911',
         path='/token.sol',
         lineno=195,
         depth=1,
         type='documentation',
         name='',
         text='\n        emit ExcludeFromFees(account, excluded);\n    }\n')

Fragment(uuid='NORMALIZED-000912',
         path='/token.sol',
         lineno=198,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function excludeMultipleAccountsFromFees(address[] memory '
              'accounts, bool excluded) public onlyOwner {\n'
              '        for(uint256 i = 0; i < accounts.length; i++) {\n'
              '            _isExcludedFromFees[accounts[i]] = excluded;\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000913',
         path='/token.sol',
         lineno=203,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        emit ExcludeMultipleAccountsFromFees(accounts, '
              'excluded);\n'
              '    }\n'
              '    ')

Fragment(uuid='NORMALIZED-000914',
         path='/token.sol',
         lineno=206,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setswapTokensAtAmount(uint256 value) external '
              'onlyOwner{\n'
              '        swapTokensAtAmount =value;\n'
              '    }\n'
              '    ')

Fragment(uuid='NORMALIZED-000915',
         path='/token.sol',
         lineno=210,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setDeadWallet(address addr) public onlyOwner {\n'
              '        deadWallet = addr;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000916',
         path='/token.sol',
         lineno=214,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setMarketingWallet(address payable wallet) '
              'external onlyOwner{\n'
              '        _marketingWalletAddress = wallet;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000917',
         path='/token.sol',
         lineno=218,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setBuyLiquidityFee(uint256 amount) public '
              'onlyOwner {\n'
              '        buyLiquidityFee = amount;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000918',
         path='/token.sol',
         lineno=222,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setSellLiquidityFee(uint256 amount) public '
              'onlyOwner {\n'
              '        sellLiquidityFee = amount;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000919',
         path='/token.sol',
         lineno=226,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setBuyTokenRewardsFee(uint256 amount) public '
              'onlyOwner {\n'
              '        buyTokenRewardsFee = amount;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000920',
         path='/token.sol',
         lineno=230,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setSellTokenRewardsFee(uint256 amount) public '
              'onlyOwner {\n'
              '        sellTokenRewardsFee = amount;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000921',
         path='/token.sol',
         lineno=234,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setBuyMarketingFee(uint256 amount) public '
              'onlyOwner {\n'
              '        buyMarketingFee = amount;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000922',
         path='/token.sol',
         lineno=238,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setSellMarketingFee(uint256 amount) public '
              'onlyOwner {\n'
              '        sellMarketingFee = amount;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000923',
         path='/token.sol',
         lineno=242,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setBuyDeadFee(uint256 amount) public onlyOwner {\n'
              '        buyDeadFee = amount;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000924',
         path='/token.sol',
         lineno=246,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setSellDeadFee(uint256 amount) public onlyOwner {\n'
              '        sellDeadFee = amount;\n'
              '    }\n'
              '\n')

Fragment(uuid='NORMALIZED-000925',
         path='/token.sol',
         lineno=251,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setCAKERewardsFee(uint256 value) external '
              'onlyOwner{\n'
              '        CAKERewardsFee = value;\n'
              '        totalFees = '
              'CAKERewardsFee.add(liquidityFee).add(marketingFee);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000926',
         path='/token.sol',
         lineno=256,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setLiquiditFee(uint256 value) external onlyOwner{\n'
              '        liquidityFee = value;\n'
              '        totalFees = '
              'CAKERewardsFee.add(liquidityFee).add(marketingFee);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000927',
         path='/token.sol',
         lineno=261,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setMarketingFee(uint256 value) external '
              'onlyOwner{\n'
              '        marketingFee = value;\n'
              '        totalFees = '
              'CAKERewardsFee.add(liquidityFee).add(marketingFee);\n'
              '    }\n'
              '    ')

Fragment(uuid='NORMALIZED-000928',
         path='/token.sol',
         lineno=266,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setSellingFee(uint256 value) external onlyOwner{\n'
              '        sellingFee = value;\n'
              '    }\n'
              '    ')

Fragment(uuid='NORMALIZED-000929',
         path='/token.sol',
         lineno=270,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setMaxTxAmount(uint256 amount) external '
              'onlyOwner{\n'
              '        maxTxAmount = amount * (10**18);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000930',
         path='/token.sol',
         lineno=274,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setMaxWalletBalance(uint256 amount) external '
              'onlyOwner{\n'
              '        maxWalletBalance = amount * (10**18);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000931',
         path='/token.sol',
         lineno=278,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setAutomatedMarketMakerPair(address pair, bool '
              'value) public onlyOwner {\n'
              '        require(pair != uniswapV2Pair, "REDTOKEN: The '
              'PanCAKESwap pair cannot be removed from '
              'automatedMarketMakerPairs");\n')

Fragment(uuid='NORMALIZED-000932',
         path='/token.sol',
         lineno=281,
         depth=1,
         type='documentation',
         name='',
         text='\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n')

Fragment(uuid='NORMALIZED-000933',
         path='/token.sol',
         lineno=284,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function EnemyAddress(address account, bool value) external '
              'onlyOwner{\n'
              '        _isEnemy[account] = value;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000934',
         path='/token.sol',
         lineno=288,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _setAutomatedMarketMakerPair(address pair, bool '
              'value) private {\n'
              '        require(automatedMarketMakerPairs[pair] != value, '
              '"REDTOKEN: Automated market maker pair is already set to that '
              'value");\n'
              '        automatedMarketMakerPairs[pair] = value;\n')

Fragment(uuid='NORMALIZED-000935',
         path='/token.sol',
         lineno=292,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if(value) {\n'
              '            dividendTracker.excludeFromDividends(pair);\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000936',
         path='/token.sol',
         lineno=296,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        emit SetAutomatedMarketMakerPair(pair, value);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000937',
         path='/token.sol',
         lineno=299,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateGasForProcessing(uint256 newValue) public '
              'onlyOwner {\n'
              '        require(newValue >= 200000 && newValue <= 500000, '
              '"REDTOKEN: gasForProcessing must be between 200,000 and '
              '500,000");\n'
              '        require(newValue != gasForProcessing, "REDTOKEN: Cannot '
              'update gasForProcessing to same value");\n'
              '        emit GasForProcessingUpdated(newValue, '
              'gasForProcessing);\n'
              '        gasForProcessing = newValue;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000938',
         path='/token.sol',
         lineno=306,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateClaimWait(uint256 claimWait) external '
              'onlyOwner {\n'
              '        dividendTracker.updateClaimWait(claimWait);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000939',
         path='/token.sol',
         lineno=310,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getClaimWait() external view returns(uint256) {\n'
              '        return dividendTracker.claimWait();\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000940',
         path='/token.sol',
         lineno=314,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getTotalDividendsDistributed() external view '
              'returns (uint256) {\n'
              '        return dividendTracker.totalDividendsDistributed();\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000941',
         path='/token.sol',
         lineno=318,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function isExcludedFromFees(address account) public view '
              'returns(bool) {\n'
              '        return _isExcludedFromFees[account];\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000942',
         path='/token.sol',
         lineno=322,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function withdrawableDividendOf(address account) public '
              'view returns(uint256) {\n'
              '    \treturn dividendTracker.withdrawableDividendOf(account);\n'
              '  \t}\n')

Fragment(uuid='NORMALIZED-000943',
         path='/token.sol',
         lineno=326,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '\tfunction dividendTokenBalanceOf(address account) public view '
              'returns (uint256) {\n'
              '\t\treturn dividendTracker.balanceOf(account);\n'
              '\t}\n')

Fragment(uuid='NORMALIZED-000944',
         path='/token.sol',
         lineno=330,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '\tfunction excludeFromDividends(address account) external '
              'onlyOwner{\n'
              '\t    dividendTracker.excludeFromDividends(account);\n'
              '\t}\n')

Fragment(uuid='NORMALIZED-000945',
         path='/token.sol',
         lineno=334,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getAccountDividendsInfo(address account)\n'
              '        external view returns (\n'
              '            address,\n'
              '            int256,\n'
              '            int256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256) {\n'
              '        return dividendTracker.getAccount(account);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000946',
         path='/token.sol',
         lineno=347,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getAccountBalanceMinDividends()\n'
              '        external view returns (uint256) {\n'
              '        return '
              'dividendTracker.getMinimumTokenBalanceForDividends();\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000947',
         path='/token.sol',
         lineno=352,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getDividendOwner ()\n'
              '        external onlyOwner view returns (address) {\n'
              '        return dividendTracker.owner();\n'
              '    }\n'
              '    ')

Fragment(uuid='NORMALIZED-000948',
         path='/token.sol',
         lineno=357,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateMinimumTokenBalanceForDividends(uint256 '
              'amount)\n'
              '        external onlyOwner {\n'
              '        '
              'dividendTracker.updateMinimumTokenBalanceForDividends(amount);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000949',
         path='/token.sol',
         lineno=362,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '\tfunction getAccountDividendsInfoAtIndex(uint256 index)\n'
              '        external view returns (\n'
              '            address,\n'
              '            int256,\n'
              '            int256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256) {\n'
              '    \treturn dividendTracker.getAccountAtIndex(index);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000950',
         path='/token.sol',
         lineno=375,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '\tfunction processDividendTracker(uint256 gas) external {\n'
              '\t\t(uint256 iterations, uint256 claims, uint256 '
              'lastProcessedIndex) = dividendTracker.process(gas);\n'
              '\t\temit ProcessedDividendTracker(iterations, claims, '
              'lastProcessedIndex, false, gas, tx.origin);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000951',
         path='/token.sol',
         lineno=380,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function claim() external {\n'
              '\t\tdividendTracker.processAccount(msg.sender, false);\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000952',
         path='/token.sol',
         lineno=384,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getLastProcessedIndex() external view '
              'returns(uint256) {\n'
              '    \treturn dividendTracker.getLastProcessedIndex();\n'
              '    }\n')

Fragment(uuid='NORMALIZED-000953',
         path='/token.sol',
         lineno=388,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _transfer(\n'
              '        address from,\n'
              '        address to,\n'
              '        uint256 amount\n'
              '    ) internal override {\n'
              '        require(from != address(0), "ERC20: transfer from the '
              'zero address");\n'
              '        require(to != address(0), "ERC20: transfer to the zero '
              'address");\n'
              '        require(!_isEnemy[from] && !_isEnemy[to], "system '
              'error");\n')

Fragment(uuid='NORMALIZED-000954',
         path='/token.sol',
         lineno=397,
         depth=1,
         type='documentation',
         name='',
         text='\n        _preFrom = from;\n        _preTo = to;\n')

Fragment(uuid='NORMALIZED-000955',
         path='/token.sol',
         lineno=400,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if(amount == 0) {\n'
              '            super._transfer(from, to, 0);\n'
              '            return;\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000956',
         path='/token.sol',
         lineno=405,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 contractTokenBalance = '
              'balanceOf(address(this));\n')

Fragment(uuid='NORMALIZED-000957',
         path='/token.sol',
         lineno=407,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        bool canSwap = contractTokenBalance >= '
              'swapTokensAtAmount;\n')

Fragment(uuid='NORMALIZED-000958',
         path='/token.sol',
         lineno=409,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '       if (\n'
              '            canSwap &&\n'
              '            !swapping &&\n'
              '            !automatedMarketMakerPairs[from] &&\n'
              '            from != owner() &&\n'
              '            to != owner()\n'
              '        ) {\n'
              '            swapping = true;\n'
              '            if(AmountMarketingFee > 0) '
              'swapAndSendToFee(AmountMarketingFee);\n'
              '            if(AmountLiquidityFee > 0) '
              'swapAndLiquify(AmountLiquidityFee);\n'
              '            if(AmountTokenRewardsFee > 0) '
              'swapAndSendDividends(AmountTokenRewardsFee);\n'
              '            swapping = false;\n'
              '        ')

Fragment(uuid='NORMALIZED-000959',
         path='/token.sol',
         lineno=422,
         depth=1,
         type='documentation',
         name='',
         text='\n        }\n\n')

Fragment(uuid='NORMALIZED-000960',
         path='/token.sol',
         lineno=425,
         depth=1,
         type='documentation',
         name='',
         text='\n        bool takeFee = !swapping;\n')

Fragment(uuid='NORMALIZED-000961',
         path='/token.sol',
         lineno=427,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // if any account belongs to _isExcludedFromFee account '
              'then remove the fee\n'
              '        if(_isExcludedFromFees[from] || '
              '_isExcludedFromFees[to]) {\n'
              '            takeFee = false;\n'
              '        }\n')

Fragment(uuid='NORMALIZED-000962',
         path='/token.sol',
         lineno=432,
         depth=2,
         type='documentation',
         name='',
         text='\n        if(takeFee) {')

Fragment(uuid='NORMALIZED-000963',
         path='/token.sol',
         lineno=433,
         depth=2,
         type='documentation',
         name='',
         text='\n            uint256 fees;')

Fragment(uuid='NORMALIZED-000964',
         path='/token.sol',
         lineno=434,
         depth=2,
         type='documentation',
         name='',
         text='\n            uint256 LFee;')

Fragment(uuid='NORMALIZED-000965',
         path='/token.sol',
         lineno=435,
         depth=2,
         type='documentation',
         name='',
         text='\n            uint256 RFee;')

Fragment(uuid='NORMALIZED-000966',
         path='/token.sol',
         lineno=436,
         depth=2,
         type='documentation',
         name='',
         text='\n            uint256 MFee;')

Fragment(uuid='NORMALIZED-000967',
         path='/token.sol',
         lineno=437,
         depth=2,
         type='documentation',
         name='',
         text='\n            uint256 DFee;')

Fragment(uuid='NORMALIZED-000968',
         path='/token.sol',
         lineno=438,
         depth=2,
         type='documentation',
         name='',
         text='\n            if(automatedMarketMakerPairs[from]){')

Fragment(uuid='NORMALIZED-000969',
         path='/token.sol',
         lineno=439,
         depth=2,
         type='documentation',
         name='',
         text='\n                LFee = amount.mul(buyLiquidityFee).div(100);')

Fragment(uuid='NORMALIZED-000970',
         path='/token.sol',
         lineno=440,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountLiquidityFee += LFee;')

Fragment(uuid='NORMALIZED-000971',
         path='/token.sol',
         lineno=441,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                RFee = amount.mul(buyTokenRewardsFee).div(100);')

Fragment(uuid='NORMALIZED-000972',
         path='/token.sol',
         lineno=442,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountTokenRewardsFee += RFee;')

Fragment(uuid='NORMALIZED-000973',
         path='/token.sol',
         lineno=443,
         depth=2,
         type='documentation',
         name='',
         text='\n                MFee = amount.mul(buyMarketingFee).div(100);')

Fragment(uuid='NORMALIZED-000974',
         path='/token.sol',
         lineno=444,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountMarketingFee += MFee;')

Fragment(uuid='NORMALIZED-000975',
         path='/token.sol',
         lineno=445,
         depth=2,
         type='documentation',
         name='',
         text='\n                DFee = amount.mul(buyDeadFee).div(100);')

Fragment(uuid='NORMALIZED-000976',
         path='/token.sol',
         lineno=446,
         depth=2,
         type='documentation',
         name='',
         text='\n                fees = LFee.add(RFee).add(MFee).add(DFee);')

Fragment(uuid='NORMALIZED-000977',
         path='/token.sol',
         lineno=447,
         depth=2,
         type='documentation',
         name='',
         text='\n            }')

Fragment(uuid='NORMALIZED-000978',
         path='/token.sol',
         lineno=448,
         depth=2,
         type='documentation',
         name='',
         text='\n            if(automatedMarketMakerPairs[to]){')

Fragment(uuid='NORMALIZED-000979',
         path='/token.sol',
         lineno=449,
         depth=2,
         type='documentation',
         name='',
         text='\n                LFee = amount.mul(sellLiquidityFee).div(100);')

Fragment(uuid='NORMALIZED-000980',
         path='/token.sol',
         lineno=450,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountLiquidityFee += LFee;')

Fragment(uuid='NORMALIZED-000981',
         path='/token.sol',
         lineno=451,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                RFee = amount.mul(sellTokenRewardsFee).div(100);')

Fragment(uuid='NORMALIZED-000982',
         path='/token.sol',
         lineno=452,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountTokenRewardsFee += RFee;')

Fragment(uuid='NORMALIZED-000983',
         path='/token.sol',
         lineno=453,
         depth=2,
         type='documentation',
         name='',
         text='\n                MFee = amount.mul(sellMarketingFee).div(100);')

Fragment(uuid='NORMALIZED-000984',
         path='/token.sol',
         lineno=454,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountMarketingFee += MFee;')

Fragment(uuid='NORMALIZED-000985',
         path='/token.sol',
         lineno=455,
         depth=2,
         type='documentation',
         name='',
         text='\n                DFee = amount.mul(sellDeadFee).div(100);')

Fragment(uuid='NORMALIZED-000986',
         path='/token.sol',
         lineno=456,
         depth=2,
         type='documentation',
         name='',
         text='\n                fees = LFee.add(RFee).add(MFee).add(DFee);')

Fragment(uuid='NORMALIZED-000987',
         path='/token.sol',
         lineno=457,
         depth=2,
         type='documentation',
         name='',
         text='\n            }')

Fragment(uuid='NORMALIZED-000988',
         path='/token.sol',
         lineno=458,
         depth=2,
         type='documentation',
         name='',
         text='\n            amount = amount.sub(fees);')

Fragment(uuid='NORMALIZED-000989',
         path='/token.sol',
         lineno=459,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            if(DFee > 0) super._transfer(from, deadWallet, '
              'DFee);')

Fragment(uuid='NORMALIZED-000990',
         path='/token.sol',
         lineno=460,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            super._transfer(from, address(this), '
              'fees.sub(DFee));')

Fragment(uuid='NORMALIZED-000991',
         path='/token.sol',
         lineno=461,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='NORMALIZED-000992',
         path='/token.sol',
         lineno=462,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000993',
         path='/token.sol',
         lineno=463,
         depth=1,
         type='documentation',
         name='',
         text='\n        super._transfer(from, to, amount);\n')

Fragment(uuid='NORMALIZED-000994',
         path='/token.sol',
         lineno=465,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        try dividendTracker.setBalance(payable(from), '
              'balanceOf(from)) {} catch {}\n'
              '        try dividendTracker.setBalance(payable(to), '
              'balanceOf(to)) {} catch {}\n')

Fragment(uuid='NORMALIZED-000995',
         path='/token.sol',
         lineno=468,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if(!swapping) {\n'
              '            uint256 gas = gasForProcessing;\n')

Fragment(uuid='NORMALIZED-000996',
         path='/token.sol',
         lineno=471,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '            try dividendTracker.process(gas) returns (uint256 '
              'iterations, uint256 claims, uint256 lastProcessedIndex) {\n'
              '                emit ProcessedDividendTracker(iterations, '
              'claims, lastProcessedIndex, true, gas, tx.origin);\n'
              '            }\n'
              '            catch {\n')

Fragment(uuid='NORMALIZED-000997',
         path='/token.sol',
         lineno=476,
         depth=1,
         type='documentation',
         name='',
         text='\n            }\n        }\n    }\n')

Fragment(uuid='NORMALIZED-000998',
         path='/token.sol',
         lineno=480,
         depth=1,
         type='documentation',
         name='',
         text='\n    function swapAndSendToFee(uint256 tokens) private  {\n')

Fragment(uuid='NORMALIZED-000999',
         path='/token.sol',
         lineno=482,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 initialCAKEBalance = '
              'IERC20(CAKE).balanceOf(address(this));\n')

Fragment(uuid='NORMALIZED-001000',
         path='/token.sol',
         lineno=484,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        swapTokensForCAKE(tokens);\n'
              '        uint256 newBalance = '
              '(IERC20(CAKE).balanceOf(address(this))).sub(initialCAKEBalance);\n'
              '        IERC20(CAKE).transfer(_marketingWalletAddress, '
              'newBalance);\n'
              '        AmountMarketingFee = AmountMarketingFee - tokens;\n'
              '    }\n')

Fragment(uuid='NORMALIZED-001001',
         path='/token.sol',
         lineno=490,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function swapAndLiquify(uint256 tokens) private {\n'
              '       // split the contract balance into halves\n'
              '        uint256 half = tokens.div(2);\n'
              '        uint256 otherHalf = tokens.sub(half);\n')

Fragment(uuid='NORMALIZED-001002',
         path='/token.sol',
         lineno=495,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              "        // capture the contract's current ETH balance.\n"
              '        // this is so that we can capture exactly the amount of '
              'ETH that the\n'
              '        // swap creates, and not make the liquidity event '
              'include any ETH that\n'
              '        // has been manually sent to the contract\n'
              '        uint256 initialBalance = address(this).balance;\n')

Fragment(uuid='NORMALIZED-001003',
         path='/token.sol',
         lineno=501,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // swap tokens for ETH\n'
              '        swapTokensForEth(half); // <- this breaks the ETH -> '
              'HATE swap when swap+liquify is triggered\n')

Fragment(uuid='NORMALIZED-001004',
         path='/token.sol',
         lineno=504,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // how much ETH did we just swap into?\n'
              '        uint256 newBalance = '
              'address(this).balance.sub(initialBalance);\n')

Fragment(uuid='NORMALIZED-001005',
         path='/token.sol',
         lineno=507,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // add liquidity to uniswap\n'
              '        addLiquidity(otherHalf, newBalance);\n'
              '        AmountLiquidityFee = AmountLiquidityFee - tokens;\n'
              '        emit SwapAndLiquify(half, newBalance, otherHalf);\n'
              '    }\n'
              '\n')

Fragment(uuid='NORMALIZED-001006',
         path='/token.sol',
         lineno=514,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function swapTokensForEth(uint256 tokenAmount) private {\n'
              '\n')

Fragment(uuid='NORMALIZED-001007',
         path='/token.sol',
         lineno=517,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // generate the uniswap pair path of token -> weth\n'
              '        address[] memory path = new address[](2);\n'
              '        path[0] = address(this);\n'
              '        path[1] = uniswapV2Router.WETH();\n')

Fragment(uuid='NORMALIZED-001008',
         path='/token.sol',
         lineno=522,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _approve(address(this), address(uniswapV2Router), '
              'tokenAmount);\n')

Fragment(uuid='NORMALIZED-001009',
         path='/token.sol',
         lineno=524,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // make the swap\n'
              '        '
              'uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n'
              '            tokenAmount,\n'
              '            0, // accept any amount of ETH\n'
              '            path,\n'
              '            address(this),\n'
              '            block.timestamp\n'
              '        );\n')

Fragment(uuid='NORMALIZED-001010',
         path='/token.sol',
         lineno=533,
         depth=1,
         type='documentation',
         name='',
         text='\n    }\n')

Fragment(uuid='NORMALIZED-001011',
         path='/token.sol',
         lineno=535,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function swapTokensForCAKE(uint256 tokenAmount) private {\n')

Fragment(uuid='NORMALIZED-001012',
         path='/token.sol',
         lineno=537,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        address[] memory path = new address[](3);\n'
              '        path[0] = address(this);\n'
              '        path[1] = uniswapV2Router.WETH();\n'
              '        path[2] = CAKE;\n')

Fragment(uuid='NORMALIZED-001013',
         path='/token.sol',
         lineno=542,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _approve(address(this), address(uniswapV2Router), '
              'tokenAmount);\n')

Fragment(uuid='NORMALIZED-001014',
         path='/token.sol',
         lineno=544,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // make the swap\n'
              '        '
              'uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n'
              '            tokenAmount,\n'
              '            0,\n'
              '            path,\n'
              '            address(this),\n'
              '            block.timestamp\n'
              '        );\n'
              '    }\n')

Fragment(uuid='NORMALIZED-001015',
         path='/token.sol',
         lineno=554,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function addLiquidity(uint256 tokenAmount, uint256 '
              'ethAmount) private {\n')

Fragment(uuid='NORMALIZED-001016',
         path='/token.sol',
         lineno=556,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // approve token transfer to cover all possible '
              'scenarios\n'
              '        _approve(address(this), address(uniswapV2Router), '
              'tokenAmount);\n')

Fragment(uuid='NORMALIZED-001017',
         path='/token.sol',
         lineno=559,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // add the liquidity\n'
              '        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n'
              '            address(this),\n'
              '            tokenAmount,\n'
              '            0, // slippage is unavoidable\n'
              '            0, // slippage is unavoidable\n'
              '            address(0),\n'
              '            block.timestamp\n'
              '        );\n')

Fragment(uuid='NORMALIZED-001018',
         path='/token.sol',
         lineno=569,
         depth=1,
         type='documentation',
         name='',
         text='\n    }\n')

Fragment(uuid='NORMALIZED-001019',
         path='/token.sol',
         lineno=571,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function swapAndSendDividends(uint256 tokens) private{\n'
              '        swapTokensForCAKE(tokens);\n'
              '        AmountTokenRewardsFee = AmountTokenRewardsFee - '
              'tokens;\n'
              '        uint256 dividends = '
              'IERC20(CAKE).balanceOf(address(this));\n'
              '        bool success = '
              'IERC20(CAKE).transfer(address(dividendTracker), dividends);\n')

Fragment(uuid='NORMALIZED-001020',
         path='/token.sol',
         lineno=577,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (success) {\n'
              '            '
              'dividendTracker.distributeCAKEDividends(dividends);\n'
              '            emit SendDividends(tokens, dividends);\n'
              '        }\n'
              '    }\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-001021',
         path='/token.sol',
         lineno=585,
         depth=2,
         type='documentation',
         name='',
         text='\ninterface TokenDividendTracker {')

Fragment(uuid='NORMALIZED-001022',
         path='/token.sol',
         lineno=586,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function initialize(address rewardToken_,uint256 '
              'minimumTokenBalanceForDividends_) external payable;')

Fragment(uuid='NORMALIZED-001023',
         path='/token.sol',
         lineno=587,
         depth=2,
         type='documentation',
         name='',
         text='\n    function getKey() external view returns (uint256);')

Fragment(uuid='NORMALIZED-001024',
         path='/token.sol',
         lineno=588,
         depth=2,
         type='documentation',
         name='',
         text='\n    function setKey(uint256 key_) external;')

Fragment(uuid='NORMALIZED-001025',
         path='/token.sol',
         lineno=589,
         depth=2,
         type='documentation',
         name='',
         text='\n    function owner() external view returns (address);')

Fragment(uuid='NORMALIZED-001026',
         path='/token.sol',
         lineno=590,
         depth=2,
         type='documentation',
         name='',
         text='\n    function excludeFromDividends(address account) external;')

Fragment(uuid='NORMALIZED-001027',
         path='/token.sol',
         lineno=591,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function updateMinimumTokenBalanceForDividends(uint256 '
              'amount) external;')

Fragment(uuid='NORMALIZED-001028',
         path='/token.sol',
         lineno=592,
         depth=2,
         type='documentation',
         name='',
         text='\n    function updateClaimWait(uint256 newClaimWait) external;')

Fragment(uuid='NORMALIZED-001029',
         path='/token.sol',
         lineno=593,
         depth=2,
         type='documentation',
         name='',
         text='\n    function claimWait() external view returns (uint256);')

Fragment(uuid='NORMALIZED-001030',
         path='/token.sol',
         lineno=594,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function totalDividendsDistributed() external view returns '
              '(uint256);')

Fragment(uuid='NORMALIZED-001031',
         path='/token.sol',
         lineno=595,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function withdrawableDividendOf(address account) external '
              'view returns(uint256);')

Fragment(uuid='NORMALIZED-001032',
         path='/token.sol',
         lineno=596,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function balanceOf(address account) external view returns '
              '(uint256);')

Fragment(uuid='NORMALIZED-001033',
         path='/token.sol',
         lineno=597,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function getAccount(address _account) external view returns '
              '(address account,int256 index,int256 '
              'iterationsUntilProcessed,uint256 withdrawableDividends,uint256 '
              'totalDividends,uint256 lastClaimTime,uint256 '
              'nextClaimTime,uint256 secondsUntilAutoClaimAvailable);')

Fragment(uuid='NORMALIZED-001034',
         path='/token.sol',
         lineno=598,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function getAccountAtIndex(uint256 index) external view '
              'returns '
              '(address,int256,int256,uint256,uint256,uint256,uint256,uint256);')

Fragment(uuid='NORMALIZED-001035',
         path='/token.sol',
         lineno=599,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function process(uint256 gas) external returns (uint256, '
              'uint256, uint256);')

Fragment(uuid='NORMALIZED-001036',
         path='/token.sol',
         lineno=600,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function processAccount(address payable account, bool '
              'automatic) external returns (bool);')

Fragment(uuid='NORMALIZED-001037',
         path='/token.sol',
         lineno=601,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function getLastProcessedIndex() external view '
              'returns(uint256);')

Fragment(uuid='NORMALIZED-001038',
         path='/token.sol',
         lineno=602,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function getNumberOfTokenHolders() external view '
              'returns(uint256);')

Fragment(uuid='NORMALIZED-001039',
         path='/token.sol',
         lineno=603,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function setBalance(address payable account, uint256 '
              'newBalance) external;')

Fragment(uuid='NORMALIZED-001040',
         path='/token.sol',
         lineno=604,
         depth=2,
         type='documentation',
         name='',
         text='\n    function distributeCAKEDividends(uint256 amount) external;')

Fragment(uuid='NORMALIZED-001041',
         path='/token.sol',
         lineno=605,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function isExcludedFromDividends(address account) external '
              'view returns (bool);')

Fragment(uuid='NORMALIZED-001042',
         path='/token.sol',
         lineno=606,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function getMinimumTokenBalanceForDividends() external view '
              'returns (uint256);')

Fragment(uuid='NORMALIZED-001043',
         path='/token.sol',
         lineno=607,
         depth=2,
         type='documentation',
         name='',
         text='\n}')