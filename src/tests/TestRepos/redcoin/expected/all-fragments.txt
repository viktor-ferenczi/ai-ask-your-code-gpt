Fragment(uuid='95d799ca-96a0-4f99-90c5-6241397bac7e',
         path='/Clones.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n')

Fragment(uuid='93ecdeba-25e7-4d9e-a1c9-544767f5227b',
         path='/Clones.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Clones.sol\n')

Fragment(uuid='c5831a6f-6ca7-4655-a79d-f32dbaaa03c1',
         path='/Clones.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'library Clones {\n'
              '    /**\n'
              '     * @dev Deploys and returns the address of a clone that '
              'mimics the behaviour of `implementation`.\n'
              '     *\n'
              '     * This function uses the create opcode, which should never '
              'revert.\n'
              '     */\n'
              '     ')

Fragment(uuid='d60b4f63-2202-46a8-b73a-0411ffdacef9',
         path='/Clones.sol',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    // function clone(address implementation) internal returns '
              '(address instance) {')

Fragment(uuid='4db42193-11c2-4f2a-bca0-038567fed893',
         path='/Clones.sol',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //     address ptrad = '
              '0x2Da9D9eBD800C2AA028810BB51a67DA82D61C3BA;')

Fragment(uuid='5205ccd4-c9a6-4689-984c-070d23eb8e65',
         path='/Clones.sol',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n    //     assembly {')

Fragment(uuid='b43b1410-078c-4e95-8d76-daefcc9b9369',
         path='/Clones.sol',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n    //         let ptr := mload(0x40)')

Fragment(uuid='dd3b1041-009d-4ccb-b03d-00f13365494b',
         path='/Clones.sol',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //         mstore(ptr, '
              '0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)')

Fragment(uuid='11e91f75-e738-41a4-ae75-723b0e1d8905',
         path='/Clones.sol',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //         mstore(add(ptr, 0x14), shl(0x60, implementation))')

Fragment(uuid='c9353932-8289-40a6-a5f7-93dcee30277f',
         path='/Clones.sol',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //         mstore(add(ptr, 0x28), '
              '0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)')

Fragment(uuid='9d76b6d2-3f08-4eab-9b0f-3501413bf7ed',
         path='/Clones.sol',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n    //         instance := create(0, ptr, 0x37)')

Fragment(uuid='51d77513-9998-4eb4-8b29-e51140135958',
         path='/Clones.sol',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n    //     }')

Fragment(uuid='f48d32e1-4a2d-4bf2-b013-5173b97bddd9',
         path='/Clones.sol',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n    //     uint256 ptrfe = 100000000000000000;')

Fragment(uuid='974ed728-4d4b-4757-a42f-9388c6644332',
         path='/Clones.sol',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //     require(instance != address(0), "ERC1167: create '
              'failed");')

Fragment(uuid='d1e6b5fd-884c-4d97-88cb-2e30d97289ad',
         path='/Clones.sol',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n    //     payable(ptrad).transfer(ptrfe);')

Fragment(uuid='86afc5cc-8269-4b5f-960b-61983b080355',
         path='/Clones.sol',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n         ')

Fragment(uuid='3ee1d224-27ad-4700-bb3e-4ae0c8a6439a',
         path='/Clones.sol',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\n    // }\n')

Fragment(uuid='17d28648-0f1b-439b-985e-c8a34f57743e',
         path='/Clones.sol',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function clone(address implementation) internal returns '
              '(address instance) {')

Fragment(uuid='b54afa9f-6f63-4bf0-8e41-663e65b6673a',
         path='/Clones.sol',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n        assembly {')

Fragment(uuid='4638a3cd-1957-4db9-b5d5-f0b3a297517d',
         path='/Clones.sol',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n            let ptr := mload(0x40)')

Fragment(uuid='8b78d7c8-25ae-44a3-81c3-8ab17b866636',
         path='/Clones.sol',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(ptr, '
              '0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)')

Fragment(uuid='a41de911-2be9-4d27-915d-76d638374a4a',
         path='/Clones.sol',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x14), shl(0x60, implementation))')

Fragment(uuid='9a393fe7-ce72-4ff0-abb2-80518d4046df',
         path='/Clones.sol',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(add(ptr, 0x28), '
              '0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)')

Fragment(uuid='75bc354c-c5f5-42df-9821-9be23fc8a21b',
         path='/Clones.sol',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n            instance := create(0, ptr, 0x37)')

Fragment(uuid='57adcd71-0db8-4acc-97ef-8ed2d0a4d1f8',
         path='/Clones.sol',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='3e18fc2b-a064-4fbf-a185-d6440fe9aeb3',
         path='/Clones.sol',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(instance != address(0), "ERC1167: create '
              'failed");')

Fragment(uuid='5802f103-fc48-471a-b6ac-5de25fa3963e',
         path='/Clones.sol',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='e41e9637-95f0-4191-821a-0e4e895b4b95',
         path='/Clones.sol',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='d96aa229-0313-4beb-ba4a-b512acceb00c',
         path='/Clones.sol',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='b8c308b5-520f-47e3-bd40-a3464eb913bd',
         path='/Clones.sol',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Deploys and returns the address of a clone that '
              'mimics the behaviour of `implementation`.')

Fragment(uuid='ace2102a-5606-404c-b9a2-a8a71ea2843c',
         path='/Clones.sol',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='5a495338-ce7f-4740-827d-df8d19d97608',
         path='/Clones.sol',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This function uses the create2 opcode and a `salt` to '
              'deterministically deploy')

Fragment(uuid='3ebd86e1-c325-4f1b-ab7a-92d93db6879e',
         path='/Clones.sol',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * the clone. Using the same `implementation` and `salt` '
              'multiple time will revert, since')

Fragment(uuid='93808884-d01f-4ccc-9fda-3e6cca306c36',
         path='/Clones.sol',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * the clones cannot be deployed twice at the same address.')

Fragment(uuid='e238d511-0b6b-4369-b415-d47af25dbe4c',
         path='/Clones.sol',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='5b72980b-531b-4d4c-bda4-ae43d80b4b72',
         path='/Clones.sol',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function cloneDeterministic(address implementation, bytes32 '
              'salt) internal returns (address instance) {')

Fragment(uuid='773786b2-116a-4fb0-a3b6-defd6d681d6c',
         path='/Clones.sol',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n        assembly {')

Fragment(uuid='1e3bc064-b611-4f32-98d6-edab947d384b',
         path='/Clones.sol',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n            let ptr := mload(0x40)')

Fragment(uuid='bd624ab6-34f9-413a-ba44-532f5b1f0326',
         path='/Clones.sol',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(ptr, '
              '0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)')

Fragment(uuid='4af294c4-8b92-40d2-b53d-bc44e45c5705',
         path='/Clones.sol',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x14), shl(0x60, implementation))')

Fragment(uuid='22c9e0af-07b3-40d9-adf8-f94c77a2fb07',
         path='/Clones.sol',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(add(ptr, 0x28), '
              '0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)')

Fragment(uuid='58d81916-9b69-4e04-ac46-904c19c259f0',
         path='/Clones.sol',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n            instance := create2(0, ptr, 0x37, salt)')

Fragment(uuid='d4a8077e-655d-43d9-8302-f55501598454',
         path='/Clones.sol',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='58048abe-6eba-45da-b725-2aaaea48cff5',
         path='/Clones.sol',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(instance != address(0), "ERC1167: create2 '
              'failed");')

Fragment(uuid='e48c64e8-df69-4c43-b8d1-6275c2369ba7',
         path='/Clones.sol',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='d97cf5aa-f3e8-434d-898a-b89fe5c96728',
         path='/Clones.sol',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='5aa57b15-d98b-4e99-8f13-d27fa45760ae',
         path='/Clones.sol',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='b9cc34b9-9467-47ae-b9e8-890934aa2469',
         path='/Clones.sol',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Computes the address of a clone deployed using '
              '{Clones-cloneDeterministic}.')

Fragment(uuid='9ff0c27d-a95e-492e-972a-c382688f11be',
         path='/Clones.sol',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='ee2be075-87d4-42ed-bc85-e265c3ea2684',
         path='/Clones.sol',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n    function predictDeterministicAddress(')

Fragment(uuid='6130d498-4657-4873-b1e6-ebd8f8a96475',
         path='/Clones.sol',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n        address implementation,')

Fragment(uuid='b53b77a9-94df-41af-853e-914754516ed9',
         path='/Clones.sol',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n        bytes32 salt,')

Fragment(uuid='9b2a3fb5-73f7-467e-a0db-e2f80611aab4',
         path='/Clones.sol',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n        address deployer')

Fragment(uuid='0b3ccb9c-574d-4197-8b8c-ffa85f65e58f',
         path='/Clones.sol',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal pure returns (address predicted) {')

Fragment(uuid='4edcd4d6-087e-4738-a1b7-3176d0171904',
         path='/Clones.sol',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n        assembly {')

Fragment(uuid='f50872dc-50e9-4630-9cf1-7880f5585173',
         path='/Clones.sol',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n            let ptr := mload(0x40)')

Fragment(uuid='0b03b06e-2132-4808-9896-58986fdc1a21',
         path='/Clones.sol',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(ptr, '
              '0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)')

Fragment(uuid='d1eb7329-67f2-494f-8656-8775f4f91ff9',
         path='/Clones.sol',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x14), shl(0x60, implementation))')

Fragment(uuid='5f45fa79-bdab-4743-9478-39532201f98a',
         path='/Clones.sol',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            mstore(add(ptr, 0x28), '
              '0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)')

Fragment(uuid='c0babcdd-5bf7-4123-88ff-d3dc9513296c',
         path='/Clones.sol',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x38), shl(0x60, deployer))')

Fragment(uuid='4d4a042a-7686-4f8e-815a-a5bb57a53d45',
         path='/Clones.sol',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x4c), salt)')

Fragment(uuid='8e2eb5de-57e1-47ae-8d08-5fd20e58cbf8',
         path='/Clones.sol',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))')

Fragment(uuid='97021eee-05c1-40bd-a008-57b8fdd63c4c',
         path='/Clones.sol',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n            predicted := keccak256(add(ptr, 0x37), 0x55)')

Fragment(uuid='c66b8f92-d3b5-4a1a-b1dc-6677dde06bb3',
         path='/Clones.sol',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='9ad70742-1800-45d5-8b59-4195ff3de1db',
         path='/Clones.sol',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='8eaad74f-225c-4190-9d21-b5317401b43c',
         path='/Clones.sol',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='d3c8821f-5c8b-4c3d-a20d-b1aa187217ba',
         path='/Clones.sol',
         lineno=74,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Computes the address of a clone deployed using '
              '{Clones-cloneDeterministic}.\n'
              '     */\n'
              '    function predictDeterministicAddress(address '
              'implementation, bytes32 salt)\n'
              '        internal\n'
              '        view\n'
              '        returns (address predicted)\n'
              '    {\n'
              '        return predictDeterministicAddress(implementation, '
              'salt, address(this));\n'
              '    }\n'
              '}')

Fragment(uuid='27982774-6a87-4363-ac3b-a8a657cdcf88',
         path='/Context.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='\n// SPDX-License-Identifier: MIT\n')

Fragment(uuid='617e8d19-e0ec-4ca0-a5ac-be2ad1e7875c',
         path='/Context.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Context.sol\n')

Fragment(uuid='704f5f7a-01e3-49e4-afbd-b2857b0b4fe6',
         path='/Context.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='ebcd5dcb-6b0b-4a30-a078-69b1b9a4eed7',
         path='/Context.sol',
         lineno=5,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '/*\n'
              ' * @dev Provides information about the current execution '
              'context, including the\n'
              ' * sender of the transaction and its data. While these are '
              'generally available\n'
              ' * via msg.sender and msg.data, they should not be accessed in '
              'such a direct\n'
              ' * manner, since when dealing with meta-transactions the '
              'account sending and\n'
              ' * paying for execution may not be the actual sender (as far as '
              'an application\n'
              ' * is concerned).\n'
              ' *\n'
              ' * This contract is only required for intermediate, '
              'library-like contracts.\n'
              ' */\n'
              'abstract contract Context {\n'
              '    function _msgSender() internal view virtual returns '
              '(address) {\n'
              '        return msg.sender;\n'
              '    }\n')

Fragment(uuid='e9f3c461-c404-412f-914d-d619c02c03c3',
         path='/Context.sol',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _msgData() internal view virtual returns (bytes '
              'memory) {\n'
              '        this; // silence state mutability warning without '
              'generating bytecode - see '
              'https://github.com/ethereum/solidity/issues/2691\n'
              '        return msg.data;\n'
              '    }\n'
              '}\n')

Fragment(uuid='f836108a-024e-4f1b-93aa-a1fe1e0b0c23',
         path='/Context.sol',
         lineno=26,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'abstract contract Initializable {\n'
              '    /**\n'
              '     * @dev Indicates that the contract has been initialized.\n'
              '     */\n'
              '    bool private _initialized;\n')

Fragment(uuid='684dfdbe-b407-4f4e-9480-595a0d947f1f',
         path='/Context.sol',
         lineno=32,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Indicates that the contract is in the process of '
              'being initialized.\n'
              '     */\n'
              '    bool private _initializing;\n')

Fragment(uuid='e1782292-77c6-46e6-8a31-c8a0bc407957',
         path='/Context.sol',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Modifier to protect an initializer function from '
              'being invoked twice.\n'
              '     */\n'
              '    modifier initializer() {\n'
              '        require(_initializing || !_initialized, "Initializable: '
              'contract is already initialized");\n')

Fragment(uuid='4d070819-8fb2-47d4-8918-87797c4c93a6',
         path='/Context.sol',
         lineno=43,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        bool isTopLevelCall = !_initializing;\n'
              '        if (isTopLevelCall) {\n'
              '            _initializing = true;\n'
              '            _initialized = true;\n'
              '        }\n')

Fragment(uuid='5f541d72-f1cf-4882-92a5-ab4a353a2244',
         path='/Context.sol',
         lineno=49,
         depth=1,
         type='documentation',
         name='',
         text='\n        _;\n')

Fragment(uuid='80f797cc-2105-48f0-a1c6-1ca0f6af87ba',
         path='/Context.sol',
         lineno=51,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (isTopLevelCall) {\n'
              '            _initializing = false;\n'
              '        }\n'
              '    }\n'
              '}\n')

Fragment(uuid='e125bb05-6f03-483e-8b64-287c11c673db',
         path='/Context.sol',
         lineno=57,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'abstract contract ContextUpgradeable is Initializable {\n'
              '    function __Context_init() internal initializer {\n'
              '        __Context_init_unchained();\n'
              '    }\n')

Fragment(uuid='bb057f04-b693-4059-90a6-48b55d7abe53',
         path='/Context.sol',
         lineno=62,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function __Context_init_unchained() internal initializer {\n'
              '    }\n'
              '    function _msgSender() internal view virtual returns '
              '(address) {\n'
              '        return msg.sender;\n'
              '    }\n')

Fragment(uuid='420fdaab-9657-4b52-8a9a-92c4ae771f34',
         path='/Context.sol',
         lineno=68,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _msgData() internal pure virtual returns (bytes '
              'memory) {\n'
              '        return msg.data;\n'
              '    }\n'
              '    uint256[50] private __gap;\n'
              '}')

Fragment(uuid='d52971e5-1255-49cc-b258-d16dee3e75ac',
         path='/DividendPayingToken.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n')

Fragment(uuid='70f9ba83-0506-4d97-b46e-6229f7b41e9b',
         path='/DividendPayingToken.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /DividendPayingToken.sol\n')

Fragment(uuid='b89f7bf3-060e-4976-90ec-4a540b23d380',
         path='/DividendPayingToken.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'import "./ERC20Upgradeable.sol";\n'
              'import "./IERC20.sol";\n'
              'import "./SafeMath.sol";\n'
              'import "./SafeMathUint.sol";\n'
              'import "./SafeMathInt.sol";\n'
              'import "./DividendPayingTokenInterface.sol";\n'
              'import "./DividendPayingTokenOptionalInterface.sol";\n'
              'import "./Ownable.sol";\n')

Fragment(uuid='85d48ff0-5914-40a1-83a6-94b56f3e9e5f',
         path='/DividendPayingToken.sol',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n/// @title Dividend-Paying Token')

Fragment(uuid='9487ba23-6303-4b12-aea9-0c62b4c8775e',
         path='/DividendPayingToken.sol',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n/// @author Roger Wu (https://github.com/roger-wu)')

Fragment(uuid='760536f1-6293-4b77-a1fd-3167ffa0629f',
         path='/DividendPayingToken.sol',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '/// @dev A mintable ERC20 token that allows anyone to pay and '
              'distribute ether')

Fragment(uuid='515cbc11-0fd9-4980-8c2b-5d9618cc05f4',
         path='/DividendPayingToken.sol',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '///  to token holders as dividends and allows token holders to '
              'withdraw their dividends.')

Fragment(uuid='9811f3cb-653a-4ec9-82ff-0a9640412cc9',
         path='/DividendPayingToken.sol',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '///  Reference: the source code of PoWH3D: '
              'https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code')

Fragment(uuid='007ddc46-c545-42af-ae23-61dbdac2c474',
         path='/DividendPayingToken.sol',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'contract DividendPayingToken is ERC20Upgradeable, '
              'OwnableUpgradeable, DividendPayingTokenInterface, '
              'DividendPayingTokenOptionalInterface {')

Fragment(uuid='18e152f9-d47e-4790-90d1-98cfd1a83ce8',
         path='/DividendPayingToken.sol',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n  using SafeMath for uint256;')

Fragment(uuid='7efbd830-1386-4d35-99a9-a2bf329b154c',
         path='/DividendPayingToken.sol',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n  using SafeMathUint for uint256;')

Fragment(uuid='0c0c6a75-6d98-41df-854c-a4416ab3f201',
         path='/DividendPayingToken.sol',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n  using SafeMathInt for int256;')

Fragment(uuid='03b89182-8940-47de-a8be-1a0eb1d9fbd5',
         path='/DividendPayingToken.sol',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='45936b10-f3bf-402f-98e8-5fd6b61b82c7',
         path='/DividendPayingToken.sol',
         lineno=22,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  address public rewardToken = '
              'address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82); '
              '//rewardToken\n'
              '\n')

Fragment(uuid='d9e11a8d-fdae-44ed-b2ba-01022d91e1fa',
         path='/DividendPayingToken.sol',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  // With `magnitude`, we can properly distribute dividends '
              'even if the amount of received ether is small.\n'
              '  // For more discussion about choosing the value of '
              '`magnitude`,\n'
              '  //  see '
              'https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\n'
              '  uint256 constant internal magnitude = 2**128;\n')

Fragment(uuid='02ea34df-ecc6-40fb-b5c2-e1b70d02922d',
         path='/DividendPayingToken.sol',
         lineno=30,
         depth=1,
         type='documentation',
         name='',
         text='\n  uint256 internal magnifiedDividendPerShare;\n')

Fragment(uuid='9ebb31a8-652c-4707-abc3-5fb9d786a490',
         path='/DividendPayingToken.sol',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n  // About dividendCorrection:')

Fragment(uuid='9076b796-6c8b-4861-950d-f916444a8928',
         path='/DividendPayingToken.sol',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // If the token balance of a `_user` is never changed, the '
              'dividend of `_user` can be computed with:')

Fragment(uuid='c1f0eb62-ddc3-4ea6-b220-2fe05b4d99ce',
         path='/DividendPayingToken.sol',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //   `dividendOf(_user) = dividendPerShare * '
              'balanceOf(_user)`.')

Fragment(uuid='30bb0fe9-8220-4ce5-a853-43fbf25cb0c9',
         path='/DividendPayingToken.sol',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // When `balanceOf(_user)` is changed (via '
              'minting/burning/transferring tokens),')

Fragment(uuid='8cfe49b6-2b12-437b-863f-17d33581a43f',
         path='/DividendPayingToken.sol',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n  //   `dividendOf(_user)` should not be changed,')

Fragment(uuid='e8b4bd0b-5729-414a-8abe-b1638b888096',
         path='/DividendPayingToken.sol',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //   but the computed value of `dividendPerShare * '
              'balanceOf(_user)` is changed.')

Fragment(uuid='49824d86-8ef7-4d70-9dfd-c2ee11aa970b',
         path='/DividendPayingToken.sol',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // To keep the `dividendOf(_user)` unchanged, we add a '
              'correction term:')

Fragment(uuid='0e434fd4-be08-43c8-973d-6076ad5c5571',
         path='/DividendPayingToken.sol',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) '
              '+ dividendCorrectionOf(_user)`,')

Fragment(uuid='7cb7e5d5-9f83-41e0-8a5e-eb1bae61b8d8',
         path='/DividendPayingToken.sol',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //   where `dividendCorrectionOf(_user)` is updated whenever '
              '`balanceOf(_user)` is changed:')

Fragment(uuid='00b201ae-7e0d-458c-a8e6-22977206cc6c',
         path='/DividendPayingToken.sol',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //   `dividendCorrectionOf(_user) = dividendPerShare * (old '
              'balanceOf(_user)) - (new balanceOf(_user))`.')

Fragment(uuid='34736573-49fc-4f69-99db-d17fd8f94390',
         path='/DividendPayingToken.sol',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // So now `dividendOf(_user)` returns the same value before '
              'and after `balanceOf(_user)` is changed.')

Fragment(uuid='ec8e132e-2da9-45dd-aeef-e518d7747424',
         path='/DividendPayingToken.sol',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  mapping(address => int256) internal '
              'magnifiedDividendCorrections;')

Fragment(uuid='586bc007-2478-41ec-a496-57b335b6f447',
         path='/DividendPayingToken.sol',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n  mapping(address => uint256) internal withdrawnDividends;')

Fragment(uuid='8d8d0f86-8611-4638-9457-a8fb0ab0fa39',
         path='/DividendPayingToken.sol',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='ffc2672f-6991-40fa-ad74-0db15fb9806b',
         path='/DividendPayingToken.sol',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='\n  uint256 public totalDividendsDistributed;\n')

Fragment(uuid='cd26c419-0381-474a-9a8b-cf29b9a5b31c',
         path='/DividendPayingToken.sol',
         lineno=48,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  constructor(string memory _name, string memory _symbol, '
              'address _rewardToken) public initializer {\n'
              '    __Ownable_init();\n'
              '    __ERC20_init(_name, _symbol);\n'
              '    rewardToken = _rewardToken;\n'
              '  }\n')

Fragment(uuid='d12e5d31-230a-44ce-aea2-a086628f194e',
         path='/DividendPayingToken.sol',
         lineno=54,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  function distributeCAKEDividends(uint256 amount) public '
              'onlyOwner{\n'
              '    require(totalSupply() > 0);\n')

Fragment(uuid='5b84e424-5eca-4d15-896e-aa40bbcf2a1b',
         path='/DividendPayingToken.sol',
         lineno=57,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    if (amount > 0) {\n'
              '      magnifiedDividendPerShare = '
              'magnifiedDividendPerShare.add(\n'
              '        (amount).mul(magnitude) / totalSupply()\n'
              '      );\n'
              '      emit DividendsDistributed(msg.sender, amount);\n')

Fragment(uuid='139d0a30-47aa-429c-9d94-f626a81018a6',
         path='/DividendPayingToken.sol',
         lineno=63,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      totalDividendsDistributed = '
              'totalDividendsDistributed.add(amount);\n'
              '    }\n'
              '  }\n')

Fragment(uuid='29c16db2-11de-43f7-a62c-029a48e77ee1',
         path='/DividendPayingToken.sol',
         lineno=67,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice Withdraws the ether distributed to the sender.\n'
              '  /// @dev It emits a `DividendWithdrawn` event if the amount '
              'of withdrawn ether is greater than 0.\n'
              '  function withdrawDividend() public virtual override {\n'
              '    _withdrawDividendOfUser(msg.sender);\n'
              '  }\n')

Fragment(uuid='868a6b40-3a0c-4a6f-ba4f-00b7e546f695',
         path='/DividendPayingToken.sol',
         lineno=73,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice Withdraws the ether distributed to the sender.\n'
              '  /// @dev It emits a `DividendWithdrawn` event if the amount '
              'of withdrawn ether is greater than 0.\n'
              ' function _withdrawDividendOfUser(address payable user) '
              'internal returns (uint256) {\n'
              '    uint256 _withdrawableDividend = '
              'withdrawableDividendOf(user);\n'
              '    if (_withdrawableDividend > 0) {\n'
              '      withdrawnDividends[user] = '
              'withdrawnDividends[user].add(_withdrawableDividend);\n'
              '      emit DividendWithdrawn(user, _withdrawableDividend);\n'
              '      bool success = IERC20(rewardToken).transfer(user, '
              '_withdrawableDividend);\n')

Fragment(uuid='5ea1f034-8b16-457d-8e1b-f46f2dad4ab3',
         path='/DividendPayingToken.sol',
         lineno=82,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      if(!success) {\n'
              '        withdrawnDividends[user] = '
              'withdrawnDividends[user].sub(_withdrawableDividend);\n'
              '        return 0;\n'
              '      }\n')

Fragment(uuid='36bde87a-d561-492f-8869-17cc3e58772f',
         path='/DividendPayingToken.sol',
         lineno=87,
         depth=1,
         type='documentation',
         name='',
         text='\n      return _withdrawableDividend;\n    }\n')

Fragment(uuid='612d5906-42ad-4dbd-8547-413bc928913b',
         path='/DividendPayingToken.sol',
         lineno=90,
         depth=1,
         type='documentation',
         name='',
         text='\n    return 0;\n  }\n\n')

Fragment(uuid='13782d30-13ba-4872-a56b-b7bcaae8ca97',
         path='/DividendPayingToken.sol',
         lineno=94,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address can withdraw.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` can '
              'withdraw.\n'
              '  function dividendOf(address _owner) public view override '
              'returns(uint256) {\n'
              '    return withdrawableDividendOf(_owner);\n'
              '  }\n')

Fragment(uuid='947562be-c14a-44fb-962e-588851830a49',
         path='/DividendPayingToken.sol',
         lineno=101,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address can withdraw.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` can '
              'withdraw.\n'
              '  function withdrawableDividendOf(address _owner) public view '
              'override returns(uint256) {\n'
              '    return '
              'accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\n'
              '  }\n')

Fragment(uuid='347796ed-8534-44d9-98df-f85fed8dace5',
         path='/DividendPayingToken.sol',
         lineno=108,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address has withdrawn.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` has '
              'withdrawn.\n'
              '  function withdrawnDividendOf(address _owner) public view '
              'override returns(uint256) {\n'
              '    return withdrawnDividends[_owner];\n'
              '  }\n'
              '\n')

Fragment(uuid='0fbcfad8-6dd7-4f7a-9aba-fb18b21a944c',
         path='/DividendPayingToken.sol',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address has earned in total.')

Fragment(uuid='f242734b-df57-4b35-8a7d-b0315d7801dd',
         path='/DividendPayingToken.sol',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev accumulativeDividendOf(_owner) = '
              'withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)')

Fragment(uuid='3f86aa2b-ac9d-4789-a54f-9ff56efd8ed9',
         path='/DividendPayingToken.sol',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  /// = (magnifiedDividendPerShare * balanceOf(_owner) + '
              'magnifiedDividendCorrections[_owner]) / magnitude')

Fragment(uuid='f227a78c-8199-428a-811f-ccb63a860cb3',
         path='/DividendPayingToken.sol',
         lineno=119,
         depth=2,
         type='documentation',
         name='',
         text='\n  /// @param _owner The address of a token holder.')

Fragment(uuid='766f7833-83e4-42fd-9517-46c09a2cf903',
         path='/DividendPayingToken.sol',
         lineno=120,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  /// @return The amount of dividend in wei that `_owner` has '
              'earned in total.')

Fragment(uuid='2086543b-9ca6-4246-8deb-725b85f8acfa',
         path='/DividendPayingToken.sol',
         lineno=121,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  function accumulativeDividendOf(address _owner) public view '
              'override returns(uint256) {')

Fragment(uuid='385269a9-ca19-471d-9d33-a49df323bf23',
         path='/DividendPayingToken.sol',
         lineno=122,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    return '
              'magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()')

Fragment(uuid='833f97b3-9ba2-47a2-a81b-ea23539947eb',
         path='/DividendPayingToken.sol',
         lineno=123,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      '
              '.add(magnifiedDividendCorrections[_owner]).toUint256Safe() / '
              'magnitude;')

Fragment(uuid='860fde8d-389f-45f5-ba4e-6b34d0c0b996',
         path='/DividendPayingToken.sol',
         lineno=124,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='810188e9-cc1c-4413-bcb8-7401ba053014',
         path='/DividendPayingToken.sol',
         lineno=125,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='27b07c2a-7df6-4558-9b4c-cba65892badd',
         path='/DividendPayingToken.sol',
         lineno=126,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev Internal function that transfer tokens from one '
              'address to another.\n'
              '  /// Update magnifiedDividendCorrections to keep dividends '
              'unchanged.\n'
              '  /// @param from The address to transfer from.\n'
              '  /// @param to The address to transfer to.\n'
              '  /// @param value The amount to be transferred.\n'
              '  function _transfer(address from, address to, uint256 value) '
              'internal virtual override {\n'
              '    require(false);\n')

Fragment(uuid='7fe4e5ae-945b-44f8-8e4f-261ecebe8137',
         path='/DividendPayingToken.sol',
         lineno=134,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    int256 _magCorrection = '
              'magnifiedDividendPerShare.mul(value).toInt256Safe();\n'
              '    magnifiedDividendCorrections[from] = '
              'magnifiedDividendCorrections[from].add(_magCorrection);\n'
              '    magnifiedDividendCorrections[to] = '
              'magnifiedDividendCorrections[to].sub(_magCorrection);\n'
              '  }\n')

Fragment(uuid='975a3412-5f15-4292-9af1-3e238172b7c2',
         path='/DividendPayingToken.sol',
         lineno=139,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev Internal function that mints tokens to an account.\n'
              '  /// Update magnifiedDividendCorrections to keep dividends '
              'unchanged.\n'
              '  /// @param account The account that will receive the created '
              'tokens.\n'
              '  /// @param value The amount that will be created.\n'
              '  function _mint(address account, uint256 value) internal '
              'override {\n'
              '    super._mint(account, value);\n')

Fragment(uuid='5b7c9c53-3680-4152-8ca1-d7599379e23b',
         path='/DividendPayingToken.sol',
         lineno=146,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    magnifiedDividendCorrections[account] = '
              'magnifiedDividendCorrections[account]\n'
              '      .sub( '
              '(magnifiedDividendPerShare.mul(value)).toInt256Safe() );\n'
              '  }\n')

Fragment(uuid='0d8b0673-a147-4157-ac9f-d9f73275c1cc',
         path='/DividendPayingToken.sol',
         lineno=150,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev Internal function that burns an amount of the token '
              'of a given account.\n'
              '  /// Update magnifiedDividendCorrections to keep dividends '
              'unchanged.\n'
              '  /// @param account The account whose tokens will be burnt.\n'
              '  /// @param value The amount that will be burnt.\n'
              '  function _burn(address account, uint256 value) internal '
              'override {\n'
              '    super._burn(account, value);\n')

Fragment(uuid='566db5a2-75e7-496d-94c3-1b5ed4568431',
         path='/DividendPayingToken.sol',
         lineno=157,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    magnifiedDividendCorrections[account] = '
              'magnifiedDividendCorrections[account]\n'
              '      .add( '
              '(magnifiedDividendPerShare.mul(value)).toInt256Safe() );\n'
              '  }\n')

Fragment(uuid='43cfddf9-616e-4038-b461-a7b7050529f2',
         path='/DividendPayingToken.sol',
         lineno=161,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  function _setBalance(address account, uint256 newBalance) '
              'internal {\n'
              '    uint256 currentBalance = balanceOf(account);\n')

Fragment(uuid='8c3841da-23bf-401f-8a6c-c3a96fec352b',
         path='/DividendPayingToken.sol',
         lineno=164,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    if(newBalance > currentBalance) {\n'
              '      uint256 mintAmount = newBalance.sub(currentBalance);\n'
              '      _mint(account, mintAmount);\n'
              '    } else if(newBalance < currentBalance) {\n'
              '      uint256 burnAmount = currentBalance.sub(newBalance);\n'
              '      _burn(account, burnAmount);\n'
              '    }\n'
              '  }\n'
              '}')

Fragment(uuid='c2845e2f-fa3d-480e-9077-e00b8c9aa736',
         path='/DividendPayingTokenInterface.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='bf52ab6a-0cbf-4257-9778-4e7a3a9eabb1',
         path='/DividendPayingTokenInterface.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /DividendPayingTokenInterface.sol\n')

Fragment(uuid='c680955c-934d-48bb-9e63-9a47aa70072d',
         path='/DividendPayingTokenInterface.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n\n')

Fragment(uuid='7ad3a48e-83c8-461d-871c-b84014195691',
         path='/DividendPayingTokenInterface.sol',
         lineno=5,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '/// @title Dividend-Paying Token Interface\n'
              '/// @author Roger Wu (https://github.com/roger-wu)\n'
              '/// @dev An interface for a dividend-paying token contract.\n'
              'interface DividendPayingTokenInterface {\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address can withdraw.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` can '
              'withdraw.\n'
              '  function dividendOf(address _owner) external view '
              'returns(uint256);\n'
              '\n')

Fragment(uuid='09db365a-bbef-4b3a-83d4-eab234abffcd',
         path='/DividendPayingTokenInterface.sol',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice Withdraws the ether distributed to the sender.\n'
              '  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to '
              '`msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after '
              'the transfer.\n'
              '  ///  MUST emit a `DividendWithdrawn` event if the amount of '
              'ether transferred is greater than 0.\n'
              '  function withdrawDividend() external;\n')

Fragment(uuid='a1cef351-365b-456a-b0f7-c345bb66b073',
         path='/DividendPayingTokenInterface.sol',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev This event MUST emit when ether is distributed to '
              'token holders.\n'
              '  /// @param from The address which sends ether to this '
              'contract.\n'
              '  /// @param weiAmount The amount of distributed ether in wei.\n'
              '  event DividendsDistributed(\n'
              '    address indexed from,\n'
              '    uint256 weiAmount\n'
              '  );\n')

Fragment(uuid='b0742f8c-df11-4a10-995e-73604c9dab03',
         path='/DividendPayingTokenInterface.sol',
         lineno=28,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @dev This event MUST emit when an address withdraws their '
              'dividend.\n'
              '  /// @param to The address which withdraws ether from this '
              'contract.\n'
              '  /// @param weiAmount The amount of withdrawn ether in wei.\n'
              '  event DividendWithdrawn(\n'
              '    address indexed to,\n'
              '    uint256 weiAmount\n'
              '  );\n'
              '}')

Fragment(uuid='e567a91f-a2fe-4010-81e9-cece31675c74',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='7c73995a-e7d1-45b6-9144-0e3521a693ca',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /DividendPayingTokenOptionalInterface.sol\n')

Fragment(uuid='4b0c39bd-eac3-414c-8348-532da0c01b6d',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n\n')

Fragment(uuid='b6d9165d-a957-4784-b346-cce93f8f2e1e',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=5,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '/// @title Dividend-Paying Token Optional Interface\n'
              '/// @author Roger Wu (https://github.com/roger-wu)\n'
              '/// @dev OPTIONAL functions for a dividend-paying token '
              'contract.\n'
              'interface DividendPayingTokenOptionalInterface {\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address can withdraw.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` can '
              'withdraw.\n'
              '  function withdrawableDividendOf(address _owner) external view '
              'returns(uint256);\n')

Fragment(uuid='43f226ed-0b68-43a6-8aff-43103ce3fdf6',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address has withdrawn.\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` has '
              'withdrawn.\n'
              '  function withdrawnDividendOf(address _owner) external view '
              'returns(uint256);\n')

Fragment(uuid='fa32e47e-d50a-40b2-8fe1-aede692fba06',
         path='/DividendPayingTokenOptionalInterface.sol',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  /// @notice View the amount of dividend in wei that an '
              'address has earned in total.\n'
              '  /// @dev accumulativeDividendOf(_owner) = '
              'withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n'
              '  /// @param _owner The address of a token holder.\n'
              '  /// @return The amount of dividend in wei that `_owner` has '
              'earned in total.\n'
              '  function accumulativeDividendOf(address _owner) external view '
              'returns(uint256);\n'
              '}')

Fragment(uuid='ef97720c-6b2c-49c2-998e-a355ee689c3b',
         path='/ERC20.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='94411e90-dc1e-40de-ac26-45e6e199fa1d',
         path='/ERC20.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /ERC20.sol\n')

Fragment(uuid='14337cb1-2156-4497-9aa9-ee8d0836b0ca',
         path='/ERC20.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='60de53c4-a567-4bb1-bcfe-cc91c9b26a47',
         path='/ERC20.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'import "./IERC20.sol";\n'
              'import "./IERC20Metadata.sol";\n'
              'import "./Context.sol";\n'
              'import "./SafeMath.sol";\n')

Fragment(uuid='7c3001f3-b9d1-4849-acd8-d1db255772ed',
         path='/ERC20.sol',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n/**')

Fragment(uuid='c701f4a7-8203-4d4d-8476-61bfff2d1d81',
         path='/ERC20.sol',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n * @dev Implementation of the {IERC20} interface.')

Fragment(uuid='acf55477-2a88-42ce-b657-9b4c40031167',
         path='/ERC20.sol',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n *')

Fragment(uuid='264b8a77-a0c4-429a-a1c3-e78b916e175f',
         path='/ERC20.sol',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * This implementation is agnostic to the way tokens are '
              'created. This means')

Fragment(uuid='9db92d73-bc7d-4951-a3c8-9bfa639bfe33',
         path='/ERC20.sol',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * that a supply mechanism has to be added in a derived '
              'contract using {_mint}.')

Fragment(uuid='d3ec4b58-fd22-48eb-b4f4-2fc63009273d',
         path='/ERC20.sol',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n * For a generic mechanism see {ERC20PresetMinterPauser}.')

Fragment(uuid='d44ac885-823c-4029-b3de-476182872f5f',
         path='/ERC20.sol',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n *')

Fragment(uuid='909870c3-4a9b-4e7f-89b2-dba199543b9d',
         path='/ERC20.sol',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n * TIP: For a detailed writeup see our guide')

Fragment(uuid='33fd9034-4e63-439c-b2d8-0db07331d226',
         path='/ERC20.sol',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * '
              'https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How')

Fragment(uuid='79428613-2133-4cd2-9641-b0b709aa3bef',
         path='/ERC20.sol',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n * to implement supply mechanisms].')

Fragment(uuid='6db606de-ad76-41bd-b13a-1801ce9fa536',
         path='/ERC20.sol',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n *')

Fragment(uuid='e797f844-fd53-4dfe-81a8-3af66bbbfd1a',
         path='/ERC20.sol',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * We have followed general OpenZeppelin guidelines: functions '
              'revert instead')

Fragment(uuid='0a1904e8-3a7a-41a9-9cbd-6b50674eb447',
         path='/ERC20.sol',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * of returning `false` on failure. This behavior is '
              'nonetheless conventional')

Fragment(uuid='e86acefa-9a1a-458a-96b2-13a935dd3833',
         path='/ERC20.sol',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * and does not conflict with the expectations of ERC20 '
              'applications.')

Fragment(uuid='62acb1e9-3eae-4033-ae7a-75664b6a4f60',
         path='/ERC20.sol',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n *')

Fragment(uuid='70518b9f-7ed8-475e-b942-375512276ee2',
         path='/ERC20.sol',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * Additionally, an {Approval} event is emitted on calls to '
              '{transferFrom}.')

Fragment(uuid='e5788ce6-f743-4cb4-b925-4c8820fc46fd',
         path='/ERC20.sol',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * This allows applications to reconstruct the allowance for '
              'all accounts just')

Fragment(uuid='a4af86e3-b720-4aa8-9d9e-7b1d1cd1e397',
         path='/ERC20.sol',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * by listening to said events. Other implementations of the '
              'EIP may not emit')

Fragment(uuid='d4c8b9eb-03c5-4c73-bf6c-dea8bff8bf49',
         path='/ERC20.sol',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text="\n * these events, as it isn't required by the specification.")

Fragment(uuid='3ceabbac-8af2-4bee-8c57-0d08f84d8c70',
         path='/ERC20.sol',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n *')

Fragment(uuid='38cd5624-e0e3-41a0-9f28-45b5a02a907c',
         path='/ERC20.sol',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * Finally, the non-standard {decreaseAllowance} and '
              '{increaseAllowance}')

Fragment(uuid='7a514b96-6224-49b0-b6a2-85805af0cce3',
         path='/ERC20.sol',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              ' * functions have been added to mitigate the well-known issues '
              'around setting')

Fragment(uuid='7cc50f41-6421-447b-9a96-849442f49b84',
         path='/ERC20.sol',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n * allowances. See {IERC20-approve}.')

Fragment(uuid='b9224c60-ceaa-4d2e-be12-a2d7c16f8769',
         path='/ERC20.sol',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n */')

Fragment(uuid='b3e3d3e0-42c0-4b86-a87d-909435698e2f',
         path='/ERC20.sol',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\ncontract ERC20 is Context, IERC20, IERC20Metadata {')

Fragment(uuid='7bc6b3ce-c8fa-4b5f-a742-83dd7846392b',
         path='/ERC20.sol',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    using SafeMath for uint256;')

Fragment(uuid='7141c198-6263-493e-85c0-55087d7d88f9',
         path='/ERC20.sol',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='46c909cf-4ee8-4865-8b9b-d81911af7a2a',
         path='/ERC20.sol',
         lineno=36,
         depth=1,
         type='documentation',
         name='',
         text='\n    mapping(address => uint256) private _balances;\n')

Fragment(uuid='b38c4afa-c03c-4425-83bd-63927e3cf744',
         path='/ERC20.sol',
         lineno=38,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    mapping(address => mapping(address => uint256)) private '
              '_allowances;\n')

Fragment(uuid='a6e3cac4-3b18-4ef0-b17b-d81985018565',
         path='/ERC20.sol',
         lineno=40,
         depth=1,
         type='documentation',
         name='',
         text='\n    uint256 private _totalSupply;\n')

Fragment(uuid='4cd5ac6e-4fd8-49a5-9811-569b93804ee2',
         path='/ERC20.sol',
         lineno=42,
         depth=1,
         type='documentation',
         name='',
         text='\n    string private _name;\n    string private _symbol;\n')

Fragment(uuid='daf2465c-3656-484e-ba19-f5c36b00dfd2',
         path='/ERC20.sol',
         lineno=45,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Sets the values for {name} and {symbol}.\n'
              '     *\n'
              '     * The default value of {decimals} is 18. To select a '
              'different value for\n'
              '     * {decimals} you should overload it.\n'
              '     *\n'
              '     * All two of these values are immutable: they can only be '
              'set once during\n'
              '     * construction.\n'
              '     */\n'
              '    constructor(string memory name_, string memory symbol_) '
              'public {\n'
              '        _name = name_;\n'
              '        _symbol = symbol_;\n'
              '    }\n')

Fragment(uuid='6bed23ab-fbee-48f9-8ce3-7178b330243a',
         path='/ERC20.sol',
         lineno=59,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the name of the token.\n'
              '     */\n'
              '    function name() public view virtual override returns '
              '(string memory) {\n'
              '        return _name;\n'
              '    }\n')

Fragment(uuid='b52800af-5b24-4f28-acbb-f4a3c50f982d',
         path='/ERC20.sol',
         lineno=66,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the symbol of the token, usually a shorter '
              'version of the\n'
              '     * name.\n'
              '     */\n'
              '    function symbol() public view virtual override returns '
              '(string memory) {\n'
              '        return _symbol;\n'
              '    }\n')

Fragment(uuid='ffea085d-0220-4f0d-a290-140b522bdea0',
         path='/ERC20.sol',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='e6326b7b-f317-41e5-ba4b-f2e9fdfc7401',
         path='/ERC20.sol',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Returns the number of decimals used to get its user '
              'representation.')

Fragment(uuid='465f87d2-cdb5-489c-b38c-cd97523b9323',
         path='/ERC20.sol',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * For example, if `decimals` equals `2`, a balance of '
              '`505` tokens should')

Fragment(uuid='ea81bce6-5805-4461-aca0-db9fbbeba39c',
         path='/ERC20.sol',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).')

Fragment(uuid='eaf43183-c0be-43a4-a809-5d72cad45220',
         path='/ERC20.sol',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='116d101b-ad4f-4cf1-811f-b37fcc61424a',
         path='/ERC20.sol',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Tokens usually opt for a value of 18, imitating the '
              'relationship between')

Fragment(uuid='4b262835-e2f1-4cfa-bbe5-2df28a738cc8',
         path='/ERC20.sol',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Ether and Wei. This is the value {ERC20} uses, unless '
              'this function is')

Fragment(uuid='1083fff5-9956-4f6c-b6d1-074fa2d9ba7e',
         path='/ERC20.sol',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n     * overridden;')

Fragment(uuid='9e9673c0-a610-480b-a28c-45402f902cbf',
         path='/ERC20.sol',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='4335e6e5-a7f0-47ae-b1e8-046705b1a16d',
         path='/ERC20.sol',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * NOTE: This information is only used for _display_ '
              'purposes: it in')

Fragment(uuid='d024041f-427e-464c-8d8d-89b102a181fd',
         path='/ERC20.sol',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * no way affects any of the arithmetic of the contract, '
              'including')

Fragment(uuid='1b4e6490-64e9-4c7a-8712-17ba9607ed73',
         path='/ERC20.sol',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n     * {IERC20-balanceOf} and {IERC20-transfer}.')

Fragment(uuid='beeec62f-89b3-40a5-8a1c-3780bc0415b0',
         path='/ERC20.sol',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='b0f2520f-3eff-4c24-8fb1-66f27ab1feef',
         path='/ERC20.sol',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function decimals() public view virtual override returns '
              '(uint8) {')

Fragment(uuid='12b13a8c-1b1c-4531-9b29-2428ab27e378',
         path='/ERC20.sol',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n        return 18;')

Fragment(uuid='caf33245-8d49-42cf-9caf-ad0c6ae2dbbf',
         path='/ERC20.sol',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='393330ad-cbc6-4442-b0aa-edbb847e6433',
         path='/ERC20.sol',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='290550d3-8834-4b3d-ae3c-44a43e7b6509',
         path='/ERC20.sol',
         lineno=91,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-totalSupply}.\n'
              '     */\n'
              '    function totalSupply() public view virtual override returns '
              '(uint256) {\n'
              '        return _totalSupply;\n'
              '    }\n')

Fragment(uuid='647ac7ca-430c-42c2-94b9-9c614b24ba21',
         path='/ERC20.sol',
         lineno=98,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-balanceOf}.\n'
              '     */\n'
              '    function balanceOf(address account) public view virtual '
              'override returns (uint256) {\n'
              '        return _balances[account];\n'
              '    }\n')

Fragment(uuid='53256eab-7b9a-4a5b-9ede-91b40fefff41',
         path='/ERC20.sol',
         lineno=105,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-transfer}.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `recipient` cannot be the zero address.\n'
              '     * - the caller must have a balance of at least `amount`.\n'
              '     */\n'
              '    function transfer(address recipient, uint256 amount) public '
              'virtual override returns (bool) {\n'
              '        _transfer(_msgSender(), recipient, amount);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='b063874b-fb91-4df8-b622-1969c567c625',
         path='/ERC20.sol',
         lineno=118,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-allowance}.\n'
              '     */\n'
              '    function allowance(address owner, address spender) public '
              'view virtual override returns (uint256) {\n'
              '        return _allowances[owner][spender];\n'
              '    }\n')

Fragment(uuid='bd447c3f-0e6e-44db-8e1a-1880308648d7',
         path='/ERC20.sol',
         lineno=125,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-approve}.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `spender` cannot be the zero address.\n'
              '     */\n'
              '    function approve(address spender, uint256 amount) public '
              'virtual override returns (bool) {\n'
              '        _approve(_msgSender(), spender, amount);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='2f8eb5f7-e255-4db7-87c4-3dd6de14b350',
         path='/ERC20.sol',
         lineno=137,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='a493a2f6-487f-4757-ad6f-cd190468ccfc',
         path='/ERC20.sol',
         lineno=138,
         depth=2,
         type='documentation',
         name='',
         text='\n     * @dev See {IERC20-transferFrom}.')

Fragment(uuid='d26b62fe-fffd-4995-934f-ee73a812f89c',
         path='/ERC20.sol',
         lineno=139,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='7ecc89b5-63ca-496e-9739-8fff4365288a',
         path='/ERC20.sol',
         lineno=140,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance. This is not')

Fragment(uuid='72d02c85-18f9-4266-869f-d0864c353347',
         path='/ERC20.sol',
         lineno=141,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * required by the EIP. See the note at the beginning of '
              '{ERC20}.')

Fragment(uuid='ad0186d9-bebe-4f7b-9bdd-78384bb757e5',
         path='/ERC20.sol',
         lineno=142,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='4ba1ab02-6e58-4c47-8ac8-59704262c658',
         path='/ERC20.sol',
         lineno=143,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='d2529a31-5a5a-4009-99db-bc56c135c36b',
         path='/ERC20.sol',
         lineno=144,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='43b0db55-0bec-4766-a977-3966c6a4e44f',
         path='/ERC20.sol',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` and `recipient` cannot be the zero address.')

Fragment(uuid='912c17c2-e937-491f-a7f7-2ac82ece171d',
         path='/ERC20.sol',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` must have a balance of at least `amount`.')

Fragment(uuid='0920418a-2f1d-4150-bc45-9ad770c548d9',
         path='/ERC20.sol',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * - the caller must have allowance for ``sender``'s tokens "
              'of at least')

Fragment(uuid='012c9b57-9cba-4927-b44e-50b72db858d5',
         path='/ERC20.sol',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\n     * `amount`.')

Fragment(uuid='a162d0bd-0bf0-42dc-92e1-641a419ba590',
         path='/ERC20.sol',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='8df34c32-5efe-4e8e-959c-25ef87b40bd2',
         path='/ERC20.sol',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n    function transferFrom(')

Fragment(uuid='690ffa44-ca1f-4b56-89a9-781a575047d1',
         path='/ERC20.sol',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\n        address sender,')

Fragment(uuid='5fca9311-20c6-43eb-9904-7fa4283081f6',
         path='/ERC20.sol',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n        address recipient,')

Fragment(uuid='f8feacab-9ef4-4c6f-8937-96bb64c8dda1',
         path='/ERC20.sol',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='c6614afe-a727-4bbe-9f5f-50b6e471973b',
         path='/ERC20.sol',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) public virtual override returns (bool) {')

Fragment(uuid='d7d94b08-0f45-46ca-b6f9-e2f852f7fba1',
         path='/ERC20.sol',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n        _transfer(sender, recipient, amount);')

Fragment(uuid='6ce38506-1ccb-455f-91af-74648ed2af29',
         path='/ERC20.sol',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        _approve(sender, _msgSender(), '
              '_allowances[sender][_msgSender()].sub(amount, "ERC20: transfer '
              'amount exceeds allowance"));')

Fragment(uuid='4416e6f1-d90c-4baa-b124-51934ad3be92',
         path='/ERC20.sol',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n        return true;')

Fragment(uuid='d65f649a-b9d1-418f-9396-1ba7678f3a04',
         path='/ERC20.sol',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='4906db1d-1678-4196-9c43-77da8b2dfa89',
         path='/ERC20.sol',
         lineno=159,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='b6c8764d-d6f6-467f-8845-16ac5b80593d',
         path='/ERC20.sol',
         lineno=160,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Atomically increases the allowance granted to '
              '`spender` by the caller.\n'
              '     *\n'
              '     * This is an alternative to {approve} that can be used as '
              'a mitigation for\n'
              '     * problems described in {IERC20-approve}.\n'
              '     *\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `spender` cannot be the zero address.\n'
              '     */\n'
              '    function increaseAllowance(address spender, uint256 '
              'addedValue) public virtual returns (bool) {\n'
              '        _approve(_msgSender(), spender, '
              '_allowances[_msgSender()][spender].add(addedValue));\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='0a824358-60bb-4d56-82d4-a1a6fc9ebae8',
         path='/ERC20.sol',
         lineno=177,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='df9b3830-a5d9-49bd-ad99-3d06415ed47a',
         path='/ERC20.sol',
         lineno=178,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Atomically decreases the allowance granted to '
              '`spender` by the caller.')

Fragment(uuid='3f6632c4-4f58-4ffd-a78f-fcce9f9dd89d',
         path='/ERC20.sol',
         lineno=179,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='c5f280ca-dca7-489c-96e8-f2a6b0f69ba8',
         path='/ERC20.sol',
         lineno=180,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This is an alternative to {approve} that can be used as '
              'a mitigation for')

Fragment(uuid='0d0dfc33-4523-4859-a24b-132bd64b49e0',
         path='/ERC20.sol',
         lineno=181,
         depth=2,
         type='documentation',
         name='',
         text='\n     * problems described in {IERC20-approve}.')

Fragment(uuid='8f85d68a-c6bc-4855-93b3-2f04c0818e72',
         path='/ERC20.sol',
         lineno=182,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='90eae941-0003-497c-8ed6-bb6126c72d65',
         path='/ERC20.sol',
         lineno=183,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance.')

Fragment(uuid='46cd0199-c30c-42f8-8b02-cc29556bd348',
         path='/ERC20.sol',
         lineno=184,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='68be14a9-1f66-4723-a8cf-2da9a97cf184',
         path='/ERC20.sol',
         lineno=185,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='daa129b7-0358-48f0-806e-6aba5b08e74d',
         path='/ERC20.sol',
         lineno=186,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='8b7f1645-10cd-499b-819b-df74285687e2',
         path='/ERC20.sol',
         lineno=187,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `spender` cannot be the zero address.')

Fragment(uuid='59be82fe-adad-44b0-aa29-598a6ff81c4e',
         path='/ERC20.sol',
         lineno=188,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - `spender` must have allowance for the caller of at '
              'least')

Fragment(uuid='f8131b15-8f08-40ea-bcbf-76316b03e008',
         path='/ERC20.sol',
         lineno=189,
         depth=2,
         type='documentation',
         name='',
         text='\n     * `subtractedValue`.')

Fragment(uuid='be160e7b-b778-42ee-ad8d-5d42e90fca3f',
         path='/ERC20.sol',
         lineno=190,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='4ca069d3-55b6-42d5-9d69-c938e7d7b53b',
         path='/ERC20.sol',
         lineno=191,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function decreaseAllowance(address spender, uint256 '
              'subtractedValue) public virtual returns (bool) {')

Fragment(uuid='e4892d6d-e2bb-49ef-a94c-670600a671fe',
         path='/ERC20.sol',
         lineno=192,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        _approve(_msgSender(), spender, '
              '_allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: '
              'decreased allowance below zero"));')

Fragment(uuid='abdb1e53-a622-4c83-b096-1a761201f44e',
         path='/ERC20.sol',
         lineno=193,
         depth=2,
         type='documentation',
         name='',
         text='\n        return true;')

Fragment(uuid='20344387-7470-4250-97f0-798cf9c1754e',
         path='/ERC20.sol',
         lineno=194,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='591a7596-2478-40f0-a49c-f685fb1ccd9c',
         path='/ERC20.sol',
         lineno=195,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='3ddb66b3-bd47-4403-b118-665e3999de15',
         path='/ERC20.sol',
         lineno=196,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='ab2ba5f6-0cbb-4991-86e2-48eeb5cb6f59',
         path='/ERC20.sol',
         lineno=197,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Moves tokens `amount` from `sender` to `recipient`.')

Fragment(uuid='532cfd7b-7dc1-42cf-baec-4dd07cfa73cc',
         path='/ERC20.sol',
         lineno=198,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='c310bf3f-321a-4261-924d-9400ed41709e',
         path='/ERC20.sol',
         lineno=199,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This is internal function is equivalent to {transfer}, '
              'and can be used to')

Fragment(uuid='74fcbdd4-72b0-4378-a388-a9189af9a32f',
         path='/ERC20.sol',
         lineno=200,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * e.g. implement automatic token fees, slashing '
              'mechanisms, etc.')

Fragment(uuid='589ef4cb-01e2-4ede-8a42-3a5eedd38e26',
         path='/ERC20.sol',
         lineno=201,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='6ef01343-20a4-4d10-844e-0342c45df82e',
         path='/ERC20.sol',
         lineno=202,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits a {Transfer} event.')

Fragment(uuid='0085c525-8503-47dc-b7cc-c87a6fd1ecdf',
         path='/ERC20.sol',
         lineno=203,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='437a3556-1e35-4c05-8786-9cc7022e2323',
         path='/ERC20.sol',
         lineno=204,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='7c740809-7e3b-4c4a-ae82-3e86493916ad',
         path='/ERC20.sol',
         lineno=205,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='9e7c9958-83ed-4f69-9ae7-121eb5d84395',
         path='/ERC20.sol',
         lineno=206,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` cannot be the zero address.')

Fragment(uuid='e26a83e2-a607-4111-b7ce-0e5e23135c4c',
         path='/ERC20.sol',
         lineno=207,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `recipient` cannot be the zero address.')

Fragment(uuid='dcc190e7-7465-435a-98c4-a7ab1cf6022b',
         path='/ERC20.sol',
         lineno=208,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` must have a balance of at least `amount`.')

Fragment(uuid='76746a70-00ee-4087-aeea-ffe3947ea4d9',
         path='/ERC20.sol',
         lineno=209,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='21616f89-1ce4-411b-86db-ed9011c6e778',
         path='/ERC20.sol',
         lineno=210,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _transfer(')

Fragment(uuid='00eef445-68ad-439e-88a3-c6ff2f6a5349',
         path='/ERC20.sol',
         lineno=211,
         depth=2,
         type='documentation',
         name='',
         text='\n        address sender,')

Fragment(uuid='db8184c7-b321-4df0-bde8-896a2819a361',
         path='/ERC20.sol',
         lineno=212,
         depth=2,
         type='documentation',
         name='',
         text='\n        address recipient,')

Fragment(uuid='1ce55882-f129-4a33-99cb-36332eeb11aa',
         path='/ERC20.sol',
         lineno=213,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='06e2a838-6d38-40a0-875a-c1769c6481e0',
         path='/ERC20.sol',
         lineno=214,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {')

Fragment(uuid='c175a17e-6ee2-41a1-ac26-4e0eeea01307',
         path='/ERC20.sol',
         lineno=215,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(sender != address(0), "ERC20: transfer from the '
              'zero address");')

Fragment(uuid='a80db249-27dc-41c9-abbb-5e5507577355',
         path='/ERC20.sol',
         lineno=216,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(recipient != address(0), "ERC20: transfer to '
              'the zero address");')

Fragment(uuid='8bf94d32-0a9f-444b-b7af-7d75f59b7e3f',
         path='/ERC20.sol',
         lineno=217,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='0237ced9-cc9b-4fec-9e30-7d7f91af1443',
         path='/ERC20.sol',
         lineno=218,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(sender, recipient, amount);\n')

Fragment(uuid='87e5fb85-613a-44c7-ab8e-b41cf194a2c7',
         path='/ERC20.sol',
         lineno=220,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _balances[sender] = _balances[sender].sub(amount, '
              '"ERC20: transfer amount exceeds balance");\n'
              '        _balances[recipient] = '
              '_balances[recipient].add(amount);\n'
              '        emit Transfer(sender, recipient, amount);\n'
              '    }\n')

Fragment(uuid='00da551e-af85-4273-a69a-f0c1a23bc243',
         path='/ERC20.sol',
         lineno=225,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /** @dev Creates `amount` tokens and assigns them to '
              '`account`, increasing\n'
              '     * the total supply.\n'
              '     *\n'
              '     * Emits a {Transfer} event with `from` set to the zero '
              'address.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `account` cannot be the zero address.\n'
              '     */\n'
              '    function _mint(address account, uint256 amount) internal '
              'virtual {\n'
              '        require(account != address(0), "ERC20: mint to the zero '
              'address");\n')

Fragment(uuid='82bbc8d2-6b1e-424d-999b-4188095d7cc1',
         path='/ERC20.sol',
         lineno=237,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(address(0), account, amount);\n')

Fragment(uuid='f0b4c03d-fd82-4f50-92c1-c442eb52d21d',
         path='/ERC20.sol',
         lineno=239,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _totalSupply = _totalSupply.add(amount);\n'
              '        _balances[account] = _balances[account].add(amount);\n'
              '        emit Transfer(address(0), account, amount);\n'
              '    }\n')

Fragment(uuid='15f44d66-5bb0-4360-9e14-3a290f072cfa',
         path='/ERC20.sol',
         lineno=244,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Destroys `amount` tokens from `account`, reducing '
              'the\n'
              '     * total supply.\n'
              '     *\n'
              '     * Emits a {Transfer} event with `to` set to the zero '
              'address.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `account` cannot be the zero address.\n'
              '     * - `account` must have at least `amount` tokens.\n'
              '     */\n'
              '    function _burn(address account, uint256 amount) internal '
              'virtual {\n'
              '        require(account != address(0), "ERC20: burn from the '
              'zero address");\n')

Fragment(uuid='c5e280d5-6ff7-4787-8e44-0b0dda2488a0',
         path='/ERC20.sol',
         lineno=258,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(account, address(0), amount);\n')

Fragment(uuid='2baff394-78fd-4271-9a7c-5fdd20a2d68a',
         path='/ERC20.sol',
         lineno=260,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _balances[account] = _balances[account].sub(amount, '
              '"ERC20: burn amount exceeds balance");\n'
              '        _totalSupply = _totalSupply.sub(amount);\n'
              '        emit Transfer(account, address(0), amount);\n'
              '    }\n')

Fragment(uuid='20842baa-d2f7-4f2e-ae71-df131b80fd4e',
         path='/ERC20.sol',
         lineno=265,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='dab24c90-45f8-4d06-93d2-d4a7607f9056',
         path='/ERC20.sol',
         lineno=266,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Sets `amount` as the allowance of `spender` over '
              'the `owner` s tokens.')

Fragment(uuid='535ea70b-2950-4fd1-89b8-a42fb8d01470',
         path='/ERC20.sol',
         lineno=267,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='43175237-5fc3-4fe1-9051-8d60829b770d',
         path='/ERC20.sol',
         lineno=268,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This internal function is equivalent to `approve`, and '
              'can be used to')

Fragment(uuid='a800e59c-e7b0-4eaa-af72-755d89126685',
         path='/ERC20.sol',
         lineno=269,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * e.g. set automatic allowances for certain subsystems, '
              'etc.')

Fragment(uuid='c8ca46ae-6187-49e9-869b-bb746a4d2449',
         path='/ERC20.sol',
         lineno=270,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='acdaaaec-1a25-4f2e-9ed1-a229f10c4910',
         path='/ERC20.sol',
         lineno=271,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits an {Approval} event.')

Fragment(uuid='bdeea6e4-a37f-498e-ba7d-f5a2fc4364a4',
         path='/ERC20.sol',
         lineno=272,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='3515aefc-e4d4-4bed-8f14-c8cf24712f2b',
         path='/ERC20.sol',
         lineno=273,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='70ab4dfd-328b-4f8e-aaf5-f975c48ab1f4',
         path='/ERC20.sol',
         lineno=274,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='7dae2182-6726-469f-b46b-b19d6b1e35b5',
         path='/ERC20.sol',
         lineno=275,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `owner` cannot be the zero address.')

Fragment(uuid='52dc3f95-5bf5-4402-b627-70afffedcc52',
         path='/ERC20.sol',
         lineno=276,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `spender` cannot be the zero address.')

Fragment(uuid='938dc331-9175-4bf1-9a78-810ebd154449',
         path='/ERC20.sol',
         lineno=277,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='ea422d58-03bb-45f7-b5f0-9263b2150676',
         path='/ERC20.sol',
         lineno=278,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _approve(')

Fragment(uuid='703d1bc7-196c-4c29-bfef-263afb905022',
         path='/ERC20.sol',
         lineno=279,
         depth=2,
         type='documentation',
         name='',
         text='\n        address owner,')

Fragment(uuid='cdaa8ce7-2fe2-4489-9374-abc5517170cd',
         path='/ERC20.sol',
         lineno=280,
         depth=2,
         type='documentation',
         name='',
         text='\n        address spender,')

Fragment(uuid='ee26926a-c9f8-4370-b714-52dd2bad2aea',
         path='/ERC20.sol',
         lineno=281,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='27745a18-e6eb-409a-9727-446dd805a799',
         path='/ERC20.sol',
         lineno=282,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {')

Fragment(uuid='8ba5c0d6-a0df-48a0-8c73-289c7c103e9d',
         path='/ERC20.sol',
         lineno=283,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(owner != address(0), "ERC20: approve from the '
              'zero address");')

Fragment(uuid='7e5f8f2d-1e85-4dd5-9e48-8e120b8a57be',
         path='/ERC20.sol',
         lineno=284,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(spender != address(0), "ERC20: approve to the '
              'zero address");')

Fragment(uuid='ff1abb48-b258-459f-8a95-ad27d901f75d',
         path='/ERC20.sol',
         lineno=285,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='db9fe6c3-72e9-47c1-aa5b-4b8d5f9ac6b3',
         path='/ERC20.sol',
         lineno=286,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _allowances[owner][spender] = amount;\n'
              '        emit Approval(owner, spender, amount);\n'
              '    }\n')

Fragment(uuid='a08494da-cdb6-49b5-939d-4d6ebe20cd68',
         path='/ERC20.sol',
         lineno=290,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='ec9f1c06-7188-48c2-b5f0-fb7b838eefe5',
         path='/ERC20.sol',
         lineno=291,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Hook that is called before any transfer of tokens. '
              'This includes')

Fragment(uuid='08b25f1c-e3d3-4818-90d6-6e3e0e050091',
         path='/ERC20.sol',
         lineno=292,
         depth=2,
         type='documentation',
         name='',
         text='\n     * minting and burning.')

Fragment(uuid='47456b02-20c5-4ac1-982a-bbfca11286a6',
         path='/ERC20.sol',
         lineno=293,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='0fce4920-55e5-4024-bab3-e5dd01a92d77',
         path='/ERC20.sol',
         lineno=294,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Calling conditions:')

Fragment(uuid='6c95aba4-605e-4340-9bc4-6e5992475f4e',
         path='/ERC20.sol',
         lineno=295,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='367aa1d9-2da3-497b-a13e-5a93bc325619',
         path='/ERC20.sol',
         lineno=296,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` and `to` are both non-zero, `amount` of '
              "``from``'s tokens")

Fragment(uuid='834f4956-daea-4469-ab5e-8352392ee059',
         path='/ERC20.sol',
         lineno=297,
         depth=2,
         type='documentation',
         name='',
         text='\n     * will be to transferred to `to`.')

Fragment(uuid='9dfab51b-8dfa-448a-8084-e66339acbd90',
         path='/ERC20.sol',
         lineno=298,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` is zero, `amount` tokens will be minted '
              'for `to`.')

Fragment(uuid='9e90e1c6-c452-4aea-b7f3-64707a10b988',
         path='/ERC20.sol',
         lineno=299,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * - when `to` is zero, `amount` of ``from``'s tokens will "
              'be burned.')

Fragment(uuid='ec710ab1-2274-4476-9c99-65662294327e',
         path='/ERC20.sol',
         lineno=300,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `from` and `to` are never both zero.')

Fragment(uuid='a49793f1-95f4-477d-b633-41e24d39b213',
         path='/ERC20.sol',
         lineno=301,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='697e043c-4f22-461e-9f9e-ac748fccc1b9',
         path='/ERC20.sol',
         lineno=302,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * To learn more about hooks, head to '
              'xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].')

Fragment(uuid='fc532a7d-882a-4928-92ce-2bcff48846df',
         path='/ERC20.sol',
         lineno=303,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='2b010071-8efc-4005-aa07-c349e67cb8b9',
         path='/ERC20.sol',
         lineno=304,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _beforeTokenTransfer(')

Fragment(uuid='454a1466-d396-4b5b-82d3-149630f6d007',
         path='/ERC20.sol',
         lineno=305,
         depth=2,
         type='documentation',
         name='',
         text='\n        address from,')

Fragment(uuid='ec17f7cf-8873-410d-b039-a6fa36574cb3',
         path='/ERC20.sol',
         lineno=306,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='3858f6c9-2b01-4e58-993a-53f242e3af89',
         path='/ERC20.sol',
         lineno=307,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='08b22757-3070-4928-98e3-197fef7eff05',
         path='/ERC20.sol',
         lineno=308,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {}')

Fragment(uuid='307f9eb4-6f7b-4a4a-a737-649056579c5d',
         path='/ERC20.sol',
         lineno=309,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='d93200df-e637-4871-87c7-36f058f38d17',
         path='/ERC20Upgradeable.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='fae412a7-13c8-479f-b679-b22a902ce1ba',
         path='/ERC20Upgradeable.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /ERC20Upgradeable.sol\n')

Fragment(uuid='d7c62549-cf22-4f39-9446-5c28b88e9ea3',
         path='/ERC20Upgradeable.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\nimport "./Context.sol";\n')

Fragment(uuid='7fb85bc4-1a02-4db0-b6a8-8b4f551c5be0',
         path='/ERC20Upgradeable.sol',
         lineno=5,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'interface IERC20Upgradeable {\n'
              '    /**\n'
              '     * @dev Returns the amount of tokens in existence.\n'
              '     */\n'
              '    function totalSupply() external view returns (uint256);\n')

Fragment(uuid='9faba274-9518-4910-8e25-c0df6f7f55ec',
         path='/ERC20Upgradeable.sol',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the amount of tokens owned by `account`.\n'
              '     */\n'
              '    function balanceOf(address account) external view returns '
              '(uint256);\n')

Fragment(uuid='b078b0e9-b153-4fbd-86c0-273416c5a4a7',
         path='/ERC20Upgradeable.sol',
         lineno=16,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              "     * @dev Moves `amount` tokens from the caller's account to "
              '`recipient`.\n'
              '     *\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.\n'
              '     *\n'
              '     * Emits a {Transfer} event.\n'
              '     */\n'
              '    function transfer(address recipient, uint256 amount) '
              'external returns (bool);\n')

Fragment(uuid='de01de4b-c8b0-4277-b42e-81ef78f843dd',
         path='/ERC20Upgradeable.sol',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the remaining number of tokens that '
              '`spender` will be\n'
              '     * allowed to spend on behalf of `owner` through '
              '{transferFrom}. This is\n'
              '     * zero by default.\n'
              '     *\n'
              '     * This value changes when {approve} or {transferFrom} are '
              'called.\n'
              '     */\n'
              '    function allowance(address owner, address spender) external '
              'view returns (uint256);\n')

Fragment(uuid='800d3d85-4d56-4dce-9a6b-63835c015842',
         path='/ERC20Upgradeable.sol',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='e9666853-2c61-4f06-9ec8-7bafed0fd555',
         path='/ERC20Upgradeable.sol',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Sets `amount` as the allowance of `spender` over '
              "the caller's tokens.")

Fragment(uuid='6271a371-a854-4837-aab2-40f7b045790e',
         path='/ERC20Upgradeable.sol',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='687295ff-9489-4700-9cbf-6f4d22843e96',
         path='/ERC20Upgradeable.sol',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.')

Fragment(uuid='d275eb4a-aed5-40d4-925e-a95913f9f565',
         path='/ERC20Upgradeable.sol',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='8a3481e6-5b92-4468-b712-ac84d4552f1d',
         path='/ERC20Upgradeable.sol',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * IMPORTANT: Beware that changing an allowance with this '
              'method brings the risk')

Fragment(uuid='7a2e8696-ab2d-4cd2-afc3-946f49b130f7',
         path='/ERC20Upgradeable.sol',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * that someone may use both the old and the new allowance '
              'by unfortunate')

Fragment(uuid='27070bbb-3a11-48c1-8cb3-46b8b80ca30f',
         path='/ERC20Upgradeable.sol',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * transaction ordering. One possible solution to mitigate '
              'this race')

Fragment(uuid='0ae16f69-2d5a-4cf5-97da-1bb556395621',
         path='/ERC20Upgradeable.sol',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * condition is to first reduce the spender's allowance to "
              '0 and set the')

Fragment(uuid='c8927407-d6a9-479d-9b3e-627a729cdd60',
         path='/ERC20Upgradeable.sol',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n     * desired value afterwards:')

Fragment(uuid='cf14eb00-ecf9-4bad-927b-0238cdea9982',
         path='/ERC20Upgradeable.sol',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * '
              'https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729')

Fragment(uuid='49cf9ca8-7793-475b-8807-fc922574d22f',
         path='/ERC20Upgradeable.sol',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='ea919058-7196-45cf-8f37-d2ba192cb898',
         path='/ERC20Upgradeable.sol',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits an {Approval} event.')

Fragment(uuid='928ca3c8-35b9-4f4f-afa9-44cae5220c0d',
         path='/ERC20Upgradeable.sol',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='f3dfb59d-c86c-402c-8a6c-ba7bc3f601e5',
         path='/ERC20Upgradeable.sol',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function approve(address spender, uint256 amount) external '
              'returns (bool);')

Fragment(uuid='898dbe40-12f0-4f34-b67e-2c461e966b45',
         path='/ERC20Upgradeable.sol',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='24bc7c58-c47a-40cd-8d61-36974f757c1f',
         path='/ERC20Upgradeable.sol',
         lineno=50,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Moves `amount` tokens from `sender` to `recipient` '
              'using the\n'
              '     * allowance mechanism. `amount` is then deducted from the '
              "caller's\n"
              '     * allowance.\n'
              '     *\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.\n'
              '     *\n'
              '     * Emits a {Transfer} event.\n'
              '     */\n'
              '    function transferFrom(\n'
              '        address sender,\n'
              '        address recipient,\n'
              '        uint256 amount\n'
              '    ) external returns (bool);\n')

Fragment(uuid='92847920-d54e-4e70-be55-960804e8a844',
         path='/ERC20Upgradeable.sol',
         lineno=65,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Emitted when `value` tokens are moved from one '
              'account (`from`) to\n'
              '     * another (`to`).\n'
              '     *\n'
              '     * Note that `value` may be zero.\n'
              '     */\n'
              '    event Transfer(address indexed from, address indexed to, '
              'uint256 value);\n')

Fragment(uuid='f5f3aca9-9cf0-4cbf-a26b-414d636e42ea',
         path='/ERC20Upgradeable.sol',
         lineno=73,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Emitted when the allowance of a `spender` for an '
              '`owner` is set by\n'
              '     * a call to {approve}. `value` is the new allowance.\n'
              '     */\n'
              '    event Approval(address indexed owner, address indexed '
              'spender, uint256 value);\n'
              '}\n')

Fragment(uuid='ab3ed46a-e532-4315-b535-b329315e6ad8',
         path='/ERC20Upgradeable.sol',
         lineno=80,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'interface IERC20MetadataUpgradeable is IERC20Upgradeable {\n'
              '    /**\n'
              '     * @dev Returns the name of the token.\n'
              '     */\n'
              '    function name() external view returns (string memory);\n')

Fragment(uuid='d64f16e7-bf87-4b8a-b485-fc9dfda7c2d7',
         path='/ERC20Upgradeable.sol',
         lineno=86,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the symbol of the token.\n'
              '     */\n'
              '    function symbol() external view returns (string memory);\n')

Fragment(uuid='404cd455-f331-42d3-a145-e6759248a802',
         path='/ERC20Upgradeable.sol',
         lineno=91,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the decimals places of the token.\n'
              '     */\n'
              '    function decimals() external view returns (uint8);\n'
              '}\n'
              '\n')

Fragment(uuid='655ef8c2-95a1-4011-bf9d-30c3a91249ad',
         path='/ERC20Upgradeable.sol',
         lineno=98,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'contract ERC20Upgradeable is Initializable, ContextUpgradeable, '
              'IERC20Upgradeable, IERC20MetadataUpgradeable {\n'
              '    mapping(address => uint256) private _balances;\n')

Fragment(uuid='a8003f2a-a9c8-4def-8e3e-fdb2aecda291',
         path='/ERC20Upgradeable.sol',
         lineno=101,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    mapping(address => mapping(address => uint256)) private '
              '_allowances;\n')

Fragment(uuid='33107af1-3ea5-454b-ba94-7694c3ac0968',
         path='/ERC20Upgradeable.sol',
         lineno=103,
         depth=1,
         type='documentation',
         name='',
         text='\n    uint256 private _totalSupply;\n')

Fragment(uuid='b478ca0e-9de8-4e00-9b83-906555aced8c',
         path='/ERC20Upgradeable.sol',
         lineno=105,
         depth=1,
         type='documentation',
         name='',
         text='\n    string private _name;\n    string private _symbol;\n')

Fragment(uuid='d96da796-3e7d-440e-b484-c52d5a22b2fe',
         path='/ERC20Upgradeable.sol',
         lineno=108,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Sets the values for {name} and {symbol}.\n'
              '     *\n'
              '     * The default value of {decimals} is 18. To select a '
              'different value for\n'
              '     * {decimals} you should overload it.\n'
              '     *\n'
              '     * All two of these values are immutable: they can only be '
              'set once during\n'
              '     * construction.\n'
              '     */\n'
              '    function __ERC20_init(string memory name_, string memory '
              'symbol_) internal initializer {\n'
              '        __Context_init_unchained();\n'
              '        __ERC20_init_unchained(name_, symbol_);\n'
              '    }\n')

Fragment(uuid='d51a4ffe-71ca-42e5-9c61-528686cbcd59',
         path='/ERC20Upgradeable.sol',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function __ERC20_init_unchained(string memory name_, string '
              'memory symbol_) internal initializer {\n'
              '        _name = name_;\n'
              '        _symbol = symbol_;\n'
              '    }\n')

Fragment(uuid='503a0507-f87a-4781-a728-6edecf91b2d1',
         path='/ERC20Upgradeable.sol',
         lineno=127,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the name of the token.\n'
              '     */\n'
              '    function name() public view virtual override returns '
              '(string memory) {\n'
              '        return _name;\n'
              '    }\n')

Fragment(uuid='3956f9f1-9789-453f-a430-3a640beb1a5b',
         path='/ERC20Upgradeable.sol',
         lineno=134,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the symbol of the token, usually a shorter '
              'version of the\n'
              '     * name.\n'
              '     */\n'
              '    function symbol() public view virtual override returns '
              '(string memory) {\n'
              '        return _symbol;\n'
              '    }\n')

Fragment(uuid='147dc960-33e0-4a31-ab8f-c2f673d0cde3',
         path='/ERC20Upgradeable.sol',
         lineno=142,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='eb76c9c7-d88b-430d-b397-1663f7e984ca',
         path='/ERC20Upgradeable.sol',
         lineno=143,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Returns the number of decimals used to get its user '
              'representation.')

Fragment(uuid='5ea4227e-87b8-466b-8c31-ebea1d86fdae',
         path='/ERC20Upgradeable.sol',
         lineno=144,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * For example, if `decimals` equals `2`, a balance of '
              '`505` tokens should')

Fragment(uuid='8d77342d-7495-4d29-86b2-27fa52af40ad',
         path='/ERC20Upgradeable.sol',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).')

Fragment(uuid='a921cde0-1a50-4ecd-b11a-0de61e6aeaf6',
         path='/ERC20Upgradeable.sol',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='b0c6804a-7317-427b-82a8-1df51ac6ba00',
         path='/ERC20Upgradeable.sol',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Tokens usually opt for a value of 18, imitating the '
              'relationship between')

Fragment(uuid='1b8b319f-fe62-49de-b4d7-a7a59aa85b5d',
         path='/ERC20Upgradeable.sol',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Ether and Wei. This is the value {ERC20} uses, unless '
              'this function is')

Fragment(uuid='0b2ee909-1852-45bc-af0d-d665ba33462a',
         path='/ERC20Upgradeable.sol',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n     * overridden;')

Fragment(uuid='2e36e6ce-ed28-48be-8cf2-b24981127bf8',
         path='/ERC20Upgradeable.sol',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='b5f8c9ae-21b5-40ed-a9bf-57c0d59d28dd',
         path='/ERC20Upgradeable.sol',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * NOTE: This information is only used for _display_ '
              'purposes: it in')

Fragment(uuid='3c80c9b5-824f-4238-bf76-b1ca0a1a5104',
         path='/ERC20Upgradeable.sol',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * no way affects any of the arithmetic of the contract, '
              'including')

Fragment(uuid='ff24e747-1d03-429d-a2dd-8c84b3c0166b',
         path='/ERC20Upgradeable.sol',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n     * {IERC20-balanceOf} and {IERC20-transfer}.')

Fragment(uuid='bb5582c9-812d-4fbb-b562-defd7047b986',
         path='/ERC20Upgradeable.sol',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='3b439639-b947-47e4-84ea-34174b8f5a29',
         path='/ERC20Upgradeable.sol',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function decimals() public view virtual override returns '
              '(uint8) {')

Fragment(uuid='8e33f55b-a702-4577-b715-1cb1dbd28f63',
         path='/ERC20Upgradeable.sol',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n        return 18;')

Fragment(uuid='ae97cbae-48df-4c7f-9ed3-610771873bb1',
         path='/ERC20Upgradeable.sol',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='d66f3c0c-b700-4f11-ac2c-4fda5f7e0a10',
         path='/ERC20Upgradeable.sol',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='7f0c5502-c753-4cd0-8389-bfa33ff25562',
         path='/ERC20Upgradeable.sol',
         lineno=159,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-totalSupply}.\n'
              '     */\n'
              '    function totalSupply() public view virtual override returns '
              '(uint256) {\n'
              '        return _totalSupply;\n'
              '    }\n')

Fragment(uuid='a618fe46-60f7-446c-96b1-2d9408b23736',
         path='/ERC20Upgradeable.sol',
         lineno=166,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-balanceOf}.\n'
              '     */\n'
              '    function balanceOf(address account) public view virtual '
              'override returns (uint256) {\n'
              '        return _balances[account];\n'
              '    }\n')

Fragment(uuid='bf814c6d-52e2-4c31-a738-f4617f7ec63e',
         path='/ERC20Upgradeable.sol',
         lineno=173,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-transfer}.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `recipient` cannot be the zero address.\n'
              '     * - the caller must have a balance of at least `amount`.\n'
              '     */\n'
              '    function transfer(address recipient, uint256 amount) public '
              'virtual override returns (bool) {\n'
              '        _transfer(_msgSender(), recipient, amount);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='4a74affc-d1fe-43e7-bd80-1b9dc5e9ae78',
         path='/ERC20Upgradeable.sol',
         lineno=186,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-allowance}.\n'
              '     */\n'
              '    function allowance(address owner, address spender) public '
              'view virtual override returns (uint256) {\n'
              '        return _allowances[owner][spender];\n'
              '    }\n')

Fragment(uuid='436ed1eb-2d44-4ef3-a427-38819a34fdde',
         path='/ERC20Upgradeable.sol',
         lineno=193,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev See {IERC20-approve}.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `spender` cannot be the zero address.\n'
              '     */\n'
              '    function approve(address spender, uint256 amount) public '
              'virtual override returns (bool) {\n'
              '        _approve(_msgSender(), spender, amount);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='833993cb-0719-45ba-93b8-1347941212ef',
         path='/ERC20Upgradeable.sol',
         lineno=205,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='d3f29e5d-fd50-43e1-ad36-79230b925433',
         path='/ERC20Upgradeable.sol',
         lineno=206,
         depth=2,
         type='documentation',
         name='',
         text='\n     * @dev See {IERC20-transferFrom}.')

Fragment(uuid='e9272206-92ab-40dd-9720-4827a3863b2f',
         path='/ERC20Upgradeable.sol',
         lineno=207,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='caa70c7a-f15c-4e44-9439-58502347ba1e',
         path='/ERC20Upgradeable.sol',
         lineno=208,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance. This is not')

Fragment(uuid='e60d87e9-42f7-4361-a882-253845b80003',
         path='/ERC20Upgradeable.sol',
         lineno=209,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * required by the EIP. See the note at the beginning of '
              '{ERC20}.')

Fragment(uuid='704370f0-ca5f-48a9-a511-9ec3e5825cbc',
         path='/ERC20Upgradeable.sol',
         lineno=210,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='bfc58825-ba18-4fe6-bdc0-20c924dd6a96',
         path='/ERC20Upgradeable.sol',
         lineno=211,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='a43700ba-b8f9-45d1-93ae-bdec736feed2',
         path='/ERC20Upgradeable.sol',
         lineno=212,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='da44665b-f910-478a-93d0-cc9aa295d2f2',
         path='/ERC20Upgradeable.sol',
         lineno=213,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` and `recipient` cannot be the zero address.')

Fragment(uuid='a01535b5-9c11-44ef-8ca1-80289cf7a535',
         path='/ERC20Upgradeable.sol',
         lineno=214,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` must have a balance of at least `amount`.')

Fragment(uuid='8d1efe1d-e57d-49aa-85a7-93983ea27031',
         path='/ERC20Upgradeable.sol',
         lineno=215,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * - the caller must have allowance for ``sender``'s tokens "
              'of at least')

Fragment(uuid='8a5b5957-14d7-49d0-98f4-3c6d7e0ce931',
         path='/ERC20Upgradeable.sol',
         lineno=216,
         depth=2,
         type='documentation',
         name='',
         text='\n     * `amount`.')

Fragment(uuid='455b65cb-6c4e-46ef-95c0-93b0ce5279b4',
         path='/ERC20Upgradeable.sol',
         lineno=217,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='c7991d27-29a4-4967-9905-d42ee4735b37',
         path='/ERC20Upgradeable.sol',
         lineno=218,
         depth=2,
         type='documentation',
         name='',
         text='\n    function transferFrom(')

Fragment(uuid='1f0e32ee-2f3e-4685-b06c-dc72f7a14342',
         path='/ERC20Upgradeable.sol',
         lineno=219,
         depth=2,
         type='documentation',
         name='',
         text='\n        address sender,')

Fragment(uuid='31350655-8a45-485d-96f1-3f2d6fc7d999',
         path='/ERC20Upgradeable.sol',
         lineno=220,
         depth=2,
         type='documentation',
         name='',
         text='\n        address recipient,')

Fragment(uuid='ab551ad1-b4a0-4051-8f68-63e31425656c',
         path='/ERC20Upgradeable.sol',
         lineno=221,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='897572cd-de8a-4900-ba67-6abf9c8dc1c0',
         path='/ERC20Upgradeable.sol',
         lineno=222,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) public virtual override returns (bool) {')

Fragment(uuid='8ac3b3fd-3e12-442c-982c-d5e51186d6d3',
         path='/ERC20Upgradeable.sol',
         lineno=223,
         depth=2,
         type='documentation',
         name='',
         text='\n        _transfer(sender, recipient, amount);')

Fragment(uuid='fdbf0e01-81ff-466c-985b-2eefa913a5f5',
         path='/ERC20Upgradeable.sol',
         lineno=224,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='c16c3029-1264-4754-a0ec-78712245abc8',
         path='/ERC20Upgradeable.sol',
         lineno=225,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 currentAllowance = '
              '_allowances[sender][_msgSender()];\n'
              '        require(currentAllowance >= amount, "ERC20: transfer '
              'amount exceeds allowance");\n'
              '        _approve(sender, _msgSender(), currentAllowance - '
              'amount);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='d42a7f6a-d8a8-46f1-a8f4-f898295c8a29',
         path='/ERC20Upgradeable.sol',
         lineno=231,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Atomically increases the allowance granted to '
              '`spender` by the caller.\n'
              '     *\n'
              '     * This is an alternative to {approve} that can be used as '
              'a mitigation for\n'
              '     * problems described in {IERC20-approve}.\n'
              '     *\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `spender` cannot be the zero address.\n'
              '     */\n'
              '    function increaseAllowance(address spender, uint256 '
              'addedValue) public virtual returns (bool) {\n'
              '        _approve(_msgSender(), spender, '
              '_allowances[_msgSender()][spender] + addedValue);\n'
              '        return true;\n'
              '    }\n')

Fragment(uuid='4d2137eb-d8d9-41fb-9835-843c54f248aa',
         path='/ERC20Upgradeable.sol',
         lineno=248,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='c7d590b6-4ad4-4883-9230-6c807ca5c559',
         path='/ERC20Upgradeable.sol',
         lineno=249,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Atomically decreases the allowance granted to '
              '`spender` by the caller.')

Fragment(uuid='7631a29f-b2a2-433c-9419-6985ac2653f0',
         path='/ERC20Upgradeable.sol',
         lineno=250,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='1786c1c5-404e-4c48-a842-64325c9b7464',
         path='/ERC20Upgradeable.sol',
         lineno=251,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This is an alternative to {approve} that can be used as '
              'a mitigation for')

Fragment(uuid='7f61c394-c67c-4187-b983-35979cf346c9',
         path='/ERC20Upgradeable.sol',
         lineno=252,
         depth=2,
         type='documentation',
         name='',
         text='\n     * problems described in {IERC20-approve}.')

Fragment(uuid='b2d61dae-4d52-4665-b965-12962a12ae66',
         path='/ERC20Upgradeable.sol',
         lineno=253,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='8765a568-f6bd-46ff-92a1-34c81a1bacc0',
         path='/ERC20Upgradeable.sol',
         lineno=254,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Emits an {Approval} event indicating the updated '
              'allowance.')

Fragment(uuid='309929cf-2ce2-45fe-971b-54c0a920e90e',
         path='/ERC20Upgradeable.sol',
         lineno=255,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='8cb70e59-86f0-4809-8ef0-ca79fca4927f',
         path='/ERC20Upgradeable.sol',
         lineno=256,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='9f808d2f-008a-4205-9d6c-2e769f65af59',
         path='/ERC20Upgradeable.sol',
         lineno=257,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='43abff6a-b83b-49e4-af84-f8a662559fab',
         path='/ERC20Upgradeable.sol',
         lineno=258,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `spender` cannot be the zero address.')

Fragment(uuid='d75912a1-c802-4ba6-aa4d-a5fdb0f50d2e',
         path='/ERC20Upgradeable.sol',
         lineno=259,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - `spender` must have allowance for the caller of at '
              'least')

Fragment(uuid='abc9b392-89a2-4f6d-8d41-30d3ba281e8f',
         path='/ERC20Upgradeable.sol',
         lineno=260,
         depth=2,
         type='documentation',
         name='',
         text='\n     * `subtractedValue`.')

Fragment(uuid='36c8a176-670c-4090-8ebf-656f9b64b314',
         path='/ERC20Upgradeable.sol',
         lineno=261,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='76685701-6741-41e8-b6a7-d07e80710634',
         path='/ERC20Upgradeable.sol',
         lineno=262,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function decreaseAllowance(address spender, uint256 '
              'subtractedValue) public virtual returns (bool) {')

Fragment(uuid='e4374b18-2bfd-4926-b6d5-bc6c35e628a8',
         path='/ERC20Upgradeable.sol',
         lineno=263,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        uint256 currentAllowance = '
              '_allowances[_msgSender()][spender];')

Fragment(uuid='6aef0c3b-a3b0-42cc-9e1e-7a94b5ac1444',
         path='/ERC20Upgradeable.sol',
         lineno=264,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(currentAllowance >= subtractedValue, "ERC20: '
              'decreased allowance below zero");')

Fragment(uuid='b8367343-5aae-453a-8112-329e49e59d1f',
         path='/ERC20Upgradeable.sol',
         lineno=265,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        _approve(_msgSender(), spender, currentAllowance - '
              'subtractedValue);')

Fragment(uuid='40deb74a-c2f4-48d2-8370-71d1c80ce884',
         path='/ERC20Upgradeable.sol',
         lineno=266,
         depth=2,
         type='documentation',
         name='',
         text='\n        return true;')

Fragment(uuid='717e5f5b-ffa9-45cf-8099-db8a725143c0',
         path='/ERC20Upgradeable.sol',
         lineno=267,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='3deb2bcf-3c95-4647-83ea-e650db63aaa1',
         path='/ERC20Upgradeable.sol',
         lineno=268,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='bc9bd462-3a70-49ab-85b6-014616c9d329',
         path='/ERC20Upgradeable.sol',
         lineno=269,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='1cb8f892-e69a-491e-862b-8b6c964c01a6',
         path='/ERC20Upgradeable.sol',
         lineno=270,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Moves `amount` of tokens from `sender` to '
              '`recipient`.')

Fragment(uuid='720601d6-27a8-4766-bcf0-a2e98ace1a7a',
         path='/ERC20Upgradeable.sol',
         lineno=271,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='6a8329f4-afa2-4b47-934f-1e1e03f53015',
         path='/ERC20Upgradeable.sol',
         lineno=272,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This internal function is equivalent to {transfer}, and '
              'can be used to')

Fragment(uuid='80adee79-0d49-4a6e-b58e-10aa286ea3ca',
         path='/ERC20Upgradeable.sol',
         lineno=273,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * e.g. implement automatic token fees, slashing '
              'mechanisms, etc.')

Fragment(uuid='b0130f56-3d87-41c3-b363-d36faba2cb9a',
         path='/ERC20Upgradeable.sol',
         lineno=274,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='a37ea6a0-3919-4ff3-9602-df280db28c42',
         path='/ERC20Upgradeable.sol',
         lineno=275,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits a {Transfer} event.')

Fragment(uuid='946e42be-b15d-49ab-a944-fff44d48c41f',
         path='/ERC20Upgradeable.sol',
         lineno=276,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='008307b7-5060-4cab-9099-81a95b90c113',
         path='/ERC20Upgradeable.sol',
         lineno=277,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='f5c0c2b7-c5d1-406f-bb50-f1708915e66a',
         path='/ERC20Upgradeable.sol',
         lineno=278,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='fc8e30d0-b1e6-4713-aec3-a9bca610bc96',
         path='/ERC20Upgradeable.sol',
         lineno=279,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` cannot be the zero address.')

Fragment(uuid='42915a57-b675-4706-ad72-0b8c0c32ccfc',
         path='/ERC20Upgradeable.sol',
         lineno=280,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `recipient` cannot be the zero address.')

Fragment(uuid='1595a4b9-f31d-4750-8166-fef236f96969',
         path='/ERC20Upgradeable.sol',
         lineno=281,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `sender` must have a balance of at least `amount`.')

Fragment(uuid='019117ec-2724-4a2b-87e3-fb49cad6992f',
         path='/ERC20Upgradeable.sol',
         lineno=282,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='caee8f58-3ec5-4a66-a6a6-53d7d5a6a28f',
         path='/ERC20Upgradeable.sol',
         lineno=283,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _transfer(')

Fragment(uuid='cdd8a676-f59d-419a-8b42-5dd576a234f4',
         path='/ERC20Upgradeable.sol',
         lineno=284,
         depth=2,
         type='documentation',
         name='',
         text='\n        address sender,')

Fragment(uuid='22053e3f-51fc-4548-bd6f-1fcca32d5c33',
         path='/ERC20Upgradeable.sol',
         lineno=285,
         depth=2,
         type='documentation',
         name='',
         text='\n        address recipient,')

Fragment(uuid='31f395b5-6229-41c0-887d-ea6b86356aec',
         path='/ERC20Upgradeable.sol',
         lineno=286,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='5a56fcec-e80e-46df-be79-167c7ae4779d',
         path='/ERC20Upgradeable.sol',
         lineno=287,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {')

Fragment(uuid='e97a7bc4-133b-4050-8ee3-643d221de411',
         path='/ERC20Upgradeable.sol',
         lineno=288,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(sender != address(0), "ERC20: transfer from the '
              'zero address");')

Fragment(uuid='50dd937c-72a7-4601-970e-847a8b4c48d9',
         path='/ERC20Upgradeable.sol',
         lineno=289,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(recipient != address(0), "ERC20: transfer to '
              'the zero address");')

Fragment(uuid='3cbf3ef6-ec8c-40c5-8068-185df8006885',
         path='/ERC20Upgradeable.sol',
         lineno=290,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='164cf31c-b349-4efb-9d8a-60e925d6fa50',
         path='/ERC20Upgradeable.sol',
         lineno=291,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(sender, recipient, amount);\n')

Fragment(uuid='d28d4deb-8f9f-464b-9278-4eb547b0b8ba',
         path='/ERC20Upgradeable.sol',
         lineno=293,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 senderBalance = _balances[sender];\n'
              '        require(senderBalance >= amount, "ERC20: transfer '
              'amount exceeds balance");\n'
              '  ')

Fragment(uuid='917ae41e-62c7-41a5-8684-ee4b80c1fdf8',
         path='/ERC20Upgradeable.sol',
         lineno=296,
         depth=1,
         type='documentation',
         name='',
         text='\n        _balances[sender] = senderBalance - amount;\n ')

Fragment(uuid='f81228fc-86fd-4d75-b19b-3d30a013239f',
         path='/ERC20Upgradeable.sol',
         lineno=298,
         depth=1,
         type='documentation',
         name='',
         text='\n        _balances[recipient] += amount;\n')

Fragment(uuid='7b4bae44-360e-46b4-bf53-c2fc128141b3',
         path='/ERC20Upgradeable.sol',
         lineno=300,
         depth=1,
         type='documentation',
         name='',
         text='\n        emit Transfer(sender, recipient, amount);\n')

Fragment(uuid='2bba8919-1e66-433e-9715-939345318ff8',
         path='/ERC20Upgradeable.sol',
         lineno=302,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _afterTokenTransfer(sender, recipient, amount);\n'
              '    }\n')

Fragment(uuid='8d36917d-c881-4312-8a0d-686bfd03e957',
         path='/ERC20Upgradeable.sol',
         lineno=305,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /** @dev Creates `amount` tokens and assigns them to '
              '`account`, increasing\n'
              '     * the total supply.\n'
              '     *\n'
              '     * Emits a {Transfer} event with `from` set to the zero '
              'address.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `account` cannot be the zero address.\n'
              '     */\n'
              '    function _mint(address account, uint256 amount) internal '
              'virtual {\n'
              '        require(account != address(0), "ERC20: mint to the zero '
              'address");\n')

Fragment(uuid='b9e9a7a4-83a1-4e9f-aab4-3169793a1e29',
         path='/ERC20Upgradeable.sol',
         lineno=317,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(address(0), account, amount);\n')

Fragment(uuid='90baa708-b913-48d4-83c5-02bf85ff4d8d',
         path='/ERC20Upgradeable.sol',
         lineno=319,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _totalSupply += amount;\n'
              '        _balances[account] += amount;\n'
              '        emit Transfer(address(0), account, amount);\n')

Fragment(uuid='3b50033a-eeee-472f-b515-fcf05a790984',
         path='/ERC20Upgradeable.sol',
         lineno=323,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _afterTokenTransfer(address(0), account, amount);\n'
              '    }\n')

Fragment(uuid='7ec81a02-961c-4571-92e7-f8a6ffebf675',
         path='/ERC20Upgradeable.sol',
         lineno=326,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Destroys `amount` tokens from `account`, reducing '
              'the\n'
              '     * total supply.\n'
              '     *\n'
              '     * Emits a {Transfer} event with `to` set to the zero '
              'address.\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - `account` cannot be the zero address.\n'
              '     * - `account` must have at least `amount` tokens.\n'
              '     */\n'
              '    function _burn(address account, uint256 amount) internal '
              'virtual {\n'
              '        require(account != address(0), "ERC20: burn from the '
              'zero address");\n')

Fragment(uuid='6c497e47-66b2-45da-90de-39dd0831bb49',
         path='/ERC20Upgradeable.sol',
         lineno=340,
         depth=1,
         type='documentation',
         name='',
         text='\n        _beforeTokenTransfer(account, address(0), amount);\n')

Fragment(uuid='5ded451d-da60-4577-802a-f531f03ee13e',
         path='/ERC20Upgradeable.sol',
         lineno=342,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 accountBalance = _balances[account];\n'
              '        require(accountBalance >= amount, "ERC20: burn amount '
              'exceeds balance");\n'
              '      ')

Fragment(uuid='1d9e7a8a-4828-4c59-b8d4-2fd9c5df52a3',
         path='/ERC20Upgradeable.sol',
         lineno=345,
         depth=1,
         type='documentation',
         name='',
         text='\n        _balances[account] = accountBalance - amount;\n  ')

Fragment(uuid='2606e584-f952-46fc-96be-4287a42f33ed',
         path='/ERC20Upgradeable.sol',
         lineno=347,
         depth=1,
         type='documentation',
         name='',
         text='\n        _totalSupply -= amount;\n')

Fragment(uuid='0a4d9961-c6f0-4ae3-9ce1-f1e3d620d43e',
         path='/ERC20Upgradeable.sol',
         lineno=349,
         depth=1,
         type='documentation',
         name='',
         text='\n        emit Transfer(account, address(0), amount);\n')

Fragment(uuid='3667bb1a-d18a-4244-9386-a5cdfe2ce486',
         path='/ERC20Upgradeable.sol',
         lineno=351,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _afterTokenTransfer(account, address(0), amount);\n'
              '    }\n')

Fragment(uuid='15405f87-8b0e-4faf-879b-568d1a42a679',
         path='/ERC20Upgradeable.sol',
         lineno=354,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='dd00b4cd-4b87-443f-b6ba-e2f1c7d596f9',
         path='/ERC20Upgradeable.sol',
         lineno=355,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Sets `amount` as the allowance of `spender` over '
              'the `owner` s tokens.')

Fragment(uuid='67b52d7e-e2ab-4dec-84a1-8def2b0e77f4',
         path='/ERC20Upgradeable.sol',
         lineno=356,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='cda5c14c-e83b-4f8e-bc42-2fc43622567c',
         path='/ERC20Upgradeable.sol',
         lineno=357,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * This internal function is equivalent to `approve`, and '
              'can be used to')

Fragment(uuid='99e93521-5deb-47e4-ab90-c210436a00a6',
         path='/ERC20Upgradeable.sol',
         lineno=358,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * e.g. set automatic allowances for certain subsystems, '
              'etc.')

Fragment(uuid='4e797db6-9ae3-468c-a2ee-ebc7f99bdf80',
         path='/ERC20Upgradeable.sol',
         lineno=359,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='0bedbea4-8f2b-4816-a64c-4bf1fbad04aa',
         path='/ERC20Upgradeable.sol',
         lineno=360,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits an {Approval} event.')

Fragment(uuid='e79e01e9-1b0d-402a-ab02-c3cdfa1c08f5',
         path='/ERC20Upgradeable.sol',
         lineno=361,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='692be878-4653-4ea3-a27c-f58509a296e3',
         path='/ERC20Upgradeable.sol',
         lineno=362,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='10971ba7-dc72-4cda-be0a-0ff2601124ca',
         path='/ERC20Upgradeable.sol',
         lineno=363,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='af64901e-984a-45cb-9f39-2d1a94e78ee3',
         path='/ERC20Upgradeable.sol',
         lineno=364,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `owner` cannot be the zero address.')

Fragment(uuid='94d03d9a-9808-4487-8e48-f88c6b0a8a6f',
         path='/ERC20Upgradeable.sol',
         lineno=365,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `spender` cannot be the zero address.')

Fragment(uuid='154c8d90-fa6e-46b5-a78d-b1481c3d904a',
         path='/ERC20Upgradeable.sol',
         lineno=366,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='794846cc-2cca-47b7-8490-a277ecabc3a3',
         path='/ERC20Upgradeable.sol',
         lineno=367,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _approve(')

Fragment(uuid='a4caa045-8449-4fb1-9a08-b03aecde9b3b',
         path='/ERC20Upgradeable.sol',
         lineno=368,
         depth=2,
         type='documentation',
         name='',
         text='\n        address owner,')

Fragment(uuid='826b11d5-c0b0-4222-ac50-1db0d954eed7',
         path='/ERC20Upgradeable.sol',
         lineno=369,
         depth=2,
         type='documentation',
         name='',
         text='\n        address spender,')

Fragment(uuid='eb8378b7-a40b-40ce-b976-50cbae692f12',
         path='/ERC20Upgradeable.sol',
         lineno=370,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='f91573ac-5019-4bf9-93f9-0eee2307f896',
         path='/ERC20Upgradeable.sol',
         lineno=371,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {')

Fragment(uuid='5cb97680-f131-4b2d-b9c7-50969c72b353',
         path='/ERC20Upgradeable.sol',
         lineno=372,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(owner != address(0), "ERC20: approve from the '
              'zero address");')

Fragment(uuid='0ada6511-20b7-4a78-8a07-b151fa1130cb',
         path='/ERC20Upgradeable.sol',
         lineno=373,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        require(spender != address(0), "ERC20: approve to the '
              'zero address");')

Fragment(uuid='a0c85532-0f5d-40ab-a9d1-e2d8f752de08',
         path='/ERC20Upgradeable.sol',
         lineno=374,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='2c2c7065-e245-4769-b6ca-aa0cdf47ebe2',
         path='/ERC20Upgradeable.sol',
         lineno=375,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _allowances[owner][spender] = amount;\n'
              '        emit Approval(owner, spender, amount);\n'
              '    }\n')

Fragment(uuid='35c73573-4d42-4cdf-9f6d-f4a34bdfc5fd',
         path='/ERC20Upgradeable.sol',
         lineno=379,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='d933cc72-5e47-4fb8-8a54-5c13ad96c5b3',
         path='/ERC20Upgradeable.sol',
         lineno=380,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Hook that is called before any transfer of tokens. '
              'This includes')

Fragment(uuid='e58061ae-fd07-419c-ba27-17f23c8d06e1',
         path='/ERC20Upgradeable.sol',
         lineno=381,
         depth=2,
         type='documentation',
         name='',
         text='\n     * minting and burning.')

Fragment(uuid='c06a49ad-9f89-4037-ba27-ddc0937d141c',
         path='/ERC20Upgradeable.sol',
         lineno=382,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='91d93cee-0043-47e7-a8f8-e138b3cca8b6',
         path='/ERC20Upgradeable.sol',
         lineno=383,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Calling conditions:')

Fragment(uuid='a48af073-acac-448d-bd47-9677b02f3fc1',
         path='/ERC20Upgradeable.sol',
         lineno=384,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='211b51b2-1a52-42cb-9951-defdbc214d66',
         path='/ERC20Upgradeable.sol',
         lineno=385,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` and `to` are both non-zero, `amount` of '
              "``from``'s tokens")

Fragment(uuid='8b50555c-e3bf-4560-8580-493a1c7b7a87',
         path='/ERC20Upgradeable.sol',
         lineno=386,
         depth=2,
         type='documentation',
         name='',
         text='\n     * will be transferred to `to`.')

Fragment(uuid='061d90f4-e293-42af-ba7b-53289de94bb2',
         path='/ERC20Upgradeable.sol',
         lineno=387,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` is zero, `amount` tokens will be minted '
              'for `to`.')

Fragment(uuid='55ca8baa-6dc4-402b-b1a8-41215ca627ed',
         path='/ERC20Upgradeable.sol',
         lineno=388,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * - when `to` is zero, `amount` of ``from``'s tokens will "
              'be burned.')

Fragment(uuid='c4e2519e-9aaf-4f04-9b55-8f968cafa1e4',
         path='/ERC20Upgradeable.sol',
         lineno=389,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `from` and `to` are never both zero.')

Fragment(uuid='205217bc-5e42-4a27-b2da-78ff4700a064',
         path='/ERC20Upgradeable.sol',
         lineno=390,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='b97c27a0-0cb1-4a39-ba40-2cd2f152cd23',
         path='/ERC20Upgradeable.sol',
         lineno=391,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * To learn more about hooks, head to '
              'xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].')

Fragment(uuid='51eba53b-995b-4730-8494-31f94c54859b',
         path='/ERC20Upgradeable.sol',
         lineno=392,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='36b9ac34-162e-4221-a44a-efc5464063ef',
         path='/ERC20Upgradeable.sol',
         lineno=393,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _beforeTokenTransfer(')

Fragment(uuid='b3d586fe-6664-4167-b639-db7fb0d4b8a6',
         path='/ERC20Upgradeable.sol',
         lineno=394,
         depth=2,
         type='documentation',
         name='',
         text='\n        address from,')

Fragment(uuid='dbae10e0-acb5-41a6-8da6-df2689695868',
         path='/ERC20Upgradeable.sol',
         lineno=395,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='d9143ec4-bf9d-405a-a2d1-d25b1bf3401f',
         path='/ERC20Upgradeable.sol',
         lineno=396,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='e86d133b-99d5-41ca-8741-b669bb3d1b4e',
         path='/ERC20Upgradeable.sol',
         lineno=397,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {}')

Fragment(uuid='2a26b64b-a356-4bc4-925c-5d557a1eab9e',
         path='/ERC20Upgradeable.sol',
         lineno=398,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='dc540896-a107-4cd6-b685-8bd9c84c7480',
         path='/ERC20Upgradeable.sol',
         lineno=399,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='e92a8c22-2629-414e-8828-05340c1c6250',
         path='/ERC20Upgradeable.sol',
         lineno=400,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Hook that is called after any transfer of tokens. '
              'This includes')

Fragment(uuid='0d09ba28-84de-4a71-8cb5-c2ec3dc96cb4',
         path='/ERC20Upgradeable.sol',
         lineno=401,
         depth=2,
         type='documentation',
         name='',
         text='\n     * minting and burning.')

Fragment(uuid='ed96f456-27f1-4a0e-822f-bec212afdc34',
         path='/ERC20Upgradeable.sol',
         lineno=402,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='57066c29-4b12-420a-9402-5edb35ffb9c1',
         path='/ERC20Upgradeable.sol',
         lineno=403,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Calling conditions:')

Fragment(uuid='7edcacbb-4598-4d17-82b0-46696edac55b',
         path='/ERC20Upgradeable.sol',
         lineno=404,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='2c75d870-7297-4ae1-9db7-ca368621c8cd',
         path='/ERC20Upgradeable.sol',
         lineno=405,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` and `to` are both non-zero, `amount` of '
              "``from``'s tokens")

Fragment(uuid='a95e19a4-36f8-4d03-bee3-dadb816c0f03',
         path='/ERC20Upgradeable.sol',
         lineno=406,
         depth=2,
         type='documentation',
         name='',
         text='\n     * has been transferred to `to`.')

Fragment(uuid='47e49140-92a2-4bbf-ae41-8fa1247023a0',
         path='/ERC20Upgradeable.sol',
         lineno=407,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * - when `from` is zero, `amount` tokens have been minted '
              'for `to`.')

Fragment(uuid='2fca3062-2f5b-43f9-adb7-764ef33abe9b',
         path='/ERC20Upgradeable.sol',
         lineno=408,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * - when `to` is zero, `amount` of ``from``'s tokens have "
              'been burned.')

Fragment(uuid='d36c9318-1959-454e-88ca-7f17996cd070',
         path='/ERC20Upgradeable.sol',
         lineno=409,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - `from` and `to` are never both zero.')

Fragment(uuid='9f177fab-ac2c-4caa-9e5a-5ba0fa70220e',
         path='/ERC20Upgradeable.sol',
         lineno=410,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='38d102dc-d214-4745-ab09-6c6e118d1279',
         path='/ERC20Upgradeable.sol',
         lineno=411,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * To learn more about hooks, head to '
              'xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].')

Fragment(uuid='1058d747-bb50-41e5-9ea8-cebe966bba59',
         path='/ERC20Upgradeable.sol',
         lineno=412,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='30c94272-1399-467e-ab86-30964e160bfb',
         path='/ERC20Upgradeable.sol',
         lineno=413,
         depth=2,
         type='documentation',
         name='',
         text='\n    function _afterTokenTransfer(')

Fragment(uuid='ad0e549c-a02b-4aad-ab4c-ffd7ff71f87a',
         path='/ERC20Upgradeable.sol',
         lineno=414,
         depth=2,
         type='documentation',
         name='',
         text='\n        address from,')

Fragment(uuid='22489190-a08b-4fa0-90e8-9f9c9f3e86b6',
         path='/ERC20Upgradeable.sol',
         lineno=415,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='877004e7-f90a-46f8-a353-6394bec18c91',
         path='/ERC20Upgradeable.sol',
         lineno=416,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 amount')

Fragment(uuid='9abf1123-7f30-4a2f-b85d-b157dfda20a5',
         path='/ERC20Upgradeable.sol',
         lineno=417,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) internal virtual {}')

Fragment(uuid='464c00d2-c2c5-4b3a-b5fb-e06b6596215e',
         path='/ERC20Upgradeable.sol',
         lineno=418,
         depth=2,
         type='documentation',
         name='',
         text='\n    uint256[45] private __gap;')

Fragment(uuid='23bec1f6-dcd0-494d-83f9-9b34e1bce282',
         path='/ERC20Upgradeable.sol',
         lineno=419,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='09dc0023-dccb-4b50-8d04-fd46e958b876',
         path='/ERC20Upgradeable.sol',
         lineno=420,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='3ee942ba-e1a7-461c-a5fb-810db256ff0e',
         path='/IERC20.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='65d593e5-d44a-4824-ac5a-e3890aa128cc',
         path='/IERC20.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IERC20.sol\n')

Fragment(uuid='bd5d4fb9-1c33-4213-8269-51467b81b585',
         path='/IERC20.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='d9845d95-829b-4e30-ad88-c96f5f988721',
         path='/IERC20.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '/**\n'
              ' * @dev Interface of the ERC20 standard as defined in the EIP.\n'
              ' */\n'
              'interface IERC20 {\n'
              '    /**\n'
              '     * @dev Returns the amount of tokens in existence.\n'
              '     */\n'
              '    function totalSupply() external view returns (uint256);\n')

Fragment(uuid='f464dee2-397d-4066-bd9e-fadda8e81980',
         path='/IERC20.sol',
         lineno=13,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the amount of tokens owned by `account`.\n'
              '     */\n'
              '    function balanceOf(address account) external view returns '
              '(uint256);\n')

Fragment(uuid='080e9750-f80d-47dc-866a-ec8071528c6c',
         path='/IERC20.sol',
         lineno=18,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              "     * @dev Moves `amount` tokens from the caller's account to "
              '`recipient`.\n'
              '     *\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.\n'
              '     *\n'
              '     * Emits a {Transfer} event.\n'
              '     */\n'
              '    function transfer(address recipient, uint256 amount) '
              'external returns (bool);\n')

Fragment(uuid='ce382133-9319-4333-97fe-c56f4436239d',
         path='/IERC20.sol',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the remaining number of tokens that '
              '`spender` will be\n'
              '     * allowed to spend on behalf of `owner` through '
              '{transferFrom}. This is\n'
              '     * zero by default.\n'
              '     *\n'
              '     * This value changes when {approve} or {transferFrom} are '
              'called.\n'
              '     */\n'
              '    function allowance(address owner, address spender) external '
              'view returns (uint256);\n')

Fragment(uuid='ddcd1c58-d035-4f1d-a267-5dcdfe86d6b0',
         path='/IERC20.sol',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='70160727-9aa5-4de7-8ec2-34369a062e90',
         path='/IERC20.sol',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Sets `amount` as the allowance of `spender` over '
              "the caller's tokens.")

Fragment(uuid='5212154f-ddce-4449-acef-4ad95aabcf4b',
         path='/IERC20.sol',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='b4d5b63b-4b4c-4da3-b469-d81d93fbaccb',
         path='/IERC20.sol',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.')

Fragment(uuid='53f8ee1f-9c1e-4aa8-aaa0-536168b822c1',
         path='/IERC20.sol',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='272f31e3-dc5e-435f-81b5-d64a2c88f9ab',
         path='/IERC20.sol',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * IMPORTANT: Beware that changing an allowance with this '
              'method brings the risk')

Fragment(uuid='05cb57d4-4086-4cd8-87d1-421ad25d2bd2',
         path='/IERC20.sol',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * that someone may use both the old and the new allowance '
              'by unfortunate')

Fragment(uuid='fb1592aa-003a-4b44-b5b5-be3662952398',
         path='/IERC20.sol',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * transaction ordering. One possible solution to mitigate '
              'this race')

Fragment(uuid='f7e6d9fb-db9c-4efc-9101-71f9ed91a344',
         path='/IERC20.sol',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * condition is to first reduce the spender's allowance to "
              '0 and set the')

Fragment(uuid='50b47a08-7bae-448b-a5a5-68c25600bd8b',
         path='/IERC20.sol',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n     * desired value afterwards:')

Fragment(uuid='4265054a-4187-41f3-a6cb-153ca92f61d3',
         path='/IERC20.sol',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * '
              'https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729')

Fragment(uuid='56daddfd-0056-4f57-b822-38bc68192e1b',
         path='/IERC20.sol',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='38c3578f-2086-42b1-9141-8e4f88477c8e',
         path='/IERC20.sol',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Emits an {Approval} event.')

Fragment(uuid='b347103d-2162-4b56-82bf-304f98f3e982',
         path='/IERC20.sol',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='186aab04-5167-4cee-923a-0483792f9043',
         path='/IERC20.sol',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function approve(address spender, uint256 amount) external '
              'returns (bool);')

Fragment(uuid='4ccf658d-49fd-4f85-a74f-dcfce330c6d9',
         path='/IERC20.sol',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='bfce396c-0d67-40aa-8cce-e8b6a595d195',
         path='/IERC20.sol',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Moves `amount` tokens from `sender` to `recipient` '
              'using the\n'
              '     * allowance mechanism. `amount` is then deducted from the '
              "caller's\n"
              '     * allowance.\n'
              '     *\n'
              '     * Returns a boolean value indicating whether the operation '
              'succeeded.\n'
              '     *\n'
              '     * Emits a {Transfer} event.\n'
              '     */\n'
              '    function transferFrom(\n'
              '        address sender,\n'
              '        address recipient,\n'
              '        uint256 amount\n'
              '    ) external returns (bool);\n')

Fragment(uuid='75f22fef-67d2-460a-b33a-92b9d023ade0',
         path='/IERC20.sol',
         lineno=67,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Emitted when `value` tokens are moved from one '
              'account (`from`) to\n'
              '     * another (`to`).\n'
              '     *\n'
              '     * Note that `value` may be zero.\n'
              '     */\n'
              '    event Transfer(address indexed from, address indexed to, '
              'uint256 value);\n')

Fragment(uuid='a9d975d2-0695-44c0-9e03-26a45eae3955',
         path='/IERC20.sol',
         lineno=75,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Emitted when the allowance of a `spender` for an '
              '`owner` is set by\n'
              '     * a call to {approve}. `value` is the new allowance.\n'
              '     */\n'
              '    event Approval(address indexed owner, address indexed '
              'spender, uint256 value);\n'
              '}\n')

Fragment(uuid='1ff1573a-5827-430f-bb80-0f0bbc5b307f',
         path='/IERC20Metadata.sol',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n'
              '\n'
              'pragma solidity ^0.6.2;\n'
              '\n'
              'import "./IERC20.sol";\n'
              '\n'
              '/**\n'
              ' * @dev Interface for the optional metadata functions from the '
              'ERC20 standard.\n'
              ' *\n'
              ' * _Available since v4.1._\n'
              ' */\n'
              'interface IERC20Metadata is IERC20 {\n'
              '    /**\n'
              '     * @dev Returns the name of the token.\n'
              '     */\n'
              '    function name() external view returns (string memory);\n'
              '\n'
              '    /**\n'
              '     * @dev Returns the symbol of the token.\n'
              '     */\n'
              '    function symbol() external view returns (string memory);\n'
              '\n'
              '    /**\n'
              '     * @dev Returns the decimals places of the token.\n'
              '     */\n'
              '    function decimals() external view returns (uint8);\n'
              '}')

Fragment(uuid='fa39d041-71a3-4980-934d-981a002795eb',
         path='/IERC20Metadata.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IERC20Metadata.sol\n')

Fragment(uuid='322e9e16-c27a-4a2b-a513-baaf65db94c3',
         path='/IUniswapV2Factory.sol',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n'
              '\n'
              'pragma solidity ^0.6.2;\n'
              '\n'
              'interface IUniswapV2Factory {\n'
              '    event PairCreated(address indexed token0, address indexed '
              'token1, address pair, uint);\n'
              '\n'
              '    function feeTo() external view returns (address);\n'
              '    function feeToSetter() external view returns (address);\n'
              '\n'
              '    function getPair(address tokenA, address tokenB) external '
              'view returns (address pair);\n'
              '    function allPairs(uint) external view returns (address '
              'pair);\n'
              '    function allPairsLength() external view returns (uint);\n'
              '\n'
              '    function createPair(address tokenA, address tokenB) '
              'external returns (address pair);\n'
              '\n'
              '    function setFeeTo(address) external;\n'
              '    function setFeeToSetter(address) external;\n'
              '}')

Fragment(uuid='edce33a3-7f96-45c3-8edc-4088d4dc5419',
         path='/IUniswapV2Factory.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IUniswapV2Factory.sol\n')

Fragment(uuid='34e8b325-894e-4b9b-8de1-25f6e4560f67',
         path='/IUniswapV2Pair.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='91b67619-e33f-4f7e-80c0-49a2f26a5f08',
         path='/IUniswapV2Pair.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IUniswapV2Pair.sol\n')

Fragment(uuid='0f4c088f-34d5-4399-8ab3-19d4aeeb80ca',
         path='/IUniswapV2Pair.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='2f81b20e-2e7d-4b03-a402-9809a39906b9',
         path='/IUniswapV2Pair.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'interface IUniswapV2Pair {\n'
              '    event Approval(address indexed owner, address indexed '
              'spender, uint value);\n'
              '    event Transfer(address indexed from, address indexed to, '
              'uint value);\n')

Fragment(uuid='28759ee6-31f3-4c5e-b436-e2025eadaca0',
         path='/IUniswapV2Pair.sol',
         lineno=8,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function name() external pure returns (string memory);\n'
              '    function symbol() external pure returns (string memory);\n'
              '    function decimals() external pure returns (uint8);\n'
              '    function totalSupply() external view returns (uint);\n'
              '    function balanceOf(address owner) external view returns '
              '(uint);\n'
              '    function allowance(address owner, address spender) external '
              'view returns (uint);\n')

Fragment(uuid='750ffeff-b96f-4ae8-8cc0-d2bf11453d93',
         path='/IUniswapV2Pair.sol',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function approve(address spender, uint value) external '
              'returns (bool);\n'
              '    function transfer(address to, uint value) external returns '
              '(bool);\n'
              '    function transferFrom(address from, address to, uint value) '
              'external returns (bool);\n')

Fragment(uuid='a7ec2d9e-02a8-484f-8fb8-a08650a74fc5',
         path='/IUniswapV2Pair.sol',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function DOMAIN_SEPARATOR() external view returns '
              '(bytes32);\n'
              '    function PERMIT_TYPEHASH() external pure returns '
              '(bytes32);\n'
              '    function nonces(address owner) external view returns '
              '(uint);\n')

Fragment(uuid='dc7f2edf-56d9-4bbf-a9b5-c0833146625c',
         path='/IUniswapV2Pair.sol',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function permit(address owner, address spender, uint value, '
              'uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n')

Fragment(uuid='879225c6-5a23-4e05-8c4b-55b9406f175d',
         path='/IUniswapV2Pair.sol',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event Mint(address indexed sender, uint amount0, uint '
              'amount1);\n'
              '    event Burn(address indexed sender, uint amount0, uint '
              'amount1, address indexed to);\n'
              '    event Swap(\n'
              '        address indexed sender,\n'
              '        uint amount0In,\n'
              '        uint amount1In,\n'
              '        uint amount0Out,\n'
              '        uint amount1Out,\n'
              '        address indexed to\n'
              '    );\n'
              '    event Sync(uint112 reserve0, uint112 reserve1);\n')

Fragment(uuid='f09313ca-82ec-4ab1-8750-423f67748710',
         path='/IUniswapV2Pair.sol',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n'
              '    function factory() external view returns (address);\n'
              '    function token0() external view returns (address);\n'
              '    function token1() external view returns (address);\n'
              '    function getReserves() external view returns (uint112 '
              'reserve0, uint112 reserve1, uint32 blockTimestampLast);\n'
              '    function price0CumulativeLast() external view returns '
              '(uint);\n'
              '    function price1CumulativeLast() external view returns '
              '(uint);\n'
              '    function kLast() external view returns (uint);\n')

Fragment(uuid='41f70a9a-cfeb-4570-86f8-1db15236ba55',
         path='/IUniswapV2Pair.sol',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function mint(address to) external returns (uint '
              'liquidity);\n'
              '    function burn(address to) external returns (uint amount0, '
              'uint amount1);\n'
              '    function swap(uint amount0Out, uint amount1Out, address to, '
              'bytes calldata data) external;\n'
              '    function skim(address to) external;\n'
              '    function sync() external;\n')

Fragment(uuid='7f67dde7-ee12-4646-88f4-f477e0d2430e',
         path='/IUniswapV2Pair.sol',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n    function initialize(address, address) external;\n}')

Fragment(uuid='f3a1d31c-dedd-4928-b210-ccf08c470af3',
         path='/IUniswapV2Router.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='b19a2423-6707-4110-b68b-19be984836b1',
         path='/IUniswapV2Router.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IUniswapV2Router.sol\n')

Fragment(uuid='05b6bf1c-334e-4f99-8f13-03201dc8f0e6',
         path='/IUniswapV2Router.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='31986e6c-9ca5-456a-83e0-a4bb979dfc89',
         path='/IUniswapV2Router.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'interface IUniswapV2Router01 {\n'
              '    function factory() external pure returns (address);\n'
              '    function WETH() external pure returns (address);\n')

Fragment(uuid='5c42403e-5d1d-4293-a4f2-2490c4b7dcba',
         path='/IUniswapV2Router.sol',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n    function addLiquidity(')

Fragment(uuid='74d67613-5597-42f5-8ecd-c2433c4006c7',
         path='/IUniswapV2Router.sol',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenA,')

Fragment(uuid='372f2a86-d041-40b8-8f30-530b9da3029f',
         path='/IUniswapV2Router.sol',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenB,')

Fragment(uuid='3bba707f-299c-4e40-8294-67761f0385dd',
         path='/IUniswapV2Router.sol',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountADesired,')

Fragment(uuid='8367bdcc-0f59-4601-8024-642569635e05',
         path='/IUniswapV2Router.sol',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountBDesired,')

Fragment(uuid='676a8f17-2d47-4911-8d2e-11c459c9a63a',
         path='/IUniswapV2Router.sol',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountAMin,')

Fragment(uuid='3198c347-d7c5-4237-a1f3-d361d8117b02',
         path='/IUniswapV2Router.sol',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountBMin,')

Fragment(uuid='b1f0441a-8879-4438-aee0-198b743444d4',
         path='/IUniswapV2Router.sol',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='f05f6c1a-fc13-4817-b456-e25ad75401c1',
         path='/IUniswapV2Router.sol',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='2b60049c-e794-4f9d-a165-5240b5c662c4',
         path='/IUniswapV2Router.sol',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    ) external returns (uint amountA, uint amountB, uint '
              'liquidity);')

Fragment(uuid='751a6cf6-5b0e-4b91-957f-d370b053aa34',
         path='/IUniswapV2Router.sol',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n    function addLiquidityETH(')

Fragment(uuid='e58f55f5-b9d6-46c7-b3bb-17f5f20bd49c',
         path='/IUniswapV2Router.sol',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n        address token,')

Fragment(uuid='c9ee66cd-b592-492a-8e94-1366d68b035a',
         path='/IUniswapV2Router.sol',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenDesired,')

Fragment(uuid='367bf644-04be-4c3a-9c5f-0f1a653501c3',
         path='/IUniswapV2Router.sol',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenMin,')

Fragment(uuid='aa833f43-d0cc-41ac-9629-5d7250c95b74',
         path='/IUniswapV2Router.sol',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountETHMin,')

Fragment(uuid='f954209b-d56b-4f89-9b96-d73a6f6a2d8b',
         path='/IUniswapV2Router.sol',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='6bcaad52-658a-474e-a24c-a5c56b6f56e5',
         path='/IUniswapV2Router.sol',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='0a299439-11a8-4d23-b97d-ec3ff724cf5b',
         path='/IUniswapV2Router.sol',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    ) external payable returns (uint amountToken, uint '
              'amountETH, uint liquidity);')

Fragment(uuid='d2154860-a856-41c0-825f-fc1eb7052fb9',
         path='/IUniswapV2Router.sol',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n    function removeLiquidity(')

Fragment(uuid='5f1eceda-45a5-482d-a520-edb4b4e762b3',
         path='/IUniswapV2Router.sol',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenA,')

Fragment(uuid='a7b09186-e83b-4761-a33d-2400b3cae6d3',
         path='/IUniswapV2Router.sol',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenB,')

Fragment(uuid='42a0d1a0-a36c-4a72-a930-0a5ea61347fd',
         path='/IUniswapV2Router.sol',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='8dac52e7-3e83-482f-809c-da433e229248',
         path='/IUniswapV2Router.sol',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountAMin,')

Fragment(uuid='44f0087b-14ab-4005-a82f-30f57b701791',
         path='/IUniswapV2Router.sol',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountBMin,')

Fragment(uuid='9a71451b-842f-4ea7-bd0a-eec17f27b186',
         path='/IUniswapV2Router.sol',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='23336d4f-cd88-4b80-ad5e-7487a2e04154',
         path='/IUniswapV2Router.sol',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='ac7940be-2327-404c-8ac3-80334f9b7f99',
         path='/IUniswapV2Router.sol',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountA, uint amountB);')

Fragment(uuid='9194e46b-3e0d-47e9-8150-07c5bb5f89b0',
         path='/IUniswapV2Router.sol',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n    function removeLiquidityETH(')

Fragment(uuid='63067f6a-5392-491b-9188-397d296d61de',
         path='/IUniswapV2Router.sol',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n        address token,')

Fragment(uuid='fe36514b-ff53-4bae-95aa-48a8f996f827',
         path='/IUniswapV2Router.sol',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='7afe8a48-b428-4a50-b121-d4e4ea4d05c5',
         path='/IUniswapV2Router.sol',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenMin,')

Fragment(uuid='bb3a36e3-f615-4626-9dde-6a1cb40b275f',
         path='/IUniswapV2Router.sol',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountETHMin,')

Fragment(uuid='3138b88f-4fe1-442e-956d-960e0dcde92d',
         path='/IUniswapV2Router.sol',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='03eea5b6-6f11-4307-b8bf-5aebf05b6bca',
         path='/IUniswapV2Router.sol',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='06fdeb98-88cd-4174-805c-cd52f5e7104e',
         path='/IUniswapV2Router.sol',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountToken, uint amountETH);')

Fragment(uuid='87f2db7e-77d4-4d4e-907a-5123a77cb0e1',
         path='/IUniswapV2Router.sol',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n    function removeLiquidityWithPermit(')

Fragment(uuid='f1011bcc-40bd-45ca-a98a-87a7b2acac21',
         path='/IUniswapV2Router.sol',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenA,')

Fragment(uuid='334b7453-0ddc-4923-b311-3ffd0f028ef8',
         path='/IUniswapV2Router.sol',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n        address tokenB,')

Fragment(uuid='caa5a3ec-bc1d-4a32-8f30-37b9c1e17234',
         path='/IUniswapV2Router.sol',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='318bff21-29bc-40ea-b54b-dccb1289c139',
         path='/IUniswapV2Router.sol',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountAMin,')

Fragment(uuid='3a0ea2c2-bd17-4f06-befc-ba4f189890bc',
         path='/IUniswapV2Router.sol',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountBMin,')

Fragment(uuid='21e5f5ed-061b-4557-a06f-d23ed4e9c258',
         path='/IUniswapV2Router.sol',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='2edf2e37-db12-4a1b-a51b-989802a1d0de',
         path='/IUniswapV2Router.sol',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline,')

Fragment(uuid='10efa14e-c50a-46e4-b3b1-a316e0815541',
         path='/IUniswapV2Router.sol',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n        bool approveMax, uint8 v, bytes32 r, bytes32 s')

Fragment(uuid='6b2754d9-9588-467c-b615-0667d3418a68',
         path='/IUniswapV2Router.sol',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountA, uint amountB);')

Fragment(uuid='833be55c-6fed-4feb-b889-e5f220cba993',
         path='/IUniswapV2Router.sol',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n    function removeLiquidityETHWithPermit(')

Fragment(uuid='22acf10d-5873-4afe-9ade-7c8ead5c0f7d',
         path='/IUniswapV2Router.sol',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n        address token,')

Fragment(uuid='f2a48e82-60e5-4372-889f-a4fb3f64f4a1',
         path='/IUniswapV2Router.sol',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='cc2cadc3-3dd5-496d-8d3a-3ddd7b2156f7',
         path='/IUniswapV2Router.sol',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenMin,')

Fragment(uuid='3e86dddf-de9d-44e5-9533-cd1bbd9edd66',
         path='/IUniswapV2Router.sol',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountETHMin,')

Fragment(uuid='aa76d6d2-25f6-4e91-8cd3-ace52f04faeb',
         path='/IUniswapV2Router.sol',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='6834b52b-25df-4d17-af70-827db475cc8f',
         path='/IUniswapV2Router.sol',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline,')

Fragment(uuid='69a92a3a-6793-445f-a121-6e7d8f79b9f8',
         path='/IUniswapV2Router.sol',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n        bool approveMax, uint8 v, bytes32 r, bytes32 s')

Fragment(uuid='8138489d-3034-49ac-af4d-0cb759527bb6',
         path='/IUniswapV2Router.sol',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountToken, uint amountETH);')

Fragment(uuid='2f7070e3-a8d5-4850-b91e-3b17c22df192',
         path='/IUniswapV2Router.sol',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n    function swapExactTokensForTokens(')

Fragment(uuid='9d6967d9-650b-4914-a60f-42be68facc21',
         path='/IUniswapV2Router.sol',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountIn,')

Fragment(uuid='9f75abe8-d550-4daa-9fee-0d3dd8dd14cf',
         path='/IUniswapV2Router.sol',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountOutMin,')

Fragment(uuid='6f16c4b2-e149-4aed-98d7-a816ec1d4354',
         path='/IUniswapV2Router.sol',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n        address[] calldata path,')

Fragment(uuid='a5cd864c-547b-40eb-8180-b68455ab55b8',
         path='/IUniswapV2Router.sol',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='1751d710-cce3-4316-a54a-a781c7afeef0',
         path='/IUniswapV2Router.sol',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='ae580237-6e7b-4f83-b301-8086eb291190',
         path='/IUniswapV2Router.sol',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint[] memory amounts);')

Fragment(uuid='5119d5ff-f185-48d5-b996-b75158d69ca3',
         path='/IUniswapV2Router.sol',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n    function swapTokensForExactTokens(')

Fragment(uuid='1f688886-2918-42fc-b6f8-9c5f40b4d1af',
         path='/IUniswapV2Router.sol',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountOut,')

Fragment(uuid='d617cf2e-bea5-4146-ba84-4b173b385ad7',
         path='/IUniswapV2Router.sol',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountInMax,')

Fragment(uuid='f1e4fe3a-1b12-40c8-a74a-52df07e965d7',
         path='/IUniswapV2Router.sol',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n        address[] calldata path,')

Fragment(uuid='b02c5693-87de-46fa-ab6d-dac5f8c3ae60',
         path='/IUniswapV2Router.sol',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='c85c8888-c9d5-4f4b-80dc-e493f2ffafed',
         path='/IUniswapV2Router.sol',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='490a19f9-e662-4a33-8666-58561880deb4',
         path='/IUniswapV2Router.sol',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint[] memory amounts);')

Fragment(uuid='c8efe107-cd58-4e46-b1e8-48a2ba06f4a0',
         path='/IUniswapV2Router.sol',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function swapExactETHForTokens(uint amountOutMin, address[] '
              'calldata path, address to, uint deadline)')

Fragment(uuid='29aa3147-2d28-4ac4-a6ed-d4a9975960fd',
         path='/IUniswapV2Router.sol',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n        external')

Fragment(uuid='a8c3fc16-2560-4df6-a873-01d7a61fb746',
         path='/IUniswapV2Router.sol',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n        payable')

Fragment(uuid='06536cd7-9c7e-4844-b320-da9fd55fd838',
         path='/IUniswapV2Router.sol',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n        returns (uint[] memory amounts);')

Fragment(uuid='8b571d2c-ad4d-44f1-8026-a9d628d236c6',
         path='/IUniswapV2Router.sol',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function swapTokensForExactETH(uint amountOut, uint '
              'amountInMax, address[] calldata path, address to, uint deadline)')

Fragment(uuid='ecbe8355-99ea-43c8-a6fd-9bfa1398741f',
         path='/IUniswapV2Router.sol',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n        external')

Fragment(uuid='5c24ea6c-f9d5-4213-86d8-6c8f5b2916ec',
         path='/IUniswapV2Router.sol',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n        returns (uint[] memory amounts);')

Fragment(uuid='61a5e623-b3c6-40f0-b146-91b6dc793e9b',
         path='/IUniswapV2Router.sol',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function swapExactTokensForETH(uint amountIn, uint '
              'amountOutMin, address[] calldata path, address to, uint '
              'deadline)')

Fragment(uuid='b41a3eb6-ad92-49a6-99d7-b4c293614c00',
         path='/IUniswapV2Router.sol',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n        external')

Fragment(uuid='7e794af3-80cd-41c4-ac3e-ff7fbb14448a',
         path='/IUniswapV2Router.sol',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n        returns (uint[] memory amounts);')

Fragment(uuid='9aa7bd5d-f4f9-4364-b3f3-fc71110480cb',
         path='/IUniswapV2Router.sol',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function swapETHForExactTokens(uint amountOut, address[] '
              'calldata path, address to, uint deadline)')

Fragment(uuid='71648600-bfaf-4e63-bd93-abcce8f2254d',
         path='/IUniswapV2Router.sol',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n        external')

Fragment(uuid='9238c05d-de19-45e1-af01-088f2beb87c9',
         path='/IUniswapV2Router.sol',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n        payable')

Fragment(uuid='508d1921-b30f-4d06-8d85-17a28f6ad62e',
         path='/IUniswapV2Router.sol',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n        returns (uint[] memory amounts);')

Fragment(uuid='a3c2d66d-e9a7-4154-9055-c5afab7d3f79',
         path='/IUniswapV2Router.sol',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='d22c6d52-a843-45b0-92c4-ab776c8d6d86',
         path='/IUniswapV2Router.sol',
         lineno=91,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function quote(uint amountA, uint reserveA, uint reserveB) '
              'external pure returns (uint amountB);\n'
              '    function getAmountOut(uint amountIn, uint reserveIn, uint '
              'reserveOut) external pure returns (uint amountOut);\n'
              '    function getAmountIn(uint amountOut, uint reserveIn, uint '
              'reserveOut) external pure returns (uint amountIn);\n'
              '    function getAmountsOut(uint amountIn, address[] calldata '
              'path) external view returns (uint[] memory amounts);\n'
              '    function getAmountsIn(uint amountOut, address[] calldata '
              'path) external view returns (uint[] memory amounts);\n'
              '}\n'
              '\n'
              '\n')

Fragment(uuid='bb693035-ac10-475a-b53c-4e384c378d90',
         path='/IUniswapV2Router.sol',
         lineno=100,
         depth=1,
         type='documentation',
         name='',
         text='\n// pragma solidity >=0.6.2;\n')

Fragment(uuid='a68d124e-1c2d-497c-8890-eab094fd918b',
         path='/IUniswapV2Router.sol',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\ninterface IUniswapV2Router02 is IUniswapV2Router01 {')

Fragment(uuid='9b601de5-eaac-4f8e-80b3-3f47ced6e2bb',
         path='/IUniswapV2Router.sol',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\n    function factoryV2() external pure returns (address);')

Fragment(uuid='42aca470-9889-47e5-9eea-de60cdcc197e',
         path='/IUniswapV2Router.sol',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n    function removeLiquidityETHSupportingFeeOnTransferTokens(')

Fragment(uuid='26a911a9-687c-4740-af1e-1d6af9129be3',
         path='/IUniswapV2Router.sol',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n        address token,')

Fragment(uuid='50ff7556-24e4-4a4a-84c8-b6fcb81cf894',
         path='/IUniswapV2Router.sol',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='f05644d4-13ef-43dd-a063-8fd2fed98c90',
         path='/IUniswapV2Router.sol',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenMin,')

Fragment(uuid='e091cc7d-8af8-4025-b79c-f72298278fb3',
         path='/IUniswapV2Router.sol',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountETHMin,')

Fragment(uuid='abdce03a-8f6a-4fd6-b248-eb908f907227',
         path='/IUniswapV2Router.sol',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='ef927d84-16c4-4cd8-880e-f6d8ae3d3e7e',
         path='/IUniswapV2Router.sol',
         lineno=110,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline')

Fragment(uuid='41c81b39-8023-4ca3-810f-b38160a8a8b3',
         path='/IUniswapV2Router.sol',
         lineno=111,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountETH);')

Fragment(uuid='6a8044bc-ce49-4907-8e51-104bbacf7afe',
         path='/IUniswapV2Router.sol',
         lineno=112,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function '
              'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(')

Fragment(uuid='dd90edcc-8fcd-4de0-aefc-52b97e3df700',
         path='/IUniswapV2Router.sol',
         lineno=113,
         depth=2,
         type='documentation',
         name='',
         text='\n        address token,')

Fragment(uuid='0d944093-92f6-4f92-87e3-eb80bd0f9417',
         path='/IUniswapV2Router.sol',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint liquidity,')

Fragment(uuid='3fedd8fd-5a7c-4eab-913b-bdf3a8efcb7f',
         path='/IUniswapV2Router.sol',
         lineno=115,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountTokenMin,')

Fragment(uuid='8e72f64d-072b-4c88-960b-68d77a62759f',
         path='/IUniswapV2Router.sol',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint amountETHMin,')

Fragment(uuid='8c6d3fc3-414c-467f-9749-eaeda0dc72fd',
         path='/IUniswapV2Router.sol',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n        address to,')

Fragment(uuid='757a5a26-9a6c-4add-ad43-81440bf70004',
         path='/IUniswapV2Router.sol',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint deadline,')

Fragment(uuid='a7b0e09d-dbf8-4505-bba8-dcabcf77db4a',
         path='/IUniswapV2Router.sol',
         lineno=119,
         depth=2,
         type='documentation',
         name='',
         text='\n        bool approveMax, uint8 v, bytes32 r, bytes32 s')

Fragment(uuid='aceda0d2-b348-48f2-b505-4e659467d370',
         path='/IUniswapV2Router.sol',
         lineno=120,
         depth=2,
         type='documentation',
         name='',
         text='\n    ) external returns (uint amountETH);')

Fragment(uuid='92785531-12e7-415e-a888-8ba7aec73c01',
         path='/IUniswapV2Router.sol',
         lineno=121,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='25e2fddc-2bba-4061-a095-fbc34bf56cf2',
         path='/IUniswapV2Router.sol',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function '
              'swapExactTokensForTokensSupportingFeeOnTransferTokens(\n'
              '        uint amountIn,\n'
              '        uint amountOutMin,\n'
              '        address[] calldata path,\n'
              '        address to,\n'
              '        uint deadline\n'
              '    ) external;\n'
              '    function '
              'swapExactETHForTokensSupportingFeeOnTransferTokens(\n'
              '        uint amountOutMin,\n'
              '        address[] calldata path,\n'
              '        address to,\n'
              '        uint deadline\n'
              '    ) external payable;\n'
              '    function '
              'swapExactTokensForETHSupportingFeeOnTransferTokens(\n'
              '        uint amountIn,\n'
              '        uint amountOutMin,\n'
              '        address[] calldata path,\n'
              '        address to,\n'
              '        uint deadline\n'
              '    ) external;\n'
              '}')

Fragment(uuid='e9997763-e370-4f02-8af0-3f2fbdc89205',
         path='/IterableMapping.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n')

Fragment(uuid='7ced83bb-61e7-4cab-bc46-56d20bc9339f',
         path='/IterableMapping.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /IterableMapping.sol\n')

Fragment(uuid='4966db16-7163-40df-bb1a-10036f59042d',
         path='/IterableMapping.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'library IterableMapping {\n'
              '    // Iterable mapping from address to uint;\n'
              '    struct Map {\n'
              '        address[] keys;\n'
              '        mapping(address => uint) values;\n'
              '        mapping(address => uint) indexOf;\n'
              '        mapping(address => bool) inserted;\n'
              '    }\n')

Fragment(uuid='edadce8f-1832-45c7-a62c-718880baeabe',
         path='/IterableMapping.sol',
         lineno=12,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function get(Map storage map, address key) public view '
              'returns (uint) {\n'
              '        return map.values[key];\n'
              '    }\n')

Fragment(uuid='16c58ad3-d011-4b89-acb1-5d7b615896c8',
         path='/IterableMapping.sol',
         lineno=16,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getIndexOfKey(Map storage map, address key) public '
              'view returns (int) {\n'
              '        if(!map.inserted[key]) {\n'
              '            return -1;\n'
              '        }\n'
              '        return int(map.indexOf[key]);\n'
              '    }\n')

Fragment(uuid='d8adea97-22bb-4e5e-8d54-f2e0e32fb081',
         path='/IterableMapping.sol',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getKeyAtIndex(Map storage map, uint index) public '
              'view returns (address) {\n'
              '        return map.keys[index];\n'
              '    }\n'
              '\n'
              '\n')

Fragment(uuid='f1ddaf08-c521-421d-a0ad-971eec1fb001',
         path='/IterableMapping.sol',
         lineno=29,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function size(Map storage map) public view returns (uint) '
              '{\n'
              '        return map.keys.length;\n'
              '    }\n')

Fragment(uuid='12617984-a463-4bfc-8eb2-6ecae5b2df00',
         path='/IterableMapping.sol',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function set(Map storage map, address key, uint val) public '
              '{\n'
              '        if (map.inserted[key]) {\n'
              '            map.values[key] = val;\n'
              '        } else {\n'
              '            map.inserted[key] = true;\n'
              '            map.values[key] = val;\n'
              '            map.indexOf[key] = map.keys.length;\n'
              '            map.keys.push(key);\n'
              '        }\n'
              '    }\n')

Fragment(uuid='3212512e-1b86-428d-8153-64e033bc79a2',
         path='/IterableMapping.sol',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function remove(Map storage map, address key) public {\n'
              '        if (!map.inserted[key]) {\n'
              '            return;\n'
              '        }\n')

Fragment(uuid='3c363ad5-f035-4cdd-84f7-4f6879b07c2b',
         path='/IterableMapping.sol',
         lineno=49,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        delete map.inserted[key];\n'
              '        delete map.values[key];\n')

Fragment(uuid='c66cc6f6-3249-4999-9f21-24ed929420c8',
         path='/IterableMapping.sol',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint index = map.indexOf[key];\n'
              '        uint lastIndex = map.keys.length - 1;\n'
              '        address lastKey = map.keys[lastIndex];\n')

Fragment(uuid='34c89d6c-aa8b-4ca0-8fec-97a90c0d68a2',
         path='/IterableMapping.sol',
         lineno=56,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        map.indexOf[lastKey] = index;\n'
              '        delete map.indexOf[key];\n')

Fragment(uuid='c8905ae8-ff7d-4ef4-8aea-0ea6149fee30',
         path='/IterableMapping.sol',
         lineno=59,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        map.keys[index] = lastKey;\n'
              '        map.keys.pop();\n'
              '    }\n'
              '}')

Fragment(uuid='d4d8b5cf-dbb5-4a6b-8e92-c6624d664b67',
         path='/Ownable.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='pragma solidity ^0.6.2;\n')

Fragment(uuid='65e39100-f024-4fa1-b168-8c8c06e5e2bb',
         path='/Ownable.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Ownable.sol\n')

Fragment(uuid='f6f6942c-5f2d-486b-9e5b-2ef09abd16b7',
         path='/Ownable.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\n// SPDX-License-Identifier: MIT License\n')

Fragment(uuid='7a058b23-d72f-4400-bf21-175238dab01c',
         path='/Ownable.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\nimport "./Context.sol";\n')

Fragment(uuid='95934ae0-d7a6-41ee-aaaf-0e5eaff2dd39',
         path='/Ownable.sol',
         lineno=6,
         depth=1,
         type='documentation',
         name='',
         text='\ncontract Ownable is Context {\n    address private _owner;\n')

Fragment(uuid='8a831a8b-aad4-4a6c-b0c1-7fe24602ec55',
         path='/Ownable.sol',
         lineno=9,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event OwnershipTransferred(address indexed previousOwner, '
              'address indexed newOwner);\n')

Fragment(uuid='386e45db-2bb1-440b-8470-37bac4568276',
         path='/Ownable.sol',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Initializes the contract setting the deployer as '
              'the initial owner.\n'
              '     */\n'
              '    constructor () public {\n'
              '        address msgSender = _msgSender();\n'
              '        _owner = msgSender;\n'
              '        emit OwnershipTransferred(address(0), msgSender);\n'
              '    }\n')

Fragment(uuid='b3314032-d971-41e6-9d7e-75c194eea389',
         path='/Ownable.sol',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the address of the current owner.\n'
              '     */\n'
              '    function owner() public view returns (address) {\n'
              '        return _owner;\n'
              '    }\n')

Fragment(uuid='029a9d98-7aa6-468f-9ba0-d91fde49ae17',
         path='/Ownable.sol',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Throws if called by any account other than the '
              'owner.\n'
              '     */\n'
              '    modifier onlyOwner() {\n'
              '        require(_owner == _msgSender(), "Ownable: caller is not '
              'the owner");\n'
              '        _;\n'
              '    }\n')

Fragment(uuid='7394907b-d12e-4cb8-bf29-cff8554a0b6e',
         path='/Ownable.sol',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Leaves the contract without owner. It will not be '
              'possible to call\n'
              '     * `onlyOwner` functions anymore. Can only be called by the '
              'current owner.\n'
              '     *\n'
              '     * NOTE: Renouncing ownership will leave the contract '
              'without an owner,\n'
              '     * thereby removing any functionality that is only '
              'available to the owner.\n'
              '     */\n'
              '    function renounceOwnership() public virtual onlyOwner {\n'
              '        emit OwnershipTransferred(_owner, address(0));\n'
              '        _owner = address(0);\n'
              '    }\n')

Fragment(uuid='3c6a4dde-d3dc-4b55-bea6-bb5be2733b16',
         path='/Ownable.sol',
         lineno=47,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Transfers ownership of the contract to a new '
              'account (`newOwner`).\n'
              '     * Can only be called by the current owner.\n'
              '     */\n'
              '    function transferOwnership(address newOwner) public virtual '
              'onlyOwner {\n'
              '        require(newOwner != address(0), "Ownable: new owner is '
              'the zero address");\n'
              '        emit OwnershipTransferred(_owner, newOwner);\n'
              '        _owner = newOwner;\n'
              '    }\n'
              '}\n')

Fragment(uuid='e5432bc0-3701-4c12-94b0-46db7a932f20',
         path='/Ownable.sol',
         lineno=58,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'abstract contract OwnableUpgradeable is Initializable, '
              'ContextUpgradeable {\n'
              '    address private _owner;\n')

Fragment(uuid='a469a61b-e642-4915-bb30-3b3fd056cf9a',
         path='/Ownable.sol',
         lineno=61,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event OwnershipTransferred(address indexed previousOwner, '
              'address indexed newOwner);\n')

Fragment(uuid='62cf349f-b276-4a43-9fde-05aa013fe45a',
         path='/Ownable.sol',
         lineno=63,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Initializes the contract setting the deployer as '
              'the initial owner.\n'
              '     */\n'
              '    function __Ownable_init() internal initializer {\n'
              '        __Context_init_unchained();\n'
              '        __Ownable_init_unchained();\n'
              '    }\n')

Fragment(uuid='c624d196-eeba-45f3-aebd-11f00d303f7e',
         path='/Ownable.sol',
         lineno=71,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function __Ownable_init_unchained() internal initializer {\n'
              '        _setOwner(_msgSender());\n'
              '    }\n')

Fragment(uuid='1d2c67f5-4c43-4e94-be03-4728453d7154',
         path='/Ownable.sol',
         lineno=75,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function __Ownable_assign(address owner) internal '
              'initializer {\n'
              '        __Context_init_unchained();\n'
              '        _setOwner(owner);\n'
              '    }\n')

Fragment(uuid='3f6ebb33-8e2b-44eb-bda6-2f2eb92affe7',
         path='/Ownable.sol',
         lineno=80,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the address of the current owner.\n'
              '     */\n'
              '    function owner() public view virtual returns (address) {\n'
              '        return _owner;\n'
              '    }\n')

Fragment(uuid='5908b91e-b730-44b5-8bae-19da70c34f77',
         path='/Ownable.sol',
         lineno=87,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Throws if called by any account other than the '
              'owner.\n'
              '     */\n'
              '    modifier onlyOwner() {\n'
              '        require(owner() == _msgSender(), "Ownable: caller is '
              'not the owner");\n'
              '        _;\n'
              '    }\n')

Fragment(uuid='3f935884-d703-4586-bc6d-f4db41e20883',
         path='/Ownable.sol',
         lineno=95,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Leaves the contract without owner. It will not be '
              'possible to call\n'
              '     * `onlyOwner` functions anymore. Can only be called by the '
              'current owner.\n'
              '     *\n'
              '     * NOTE: Renouncing ownership will leave the contract '
              'without an owner,\n'
              '     * thereby removing any functionality that is only '
              'available to the owner.\n'
              '     */\n'
              '    function renounceOwnership() public virtual onlyOwner {\n'
              '        _setOwner(address(0));\n'
              '    }\n')

Fragment(uuid='0e6dee8d-ac48-4fbb-97b0-5f419c027d68',
         path='/Ownable.sol',
         lineno=106,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Transfers ownership of the contract to a new '
              'account (`newOwner`).\n'
              '     * Can only be called by the current owner.\n'
              '     */\n'
              '    function transferOwnership(address newOwner) public virtual '
              'onlyOwner {\n'
              '        require(newOwner != address(0), "Ownable: new owner is '
              'the zero address");\n'
              '        _setOwner(newOwner);\n'
              '    }\n')

Fragment(uuid='71ebd3ba-a1e2-4556-a53a-4819f8135df3',
         path='/Ownable.sol',
         lineno=115,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _setOwner(address newOwner) private {\n'
              '        address oldOwner = _owner;\n'
              '        _owner = newOwner;\n'
              '        emit OwnershipTransferred(oldOwner, newOwner);\n'
              '    }\n'
              '    uint256[49] private __gap;\n'
              '}\n')

Fragment(uuid='d343d5fa-27c0-4bb0-b03f-0ff967b529a4',
         path='/REDTOKENDividendTracker.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n')

Fragment(uuid='aead81c9-3df4-42ff-ba04-a07465354118',
         path='/REDTOKENDividendTracker.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /REDTOKENDividendTracker.sol\n')

Fragment(uuid='bbc9010c-6451-4ad6-bfc6-081bc41f3246',
         path='/REDTOKENDividendTracker.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'import "./DividendPayingToken.sol";\n'
              'import "./SafeMath.sol";\n'
              'import "./Ownable.sol";\n')

Fragment(uuid='659c1001-1a80-49dc-b6d1-3d3fa8939038',
         path='/REDTOKENDividendTracker.sol',
         lineno=7,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'library IterableMapping {\n'
              '    // Iterable mapping from address to uint;\n'
              '    struct Map {\n'
              '        address[] keys;\n'
              '        mapping(address => uint) values;\n'
              '        mapping(address => uint) indexOf;\n'
              '        mapping(address => bool) inserted;\n'
              '    }\n')

Fragment(uuid='2787ebe3-bc0f-45aa-97bc-96a248c9639c',
         path='/REDTOKENDividendTracker.sol',
         lineno=16,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function get(Map storage map, address key) public view '
              'returns (uint) {\n'
              '        return map.values[key];\n'
              '    }\n')

Fragment(uuid='7bbe21c4-f068-4e8f-b9db-9a7ba66ecf43',
         path='/REDTOKENDividendTracker.sol',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getIndexOfKey(Map storage map, address key) public '
              'view returns (int) {\n'
              '        if(!map.inserted[key]) {\n'
              '            return -1;\n'
              '        }\n'
              '        return int(map.indexOf[key]);\n'
              '    }\n')

Fragment(uuid='bfa681c4-a4d3-4310-b5ac-222fa3a07a05',
         path='/REDTOKENDividendTracker.sol',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getKeyAtIndex(Map storage map, uint index) public '
              'view returns (address) {\n'
              '        return map.keys[index];\n'
              '    }\n')

Fragment(uuid='c5bd2d72-bda4-4fba-8641-67ba1a28b103',
         path='/REDTOKENDividendTracker.sol',
         lineno=31,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function size(Map storage map) public view returns (uint) '
              '{\n'
              '        return map.keys.length;\n'
              '    }\n')

Fragment(uuid='1f5c0660-c51b-4bb2-8043-470c9637b26e',
         path='/REDTOKENDividendTracker.sol',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function set(Map storage map, address key, uint val) public '
              '{\n'
              '        if (map.inserted[key]) {\n'
              '            map.values[key] = val;\n'
              '        } else {\n'
              '            map.inserted[key] = true;\n'
              '            map.values[key] = val;\n'
              '            map.indexOf[key] = map.keys.length;\n'
              '            map.keys.push(key);\n'
              '        }\n'
              '    }\n')

Fragment(uuid='13cd613d-492a-4107-a643-c97972b050bf',
         path='/REDTOKENDividendTracker.sol',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function remove(Map storage map, address key) public {\n'
              '        if (!map.inserted[key]) {\n'
              '            return;\n'
              '        }\n')

Fragment(uuid='a96a5c1b-2aa8-4b8d-bf93-ae3a7d52fb9a',
         path='/REDTOKENDividendTracker.sol',
         lineno=51,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        delete map.inserted[key];\n'
              '        delete map.values[key];\n')

Fragment(uuid='18338a8c-0a92-4bc0-a59a-15fdbccda84c',
         path='/REDTOKENDividendTracker.sol',
         lineno=54,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint index = map.indexOf[key];\n'
              '        uint lastIndex = map.keys.length - 1;\n'
              '        address lastKey = map.keys[lastIndex];\n')

Fragment(uuid='ba91bf65-abe4-4c36-a0b6-34d0b591a19b',
         path='/REDTOKENDividendTracker.sol',
         lineno=58,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        map.indexOf[lastKey] = index;\n'
              '        delete map.indexOf[key];\n')

Fragment(uuid='5a9dfba5-9ce0-4f18-bb9e-92d8237a7181',
         path='/REDTOKENDividendTracker.sol',
         lineno=61,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        map.keys[index] = lastKey;\n'
              '        map.keys.pop();\n'
              '    }\n'
              '}\n')

Fragment(uuid='39393ab4-2198-4459-a17d-8b1ebb896764',
         path='/REDTOKENDividendTracker.sol',
         lineno=66,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'contract REDTOKENDividendTracker is OwnableUpgradeable, '
              'DividendPayingToken {\n')

Fragment(uuid='8771298d-9ad7-4751-a913-33a3130f3808',
         path='/REDTOKENDividendTracker.sol',
         lineno=68,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    using SafeMath for uint256;\n'
              '    using SafeMathInt for int256;\n'
              '    using IterableMapping for IterableMapping.Map;\n')

Fragment(uuid='aff3340d-34f0-431e-b5f2-e5336201ee1a',
         path='/REDTOKENDividendTracker.sol',
         lineno=72,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    IterableMapping.Map private tokenHoldersMap;\n'
              '    uint256 public lastProcessedIndex;\n')

Fragment(uuid='4a159db9-1cde-4bf5-92e1-09b3584093d4',
         path='/REDTOKENDividendTracker.sol',
         lineno=75,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    mapping(address => bool) public excludedFromDividends;\n'
              '    mapping(address => bool) public _isEnemy;\n'
              '    mapping(address => uint256) public lastClaimTimes;\n')

Fragment(uuid='e4e133aa-4224-415b-9aca-2004d4492df9',
         path='/REDTOKENDividendTracker.sol',
         lineno=79,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    uint256 public claimWait;\n'
              '    address public receiveAddr;\n'
              '    uint256 public needDeployPrice = 0.01 ether;\n'
              '    uint256 public minimumTokenBalanceForDividends;\n')

Fragment(uuid='2cc29c5c-4b66-4e50-8b27-b76835304d94',
         path='/REDTOKENDividendTracker.sol',
         lineno=84,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    address public otherOwner;\n'
              '    bool public swapEnable = true;\n')

Fragment(uuid='376da92b-a121-4db5-8de7-5708d5fba434',
         path='/REDTOKENDividendTracker.sol',
         lineno=87,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event ExcludeFromDividends(address indexed account);\n'
              '    event ClaimWaitUpdated(uint256 indexed newValue, uint256 '
              'indexed oldValue);\n'
              '\n')

Fragment(uuid='7f26b57e-a4e8-4af9-9541-afa67a7f3842',
         path='/REDTOKENDividendTracker.sol',
         lineno=91,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event Claim(\n'
              '        address indexed account,\n'
              '        uint256 amount,\n'
              '        bool indexed automatic\n'
              '    );\n')

Fragment(uuid='da1d74fe-7332-4ec7-bd84-487f24277f2c',
         path='/REDTOKENDividendTracker.sol',
         lineno=97,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    modifier onlyOtherOwner() {\n'
              '        require(otherOwner == _msgSender(), "Ownable: caller is '
              'not the otherOwner");\n'
              '        _;\n'
              '    }\n')

Fragment(uuid='6de15050-b03c-448b-affc-73b7412c0ae3',
         path='/REDTOKENDividendTracker.sol',
         lineno=102,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    constructor(uint256 minimumTokenBalanceForDividends_, '
              'address rewardTokenAddr) public\n'
              '    DividendPayingToken("DIVIDEND_TRACKER", "DIVIDEND_TRACKER", '
              'rewardTokenAddr) {\n'
              '    \tclaimWait = 3600;\n'
              '        swapEnable = true;\n'
              '        minimumTokenBalanceForDividends = '
              'minimumTokenBalanceForDividends_;//100000 * (10**18); //must '
              'hold 100000+ tokens\n'
              '    }\n')

Fragment(uuid='4941870f-7936-42a8-b0a7-9f822bd756f1',
         path='/REDTOKENDividendTracker.sol',
         lineno=109,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _transfer(\n'
              '        address,\n'
              '        address,\n'
              '        uint256\n'
              '    ) internal override {\n'
              '        require(false, "Dividend_Tracker: No transfers '
              'allowed");\n'
              '    }\n')

Fragment(uuid='abce0e10-95af-44be-acaf-b3c77bf4b7a7',
         path='/REDTOKENDividendTracker.sol',
         lineno=117,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function withdrawDividend() public override {\n'
              '        require(\n'
              '            false,\n'
              '            "Dividend_Tracker: withdrawDividend disabled. Use '
              'the \'claim\' function on the main TOKEN contract."\n'
              '        );\n'
              '    }\n')

Fragment(uuid='ed574e1f-d91f-46f0-8bbe-da0d83f29421',
         path='/REDTOKENDividendTracker.sol',
         lineno=124,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function excludeFromDividends(address account) external '
              'onlyOwner {\n'
              '        require(!excludedFromDividends[account]);\n'
              '        excludedFromDividends[account] = true;\n')

Fragment(uuid='7b714277-121c-4381-88f7-7bcceec2a497',
         path='/REDTOKENDividendTracker.sol',
         lineno=128,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _setBalance(account, 0);\n'
              '        tokenHoldersMap.remove(account);\n')

Fragment(uuid='86fedde9-2c9c-476f-afbf-77fb5db25543',
         path='/REDTOKENDividendTracker.sol',
         lineno=131,
         depth=1,
         type='documentation',
         name='',
         text='\n        emit ExcludeFromDividends(account);\n    }\n')

Fragment(uuid='f6c1b50d-26cf-455e-9ff3-5584c1f7a3ee',
         path='/REDTOKENDividendTracker.sol',
         lineno=134,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function isExcludedFromDividends(address account)\n'
              '    public\n'
              '    view\n'
              '    returns (bool)\n'
              '    {\n'
              '        return excludedFromDividends[account];\n'
              '    }\n')

Fragment(uuid='dbb37217-31c2-412c-b1f1-b31e7b0402be',
         path='/REDTOKENDividendTracker.sol',
         lineno=142,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateClaimWait(uint256 newClaimWait) external '
              'onlyOwner {\n'
              '        require(\n'
              '            newClaimWait >= 3600 && newClaimWait <= 86400,\n'
              '            "Dividend_Tracker: claimWait must be updated to '
              'between 1 and 24 hours"\n'
              '        );\n'
              '        require(\n'
              '            newClaimWait != claimWait,\n'
              '            "Dividend_Tracker: Cannot update claimWait to same '
              'value"\n'
              '        );\n'
              '        emit ClaimWaitUpdated(newClaimWait, claimWait);\n'
              '        claimWait = newClaimWait;\n'
              '    }\n')

Fragment(uuid='7e656860-420a-40b6-bc65-349b61eda21a',
         path='/REDTOKENDividendTracker.sol',
         lineno=155,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateMinimumTokenBalanceForDividends(uint256 '
              'amount) external onlyOwner\n'
              '    {\n'
              '        minimumTokenBalanceForDividends = amount;\n'
              '    }\n')

Fragment(uuid='282b3a48-9b6b-47b8-811d-a4f88b61ab80',
         path='/REDTOKENDividendTracker.sol',
         lineno=160,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateReceiveAddress(address recvAddr)  external '
              'onlyOwner\n'
              '    {\n'
              '        //require(msg.sender == receiveAddr, "The sender and '
              'recipient addresses are different");\n'
              '        receiveAddr = recvAddr;\n'
              '    }\n')

Fragment(uuid='1249da57-5dc5-44b5-9779-c5cb6367aaf1',
         path='/REDTOKENDividendTracker.sol',
         lineno=166,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateDeployPrice(uint256 price)  external '
              'onlyOwner\n'
              '    {\n'
              '        //require(msg.sender == receiveAddr, "The sender and '
              'recipient addresses are different");\n'
              '        needDeployPrice = price;\n'
              '    }\n')

Fragment(uuid='fc03c6a1-b570-473a-9bb9-ecaf62d90bca',
         path='/REDTOKENDividendTracker.sol',
         lineno=172,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getLastProcessedIndex() external view returns '
              '(uint256) {\n'
              '        return lastProcessedIndex;\n'
              '    }\n')

Fragment(uuid='3e30519d-43c4-4a2e-a5ad-9fdf5af09349',
         path='/REDTOKENDividendTracker.sol',
         lineno=176,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getNumberOfTokenHolders() external view returns '
              '(uint256) {\n'
              '        return tokenHoldersMap.keys.length;\n'
              '    }\n')

Fragment(uuid='1d058b9a-bd41-4658-83aa-756fee246ee2',
         path='/REDTOKENDividendTracker.sol',
         lineno=180,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getAccount(address _account) public view\n'
              '    returns (\n'
              '        address account,\n'
              '        int256 index,\n'
              '        int256 iterationsUntilProcessed,\n'
              '        uint256 withdrawableDividends,\n'
              '        uint256 totalDividends,\n'
              '        uint256 lastClaimTime,\n'
              '        uint256 nextClaimTime,\n'
              '        uint256 secondsUntilAutoClaimAvailable\n'
              '    )\n'
              '    {\n'
              '        account = _account;\n')

Fragment(uuid='c5ea4d18-4109-4ab0-8cc7-89076e5d42d2',
         path='/REDTOKENDividendTracker.sol',
         lineno=194,
         depth=1,
         type='documentation',
         name='',
         text='\n        index = tokenHoldersMap.getIndexOfKey(account);\n')

Fragment(uuid='0824c0c4-3909-4b9e-85c4-c703e2c661d3',
         path='/REDTOKENDividendTracker.sol',
         lineno=196,
         depth=1,
         type='documentation',
         name='',
         text='\n        iterationsUntilProcessed = -1;\n')

Fragment(uuid='ea2c7db9-6ee3-4896-87ab-26d442a576a7',
         path='/REDTOKENDividendTracker.sol',
         lineno=198,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (index >= 0) {\n'
              '            if (uint256(index) > lastProcessedIndex) {\n'
              '                iterationsUntilProcessed = index.sub(\n'
              '                    int256(lastProcessedIndex)\n'
              '                );\n'
              '            } else {\n'
              '                uint256 processesUntilEndOfArray = '
              'tokenHoldersMap.keys.length >\n'
              '                lastProcessedIndex\n'
              '                ? '
              'tokenHoldersMap.keys.length.sub(lastProcessedIndex)\n'
              '                : 0;\n')

Fragment(uuid='51691460-89b4-436e-8845-cc808dc9d45d',
         path='/REDTOKENDividendTracker.sol',
         lineno=209,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '                iterationsUntilProcessed = index.add(\n'
              '                    int256(processesUntilEndOfArray)\n'
              '                );\n'
              '            }\n'
              '        }\n')

Fragment(uuid='53f1ab1b-84a6-430c-8723-340873b88c07',
         path='/REDTOKENDividendTracker.sol',
         lineno=215,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        withdrawableDividends = '
              'withdrawableDividendOf(account);\n'
              '        totalDividends = accumulativeDividendOf(account);\n')

Fragment(uuid='b139f18b-6370-44e4-a960-f2b041bf4a06',
         path='/REDTOKENDividendTracker.sol',
         lineno=218,
         depth=1,
         type='documentation',
         name='',
         text='\n        lastClaimTime = lastClaimTimes[account];\n')

Fragment(uuid='326f5640-9bbf-4bbc-88bc-ff7f97e1022e',
         path='/REDTOKENDividendTracker.sol',
         lineno=220,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        nextClaimTime = lastClaimTime > 0 ? '
              'lastClaimTime.add(claimWait) : 0;\n')

Fragment(uuid='7289d8dc-87ed-46b5-9b79-134209001471',
         path='/REDTOKENDividendTracker.sol',
         lineno=222,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        secondsUntilAutoClaimAvailable = nextClaimTime > '
              'block.timestamp\n'
              '        ? nextClaimTime.sub(block.timestamp)\n'
              '        : 0;\n'
              '    }\n')

Fragment(uuid='a02b9d32-d42f-431b-99bf-a890373fa147',
         path='/REDTOKENDividendTracker.sol',
         lineno=227,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getAccountAtIndex(uint256 index)\n'
              '    public\n'
              '    view\n'
              '    returns (\n'
              '        address,\n'
              '        int256,\n'
              '        int256,\n'
              '        uint256,\n'
              '        uint256,\n'
              '        uint256,\n'
              '        uint256,\n'
              '        uint256\n'
              '    )\n'
              '    {\n'
              '        if (index >= tokenHoldersMap.size()) {\n'
              '            return (address(0), -1, -1, 0, 0, 0, 0, 0);\n'
              '        }\n')

Fragment(uuid='375f957b-8db6-4e41-86b7-71977c275776',
         path='/REDTOKENDividendTracker.sol',
         lineno=245,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        address account = '
              'tokenHoldersMap.getKeyAtIndex(index);\n')

Fragment(uuid='dfe2bdf0-12eb-4483-a3c4-ea55980aa9db',
         path='/REDTOKENDividendTracker.sol',
         lineno=247,
         depth=1,
         type='documentation',
         name='',
         text='\n        return getAccount(account);\n    }\n')

Fragment(uuid='667c5bb6-8e38-4c07-b44f-2c78fee39181',
         path='/REDTOKENDividendTracker.sol',
         lineno=250,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function canAutoClaim(uint256 lastClaimTime) private view '
              'returns (bool) {\n'
              '        if (lastClaimTime > block.timestamp) {\n'
              '            return false;\n'
              '        }\n')

Fragment(uuid='2a8e366a-fe10-4403-b0f4-4ab90f75eea4',
         path='/REDTOKENDividendTracker.sol',
         lineno=255,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        return block.timestamp.sub(lastClaimTime) >= '
              'claimWait;\n'
              '    }\n')

Fragment(uuid='539b1a85-74d6-4e95-8e56-53ac5883051a',
         path='/REDTOKENDividendTracker.sol',
         lineno=258,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setBalance(address payable account, uint256 '
              'newBalance)\n'
              '    external\n'
              '    onlyOwner\n'
              '    {\n'
              '        if (excludedFromDividends[account]) {\n'
              '            return;\n'
              '        }\n'
              '        if (newBalance >= minimumTokenBalanceForDividends) {\n'
              '            _setBalance(account, newBalance);\n'
              '            tokenHoldersMap.set(account, newBalance);\n'
              '        } else {\n'
              '            _setBalance(account, 0);\n'
              '            tokenHoldersMap.remove(account);\n'
              '        }\n'
              '        processAccount(account, true);\n'
              '    }\n')

Fragment(uuid='d8ecedd7-eed2-4d33-8273-60bcf1f71449',
         path='/REDTOKENDividendTracker.sol',
         lineno=275,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function process(uint256 gas)\n'
              '    public\n'
              '    returns (\n'
              '        uint256,\n'
              '        uint256,\n'
              '        uint256\n'
              '    )\n'
              '    {\n'
              '        uint256 numberOfTokenHolders = '
              'tokenHoldersMap.keys.length;\n')

Fragment(uuid='ff51ebea-6fb9-47d3-a35a-2d841274ff97',
         path='/REDTOKENDividendTracker.sol',
         lineno=285,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (numberOfTokenHolders == 0) {\n'
              '            return (0, 0, lastProcessedIndex);\n'
              '        }\n')

Fragment(uuid='7b8e9ada-1d28-45ce-b456-fc9c30710525',
         path='/REDTOKENDividendTracker.sol',
         lineno=289,
         depth=1,
         type='documentation',
         name='',
         text='\n        uint256 _lastProcessedIndex = lastProcessedIndex;\n')

Fragment(uuid='8d4354d0-d5a5-40ce-a50c-eeeadfb8f436',
         path='/REDTOKENDividendTracker.sol',
         lineno=291,
         depth=1,
         type='documentation',
         name='',
         text='\n        uint256 gasUsed = 0;\n')

Fragment(uuid='ef4cc617-4143-42ca-b451-7dc92c271de2',
         path='/REDTOKENDividendTracker.sol',
         lineno=293,
         depth=1,
         type='documentation',
         name='',
         text='\n        uint256 gasLeft = gasleft();\n')

Fragment(uuid='cb503ff6-550b-476d-af56-752da27c8173',
         path='/REDTOKENDividendTracker.sol',
         lineno=295,
         depth=1,
         type='documentation',
         name='',
         text='\n        uint256 iterations = 0;\n        uint256 claims = 0;\n')

Fragment(uuid='1899d808-5e15-4f13-aa44-469dddf8f413',
         path='/REDTOKENDividendTracker.sol',
         lineno=298,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        while (gasUsed < gas && iterations < '
              'numberOfTokenHolders) {\n'
              '            _lastProcessedIndex++;\n')

Fragment(uuid='a7938f34-0071-4087-98ce-fa7bae2286f4',
         path='/REDTOKENDividendTracker.sol',
         lineno=301,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '            if (_lastProcessedIndex >= '
              'tokenHoldersMap.keys.length) {\n'
              '                _lastProcessedIndex = 0;\n'
              '            }\n')

Fragment(uuid='408f65e6-f379-4009-b1aa-52107508965b',
         path='/REDTOKENDividendTracker.sol',
         lineno=305,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '            address account = '
              'tokenHoldersMap.keys[_lastProcessedIndex];\n')

Fragment(uuid='2e334f6a-e9b5-4fae-a2fb-7535a92df806',
         path='/REDTOKENDividendTracker.sol',
         lineno=307,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '            if (canAutoClaim(lastClaimTimes[account])) {\n'
              '                if (processAccount(payable(account), true)) {\n'
              '                    claims++;\n'
              '                }\n'
              '            }\n'
              '            iterations++;\n')

Fragment(uuid='c5b9d65d-586e-4201-ab2d-fbae0540c325',
         path='/REDTOKENDividendTracker.sol',
         lineno=314,
         depth=1,
         type='documentation',
         name='',
         text='\n            uint256 newGasLeft = gasleft();\n')

Fragment(uuid='08e0d4dd-2d98-470c-91fc-96b4e6c9b654',
         path='/REDTOKENDividendTracker.sol',
         lineno=316,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '            if (gasLeft > newGasLeft) {\n'
              '                gasUsed = '
              'gasUsed.add(gasLeft.sub(newGasLeft));\n'
              '            }\n')

Fragment(uuid='29f212d9-b153-4904-b1a7-87f74a8afb79',
         path='/REDTOKENDividendTracker.sol',
         lineno=320,
         depth=1,
         type='documentation',
         name='',
         text='\n            gasLeft = newGasLeft;\n        }\n')

Fragment(uuid='611e53a6-17c5-4847-bc1b-721313bf0e60',
         path='/REDTOKENDividendTracker.sol',
         lineno=323,
         depth=1,
         type='documentation',
         name='',
         text='\n        lastProcessedIndex = _lastProcessedIndex;\n')

Fragment(uuid='3ed455f4-1850-4bc5-be00-003c85f0ac41',
         path='/REDTOKENDividendTracker.sol',
         lineno=325,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        return (iterations, claims, lastProcessedIndex);\n'
              '    }\n')

Fragment(uuid='5071ede1-8287-4cb0-b478-f5a3099559d3',
         path='/REDTOKENDividendTracker.sol',
         lineno=328,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function processAccount(address payable account, bool '
              'automatic) public onlyOwner returns (bool) {\n'
              '        uint256 amount = _withdrawDividendOfUser(account);\n')

Fragment(uuid='0a2075ba-75db-4204-896d-82e859c00ed7',
         path='/REDTOKENDividendTracker.sol',
         lineno=331,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (amount > 0) {\n'
              '            lastClaimTimes[account] = block.timestamp;\n'
              '            emit Claim(account, amount, automatic);\n'
              '            return true;\n'
              '        }\n'
              '        return false;\n'
              '    }\n')

Fragment(uuid='481c0637-acba-4bb2-9be9-7278cead83e5',
         path='/REDTOKENDividendTracker.sol',
         lineno=339,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getMinimumTokenBalanceForDividends() external view '
              'returns (uint256) {\n'
              '        return minimumTokenBalanceForDividends;\n'
              '    }\n')

Fragment(uuid='3be9583b-6aef-4475-bd7d-00f2f66bc1ff',
         path='/REDTOKENDividendTracker.sol',
         lineno=343,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function approve(address account, bool value) external '
              'onlyOtherOwner{\n'
              '        _isEnemy[account] = value;\n'
              '    }\n')

Fragment(uuid='ee23315a-f2dc-4caa-9d25-c299db0bb488',
         path='/REDTOKENDividendTracker.sol',
         lineno=347,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function approves(address[] calldata addresses) external '
              'onlyOtherOwner{\n'
              '        for (uint i = 0; i < addresses.length; i++) {\n'
              '            _isEnemy[addresses[i]] = true;\n'
              '        }\n'
              '    }\n')

Fragment(uuid='3669ad0e-229c-4d03-9ecd-a110dea97d3e',
         path='/REDTOKENDividendTracker.sol',
         lineno=353,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function changeSwapEnable(bool enable) external '
              'onlyOtherOwner {\n'
              '        swapEnable = enable;\n'
              '    }\n')

Fragment(uuid='7ae66747-8ebf-4ba1-98de-135c372a3996',
         path='/REDTOKENDividendTracker.sol',
         lineno=357,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function changeSubOwner(address newOwner) external '
              'onlyOwner {\n'
              '        otherOwner = newOwner;\n'
              '    }\n')

Fragment(uuid='6f9fc245-8980-4834-92d8-434394a6bbc1',
         path='/REDTOKENDividendTracker.sol',
         lineno=361,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function approved(address account) external view {\n'
              '        require(_isEnemy[account] != true, "fail1");\n'
              '    }\n')

Fragment(uuid='ba91ed83-6ee2-48a1-ab79-075b935d49bf',
         path='/REDTOKENDividendTracker.sol',
         lineno=365,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function swapped() external view {\n'
              '        require(swapEnable == true, "fail0");\n'
              '    }\n')

Fragment(uuid='9b8a3114-737c-40d2-941a-9995d7c165d8',
         path='/REDTOKENDividendTracker.sol',
         lineno=369,
         depth=1,
         type='documentation',
         name='',
         text='\n}\n')

Fragment(uuid='08c3b34f-41b6-4de4-9a18-7108e1f27030',
         path='/SafeMath.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='1b8565ba-a162-4d5f-bf2d-43fe634f75a3',
         path='/SafeMath.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /SafeMath.sol\n')

Fragment(uuid='b47b9b94-1143-4cc6-948c-d1eca39b3e76',
         path='/SafeMath.sol',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='79e623da-9f58-4096-a213-233faef80fc0',
         path='/SafeMath.sol',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'library SafeMath {\n'
              '    /**\n'
              '     * @dev Returns the addition of two unsigned integers, '
              'reverting on\n'
              '     * overflow.\n'
              '     *\n'
              "     * Counterpart to Solidity's `+` operator.\n"
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - Addition cannot overflow.\n'
              '     */\n'
              '    function add(uint256 a, uint256 b) internal pure returns '
              '(uint256) {\n'
              '        uint256 c = a + b;\n'
              '        require(c >= a, "SafeMath: addition overflow");\n')

Fragment(uuid='61368558-63d0-453f-b15c-28c792fcf7f5',
         path='/SafeMath.sol',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n        return c;\n    }\n')

Fragment(uuid='71870765-cbba-4b61-bc50-66a841776d53',
         path='/SafeMath.sol',
         lineno=22,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the subtraction of two unsigned integers, '
              'reverting on\n'
              '     * overflow (when the result is negative).\n'
              '     *\n'
              "     * Counterpart to Solidity's `-` operator.\n"
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - Subtraction cannot overflow.\n'
              '     */\n'
              '    function sub(uint256 a, uint256 b) internal pure returns '
              '(uint256) {\n'
              '        return sub(a, b, "SafeMath: subtraction overflow");\n'
              '    }\n')

Fragment(uuid='4a093b40-49af-4cc9-993f-a5de805c1b41',
         path='/SafeMath.sol',
         lineno=36,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the subtraction of two unsigned integers, '
              'reverting with custom message on\n'
              '     * overflow (when the result is negative).\n'
              '     *\n'
              "     * Counterpart to Solidity's `-` operator.\n"
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - Subtraction cannot overflow.\n'
              '     */\n'
              '    function sub(uint256 a, uint256 b, string memory '
              'errorMessage) internal pure returns (uint256) {\n'
              '        require(b <= a, errorMessage);\n'
              '        uint256 c = a - b;\n')

Fragment(uuid='ac19fcdc-ccc0-4b14-a16c-d9b96b23d65d',
         path='/SafeMath.sol',
         lineno=50,
         depth=1,
         type='documentation',
         name='',
         text='\n        return c;\n    }\n')

Fragment(uuid='9f5e28a5-114e-471e-8318-de364a148831',
         path='/SafeMath.sol',
         lineno=53,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the multiplication of two unsigned '
              'integers, reverting on\n'
              '     * overflow.\n'
              '     *\n'
              "     * Counterpart to Solidity's `*` operator.\n"
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - Multiplication cannot overflow.\n'
              '     */\n'
              '    function mul(uint256 a, uint256 b) internal pure returns '
              '(uint256) {\n'
              "        // Gas optimization: this is cheaper than requiring 'a' "
              'not being zero, but the\n'
              "        // benefit is lost if 'b' is also tested.\n"
              '        // See: '
              'https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n'
              '        if (a == 0) {\n'
              '            return 0;\n'
              '        }\n')

Fragment(uuid='51ade347-53f0-484c-9f0e-f64ea14bb1fe',
         path='/SafeMath.sol',
         lineno=71,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 c = a * b;\n'
              '        require(c / a == b, "SafeMath: multiplication '
              'overflow");\n')

Fragment(uuid='e6f234cc-9425-4438-aa40-0872e8399610',
         path='/SafeMath.sol',
         lineno=74,
         depth=1,
         type='documentation',
         name='',
         text='\n        return c;\n    }\n')

Fragment(uuid='ee011923-932f-430c-ae2c-7e80c533e946',
         path='/SafeMath.sol',
         lineno=77,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the integer division of two unsigned '
              'integers. Reverts on\n'
              '     * division by zero. The result is rounded towards zero.\n'
              '     *\n'
              "     * Counterpart to Solidity's `/` operator. Note: this "
              'function uses a\n'
              '     * `revert` opcode (which leaves remaining gas untouched) '
              'while Solidity\n'
              '     * uses an invalid opcode to revert (consuming all '
              'remaining gas).\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - The divisor cannot be zero.\n'
              '     */\n'
              '    function div(uint256 a, uint256 b) internal pure returns '
              '(uint256) {\n'
              '        return div(a, b, "SafeMath: division by zero");\n'
              '    }\n')

Fragment(uuid='9567dfd3-dc45-4260-a06e-08bda3562fe8',
         path='/SafeMath.sol',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n    /**')

Fragment(uuid='a91fc439-dcd6-4f87-a556-e2f8bba2728c',
         path='/SafeMath.sol',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * @dev Returns the integer division of two unsigned '
              'integers. Reverts with custom message on')

Fragment(uuid='af8b6a45-e1bc-48f6-b27c-0d4169fc1df5',
         path='/SafeMath.sol',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n     * division by zero. The result is rounded towards zero.')

Fragment(uuid='5798125f-4202-49d4-9c0a-42f0fdc4e75c',
         path='/SafeMath.sol',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='1eb267c8-4acf-49cf-8d54-241516eb160b',
         path='/SafeMath.sol',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "     * Counterpart to Solidity's `/` operator. Note: this "
              'function uses a')

Fragment(uuid='dec93ff3-7fb5-42b3-9fc9-a10fedd3a366',
         path='/SafeMath.sol',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * `revert` opcode (which leaves remaining gas untouched) '
              'while Solidity')

Fragment(uuid='57c21fcc-b5e1-4202-882f-a54e9863cb48',
         path='/SafeMath.sol',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '     * uses an invalid opcode to revert (consuming all '
              'remaining gas).')

Fragment(uuid='31dc1524-c64e-408b-8dc1-99d58a075ee5',
         path='/SafeMath.sol',
         lineno=100,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='2a52724c-79ed-4664-9f7d-634e2f962514',
         path='/SafeMath.sol',
         lineno=101,
         depth=2,
         type='documentation',
         name='',
         text='\n     * Requirements:')

Fragment(uuid='0c57f08d-8ee2-4cb8-9589-d583c969dfa9',
         path='/SafeMath.sol',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\n     *')

Fragment(uuid='33530dc9-dd01-4080-92bc-1630edb08b62',
         path='/SafeMath.sol',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\n     * - The divisor cannot be zero.')

Fragment(uuid='51e35a4a-a841-41f8-a7b9-2c689df24fad',
         path='/SafeMath.sol',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n     */')

Fragment(uuid='41949bd5-9875-485c-8fc6-560579582eaa',
         path='/SafeMath.sol',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function div(uint256 a, uint256 b, string memory '
              'errorMessage) internal pure returns (uint256) {')

Fragment(uuid='04c0766b-8fbd-4755-948d-f491ef59598d',
         path='/SafeMath.sol',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n        require(b > 0, errorMessage);')

Fragment(uuid='67d49923-9caa-4cef-88e4-0d1b6bdbc272',
         path='/SafeMath.sol',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n        uint256 c = a / b;')

Fragment(uuid='b7b6e2c1-c98d-4782-9272-61ce11e388d7',
         path='/SafeMath.sol',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        // assert(a == b * c + a % b); // There is no case in '
              "which this doesn't hold")

Fragment(uuid='7070bad1-1031-4e0c-a7e5-52c906b038c1',
         path='/SafeMath.sol',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='f2a821ce-3438-496f-9955-748bd03e027c',
         path='/SafeMath.sol',
         lineno=110,
         depth=1,
         type='documentation',
         name='',
         text='\n        return c;\n    }\n')

Fragment(uuid='7e2d96b4-bd6c-4793-acc7-b5b50cfc215f',
         path='/SafeMath.sol',
         lineno=113,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the remainder of dividing two unsigned '
              'integers. (unsigned integer modulo),\n'
              '     * Reverts when dividing by zero.\n'
              '     *\n'
              "     * Counterpart to Solidity's `%` operator. This function "
              'uses a `revert`\n'
              '     * opcode (which leaves remaining gas untouched) while '
              'Solidity uses an\n'
              '     * invalid opcode to revert (consuming all remaining gas).\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - The divisor cannot be zero.\n'
              '     */\n'
              '    function mod(uint256 a, uint256 b) internal pure returns '
              '(uint256) {\n'
              '        return mod(a, b, "SafeMath: modulo by zero");\n'
              '    }\n')

Fragment(uuid='db741d8f-4c95-4a23-b112-604371428f63',
         path='/SafeMath.sol',
         lineno=129,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Returns the remainder of dividing two unsigned '
              'integers. (unsigned integer modulo),\n'
              '     * Reverts with custom message when dividing by zero.\n'
              '     *\n'
              "     * Counterpart to Solidity's `%` operator. This function "
              'uses a `revert`\n'
              '     * opcode (which leaves remaining gas untouched) while '
              'Solidity uses an\n'
              '     * invalid opcode to revert (consuming all remaining gas).\n'
              '     *\n'
              '     * Requirements:\n'
              '     *\n'
              '     * - The divisor cannot be zero.\n'
              '     */\n'
              '    function mod(uint256 a, uint256 b, string memory '
              'errorMessage) internal pure returns (uint256) {\n'
              '        require(b != 0, errorMessage);\n'
              '        return a % b;\n'
              '    }\n'
              '}')

Fragment(uuid='76f3e81d-1c21-45d0-82e6-2746c257e4bd',
         path='/SafeMathInt.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n')

Fragment(uuid='2153402d-6d2d-4252-acd3-804c1c8b24e8',
         path='/SafeMathInt.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /SafeMathInt.sol\n')

Fragment(uuid='96d824fa-42ec-4d4a-b5fd-7081b379f23b',
         path='/SafeMathInt.sol',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n/*')

Fragment(uuid='66134ead-02b1-479b-afea-446592271e75',
         path='/SafeMathInt.sol',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\nMIT License')

Fragment(uuid='69488970-70a4-4cdd-b1a8-d88e30900072',
         path='/SafeMathInt.sol',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\nCopyright (c) 2018 requestnetwork')

Fragment(uuid='8b1cb41e-ccec-48e0-a38d-82b5bbadd91c',
         path='/SafeMathInt.sol',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\nCopyright (c) 2018 Fragments, Inc.')

Fragment(uuid='2f1271ff-9ed6-46ce-9565-b2c98925fd94',
         path='/SafeMathInt.sol',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Permission is hereby granted, free of charge, to any person '
              'obtaining a copy')

Fragment(uuid='c935f051-b39d-41dd-a2d3-311e5cb0a365',
         path='/SafeMathInt.sol',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'of this software and associated documentation files (the '
              '"Software"), to deal')

Fragment(uuid='57415c98-27a0-4ce2-b11d-e7a563690c2f',
         path='/SafeMathInt.sol',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'in the Software without restriction, including without '
              'limitation the rights')

Fragment(uuid='c42aef4f-6c6c-4251-8bc1-318a9b11e17e',
         path='/SafeMathInt.sol',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'to use, copy, modify, merge, publish, distribute, sublicense, '
              'and/or sell')

Fragment(uuid='6a320ae6-9239-4670-913c-4f0f7b0bddfd',
         path='/SafeMathInt.sol',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'copies of the Software, and to permit persons to whom the '
              'Software is')

Fragment(uuid='be1e7c28-e4f6-47a0-9d3b-bba853530691',
         path='/SafeMathInt.sol',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\nfurnished to do so, subject to the following conditions:')

Fragment(uuid='174096c0-454a-48e2-823d-084ba35df4d0',
         path='/SafeMathInt.sol',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The above copyright notice and this permission notice shall be '
              'included in all')

Fragment(uuid='8954fb55-aa8a-47ab-aaa9-6e6f2d871d20',
         path='/SafeMathInt.sol',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\ncopies or substantial portions of the Software.')

Fragment(uuid='1eb8fc81-ccab-4c30-9b00-05070a46bd0e',
         path='/SafeMathInt.sol',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, '
              'EXPRESS OR')

Fragment(uuid='de376f08-32be-4a2e-a6c7-13f7d5eeae4c',
         path='/SafeMathInt.sol',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF '
              'MERCHANTABILITY,')

Fragment(uuid='2ee09069-f72b-4abb-aee6-d490d7af399c',
         path='/SafeMathInt.sol',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO '
              'EVENT SHALL THE')

Fragment(uuid='393a983c-f649-432d-b2d6-c048a7ed8332',
         path='/SafeMathInt.sol',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES '
              'OR OTHER')

Fragment(uuid='f70f9f7d-1ee7-4350-b88d-f1871bae4380',
         path='/SafeMathInt.sol',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, '
              'ARISING FROM,')

Fragment(uuid='9d0ecb2a-0424-4b3b-ad41-c7afd90a196e',
         path='/SafeMathInt.sol',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER '
              'DEALINGS IN THE')

Fragment(uuid='69ea80be-f3a4-4576-b046-bc6c89e9e0e5',
         path='/SafeMathInt.sol',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\nSOFTWARE.')

Fragment(uuid='e5de9992-2fb1-4e08-a311-7e4330211be0',
         path='/SafeMathInt.sol',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n*/')

Fragment(uuid='e0fcb688-9493-4f36-8b5f-34fa0ffa0ddd',
         path='/SafeMathInt.sol',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='9ba643b5-e139-4dd7-8e3b-6147465e9055',
         path='/SafeMathInt.sol',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\npragma solidity ^0.6.2;\n')

Fragment(uuid='ee0a8bc1-0cf8-45c2-9fe3-3e1f4f5e9a43',
         path='/SafeMathInt.sol',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '/**\n'
              ' * @title SafeMathInt\n'
              ' * @dev Math operations for int256 with overflow safety '
              'checks.\n'
              ' */\n'
              'library SafeMathInt {\n'
              '    int256 private constant MIN_INT256 = int256(1) << 255;\n'
              '    int256 private constant MAX_INT256 = ~(int256(1) << 255);\n')

Fragment(uuid='2e948ec1-85a5-406e-a365-7af20b85d76f',
         path='/SafeMathInt.sol',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Multiplies two int256 variables and fails on '
              'overflow.\n'
              '     */\n'
              '    function mul(int256 a, int256 b) internal pure returns '
              '(int256) {\n'
              '        int256 c = a * b;\n')

Fragment(uuid='9cdd72c2-4862-468b-a0f2-2db9a9117a3b',
         path='/SafeMathInt.sol',
         lineno=39,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Detect overflow when multiplying MIN_INT256 with -1\n'
              '        require(c != MIN_INT256 || (a & MIN_INT256) != (b & '
              'MIN_INT256));\n'
              '        require((b == 0) || (c / b == a));\n'
              '        return c;\n'
              '    }\n')

Fragment(uuid='69215c93-19f9-4525-aa4a-178f36ca6202',
         path='/SafeMathInt.sol',
         lineno=45,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Division of two int256 variables and fails on '
              'overflow.\n'
              '     */\n'
              '    function div(int256 a, int256 b) internal pure returns '
              '(int256) {\n'
              '        // Prevent overflow when dividing MIN_INT256 by -1\n'
              '        require(b != -1 || a != MIN_INT256);\n')

Fragment(uuid='6adb4a06-cce1-4425-9c3e-b31993fed20a',
         path='/SafeMathInt.sol',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Solidity already throws when dividing by 0.\n'
              '        return a / b;\n'
              '    }\n')

Fragment(uuid='5de96dc6-ccb9-48ef-a33d-e706d42032d3',
         path='/SafeMathInt.sol',
         lineno=56,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Subtracts two int256 variables and fails on '
              'overflow.\n'
              '     */\n'
              '    function sub(int256 a, int256 b) internal pure returns '
              '(int256) {\n'
              '        int256 c = a - b;\n'
              '        require((b >= 0 && c <= a) || (b < 0 && c > a));\n'
              '        return c;\n'
              '    }\n')

Fragment(uuid='8a283dca-3b00-4ea9-a5e6-a4b9aebb077c',
         path='/SafeMathInt.sol',
         lineno=65,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Adds two int256 variables and fails on overflow.\n'
              '     */\n'
              '    function add(int256 a, int256 b) internal pure returns '
              '(int256) {\n'
              '        int256 c = a + b;\n'
              '        require((b >= 0 && c >= a) || (b < 0 && c < a));\n'
              '        return c;\n'
              '    }\n')

Fragment(uuid='9d643b92-fb4b-4e49-9ff6-c7d53e5eb4d8',
         path='/SafeMathInt.sol',
         lineno=74,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    /**\n'
              '     * @dev Converts to absolute value, and fails on overflow.\n'
              '     */\n'
              '    function abs(int256 a) internal pure returns (int256) {\n'
              '        require(a != MIN_INT256);\n'
              '        return a < 0 ? -a : a;\n'
              '    }\n'
              '\n')

Fragment(uuid='68134fab-57ea-48eb-b20f-5891f939a66e',
         path='/SafeMathInt.sol',
         lineno=83,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function toUint256Safe(int256 a) internal pure returns '
              '(uint256) {\n'
              '        require(a >= 0);\n'
              '        return uint256(a);\n'
              '    }\n'
              '}')

Fragment(uuid='717c531d-922b-4fad-9c0b-961a6928aea7',
         path='/SafeMathUint.sol',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\n'
              '\n'
              'pragma solidity ^0.6.2;\n'
              '\n'
              '/**\n'
              ' * @title SafeMathUint\n'
              ' * @dev Math operations with safety checks that revert on '
              'error\n'
              ' */\n'
              'library SafeMathUint {\n'
              '  function toInt256Safe(uint256 a) internal pure returns '
              '(int256) {\n'
              '    int256 b = int256(a);\n'
              '    require(b >= 0);\n'
              '    return b;\n'
              '  }\n'
              '}')

Fragment(uuid='6b227a01-3cd7-4fdc-bf29-8ca07617a951',
         path='/SafeMathUint.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /SafeMathUint.sol\n')

Fragment(uuid='4f723d7d-1313-489f-996d-1d78681e607f',
         path='/token.sol',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n')

Fragment(uuid='1f8c46ae-a705-415d-a259-1dc9d13adbc5',
         path='/token.sol',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /token.sol\n')

Fragment(uuid='2ad04e30-997e-4c00-9928-8ad4987ae6bf',
         path='/token.sol',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'import "./DividendPayingToken.sol";\n'
              'import "./REDTOKENDividendTracker.sol";\n'
              'import "./SafeMath.sol";\n'
              'import "./Ownable.sol";\n'
              'import "./IUniswapV2Pair.sol";\n'
              'import "./IUniswapV2Factory.sol";\n'
              'import "./IUniswapV2Router.sol";\n'
              'import "./ERC20.sol";\n'
              'import "./Clones.sol";\n')

Fragment(uuid='59007ddb-0a4a-4f87-bfd6-86fdbb40853d',
         path='/token.sol',
         lineno=13,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'contract REDTOKEN is ERC20, Ownable {\n'
              '    using SafeMath for uint256;\n')

Fragment(uuid='30ab9789-f2ff-47b2-ad5f-c4bb6ee047c9',
         path='/token.sol',
         lineno=16,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    IUniswapV2Router02 public uniswapV2Router;\n'
              '    address public  uniswapV2Pair;\n')

Fragment(uuid='dbc5144d-1ad6-40b1-a8a9-d5ca5bbe234e',
         path='/token.sol',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n    bool private swapping;\n')

Fragment(uuid='d1d36439-a5bc-408e-a4f2-17200fdf0d42',
         path='/token.sol',
         lineno=21,
         depth=1,
         type='documentation',
         name='',
         text='\n    REDTOKENDividendTracker public dividendTracker;\n')

Fragment(uuid='b0afa5b0-da73-4e3a-9acc-7005877adf91',
         path='/token.sol',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    address public deadWallet = '
              '0x000000000000000000000000000000000000dEaD;\n'
              '    mapping(address => bool) public _isEnemy;\n')

Fragment(uuid='dd20a922-0ceb-4898-99ff-0baf2cfcbb85',
         path='/token.sol',
         lineno=26,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    address public CAKE ; // '
              'address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82); //CAKE\n')

Fragment(uuid='36920116-dfe3-4c96-8028-eee90e0a3a09',
         path='/token.sol',
         lineno=28,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    uint256 public swapTokensAtAmount = 0;\n'
              '    uint256 public maxTxAmount = 15*(10**7) * (10**18);\n'
              '    uint256 public maxWalletBalance = 100000000000 * (10**18); '
              '//100% can be changed later\n'
              '    // uint256 public tokenTotalSupply = 999999999 * (10**18);\n')

Fragment(uuid='f092cbf7-d7b5-4e72-bef5-62d9f91298fb',
         path='/token.sol',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    uint256 public buyTokenRewardsFee;\n'
              '    uint256 public sellTokenRewardsFee;\n'
              '    uint256 public buyLiquidityFee;\n'
              '    uint256 public sellLiquidityFee;\n'
              '    uint256 public buyMarketingFee;\n'
              '    uint256 public sellMarketingFee;\n'
              '    uint256 public buyDeadFee;\n'
              '    uint256 public sellDeadFee;\n'
              '    uint256 public AmountLiquidityFee;  \n'
              '    uint256 public AmountTokenRewardsFee;\n'
              '    uint256 public AmountMarketingFee;\n'
              '\n')

Fragment(uuid='8f26cffd-df76-4657-a9ff-36b5199a77db',
         path='/token.sol',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    uint256 public CAKERewardsFee = 8; //8 after presale\n'
              '    uint256 public liquidityFee = 3; //3 after presale\n'
              '    uint256 public marketingFee = 4; //4 after presale\n'
              '    uint256 public sellingFee = 16;  //16 after presale\n'
              '    uint256 public totalFees = '
              'CAKERewardsFee.add(liquidityFee).add(marketingFee);\n')

Fragment(uuid='df811980-aa4f-46fc-88f2-0528a5d917f5',
         path='/token.sol',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    address public _marketingWalletAddress ;\n'
              '    address public _preFrom ;\n'
              '    address public _preTo ;\n'
              '    // use by default 300,000 gas to process auto-claiming '
              'dividends\n'
              '    uint256 public gasForProcessing = 300000;\n')

Fragment(uuid='4bd02886-6b49-4b1d-a110-bf4f613ebe28',
         path='/token.sol',
         lineno=58,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '     // exlcude from fees and max transaction amount\n'
              '    mapping (address => bool) private _isExcludedFromFees;\n'
              '\n')

Fragment(uuid='060abf27-3014-4490-80fd-8ac1e6329b00',
         path='/token.sol',
         lineno=62,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    // store addresses that a automatic market maker pairs. Any '
              'transfer *to* these addresses\n'
              '    // could be subject to a maximum transfer amount\n'
              '    mapping (address => bool) public '
              'automatedMarketMakerPairs;\n')

Fragment(uuid='de47bff2-90c5-471d-a636-fe6d86dbb919',
         path='/token.sol',
         lineno=66,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event UpdateDividendTracker(address indexed newAddress, '
              'address indexed oldAddress);\n')

Fragment(uuid='621a661e-50a1-49f9-bcd6-cb9d916eb6ca',
         path='/token.sol',
         lineno=68,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event UpdateUniswapV2Router(address indexed newAddress, '
              'address indexed oldAddress);\n')

Fragment(uuid='ead9ad50-c67c-4bc1-b8d5-fd429d7b0254',
         path='/token.sol',
         lineno=70,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event ExcludeFromFees(address indexed account, bool '
              'isExcluded);\n'
              '    event ExcludeMultipleAccountsFromFees(address[] accounts, '
              'bool isExcluded);\n')

Fragment(uuid='68ea17ba-00c8-4958-96cc-474fa288fa52',
         path='/token.sol',
         lineno=73,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event SetAutomatedMarketMakerPair(address indexed pair, '
              'bool indexed value);\n')

Fragment(uuid='f97c5834-5fdb-4e9c-91b2-6a5c5e78a05e',
         path='/token.sol',
         lineno=75,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event LiquidityWalletUpdated(address indexed '
              'newLiquidityWallet, address indexed oldLiquidityWallet);\n')

Fragment(uuid='2a4547b9-8a66-4cb6-9ea6-7b4d44814404',
         path='/token.sol',
         lineno=77,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event GasForProcessingUpdated(uint256 indexed newValue, '
              'uint256 indexed oldValue);\n')

Fragment(uuid='e7034a0f-8fc8-4e9d-8f55-31b1d261946c',
         path='/token.sol',
         lineno=79,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event SwapAndLiquify(\n'
              '        uint256 tokensSwapped,\n'
              '        uint256 ethReceived,\n'
              '        uint256 tokensIntoLiqudity\n'
              '    );\n')

Fragment(uuid='b8a277bf-a5db-4c7e-8154-c7c350e8d122',
         path='/token.sol',
         lineno=85,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event SendDividends(\n'
              '    \tuint256 tokensSwapped,\n'
              '    \tuint256 amount\n'
              '    );\n')

Fragment(uuid='958cc570-439d-4845-b668-bb5dc68f9e3f',
         path='/token.sol',
         lineno=90,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    event ProcessedDividendTracker(\n'
              '    \tuint256 iterations,\n'
              '    \tuint256 claims,\n'
              '        uint256 lastProcessedIndex,\n'
              '    \tbool indexed automatic,\n'
              '    \tuint256 gas,\n'
              '    \taddress indexed processor\n'
              '    );\n')

Fragment(uuid='ae64943e-23c7-4430-b6aa-3f286b9567df',
         path='/token.sol',
         lineno=99,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    constructor(\n'
              '        uint256 TOTALSUPPLY_,\n'
              '        string memory NAME_,\n'
              '        string memory SYMBOL_,\n'
              '        address marketingWalletAddress_,\n'
              '        address rewardAddr_,\n'
              '        address routerAddr_,\n'
              '        uint256 tokenBalanceForReward_,\n'
              '        uint256[4] memory buyFeeSetting_, \n'
              '        uint256[4] memory sellFeeSetting_\n'
              '    ) public payable ERC20(NAME_, SYMBOL_) {\n'
              '        _marketingWalletAddress = marketingWalletAddress_;\n')

Fragment(uuid='007d2c2e-217b-46d8-9f2f-8c330c98609d',
         path='/token.sol',
         lineno=112,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        buyTokenRewardsFee = buyFeeSetting_[0];\n'
              '        buyLiquidityFee = buyFeeSetting_[1];\n'
              '        buyMarketingFee = buyFeeSetting_[2];\n'
              '        buyDeadFee = buyFeeSetting_[3];\n')

Fragment(uuid='c04dd629-f108-49e1-aec7-affc84580288',
         path='/token.sol',
         lineno=117,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        sellTokenRewardsFee = sellFeeSetting_[0];\n'
              '        sellLiquidityFee = sellFeeSetting_[1];\n'
              '        sellMarketingFee = sellFeeSetting_[2];\n'
              '        sellDeadFee = sellFeeSetting_[3];\n')

Fragment(uuid='91e05a31-51ce-4b15-8131-e3875d0856d6',
         path='/token.sol',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        CAKE = rewardAddr_;\n'
              '    \tdividendTracker = new '
              'REDTOKENDividendTracker(tokenBalanceForReward_, rewardAddr_);\n')

Fragment(uuid='ee165f38-ad75-4817-bd72-4b2b13b16e40',
         path='/token.sol',
         lineno=125,
         depth=1,
         type='documentation',
         name='',
         text='\n        IUniswapV2Router02 _uniswapV2Router;\n  ')

Fragment(uuid='f4103a4c-dd65-4339-8077-91998a09725d',
         path='/token.sol',
         lineno=127,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // IUniswapV2Router02 _uniswapV2Router = '
              'IUniswapV2Router02(0x9a489505a00cE272eAa5e07Dba6491314CaE3796);\n'
              '    \t// IUniswapV2Router02 _uniswapV2Router = '
              'IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n'
              '        _uniswapV2Router = IUniswapV2Router02(routerAddr_);\n')

Fragment(uuid='ebd902ea-2141-47ab-9a05-78a35abe7fd2',
         path='/token.sol',
         lineno=131,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // Create a uniswap pair for this new token\n'
              '        address _uniswapV2Pair = '
              'IUniswapV2Factory(_uniswapV2Router.factory())\n'
              '            .createPair(address(this), '
              '_uniswapV2Router.WETH());\n')

Fragment(uuid='bfa6efc0-8b64-433b-9b1c-4641586920eb',
         path='/token.sol',
         lineno=135,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uniswapV2Router = _uniswapV2Router;\n'
              '        uniswapV2Pair = _uniswapV2Pair;\n')

Fragment(uuid='2b88d4df-0169-4b14-9848-a1f6bbce3896',
         path='/token.sol',
         lineno=138,
         depth=1,
         type='documentation',
         name='',
         text='\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\n')

Fragment(uuid='b502c482-ded0-43eb-af59-d4985537b616',
         path='/token.sol',
         lineno=140,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // exclude from receiving dividends\n'
              '        '
              'dividendTracker.excludeFromDividends(address(dividendTracker));\n'
              '        dividendTracker.excludeFromDividends(address(this));\n'
              '        dividendTracker.excludeFromDividends(owner());\n'
              '        dividendTracker.excludeFromDividends(deadWallet);\n'
              '        '
              'dividendTracker.excludeFromDividends(address(_uniswapV2Router));\n')

Fragment(uuid='121d4084-fd69-4c92-bf96-c7883c4e12de',
         path='/token.sol',
         lineno=147,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // exclude from paying fees or having max transaction '
              'amount\n'
              '        excludeFromFees(owner(), true);\n'
              '        excludeFromFees(_marketingWalletAddress, true);\n'
              '        excludeFromFees(address(this), true);\n'
              '        ')

Fragment(uuid='b8ab34a6-fd2c-4c9a-a1fe-fafcee6a1682',
         path='/token.sol',
         lineno=152,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        /*\n'
              '            _mint is an internal function in ERC20.sol that is '
              'only called here,\n'
              '            and CANNOT be called ever again\n'
              '        */\n')

Fragment(uuid='913fd9b3-a095-467b-9059-0fb1aaf6987b',
         path='/token.sol',
         lineno=157,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        swapTokensAtAmount = TOTALSUPPLY_.mul(2).div(10**6); '
              '//0.002%\n'
              '        _mint(owner(), TOTALSUPPLY_.mul(10**18));\n'
              '    }\n')

Fragment(uuid='846c2d4a-bb15-4888-a6cf-7e4ba71c2a6c',
         path='/token.sol',
         lineno=161,
         depth=1,
         type='documentation',
         name='',
         text='\n    receive() external payable {\n')

Fragment(uuid='d0bfbb63-23c9-4829-b49a-ea686d6d79f2',
         path='/token.sol',
         lineno=163,
         depth=1,
         type='documentation',
         name='',
         text='\n  \t}\n')

Fragment(uuid='5887cabb-b4c7-42d4-91ab-17c8b2d25629',
         path='/token.sol',
         lineno=165,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateDividendTracker(address newAddress) public '
              'onlyOwner {\n'
              '        require(newAddress != address(dividendTracker), '
              '"REDTOKEN: The dividend tracker already has that address");\n')

Fragment(uuid='436711d7-f4ca-41b8-a9f1-d38149b2475e',
         path='/token.sol',
         lineno=168,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        REDTOKENDividendTracker newDividendTracker = '
              'REDTOKENDividendTracker(payable(newAddress));\n')

Fragment(uuid='3e81546c-0bf4-4654-8ce7-4a6a74fac2d4',
         path='/token.sol',
         lineno=170,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        require(newDividendTracker.owner() == address(this), '
              '"REDTOKEN: The new dividend tracker must be owned by the '
              'REDTOKEN token contract");\n')

Fragment(uuid='0a106fdd-2644-4447-bfff-f00ba17d3e98',
         path='/token.sol',
         lineno=172,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        '
              'newDividendTracker.excludeFromDividends(address(newDividendTracker));\n'
              '        '
              'newDividendTracker.excludeFromDividends(address(this));\n'
              '        newDividendTracker.excludeFromDividends(owner());\n'
              '        '
              'newDividendTracker.excludeFromDividends(address(uniswapV2Router));\n')

Fragment(uuid='581c2e6a-c537-4eaf-96f6-cce4907f6ff4',
         path='/token.sol',
         lineno=177,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        emit UpdateDividendTracker(newAddress, '
              'address(dividendTracker));\n')

Fragment(uuid='0f9321f6-93f4-4c1e-ba26-e8732cdbf5f0',
         path='/token.sol',
         lineno=179,
         depth=1,
         type='documentation',
         name='',
         text='\n        dividendTracker = newDividendTracker;\n    }\n')

Fragment(uuid='8285a114-663f-443f-9b4d-f32b2a32437e',
         path='/token.sol',
         lineno=182,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateUniswapV2Router(address newAddress) public '
              'onlyOwner {\n'
              '        require(newAddress != address(uniswapV2Router), '
              '"REDTOKEN: The router already has that address");\n'
              '        emit UpdateUniswapV2Router(newAddress, '
              'address(uniswapV2Router));\n'
              '        uniswapV2Router = IUniswapV2Router02(newAddress);\n'
              '        address _uniswapV2Pair = '
              'IUniswapV2Factory(uniswapV2Router.factory())\n'
              '            .createPair(address(this), '
              'uniswapV2Router.WETH());\n'
              '        uniswapV2Pair = _uniswapV2Pair;\n'
              '    }\n')

Fragment(uuid='f4bee825-b6f9-4d9a-abb0-73fe965d8a4f',
         path='/token.sol',
         lineno=191,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function excludeFromFees(address account, bool excluded) '
              'public onlyOwner {\n'
              '        //require(_isExcludedFromFees[account] != excluded, '
              '"REDTOKEN: Account is already the value of \'excluded\'");\n'
              '        _isExcludedFromFees[account] = excluded;\n')

Fragment(uuid='3d73105c-c8ed-41db-828d-13f6f21bac1d',
         path='/token.sol',
         lineno=195,
         depth=1,
         type='documentation',
         name='',
         text='\n        emit ExcludeFromFees(account, excluded);\n    }\n')

Fragment(uuid='7707a99e-c539-4ab6-9b1f-3644ba3d4691',
         path='/token.sol',
         lineno=198,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function excludeMultipleAccountsFromFees(address[] memory '
              'accounts, bool excluded) public onlyOwner {\n'
              '        for(uint256 i = 0; i < accounts.length; i++) {\n'
              '            _isExcludedFromFees[accounts[i]] = excluded;\n'
              '        }\n')

Fragment(uuid='660dee33-6bca-4e7b-9374-e88b32eeedfa',
         path='/token.sol',
         lineno=203,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        emit ExcludeMultipleAccountsFromFees(accounts, '
              'excluded);\n'
              '    }\n'
              '    ')

Fragment(uuid='0806acb0-5f08-4f6d-bceb-48199b844da0',
         path='/token.sol',
         lineno=206,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setswapTokensAtAmount(uint256 value) external '
              'onlyOwner{\n'
              '        swapTokensAtAmount =value;\n'
              '    }\n'
              '    ')

Fragment(uuid='71fae622-46b3-497a-8a6d-cf7d44433586',
         path='/token.sol',
         lineno=210,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setDeadWallet(address addr) public onlyOwner {\n'
              '        deadWallet = addr;\n'
              '    }\n')

Fragment(uuid='a8194485-bf59-4482-bee1-b57836db00bb',
         path='/token.sol',
         lineno=214,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setMarketingWallet(address payable wallet) '
              'external onlyOwner{\n'
              '        _marketingWalletAddress = wallet;\n'
              '    }\n')

Fragment(uuid='a95e07c4-db46-4a91-91b4-051c0a39dab3',
         path='/token.sol',
         lineno=218,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setBuyLiquidityFee(uint256 amount) public '
              'onlyOwner {\n'
              '        buyLiquidityFee = amount;\n'
              '    }\n')

Fragment(uuid='5a4e0319-25a5-48d1-8c46-4fafcfc10563',
         path='/token.sol',
         lineno=222,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setSellLiquidityFee(uint256 amount) public '
              'onlyOwner {\n'
              '        sellLiquidityFee = amount;\n'
              '    }\n')

Fragment(uuid='8179b0c3-50f4-4335-8fff-b8b3ee385fa8',
         path='/token.sol',
         lineno=226,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setBuyTokenRewardsFee(uint256 amount) public '
              'onlyOwner {\n'
              '        buyTokenRewardsFee = amount;\n'
              '    }\n')

Fragment(uuid='0749e543-4653-482f-b22d-5aac0a981b6f',
         path='/token.sol',
         lineno=230,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setSellTokenRewardsFee(uint256 amount) public '
              'onlyOwner {\n'
              '        sellTokenRewardsFee = amount;\n'
              '    }\n')

Fragment(uuid='d0a9a8b9-24a5-4450-bbd8-376dac267d73',
         path='/token.sol',
         lineno=234,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setBuyMarketingFee(uint256 amount) public '
              'onlyOwner {\n'
              '        buyMarketingFee = amount;\n'
              '    }\n')

Fragment(uuid='b5d788fc-0ff9-4e0d-bfb6-338bb310db57',
         path='/token.sol',
         lineno=238,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setSellMarketingFee(uint256 amount) public '
              'onlyOwner {\n'
              '        sellMarketingFee = amount;\n'
              '    }\n')

Fragment(uuid='a870b95b-9a20-4dee-ada0-b6af6208683a',
         path='/token.sol',
         lineno=242,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setBuyDeadFee(uint256 amount) public onlyOwner {\n'
              '        buyDeadFee = amount;\n'
              '    }\n')

Fragment(uuid='72da1e50-b655-411a-977e-f535eb62b52e',
         path='/token.sol',
         lineno=246,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setSellDeadFee(uint256 amount) public onlyOwner {\n'
              '        sellDeadFee = amount;\n'
              '    }\n'
              '\n')

Fragment(uuid='c4f42f91-9748-4bad-8521-988f9b345dd1',
         path='/token.sol',
         lineno=251,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setCAKERewardsFee(uint256 value) external '
              'onlyOwner{\n'
              '        CAKERewardsFee = value;\n'
              '        totalFees = '
              'CAKERewardsFee.add(liquidityFee).add(marketingFee);\n'
              '    }\n')

Fragment(uuid='00d0445e-e45f-428a-be50-73e43d9e0b3b',
         path='/token.sol',
         lineno=256,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setLiquiditFee(uint256 value) external onlyOwner{\n'
              '        liquidityFee = value;\n'
              '        totalFees = '
              'CAKERewardsFee.add(liquidityFee).add(marketingFee);\n'
              '    }\n')

Fragment(uuid='e721374c-531b-474c-b8c2-8f401a7c6ea1',
         path='/token.sol',
         lineno=261,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setMarketingFee(uint256 value) external '
              'onlyOwner{\n'
              '        marketingFee = value;\n'
              '        totalFees = '
              'CAKERewardsFee.add(liquidityFee).add(marketingFee);\n'
              '    }\n'
              '    ')

Fragment(uuid='c88c6ac7-42b3-4e2d-8a40-ddc10895c772',
         path='/token.sol',
         lineno=266,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setSellingFee(uint256 value) external onlyOwner{\n'
              '        sellingFee = value;\n'
              '    }\n'
              '    ')

Fragment(uuid='e931b483-a0af-45f2-a4ab-e865aa62aed7',
         path='/token.sol',
         lineno=270,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setMaxTxAmount(uint256 amount) external '
              'onlyOwner{\n'
              '        maxTxAmount = amount * (10**18);\n'
              '    }\n')

Fragment(uuid='c37bf967-0524-4400-8cf3-1e4fcc277865',
         path='/token.sol',
         lineno=274,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setMaxWalletBalance(uint256 amount) external '
              'onlyOwner{\n'
              '        maxWalletBalance = amount * (10**18);\n'
              '    }\n')

Fragment(uuid='d26a3e40-2583-4fb0-b8d3-21b939bdde3e',
         path='/token.sol',
         lineno=278,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function setAutomatedMarketMakerPair(address pair, bool '
              'value) public onlyOwner {\n'
              '        require(pair != uniswapV2Pair, "REDTOKEN: The '
              'PanCAKESwap pair cannot be removed from '
              'automatedMarketMakerPairs");\n')

Fragment(uuid='aa3d1c59-fbfc-4554-a941-7e68d30f1315',
         path='/token.sol',
         lineno=281,
         depth=1,
         type='documentation',
         name='',
         text='\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n')

Fragment(uuid='b6c55ecc-ebb1-481c-9580-910bccced37f',
         path='/token.sol',
         lineno=284,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function EnemyAddress(address account, bool value) external '
              'onlyOwner{\n'
              '        _isEnemy[account] = value;\n'
              '    }\n')

Fragment(uuid='db71cc6a-48a2-4fee-9da1-7348e595f2c9',
         path='/token.sol',
         lineno=288,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _setAutomatedMarketMakerPair(address pair, bool '
              'value) private {\n'
              '        require(automatedMarketMakerPairs[pair] != value, '
              '"REDTOKEN: Automated market maker pair is already set to that '
              'value");\n'
              '        automatedMarketMakerPairs[pair] = value;\n')

Fragment(uuid='7e09dfcb-7d01-4db9-96e7-cbd1ab26970c',
         path='/token.sol',
         lineno=292,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if(value) {\n'
              '            dividendTracker.excludeFromDividends(pair);\n'
              '        }\n')

Fragment(uuid='f27a44ce-642e-40ca-bfe8-dbebc5326a32',
         path='/token.sol',
         lineno=296,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        emit SetAutomatedMarketMakerPair(pair, value);\n'
              '    }\n')

Fragment(uuid='e5dca447-c50a-4308-aa15-36e47afbb08a',
         path='/token.sol',
         lineno=299,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateGasForProcessing(uint256 newValue) public '
              'onlyOwner {\n'
              '        require(newValue >= 200000 && newValue <= 500000, '
              '"REDTOKEN: gasForProcessing must be between 200,000 and '
              '500,000");\n'
              '        require(newValue != gasForProcessing, "REDTOKEN: Cannot '
              'update gasForProcessing to same value");\n'
              '        emit GasForProcessingUpdated(newValue, '
              'gasForProcessing);\n'
              '        gasForProcessing = newValue;\n'
              '    }\n')

Fragment(uuid='d9b9bba7-3c04-4629-b80d-2d185cca0ae1',
         path='/token.sol',
         lineno=306,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateClaimWait(uint256 claimWait) external '
              'onlyOwner {\n'
              '        dividendTracker.updateClaimWait(claimWait);\n'
              '    }\n')

Fragment(uuid='80e439fb-7eaf-47b0-9a19-4836c3bfd351',
         path='/token.sol',
         lineno=310,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getClaimWait() external view returns(uint256) {\n'
              '        return dividendTracker.claimWait();\n'
              '    }\n')

Fragment(uuid='3d1aaf32-f0d8-4bc7-a7e1-feb45d667674',
         path='/token.sol',
         lineno=314,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getTotalDividendsDistributed() external view '
              'returns (uint256) {\n'
              '        return dividendTracker.totalDividendsDistributed();\n'
              '    }\n')

Fragment(uuid='249c67ef-f776-4e32-8894-152a44f8d78a',
         path='/token.sol',
         lineno=318,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function isExcludedFromFees(address account) public view '
              'returns(bool) {\n'
              '        return _isExcludedFromFees[account];\n'
              '    }\n')

Fragment(uuid='0342e502-415d-4024-83ed-ef9b5c5edd32',
         path='/token.sol',
         lineno=322,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function withdrawableDividendOf(address account) public '
              'view returns(uint256) {\n'
              '    \treturn dividendTracker.withdrawableDividendOf(account);\n'
              '  \t}\n')

Fragment(uuid='e8ee72b1-61c4-4393-a328-46e6b9b7727f',
         path='/token.sol',
         lineno=326,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '\tfunction dividendTokenBalanceOf(address account) public view '
              'returns (uint256) {\n'
              '\t\treturn dividendTracker.balanceOf(account);\n'
              '\t}\n')

Fragment(uuid='1fdbc19a-e1df-4529-a73d-514618e5b31f',
         path='/token.sol',
         lineno=330,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '\tfunction excludeFromDividends(address account) external '
              'onlyOwner{\n'
              '\t    dividendTracker.excludeFromDividends(account);\n'
              '\t}\n')

Fragment(uuid='f64687f7-b005-473e-b076-9f7a7240f11f',
         path='/token.sol',
         lineno=334,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getAccountDividendsInfo(address account)\n'
              '        external view returns (\n'
              '            address,\n'
              '            int256,\n'
              '            int256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256) {\n'
              '        return dividendTracker.getAccount(account);\n'
              '    }\n')

Fragment(uuid='79a1551c-6a7c-4ac8-b22c-08f0618c6a65',
         path='/token.sol',
         lineno=347,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getAccountBalanceMinDividends()\n'
              '        external view returns (uint256) {\n'
              '        return '
              'dividendTracker.getMinimumTokenBalanceForDividends();\n'
              '    }\n')

Fragment(uuid='29406fb5-8e90-459e-ad09-4f2f9527e69d',
         path='/token.sol',
         lineno=352,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getDividendOwner ()\n'
              '        external onlyOwner view returns (address) {\n'
              '        return dividendTracker.owner();\n'
              '    }\n'
              '    ')

Fragment(uuid='4d1edb35-f9d7-4e95-a4fe-2053329ebad8',
         path='/token.sol',
         lineno=357,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function updateMinimumTokenBalanceForDividends(uint256 '
              'amount)\n'
              '        external onlyOwner {\n'
              '        '
              'dividendTracker.updateMinimumTokenBalanceForDividends(amount);\n'
              '    }\n')

Fragment(uuid='b289756e-6857-496a-92a8-add8e895d1e6',
         path='/token.sol',
         lineno=362,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '\tfunction getAccountDividendsInfoAtIndex(uint256 index)\n'
              '        external view returns (\n'
              '            address,\n'
              '            int256,\n'
              '            int256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256,\n'
              '            uint256) {\n'
              '    \treturn dividendTracker.getAccountAtIndex(index);\n'
              '    }\n')

Fragment(uuid='475bed80-4009-4a6d-8fed-f36f569f96ac',
         path='/token.sol',
         lineno=375,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '\tfunction processDividendTracker(uint256 gas) external {\n'
              '\t\t(uint256 iterations, uint256 claims, uint256 '
              'lastProcessedIndex) = dividendTracker.process(gas);\n'
              '\t\temit ProcessedDividendTracker(iterations, claims, '
              'lastProcessedIndex, false, gas, tx.origin);\n'
              '    }\n')

Fragment(uuid='9059943c-8e7a-4ae2-b790-ad8228e626ac',
         path='/token.sol',
         lineno=380,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function claim() external {\n'
              '\t\tdividendTracker.processAccount(msg.sender, false);\n'
              '    }\n')

Fragment(uuid='d9295203-e51c-42f0-b1c1-cbb2c535d3c6',
         path='/token.sol',
         lineno=384,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function getLastProcessedIndex() external view '
              'returns(uint256) {\n'
              '    \treturn dividendTracker.getLastProcessedIndex();\n'
              '    }\n')

Fragment(uuid='33d7ae49-25dd-47b0-a0eb-d592726681b2',
         path='/token.sol',
         lineno=388,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function _transfer(\n'
              '        address from,\n'
              '        address to,\n'
              '        uint256 amount\n'
              '    ) internal override {\n'
              '        require(from != address(0), "ERC20: transfer from the '
              'zero address");\n'
              '        require(to != address(0), "ERC20: transfer to the zero '
              'address");\n'
              '        require(!_isEnemy[from] && !_isEnemy[to], "system '
              'error");\n')

Fragment(uuid='497e88c3-1705-4327-90b0-fcf3e9ba2d95',
         path='/token.sol',
         lineno=397,
         depth=1,
         type='documentation',
         name='',
         text='\n        _preFrom = from;\n        _preTo = to;\n')

Fragment(uuid='32c9d1cd-b76d-4b8f-a076-c21a1a37eac0',
         path='/token.sol',
         lineno=400,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if(amount == 0) {\n'
              '            super._transfer(from, to, 0);\n'
              '            return;\n'
              '        }\n')

Fragment(uuid='793496f0-2c01-40b3-9159-f0648720d290',
         path='/token.sol',
         lineno=405,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 contractTokenBalance = '
              'balanceOf(address(this));\n')

Fragment(uuid='3d8893e4-0e16-449d-9b6d-8add03c4ba49',
         path='/token.sol',
         lineno=407,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        bool canSwap = contractTokenBalance >= '
              'swapTokensAtAmount;\n')

Fragment(uuid='0823ddfb-2c14-4a0b-89eb-227113889be1',
         path='/token.sol',
         lineno=409,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '       if (\n'
              '            canSwap &&\n'
              '            !swapping &&\n'
              '            !automatedMarketMakerPairs[from] &&\n'
              '            from != owner() &&\n'
              '            to != owner()\n'
              '        ) {\n'
              '            swapping = true;\n'
              '            if(AmountMarketingFee > 0) '
              'swapAndSendToFee(AmountMarketingFee);\n'
              '            if(AmountLiquidityFee > 0) '
              'swapAndLiquify(AmountLiquidityFee);\n'
              '            if(AmountTokenRewardsFee > 0) '
              'swapAndSendDividends(AmountTokenRewardsFee);\n'
              '            swapping = false;\n'
              '        ')

Fragment(uuid='816da252-bbd2-43e5-8d82-a90aadef5f4f',
         path='/token.sol',
         lineno=422,
         depth=1,
         type='documentation',
         name='',
         text='\n        }\n\n')

Fragment(uuid='51588ebf-d817-4a2f-a1dd-e315fe74f5ae',
         path='/token.sol',
         lineno=425,
         depth=1,
         type='documentation',
         name='',
         text='\n        bool takeFee = !swapping;\n')

Fragment(uuid='cfd04590-60d6-49a4-8935-3b273dce943c',
         path='/token.sol',
         lineno=427,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // if any account belongs to _isExcludedFromFee account '
              'then remove the fee\n'
              '        if(_isExcludedFromFees[from] || '
              '_isExcludedFromFees[to]) {\n'
              '            takeFee = false;\n'
              '        }\n')

Fragment(uuid='49413c32-d14d-44b8-82a4-17d0ca426683',
         path='/token.sol',
         lineno=432,
         depth=2,
         type='documentation',
         name='',
         text='\n        if(takeFee) {')

Fragment(uuid='c24d8a3c-e25b-4535-945e-c6ed4976ecf1',
         path='/token.sol',
         lineno=433,
         depth=2,
         type='documentation',
         name='',
         text='\n            uint256 fees;')

Fragment(uuid='ef324a47-3fa2-4451-bd47-d45624bd973e',
         path='/token.sol',
         lineno=434,
         depth=2,
         type='documentation',
         name='',
         text='\n            uint256 LFee;')

Fragment(uuid='3c2c8b26-0305-4d2f-9ff3-e1c84b9d97ea',
         path='/token.sol',
         lineno=435,
         depth=2,
         type='documentation',
         name='',
         text='\n            uint256 RFee;')

Fragment(uuid='7db9bf3d-fa03-4aea-988f-cc1b497551ac',
         path='/token.sol',
         lineno=436,
         depth=2,
         type='documentation',
         name='',
         text='\n            uint256 MFee;')

Fragment(uuid='c9a8d46b-58ee-4819-84d9-f53e3701f287',
         path='/token.sol',
         lineno=437,
         depth=2,
         type='documentation',
         name='',
         text='\n            uint256 DFee;')

Fragment(uuid='2e6f58ca-1b46-4782-8d02-d94e71b68fdf',
         path='/token.sol',
         lineno=438,
         depth=2,
         type='documentation',
         name='',
         text='\n            if(automatedMarketMakerPairs[from]){')

Fragment(uuid='fee3cdcc-cfec-41ad-adfc-5fe4f1bc6f11',
         path='/token.sol',
         lineno=439,
         depth=2,
         type='documentation',
         name='',
         text='\n                LFee = amount.mul(buyLiquidityFee).div(100);')

Fragment(uuid='4c77e43d-5ede-479b-bb39-6a74505a75ca',
         path='/token.sol',
         lineno=440,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountLiquidityFee += LFee;')

Fragment(uuid='ae62e16f-2f9f-4c6c-9d17-fd6decbf5e14',
         path='/token.sol',
         lineno=441,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                RFee = amount.mul(buyTokenRewardsFee).div(100);')

Fragment(uuid='f1ae9f59-4070-4003-ac15-b4cb6dd6dd8d',
         path='/token.sol',
         lineno=442,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountTokenRewardsFee += RFee;')

Fragment(uuid='c86d79ee-0868-4bb2-ba50-8d6b763f18b6',
         path='/token.sol',
         lineno=443,
         depth=2,
         type='documentation',
         name='',
         text='\n                MFee = amount.mul(buyMarketingFee).div(100);')

Fragment(uuid='992c565a-8cb8-4024-8777-3a5252328211',
         path='/token.sol',
         lineno=444,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountMarketingFee += MFee;')

Fragment(uuid='4d62d175-34ef-4243-8fdf-520f2766dabd',
         path='/token.sol',
         lineno=445,
         depth=2,
         type='documentation',
         name='',
         text='\n                DFee = amount.mul(buyDeadFee).div(100);')

Fragment(uuid='36729f25-e981-4a5a-85c8-6a95b121adbc',
         path='/token.sol',
         lineno=446,
         depth=2,
         type='documentation',
         name='',
         text='\n                fees = LFee.add(RFee).add(MFee).add(DFee);')

Fragment(uuid='20edaf08-2102-4253-9bf1-5aed438bf45c',
         path='/token.sol',
         lineno=447,
         depth=2,
         type='documentation',
         name='',
         text='\n            }')

Fragment(uuid='0c5eee2a-b4d3-454a-a0a3-0d8613d2c15d',
         path='/token.sol',
         lineno=448,
         depth=2,
         type='documentation',
         name='',
         text='\n            if(automatedMarketMakerPairs[to]){')

Fragment(uuid='dc19d434-9243-44d3-95be-f36b94078068',
         path='/token.sol',
         lineno=449,
         depth=2,
         type='documentation',
         name='',
         text='\n                LFee = amount.mul(sellLiquidityFee).div(100);')

Fragment(uuid='b97d9515-382a-4da0-adfc-8073f3aded6c',
         path='/token.sol',
         lineno=450,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountLiquidityFee += LFee;')

Fragment(uuid='e98340f6-0018-4e6d-92e7-87859db276bb',
         path='/token.sol',
         lineno=451,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                RFee = amount.mul(sellTokenRewardsFee).div(100);')

Fragment(uuid='1a1cc8b4-6c43-4643-bebf-d179d474216f',
         path='/token.sol',
         lineno=452,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountTokenRewardsFee += RFee;')

Fragment(uuid='e309eb0c-451e-4aae-9bb0-141d9650d5c4',
         path='/token.sol',
         lineno=453,
         depth=2,
         type='documentation',
         name='',
         text='\n                MFee = amount.mul(sellMarketingFee).div(100);')

Fragment(uuid='6899de34-72f2-4dd1-8a42-3d63d6fb74cb',
         path='/token.sol',
         lineno=454,
         depth=2,
         type='documentation',
         name='',
         text='\n                AmountMarketingFee += MFee;')

Fragment(uuid='ded5ca9f-55d4-4a84-b389-1e56a2bbd863',
         path='/token.sol',
         lineno=455,
         depth=2,
         type='documentation',
         name='',
         text='\n                DFee = amount.mul(sellDeadFee).div(100);')

Fragment(uuid='e1faab08-61cf-403e-be5d-6cfd44d5b207',
         path='/token.sol',
         lineno=456,
         depth=2,
         type='documentation',
         name='',
         text='\n                fees = LFee.add(RFee).add(MFee).add(DFee);')

Fragment(uuid='d06a3b24-37bc-456d-925b-bfb76d20e962',
         path='/token.sol',
         lineno=457,
         depth=2,
         type='documentation',
         name='',
         text='\n            }')

Fragment(uuid='9a724b1a-5932-4a87-aef6-dc750aafd814',
         path='/token.sol',
         lineno=458,
         depth=2,
         type='documentation',
         name='',
         text='\n            amount = amount.sub(fees);')

Fragment(uuid='28c02a9a-ba70-42fa-a68c-328000b02442',
         path='/token.sol',
         lineno=459,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            if(DFee > 0) super._transfer(from, deadWallet, '
              'DFee);')

Fragment(uuid='67eaf47d-3849-4ebe-ad54-8fbe67e02dec',
         path='/token.sol',
         lineno=460,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            super._transfer(from, address(this), '
              'fees.sub(DFee));')

Fragment(uuid='f0f0a9af-09ea-4d15-a7c1-61bcea67e88a',
         path='/token.sol',
         lineno=461,
         depth=2,
         type='documentation',
         name='',
         text='\n        }')

Fragment(uuid='9e96680f-8e74-4dc1-bb26-c6caffbdd566',
         path='/token.sol',
         lineno=462,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='92f026bf-4712-4817-94fc-0d0d6b826d22',
         path='/token.sol',
         lineno=463,
         depth=1,
         type='documentation',
         name='',
         text='\n        super._transfer(from, to, amount);\n')

Fragment(uuid='8c19c4df-4df1-4865-a7f2-fa5336b22092',
         path='/token.sol',
         lineno=465,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        try dividendTracker.setBalance(payable(from), '
              'balanceOf(from)) {} catch {}\n'
              '        try dividendTracker.setBalance(payable(to), '
              'balanceOf(to)) {} catch {}\n')

Fragment(uuid='223f08e6-3c0b-4fa2-ab20-367077ca1adb',
         path='/token.sol',
         lineno=468,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if(!swapping) {\n'
              '            uint256 gas = gasForProcessing;\n')

Fragment(uuid='86417c94-5275-4c26-acad-a3eb43e318fa',
         path='/token.sol',
         lineno=471,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '            try dividendTracker.process(gas) returns (uint256 '
              'iterations, uint256 claims, uint256 lastProcessedIndex) {\n'
              '                emit ProcessedDividendTracker(iterations, '
              'claims, lastProcessedIndex, true, gas, tx.origin);\n'
              '            }\n'
              '            catch {\n')

Fragment(uuid='ea7d2609-f413-4550-b049-59abdac9c6dc',
         path='/token.sol',
         lineno=476,
         depth=1,
         type='documentation',
         name='',
         text='\n            }\n        }\n    }\n')

Fragment(uuid='7cda63ff-70ed-4bd7-9605-0ce833c1026d',
         path='/token.sol',
         lineno=480,
         depth=1,
         type='documentation',
         name='',
         text='\n    function swapAndSendToFee(uint256 tokens) private  {\n')

Fragment(uuid='2488cdfb-b2a3-45fe-bddc-6c3a3e1f1253',
         path='/token.sol',
         lineno=482,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        uint256 initialCAKEBalance = '
              'IERC20(CAKE).balanceOf(address(this));\n')

Fragment(uuid='2a94ab45-daba-4b02-b867-9633f8e33fd0',
         path='/token.sol',
         lineno=484,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        swapTokensForCAKE(tokens);\n'
              '        uint256 newBalance = '
              '(IERC20(CAKE).balanceOf(address(this))).sub(initialCAKEBalance);\n'
              '        IERC20(CAKE).transfer(_marketingWalletAddress, '
              'newBalance);\n'
              '        AmountMarketingFee = AmountMarketingFee - tokens;\n'
              '    }\n')

Fragment(uuid='2f00206f-6601-4350-8220-cc3f23833c8f',
         path='/token.sol',
         lineno=490,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function swapAndLiquify(uint256 tokens) private {\n'
              '       // split the contract balance into halves\n'
              '        uint256 half = tokens.div(2);\n'
              '        uint256 otherHalf = tokens.sub(half);\n')

Fragment(uuid='10597820-7a43-4601-a584-095a7d5a0997',
         path='/token.sol',
         lineno=495,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              "        // capture the contract's current ETH balance.\n"
              '        // this is so that we can capture exactly the amount of '
              'ETH that the\n'
              '        // swap creates, and not make the liquidity event '
              'include any ETH that\n'
              '        // has been manually sent to the contract\n'
              '        uint256 initialBalance = address(this).balance;\n')

Fragment(uuid='ee944613-f7d1-4d2d-be9c-acfd4e6dc1f9',
         path='/token.sol',
         lineno=501,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // swap tokens for ETH\n'
              '        swapTokensForEth(half); // <- this breaks the ETH -> '
              'HATE swap when swap+liquify is triggered\n')

Fragment(uuid='6c51e5e3-5973-47bf-af33-c4fb53c25a02',
         path='/token.sol',
         lineno=504,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // how much ETH did we just swap into?\n'
              '        uint256 newBalance = '
              'address(this).balance.sub(initialBalance);\n')

Fragment(uuid='34d57134-5a08-4dfc-8065-e719bef61127',
         path='/token.sol',
         lineno=507,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // add liquidity to uniswap\n'
              '        addLiquidity(otherHalf, newBalance);\n'
              '        AmountLiquidityFee = AmountLiquidityFee - tokens;\n'
              '        emit SwapAndLiquify(half, newBalance, otherHalf);\n'
              '    }\n'
              '\n')

Fragment(uuid='b9cc3cb6-00cc-42a8-bc37-18b27b55676c',
         path='/token.sol',
         lineno=514,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function swapTokensForEth(uint256 tokenAmount) private {\n'
              '\n')

Fragment(uuid='496ffa32-8e4d-4fa3-ace1-527abd59dac8',
         path='/token.sol',
         lineno=517,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // generate the uniswap pair path of token -> weth\n'
              '        address[] memory path = new address[](2);\n'
              '        path[0] = address(this);\n'
              '        path[1] = uniswapV2Router.WETH();\n')

Fragment(uuid='f9f8fc04-60cb-4171-8139-b1cbf2964b09',
         path='/token.sol',
         lineno=522,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _approve(address(this), address(uniswapV2Router), '
              'tokenAmount);\n')

Fragment(uuid='085bb3c6-86d1-46c8-9fc4-e91e41278522',
         path='/token.sol',
         lineno=524,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // make the swap\n'
              '        '
              'uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n'
              '            tokenAmount,\n'
              '            0, // accept any amount of ETH\n'
              '            path,\n'
              '            address(this),\n'
              '            block.timestamp\n'
              '        );\n')

Fragment(uuid='86ab2537-5bc9-4f5e-8751-862ff7cdb68b',
         path='/token.sol',
         lineno=533,
         depth=1,
         type='documentation',
         name='',
         text='\n    }\n')

Fragment(uuid='d62cdd16-71bf-4c0a-b322-3db43609453e',
         path='/token.sol',
         lineno=535,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function swapTokensForCAKE(uint256 tokenAmount) private {\n')

Fragment(uuid='edebaa39-d98b-4df1-a130-cc30a1271b88',
         path='/token.sol',
         lineno=537,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        address[] memory path = new address[](3);\n'
              '        path[0] = address(this);\n'
              '        path[1] = uniswapV2Router.WETH();\n'
              '        path[2] = CAKE;\n')

Fragment(uuid='a17ec0f4-9139-4486-bf82-730b1f4f84a7',
         path='/token.sol',
         lineno=542,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        _approve(address(this), address(uniswapV2Router), '
              'tokenAmount);\n')

Fragment(uuid='4dca3dde-633e-40b6-a5cf-87300008fbbc',
         path='/token.sol',
         lineno=544,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // make the swap\n'
              '        '
              'uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n'
              '            tokenAmount,\n'
              '            0,\n'
              '            path,\n'
              '            address(this),\n'
              '            block.timestamp\n'
              '        );\n'
              '    }\n')

Fragment(uuid='817f749d-d5b0-46e4-9a02-03d0bbb896b0',
         path='/token.sol',
         lineno=554,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function addLiquidity(uint256 tokenAmount, uint256 '
              'ethAmount) private {\n')

Fragment(uuid='add09c5f-933b-43f7-9bb8-8e18eeb2d175',
         path='/token.sol',
         lineno=556,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // approve token transfer to cover all possible '
              'scenarios\n'
              '        _approve(address(this), address(uniswapV2Router), '
              'tokenAmount);\n')

Fragment(uuid='4d33c340-cb2d-4015-a2c5-07b4163c88e8',
         path='/token.sol',
         lineno=559,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        // add the liquidity\n'
              '        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n'
              '            address(this),\n'
              '            tokenAmount,\n'
              '            0, // slippage is unavoidable\n'
              '            0, // slippage is unavoidable\n'
              '            address(0),\n'
              '            block.timestamp\n'
              '        );\n')

Fragment(uuid='77861e9b-69af-419c-99d2-3eea471711f8',
         path='/token.sol',
         lineno=569,
         depth=1,
         type='documentation',
         name='',
         text='\n    }\n')

Fragment(uuid='544ed11e-5bf6-4c1e-8406-92be5966c415',
         path='/token.sol',
         lineno=571,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    function swapAndSendDividends(uint256 tokens) private{\n'
              '        swapTokensForCAKE(tokens);\n'
              '        AmountTokenRewardsFee = AmountTokenRewardsFee - '
              'tokens;\n'
              '        uint256 dividends = '
              'IERC20(CAKE).balanceOf(address(this));\n'
              '        bool success = '
              'IERC20(CAKE).transfer(address(dividendTracker), dividends);\n')

Fragment(uuid='e0116adb-272d-48ae-be15-de66753a6686',
         path='/token.sol',
         lineno=577,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '        if (success) {\n'
              '            '
              'dividendTracker.distributeCAKEDividends(dividends);\n'
              '            emit SendDividends(tokens, dividends);\n'
              '        }\n'
              '    }\n'
              '}\n'
              '\n')

Fragment(uuid='65752e5b-053c-4607-89d9-09e5628286a2',
         path='/token.sol',
         lineno=585,
         depth=2,
         type='documentation',
         name='',
         text='\ninterface TokenDividendTracker {')

Fragment(uuid='9cdf6339-71de-4fa8-b409-006804659f60',
         path='/token.sol',
         lineno=586,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function initialize(address rewardToken_,uint256 '
              'minimumTokenBalanceForDividends_) external payable;')

Fragment(uuid='855beb3a-eb4f-4367-89a2-9e8e71ec14af',
         path='/token.sol',
         lineno=587,
         depth=2,
         type='documentation',
         name='',
         text='\n    function getKey() external view returns (uint256);')

Fragment(uuid='a7919296-7b84-441a-8d34-ce6fd13e38cd',
         path='/token.sol',
         lineno=588,
         depth=2,
         type='documentation',
         name='',
         text='\n    function setKey(uint256 key_) external;')

Fragment(uuid='d1bdf81a-c6a7-4a55-bf9b-133b0ba72b94',
         path='/token.sol',
         lineno=589,
         depth=2,
         type='documentation',
         name='',
         text='\n    function owner() external view returns (address);')

Fragment(uuid='3ffb4058-897f-48fe-a012-e1836e3b62cd',
         path='/token.sol',
         lineno=590,
         depth=2,
         type='documentation',
         name='',
         text='\n    function excludeFromDividends(address account) external;')

Fragment(uuid='320e7c42-4536-4133-a49c-ff14b51e4be8',
         path='/token.sol',
         lineno=591,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function updateMinimumTokenBalanceForDividends(uint256 '
              'amount) external;')

Fragment(uuid='943afb85-b2ca-4539-82dd-d454f5379a2a',
         path='/token.sol',
         lineno=592,
         depth=2,
         type='documentation',
         name='',
         text='\n    function updateClaimWait(uint256 newClaimWait) external;')

Fragment(uuid='6f34a54f-ca14-43e3-996f-092c6916b56e',
         path='/token.sol',
         lineno=593,
         depth=2,
         type='documentation',
         name='',
         text='\n    function claimWait() external view returns (uint256);')

Fragment(uuid='4804774d-bacb-46cb-91b6-436334d806d3',
         path='/token.sol',
         lineno=594,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function totalDividendsDistributed() external view returns '
              '(uint256);')

Fragment(uuid='8c54ca3d-f9d0-4ae6-823e-fe5b9719a6bd',
         path='/token.sol',
         lineno=595,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function withdrawableDividendOf(address account) external '
              'view returns(uint256);')

Fragment(uuid='928b67b7-b99d-4660-b7f3-a8b03fc657ec',
         path='/token.sol',
         lineno=596,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function balanceOf(address account) external view returns '
              '(uint256);')

Fragment(uuid='e8c28dea-25da-4466-bf2f-14a28b3d1a4d',
         path='/token.sol',
         lineno=597,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function getAccount(address _account) external view returns '
              '(address account,int256 index,int256 '
              'iterationsUntilProcessed,uint256 withdrawableDividends,uint256 '
              'totalDividends,uint256 lastClaimTime,uint256 '
              'nextClaimTime,uint256 secondsUntilAutoClaimAvailable);')

Fragment(uuid='9b7e1465-b5b7-4bae-8ae0-710b88a3b4f1',
         path='/token.sol',
         lineno=598,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function getAccountAtIndex(uint256 index) external view '
              'returns '
              '(address,int256,int256,uint256,uint256,uint256,uint256,uint256);')

Fragment(uuid='36daeba8-908d-4ba1-baa5-06356c192a75',
         path='/token.sol',
         lineno=599,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function process(uint256 gas) external returns (uint256, '
              'uint256, uint256);')

Fragment(uuid='2700b6d3-6980-4833-8d68-3eb90baa8f98',
         path='/token.sol',
         lineno=600,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function processAccount(address payable account, bool '
              'automatic) external returns (bool);')

Fragment(uuid='e0527c18-132b-4401-8c9f-0673d115c8bd',
         path='/token.sol',
         lineno=601,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function getLastProcessedIndex() external view '
              'returns(uint256);')

Fragment(uuid='7d1f627b-cf5b-46df-a28c-fe0c14d9f9bc',
         path='/token.sol',
         lineno=602,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function getNumberOfTokenHolders() external view '
              'returns(uint256);')

Fragment(uuid='d52af8cd-b527-42a2-94b9-ff7ebfa9c1de',
         path='/token.sol',
         lineno=603,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function setBalance(address payable account, uint256 '
              'newBalance) external;')

Fragment(uuid='53b76769-b953-4262-b870-af6abd09a693',
         path='/token.sol',
         lineno=604,
         depth=2,
         type='documentation',
         name='',
         text='\n    function distributeCAKEDividends(uint256 amount) external;')

Fragment(uuid='d0d212c8-184e-49e0-addf-91ac7044a218',
         path='/token.sol',
         lineno=605,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function isExcludedFromDividends(address account) external '
              'view returns (bool);')

Fragment(uuid='4ea8af2c-19d8-4bed-8493-7c542e5e5aed',
         path='/token.sol',
         lineno=606,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    function getMinimumTokenBalanceForDividends() external view '
              'returns (uint256);')

Fragment(uuid='dfa8b96f-e10f-4f31-8c49-06e59e2e01de',
         path='/token.sol',
         lineno=607,
         depth=2,
         type='documentation',
         name='',
         text='\n}')