Fragment(uuid='732a6f34-f055-4eac-9d17-e942810921dc',
         path='/.gitignore',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='/*__pycache__/\n*.pyc\n*.DS_Store\n')

Fragment(uuid='74447c9e-d789-4ad9-8b6d-4aec9ddf002c',
         path='/.gitignore',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /.gitignore\n')

Fragment(uuid='c14fb004-b15f-42a4-8dde-37765129ffdb',
         path='/LICENSE',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='MIT License\n')

Fragment(uuid='37d06697-d0b0-48a4-b516-d97227130ba8',
         path='/LICENSE',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /LICENSE\n')

Fragment(uuid='0abe4bb4-6cdd-40d6-b86d-89685002a233',
         path='/LICENSE',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\nCopyright (c) 2023 Shunyu Yao\n')

Fragment(uuid='487fb773-1ab5-43c1-ab58-2303c93322d8',
         path='/LICENSE',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'Permission is hereby granted, free of charge, to any person '
              'obtaining a copy\n'
              'of this software and associated documentation files (the '
              '"Software"), to deal\n'
              'in the Software without restriction, including without '
              'limitation the rights\n'
              'to use, copy, modify, merge, publish, distribute, sublicense, '
              'and/or sell\n'
              'copies of the Software, and to permit persons to whom the '
              'Software is\n'
              'furnished to do so, subject to the following conditions:\n')

Fragment(uuid='619cdc7d-8112-44c0-aad0-e134658ca2fa',
         path='/LICENSE',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'The above copyright notice and this permission notice shall be '
              'included in all\n'
              'copies or substantial portions of the Software.\n')

Fragment(uuid='716e2d72-b2ac-4738-a270-d18844e60b09',
         path='/LICENSE',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, '
              'EXPRESS OR\n'
              'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF '
              'MERCHANTABILITY,\n'
              'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO '
              'EVENT SHALL THE\n'
              'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES '
              'OR OTHER\n'
              'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, '
              'ARISING FROM,\n'
              'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER '
              'DEALINGS IN THE\n'
              'SOFTWARE.\n')

Fragment(uuid='b6c4ad90-cee8-41cb-a779-cdc222dd6855',
         path='/data/24/24.csv',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /data/24/24.csv\n')

Fragment(uuid='12aec8f3-c980-485c-8c36-0c514ad0c0b0',
         path='/data/crosswords/mini0505.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /data/crosswords/mini0505.json\n')

Fragment(uuid='e932f791-938d-4c7b-a880-33729193042f',
         path='/data/crosswords/mini0505_0_100_5.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /data/crosswords/mini0505_0_100_5.json\n')

Fragment(uuid='e35c5984-4928-4e34-91c8-541b85d335b1',
         path='/data/text/data_100_random_text.txt',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text="It isn't difficult to do a handstand if you just stand on your "
              'hands. It caught him off guard that space smelled of seared '
              'steak. When she didn’t like a guy who was trying to pick her '
              'up, she started using sign language. Each person who knows you '
              'has a different perception of who you are.')

Fragment(uuid='416896cd-54a3-4b7a-9c84-420d7b33853d',
         path='/data/text/data_100_random_text.txt',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The hawk didn’t understand why the ground squirrels didn’t want '
              'to be his friend. If I don’t like something, I’ll stay away '
              'from it. People keep telling me "orange" but I still prefer '
              '"pink". He dreamed of leaving his law firm to open a portable '
              'dog wash.')

Fragment(uuid='1ec09035-170b-46ed-9a5d-468db995edd8',
         path='/data/text/data_100_random_text.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /data/text/data_100_random_text.txt\n')

Fragment(uuid='64f07ace-860a-4d71-bdc8-aed7af76a2e7',
         path='/data/text/data_100_random_text.txt',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'My biggest joy is roasting almonds while stalking prey. You '
              "realize you're not alone as you sit in your bedroom massaging "
              'your calves after a long day of playing tug-of-war with Grandpa '
              'Joe in the hospital. The ants enjoyed the barbecue more than '
              'the family. The hawk didn’t understand why the ground squirrels '
              'didn’t want to be his friend.')

Fragment(uuid='b53aaf0c-2abe-44e0-8971-8b5bfd6ef52b',
         path='/data/text/data_100_random_text.txt',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'The overpass went under the highway and into a secret world. He '
              'found his art never progressed when he literally used his sweat '
              'and tears. It was always dangerous to drive with him since he '
              'insisted the safety cones were a slalom course.')

Fragment(uuid='bc0de602-4f5b-48be-b4aa-9f23897f473a',
         path='/data/text/data_100_random_text.txt',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              "You realize you're not alone as you sit in your bedroom "
              'massaging your calves after a long day of playing tug-of-war '
              'with Grandpa Joe in the hospital. I was starting to worry that '
              "my pet turtle could tell what I was thinking. He's in a boy "
              "band which doesn't make much sense for a snake.")

Fragment(uuid='dd715950-89b4-4ae7-bedb-92a649a24b83',
         path='/data/text/data_100_random_text.txt',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He was surprised that his immense laziness was inspirational to '
              "others. Instead of a bachelorette party You realize you're not "
              'alone as you sit in your bedroom massaging your calves after a '
              'long day of playing tug-of-war with Grandpa Joe in the '
              'hospital. If I don’t like something, I’ll stay away from it.')

Fragment(uuid='bff88060-4ef3-4e2e-a97e-243460cdca8b',
         path='/data/text/data_100_random_text.txt',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "For some unfathomable reason, the response team didn't consider "
              'a lack of milk for my cereal as a proper emergency. You realize '
              "you're not alone as you sit in your bedroom massaging your "
              'calves after a long day of playing tug-of-war with Grandpa Joe '
              'in the hospital. He poured rocks in the dungeon of his mind. '
              'I’m a living furnace.')

Fragment(uuid='f0e8d8f5-7901-4bb8-ad8b-17b1ce1b0b94',
         path='/data/text/data_100_random_text.txt',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "You realize you're not alone as you sit in your bedroom "
              'massaging your calves after a long day of playing tug-of-war '
              'with Grandpa Joe in the hospital. Today arrived with a crash of '
              'my car through the garage door. I had a friend in high school '
              'named Rick Shaw, but he was fairly useless as a mode of '
              'transport. It was always dangerous to drive with him since he '
              'insisted the safety cones were a slalom course.')

Fragment(uuid='3f1fa815-7ff9-4ebd-aaf0-8eaeafac1c27',
         path='/data/text/data_100_random_text.txt',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He decided to fake his disappearance to avoid jail. He was all '
              'business when he wore his clown suit. We have a lot of rain in '
              'June. The snow-covered path was no help in finding his way out '
              'of the back-country.')

Fragment(uuid='af8b8abc-7032-4ce5-9f80-984157ce2131',
         path='/data/text/data_100_random_text.txt',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The fence was confused about whether it was supposed to keep '
              'things in or keep things out. He quietly entered the museum as '
              'the super bowl started. When confronted with a rotary dial '
              'phone the teenager was perplexed. She discovered van life is '
              'difficult with 2 cats and a dog.')

Fragment(uuid='2dd07679-3fed-4002-8a88-5c97bf179874',
         path='/data/text/data_100_random_text.txt',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He dreamed of eating green apples with worms. Homesickness '
              "became contagious in the young campers' cabin. She couldn't "
              'understand why nobody else could see that the sky is full of '
              'cotton candy. There was no ice cream in the freezer, nor did '
              'they have money to go to the store.')

Fragment(uuid='97a1745e-8c76-42d0-af17-b579ab4c7eed',
         path='/data/text/data_100_random_text.txt',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "A glittering gem is not enough. It's much more difficult to "
              'play tennis with a bowling ball than it is to bowl with a '
              'tennis ball. When confronted with a rotary dial phone the '
              'teenager was perplexed. There should have been a time and a '
              "place, but this wasn't it.")

Fragment(uuid='f05be7bb-7969-4aa0-961b-baee2278b117',
         path='/data/text/data_100_random_text.txt',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The blue parrot drove by the hitchhiking mongoose. The ants '
              'enjoyed the barbecue more than the family. The Great Dane '
              'looked more like a horse than a dog. Various sea birds are '
              'elegant, but nothing is as elegant as a gliding pelican.')

Fragment(uuid='29d88ffd-4c68-4edb-9c73-0d5e07a37ca3',
         path='/data/text/data_100_random_text.txt',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The murder hornet was disappointed by the preconceived ideas '
              'people had of him. She wondered what his eyes were saying '
              'beneath his mirrored sunglasses. The fox in the tophat '
              "whispered into the ear of the rabbit. He's in a boy band which "
              "doesn't make much sense for a snake.")

Fragment(uuid='82f41ee1-3bad-4a80-b514-b3981a2aad2e',
         path='/data/text/data_100_random_text.txt',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "There's probably enough glass in my cupboard to build an "
              'undersea aquarium. He was disappointed when he found the beach '
              'to be so sandy and the sun so sunny. She looked into the mirror '
              'and saw another person. The sudden rainstorm washed crocodiles '
              'into the ocean.')

Fragment(uuid='7551aa2a-8149-46e6-bb73-8be3ce97b95c',
         path='/data/text/data_100_random_text.txt',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It caught him off guard that space smelled of seared steak. The '
              'busker hoped that the people passing by would throw money, but '
              'they threw tomatoes instead, so he exchanged his hat for a '
              "juicer. Honestly, I didn't care much for the first season, so I "
              "didn't bother with the second. Today arrived with a crash of my "
              'car through the garage door.')

Fragment(uuid='ae6ba45e-54ba-42bb-8149-df3c1607e173',
         path='/data/text/data_100_random_text.txt',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'There was no ice cream in the freezer, nor did they have money '
              'to go to the store. The waves were crashing on the shore; it '
              'was a lovely sight. He knew it was going to be a bad day when '
              "he saw mountain lions roaming the streets. It's much more "
              'difficult to play tennis with a bowling ball than it is to bowl '
              'with a tennis ball.')

Fragment(uuid='8511882a-1180-4c26-9849-4c32a835cacf',
         path='/data/text/data_100_random_text.txt',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              'I’m a living furnace. The near-death experience brought new '
              'ideas to light. I was starting to worry that my pet turtle '
              'could tell what I was thinking.')

Fragment(uuid='e0431800-a36d-4c9d-af79-44f3f9c95144',
         path='/data/text/data_100_random_text.txt',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Written warnings in instruction manuals are worthless since '
              "rabbits can't read. You're unsure whether or not to trust him, "
              'but very thankful that you wore a turtle neck. You realize '
              "you're not alone as you sit in your bedroom massaging your "
              'calves after a long day of playing tug-of-war with Grandpa Joe '
              "in the hospital. Strawberries must be the one food that doesn't "
              'go well with this brand of paint.')

Fragment(uuid='d534e3c2-efd6-41db-8d9f-fbc06c53149f',
         path='/data/text/data_100_random_text.txt',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Strawberries must be the one food that doesn't go well with "
              'this brand of paint. Joe discovered that traffic cones make '
              "excellent megaphones. There's a reason that roses have thorns. "
              'She traveled because it cost the same as therapy and was a lot '
              'more enjoyable.')

Fragment(uuid='ebed3e05-e647-4b94-b962-e9ff84907fb1',
         path='/data/text/data_100_random_text.txt',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Her hair was windswept as she rode in the black convertible. '
              'She traveled because it cost the same as therapy and was a lot '
              "more enjoyable. It's always a good idea to seek shelter from "
              'the evil gaze of the sun. He turned in the research paper on '
              'Friday; otherwise, he would have not passed the class.')

Fragment(uuid='af277ffc-91af-46ce-9ce0-f02a25518d95',
         path='/data/text/data_100_random_text.txt',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Today arrived with a crash of my car through the garage door. '
              "It's never comforting to know that your fate depends on "
              'something as unpredictable as the popping of corn. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny. Courage and stupidity were all he had.')

Fragment(uuid='1c2a1053-3ad5-4e7e-af70-314bb1c3b102',
         path='/data/text/data_100_random_text.txt',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She had some amazing news to share but nobody to share it with. '
              "She couldn't understand why nobody else could see that the sky "
              'is full of cotton candy. Each person who knows you has a '
              'different perception of who you are. He decided that the time '
              "had come to be stronger than any of the excuses he'd used until "
              'then.')

Fragment(uuid='a5bf866c-9638-4328-92eb-96fb3e6e89bd',
         path='/data/text/data_100_random_text.txt',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The blue parrot drove by the hitchhiking mongoose. His get rich '
              'quick scheme was to grow a cactus farm. For some unfathomable '
              "reason, the response team didn't consider a lack of milk for my "
              'cereal as a proper emergency. He picked up trash in his spare '
              "time to dump in his neighbor's yard.")

Fragment(uuid='7075511d-e42c-417f-bfbf-d3138caad88d',
         path='/data/text/data_100_random_text.txt',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Her hair was windswept as she rode in the black convertible. '
              'The ants enjoyed the barbecue more than the family. '
              "Homesickness became contagious in the young campers' cabin. The "
              'busker hoped that the people passing by would throw money, but '
              'they threw tomatoes instead, so he exchanged his hat for a '
              'juicer.')

Fragment(uuid='53ee9cc9-04ce-42a6-b043-30743e0c3702',
         path='/data/text/data_100_random_text.txt',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'I’m a living furnace. The near-death experience brought new '
              'ideas to light. He was surprised that his immense laziness was '
              'inspirational to others. There was no ice cream in the freezer, '
              'nor did they have money to go to the store.')

Fragment(uuid='aee21a3b-cee7-4e21-beb5-2a5a90b2572d',
         path='/data/text/data_100_random_text.txt',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "It isn't difficult to do a handstand if you just stand on your "
              "hands. I'd rather be a bird than a fish. Homesickness became "
              "contagious in the young campers' cabin. He picked up trash in "
              "his spare time to dump in his neighbor's yard.")

Fragment(uuid='5fbd18c8-0682-4f1b-a6fa-c642a20af5ff',
         path='/data/text/data_100_random_text.txt',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "He poured rocks in the dungeon of his mind. It isn't difficult "
              "to do a handstand if you just stand on your hands. It's never "
              'comforting to know that your fate depends on something as '
              "unpredictable as the popping of corn. He's in a boy band which "
              "doesn't make much sense for a snake.")

Fragment(uuid='23c0c6ed-32a6-44c3-96c0-da0f4d2c0966',
         path='/data/text/data_100_random_text.txt',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. The heat He picked up trash '
              "in his spare time to dump in his neighbor's yard. The anaconda "
              'was the greatest criminal mastermind in this part of the '
              'neighborhood.')

Fragment(uuid='545302e4-f3e5-412b-bb11-4335117c53ba',
         path='/data/text/data_100_random_text.txt',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'I’m a living furnace. The book is in front of the table. He '
              'walked into the basement with the horror movie from the night '
              'before playing in his head. He turned in the research paper on '
              'Friday; otherwise, he would have not passed the class.')

Fragment(uuid='878c8ace-e761-46c5-8135-7f6ff154f09d',
         path='/data/text/data_100_random_text.txt',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "For some unfathomable reason, the response team didn't consider "
              'a lack of milk for my cereal as a proper emergency. He turned '
              'in the research paper on Friday; otherwise, he would have not '
              'passed the class. Her hair was windswept as she rode in the '
              'black convertible. Karen realized the only way she was getting '
              'into heaven was to cheat.')

Fragment(uuid='79c39fa4-0a1c-4de9-b140-ee6a28f591ce',
         path='/data/text/data_100_random_text.txt',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. I covered my friend in baby '
              'oil. Today arrived with a crash of my car through the garage '
              "door. She couldn't understand why nobody else could see that "
              'the sky is full of cotton candy.')

Fragment(uuid='19da7e96-49ed-40a2-ab09-a3c76ec82496',
         path='/data/text/data_100_random_text.txt',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The book is in front of the table. There should have been a '
              "time and a place, but this wasn't it. I'd rather be a bird than "
              'a fish. The blue parrot drove by the hitchhiking mongoose.')

Fragment(uuid='206549a7-d259-4bf5-8386-d8e37d6bea84',
         path='/data/text/data_100_random_text.txt',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Karen realized the only way she was getting into heaven was to '
              'cheat. Two seats were vacant. Just because the water is red '
              "doesn't mean you can't drink it. She wondered what his eyes "
              'were saying beneath his mirrored sunglasses.')

Fragment(uuid='cbcc48ff-c2c8-4fef-96fb-3f0cfcfbd344',
         path='/data/text/data_100_random_text.txt',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Strawberries must be the one food that doesn't go well with "
              'this brand of paint. It caught him off guard that space smelled '
              'of seared steak. The book is in front of the table. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny.')

Fragment(uuid='36effd5c-ba53-4319-a61d-b0bd2862ebe5',
         path='/data/text/data_100_random_text.txt',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The team members were hard to tell apart since they all wore '
              'their hair in a ponytail. He found his art never progressed '
              'when he literally used his sweat and tears. There was no ice '
              'cream in the freezer, nor did they have money to go to the '
              "store. You're unsure whether or not to trust him, but very "
              'thankful that you wore a turtle neck.')

Fragment(uuid='6c4da87f-c468-4299-ba74-762e1dc71a28',
         path='/data/text/data_100_random_text.txt',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The team members were hard to tell apart since they all wore '
              'their hair in a ponytail. It was the scarcity that fueled his '
              'creativity. He turned in the research paper on Friday; '
              'otherwise, he would have not passed the class. The busker hoped '
              'that the people passing by would throw money, but they threw '
              'tomatoes instead, so he exchanged his hat for a juicer.')

Fragment(uuid='87dab904-3508-4c39-aa27-12b3c68e7b56',
         path='/data/text/data_100_random_text.txt',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Each person who knows you has a different perception of who you '
              'are. The team members were hard to tell apart since they all '
              'wore their hair in a ponytail. Just because the water is red '
              "doesn't mean you can't drink it. We have a lot of rain in June.")

Fragment(uuid='78d66d33-2f07-4bff-8ed8-58d70177be9a',
         path='/data/text/data_100_random_text.txt',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He found his art never progressed when he literally used his '
              'sweat and tears. Karen realized the only way she was getting '
              'into heaven was to cheat. The green tea and avocado smoothie '
              'turned out exactly as would be expected. It caught him off '
              'guard that space smelled of seared steak.')

Fragment(uuid='a0469dc8-3c03-4a4a-a04c-2176ad839f47',
         path='/data/text/data_100_random_text.txt',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She looked into the mirror and saw another person. The team '
              'members were hard to tell apart since they all wore their hair '
              'in a ponytail. There should have been a time and a place, but '
              "this wasn't it. Just because the water is red doesn't mean you "
              "can't drink it.")

Fragment(uuid='364d02a5-a9ef-4761-8740-07372122ebf1',
         path='/data/text/data_100_random_text.txt',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She finally understood that grief was her love with no place '
              'for it to go. The ants enjoyed the barbecue more than the '
              'family. The snow-covered path was no help in finding his way '
              "out of the back-country. It's never comforting to know that "
              'your fate depends on something as unpredictable as the popping '
              'of corn.')

Fragment(uuid='89c33a29-3934-4fcc-b86d-73cf6e892efe',
         path='/data/text/data_100_random_text.txt',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She traveled because it cost the same as therapy and was a lot '
              'more enjoyable. He decided to fake his disappearance to avoid '
              'jail. The green tea and avocado smoothie turned out exactly as '
              'would be expected. He knew it was going to be a bad day when he '
              'saw mountain lions roaming the streets.')

Fragment(uuid='a4c9de81-2cb0-4b13-951a-dddf14ca242b',
         path='/data/text/data_100_random_text.txt',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The sudden rainstorm washed crocodiles into the ocean. She '
              'wondered what his eyes were saying beneath his mirrored '
              'sunglasses. If eating three-egg omelets causes weight-gain, '
              'budgie eggs are a good substitute. He knew it was going to be a '
              'bad day when he saw mountain lions roaming the streets.')

Fragment(uuid='2d6e4b2f-8247-4a1b-9ac8-5cf82918ff64',
         path='/data/text/data_100_random_text.txt',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The blue parrot drove by the hitchhiking mongoose. He dreamed '
              'of eating green apples with worms. He was all business when he '
              'wore his clown suit. The snow-covered path was no help in '
              'finding his way out of the back-country.')

Fragment(uuid='ae33d2b9-e85a-4f5b-95f5-45c1f1144157',
         path='/data/text/data_100_random_text.txt',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Just go ahead and press that button. Karen realized the only '
              'way she was getting into heaven was to cheat. My biggest joy is '
              'roasting almonds while stalking prey. The waves were crashing '
              'on the shore; it was a lovely sight.')

Fragment(uuid='5adde9af-bfcf-4d15-b96d-76eee1750758',
         path='/data/text/data_100_random_text.txt',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Gwen had her best sleep ever on her new bed of nails. He '
              'learned the important lesson that a picnic at the beach on a '
              'windy day is a bad idea. It caught him off guard that space '
              'smelled of seared steak. My biggest joy is roasting almonds '
              'while stalking prey.')

Fragment(uuid='d94059e7-7cef-4628-b38d-919b92130ab8',
         path='/data/text/data_100_random_text.txt',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              'Written warnings in instruction manuals are worthless since '
              "rabbits can't read. If I don’t like something, I’ll stay away "
              'from it. He used to get confused between soldiers and '
              'shoulders, but as a military man, he now soldiers '
              'responsibility.')

Fragment(uuid='dc43db96-1abe-4a97-bf09-392261adb1d2',
         path='/data/text/data_100_random_text.txt',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He learned the important lesson that a picnic at the beach on a '
              'windy day is a bad idea. The Great Dane looked more like a '
              'horse than a dog. Written warnings in instruction manuals are '
              "worthless since rabbits can't read. He decided that the time "
              "had come to be stronger than any of the excuses he'd used until "
              'then.')

Fragment(uuid='75e73723-28a5-4c1a-b1d5-a24debd8fca9',
         path='/data/text/data_100_random_text.txt',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'My biggest joy is roasting almonds while stalking prey. When '
              'confronted with a rotary dial phone the teenager was perplexed. '
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'The near-death experience brought new ideas to light.')

Fragment(uuid='6f8f90e2-780c-4f78-aaa8-a07f50f78529',
         path='/data/text/data_100_random_text.txt',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'My secretary is the only person who truly understands my '
              'stamp-collecting obsession. Instead of a bachelorette party '
              'Just go ahead and press that button. The ants enjoyed the '
              'barbecue more than the family.')

Fragment(uuid='6bcca8b2-bc61-49e3-b887-bcb2d0fa3adb',
         path='/data/text/data_100_random_text.txt',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It caught him off guard that space smelled of seared steak. The '
              'Great Dane looked more like a horse than a dog. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny. There should have been a time and a place, but this '
              "wasn't it.")

Fragment(uuid='e282b43e-b51f-44de-a3bc-57f481c03b5a',
         path='/data/text/data_100_random_text.txt',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He turned in the research paper on Friday; otherwise, he would '
              'have not passed the class. Tomatoes make great weapons when '
              'water balloons aren’t available. He picked up trash in his '
              "spare time to dump in his neighbor's yard. It caught him off "
              'guard that space smelled of seared steak.')

Fragment(uuid='81a588a0-bb67-46d7-a0cb-39d33f38d55a',
         path='/data/text/data_100_random_text.txt',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'He dreamed of leaving his law firm to open a portable dog wash. '
              'When confronted with a rotary dial phone the teenager was '
              "perplexed. There's probably enough glass in my cupboard to "
              'build an undersea aquarium.')

Fragment(uuid='299d0eb8-dc6a-48f7-a418-ec71c3a47bc1',
         path='/data/text/data_100_random_text.txt',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "He's in a boy band which doesn't make much sense for a snake. I "
              'was starting to worry that my pet turtle could tell what I was '
              "thinking. You realize you're not alone as you sit in your "
              'bedroom massaging your calves after a long day of playing '
              'tug-of-war with Grandpa Joe in the hospital. He picked up trash '
              "in his spare time to dump in his neighbor's yard.")

Fragment(uuid='5469e925-9e0b-4dfa-b5ca-5ac449d3293f',
         path='/data/text/data_100_random_text.txt',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'A glittering gem is not enough. The green tea and avocado '
              'smoothie turned out exactly as would be expected. The '
              'near-death experience brought new ideas to light. Today arrived '
              'with a crash of my car through the garage door.')

Fragment(uuid='64c998c3-0d75-4e9d-b7a2-62d2c7eeabd0',
         path='/data/text/data_100_random_text.txt',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Her hair was windswept as she rode in the black convertible. '
              'His get rich quick scheme was to grow a cactus farm. He quietly '
              'entered the museum as the super bowl started. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny.')

Fragment(uuid='9b1ae2be-9dfa-4cb9-a550-e24e73fb16e7',
         path='/data/text/data_100_random_text.txt',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "He's in a boy band which doesn't make much sense for a snake. "
              'He was all business when he wore his clown suit. The hawk '
              'didn’t understand why the ground squirrels didn’t want to be '
              'his friend. When confronted with a rotary dial phone the '
              'teenager was perplexed.')

Fragment(uuid='80d9a398-aa1e-429d-baad-8c81bd77604d',
         path='/data/text/data_100_random_text.txt',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It was the scarcity that fueled his creativity. Strawberries '
              "must be the one food that doesn't go well with this brand of "
              'paint. He was all business when he wore his clown suit. The '
              'overpass went under the highway and into a secret world.')

Fragment(uuid='33aa7ede-5298-42ab-8611-15d6077ba92e',
         path='/data/text/data_100_random_text.txt',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Various sea birds are elegant, but nothing is as elegant as a '
              "gliding pelican. Courage and stupidity were all he had. There's "
              'a reason that roses have thorns. He was surprised that his '
              'immense laziness was inspirational to others.')

Fragment(uuid='27bd4fac-eb65-493c-8669-22e940192d71',
         path='/data/text/data_100_random_text.txt',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Instead of a bachelorette party The hawk didn’t understand why '
              'the ground squirrels didn’t want to be his friend. My secretary '
              'is the only person who truly understands my stamp-collecting '
              'obsession. It was the scarcity that fueled his creativity.')

Fragment(uuid='1efec726-35f4-4ee6-8d05-bea119596560',
         path='/data/text/data_100_random_text.txt',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'For the 216th time, he said he would quit drinking soda after '
              'this last Coke. Today arrived with a crash of my car through '
              'the garage door. It was the scarcity that fueled his '
              'creativity. When she didn’t like a guy who was trying to pick '
              'her up, she started using sign language.')

Fragment(uuid='c2dc8d4e-0220-46f9-a1f7-c20cb672feb4',
         path='/data/text/data_100_random_text.txt',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'If eating three-egg omelets causes weight-gain, budgie eggs are '
              'a good substitute. Just go ahead and press that button. Written '
              'warnings in instruction manuals are worthless since rabbits '
              "can't read. I covered my friend in baby oil.")

Fragment(uuid='268694ef-6a90-45f9-8204-9635acea4a0b',
         path='/data/text/data_100_random_text.txt',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'A glittering gem is not enough. Gwen had her best sleep ever on '
              'her new bed of nails. The near-death experience brought new '
              'ideas to light. She finally understood that grief was her love '
              'with no place for it to go.')

Fragment(uuid='00945fe1-2bdc-4b15-b08b-182b8121f01a',
         path='/data/text/data_100_random_text.txt',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'The anaconda was the greatest criminal mastermind in this part '
              'of the neighborhood. The sudden rainstorm washed crocodiles '
              'into the ocean. For some unfathomable reason, the response team '
              "didn't consider a lack of milk for my cereal as a proper "
              'emergency.')

Fragment(uuid='f791d88e-05f0-4bdc-b894-9a7f012c1479',
         path='/data/text/data_100_random_text.txt',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He walked into the basement with the horror movie from the '
              'night before playing in his head. There should have been a time '
              "and a place, but this wasn't it. It caught him off guard that "
              'space smelled of seared steak. He poured rocks in the dungeon '
              'of his mind.')

Fragment(uuid='bfcd0fb2-5578-4d86-a12d-9300baaae36a',
         path='/data/text/data_100_random_text.txt',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "You're unsure whether or not to trust him, but very thankful "
              'that you wore a turtle neck. The book is in front of the table. '
              'It caught him off guard that space smelled of seared steak. It '
              "isn't difficult to do a handstand if you just stand on your "
              'hands.')

Fragment(uuid='85a2d27b-4545-4f54-9435-f57caf9205b0',
         path='/data/text/data_100_random_text.txt',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "She couldn't understand why nobody else could see that the sky "
              'is full of cotton candy. The sudden rainstorm washed crocodiles '
              'into the ocean. Various sea birds are elegant, but nothing is '
              'as elegant as a gliding pelican. Homesickness became contagious '
              "in the young campers' cabin.")

Fragment(uuid='78299b26-68b4-4633-938e-9aed0bffe6b6',
         path='/data/text/data_100_random_text.txt',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The sudden rainstorm washed crocodiles into the ocean. '
              "Strawberries must be the one food that doesn't go well with "
              'this brand of paint. The ants enjoyed the barbecue more than '
              'the family. Gwen had her best sleep ever on her new bed of '
              'nails.')

Fragment(uuid='6d90cfca-ef32-4adf-9794-ee43da2d1906',
         path='/data/text/data_100_random_text.txt',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The Great Dane looked more like a horse than a dog. The '
              'anaconda was the greatest criminal mastermind in this part of '
              'the neighborhood. Courage and stupidity were all he had. For '
              'the 216th time, he said he would quit drinking soda after this '
              'last Coke.')

Fragment(uuid='9199795a-2e0c-4288-a9e5-8b9a6739558f',
         path='/data/text/data_100_random_text.txt',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Honestly, I didn't care much for the first season, so I didn't "
              'bother with the second. My biggest joy is roasting almonds '
              'while stalking prey. It caught him off guard that space smelled '
              'of seared steak. The team members were hard to tell apart since '
              'they all wore their hair in a ponytail.')

Fragment(uuid='10f5b110-ff3b-4ae0-a380-313d0b3a4e4a',
         path='/data/text/data_100_random_text.txt',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He dreamed of leaving his law firm to open a portable dog wash. '
              'I’m a living furnace. He dreamed of eating green apples with '
              "worms. It's never comforting to know that your fate depends on "
              'something as unpredictable as the popping of corn.')

Fragment(uuid='f1553099-17b6-48f8-9c2e-564b2a3f0789',
         path='/data/text/data_100_random_text.txt',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. Gwen had her best sleep ever '
              'on her new bed of nails. He poured rocks in the dungeon of his '
              'mind. It was the scarcity that fueled his creativity.')

Fragment(uuid='2f5564c8-57e8-42ba-9fd4-a2ec6709c587',
         path='/data/text/data_100_random_text.txt',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He poured rocks in the dungeon of his mind. Tomatoes make great '
              'weapons when water balloons aren’t available. He learned the '
              'important lesson that a picnic at the beach on a windy day is a '
              'bad idea. The team members were hard to tell apart since they '
              'all wore their hair in a ponytail.')

Fragment(uuid='4a7a54e9-c6d8-4761-b427-73adea8f580d',
         path='/data/text/data_100_random_text.txt',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'My secretary is the only person who truly understands my '
              'stamp-collecting obsession. She discovered van life is '
              "difficult with 2 cats and a dog. It isn't difficult to do a "
              'handstand if you just stand on your hands. The snow-covered '
              'path was no help in finding his way out of the back-country.')

Fragment(uuid='84ec7224-33d9-41fc-967b-49fdbcff13de',
         path='/data/text/data_100_random_text.txt',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'His thought process was on so many levels that he gave himself '
              'a phobia of heights. When confronted with a rotary dial phone '
              'the teenager was perplexed. The fence was confused about '
              'whether it was supposed to keep things in or keep things out. '
              'There can never be too many cherries on an ice cream sundae.')

Fragment(uuid='92fb0dae-5337-4163-b38f-db9153714f63',
         path='/data/text/data_100_random_text.txt',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He was disappointed when he found the beach to be so sandy and '
              'the sun so sunny. Just go ahead and press that button. It '
              'caught him off guard that space smelled of seared steak. '
              'Various sea birds are elegant, but nothing is as elegant as a '
              'gliding pelican.')

Fragment(uuid='270dd8c2-d84f-447d-8e22-ea769307726f',
         path='/data/text/data_100_random_text.txt',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'His thought process was on so many levels that he gave himself '
              'a phobia of heights. I had a friend in high school named Rick '
              'Shaw, but he was fairly useless as a mode of transport. He '
              'decided that the time had come to be stronger than any of the '
              "excuses he'd used until then. The fence was confused about "
              'whether it was supposed to keep things in or keep things out.')

Fragment(uuid='3a4692e8-b80b-447a-b138-968aa83b20cf',
         path='/data/text/data_100_random_text.txt',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He was disappointed when he found the beach to be so sandy and '
              'the sun so sunny. He decided to fake his disappearance to avoid '
              'jail. Courage and stupidity were all he had. Each person who '
              'knows you has a different perception of who you are.')

Fragment(uuid='d987ee48-04e5-40f7-a66e-ff96f51ec396',
         path='/data/text/data_100_random_text.txt',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Strawberries must be the one food that doesn't go well with "
              "this brand of paint. She couldn't understand why nobody else "
              'could see that the sky is full of cotton candy. The overpass '
              'went under the highway and into a secret world. It was always '
              'dangerous to drive with him since he insisted the safety cones '
              'were a slalom course.')

Fragment(uuid='281290cf-d30f-40be-942d-7986a5b027e5',
         path='/data/text/data_100_random_text.txt',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She wondered what his eyes were saying beneath his mirrored '
              "sunglasses. You're unsure whether or not to trust him, but very "
              'thankful that you wore a turtle neck. Two seats were vacant. '
              'Tomatoes make great weapons when water balloons aren’t '
              'available.')

Fragment(uuid='fe335484-4b1d-4b5f-8be7-d2023534efa0',
         path='/data/text/data_100_random_text.txt',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The near-death experience brought new ideas to light. His '
              'thought process was on so many levels that he gave himself a '
              "phobia of heights. I'd rather be a bird than a fish. Her hair "
              'was windswept as she rode in the black convertible.')

Fragment(uuid='df048418-64d3-4c43-ad8c-088b140e72ca',
         path='/data/text/data_100_random_text.txt',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The ants enjoyed the barbecue more than the family. Written '
              'warnings in instruction manuals are worthless since rabbits '
              "can't read. Instead of a bachelorette party There was no ice "
              'cream in the freezer, nor did they have money to go to the '
              'store.')

Fragment(uuid='134ae6ab-f2b0-4ae7-a63c-6157305376eb',
         path='/data/text/data_100_random_text.txt',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He found his art never progressed when he literally used his '
              'sweat and tears. She finally understood that grief was her love '
              'with no place for it to go. He was surprised that his immense '
              'laziness was inspirational to others. Written warnings in '
              "instruction manuals are worthless since rabbits can't read.")

Fragment(uuid='01b1fa75-4931-4d1f-a63f-299c42f7708f',
         path='/data/text/data_100_random_text.txt',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The blue parrot drove by the hitchhiking mongoose. Joe '
              'discovered that traffic cones make excellent megaphones. '
              'Tomatoes make great weapons when water balloons aren’t '
              'available. When confronted with a rotary dial phone the '
              'teenager was perplexed.')

Fragment(uuid='c4c20959-8a8c-4e11-8999-4e3ff01f8838',
         path='/data/text/data_100_random_text.txt',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He was disappointed when he found the beach to be so sandy and '
              'the sun so sunny. Two seats were vacant. Homesickness became '
              "contagious in the young campers' cabin. The overpass went under "
              'the highway and into a secret world.')

Fragment(uuid='2f3d1ee5-1d2a-46ed-87c5-843d7caf7698',
         path='/data/text/data_100_random_text.txt',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'She had some amazing news to share but nobody to share it with. '
              "He picked up trash in his spare time to dump in his neighbor's "
              'yard. There can never be too many cherries on an ice cream '
              'sundae. The team members were hard to tell apart since they all '
              'wore their hair in a ponytail.')

Fragment(uuid='cf202de5-f5c3-4788-bf0b-c001d5273e4b',
         path='/data/text/data_100_random_text.txt',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'When she didn’t like a guy who was trying to pick her up, she '
              'started using sign language. He turned in the research paper on '
              'Friday; otherwise, he would have not passed the class. If I '
              'don’t like something, I’ll stay away from it. Various sea birds '
              'are elegant, but nothing is as elegant as a gliding pelican.')

Fragment(uuid='3b064511-a624-45aa-a649-1e8cb03aece9',
         path='/data/text/data_100_random_text.txt',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'I covered my friend in baby oil. Written warnings in '
              "instruction manuals are worthless since rabbits can't read. "
              'There was coal in his stocking and he was thrilled. He had '
              'unknowingly taken up sleepwalking as a nighttime hobby.')

Fragment(uuid='3939120c-cf1c-4684-8b70-b2d05e14fc2f',
         path='/data/text/data_100_random_text.txt',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'I was starting to worry that my pet turtle could tell what I '
              'was thinking. He learned the important lesson that a picnic at '
              'the beach on a windy day is a bad idea. The small white buoys '
              'marked the location of hundreds of crab pots. He was all '
              'business when he wore his clown suit.')

Fragment(uuid='a988fa0b-b756-4571-a035-ea2e8d6e8ab0',
         path='/data/text/data_100_random_text.txt',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Just because the water is red doesn't mean you can't drink it. "
              'The book is in front of the table. The near-death experience '
              'brought new ideas to light. He was disappointed when he found '
              'the beach to be so sandy and the sun so sunny.')

Fragment(uuid='d8f98159-ccf8-44fb-aacb-1bd5e4a2a2d6',
         path='/data/text/data_100_random_text.txt',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'If eating three-egg omelets causes weight-gain, budgie eggs are '
              'a good substitute. She wondered what his eyes were saying '
              'beneath his mirrored sunglasses. She looked into the mirror and '
              'saw another person. There was no ice cream in the freezer, nor '
              'did they have money to go to the store.')

Fragment(uuid='c8f6d0fb-1407-49d8-96cb-90f8e497a3ae',
         path='/data/text/data_100_random_text.txt',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'The hawk didn’t understand why the ground squirrels didn’t want '
              'to be his friend. He turned in the research paper on Friday; '
              'otherwise, he would have not passed the class. The blue parrot '
              'drove by the hitchhiking mongoose. My biggest joy is roasting '
              'almonds while stalking prey.')

Fragment(uuid='4c7ecb61-dd16-48fd-a0ff-f2ca22a08505',
         path='/data/text/data_100_random_text.txt',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              "Honestly, I didn't care much for the first season, so I didn't "
              "bother with the second. You realize you're not alone as you sit "
              'in your bedroom massaging your calves after a long day of '
              "playing tug-of-war with Grandpa Joe in the hospital. I'd rather "
              'be a bird than a fish.')

Fragment(uuid='5c3362f2-e511-4a0d-a59f-6a6e9950311f',
         path='/data/text/data_100_random_text.txt',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "A glittering gem is not enough. Honestly, I didn't care much "
              "for the first season, so I didn't bother with the second. He "
              'decided that the time had come to be stronger than any of the '
              "excuses he'd used until then. She couldn't understand why "
              'nobody else could see that the sky is full of cotton candy.')

Fragment(uuid='8747a48d-53ab-43ab-a0f4-bde7ae7cf733',
         path='/data/text/data_100_random_text.txt',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "Honestly, I didn't care much for the first season, so I didn't "
              'bother with the second. Her hair was windswept as she rode in '
              'the black convertible. She wondered what his eyes were saying '
              'beneath his mirrored sunglasses. If I don’t like something, '
              'I’ll stay away from it.')

Fragment(uuid='6b8e5ebd-bd03-4379-b489-fd8184aa5fea',
         path='/data/text/data_100_random_text.txt',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. He is no James Bond; his '
              'name is Roger Moore. Courage and stupidity were all he had. '
              "He's in a boy band which doesn't make much sense for a snake.")

Fragment(uuid='d3f4e78a-b42e-4504-b964-cc8f8fc19ff4',
         path='/data/text/data_100_random_text.txt',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Today arrived with a crash of my car through the garage door. '
              'The busker hoped that the people passing by would throw money, '
              'but they threw tomatoes instead, so he exchanged his hat for a '
              "juicer. For some unfathomable reason, the response team didn't "
              'consider a lack of milk for my cereal as a proper emergency. We '
              'have a lot of rain in June.')

Fragment(uuid='5a4d7ba1-1fc2-4c52-bb83-c61fbd93b25f',
         path='/data/text/data_100_random_text.txt',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'He turned in the research paper on Friday; otherwise, he would '
              "have not passed the class. It's never comforting to know that "
              'your fate depends on something as unpredictable as the popping '
              'of corn. The book is in front of the table. The waves were '
              'crashing on the shore; it was a lovely sight.')

Fragment(uuid='a61d94a3-31f2-42da-8112-56f6e5b704fe',
         path='/data/text/data_100_random_text.txt',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'I was starting to worry that my pet turtle could tell what I '
              "was thinking. Just because the water is red doesn't mean you "
              "can't drink it. It isn't difficult to do a handstand if you "
              'just stand on your hands. She traveled because it cost the same '
              'as therapy and was a lot more enjoyable.')

Fragment(uuid='e53fdb18-8320-48ad-a361-65274fd0d616',
         path='/data/text/data_100_random_text.txt',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              "I’m a living furnace. There's a reason that roses have thorns. "
              'He is no James Bond; his name is Roger Moore. Her hair was '
              'windswept as she rode in the black convertible.')

Fragment(uuid='086894fe-b180-4324-9f91-5d9b9e82771d',
         path='/logs/crosswords/env_cache.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /logs/crosswords/env_cache.json\n')

Fragment(uuid='1e591103-cd0d-47fd-a76b-914d390e5cab',
         path='/logs/crosswords/env_prompt_status_cache.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /logs/crosswords/env_prompt_status_cache.json\n')

Fragment(uuid='b0b49c95-4840-4e71-8dd9-2041a671572f',
         path='/logs/crosswords/gpt-4_0.7_naive_cot_sample_10_start0_end20.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/crosswords/gpt-4_0.7_naive_cot_sample_10_start0_end20.json\n')

Fragment(uuid='48a3a1dd-7c91-4b11-a55f-865d5c47396c',
         path='/logs/crosswords/gpt-4_0.7_naive_standard_sample_10_start0_end20.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/crosswords/gpt-4_0.7_naive_standard_sample_10_start0_end20.json\n')

Fragment(uuid='ead20d3b-20b6-40e4-89ac-529fa7e4b29e',
         path='/logs/crosswords/infoss_dfs_no_prune.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /logs/crosswords/infoss_dfs_no_prune.json\n')

Fragment(uuid='0758e11b-74fa-4669-a6e7-a0d9a4bf42fe',
         path='/logs/crosswords/infoss_dfs_prune.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /logs/crosswords/infoss_dfs_prune.json\n')

Fragment(uuid='d2249586-902b-43c0-89e5-07eef5fecbae',
         path='/logs/game24/gpt-4_0.7_naive_cot_sample_100_start900_end1000.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/game24/gpt-4_0.7_naive_cot_sample_100_start900_end1000.json\n')

Fragment(uuid='d25f11c1-cb1c-466e-bcea-8f6d2ef2f69e',
         path='/logs/game24/gpt-4_0.7_naive_standard_sample_100_start900_end1000.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/game24/gpt-4_0.7_naive_standard_sample_100_start900_end1000.json\n')

Fragment(uuid='70f6167a-7a61-43ed-a0d9-5d9cc9b0ce41',
         path='/logs/game24/gpt-4_0.7_propose1_value3_greedy5_start900_end1000.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/game24/gpt-4_0.7_propose1_value3_greedy5_start900_end1000.json\n')

Fragment(uuid='b346745b-88c8-4591-a1d1-c9b5a5f12977',
         path='/logs/text/gpt-4_1.0_generate_sample_select_greedy_sample5_start0_end100.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/text/gpt-4_1.0_generate_sample_select_greedy_sample5_start0_end100.json\n')

Fragment(uuid='c67ad424-96a8-4721-8058-3183f1c11ed2',
         path='/logs/text/gpt-4_1.0_naive_cot_sample_10_start0_end100.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/text/gpt-4_1.0_naive_cot_sample_10_start0_end100.json\n')

Fragment(uuid='5ad9e5e9-6382-4270-b0f0-94cc8978a553',
         path='/logs/text/gpt-4_1.0_naive_standard_sample_10_start0_end100.json',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: '
              '/logs/text/gpt-4_1.0_naive_standard_sample_10_start0_end100.json\n')

Fragment(uuid='54a7bca8-ef7d-43b8-8bb2-2f7fa4286da6',
         path='/models.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import os\n'
              'import openai\n'
              'import backoff \n'
              '\n'
              'completion_tokens = prompt_tokens = 0\n'
              '\n'
              'api_key = os.getenv("OPENAI_API_KEY", "")\n'
              'if api_key != "":\n'
              '    openai.api_key = api_key\n'
              'else:\n'
              '    print("Warning: OPENAI_API_KEY is not set")\n'
              '    \n'
              'api_base = os.getenv("OPENAI_API_BASE", "")\n'
              'if api_base != "":\n'
              '    print("Warning: OPENAI_API_BASE is set to '
              '{}".format(api_base))\n'
              '    openai.api_base = api_base\n'
              '\n'
              '@backoff.on_exception(backoff.expo, openai.error.OpenAIError)\n'
              'def completions_with_backoff(**kwargs):\n'
              '    return openai.ChatCompletion.create(**kwargs)\n')

Fragment(uuid='b2325b2c-9620-4de0-8557-9780ecabc3d4',
         path='/models.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='bee62e57-9ebd-4d93-ae5e-984241d54596',
         path='/models.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /models.py\n'
              '  Functions: chatgpt gpt gpt_usage\n'
              '  Methods: completions_with_backoff\n'
              '  Variables: api_base api_key cnt completion_tokens cost '
              'messages openai.api_base openai.api_key outputs res\n'
              '  Usages: ChatCompletion OpenAIError backend backoff choice '
              'create error expo extend format getenv kwargs list max_tokens '
              'min model on_exception openai print prompt prompt_tokens stop '
              'temperature\n')

Fragment(uuid='ae6c8dbc-e27b-40a1-a7b3-764ec8e764c5',
         path='/models.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import openai')

Fragment(uuid='ccef07ec-83e5-454d-8fa5-82eee8859e22',
         path='/models.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='import backoff')

Fragment(uuid='435551ed-a873-45ab-afde-4bd04fe9998e',
         path='/models.py',
         lineno=5,
         depth=0,
         type='variable',
         name='completion_tokens',
         text='completion_tokens = prompt_tokens = 0')

Fragment(uuid='1f277da2-0a2a-44f9-874e-64bc169a782b',
         path='/models.py',
         lineno=7,
         depth=0,
         type='variable',
         name='api_key',
         text='api_key = os.getenv("OPENAI_API_KEY", "")')

Fragment(uuid='48ce0d89-7140-48b5-a1b1-f4bed1cf2fdf',
         path='/models.py',
         lineno=9,
         depth=2,
         type='variable',
         name='openai.api_key',
         text='openai.api_key = api_key')

Fragment(uuid='eaff45f8-ac92-40f1-bf67-f5bc794baf6b',
         path='/models.py',
         lineno=13,
         depth=0,
         type='variable',
         name='api_base',
         text='api_base = os.getenv("OPENAI_API_BASE", "")')

Fragment(uuid='97162f6a-e1c5-473b-98c5-401003ecf245',
         path='/models.py',
         lineno=16,
         depth=2,
         type='variable',
         name='openai.api_base',
         text='openai.api_base = api_base')

Fragment(uuid='eb706964-dc86-4f8e-b075-4008e1156397',
         path='/models.py',
         lineno=19,
         depth=1,
         type='function',
         name='completions_with_backoff',
         text='def completions_with_backoff(**kwargs):\n'
              '    return openai.ChatCompletion.create(**kwargs)')

Fragment(uuid='b2c13afe-daaa-40b8-85fd-6264ac5f9440',
         path='/models.py',
         lineno=21,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def gpt(prompt, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    messages = [{"role": "user", "content": prompt}]\n'
              '    return chatgpt(messages, model=model, '
              'temperature=temperature, max_tokens=max_tokens, n=n, '
              'stop=stop)\n')

Fragment(uuid='b64bdb4d-466e-42b4-9c35-60aeb76d44d8',
         path='/models.py',
         lineno=22,
         depth=0,
         type='function',
         name='gpt',
         text='def gpt(prompt, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    messages = [{"role": "user", "content": prompt}]\n'
              '    return chatgpt(messages, model=model, '
              'temperature=temperature, max_tokens=max_tokens, n=n, stop=stop)')

Fragment(uuid='66a02965-de55-483c-a743-2785abc17e65',
         path='/models.py',
         lineno=23,
         depth=2,
         type='variable',
         name='messages',
         text='messages = [{"role": "user", "content": prompt}]')

Fragment(uuid='f7a8fe0e-14ff-450e-8672-0428371e70b5',
         path='/models.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text='    \n'
              'def chatgpt(messages, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    global completion_tokens, prompt_tokens\n'
              '    outputs = []\n')

Fragment(uuid='ac8cb8ea-f380-4cdd-877b-6356ea14e678',
         path='/models.py',
         lineno=26,
         depth=0,
         type='function',
         name='chatgpt',
         text='def chatgpt(messages, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    global completion_tokens, prompt_tokens\n'
              '    outputs = []\n'
              '    while n > 0:\n'
              '        cnt = min(n, 20)\n'
              '        n -= cnt\n'
              '        res = completions_with_backoff(model=model, '
              'messages=messages, temperature=temperature, '
              'max_tokens=max_tokens, n=cnt, stop=stop)\n'
              '        outputs.extend([choice["message"]["content"] for choice '
              'in res["choices"]])\n'
              '        # log completion tokens\n'
              '        completion_tokens += res["usage"]["completion_tokens"]\n'
              '        prompt_tokens += res["usage"]["prompt_tokens"]\n'
              '    return outputs')

Fragment(uuid='d2f4e6f6-e302-43f6-96de-b685380ab2c0',
         path='/models.py',
         lineno=28,
         depth=2,
         type='variable',
         name='outputs',
         text='outputs = []')

Fragment(uuid='98d8d9d0-5435-48de-9bd4-02b64832f7a3',
         path='/models.py',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text='    while n > 0:\n'
              '        cnt = min(n, 20)\n'
              '        n -= cnt\n'
              '        res = completions_with_backoff(model=model, '
              'messages=messages, temperature=temperature, '
              'max_tokens=max_tokens, n=cnt, stop=stop)\n'
              '        outputs.extend([choice["message"]["content"] for choice '
              'in res["choices"]])\n'
              '        # log completion tokens\n'
              '        completion_tokens += res["usage"]["completion_tokens"]\n'
              '        prompt_tokens += res["usage"]["prompt_tokens"]\n'
              '    return outputs\n')

Fragment(uuid='7e71e374-0392-4870-b932-aabaf9255914',
         path='/models.py',
         lineno=30,
         depth=4,
         type='variable',
         name='cnt',
         text='cnt = min(n, 20)')

Fragment(uuid='876bedbe-6006-4746-a975-7f4530a7fa80',
         path='/models.py',
         lineno=32,
         depth=4,
         type='variable',
         name='res',
         text='res = completions_with_backoff(model=model, messages=messages, '
              'temperature=temperature, max_tokens=max_tokens, n=cnt, '
              'stop=stop)')

Fragment(uuid='45da9246-00ac-42ed-9662-04c5b8d08221',
         path='/models.py',
         lineno=38,
         depth=0,
         type='module',
         name='',
         text='    \n'
              'def gpt_usage(backend="gpt-4"):\n'
              '    global completion_tokens, prompt_tokens\n'
              '    if backend == "gpt-4":\n'
              '        cost = completion_tokens / 1000 * 0.06 + prompt_tokens '
              '/ 1000 * 0.03\n'
              '    elif backend == "gpt-3.5-turbo":\n'
              '        cost = (completion_tokens + prompt_tokens) / 1000 * '
              '0.0002\n'
              '    return {"completion_tokens": completion_tokens, '
              '"prompt_tokens": prompt_tokens, "cost": cost}')

Fragment(uuid='303a08ad-c086-449c-acf3-980e4cbc653b',
         path='/models.py',
         lineno=39,
         depth=0,
         type='function',
         name='gpt_usage',
         text='def gpt_usage(backend="gpt-4"):\n'
              '    global completion_tokens, prompt_tokens\n'
              '    if backend == "gpt-4":\n'
              '        cost = completion_tokens / 1000 * 0.06 + prompt_tokens '
              '/ 1000 * 0.03\n'
              '    elif backend == "gpt-3.5-turbo":\n'
              '        cost = (completion_tokens + prompt_tokens) / 1000 * '
              '0.0002\n'
              '    return {"completion_tokens": completion_tokens, '
              '"prompt_tokens": prompt_tokens, "cost": cost}')

Fragment(uuid='ccfbdf3a-9efd-4032-91ad-57f58341cad1',
         path='/models.py',
         lineno=42,
         depth=4,
         type='variable',
         name='cost',
         text='cost = completion_tokens / 1000 * 0.06 + prompt_tokens / 1000 * '
              '0.03')

Fragment(uuid='cb418234-63b2-4e3f-a4c0-53626a79d2da',
         path='/models.py',
         lineno=44,
         depth=5,
         type='variable',
         name='cost',
         text='cost = (completion_tokens + prompt_tokens) / 1000 * 0.0002')

Fragment(uuid='8b22b026-217a-48d5-b52c-6f7c06e7d04d',
         path='/prompts/crosswords.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# 5 shot\n'
              "standard_prompt = '''\n"
              'Solve 5x5 mini crosswords. Given an input of 5 horizontal clues '
              'and 5 vertical clues, generate an output of 5 rows, where each '
              'row is 5 letter separated by space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To entice\n'
              'h4. To lo')

Fragment(uuid='234a5491-ba89-43b6-b436-1fad6bb61553',
         path='/prompts/crosswords.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /prompts/crosswords.py\n'
              '  Variables: cot_prompt propose_prompt standard_prompt '
              'value_prompt\n')

Fragment(uuid='abd40ab0-59b1-47e4-b11c-fa1a5d8a793b',
         path='/prompts/crosswords.py',
         lineno=2,
         depth=0,
         type='variable',
         name='standard_prompt',
         text="standard_prompt = '''\n"
              'Solve 5x5 mini crosswords. Given an input of 5 horizontal clues '
              'and 5 vertical clues, generate an output of 5 rows, where each '
              'row is 5 letter separated by space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To en')

Fragment(uuid='81c3a867-ebd6-49d0-aa55-151d9cee3338',
         path='/prompts/crosswords.py',
         lineno=8,
         depth=0,
         type='variable',
         name='standard_prompt',
         text='tice\n'
              'h4. To lower; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a European lake\n'
              'v4. To lisp\n'
              'v5. To come in\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n')

Fragment(uuid='df10ad52-8881-455b-854e-59b2b3d6baa6',
         path='/prompts/crosswords.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='wer; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a European lake\n'
              'v4. To lisp\n'
              'v5. To come in\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n'
              '\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus')

Fragment(uuid='bdb39c71-df84-4f46-b373-064f52b0e965',
         path='/prompts/crosswords.py',
         lineno=23,
         depth=0,
         type='variable',
         name='standard_prompt',
         text='\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the ear\n'
              'v1. To swell; to increase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; r')

Fragment(uuid='5ffe8921-d592-4efb-9acd-dfafd6381558',
         path='/prompts/crosswords.py',
         lineno=26,
         depth=0,
         type='module',
         name='',
         text=' genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the ear\n'
              'v1. To swell; to increase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; roscid\n'
              '\n'
              'Output:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R')

Fragment(uuid='0c939e03-236b-4a5e-8758-923bc6d2b363',
         path='/prompts/crosswords.py',
         lineno=34,
         depth=0,
         type='variable',
         name='standard_prompt',
         text='oscid\n'
              '\n'
              'Output:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permission")

Fragment(uuid='d770e2d0-7b59-4404-a212-4f1d80493bf6',
         path='/prompts/crosswords.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text=' A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permission for a priest to leave a diocese\n"
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primi')

Fragment(uuid='a7982765-7128-4e65-8f4f-6f4cdcb688da',
         path='/prompts/crosswords.py',
         lineno=48,
         depth=0,
         type='variable',
         name='standard_prompt',
         text=' for a priest to leave a diocese\n'
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primitive three-sided grass)\n'
              'v3. Grape jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E')

Fragment(uuid='50d9186e-edb6-4fe2-b145-12bd196bd006',
         path='/prompts/crosswords.py',
         lineno=50,
         depth=0,
         type='module',
         name='',
         text='tive three-sided grass)\n'
              'v3. Grape jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E T I T\n'
              'E X E A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result')

Fragment(uuid='532b5e64-7779-4d8b-bc84-7fa15b63804c',
         path='/prompts/crosswords.py',
         lineno=59,
         depth=0,
         type='variable',
         name='standard_prompt',
         text=' T I T\n'
              'E X E A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v4. To indite; to scrib')

Fragment(uuid='3a650d03-37f7-486b-8c8c-977f1f8dde0e',
         path='/prompts/crosswords.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text='\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v4. To indite; to scribble\n'
              'v5. An insecticide\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard')

Fragment(uuid='daeab4dc-e251-48f2-b1ee-edf6f61e373b',
         path='/prompts/crosswords.py',
         lineno=71,
         depth=0,
         type='variable',
         name='standard_prompt',
         text='ble\n'
              'v5. An insecticide\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard\n'
              'h2. H2O; to irrigate\n'
              'h3. The companion to an "intro", a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5')

Fragment(uuid='dd75d987-d968-41eb-b159-59bcf16dfb15',
         path='/prompts/crosswords.py',
         lineno=82,
         depth=0,
         type='module',
         name='',
         text='\n'
              'h2. H2O; to irrigate\n'
              'h3. The companion to an "intro", a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; humming\n'
              '\n')

Fragment(uuid='9e4d5018-2030-438a-8d68-e318c07f1241',
         path='/prompts/crosswords.py',
         lineno=86,
         depth=0,
         type='variable',
         name='standard_prompt',
         text='. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; humming\n'
              '\n'
              'Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              '\n'
              'Output:\n'
              "'''")

Fragment(uuid='bcc684d9-7fa3-4df2-a44a-4b64a654792e',
         path='/prompts/crosswords.py',
         lineno=93,
         depth=0,
         type='module',
         name='',
         text='Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              '\n'
              'Output:\n'
              "'''\n"
              '\n'
              '\n'
              '\n'
              "cot_prompt = '''Solve 5x5 mini crosswords. Given an input of 5 "
              'horizontal clues and 5 vertical clues, generate thoughts about '
              'which 5-letter word fits each clue, then an o')

Fragment(uuid='e13e3127-1111-4e1d-8845-db3750986eff',
         path='/prompts/crosswords.py',
         lineno=108,
         depth=0,
         type='module',
         name='',
         text='utput of 5 rows, where each row is 5 letter separated by '
              'space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To entice\n'
              'h4. To lower; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a Europe')

Fragment(uuid='ed26fd4d-13be-43ab-8081-fe802835e123',
         path='/prompts/crosswords.py',
         lineno=108,
         depth=0,
         type='variable',
         name='cot_prompt',
         text="cot_prompt = '''Solve 5x5 mini crosswords. Given an input of 5 "
              'horizontal clues and 5 vertical clues, generate thoughts about '
              'which 5-letter word fits each clue, then an output of 5 rows, '
              'where each row is 5 letter separated by space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To entice\n'
              'h4. To lower; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a European lake\n'
              'v4. To lisp\n'
              'v5. To come ')

Fragment(uuid='f8d60eed-9a15-46d5-ae35-8065dcdd8c86',
         path='/prompts/crosswords.py',
         lineno=118,
         depth=0,
         type='module',
         name='',
         text='an lake\n'
              'v4. To lisp\n'
              'v5. To come in\n'
              '\n'
              'Thoughts:\n'
              'h1. A lunar valley: RILLE\n'
              'h2. A fatty oil: OLEIN\n'
              'h3. To entice: TEMPT\n'
              'h4. To lower; to reduce: ABASE\n'
              'h5. A solitary person: LONER\n'
              'v1. According to the roster: ROTAL\n'
              'v2. Another name for Port-Francqui: ILEBO\n'
              'v3. An i')

Fragment(uuid='c3c2d823-75d6-4371-ba91-705b9ed20f2a',
         path='/prompts/crosswords.py',
         lineno=120,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='in\n'
              '\n'
              'Thoughts:\n'
              'h1. A lunar valley: RILLE\n'
              'h2. A fatty oil: OLEIN\n'
              'h3. To entice: TEMPT\n'
              'h4. To lower; to reduce: ABASE\n'
              'h5. A solitary person: LONER\n'
              'v1. According to the roster: ROTAL\n'
              'v2. Another name for Port-Francqui: ILEBO\n'
              'v3. An ill')

Fragment(uuid='c8c3b122-c59d-4be1-9843-e7cff8377579',
         path='/prompts/crosswords.py',
         lineno=130,
         depth=0,
         type='module',
         name='',
         text='llicit lover; a European lake: LEMAN\n'
              'v4. To lisp: LIPSE\n'
              'v5. To come in: ENTER\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n'
              '\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the ear\n'
              'v1. To swell; to incre')

Fragment(uuid='93fe7e1f-8744-48c1-b6a8-29fc146e1bf2',
         path='/prompts/crosswords.py',
         lineno=130,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='icit lover; a European lake: LEMAN\n'
              'v4. To lisp: LIPSE\n'
              'v5. To come in: ENTER\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n'
              '\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the')

Fragment(uuid='c8ee420f-2f60-4289-88b8-8a19cd30d768',
         path='/prompts/crosswords.py',
         lineno=146,
         depth=0,
         type='variable',
         name='cot_prompt',
         text=' ear\n'
              'v1. To swell; to increase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; roscid\n'
              '\n'
              'Thoughts:\n'
              'h1. One who saws: SAWER\n'
              'h2. A fungus genus: UREDO\n'
              'h3. An assessor: RATER\n')

Fragment(uuid='546413ae-193a-4827-8488-210c70c59958',
         path='/prompts/crosswords.py',
         lineno=147,
         depth=0,
         type='module',
         name='',
         text='ase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; roscid\n'
              '\n'
              'Thoughts:\n'
              'h1. One who saws: SAWER\n'
              'h2. A fungus genus: UREDO\n'
              'h3. An assessor: RATER\n'
              'h4. Pasture land: GRAMA\n'
              'h5. Receiving by the ear: EARAL\n'
              'v')

Fragment(uuid='92293f53-a475-406f-be12-0c011989e54f',
         path='/prompts/crosswords.py',
         lineno=157,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='h4. Pasture land: GRAMA\n'
              'h5. Receiving by the ear: EARAL\n'
              'v1. To swell; to increase: SURGE\n'
              'v2. The Brazilian macaw; an Australian bird: ARARA\n'
              'v3. A Timorese island: WETAR\n'
              'v4. Excessive fluid accumulation: EDEMA\n'
              'v5. Dewy; roscid: RORAL')

Fragment(uuid='3d18414c-90fa-4ae9-a316-42c4c8dc606f',
         path='/prompts/crosswords.py',
         lineno=159,
         depth=0,
         type='module',
         name='',
         text='1. To swell; to increase: SURGE\n'
              'v2. The Brazilian macaw; an Australian bird: ARARA\n'
              'v3. A Timorese island: WETAR\n'
              'v4. Excessive fluid accumulation: EDEMA\n'
              'v5. Dewy; roscid: RORAL\n'
              '\n'
              'Output:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum')

Fragment(uuid='60304627-ab62-40ac-bb2b-503ab228983e',
         path='/prompts/crosswords.py',
         lineno=163,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='\n'
              '\n'
              'Output:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permissi")

Fragment(uuid='0b0e49b2-9e0b-4351-bdb6-106a9253dacb',
         path='/prompts/crosswords.py',
         lineno=173,
         depth=0,
         type='module',
         name='',
         text='; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permission for a priest to leave a diocese\n"
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primitive three-sided grass)\n'
              'v3. Gra')

Fragment(uuid='5f5a6292-86d8-4af4-b539-89f518568d66',
         path='/prompts/crosswords.py',
         lineno=177,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='on for a priest to leave a diocese\n'
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primitive three-sided grass)\n'
              'v3. Grape jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Thoughts:\n'
              'h1. Dandruff; scum; the')

Fragment(uuid='56dc4880-6855-4241-b504-df2d2b98b0b4',
         path='/prompts/crosswords.py',
         lineno=180,
         depth=0,
         type='module',
         name='',
         text='pe jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Thoughts:\n'
              'h1. Dandruff; scum; the bull-trout: SCURF\n'
              'h2. One who greets; to vacillate; a British river: WAVER\n'
              'h3. A Turkish written decree: IRADE\n'
              'h4. Mignon; petty; little: PETIT\n')

Fragment(uuid='5b106c47-72d9-4e87-a593-36bbd1b283aa',
         path='/prompts/crosswords.py',
         lineno=185,
         depth=0,
         type='variable',
         name='cot_prompt',
         text=' bull-trout: SCURF\n'
              'h2. One who greets; to vacillate; a British river: WAVER\n'
              'h3. A Turkish written decree: IRADE\n'
              'h4. Mignon; petty; little: PETIT\n'
              "h5. A bishop's permission for a priest to leave a diocese: "
              'EXEAT\n'
              'v1. To steal; to brus')

Fragment(uuid='87589b3d-94bf-470f-9751-33a99e090415',
         path='/prompts/crosswords.py',
         lineno=189,
         depth=0,
         type='module',
         name='',
         text="h5. A bishop's permission for a priest to leave a diocese: "
              'EXEAT\n'
              'v1. To steal; to brush across: SWIPE\n'
              'v2. A sedge (a primitive three-sided grass): CAREX\n'
              'v3. Grape jam: UVATE\n'
              'v4. A flatworm larva: REDIA\n'
              'v5. Ore refuse; to prepare material for glass by heat: FRET')

Fragment(uuid='59fe92d6-b0dc-44db-a838-dba71bb36058',
         path='/prompts/crosswords.py',
         lineno=190,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='h across: SWIPE\n'
              'v2. A sedge (a primitive three-sided grass): CAREX\n'
              'v3. Grape jam: UVATE\n'
              'v4. A flatworm larva: REDIA\n'
              'v5. Ore refuse; to prepare material for glass by heat: FRETT\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E T I T\n'
              'E X E ')

Fragment(uuid='504cf024-2a75-4d44-a067-ea7ab6a0449a',
         path='/prompts/crosswords.py',
         lineno=194,
         depth=0,
         type='module',
         name='',
         text='T\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E T I T\n'
              'E X E A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v')

Fragment(uuid='d8125e24-3fdc-4191-922b-0d4235d23627',
         path='/prompts/crosswords.py',
         lineno=201,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v4. To indite; to scribble\n'
              'v5')

Fragment(uuid='a9164017-4b5b-486b-8e2a-be00f636293f',
         path='/prompts/crosswords.py',
         lineno=212,
         depth=0,
         type='module',
         name='',
         text='4. To indite; to scribble\n'
              'v5. An insecticide\n'
              '\n'
              'Thoughts:\n'
              'h1. Presented; revealed: SHOWN\n'
              'h2. An interjection expressing sorrow: WIRRA\n'
              'h3. Benefit; result: AVAIL\n'
              'h4. A cigarette: RETTE\n'
              'h5. Chased up a tree: TREED\n'
              'v1. Swarthy; tawny: SWART\n'
              'v2. An apiarist or bee ke')

Fragment(uuid='5a7100a0-aa5b-4cd0-bce2-1df9b6729e75',
         path='/prompts/crosswords.py',
         lineno=213,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='. An insecticide\n'
              '\n'
              'Thoughts:\n'
              'h1. Presented; revealed: SHOWN\n'
              'h2. An interjection expressing sorrow: WIRRA\n'
              'h3. Benefit; result: AVAIL\n'
              'h4. A cigarette: RETTE\n'
              'h5. Chased up a tree: TREED\n'
              'v1. Swarthy; tawny: SWART\n'
              'v2. An apiarist or bee k')

Fragment(uuid='dcd023bc-b0f5-450e-9423-b0261a0794de',
         path='/prompts/crosswords.py',
         lineno=222,
         depth=0,
         type='module',
         name='',
         text='eper: HIVER\n'
              'v3. To speak formally: ORATE\n'
              'v4. To indite; to scribble: WRITE\n'
              'v5. An insecticide: NALED\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard\n'
              'h2. H2O; to irrigate\n'
              'h3. The companion to an "intro",')

Fragment(uuid='43279a88-eedd-4439-8b8e-52f52bb8303f',
         path='/prompts/crosswords.py',
         lineno=222,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='eeper: HIVER\n'
              'v3. To speak formally: ORATE\n'
              'v4. To indite; to scribble: WRITE\n'
              'v5. An insecticide: NALED\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard\n'
              'h2. H2O; to irrigate\n'
              'h')

Fragment(uuid='f04206b5-8d0d-4baa-8eba-b1119689cdb4',
         path='/prompts/crosswords.py',
         lineno=237,
         depth=0,
         type='module',
         name='',
         text=' a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; humming\n'
              '\n'
              'Thoughts:\n'
              'h1. Scald; an ancient Scandinavian bard: SKA')

Fragment(uuid='ec74b17f-c594-4238-b80f-53222b40f4a8',
         path='/prompts/crosswords.py',
         lineno=237,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='3. The companion to an "intro", a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; hum')

Fragment(uuid='59f1cf54-6d39-4389-a452-3ca86f8f7222',
         path='/prompts/crosswords.py',
         lineno=244,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='ming\n'
              '\n'
              'Thoughts:\n'
              'h1. Scald; an ancient Scandinavian bard: SKALD\n'
              'h2. H2O; to irrigate: WATER\n'
              'h3. The companion to an "intro", a postscript or exit piece: '
              'OUTRO\n'
              'h4. An artificial fabric: ORLON\n'
              'h5. Deep religious feeling: PIETY\n'
              'v1. To ')

Fragment(uuid='f42c19df-bec2-43b6-8dfa-594961ea004f',
         path='/prompts/crosswords.py',
         lineno=247,
         depth=0,
         type='module',
         name='',
         text='LD\n'
              'h2. H2O; to irrigate: WATER\n'
              'h3. The companion to an "intro", a postscript or exit piece: '
              'OUTRO\n'
              'h4. An artificial fabric: ORLON\n'
              'h5. Deep religious feeling: PIETY\n'
              'v1. To rush; to stoop; a descent: SWOOP\n'
              'v2. A New Zealand fir tree: KAURI\n'
              'v3. Mine refuse: ATTLE\n')

Fragment(uuid='b47129cd-b950-45ad-97e5-60a796cdbd80',
         path='/prompts/crosswords.py',
         lineno=252,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='rush; to stoop; a descent: SWOOP\n'
              'v2. A New Zealand fir tree: KAURI\n'
              'v3. Mine refuse: ATTLE\n'
              'v4. The garden dormouse: LEROT\n'
              'v5. Like a drone; humming: DRONY\n'
              '\n'
              'Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              "'''")

Fragment(uuid='802ef01d-b037-4beb-93d8-8507c8426857',
         path='/prompts/crosswords.py',
         lineno=255,
         depth=0,
         type='module',
         name='',
         text='v4. The garden dormouse: LEROT\n'
              'v5. Like a drone; humming: DRONY\n'
              '\n'
              'Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              "'''\n"
              '\n'
              '\n'
              "propose_prompt = '''Let's play a 5 x 5 mini crossword, where "
              'each word should have exactly 5 letters.\n'
              '\n'
              '{input}\n'
              '\n'
              'Give')

Fragment(uuid='7ff72303-894c-4a1e-8313-258406d0b64c',
         path='/prompts/crosswords.py',
         lineno=270,
         depth=0,
         type='variable',
         name='propose_prompt',
         text="propose_prompt = '''Let's play a 5 x 5 mini crossword, where "
              'each word should have exactly 5 letters.\n'
              '\n'
              '{input}\n'
              '\n'
              'Given the current status, list all possible answers for '
              'unfilled or changed words, and your confidence levels '
              '(certain/high/medium/low), using the format "h1. apple '
              '(medium)". Use "certain" cautiously and only when you are 100% '
              'sure this is the correct word. You can list more then one '
              'possible answer for each word.\n'
              "'''")

Fragment(uuid='37f0ec07-bfd7-4dde-bd24-12dd9e5c3363',
         path='/prompts/crosswords.py',
         lineno=274,
         depth=0,
         type='module',
         name='',
         text='n the current status, list all possible answers for unfilled or '
              'changed words, and your confidence levels '
              '(certain/high/medium/low), using the format "h1. apple '
              '(medium)". Use "certain" cautiously and only when you are 100% '
              'sure this is the correct word. You can list more then one '
              'possible answer for each word.\n'
              "'''\n"
              '\n'
              '\n'
              "value_prompt = '''Evaluate if there exists a five letter word "
              'of some meaning that fit some letter constraints '
              '(sure/maybe/impossible).\n'
              '\n'
              'Incorrect; to injure: w _ o _ g\n'
              'The letter constraint is: 5 letter')

Fragment(uuid='9ca73128-a8be-4ff5-a4b5-5fa258b0fd3d',
         path='/prompts/crosswords.py',
         lineno=278,
         depth=0,
         type='variable',
         name='value_prompt',
         text="value_prompt = '''Evaluate if there exists a five letter word "
              'of some meaning that fit some letter constraints '
              '(sure/maybe/impossible).\n'
              '\n'
              'Incorrect; to injure: w _ o _ g\n'
              'The letter constraint is: 5 letters, letter 1 is w, letter 3 is '
              'o, letter 5 is g.\n'
              'Some possible words that mean "Inco')

Fragment(uuid='48d4e874-57fa-4fab-bffc-141ed1b4e019',
         path='/prompts/crosswords.py',
         lineno=281,
         depth=0,
         type='module',
         name='',
         text='s, letter 1 is w, letter 3 is o, letter 5 is g.\n'
              'Some possible words that mean "Incorrect; to injure":\n'
              'wrong (w r o n g): 5 letters, letter 1 is w, letter 3 is o, '
              'letter 5 is g. fit!\n'
              'sure\n'
              '\n'
              'A person with an all-consuming enthusiasm, such as for '
              'computers or anim')

Fragment(uuid='4b2f6903-d577-43a6-9072-b2262be60679',
         path='/prompts/crosswords.py',
         lineno=282,
         depth=0,
         type='variable',
         name='value_prompt',
         text='rrect; to injure":\n'
              'wrong (w r o n g): 5 letters, letter 1 is w, letter 3 is o, '
              'letter 5 is g. fit!\n'
              'sure\n'
              '\n'
              'A person with an all-consuming enthusiasm, such as for '
              'computers or anime: _ _ _ _ u\n'
              'The letter constraint is: 5 letters, letter 5 is u.\n'
              'Some possible words that mean "A person with')

Fragment(uuid='21e298b1-f403-474b-8808-f66d7064d189',
         path='/prompts/crosswords.py',
         lineno=286,
         depth=0,
         type='module',
         name='',
         text='e: _ _ _ _ u\n'
              'The letter constraint is: 5 letters, letter 5 is u.\n'
              'Some possible words that mean "A person with an all-consuming '
              'enthusiasm, such as for computers or anime":\n'
              'geek (g e e k): 4 letters, not 5\n'
              'otaku (o t a k u): 5 letters, letter 5 is u\n'
              'sure\n'
              '\n'
              'Dewy; ')

Fragment(uuid='cc9c3070-96a9-4f9c-935f-dbbe1425f7bf',
         path='/prompts/crosswords.py',
         lineno=288,
         depth=0,
         type='variable',
         name='value_prompt',
         text=' an all-consuming enthusiasm, such as for computers or anime":\n'
              'geek (g e e k): 4 letters, not 5\n'
              'otaku (o t a k u): 5 letters, letter 5 is u\n'
              'sure\n'
              '\n'
              'Dewy; roscid: r _ _ _ l\n'
              'The letter constraint is: 5 letters, letter 1 is r, letter 5 is '
              'l.\n'
              'Some possible words that mean "Dewy; roscid":\n'
              'moi')

Fragment(uuid='57f55c5f-2d50-4851-92ae-d329f3d53eb0',
         path='/prompts/crosswords.py',
         lineno=293,
         depth=0,
         type='module',
         name='',
         text='roscid: r _ _ _ l\n'
              'The letter constraint is: 5 letters, letter 1 is r, letter 5 is '
              'l.\n'
              'Some possible words that mean "Dewy; roscid":\n'
              'moist (m o i s t): 5 letters, letter 1 is m, not r\n'
              'humid (h u m i d): 5 letters, letter 1 is h, not r\n'
              'I cannot think of any words ')

Fragment(uuid='83af8d0f-df4e-45f1-abac-76ec7fe76835',
         path='/prompts/crosswords.py',
         lineno=296,
         depth=0,
         type='variable',
         name='value_prompt',
         text='st (m o i s t): 5 letters, letter 1 is m, not r\n'
              'humid (h u m i d): 5 letters, letter 1 is h, not r\n'
              'I cannot think of any words now. Only 2 letters are '
              'constrained, it is still likely\n'
              'maybe\n'
              '\n'
              'A woodland: _ l _ d e\n'
              'The letter constraint is: 5 letters, letter 2 is l, letter 4 is '
              'd, letter 5')

Fragment(uuid='dad7ca75-99b5-4b99-92e5-336217a29160',
         path='/prompts/crosswords.py',
         lineno=298,
         depth=0,
         type='module',
         name='',
         text='now. Only 2 letters are constrained, it is still likely\n'
              'maybe\n'
              '\n'
              'A woodland: _ l _ d e\n'
              'The letter constraint is: 5 letters, letter 2 is l, letter 4 is '
              'd, letter 5 is e.\n'
              'Some possible words that mean "A woodland":\n'
              'forest (f o r e s t): 6 letters, not 5\n'
              'woods (w o ')

Fragment(uuid='a0a4782b-961e-4249-a176-1dfc36c83209',
         path='/prompts/crosswords.py',
         lineno=302,
         depth=0,
         type='variable',
         name='value_prompt',
         text=' is e.\n'
              'Some possible words that mean "A woodland":\n'
              'forest (f o r e s t): 6 letters, not 5\n'
              'woods (w o o d s): 5 letters, letter 2 is o, not l\n'
              'grove (g r o v e): 5 letters, letter 2 is r, not l\n'
              'I cannot think of any words now. 3 letters are constrained, and '
              '_ l _ d e seems a common patte')

Fragment(uuid='e70200ac-b52a-4abf-b1a5-d4c7c6c4374b',
         path='/prompts/crosswords.py',
         lineno=305,
         depth=0,
         type='module',
         name='',
         text='o d s): 5 letters, letter 2 is o, not l\n'
              'grove (g r o v e): 5 letters, letter 2 is r, not l\n'
              'I cannot think of any words now. 3 letters are constrained, and '
              '_ l _ d e seems a common pattern\n'
              'maybe\n'
              '\n'
              'An inn: _ d _ w f\n'
              'The letter constraint is: 5 letters, letter 2 is')

Fragment(uuid='a9f1beb6-2d00-496d-984a-ba5501f5dce4',
         path='/prompts/crosswords.py',
         lineno=307,
         depth=0,
         type='variable',
         name='value_prompt',
         text='rn\n'
              'maybe\n'
              '\n'
              'An inn: _ d _ w f\n'
              'The letter constraint is: 5 letters, letter 2 is d, letter 4 is '
              'w, letter 5 is f.\n'
              'Some possible words that mean "An inn":\n'
              'hotel (h o t e l): 5 letters, letter 2 is o, not d\n'
              'lodge (l o d g e): 5 letters, letter 2 is o, not d\n'
              'I cannot think of any words now. 3')

Fragment(uuid='cf882448-529a-4ed6-bc0f-e38f0d2bbd36',
         path='/prompts/crosswords.py',
         lineno=311,
         depth=0,
         type='module',
         name='',
         text=' d, letter 4 is w, letter 5 is f.\n'
              'Some possible words that mean "An inn":\n'
              'hotel (h o t e l): 5 letters, letter 2 is o, not d\n'
              'lodge (l o d g e): 5 letters, letter 2 is o, not d\n'
              'I cannot think of any words now. 3 letters are constrained, and '
              'it is extremely unlik')

Fragment(uuid='2bffcb2b-fda9-4b7f-9ba8-13255dee49ed',
         path='/prompts/crosswords.py',
         lineno=315,
         depth=0,
         type='module',
         name='',
         text='ely to have a word with pattern _ d _ w f to mean "An inn"\n'
              'impossible\n'
              '\n'
              'Chance; a parasitic worm; a fish: w r a k _\n'
              'The letter constraint is: 5 letters, letter 1 is w, letter 2 is '
              'r, letter 3 is a, letter 4 is k.\n'
              'Some possible words that mean "Chance; a parasiti')

Fragment(uuid='104ff2b2-bd6b-4be8-bc28-51ba7c603461',
         path='/prompts/crosswords.py',
         lineno=315,
         depth=0,
         type='variable',
         name='value_prompt',
         text=' letters are constrained, and it is extremely unlikely to have '
              'a word with pattern _ d _ w f to mean "An inn"\n'
              'impossible\n'
              '\n'
              'Chance; a parasitic worm; a fish: w r a k _\n'
              'The letter constraint is: 5 letters, letter 1 is w, letter 2 is '
              'r, letter 3 is a, letter 4 is k.\n'
              'Some possible words tha')

Fragment(uuid='2cebe242-a15e-49d4-8901-5f5b6bfb124b',
         path='/prompts/crosswords.py',
         lineno=320,
         depth=0,
         type='module',
         name='',
         text='c worm; a fish":\n'
              'fluke (f l u k e): 5 letters, letter 1 is f, not w\n'
              'I cannot think of any words now. 4 letters are constrained, and '
              'it is extremely unlikely to have a word with pattern w r a k _ '
              'to mean "Chance; a parasitic worm; a fish"\n'
              'impossible\n'
              '\n'
              '{input}\n'
              "'''")

Fragment(uuid='91f66040-d12f-4c59-b57f-85587ae287d6',
         path='/prompts/crosswords.py',
         lineno=320,
         depth=0,
         type='variable',
         name='value_prompt',
         text='t mean "Chance; a parasitic worm; a fish":\n'
              'fluke (f l u k e): 5 letters, letter 1 is f, not w\n'
              'I cannot think of any words now. 4 letters are constrained, and '
              'it is extremely unlikely to have a word with pattern w r a k _ '
              'to mean "Chance; a parasitic worm; a fish"\n'
              'impossible\n'
              '\n'
              '{input}\n'
              "'''")

Fragment(uuid='d661be22-63d0-4a96-b3ed-614e103585e5',
         path='/prompts/game24.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# 5-shot\n'
              "standard_prompt = '''Use numbers and basic arithmetic "
              'operations (+ - * /) to obtain 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Input: 2 9 10 12\n'
              'Answer: 2 * 12 * (10')

Fragment(uuid='0fe59ff1-9165-4985-a448-91241641e038',
         path='/prompts/game24.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /prompts/game24.py\n'
              '  Variables: cot_prompt propose_prompt standard_prompt '
              'value_last_step_prompt value_prompt\n')

Fragment(uuid='41caa318-0481-4117-8186-f7456c0c2f9e',
         path='/prompts/game24.py',
         lineno=2,
         depth=0,
         type='variable',
         name='standard_prompt',
         text="standard_prompt = '''Use numbers and basic arithmetic "
              'operations (+ - * /) to obtain 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Input: 2 9 10 12\n'
              'Answer: 2 * 12 *')

Fragment(uuid='71802d6d-4866-4d6f-9613-377b1800680d',
         path='/prompts/game24.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text=' - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Input: 1 4 8 8\n'
              'Answer: (8 / 4 + 1) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Answer: 5 + 5 + 5 + 9 = 24\n'
              'Input: {input}\n'
              "'''\n"
              '\n'
              '# 5-shot\n'
              'cot_p')

Fragment(uuid='59d55e40-688c-410e-be64-b964ec83b64d',
         path='/prompts/game24.py',
         lineno=6,
         depth=0,
         type='variable',
         name='standard_prompt',
         text=' (10 - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Input: 1 4 8 8\n'
              'Answer: (8 / 4 + 1) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Answer: 5 + 5 + 5 + 9 = 24\n'
              'Input: {input}\n'
              "'''")

Fragment(uuid='b048ed66-208d-4e78-a27f-d0ffa4e7184f',
         path='/prompts/game24.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text="rompt = '''Use numbers and basic arithmetic operations (+ - * "
              '/) to obtain 24. Each step, you are only allowed to choose two '
              'of the remaining numbers to obtain a new number.\n'
              'Input: ')

Fragment(uuid='25b8e0b0-9ddd-47e4-90cd-1537dc27e9b5',
         path='/prompts/game24.py',
         lineno=17,
         depth=0,
         type='variable',
         name='cot_prompt',
         text="cot_prompt = '''Use numbers and basic arithmetic operations (+ "
              '- * /) to obtain 24. Each step, you are only allowed to choose '
              'two of the remaining numbers to obtain a new number.\n'
              'Input: 4 4 6 8\n'
              'Steps:\n'
              '4 + 8')

Fragment(uuid='ca6318cd-f8dd-4fcb-9762-96fa97ed9469',
         path='/prompts/game24.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text='4 4 6 8\n'
              'Steps:\n'
              '4 + 8 = 12 (left: 4 6 12)\n'
              '6 - 4 = 2 (left: 2 12)\n'
              '2 * 12 = 24 (left: 24)\n'
              'Answer: (6 - 4) * (4 + 8) = 24\n'
              'Input: 2 9 10 12\n'
              'Steps:\n'
              '12 * 2 = 24 (left: 9 10 24)\n'
              '10 - 9 = 1 (')

Fragment(uuid='faab0b50-91d6-4096-b49f-b682d1403091',
         path='/prompts/game24.py',
         lineno=20,
         depth=0,
         type='variable',
         name='cot_prompt',
         text=' = 12 (left: 4 6 12)\n'
              '6 - 4 = 2 (left: 2 12)\n'
              '2 * 12 = 24 (left: 24)\n'
              'Answer: (6 - 4) * (4 + 8) = 24\n'
              'Input: 2 9 10 12\n'
              'Steps:\n'
              '12 * 2 = 24 (left: 9 10 24)\n'
              '10 - 9 = 1 (left: 1 24)\n'
              '24 * 1 = 24 (left: 24)\n'
              'Answer: (1')

Fragment(uuid='a1926924-7a85-43f7-a45f-2ad7b8c9778f',
         path='/prompts/game24.py',
         lineno=27,
         depth=0,
         type='module',
         name='',
         text='left: 1 24)\n'
              '24 * 1 = 24 (left: 24)\n'
              'Answer: (12 * 2) * (10 - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Steps:\n'
              '13 - 10 = 3 (left: 3 4 9)\n'
              '9 - 3 = 6 (left: 4 6)\n'
              '4 * 6 = 24 (left: 24)\n'
              'Answer: 4 * (9 - (1')

Fragment(uuid='155f8a9c-bfa3-4448-834e-b639ebc685d5',
         path='/prompts/game24.py',
         lineno=29,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='2 * 2) * (10 - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Steps:\n'
              '13 - 10 = 3 (left: 3 4 9)\n'
              '9 - 3 = 6 (left: 4 6)\n'
              '4 * 6 = 24 (left: 24)\n'
              'Answer: 4 * (9 - (13 - 10)) = 24\n'
              'Input: 1 4 8 8\n'
              'Steps:\n'
              '8 / 4 = 2 (left: 1 2 8)\n'
              '1 + 2 = 3 (')

Fragment(uuid='f1e622cc-06e5-4aa9-81e5-e9a8aaf8e1c9',
         path='/prompts/game24.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='3 - 10)) = 24\n'
              'Input: 1 4 8 8\n'
              'Steps:\n'
              '8 / 4 = 2 (left: 1 2 8)\n'
              '1 + 2 = 3 (left: 3 8)\n'
              '3 * 8 = 24 (left: 24)\n'
              'Answer: (1 + 8 / 4) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Steps:\n'
              '5 + 5 = 10 (left: 5 9 10)\n'
              '1')

Fragment(uuid='7d0ee303-1449-4145-a94d-bee55103a916',
         path='/prompts/game24.py',
         lineno=39,
         depth=0,
         type='variable',
         name='cot_prompt',
         text='left: 3 8)\n'
              '3 * 8 = 24 (left: 24)\n'
              'Answer: (1 + 8 / 4) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Steps:\n'
              '5 + 5 = 10 (left: 5 9 10)\n'
              '10 + 5 = 15 (left: 9 15)\n'
              '15 + 9 = 24 (left: 24)\n'
              'Answer: ((5 + 5) + 5) + 9 = 24\n'
              'Input: {input}\n'
              "'''")

Fragment(uuid='dc59d3b4-4ff4-412c-82b3-c8f27ced9326',
         path='/prompts/game24.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='0 + 5 = 15 (left: 9 15)\n'
              '15 + 9 = 24 (left: 24)\n'
              'Answer: ((5 + 5) + 5) + 9 = 24\n'
              'Input: {input}\n'
              "'''\n"
              '\n'
              '# 1-shot\n'
              "propose_prompt = '''Input: 2 8 8 14\n"
              'Possible next steps:\n'
              '2 + 8 = 10 (left:')

Fragment(uuid='81de2140-d997-4f60-a8fc-bb34ab1433d0',
         path='/prompts/game24.py',
         lineno=52,
         depth=0,
         type='variable',
         name='propose_prompt',
         text="propose_prompt = '''Input: 2 8 8 14\n"
              'Possible next steps:\n'
              '2 + 8 = 10 (left: 8 10 14)\n'
              '8 / 2 = 4 (left: 4 8 14)\n'
              '14 + 2 = 16 (left: 8 8 16)\n'
              '2 * 8 = 16 (left')

Fragment(uuid='f42bd0c7-5c6a-4626-a1f5-95ff4a3dd0b4',
         path='/prompts/game24.py',
         lineno=54,
         depth=0,
         type='module',
         name='',
         text=' 8 10 14)\n'
              '8 / 2 = 4 (left: 4 8 14)\n'
              '14 + 2 = 16 (left: 8 8 16)\n'
              '2 * 8 = 16 (left: 8 14 16)\n'
              '8 - 2 = 6 (left: 6 8 14)\n'
              '14 - 8 = 6 (left: 2 6 8)\n'
              '14 /  2 = 7 (left: 7 8 8)\n'
              '14 - 2 = 12 (left')

Fragment(uuid='aa53a66c-6e5f-43e0-bfc4-e83594d8fe19',
         path='/prompts/game24.py',
         lineno=57,
         depth=0,
         type='variable',
         name='propose_prompt',
         text=': 8 14 16)\n'
              '8 - 2 = 6 (left: 6 8 14)\n'
              '14 - 8 = 6 (left: 2 6 8)\n'
              '14 /  2 = 7 (left: 7 8 8)\n'
              '14 - 2 = 12 (left: 8 8 12)\n'
              'Input: {input}\n'
              'Possible next steps:\n'
              "'''")

Fragment(uuid='358d79f9-1f65-4226-a20a-e92426cb7049',
         path='/prompts/game24.py',
         lineno=61,
         depth=0,
         type='module',
         name='',
         text=': 8 8 12)\n'
              'Input: {input}\n'
              'Possible next steps:\n'
              "'''\n"
              '\n'
              "value_prompt = '''Evaluate if given numbers can reach 24 "
              '(sure/likely/impossible)\n'
              '10 14\n'
              '10 + 14 = 24\n'
              'sure\n'
              '11 12\n'
              '11 + 12 = 23\n'
              '12 - ')

Fragment(uuid='ec2dd963-0aa2-4b55-82c4-4e94ca069378',
         path='/prompts/game24.py',
         lineno=66,
         depth=0,
         type='variable',
         name='value_prompt',
         text="value_prompt = '''Evaluate if given numbers can reach 24 "
              '(sure/likely/impossible)\n'
              '10 14\n'
              '10 + 14 = 24\n'
              'sure\n'
              '11 12\n'
              '11 + 12 = 23\n'
              '12 - 11 = 1\n'
              '11 * 12 = 132\n'
              '11 / 12 = 0.91\n'
              'impossible\n'
              '4')

Fragment(uuid='7ebedadc-4e43-45fc-b2ed-332e713bb404',
         path='/prompts/game24.py',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='11 = 1\n'
              '11 * 12 = 132\n'
              '11 / 12 = 0.91\n'
              'impossible\n'
              '4 4 10\n'
              '4 + 4 + 10 = 8 + 10 = 18\n'
              '4 * 10 - 4 = 40 - 4 = 36\n'
              '(10 - 4) * 4 = 6 * 4 = 24\n'
              'sure\n'
              '4 9 11\n'
              '9 + 11 + 4 = 20 + 4 = 24\n'
              'sure\n'
              '5 7 8\n'
              '5 + ')

Fragment(uuid='1fd4bc4b-fcd5-43bf-aa0d-5b79382a156f',
         path='/prompts/game24.py',
         lineno=76,
         depth=0,
         type='variable',
         name='value_prompt',
         text=' 4 10\n'
              '4 + 4 + 10 = 8 + 10 = 18\n'
              '4 * 10 - 4 = 40 - 4 = 36\n'
              '(10 - 4) * 4 = 6 * 4 = 24\n'
              'sure\n'
              '4 9 11\n'
              '9 + 11 + 4 = 20 + 4 = 24\n'
              'sure\n'
              '5 7 8\n'
              '5 + 7 + 8 = 12 + 8 = 20\n'
              '(8 - 5) * 7 = 3 * 7 = 21\n')

Fragment(uuid='8a5d44ec-70e8-4934-90be-a133bfc7598a',
         path='/prompts/game24.py',
         lineno=85,
         depth=0,
         type='module',
         name='',
         text='7 + 8 = 12 + 8 = 20\n'
              '(8 - 5) * 7 = 3 * 7 = 21\n'
              'I cannot obtain 24 now, but numbers are within a reasonable '
              'range\n'
              'likely\n'
              '5 6 6\n'
              '5 + 6 + 6 = 17\n'
              '(6 - 5) * 6 = 1 * 6 = 6\n'
              'I cannot obtain 24')

Fragment(uuid='9f4f39ca-6ef5-414a-b07d-391a57e2294b',
         path='/prompts/game24.py',
         lineno=87,
         depth=0,
         type='variable',
         name='value_prompt',
         text='I cannot obtain 24 now, but numbers are within a reasonable '
              'range\n'
              'likely\n'
              '5 6 6\n'
              '5 + 6 + 6 = 17\n'
              '(6 - 5) * 6 = 1 * 6 = 6\n'
              'I cannot obtain 24 now, but numbers are within a reasonable ')

Fragment(uuid='19841f5a-f48e-4432-9ace-1ec5291291a9',
         path='/prompts/game24.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text=' now, but numbers are within a reasonable range\n'
              'likely\n'
              '10 10 11\n'
              '10 + 10 + 11 = 31\n'
              '(11 - 10) * 10 = 10\n'
              '10 10 10 are all too big\n'
              'impossible\n'
              '1 3 3\n'
              '1 * 3 * 3 = 9\n'
              '(1 + 3) * 3 = 12\n'
              '1 3 3 a')

Fragment(uuid='02736b01-97ea-4b70-bb9a-a44cb29f821d',
         path='/prompts/game24.py',
         lineno=92,
         depth=0,
         type='variable',
         name='value_prompt',
         text='range\n'
              'likely\n'
              '10 10 11\n'
              '10 + 10 + 11 = 31\n'
              '(11 - 10) * 10 = 10\n'
              '10 10 10 are all too big\n'
              'impossible\n'
              '1 3 3\n'
              '1 * 3 * 3 = 9\n'
              '(1 + 3) * 3 = 12\n'
              '1 3 3 are all too small\n'
              'impossible\n'
              '{input}\n'
              "'''")

Fragment(uuid='6a0d891f-1e74-4c2a-8146-9bcd72ad67fa',
         path='/prompts/game24.py',
         lineno=102,
         depth=0,
         type='module',
         name='',
         text='re all too small\n'
              'impossible\n'
              '{input}\n'
              "'''\n"
              '\n'
              "value_last_step_prompt = '''Use numbers and basic arithmetic "
              'operations (+ - * /) to obtain 24. Given an input and an '
              'answer, give a judgement (sure/impossible) if the answer is '
              'correct, i.e. it uses each input exactly once and no other '
              'numbers, and reach 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Inp')

Fragment(uuid='ae49769e-6b29-479c-b5ef-c3486b549db7',
         path='/prompts/game24.py',
         lineno=107,
         depth=0,
         type='variable',
         name='value_last_step_prompt',
         text="value_last_step_prompt = '''Use numbers and basic arithmetic "
              'operations (+ - * /) to obtain 24. Given an input and an '
              'answer, give a judgement (sure/impossible) if the answer is '
              'correct, i.e. it uses each input exactly once and no other '
              'numbers, and reach 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 2 9 10 12\n'
              'Answer')

Fragment(uuid='72572af9-d43e-4f08-b1fa-3525960c2e1c',
         path='/prompts/game24.py',
         lineno=112,
         depth=0,
         type='module',
         name='',
         text='ut: 2 9 10 12\n'
              'Answer: 2 * 12 * (10 - 9) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) + 1 = 25\n'
              'Judge: \n'
              'im')

Fragment(uuid='161513a7-e46f-4098-9b0c-314cba2eb52c',
         path='/prompts/game24.py',
         lineno=113,
         depth=0,
         type='variable',
         name='value_last_step_prompt',
         text=': 2 * 12 * (10 - 9) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) + 1 = 25\n'
              'Judge: \n'
              'impossible\n'
              'I')

Fragment(uuid='484338d2-5192-479a-ba9b-4c9d78be2076',
         path='/prompts/game24.py',
         lineno=123,
         depth=0,
         type='module',
         name='',
         text='possible\n'
              'Input: 2 9 10 12\n'
              'Answer: 2 * (12 - 10) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 4) * (10 - 9) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: {input}\n'
              'Answer: {answer}\n'
              "Judge:'''")

Fragment(uuid='b4bbc7f4-804f-4889-af15-bd361866c5c1',
         path='/prompts/game24.py',
         lineno=124,
         depth=0,
         type='variable',
         name='value_last_step_prompt',
         text='nput: 2 9 10 12\n'
              'Answer: 2 * (12 - 10) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 4) * (10 - 9) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: {input}\n'
              'Answer: {answer}\n'
              "Judge:'''")

Fragment(uuid='8a4c017d-1832-4aef-85b5-19a4df8496df',
         path='/prompts/text.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text="standard_prompt = '''\n"
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              "'''\n"
              '\n'
              "cot_prompt = '''\n"
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              '\n'
              'Make a plan then write. Your output should be of the following '
              'format:\n'
              '\n'
              'Plan:\n'
              'Your plan here.\n'
              '\n'
              'Passage:\n'
              'Your passage here.\n'
              "'''\n"
              '\n'
              '\n'
              "vote_prompt = '''Given an instruction and several choices, "
              'decide which choice is most promising. Analyze each choice')

Fragment(uuid='75349008-6723-42a9-8886-6aefd1e98188',
         path='/prompts/text.py',
         lineno=1,
         depth=0,
         type='variable',
         name='standard_prompt',
         text="standard_prompt = '''\n"
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              "'''")

Fragment(uuid='0b2a5a53-9bf6-4fbf-bbdb-497356989d55',
         path='/prompts/text.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /prompts/text.py\n'
              '  Variables: compare_prompt cot_prompt score_prompt '
              'standard_prompt vote_prompt\n')

Fragment(uuid='1bd0202b-93bc-499d-97c8-32291d79af1e',
         path='/prompts/text.py',
         lineno=5,
         depth=0,
         type='variable',
         name='cot_prompt',
         text="cot_prompt = '''\n"
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              '\n'
              'Make a plan then write. Your output should be of the following '
              'format:\n'
              '\n'
              'Plan:\n'
              'Your plan here.\n'
              '\n'
              'Passage:\n'
              'Your passage here.\n'
              "'''")

Fragment(uuid='f226d574-c54e-4930-87f6-eca2650c18e7',
         path='/prompts/text.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text=' in detail, then conclude in the last line "The best choice is '
              '{s}", where s the integer id of the choice.\n'
              "'''\n"
              '\n'
              "compare_prompt = '''Briefly analyze the coherency of the "
              'following two passages. Conclude in the last line "The more '
              'coherent passage is 1", "The more coherent passage is 2", or '
              '"The two passages are similarly coherent".\n'
              "'''\n"
              '\n'
              "score_prompt = '''Analyze the following passage, then at the "
              'last line conclude "Thus the coherency score is {s}", where s '
              'is an integer from 1 to 10.\n'
              "'''")

Fragment(uuid='f0a8debd-5a27-4e89-88fb-24aaa3687534',
         path='/prompts/text.py',
         lineno=18,
         depth=0,
         type='variable',
         name='vote_prompt',
         text="vote_prompt = '''Given an instruction and several choices, "
              'decide which choice is most promising. Analyze each choice in '
              'detail, then conclude in the last line "The best choice is '
              '{s}", where s the integer id of the choice.\n'
              "'''")

Fragment(uuid='ce63a86a-8ef2-41f9-952d-59800c630100',
         path='/prompts/text.py',
         lineno=21,
         depth=0,
         type='variable',
         name='compare_prompt',
         text="compare_prompt = '''Briefly analyze the coherency of the "
              'following two passages. Conclude in the last line "The more '
              'coherent passage is 1", "The more coherent passage is 2", or '
              '"The two passages are similarly coherent".\n'
              "'''")

Fragment(uuid='5c39a19b-f829-4d49-9be7-b54986107ee5',
         path='/prompts/text.py',
         lineno=24,
         depth=0,
         type='variable',
         name='score_prompt',
         text="score_prompt = '''Analyze the following passage, then at the "
              'last line conclude "Thus the coherency score is {s}", where s '
              'is an integer from 1 to 10.\n'
              "'''")

Fragment(uuid='fda1bfeb-1ae2-4d00-a6b6-c9e26fbf221a',
         path='/readme.md',
         lineno=1,
         depth=10,
         type='documentation',
         name='',
         text='# Offical Repo of Tree of Thoughts (ToT)\n')

Fragment(uuid='6fb4943f-9312-4833-9395-cf4caa73a3ee',
         path='/readme.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Offical Repo of Tree of Thoughts (ToT)\n'
              '## Setup\n'
              '## Experiments\n'
              '## Trajectories\n'
              '## Questions\n')

Fragment(uuid='d23607a9-7ee6-4f13-b564-7f923412b129',
         path='/readme.md',
         lineno=2,
         depth=10,
         type='documentation',
         name='',
         text='\n![teaser](teaser.png)\n')

Fragment(uuid='725d28d7-75d8-4225-974a-fd5cc91d5ee7',
         path='/readme.md',
         lineno=4,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Offical implementation for paper [Tree of Thoughts: Deliberate '
              'Problem Solving with Large Language '
              'Models](https://arxiv.org/abs/2305.10601) with code, prompts, '
              'model outputs.\n'
              'Also check [its tweet '
              'thread](https://twitter.com/ShunyuYao12/status/1659357547474681857) '
              'in 1min.\n')

Fragment(uuid='7de92ba1-fb20-4046-9fd4-3ea7c8ce00f9',
         path='/readme.md',
         lineno=7,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '**Note: https://github.com/kyegomez/tree-of-thoughts is not the '
              'offical/correct implementation for the results in the paper. '
              'Please check '
              'https://github.com/ysymyth/tree-of-thought-llm/issues/17**\n')

Fragment(uuid='5ebf788d-021e-44f8-b33a-91c7f1df0764',
         path='/readme.md',
         lineno=9,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Please cite the paper and star this repo if you use ToT and '
              'find it interesting/useful. Thanks!\n')

Fragment(uuid='13ed38eb-1cfe-4e34-b014-dcfef2d5d3bf',
         path='/readme.md',
         lineno=11,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '```bibtex\n'
              '@misc{yao2023tree,\n'
              '      title={{Tree of Thoughts}: Deliberate Problem Solving '
              'with Large Language Models}, \n'
              '      author={Shunyu Yao and Dian Yu and Jeffrey Zhao and Izhak '
              'Shafran and Thomas L. Griffiths and Yuan Cao and Karthik '
              'Narasimhan},\n'
              '      year={2023},\n'
              '      eprint={2305.10601},\n'
              '      archivePrefix={arXiv},\n'
              '      primaryClass={cs.CL}\n'
              '}\n'
              '```\n'
              '\n'
              '\n')

Fragment(uuid='d8b358d9-faa8-4063-a7a4-3f9f561c6270',
         path='/readme.md',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='## Setup\n'
              'You need to first have an OpenAI API key and store it in the '
              'environment variable ``OPENAI_API_KEY`` (see '
              '[here](https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety)). '
              'If you use custom base url, set it by environment variable '
              '``OPENAI_API_BASE`` (e.g. https://api.openai.com/v1).\n'
              '\n'
              'Package requirement: ``pip install openai backoff sympy '
              'numpy``\n'
              '\n'
              '\n')

Fragment(uuid='d6122b00-0796-4ede-a962-c044edf5da22',
         path='/readme.md',
         lineno=30,
         depth=10,
         type='documentation',
         name='',
         text='## Experiments\n')

Fragment(uuid='6c6d0878-3f97-4030-aeba-a27b9bcd7ef7',
         path='/readme.md',
         lineno=31,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Run experiments via ``sh scripts/{game24, text, '
              'crosswords}/{standard_sampling, cot_sampling, bfs}.sh``, except '
              'in crosswords we use a DFS algorithm for ToT, which can be run '
              'via ``scripts/crosswords/search_crosswords-dfs.ipynb``.\n')

Fragment(uuid='9b755b89-b24b-4406-8994-8dea6a477e9f',
         path='/readme.md',
         lineno=33,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'The very simple ``run.py`` implements the ToT + BFS algorithm, '
              'as well as the naive IO/CoT sampling. Some key arguments:\n')

Fragment(uuid='440812db-9b46-423d-bd11-e6aa9983894d',
         path='/readme.md',
         lineno=35,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--naive_run``: if True, run naive IO/CoT sampling instead '
              'of ToT + BFS.')

Fragment(uuid='db812a63-8329-4e59-8405-ff960eb177d6',
         path='/readme.md',
         lineno=36,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '-  ``--prompt_sample`` (choices=[``standard``, ``cot``]): '
              'sampling prompt')

Fragment(uuid='60cf2221-8e0d-48d5-abb3-c60de6e2621b',
         path='/readme.md',
         lineno=37,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--method_generate`` (choices=[``sample``, ``propose``]): '
              'thought generator, whether to sample independent thoughts (used '
              'in Creative Writing) or propose sequential thoughts (used in '
              'Game of 24)')

Fragment(uuid='a84b41f9-c81d-4a19-a1c8-848633aede38',
         path='/readme.md',
         lineno=38,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--method_evaluate`` (choices=[``value``, ``vote``]): state '
              'evaluator, whether to use the value states independently (used '
              'in Game of 24) or vote on states together (used in Creative '
              'Writing)')

Fragment(uuid='f33d22e0-1d82-455e-86a1-8905f4ab37ae',
         path='/readme.md',
         lineno=39,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--n_generate_sample``: number of times to prompt for '
              'thought generation')

Fragment(uuid='f3080f3d-f7e5-4a19-917b-922da73e3879',
         path='/readme.md',
         lineno=40,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--n_evaluate_sample``: number of times to prompt for state '
              'evaluation')

Fragment(uuid='7ea7077d-d127-4ef2-ac8b-3701d37a8b06',
         path='/readme.md',
         lineno=41,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '- ``--n_select_sample``: number of states to keep from each '
              "step (i.e. ``b`` in the paper's ToT + BFS algorithm)")

Fragment(uuid='a89700b0-bc97-4647-bd33-b8b54dbe3731',
         path='/readme.md',
         lineno=42,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='153c1ec5-f029-4914-a970-eaa867681012',
         path='/readme.md',
         lineno=43,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='739a8616-6075-41b6-8c9d-7d1de6fcaa02',
         path='/readme.md',
         lineno=44,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='e643767a-ddba-4a27-ab2e-a6c030e5cae6',
         path='/readme.md',
         lineno=45,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='a9f1eabf-ee60-4d70-b873-5d373267bce5',
         path='/readme.md',
         lineno=46,
         depth=1,
         type='documentation',
         name='',
         text='## Trajectories\n'
              "``logs/`` contains all the trajectories from the paper's "
              'experiments, except for '
              '``logs/game24/gpt-4_0.7_propose1_value3_greedy5_start900_end1000.json`` '
              'which was reproduced after the paper (as the original '
              'experiment was done in a notebook) and achieved a 69\\% score '
              'instead of the original 74\\% score due to randomness in GPT '
              'decoding. We hope to aggregate multiple runs in the future to '
              'account for sampling randomness and update the paper, but this '
              "shouldn't affect the main conclusions of the paper.\n"
              '\n'
              '\n'
              '\n')

Fragment(uuid='4e2e5d3f-caf5-4445-b906-89f4c11d6056',
         path='/readme.md',
         lineno=51,
         depth=1,
         type='documentation',
         name='',
         text='## Questions\n'
              'Feel free to contact shunyuyao.cs@gmail.com or open an issue if '
              'you have any questions.\n'
              '\n'
              '\n'
              '\n')

Fragment(uuid='9b49e1e7-c90e-473e-8758-7e38d181cca8',
         path='/run.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import os\n'
              'import json\n'
              'import itertools\n'
              'import argparse\n'
              'import numpy as np\n'
              'from functools import partial\n'
              'from models import gpt, gpt_usage\n'
              'from tasks import get_task\n')

Fragment(uuid='c45535df-63a0-40e5-a19a-d45649fe71fb',
         path='/run.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='880b5276-4d33-49aa-b5a5-3e0a6801a6e1',
         path='/run.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /run.py\n'
              '  Functions: get_proposals get_samples get_value get_values '
              'get_votes naive_solve parse_args run solve\n'
              '  Variables: accs args file gpt ids infos local_value_cache '
              'local_value_cache[y] logs, new_ys prompt proposals '
              'propose_prompt samples select_ids select_new_ys sorted_new_ys, '
              'task task.value_cache[value_prompt] value value_outputs '
              'value_prompt values vote_outputs vote_prompt ys,\n'
              '  Usages: ArgumentParser ValueError __name__ action '
              'add_argument any append argparse array backend cache_value '
              'chain choice choices cnt_any cnt_avg cot_prompt_wrap default '
              'dirname dump exist_ok float functools get_input get_task '
              'gpt_usage idx indent info int itertools json key len list logs '
              'makedirs method_evaluate method_generate method_select model '
              'models n_evaluate_sample n_generate_sample n_select_sample '
              'naive_run numpy open partial path print prompt_sample '
              'propose_prompt_wrap random range required reverse select_id '
              'size sorted sorted_new_ys sorted_values split '
              'standard_prompt_wrap step steps stop stops str sum '
              'task_end_index task_file_path task_start_index tasks '
              'temperature test_output to_print tolist type update value_cache '
              'value_outputs_unwrap value_prompt_wrap vote_outputs_unwrap '
              'vote_prompt_wrap zip\n')

Fragment(uuid='9554b8a9-27d8-4b90-b161-0d96790d6752',
         path='/run.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import json')

Fragment(uuid='8dbd0b74-78de-4bd7-a57b-3a6c4dc078ca',
         path='/run.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='import itertools')

Fragment(uuid='24add168-ea5b-4fc8-9df9-f09994fe27b5',
         path='/run.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import argparse')

Fragment(uuid='a8947bb4-a4f8-427e-957a-61dfcf24791b',
         path='/run.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='import numpy as np')

Fragment(uuid='514d96b2-f2c2-4f5e-a259-94d85708ef2c',
         path='/run.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from functools import partial')

Fragment(uuid='e61bce88-4144-4c76-824d-2e88578eadca',
         path='/run.py',
         lineno=7,
         depth=0,
         type='dependency',
         name='',
         text='from models import gpt, gpt_usage')

Fragment(uuid='99d956ad-7ff4-40e0-9b55-15ad10cf817d',
         path='/run.py',
         lineno=8,
         depth=0,
         type='dependency',
         name='',
         text='from tasks import get_task')

Fragment(uuid='91a567f4-58e0-4add-9dcd-99532b034743',
         path='/run.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_value(task, x, y, n_evaluate_sample, '
              'cache_value=True):\n'
              '    value_prompt = task.value_prompt_wrap(x, y)\n'
              '    if cache_value and value_prompt in task.value_cache:\n'
              '        return task.value_cache[value_prompt]\n'
              '    value_outputs = gpt(value_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    value = task.value_outputs_unwrap(x, y, value_outputs)\n'
              '    if cache_value:\n'
              '        task.value_cache[value_prompt] = value\n'
              '    return value\n')

Fragment(uuid='503e3c84-e571-45cd-9847-cd84773c3f71',
         path='/run.py',
         lineno=10,
         depth=0,
         type='function',
         name='get_value',
         text='def get_value(task, x, y, n_evaluate_sample, '
              'cache_value=True):\n'
              '    value_prompt = task.value_prompt_wrap(x, y)\n'
              '    if cache_value and value_prompt in task.value_cache:\n'
              '        return task.value_cache[value_prompt]\n'
              '    value_outputs = gpt(value_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    value = task.value_outputs_unwrap(x, y, value_outputs)\n'
              '    if cache_value:\n'
              '        task.value_cache[value_prompt] = value\n'
              '    return value')

Fragment(uuid='6ae7719f-5336-43ff-88ee-e22efdbe8089',
         path='/run.py',
         lineno=11,
         depth=2,
         type='variable',
         name='value_prompt',
         text='value_prompt = task.value_prompt_wrap(x, y)')

Fragment(uuid='23a50f8a-4d65-461c-bd7f-cd7b2ac96b10',
         path='/run.py',
         lineno=14,
         depth=2,
         type='variable',
         name='value_outputs',
         text='value_outputs = gpt(value_prompt, n=n_evaluate_sample, '
              'stop=None)')

Fragment(uuid='7cda40ac-d9b5-41c4-9d2c-a2d27f5feac1',
         path='/run.py',
         lineno=15,
         depth=2,
         type='variable',
         name='value',
         text='value = task.value_outputs_unwrap(x, y, value_outputs)')

Fragment(uuid='d7abf1aa-e641-4afc-95ae-1c0e462bae0c',
         path='/run.py',
         lineno=17,
         depth=4,
         type='variable',
         name='task.value_cache[value_prompt]',
         text='task.value_cache[value_prompt] = value')

Fragment(uuid='0c33ebf6-8107-4b0c-9fba-9098619a879b',
         path='/run.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_values(task, x, ys, n_evaluate_sample, '
              'cache_value=True):\n'
              '    values = []\n'
              '    local_value_cache = {}\n'
              '    for y in ys:  # each partial output\n'
              '        if y in local_value_cache:  # avoid duplicate '
              'candidates\n'
              '            value = 0\n'
              '        else:    \n'
              '            value = get_value(task, x, y, n_evaluate_sample, '
              'cache_value=cache_value)\n'
              '            local_value_cache[y] = value\n'
              '        values.append(value)\n'
              '    return values\n')

Fragment(uuid='dc895023-6c5d-4df3-b3e4-71ad2b9de06a',
         path='/run.py',
         lineno=20,
         depth=0,
         type='function',
         name='get_values',
         text='def get_values(task, x, ys, n_evaluate_sample, '
              'cache_value=True):\n'
              '    values = []\n'
              '    local_value_cache = {}\n'
              '    for y in ys:  # each partial output\n'
              '        if y in local_value_cache:  # avoid duplicate '
              'candidates\n'
              '            value = 0\n'
              '        else:    \n'
              '            value = get_value(task, x, y, n_evaluate_sample, '
              'cache_value=cache_value)\n'
              '            local_value_cache[y] = value\n'
              '        values.append(value)\n'
              '    return values')

Fragment(uuid='d2263e77-752b-4222-a18e-2e9972dc2a12',
         path='/run.py',
         lineno=21,
         depth=2,
         type='variable',
         name='values',
         text='values = []')

Fragment(uuid='efea32a9-76c7-4105-b2bc-ce46690aeee4',
         path='/run.py',
         lineno=22,
         depth=2,
         type='variable',
         name='local_value_cache',
         text='local_value_cache = {}')

Fragment(uuid='313d743a-d0fc-42ef-9f56-41e99693b392',
         path='/run.py',
         lineno=25,
         depth=6,
         type='variable',
         name='value',
         text='value = 0')

Fragment(uuid='bfcc823c-a46f-4715-b1c6-31cb4ba05d50',
         path='/run.py',
         lineno=27,
         depth=7,
         type='variable',
         name='value',
         text='value = get_value(task, x, y, n_evaluate_sample, '
              'cache_value=cache_value)')

Fragment(uuid='40e9fc48-d68e-4725-bdb5-2e169b5653e5',
         path='/run.py',
         lineno=28,
         depth=7,
         type='variable',
         name='local_value_cache[y]',
         text='local_value_cache[y] = value')

Fragment(uuid='8c3450d1-b352-4801-a1df-de4bba871650',
         path='/run.py',
         lineno=31,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_votes(task, x, ys, n_evaluate_sample):\n'
              '    vote_prompt = task.vote_prompt_wrap(x, ys)\n'
              '    vote_outputs = gpt(vote_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    values = task.vote_outputs_unwrap(vote_outputs, len(ys))\n'
              '    return values\n')

Fragment(uuid='392fa696-f1fb-4b4a-acf6-94972773fd35',
         path='/run.py',
         lineno=32,
         depth=0,
         type='function',
         name='get_votes',
         text='def get_votes(task, x, ys, n_evaluate_sample):\n'
              '    vote_prompt = task.vote_prompt_wrap(x, ys)\n'
              '    vote_outputs = gpt(vote_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    values = task.vote_outputs_unwrap(vote_outputs, len(ys))\n'
              '    return values')

Fragment(uuid='a2772c81-52c5-4d40-80bb-868a589c3b93',
         path='/run.py',
         lineno=33,
         depth=2,
         type='variable',
         name='vote_prompt',
         text='vote_prompt = task.vote_prompt_wrap(x, ys)')

Fragment(uuid='fb3ad508-bce9-4e5d-b2ee-9c9676481ec3',
         path='/run.py',
         lineno=34,
         depth=2,
         type='variable',
         name='vote_outputs',
         text='vote_outputs = gpt(vote_prompt, n=n_evaluate_sample, stop=None)')

Fragment(uuid='669985ac-9185-4d44-a788-6a520b077840',
         path='/run.py',
         lineno=35,
         depth=2,
         type='variable',
         name='values',
         text='values = task.vote_outputs_unwrap(vote_outputs, len(ys))')

Fragment(uuid='5bed9b50-439b-4685-9ed7-250a08765ae9',
         path='/run.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_proposals(task, x, y): \n'
              '    propose_prompt = task.propose_prompt_wrap(x, y)\n'
              '    proposals = gpt(propose_prompt, n=1, '
              "stop=None)[0].split('\\n')\n"
              "    return [y + _ + '\\n' for _ in proposals]\n")

Fragment(uuid='c0b3a108-1677-4ead-86c2-b52fa4661e56',
         path='/run.py',
         lineno=38,
         depth=0,
         type='function',
         name='get_proposals',
         text='def get_proposals(task, x, y): \n'
              '    propose_prompt = task.propose_prompt_wrap(x, y)\n'
              '    proposals = gpt(propose_prompt, n=1, '
              "stop=None)[0].split('\\n')\n"
              "    return [y + _ + '\\n' for _ in proposals]")

Fragment(uuid='68f22ee1-e041-4c80-86f9-7fb2324c2d40',
         path='/run.py',
         lineno=39,
         depth=2,
         type='variable',
         name='propose_prompt',
         text='propose_prompt = task.propose_prompt_wrap(x, y)')

Fragment(uuid='7ca9ce63-67b5-4cf1-93b2-c2141e113477',
         path='/run.py',
         lineno=40,
         depth=2,
         type='variable',
         name='proposals',
         text="proposals = gpt(propose_prompt, n=1, stop=None)[0].split('\\n')")

Fragment(uuid='73a4ca86-4e88-4634-9217-301d2b35ab60',
         path='/run.py',
         lineno=42,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_samples(task, x, y, n_generate_sample, prompt_sample, '
              'stop):\n'
              "    if prompt_sample == 'standard':\n"
              '        prompt = task.standard_prompt_wrap(x, y)\n'
              "    elif prompt_sample == 'cot':\n"
              '        prompt = task.cot_prompt_wrap(x, y)\n'
              '    else:\n'
              "        raise ValueError(f'prompt_sample {prompt_sample} not "
              "recognized')\n"
              '    samples = gpt(prompt, n=n_generate_sample, stop=stop)\n'
              '    return [y + _ for _ in samples]\n')

Fragment(uuid='d6473bd7-1fd1-47cb-ac0c-686fe4ef036e',
         path='/run.py',
         lineno=43,
         depth=0,
         type='function',
         name='get_samples',
         text='def get_samples(task, x, y, n_generate_sample, prompt_sample, '
              'stop):\n'
              "    if prompt_sample == 'standard':\n"
              '        prompt = task.standard_prompt_wrap(x, y)\n'
              "    elif prompt_sample == 'cot':\n"
              '        prompt = task.cot_prompt_wrap(x, y)\n'
              '    else:\n'
              "        raise ValueError(f'prompt_sample {prompt_sample} not "
              "recognized')\n"
              '    samples = gpt(prompt, n=n_generate_sample, stop=stop)\n'
              '    return [y + _ for _ in samples]')

Fragment(uuid='abb705cc-eb0d-4aae-b07a-2c80c32bca8a',
         path='/run.py',
         lineno=45,
         depth=4,
         type='variable',
         name='prompt',
         text='prompt = task.standard_prompt_wrap(x, y)')

Fragment(uuid='f3be79de-87ad-4942-8782-2cf7ba60900a',
         path='/run.py',
         lineno=47,
         depth=5,
         type='variable',
         name='prompt',
         text='prompt = task.cot_prompt_wrap(x, y)')

Fragment(uuid='e4a025ff-8402-4190-ba06-3932a07dff14',
         path='/run.py',
         lineno=50,
         depth=2,
         type='variable',
         name='samples',
         text='samples = gpt(prompt, n=n_generate_sample, stop=stop)')

Fragment(uuid='f71480a2-faab-43e3-9adf-33e9d51a07e7',
         path='/run.py',
         lineno=52,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def solve(args, task, idx, to_print=True):\n'
              '    print(gpt)\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = ['']  # current output candidates\n"
              '    infos = []\n')

Fragment(uuid='bd664b7b-4627-4797-a2ba-dc3abcca143e',
         path='/run.py',
         lineno=53,
         depth=0,
         type='function',
         name='solve',
         text='def solve(args, task, idx, to_print=True):\n'
              '    print(gpt)\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = ['']  # current output candidates\n"
              '    infos = []\n')

Fragment(uuid='7d33ed4d-a037-4103-9b7b-fbd6cc30f5a6',
         path='/run.py',
         lineno=55,
         depth=2,
         type='variable',
         name='x',
         text='x = task.get_input(idx)')

Fragment(uuid='a78df1e6-5c5e-49f5-8b97-47cad30cb497',
         path='/run.py',
         lineno=56,
         depth=2,
         type='variable',
         name='ys',
         text="ys = ['']")

Fragment(uuid='d6504125-e463-4f36-9f4d-18999fcb91ab',
         path='/run.py',
         lineno=57,
         depth=2,
         type='variable',
         name='infos',
         text='infos = []')

Fragment(uuid='a87965f8-bd0a-4cec-bc1f-5db5a473a1d0',
         path='/run.py',
         lineno=58,
         depth=0,
         type='module',
         name='',
         text='    for step in range(task.steps):\n        # generation\n')

Fragment(uuid='d4f1eafa-dd65-46db-8072-27be3dcdbedb',
         path='/run.py',
         lineno=58,
         depth=0,
         type='function',
         name='solve',
         text='    for step in range(task.steps):\n        # generation\n')

Fragment(uuid='2ef86dc9-4bbf-4075-8c94-1787945650ae',
         path='/run.py',
         lineno=60,
         depth=0,
         type='module',
         name='',
         text="        if args.method_generate == 'sample':\n"
              '            new_ys = [get_samples(task, x, y, '
              'args.n_generate_sample, prompt_sample=args.prompt_sample, '
              'stop=task.stops[step]) for y in ys]\n'
              "        elif args.method_generate == 'propose':\n"
              '            new_ys = [get_proposals(task, x, y) for y in ys]\n'
              '        new_ys = list(itertools.chain(*new_ys))\n'
              '        ids = list(range(len(new_ys)))\n'
              '        # evaluation\n')

Fragment(uuid='f2e6d9af-c503-4891-87bb-bc9b2b2782e1',
         path='/run.py',
         lineno=60,
         depth=0,
         type='function',
         name='solve',
         text="        if args.method_generate == 'sample':\n"
              '            new_ys = [get_samples(task, x, y, '
              'args.n_generate_sample, prompt_sample=args.prompt_sample, '
              'stop=task.stops[step]) for y in ys]\n'
              "        elif args.method_generate == 'propose':\n"
              '            new_ys = [get_proposals(task, x, y) for y in ys]\n'
              '        new_ys = list(itertools.chain(*new_ys))\n'
              '        ids = list(range(len(new_ys)))\n'
              '        # evaluation\n')

Fragment(uuid='b1625eac-c8d1-4840-883b-162feae66b33',
         path='/run.py',
         lineno=61,
         depth=6,
         type='variable',
         name='new_ys',
         text='new_ys = [get_samples(task, x, y, args.n_generate_sample, '
              'prompt_sample=args.prompt_sample, stop=task.stops[step]) for y '
              'in ys]')

Fragment(uuid='321c5e58-6805-4b73-a54b-a953ea96668d',
         path='/run.py',
         lineno=63,
         depth=7,
         type='variable',
         name='new_ys',
         text='new_ys = [get_proposals(task, x, y) for y in ys]')

Fragment(uuid='245d4c2b-7c27-4fb3-ba41-d2534ee6f7b2',
         path='/run.py',
         lineno=64,
         depth=4,
         type='variable',
         name='new_ys',
         text='new_ys = list(itertools.chain(*new_ys))')

Fragment(uuid='5f1f37b2-b337-4e97-b3a0-9a0858e46f34',
         path='/run.py',
         lineno=65,
         depth=4,
         type='variable',
         name='ids',
         text='ids = list(range(len(new_ys)))')

Fragment(uuid='fd8f1f72-9949-43c1-ad36-e00e2b54839b',
         path='/run.py',
         lineno=67,
         depth=0,
         type='module',
         name='',
         text="        if args.method_evaluate == 'vote':\n"
              '            values = get_votes(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              "        elif args.method_evaluate == 'value':\n"
              '            values = get_values(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              '\n'
              '        # selection\n')

Fragment(uuid='4d47b0b6-d946-4fab-b19a-5df9a540c916',
         path='/run.py',
         lineno=67,
         depth=0,
         type='function',
         name='solve',
         text="        if args.method_evaluate == 'vote':\n"
              '            values = get_votes(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              "        elif args.method_evaluate == 'value':\n"
              '            values = get_values(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              '\n'
              '        # selection\n')

Fragment(uuid='0bfea74f-9446-4266-ae29-875499855a27',
         path='/run.py',
         lineno=68,
         depth=6,
         type='variable',
         name='values',
         text='values = get_votes(task, x, new_ys, args.n_evaluate_sample)')

Fragment(uuid='37540a84-43c2-46d4-8654-5a3a2bd38fba',
         path='/run.py',
         lineno=70,
         depth=7,
         type='variable',
         name='values',
         text='values = get_values(task, x, new_ys, args.n_evaluate_sample)')

Fragment(uuid='161479f6-1a9f-43d2-8daa-fa1e0bd45065',
         path='/run.py',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text="        if args.method_select == 'sample':\n"
              '            ps = np.array(values) / sum(values)\n'
              '            select_ids = np.random.choice(ids, '
              'size=args.n_select_sample, p=ps).tolist()\n'
              "        elif args.method_select == 'greedy':\n"
              '            select_ids = sorted(ids, key=lambda x: values[x], '
              'reverse=True)[:args.n_select_sample]\n'
              '        select_new_ys = [new_ys[select_id] for select_id in '
              'select_ids]\n'
              '\n'
              '        # log\n')

Fragment(uuid='1f5f0ec8-493b-49ee-b974-8b78e273b9ae',
         path='/run.py',
         lineno=73,
         depth=0,
         type='function',
         name='solve',
         text="        if args.method_select == 'sample':\n"
              '            ps = np.array(values) / sum(values)\n'
              '            select_ids = np.random.choice(ids, '
              'size=args.n_select_sample, p=ps).tolist()\n'
              "        elif args.method_select == 'greedy':\n"
              '            select_ids = sorted(ids, key=lambda x: values[x], '
              'reverse=True)[:args.n_select_sample]\n'
              '        select_new_ys = [new_ys[select_id] for select_id in '
              'select_ids]\n'
              '\n'
              '        # log\n')

Fragment(uuid='362fcbcd-4acc-4572-8a9c-8a0bdb2ad355',
         path='/run.py',
         lineno=74,
         depth=6,
         type='variable',
         name='ps',
         text='ps = np.array(values) / sum(values)')

Fragment(uuid='c8cc54db-ea37-4a2f-a1d3-f0a1ce5ad94e',
         path='/run.py',
         lineno=75,
         depth=6,
         type='variable',
         name='select_ids',
         text='select_ids = np.random.choice(ids, size=args.n_select_sample, '
              'p=ps).tolist()')

Fragment(uuid='1efdb62a-0478-43fc-8f97-a61d6526b3e7',
         path='/run.py',
         lineno=77,
         depth=7,
         type='variable',
         name='select_ids',
         text='select_ids = sorted(ids, key=lambda x: values[x], '
              'reverse=True)[:args.n_select_sample]')

Fragment(uuid='6c975a97-e8ac-4cef-b125-b0c0d9c88b05',
         path='/run.py',
         lineno=78,
         depth=4,
         type='variable',
         name='select_new_ys',
         text='select_new_ys = [new_ys[select_id] for select_id in select_ids]')

Fragment(uuid='99a93102-787c-44ff-8794-6c6306ee0877',
         path='/run.py',
         lineno=81,
         depth=0,
         type='module',
         name='',
         text='        if to_print: \n'
              '            sorted_new_ys, sorted_values = '
              'zip(*sorted(zip(new_ys, values), key=lambda x: x[1], '
              'reverse=True))\n'
              "            print(f'-- new_ys --: {sorted_new_ys}\\n-- sol "
              'values --: {sorted_values}\\n-- choices --: '
              "{select_new_ys}\\n')\n"
              '        \n'
              "        infos.append({'step': step, 'x': x, 'ys': ys, 'new_ys': "
              "new_ys, 'values': values, 'select_new_ys': select_new_ys})\n"
              '        ys = select_new_ys\n')

Fragment(uuid='775fed05-9f76-488f-80ba-ae6dbebf7c10',
         path='/run.py',
         lineno=81,
         depth=0,
         type='function',
         name='solve',
         text='        if to_print: \n'
              '            sorted_new_ys, sorted_values = '
              'zip(*sorted(zip(new_ys, values), key=lambda x: x[1], '
              'reverse=True))\n'
              "            print(f'-- new_ys --: {sorted_new_ys}\\n-- sol "
              'values --: {sorted_values}\\n-- choices --: '
              "{select_new_ys}\\n')\n"
              '        \n'
              "        infos.append({'step': step, 'x': x, 'ys': ys, 'new_ys': "
              "new_ys, 'values': values, 'select_new_ys': select_new_ys})\n"
              '        ys = select_new_ys\n')

Fragment(uuid='0bafd417-7fe6-4062-8f64-c7792fcc4fb2',
         path='/run.py',
         lineno=82,
         depth=6,
         type='variable',
         name='sorted_new_ys,',
         text='sorted_new_ys, sorted_values = zip(*sorted(zip(new_ys, values), '
              'key=lambda x: x[1], reverse=True))')

Fragment(uuid='c2859022-6467-49a1-84b7-5d694809979e',
         path='/run.py',
         lineno=86,
         depth=4,
         type='variable',
         name='ys',
         text='ys = select_new_ys')

Fragment(uuid='e046b7eb-c3d2-4083-9d5b-e01d552f24a9',
         path='/run.py',
         lineno=87,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    if to_print: \n'
              '        print(ys)\n'
              "    return ys, {'steps': infos}\n")

Fragment(uuid='f24f5bba-f2b2-40ed-b259-282e757604a1',
         path='/run.py',
         lineno=87,
         depth=0,
         type='function',
         name='solve',
         text='    \n'
              '    if to_print: \n'
              '        print(ys)\n'
              "    return ys, {'steps': infos}")

Fragment(uuid='ab367fba-fa60-4387-aa11-a6d6dc5f8c6b',
         path='/run.py',
         lineno=91,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def naive_solve(args, task, idx, to_print=True):\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = get_samples(task, x, '', args.n_generate_sample, "
              'args.prompt_sample, stop=None)\n'
              '    return ys, {}\n')

Fragment(uuid='c3f8cfd7-a50d-413c-b222-076c933efd22',
         path='/run.py',
         lineno=92,
         depth=0,
         type='function',
         name='naive_solve',
         text='def naive_solve(args, task, idx, to_print=True):\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = get_samples(task, x, '', args.n_generate_sample, "
              'args.prompt_sample, stop=None)\n'
              '    return ys, {}')

Fragment(uuid='1e7f8784-ddab-4ac0-aed9-d0caa6f675e4',
         path='/run.py',
         lineno=93,
         depth=2,
         type='variable',
         name='x',
         text='x = task.get_input(idx)')

Fragment(uuid='5cd59fe2-2bba-47ee-ad54-d53179b8cccd',
         path='/run.py',
         lineno=94,
         depth=2,
         type='variable',
         name='ys',
         text="ys = get_samples(task, x, '', args.n_generate_sample, "
              'args.prompt_sample, stop=None)')

Fragment(uuid='4acaf7ef-0e74-4a3b-9f19-44f075c4041b',
         path='/run.py',
         lineno=96,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def run(args):\n'
              '    task = get_task(args.task, args.task_file_path)\n'
              '    logs, cnt_avg, cnt_any = [], 0, 0\n'
              '    global gpt\n'
              '    gpt = partial(gpt, model=args.backend, '
              'temperature=args.temperature)\n')

Fragment(uuid='ab0ea938-0328-4b5e-a992-c45730c40a33',
         path='/run.py',
         lineno=97,
         depth=0,
         type='function',
         name='run',
         text='def run(args):\n'
              '    task = get_task(args.task, args.task_file_path)\n'
              '    logs, cnt_avg, cnt_any = [], 0, 0\n'
              '    global gpt\n'
              '    gpt = partial(gpt, model=args.backend, '
              'temperature=args.temperature)\n')

Fragment(uuid='f0567b8b-d242-4fc2-8c34-95be4b8d7a42',
         path='/run.py',
         lineno=98,
         depth=2,
         type='variable',
         name='task',
         text='task = get_task(args.task, args.task_file_path)')

Fragment(uuid='eaea6212-1e4b-4616-8864-9cdece9a174b',
         path='/run.py',
         lineno=99,
         depth=2,
         type='variable',
         name='logs,',
         text='logs, cnt_avg, cnt_any = [], 0, 0')

Fragment(uuid='06d2589d-c124-410e-8772-2ca3a786f89d',
         path='/run.py',
         lineno=101,
         depth=2,
         type='variable',
         name='gpt',
         text='gpt = partial(gpt, model=args.backend, '
              'temperature=args.temperature)')

Fragment(uuid='0e4a416d-39e0-4941-b09b-09fba595dcef',
         path='/run.py',
         lineno=102,
         depth=0,
         type='module',
         name='',
         text='    if args.naive_run:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_naive_{args.prompt_sample}_sample_{args.n_generate_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    else:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_{args.method_generate}{args.n_generate_sample}_{args.method_evaluate}{args.n_evaluate_sample}_{args.method_select}{args.n_select_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    os.makedirs(os.path.dirname(file), exist_ok=True)\n')

Fragment(uuid='a6ec0767-8a42-4321-b983-6e2eb99e9f07',
         path='/run.py',
         lineno=102,
         depth=0,
         type='function',
         name='run',
         text='    if args.naive_run:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_naive_{args.prompt_sample}_sample_{args.n_generate_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    else:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_{args.method_generate}{args.n_generate_sample}_{args.method_evaluate}{args.n_evaluate_sample}_{args.method_select}{args.n_select_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    os.makedirs(os.path.dirname(file), exist_ok=True)\n')

Fragment(uuid='051640fb-3933-4507-a5e0-2fb02cb3326d',
         path='/run.py',
         lineno=103,
         depth=4,
         type='variable',
         name='file',
         text='file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_naive_{args.prompt_sample}_sample_{args.n_generate_sample}_start{args.task_start_index}_end{args.task_end_index}.json'")

Fragment(uuid='8780f16d-db7a-4eb5-b8db-9912f4c11178',
         path='/run.py',
         lineno=105,
         depth=5,
         type='variable',
         name='file',
         text='file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_{args.method_generate}{args.n_generate_sample}_{args.method_evaluate}{args.n_evaluate_sample}_{args.method_select}{args.n_select_sample}_start{args.task_start_index}_end{args.task_end_index}.json'")

Fragment(uuid='34f78814-7ea2-4917-9493-18e1716bc3fc',
         path='/run.py',
         lineno=107,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    for i in range(args.task_start_index, '
              'args.task_end_index):\n'
              '        # solve\n'
              '        if args.naive_run:\n'
              '            ys, info = naive_solve(args, task, i) \n'
              '        else:\n'
              '            ys, info = solve(args, task, i)\n'
              '\n'
              '        # log\n'
              '        infos = [task.test_output(i, y) for y in ys]\n'
              "        info.update({'idx': i, 'ys': ys, 'infos': infos, "
              "'usage_so_far': gpt_usage(args.backend)})\n"
              '        logs.append(info)\n')

Fragment(uuid='23af9c5d-2ebd-4438-ae4a-4da8d3d85671',
         path='/run.py',
         lineno=107,
         depth=0,
         type='function',
         name='run',
         text='\n'
              '    for i in range(args.task_start_index, '
              'args.task_end_index):\n'
              '        # solve\n'
              '        if args.naive_run:\n'
              '            ys, info = naive_solve(args, task, i) \n'
              '        else:\n'
              '            ys, info = solve(args, task, i)\n'
              '\n'
              '        # log\n'
              '        infos = [task.test_output(i, y) for y in ys]\n'
              "        info.update({'idx': i, 'ys': ys, 'infos': infos, "
              "'usage_so_far': gpt_usage(args.backend)})\n"
              '        logs.append(info)\n')

Fragment(uuid='cb31604e-9aca-4efd-b5c7-3b4afb38f120',
         path='/run.py',
         lineno=111,
         depth=6,
         type='variable',
         name='ys,',
         text='ys, info = naive_solve(args, task, i)')

Fragment(uuid='acc7d34a-667c-452f-af9c-dfac63666e1c',
         path='/run.py',
         lineno=113,
         depth=7,
         type='variable',
         name='ys,',
         text='ys, info = solve(args, task, i)')

Fragment(uuid='4652ee2e-a61d-4aa3-9d3c-4e02b4f88ccb',
         path='/run.py',
         lineno=116,
         depth=4,
         type='variable',
         name='infos',
         text='infos = [task.test_output(i, y) for y in ys]')

Fragment(uuid='d4ff00a4-9e78-430c-9cf8-5ad0edc492df',
         path='/run.py',
         lineno=119,
         depth=0,
         type='module',
         name='',
         text="        with open(file, 'w') as f:\n"
              '            json.dump(logs, f, indent=4)\n'
              '        \n'
              '        # log main metric\n'
              "        accs = [info['r'] for info in infos]\n"
              '        cnt_avg += sum(accs) / len(accs)\n'
              '        cnt_any += any(accs)\n'
              "        print(i, 'sum(accs)', sum(accs), 'cnt_avg', cnt_avg, "
              "'cnt_any', cnt_any, '\\n')\n"
              '    \n'
              '    n = args.task_end_index - args.task_start_index\n'
              '    print(cnt_avg / n, cnt_any / n)\n'
              "    print('usage_so_far', gpt_usage(args.backend))\n")

Fragment(uuid='207e03d0-b44b-45d0-87b1-5b17b25a2fdc',
         path='/run.py',
         lineno=119,
         depth=0,
         type='function',
         name='run',
         text="        with open(file, 'w') as f:\n"
              '            json.dump(logs, f, indent=4)\n'
              '        \n'
              '        # log main metric\n'
              "        accs = [info['r'] for info in infos]\n"
              '        cnt_avg += sum(accs) / len(accs)\n'
              '        cnt_any += any(accs)\n'
              "        print(i, 'sum(accs)', sum(accs), 'cnt_avg', cnt_avg, "
              "'cnt_any', cnt_any, '\\n')\n"
              '    \n'
              '    n = args.task_end_index - args.task_start_index\n'
              '    print(cnt_avg / n, cnt_any / n)\n'
              "    print('usage_so_far', gpt_usage(args.backend))")

Fragment(uuid='86adbd7d-430f-43e7-a401-d0bbb27c5712',
         path='/run.py',
         lineno=123,
         depth=4,
         type='variable',
         name='accs',
         text="accs = [info['r'] for info in infos]")

Fragment(uuid='3a1eb757-f1aa-454e-87c4-5efa6e746b1d',
         path='/run.py',
         lineno=128,
         depth=2,
         type='variable',
         name='n',
         text='n = args.task_end_index - args.task_start_index')

Fragment(uuid='d7f5f293-879a-4927-ae6e-6987dc95c2e9',
         path='/run.py',
         lineno=131,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def parse_args():\n'
              '    args = argparse.ArgumentParser()\n'
              "    args.add_argument('--backend', type=str, choices=['gpt-4', "
              "'gpt-3.5-turbo'], default='gpt-4')\n"
              "    args.add_argument('--temperature', type=float, "
              'default=0.7)\n'
              '\n'
              "    args.add_argument('--task', type=str, required=True, "
              "choices=['game24', 'text', 'cros")

Fragment(uuid='9ac712ce-1b22-40d7-a62c-9890606eac11',
         path='/run.py',
         lineno=133,
         depth=0,
         type='function',
         name='parse_args',
         text='def parse_args():\n'
              '    args = argparse.ArgumentParser()\n'
              "    args.add_argument('--backend', type=str, choices=['gpt-4', "
              "'gpt-3.5-turbo'], default='gpt-4')\n"
              "    args.add_argument('--temperature', type=float, "
              'default=0.7)\n'
              '\n'
              "    args.add_argument('--task', type=str, required=True, "
              "choices=['game24', 'text', 'cross")

Fragment(uuid='51ce2a3a-1929-4cfd-ac60-18e45347e96e',
         path='/run.py',
         lineno=134,
         depth=2,
         type='variable',
         name='args',
         text='args = argparse.ArgumentParser()')

Fragment(uuid='f4e37f8d-5a68-4b3a-b330-df950a99785a',
         path='/run.py',
         lineno=138,
         depth=0,
         type='module',
         name='',
         text="swords'])\n"
              "    args.add_argument('--task_file_path', type=str, "
              'required=True)\n'
              "    args.add_argument('--task_start_index', type=int, "
              'default=900)\n'
              "    args.add_argument('--task_end_index', type=int, "
              'default=1000)\n'
              '\n'
              "    args.add_argument('--naive_run', action='store_true')\n"
              "    args.add_argument('--prompt_sample',")

Fragment(uuid='de88593d-d68a-4d7b-870d-992d66f79748',
         path='/run.py',
         lineno=138,
         depth=0,
         type='function',
         name='parse_args',
         text="words'])\n"
              "    args.add_argument('--task_file_path', type=str, "
              'required=True)\n'
              "    args.add_argument('--task_start_index', type=int, "
              'default=900)\n'
              "    args.add_argument('--task_end_index', type=int, "
              'default=1000)\n'
              '\n'
              "    args.add_argument('--naive_run', action='store_true')\n"
              "    args.add_argument('--prompt_sample', ")

Fragment(uuid='d098a630-7919-417d-b0c3-5ab3cb5cf000',
         path='/run.py',
         lineno=144,
         depth=0,
         type='module',
         name='',
         text=" type=str, choices=['standard', 'cot'])  # only used when "
              'method_generate = sample, or naive_run\n'
              '\n'
              "    args.add_argument('--method_generate', type=str, "
              "choices=['sample', 'propose'])\n"
              "    args.add_argument('--method_evaluate', type=str, "
              "choices=['value', 'vote'])\n"
              "    args.add_argument('--method_select', type=str, "
              "choices=['sample', 'greedy'])\n"
              "    args.add_argument('--n_generate_sample', type=int, "
              'default=1)  # only thing needed if naive_run\n'
              "    args.add_argument('--n_evaluate_sample', type=int, "
              'default=1)\n'
              "    args.add_argument('--n_select_sample', type=int, "
              'default=1)\n'
              '\n'
              '    args = args.parse_args()\n'
              '    return args\n')

Fragment(uuid='909c5d6c-6193-413e-adfc-b30bc47dbfa2',
         path='/run.py',
         lineno=144,
         depth=0,
         type='function',
         name='parse_args',
         text="type=str, choices=['standard', 'cot'])  # only used when "
              'method_generate = sample, or naive_run\n'
              '\n'
              "    args.add_argument('--method_generate', type=str, "
              "choices=['sample', 'propose'])\n"
              "    args.add_argument('--method_evaluate', type=str, "
              "choices=['value', 'vote'])\n"
              "    args.add_argument('--method_select', type=str, "
              "choices=['sample', 'greedy'])\n"
              "    args.add_argument('--n_generate_sample', type=int, "
              'default=1)  # only thing needed if naive_run\n'
              "    args.add_argument('--n_evaluate_sample', type=int, "
              'default=1)\n'
              "    args.add_argument('--n_select_sample', type=int, "
              'default=1)\n'
              '\n'
              '    args = args.parse_args()\n'
              '    return args')

Fragment(uuid='0b6ba837-455d-4b88-a15b-83b24c1c1640',
         path='/run.py',
         lineno=153,
         depth=2,
         type='variable',
         name='args',
         text='args = args.parse_args()')

Fragment(uuid='1db0ff6b-6e07-4b3a-aafa-473bfa044042',
         path='/run.py',
         lineno=155,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              "if __name__ == '__main__':\n"
              '    args = parse_args()\n'
              '    print(args)\n'
              '    run(args)')

Fragment(uuid='bd6f84d8-0e3f-4c3f-a591-a636e52f4bc9',
         path='/run.py',
         lineno=158,
         depth=2,
         type='variable',
         name='args',
         text='args = parse_args()')

Fragment(uuid='e8791aca-881e-4426-a215-7c65aba17a1d',
         path='/scripts/crosswords/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task crosswords \\\n'
              '    --task_file_path mini0505_0_100_5.json \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 20 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample cot \\\n'
              '    --n_generate_sample 10 ')

Fragment(uuid='bfe60842-9cad-4019-a1ea-ffba82fe5310',
         path='/scripts/crosswords/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/crosswords/cot_sampling.sh\n')

Fragment(uuid='a33cc577-5522-4bd8-9224-f4939b85fd69',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='cd ../..\n'
              '\n'
              'import json\n'
              'from prompts.crosswords import propose_prompt, value_prompt\n'
              'from models import gpt\n'
              'from tasks.crosswords import MiniCrosswordsEnv\n'
              '\n'
              'env = MiniCrosswordsEnv()\n')

Fragment(uuid='89c27f21-abf7-4e45-aff2-988208b521ba',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# Env\n\n# Prompt\n\n# DFS')

Fragment(uuid='956d7a31-c8ba-4c5f-939b-d4c9d157dc1d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='PythonNotebook: '
              '/scripts/crosswords/search_crosswords-dfs.ipynb\n'
              '  Functions: dfs get_candidates_to_scores parse_line '
              'parse_response prompt_wrap propose_score\n'
              '  Variables: actions best board, candidates '
              'candidates_to_scores candidates_to_scores[candidate] '
              'cnt_per_state confidence_to_value count done env env.cache[obs] '
              'env_ info infos infoss lines match obs obs, parsed_lines '
              'parsed_response parts pattern responses\n'
              '  Usages: MiniCrosswordsEnv action any append board cache '
              'candidate copy crosswords deepcopy dump format fout get gpt '
              'group idx import input input_str items json key len line lower '
              'max max_per_state model models open pop print prompt_status '
              'prompts propose_prompt prune range render render_board reset '
              'response reverse score sorted split status step steps tasks '
              'time_limit value_prompt\n')

Fragment(uuid='c496285f-c1d6-4130-b14d-d579cb10e0ee',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from prompts.crosswords import propose_prompt, value_prompt')

Fragment(uuid='b63357e9-cf8a-406a-a21b-4b02b16eef8d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='from models import gpt')

Fragment(uuid='ea5de073-7c65-4aec-91b4-c6cf03d22eaf',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from tasks.crosswords import MiniCrosswordsEnv')

Fragment(uuid='82064f88-fcfd-4502-b1d3-0d294858e3cc',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=8,
         depth=0,
         type='variable',
         name='env',
         text='env = MiniCrosswordsEnv()')

Fragment(uuid='f896854f-cb92-4943-af6b-8ac00cd982c3',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def prompt_wrap(obs):\n'
              '    return propose_prompt.format(input=obs)\n'
              '\n'
              'print(prompt_wrap(env.reset(0)))\n'
              "# print('---------')\n"
              "# print(prompt_wrap(env.step('h2. value')[0]))\n"
              '\n'
              'import re\n'
              'import copy\n'
              'from models import gpt\n')

Fragment(uuid='ca1bec80-810a-4cf1-ba23-5ddf5cc0bdf2',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=10,
         depth=0,
         type='function',
         name='prompt_wrap',
         text='def prompt_wrap(obs):\n'
              '    return propose_prompt.format(input=obs)')

Fragment(uuid='dc478e10-d19a-4b89-a37a-6797a7b7f201',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=17,
         depth=0,
         type='dependency',
         name='',
         text='import re')

Fragment(uuid='82413444-39f4-4dae-bd16-a42821cdca12',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=18,
         depth=0,
         type='dependency',
         name='',
         text='import copy')

Fragment(uuid='b93a4128-55cc-49df-a84f-1feeb63944b1',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=19,
         depth=0,
         type='dependency',
         name='',
         text='from models import gpt')

Fragment(uuid='63273d02-bdb9-4c02-a04d-c08c53f2a992',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=20,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def parse_line(input_str):\n'
              '    # regular expression pattern to match the input string '
              'format\n'
              "    pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n"
              '\n'
              '    # use regex to extract the parts of the input string\n'
              '    match = re.match(pattern, input_str)\n')

Fragment(uuid='386dcb5e-5875-47a2-8711-84f7f965686e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=21,
         depth=0,
         type='function',
         name='parse_line',
         text='def parse_line(input_str):\n'
              '    # regular expression pattern to match the input string '
              'format\n'
              "    pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n"
              '\n'
              '    # use regex to extract the parts of the input string\n'
              '    match = re.match(pattern, input_str)\n'
              '\n'
              '    if match:\n'
              '        # extract the matched groups\n'
              '        parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              '        return parts\n'
              '    else:\n'
              '        return None')

Fragment(uuid='3e8df830-56c3-491d-8343-3e3d71107c6a',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=23,
         depth=2,
         type='variable',
         name='pattern',
         text="pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'")

Fragment(uuid='ba52ef18-bebf-4189-9813-3acf936e3616',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=26,
         depth=2,
         type='variable',
         name='match',
         text='match = re.match(pattern, input_str)')

Fragment(uuid='20dac8d4-0c6a-46db-842b-572f1eb69a44',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=27,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if match:\n'
              '        # extract the matched groups\n'
              '        parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              '        return parts\n'
              '    else:\n'
              '        return None\n'
              '\n'
              "confidence_to_value = {'certain': 1, 'high': 0.5, 'medium': "
              "0.2, 'low': 0.1}  # TODO: ad hoc\n")

Fragment(uuid='ce5dd17c-f974-49a8-adae-a1ec0a8f1e8b',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=30,
         depth=4,
         type='variable',
         name='parts',
         text='parts = [match.group(1), match.group(2), match.group(3)]')

Fragment(uuid='2827195f-3f5f-44fd-990d-66639a6cf8a6',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=35,
         depth=0,
         type='variable',
         name='confidence_to_value',
         text="confidence_to_value = {'certain': 1, 'high': 0.5, 'medium': "
              "0.2, 'low': 0.1}")

Fragment(uuid='12ff7e42-9e95-48ef-bc81-0a6045b4e171',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=36,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def parse_response(response):\n'
              '    # split the response into lines\n'
              "    lines = response.split('\\n')\n"
              '\n'
              '    # parse each line\n'
              '    parsed_lines = [parse_line(line) for line in lines]\n'
              '\n'
              "    # filter out the lines that didn't match the format\n"
              "    parsed_lines = [(line[0].lower() + '. ' + line[1].lower(), "
              'confidence_to_value.get(line[2], 0)) for line in parsed_lines '
              'if line is not None]\n'
              '\n'
              '    return parsed_lines if len(parsed_lines) >= 1 else None\n')

Fragment(uuid='9b5b7183-fe2b-4f4c-a8a3-f380cefb3673',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=37,
         depth=0,
         type='function',
         name='parse_response',
         text='def parse_response(response):\n'
              '    # split the response into lines\n'
              "    lines = response.split('\\n')\n"
              '\n'
              '    # parse each line\n'
              '    parsed_lines = [parse_line(line) for line in lines]\n'
              '\n'
              "    # filter out the lines that didn't match the format\n"
              "    parsed_lines = [(line[0].lower() + '. ' + line[1].lower(), "
              'confidence_to_value.get(line[2], 0)) for line in parsed_lines '
              'if line is not None]\n'
              '\n'
              '    return parsed_lines if len(parsed_lines) >= 1 else None')

Fragment(uuid='2ce6e4f5-95a2-4d9c-ac91-339e6d0b4bf4',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=39,
         depth=2,
         type='variable',
         name='lines',
         text="lines = response.split('\\n')")

Fragment(uuid='0ad03ff3-a7c1-4511-890b-9bf5c8473271',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=42,
         depth=2,
         type='variable',
         name='parsed_lines',
         text='parsed_lines = [parse_line(line) for line in lines]')

Fragment(uuid='cb9252d9-3bc5-4260-bce0-1eebf9414354',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=45,
         depth=2,
         type='variable',
         name='parsed_lines',
         text="parsed_lines = [(line[0].lower() + '. ' + line[1].lower(), "
              'confidence_to_value.get(line[2], 0)) for line in parsed_lines '
              'if line is not None]')

Fragment(uuid='f9c117e3-4813-42ec-b586-ed4e16fcbd52',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=48,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def get_candidates_to_scores(env):\n'
              '    obs = env.render()\n'
              '    if obs in env.cache: \n'
              "        print('cache hit')\n"
              '        return env.cache[obs]\n'
              "    print('call gpt')\n"
              "    responses = gpt(prompt_wrap(obs), model='gpt-4', n=8)\n"
              '    candidates_to_scores = {}\n')

Fragment(uuid='9506eaa0-7a90-4388-b6b4-b434a7ea6686',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=50,
         depth=0,
         type='function',
         name='get_candidates_to_scores',
         text='def get_candidates_to_scores(env):\n'
              '    obs = env.render()\n'
              '    if obs in env.cache: \n'
              "        print('cache hit')\n"
              '        return env.cache[obs]\n'
              "    print('call gpt')\n"
              "    responses = gpt(prompt_wrap(obs), model='gpt-4', n=8)\n"
              '    candidates_to_scores = {}\n')

Fragment(uuid='e72c68f8-eb15-488f-a617-c3a3ebc0a049',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=51,
         depth=2,
         type='variable',
         name='obs',
         text='obs = env.render()')

Fragment(uuid='ee11d04a-a585-4d98-97bb-57ead66101d1',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=56,
         depth=2,
         type='variable',
         name='responses',
         text="responses = gpt(prompt_wrap(obs), model='gpt-4', n=8)")

Fragment(uuid='4592f2e6-ae8e-4947-969c-e317be568ad7',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=57,
         depth=2,
         type='variable',
         name='candidates_to_scores',
         text='candidates_to_scores = {}')

Fragment(uuid='bb5ca046-fa5b-45b1-9c8e-aa47d015b1e4',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=58,
         depth=0,
         type='module',
         name='',
         text='    for response in responses:\n'
              '        parsed_response = parse_response(response)\n'
              '        if parsed_response:\n')

Fragment(uuid='9f19b59e-e26b-4e3a-9ef0-53d0425a972a',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=58,
         depth=0,
         type='function',
         name='get_candidates_to_scores',
         text='    for response in responses:\n'
              '        parsed_response = parse_response(response)\n'
              '        if parsed_response:\n')

Fragment(uuid='78f31a7c-f2fd-4744-9252-67cd21b96c83',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=59,
         depth=4,
         type='variable',
         name='parsed_response',
         text='parsed_response = parse_response(response)')

Fragment(uuid='d35b4e65-5ca0-4223-8e81-ea9f5ebc278e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=61,
         depth=0,
         type='module',
         name='',
         text='            for candidate, score in parsed_response:\n'
              '                candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '    # print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '    env.cache[obs] = candidates_to_scores\n'
              '    return candidates_to_scores\n')

Fragment(uuid='b1c1c6fd-4cd3-406c-b528-84ae4ff74810',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=61,
         depth=0,
         type='function',
         name='get_candidates_to_scores',
         text='            for candidate, score in parsed_response:\n'
              '                candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '    # print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '    env.cache[obs] = candidates_to_scores\n'
              '    return candidates_to_scores')

Fragment(uuid='9cd941b1-a4c2-4103-9aee-bbf020d38c6e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=62,
         depth=8,
         type='variable',
         name='candidates_to_scores[candidate]',
         text='candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score')

Fragment(uuid='c706f0c4-a986-4edf-8c1a-cab80384ac46',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=65,
         depth=2,
         type='variable',
         name='env.cache[obs]',
         text='env.cache[obs] = candidates_to_scores')

Fragment(uuid='bfc5982f-29ca-4372-9bbe-e487d05ff6fa',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=67,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def propose_score(env, idx):\n'
              '    obs = env.reset(idx)\n'
              '    done = False\n'
              '    infos = []\n')

Fragment(uuid='4f18e286-63ab-448b-8d27-771be3aae587',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=68,
         depth=0,
         type='function',
         name='propose_score',
         text='def propose_score(env, idx):\n'
              '    obs = env.reset(idx)\n'
              '    done = False\n'
              '    infos = []\n')

Fragment(uuid='4696f884-65d5-49e8-a280-456e2fb4d0e3',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=69,
         depth=2,
         type='variable',
         name='obs',
         text='obs = env.reset(idx)')

Fragment(uuid='d44e7336-792b-4088-9ff6-9029c15b1a47',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=70,
         depth=2,
         type='variable',
         name='done',
         text='done = False')

Fragment(uuid='e7e7b489-031a-4cfa-9ca8-324c787ca180',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=71,
         depth=2,
         type='variable',
         name='infos',
         text='infos = []')

Fragment(uuid='822a44f9-8f40-4b99-ac00-eb48c27850be',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='    while not done:\n'
              "        responses = gpt(prompt_wrap(obs), model='gpt-4', n=5)\n"
              '        candidates_to_scores = {}\n')

Fragment(uuid='85fabcb4-5d37-4225-91a0-98c0cdb96298',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=72,
         depth=0,
         type='function',
         name='propose_score',
         text='    while not done:\n'
              "        responses = gpt(prompt_wrap(obs), model='gpt-4', n=5)\n"
              '        candidates_to_scores = {}\n')

Fragment(uuid='bdf4b184-4c3b-4825-a97a-39bd9720f93e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=73,
         depth=4,
         type='variable',
         name='responses',
         text="responses = gpt(prompt_wrap(obs), model='gpt-4', n=5)")

Fragment(uuid='176fd428-fe8e-47c6-967e-c29f0b23b564',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=74,
         depth=4,
         type='variable',
         name='candidates_to_scores',
         text='candidates_to_scores = {}')

Fragment(uuid='909f0433-a59f-41c2-b0fb-6e51f179780b',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=75,
         depth=0,
         type='module',
         name='',
         text='        for response in responses:\n'
              '            parsed_response = parse_response(response)\n'
              '            if parsed_response:\n')

Fragment(uuid='46180e82-1298-4631-8170-73af9fda1743',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=75,
         depth=0,
         type='function',
         name='propose_score',
         text='        for response in responses:\n'
              '            parsed_response = parse_response(response)\n'
              '            if parsed_response:\n')

Fragment(uuid='7523b7e6-a2c0-4297-8d58-ca181150408e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=76,
         depth=6,
         type='variable',
         name='parsed_response',
         text='parsed_response = parse_response(response)')

Fragment(uuid='04bc990a-da56-416b-8019-e20877324bbb',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=78,
         depth=0,
         type='module',
         name='',
         text='                for candidate, score in parsed_response:\n'
              '                    candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '        print(sorted(candidates_to_scores.items(), key=lambda '
              'x: x[1], reverse=True))\n'
              '        if len(candidates_to_scores) == 0:\n'
              '            break\n'
              '        candidates =  sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True)\n')

Fragment(uuid='9120c120-edd0-4e38-8067-950394fc0fda',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=78,
         depth=0,
         type='function',
         name='propose_score',
         text='                for candidate, score in parsed_response:\n'
              '                    candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '        print(sorted(candidates_to_scores.items(), key=lambda '
              'x: x[1], reverse=True))\n'
              '        if len(candidates_to_scores) == 0:\n'
              '            break\n'
              '        candidates =  sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True)\n')

Fragment(uuid='227cc3f7-0f65-4dbe-9810-7100eb6a5330',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=79,
         depth=10,
         type='variable',
         name='candidates_to_scores[candidate]',
         text='candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score')

Fragment(uuid='4e3f9199-75ec-45b7-9099-d986d77c4e17',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=84,
         depth=4,
         type='variable',
         name='candidates',
         text='candidates =  sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True)')

Fragment(uuid='3bfb5690-7570-45b5-bd0b-b86c88f1b770',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=85,
         depth=0,
         type='module',
         name='',
         text='        for candidate in candidates:\n'
              '            env_ = copy.deepcopy(env)\n'
              '            env_.step(candidate)\n'
              '            if not any(_ == 2 for _ in env_.status):\n'
              '                break\n'
              '        print(candidate)\n'
              '        # candidate = input()\n'
              '        obs, r, done, info = env.step(candidate)\n'
              '        print(obs)\n'
              '        print(env.steps, info)\n'
              "        print('-------------------\\n\\n\\n')\n"
              '        infos.append(info)\n'
              '    return infos\n')

Fragment(uuid='f40c17e7-4deb-4c92-b9a4-eef7d71896be',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=85,
         depth=0,
         type='function',
         name='propose_score',
         text='        for candidate in candidates:\n'
              '            env_ = copy.deepcopy(env)\n'
              '            env_.step(candidate)\n'
              '            if not any(_ == 2 for _ in env_.status):\n'
              '                break\n'
              '        print(candidate)\n'
              '        # candidate = input()\n'
              '        obs, r, done, info = env.step(candidate)\n'
              '        print(obs)\n'
              '        print(env.steps, info)\n'
              "        print('-------------------\\n\\n\\n')\n"
              '        infos.append(info)\n'
              '    return infos')

Fragment(uuid='8903fb26-6d45-4581-a30f-960753655b6c',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=86,
         depth=6,
         type='variable',
         name='env_',
         text='env_ = copy.deepcopy(env)')

Fragment(uuid='93d0a1a3-cd27-4777-97b9-2413be1d59ce',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=92,
         depth=4,
         type='variable',
         name='obs,',
         text='obs, r, done, info = env.step(candidate)')

Fragment(uuid='583a6db7-e402-4060-a5a4-ce393f133587',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=98,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def dfs(env, actions, infos, time_limit, prune, '
              'max_per_state):\n'
              '    # get candidate thoughts\n'
              '    candidates_to_scores = get_candidates_to_scores(env)\n'
              '    if len(candidates_to_scores) == 0: return 0, [], []\n'
              '    print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '\n'
              '    # back up current state\n'
              '    board, status, steps = env.board.copy(), env.status.copy(), '
              'env.steps\n'
              '\n'
              '    # try each candidate\n'
              '    cnt_per_state = 0\n')

Fragment(uuid='9f40efdf-2362-4524-b374-39ad178a81e0',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=99,
         depth=0,
         type='function',
         name='dfs',
         text='def dfs(env, actions, infos, time_limit, prune, '
              'max_per_state):\n'
              '    # get candidate thoughts\n'
              '    candidates_to_scores = get_candidates_to_scores(env)\n'
              '    if len(candidates_to_scores) == 0: return 0, [], []\n'
              '    print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '\n'
              '    # back up current state\n'
              '    board, status, steps = env.board.copy(), env.status.copy(), '
              'env.steps\n'
              '\n'
              '    # try each candidate\n'
              '    cnt_per_state = 0\n')

Fragment(uuid='77b13acd-1afb-43e9-88fd-d6ce014dcd52',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=101,
         depth=2,
         type='variable',
         name='candidates_to_scores',
         text='candidates_to_scores = get_candidates_to_scores(env)')

Fragment(uuid='f4f57737-f54d-4940-9229-c161364ba344',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=106,
         depth=2,
         type='variable',
         name='board,',
         text='board, status, steps = env.board.copy(), env.status.copy(), '
              'env.steps')

Fragment(uuid='cbcb53e2-6c5b-47d1-9f38-9f84bc4db39e',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=109,
         depth=2,
         type='variable',
         name='cnt_per_state',
         text='cnt_per_state = 0')

Fragment(uuid='8c0b74ae-2274-4ef6-8220-471ad3b0abfe',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=110,
         depth=0,
         type='module',
         name='',
         text='    for action in sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True):\n'
              '        obs, r, done, info = env.step(action)\n'
              "        r = info['r_word']\n")

Fragment(uuid='d0384332-f055-49af-9bad-a4a2ef331b4d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=110,
         depth=0,
         type='function',
         name='dfs',
         text='    for action in sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True):\n'
              '        obs, r, done, info = env.step(action)\n'
              "        r = info['r_word']\n")

Fragment(uuid='dc640ea2-31b9-4438-93da-010cc16adbac',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=111,
         depth=4,
         type='variable',
         name='obs,',
         text='obs, r, done, info = env.step(action)')

Fragment(uuid='09e08565-e5ee-49c1-91c6-06b0b66d1ed6',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=112,
         depth=4,
         type='variable',
         name='r',
         text="r = info['r_word']")

Fragment(uuid='5d4bb8a3-7f5f-4118-9e5c-0f800af389a7',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=113,
         depth=0,
         type='module',
         name='',
         text='        if len(infos) < time_limit and env.steps < 10 and not '
              'any(_ == 2 for _ in env.status):  # not violating any existing '
              'constraints\n'
              '            cnt_per_state += 1\n')

Fragment(uuid='9f10f256-e51b-495b-afd0-b289ae348a78',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=113,
         depth=0,
         type='function',
         name='dfs',
         text='        if len(infos) < time_limit and env.steps < 10 and not '
              'any(_ == 2 for _ in env.status):  # not violating any existing '
              'constraints\n'
              '            cnt_per_state += 1\n')

Fragment(uuid='2b4d9d4d-aa63-4785-afc9-21781b451259',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=115,
         depth=0,
         type='module',
         name='',
         text='            if cnt_per_state > max_per_state: break\n'
              '            count = env.prompt_status()       \n'
              '            actions.append(action)  \n'
              '\n'
              '            print(len(infos))\n'
              '            print(actions)\n'
              '            print(env.render_board())\n'
              '            print(info)\n'
              '            print(count)\n')

Fragment(uuid='8106cc38-29a6-4b2f-8b0f-02450144cf74',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=115,
         depth=0,
         type='function',
         name='dfs',
         text='            if cnt_per_state > max_per_state: break\n'
              '            count = env.prompt_status()       \n'
              '            actions.append(action)  \n'
              '\n'
              '            print(len(infos))\n'
              '            print(actions)\n'
              '            print(env.render_board())\n'
              '            print(info)\n'
              '            print(count)\n')

Fragment(uuid='94afae6e-fa00-46b6-8e46-5cb3d4cf12f1',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=116,
         depth=6,
         type='variable',
         name='count',
         text='count = env.prompt_status()')

Fragment(uuid='2d58b608-b2a4-400b-9dd4-663945acb320',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=124,
         depth=0,
         type='module',
         name='',
         text='            if infos:\n'
              '                best = max(infos, key=lambda x: '
              "x['info']['r_word'])\n"
              "                print('best', best)\n"
              "            print('--------------')\n"
              '            print()\n'
              '\n'
              "            info = {'total_step': len(infos), 'env_step': "
              "env.steps, 'actions': actions.copy(), 'info': info, 'count': "
              'count}\n'
              '            infos.append(info)\n')

Fragment(uuid='bf984d0b-b135-4e6c-bace-82a7e11ec84d',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=124,
         depth=0,
         type='function',
         name='dfs',
         text='            if infos:\n'
              '                best = max(infos, key=lambda x: '
              "x['info']['r_word'])\n"
              "                print('best', best)\n"
              "            print('--------------')\n"
              '            print()\n'
              '\n'
              "            info = {'total_step': len(infos), 'env_step': "
              "env.steps, 'actions': actions.copy(), 'info': info, 'count': "
              'count}\n'
              '            infos.append(info)\n')

Fragment(uuid='168ebc30-59c6-4d53-9616-e86d4f90a8c5',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=125,
         depth=8,
         type='variable',
         name='best',
         text="best = max(infos, key=lambda x: x['info']['r_word'])")

Fragment(uuid='bae1bb3f-ef9f-46c4-8fec-1264b68eed7b',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=130,
         depth=6,
         type='variable',
         name='info',
         text="info = {'total_step': len(infos), 'env_step': env.steps, "
              "'actions': actions.copy(), 'info': info, 'count': count}")

Fragment(uuid='9c44ed69-f8cd-426d-93fd-c0ed88a2b4a2',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=132,
         depth=0,
         type='module',
         name='',
         text="            if not prune or count['impossible'] < 1:  # only "
              'continue if the current status is possible\n'
              '                dfs(env, actions, infos, time_limit, prune, '
              'max_per_state)\n'
              '            actions.pop()\n'
              '        env.reset(env.idx, board=board.copy(), '
              'status=status.copy(), steps=steps)\n'
              '\n'
              '# dfs with pruning\n'
              'infoss = []\n'
              'for i in range(0, 100, 5):\n'
              '    env.reset(i)\n'
              '    infos = []\n'
              '    actions = []\n'
              '    dfs(env, actions, infos, 100, prune=True, max_per_state=3)\n'
              '    infoss.append(infos)\n')

Fragment(uuid='2c661364-feb2-4c47-a026-ec027de749cf',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=132,
         depth=0,
         type='function',
         name='dfs',
         text="            if not prune or count['impossible'] < 1:  # only "
              'continue if the current status is possible\n'
              '                dfs(env, actions, infos, time_limit, prune, '
              'max_per_state)\n'
              '            actions.pop()\n'
              '        env.reset(env.idx, board=board.copy(), '
              'status=status.copy(), steps=steps)')

Fragment(uuid='9955dcd5-c564-42af-8803-95a77d1bc4cf',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=138,
         depth=0,
         type='variable',
         name='infoss',
         text='infoss = []')

Fragment(uuid='8c5d36ef-ff43-4eda-ad55-476953934811',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=141,
         depth=2,
         type='variable',
         name='infos',
         text='infos = []')

Fragment(uuid='dae60052-819d-4b49-8d13-1ff8154a529c',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=142,
         depth=2,
         type='variable',
         name='actions',
         text='actions = []')

Fragment(uuid='4118195a-5e13-4733-8508-617c4a8c9d46',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=145,
         depth=0,
         type='module',
         name='',
         text="    with open('logs/crosswords/infoss_dfs_prune.json', 'w') as "
              'fout:\n'
              '        json.dump(infoss, fout)\n'
              '\n'
              '# dfs without pruning\n'
              'infoss = []\n'
              'for i in range(0, 100, 5):\n'
              '    env.reset(i)\n'
              '    infos = []\n'
              '    actions = []\n'
              '    dfs(env, actions, infos, 100, prune=False, '
              'max_per_state=3)\n'
              '    infoss.append(infos)\n')

Fragment(uuid='df4cd73b-7d17-4ae8-a212-380ae76309fc',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=149,
         depth=0,
         type='variable',
         name='infoss',
         text='infoss = []')

Fragment(uuid='fe9344e8-859a-4b73-bedd-a8f67c071504',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=152,
         depth=2,
         type='variable',
         name='infos',
         text='infos = []')

Fragment(uuid='6a68a0a2-2a1c-4e8d-a372-6e91331de0f4',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=153,
         depth=2,
         type='variable',
         name='actions',
         text='actions = []')

Fragment(uuid='b34b3c29-fb7a-4c62-950c-87d3a100d6e6',
         path='/scripts/crosswords/search_crosswords-dfs.ipynb',
         lineno=156,
         depth=0,
         type='module',
         name='',
         text="    with open('logs/crosswords/infoss_dfs_no_prune.json', 'w') "
              'as fout:\n'
              '        json.dump(infoss, fout)')

Fragment(uuid='9aa3aff7-f2fa-43c2-919c-fa21b7225879',
         path='/scripts/crosswords/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task crosswords \\\n'
              '    --task_file_path mini0505_0_100_5.json \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 20 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample standard \\\n'
              '    --n_generate_sample 10 ')

Fragment(uuid='34b414b6-3c29-430d-865b-79ce47ac7381',
         path='/scripts/crosswords/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/crosswords/standard_sampling.sh\n')

Fragment(uuid='01ac6094-58f9-43da-87a0-ee4817daff57',
         path='/scripts/game24/bfs.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task game24 \\\n'
              '    --task_file_path 24.csv \\\n'
              '    --task_start_index 900 \\\n'
              '    --task_end_index 1000 \\\n'
              '    --method_generate propose \\\n'
              '    --method_evaluate value \\\n'
              '    --method_select greedy \\\n'
              '    --n_evaluate_sample 3 \\\n'
              '    --n_select_sample 5 \\\n'
              '    ${@}\n')

Fragment(uuid='a0c21250-5c7f-4671-9fc4-d34c26c2c0b9',
         path='/scripts/game24/bfs.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/game24/bfs.sh\n')

Fragment(uuid='7156b8a1-8e75-445e-9886-bdc04afac6b8',
         path='/scripts/game24/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task game24 \\\n'
              '    --task_file_path 24.csv \\\n'
              '    --task_start_index 900 \\\n'
              '    --task_end_index 1000 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample cot \\\n'
              '    --n_generate_sample 100 \\\n'
              '    ${@}')

Fragment(uuid='82783e47-e18e-4237-af6d-6f94ab199dbd',
         path='/scripts/game24/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/game24/cot_sampling.sh\n')

Fragment(uuid='db628a55-860f-4270-a459-5446a95b6ff9',
         path='/scripts/game24/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task game24 \\\n'
              '    --task_file_path 24.csv \\\n'
              '    --task_start_index 900 \\\n'
              '    --task_end_index 1000 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample standard \\\n'
              '    --n_generate_sample 100 \\\n'
              '    ${@}')

Fragment(uuid='a566ade7-aeb4-4a41-ba4b-530681f303c5',
         path='/scripts/game24/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/game24/standard_sampling.sh\n')

Fragment(uuid='f2e1db19-8a89-4e2d-82ae-aceb638e2b8f',
         path='/scripts/text/bfs.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task text \\\n'
              '    --task_file_path data_100_random_text.txt \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 1 \\\n'
              '    --method_generate sample \\\n'
              '    --method_evaluate vote \\\n'
              '    --method_select greedy \\\n'
              '    --n_generate_sample 5 \\\n'
              '    --n_evaluate_sample 5 \\\n'
              '    --n_select_sample 1 \\\n'
              '    --prompt_sample cot \\\n'
              '    --temperature 1.0 \\\n'
              '    ${@}\n'
              '\n'
              '\n'
              '# 0.3 dollars per line ->  30 dollars for 100 lines')

Fragment(uuid='4f630755-056c-4f9c-9d7d-eae0d7efe363',
         path='/scripts/text/bfs.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/text/bfs.sh\n')

Fragment(uuid='7b21323d-2b56-48b2-92fd-05f6dfa5233d',
         path='/scripts/text/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task text \\\n'
              '    --task_file_path data_100_random_text.txt \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 1 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample cot \\\n'
              '    --n_generate_sample 10 \\\n'
              '    --temperature 1.0 \\\n'
              '    ${@}\n'
              '\n'
              '# 0.03 dollars per line ->  3 dollars for 100 lines?')

Fragment(uuid='6664e540-9535-485d-839c-85a560a88c6e',
         path='/scripts/text/cot_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/text/cot_sampling.sh\n')

Fragment(uuid='25b08eca-5006-4e06-b44c-d66abeb6f7ee',
         path='/scripts/text/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='python run.py \\\n'
              '    --task text \\\n'
              '    --task_file_path data_100_random_text.txt \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 1 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample standard \\\n'
              '    --n_generate_sample 10 \\\n'
              '    --temperature 1.0 \\\n'
              '    ${@}\n'
              '\n'
              '\n'
              '# 0.03 dollars per line ->  3 dollars for 100 lines?')

Fragment(uuid='483a7d3a-8ca5-49b0-a368-3cb331742d6a',
         path='/scripts/text/standard_sampling.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /scripts/text/standard_sampling.sh\n')

Fragment(uuid='2d1123a0-492a-4cc0-8370-5b3abba1b434',
         path='/tasks/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='def get_task(name, file=None):\n'
              "    if name == 'game24':\n"
              '        from .game24 import Game24Task\n'
              '        return Game24Task(file)\n'
              "    elif name == 'text':\n"
              '        from .text import TextTask\n'
              '        return TextTask(file)\n'
              "    elif name == 'crosswords':\n"
              '        from .crosswords import MiniCrosswordsTask\n'
              '        return MiniCrosswordsTask(file)\n'
              '    else:\n'
              '        raise NotImplementedError')

Fragment(uuid='ba251c6a-1dc3-4999-84ae-fca9336c2adb',
         path='/tasks/__init__.py',
         lineno=1,
         depth=0,
         type='function',
         name='get_task',
         text='def get_task(name, file=None):\n'
              "    if name == 'game24':\n"
              '        from .game24 import Game24Task\n'
              '        return Game24Task(file)\n'
              "    elif name == 'text':\n"
              '        from .text import TextTask\n'
              '        return TextTask(file)\n'
              "    elif name == 'crosswords':\n"
              '        from .crosswords import MiniCrosswordsTask\n'
              '        return MiniCrosswordsTask(file)\n'
              '    else:\n'
              '        raise NotImplementedError')

Fragment(uuid='92c4bd8d-14be-4c4a-89ee-bd56589d97ff',
         path='/tasks/__init__.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tasks/__init__.py\n'
              '  Functions: get_task\n'
              '  Usages: Game24Task MiniCrosswordsTask NotImplementedError '
              'TextTask crosswords file game24 name text\n')

Fragment(uuid='d8ff26d3-399e-438d-b696-27a5dd5c5489',
         path='/tasks/__init__.py',
         lineno=3,
         depth=4,
         type='dependency',
         name='',
         text='from .game24 import Game24Task')

Fragment(uuid='9cf92720-ce1e-4a71-9120-09244b66b70f',
         path='/tasks/__init__.py',
         lineno=6,
         depth=5,
         type='dependency',
         name='',
         text='from .text import TextTask')

Fragment(uuid='d5cad441-6d59-4fe0-8a38-1607e12b9cf8',
         path='/tasks/__init__.py',
         lineno=9,
         depth=5,
         type='dependency',
         name='',
         text='from .crosswords import MiniCrosswordsTask')

Fragment(uuid='e374d91e-5ec4-448c-815a-1f1b34a6d927',
         path='/tasks/base.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text="DATA_PATH = './data'\n"
              '\n'
              'class Task:\n'
              '    def __init__(self):\n'
              '        pass\n'
              '\n'
              '    def __len__(self) -> int:\n'
              '        pass\n'
              '\n'
              '    def get_input(self, idx: int) -> str:\n'
              '        pass\n'
              '\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        pass')

Fragment(uuid='31a8bd01-780f-4402-8639-d4fec41eaf90',
         path='/tasks/base.py',
         lineno=1,
         depth=0,
         type='variable',
         name='DATA_PATH',
         text="DATA_PATH = './data'")

Fragment(uuid='d3333961-49dc-45a9-85f8-9499e71727f8',
         path='/tasks/base.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tasks/base.py\n'
              '  Classes: Task\n'
              '  Methods: __init__ __len__ get_input test_output\n'
              '  Variables: DATA_PATH\n'
              '  Usages: idx int output self str\n')

Fragment(uuid='df36cdc5-3c0b-432d-a5e1-e436dd196c56',
         path='/tasks/base.py',
         lineno=3,
         depth=0,
         type='class',
         name='Task',
         text='class Task:\n'
              '    def __init__(self):\n'
              '        pass\n'
              '\n'
              '    def __len__(self) -> int:\n'
              '        pass\n'
              '\n'
              '    def get_input(self, idx: int) -> str:\n'
              '        pass\n'
              '\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        pass')

Fragment(uuid='0e737e63-6fdd-402c-920e-a35820b5e4f5',
         path='/tasks/base.py',
         lineno=4,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self):\n        pass')

Fragment(uuid='c3c3b38c-20d8-4fc4-a849-da18df71b8c7',
         path='/tasks/base.py',
         lineno=7,
         depth=2,
         type='function',
         name='__len__',
         text='def __len__(self) -> int:\n        pass')

Fragment(uuid='33331eba-ff0b-4d10-be73-ddb57e684704',
         path='/tasks/base.py',
         lineno=10,
         depth=2,
         type='function',
         name='get_input',
         text='def get_input(self, idx: int) -> str:\n        pass')

Fragment(uuid='719f3ead-1392-4e12-805f-fe03785cdf10',
         path='/tasks/base.py',
         lineno=13,
         depth=2,
         type='function',
         name='test_output',
         text='def test_output(self, idx: int, output: str):\n        pass')

Fragment(uuid='f248c775-1d99-44b9-bc29-ffd3ed09bb0a',
         path='/tasks/crosswords.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import re\n'
              'import json\n'
              'import os\n'
              'from tasks.base import Task, DATA_PATH\n'
              'from prompts.crosswords import * \n'
              'from models import gpt\n')

Fragment(uuid='0130ccbf-fea6-49ef-8076-a44e2b77d5e1',
         path='/tasks/crosswords.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import re')

Fragment(uuid='95b2ca0f-57e2-419d-a1de-7eb3eb674d41',
         path='/tasks/crosswords.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tasks/crosswords.py\n'
              '  Classes: MiniCrosswordsEnv MiniCrosswordsTask\n'
              '  Methods: __init__ __len__ cot_prompt_wrap evaluate get_ans '
              'get_input prompt_status propose_outputs_unwrap '
              'propose_prompt_wrap render render_ans render_board render_clues '
              'render_gt_ans render_gt_board reset set_status '
              'standard_prompt_wrap step test_output\n'
              '  Variables: action ans ans[i+5] ans[i] confidence_to_value '
              "count idx info info['r'] letters line lines match output parts "
              'pattern pos, prompt proposal proposals proposals_to_scores '
              'proposals_to_scores[proposal] r_all r_letter r_word res score '
              'self.ans self.ans_gt self.board self.board[idx*5:(idx+1)*5] '
              'self.board[idx::5] self.cache self.cache_proposals '
              'self.cache_proposals[(x, self.data, self.env self.file self.idx '
              'self.n self.new_ans self.prompt_status_cache '
              'self.prompt_status_cache[prompt] self.status self.status[idx] '
              'self.steps self.times self.xs word\n'
              '  Usages: DATA_PATH Task ans_gt any append base board board_gt '
              'cache cache_proposals cot_prompt crosswords data enumerate env '
              'file format get gpt group index input int items join json key '
              'len letter list load lower models n_evaluate_sample '
              'n_max_propose new_ans new_letter open outputs pos print '
              'prompt_status_cache prompts propose_prompt range reverse self '
              'sorted split standard_prompt startswith staticmethod status '
              'steps str strip sum super tasks times upper value_prompt zip\n')

Fragment(uuid='e8d472b3-c4b6-429b-94c2-5202eb2c6a83',
         path='/tasks/crosswords.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import json')

Fragment(uuid='93281eb8-9a4b-4d5d-9f2c-e60bb9023d53',
         path='/tasks/crosswords.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='fbd33fec-3166-404e-bc68-ede7a5278288',
         path='/tasks/crosswords.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from tasks.base import Task, DATA_PATH')

Fragment(uuid='67cb4a5d-58eb-406d-9141-04d56121ca90',
         path='/tasks/crosswords.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='from prompts.crosswords import *')

Fragment(uuid='f92fcb72-0fd9-4401-b40e-a581a26dd42e',
         path='/tasks/crosswords.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from models import gpt')

Fragment(uuid='ddac7bb0-3228-441f-a156-9c582033f19d',
         path='/tasks/crosswords.py',
         lineno=7,
         depth=0,
         type='module',
         name='',
         text='\nclass MiniCrosswordsEnv:\n')

Fragment(uuid='f567efca-3306-4f4a-ae6f-2166511277f6',
         path='/tasks/crosswords.py',
         lineno=8,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='class MiniCrosswordsEnv:\n')

Fragment(uuid='56d77cce-779b-43e2-82c2-6bec526bad72',
         path='/tasks/crosswords.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text="    def __init__(self, file='mini0505.json'):\n"
              "        self.file = f'data/crosswords/{file}'\n"
              '        self.file = json.load(open(self.file))\n'
              '        self.n = len(self.file)\n'
              '        self.cache = {}\n'
              '        self.idx = None\n'
              '        self.times = 0\n'
              '        self.prompt_status_cache = {}\n')

Fragment(uuid='852381c8-1af3-49b0-9890-f4b8680ee856',
         path='/tasks/crosswords.py',
         lineno=9,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text="    def __init__(self, file='mini0505.json'):\n"
              "        self.file = f'data/crosswords/{file}'\n"
              '        self.file = json.load(open(self.file))\n'
              '        self.n = len(self.file)\n'
              '        self.cache = {}\n'
              '        self.idx = None\n'
              '        self.times = 0\n'
              '        self.prompt_status_cache = {}\n')

Fragment(uuid='fefdb354-8a7d-44c9-b000-02220782fc3e',
         path='/tasks/crosswords.py',
         lineno=9,
         depth=2,
         type='function',
         name='__init__',
         text="def __init__(self, file='mini0505.json'):\n"
              "        self.file = f'data/crosswords/{file}'\n"
              '        self.file = json.load(open(self.file))\n'
              '        self.n = len(self.file)\n'
              '        self.cache = {}\n'
              '        self.idx = None\n'
              '        self.times = 0\n'
              '        self.prompt_status_cache = {}')

Fragment(uuid='980e3bce-0f90-4765-968a-4413a0811d86',
         path='/tasks/crosswords.py',
         lineno=10,
         depth=4,
         type='variable',
         name='self.file',
         text="self.file = f'data/crosswords/{file}'")

Fragment(uuid='4f63023e-4da4-4398-97bd-fc7f59ddd950',
         path='/tasks/crosswords.py',
         lineno=11,
         depth=4,
         type='variable',
         name='self.file',
         text='self.file = json.load(open(self.file))')

Fragment(uuid='30e0ee53-5751-4524-a69c-4ed315cfb14c',
         path='/tasks/crosswords.py',
         lineno=12,
         depth=4,
         type='variable',
         name='self.n',
         text='self.n = len(self.file)')

Fragment(uuid='f2bbeb19-ddf6-48f3-9469-231b9acd28e4',
         path='/tasks/crosswords.py',
         lineno=13,
         depth=4,
         type='variable',
         name='self.cache',
         text='self.cache = {}')

Fragment(uuid='374c45a4-fd2b-44a7-8ce6-03c3faaf4c95',
         path='/tasks/crosswords.py',
         lineno=14,
         depth=4,
         type='variable',
         name='self.idx',
         text='self.idx = None')

Fragment(uuid='c4bae1d4-41d3-464e-a2e3-81e483d4e760',
         path='/tasks/crosswords.py',
         lineno=15,
         depth=4,
         type='variable',
         name='self.times',
         text='self.times = 0')

Fragment(uuid='6bb03802-31c8-479f-9700-d04e16b73859',
         path='/tasks/crosswords.py',
         lineno=16,
         depth=4,
         type='variable',
         name='self.prompt_status_cache',
         text='self.prompt_status_cache = {}')

Fragment(uuid='f9037179-26c9-4a5a-a694-a7634573559f',
         path='/tasks/crosswords.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='\n    def __len__(self):\n        return self.n\n')

Fragment(uuid='3423db76-ab50-4e51-96de-b3c6d5a1a588',
         path='/tasks/crosswords.py',
         lineno=17,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='\n    def __len__(self):\n        return self.n\n')

Fragment(uuid='2cdbe1f0-321a-4e93-8fd1-1eb48de40201',
         path='/tasks/crosswords.py',
         lineno=18,
         depth=2,
         type='function',
         name='__len__',
         text='def __len__(self):\n        return self.n')

Fragment(uuid='e00d5a3e-5923-4ecf-853c-f2496a1622e6',
         path='/tasks/crosswords.py',
         lineno=20,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def reset(self, idx, board=None, status=None, steps=None):\n'
              '        self.idx = idx\n'
              '        self.data, self.board_gt = self.file[idx]\n'
              "        self.board = ['_'] * 25\n"
              "        self.ans = ['_____'] * 10\n"
              '        self.ans_gt = self.get_ans(self.board_gt)\n'
              '        self.steps = 0\n'
              '        self.status = [0] * 10  # 0: unfilled; 1: filled; 2: '
              'filled then changed\n')

Fragment(uuid='52aedca6-b596-47c6-aaa9-1e9aa61e3c9b',
         path='/tasks/crosswords.py',
         lineno=20,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def reset(self, idx, board=None, status=None, steps=None):\n'
              '        self.idx = idx\n'
              '        self.data, self.board_gt = self.file[idx]\n'
              "        self.board = ['_'] * 25\n"
              "        self.ans = ['_____'] * 10\n"
              '        self.ans_gt = self.get_ans(self.board_gt)\n'
              '        self.steps = 0\n'
              '        self.status = [0] * 10  # 0: unfilled; 1: filled; 2: '
              'filled then changed\n')

Fragment(uuid='0041209b-bc27-4c5c-937d-f014f0f57999',
         path='/tasks/crosswords.py',
         lineno=21,
         depth=2,
         type='function',
         name='reset',
         text='def reset(self, idx, board=None, status=None, steps=None):\n'
              '        self.idx = idx\n'
              '        self.data, self.board_gt = self.file[idx]\n'
              "        self.board = ['_'] * 25\n"
              "        self.ans = ['_____'] * 10\n"
              '        self.ans_gt = self.get_ans(self.board_gt)\n'
              '        self.steps = 0\n'
              '        self.status = [0] * 10  # 0: unfilled; 1: filled; 2: '
              'filled then changed\n')

Fragment(uuid='b94b0821-9c81-40c0-9a45-b9b73c6eead2',
         path='/tasks/crosswords.py',
         lineno=22,
         depth=4,
         type='variable',
         name='self.idx',
         text='self.idx = idx')

Fragment(uuid='0736db7e-7042-4411-a0d4-7713b828714a',
         path='/tasks/crosswords.py',
         lineno=23,
         depth=4,
         type='variable',
         name='self.data,',
         text='self.data, self.board_gt = self.file[idx]')

Fragment(uuid='8870b30b-9b84-4f3f-9540-2b841a58954c',
         path='/tasks/crosswords.py',
         lineno=24,
         depth=4,
         type='variable',
         name='self.board',
         text="self.board = ['_'] * 25")

Fragment(uuid='5f631cce-539c-4dd7-ad7c-5a0836a6b04f',
         path='/tasks/crosswords.py',
         lineno=25,
         depth=4,
         type='variable',
         name='self.ans',
         text="self.ans = ['_____'] * 10")

Fragment(uuid='250ca444-ffd3-4815-94e7-c2f29a1f5d08',
         path='/tasks/crosswords.py',
         lineno=26,
         depth=4,
         type='variable',
         name='self.ans_gt',
         text='self.ans_gt = self.get_ans(self.board_gt)')

Fragment(uuid='b78e51bc-6770-4841-8fbc-8001b65cbc34',
         path='/tasks/crosswords.py',
         lineno=27,
         depth=4,
         type='variable',
         name='self.steps',
         text='self.steps = 0')

Fragment(uuid='f804c9fa-61d4-410c-8020-75c858b699d0',
         path='/tasks/crosswords.py',
         lineno=28,
         depth=4,
         type='variable',
         name='self.status',
         text='self.status = [0] * 10')

Fragment(uuid='a4afeb4d-0275-4b11-98e4-803875911b86',
         path='/tasks/crosswords.py',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text='        if board is not None:\n'
              '            self.board = board\n'
              '            self.ans = self.get_ans(self.board)\n')

Fragment(uuid='bfd07fb6-22d2-4d6b-9c10-09358ff9e5b9',
         path='/tasks/crosswords.py',
         lineno=29,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        if board is not None:\n'
              '            self.board = board\n'
              '            self.ans = self.get_ans(self.board)\n')

Fragment(uuid='ed36c0ad-099c-405c-81b7-b2e68a10b79b',
         path='/tasks/crosswords.py',
         lineno=29,
         depth=2,
         type='function',
         name='reset',
         text='        if board is not None:\n'
              '            self.board = board\n'
              '            self.ans = self.get_ans(self.board)\n')

Fragment(uuid='ea3a1da7-b977-4142-80c6-2a78dac6381d',
         path='/tasks/crosswords.py',
         lineno=30,
         depth=6,
         type='variable',
         name='self.board',
         text='self.board = board')

Fragment(uuid='b89d7263-aa09-4a09-a76f-dfdcaf1b1e27',
         path='/tasks/crosswords.py',
         lineno=31,
         depth=6,
         type='variable',
         name='self.ans',
         text='self.ans = self.get_ans(self.board)')

Fragment(uuid='af3395be-cf5c-458b-bd3c-da6fa9ccd370',
         path='/tasks/crosswords.py',
         lineno=32,
         depth=0,
         type='module',
         name='',
         text='        if status is not None:\n'
              '            self.status = status\n')

Fragment(uuid='daf78df1-6b63-41ff-93fc-a6150fa84450',
         path='/tasks/crosswords.py',
         lineno=32,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        if status is not None:\n'
              '            self.status = status\n')

Fragment(uuid='2a3b2c60-b01a-47d3-ba5b-59796017c810',
         path='/tasks/crosswords.py',
         lineno=32,
         depth=2,
         type='function',
         name='reset',
         text='        if status is not None:\n'
              '            self.status = status\n')

Fragment(uuid='89015e2e-84b6-4d81-a683-c5366e10ab59',
         path='/tasks/crosswords.py',
         lineno=33,
         depth=6,
         type='variable',
         name='self.status',
         text='self.status = status')

Fragment(uuid='84653bf1-ab20-43b5-9e21-5ec5cf24d33b',
         path='/tasks/crosswords.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='        if steps is not None:\n'
              '            self.steps = steps\n'
              '        return self.render()\n')

Fragment(uuid='ce20f3d5-7e3b-4032-91b8-4c225dbd2e3f',
         path='/tasks/crosswords.py',
         lineno=34,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        if steps is not None:\n'
              '            self.steps = steps\n'
              '        return self.render()\n')

Fragment(uuid='df4b4544-5215-4aa3-a8e1-c7685705125e',
         path='/tasks/crosswords.py',
         lineno=34,
         depth=2,
         type='function',
         name='reset',
         text='        if steps is not None:\n'
              '            self.steps = steps\n'
              '        return self.render()')

Fragment(uuid='18305ca8-4687-4e84-844b-74f1621958a9',
         path='/tasks/crosswords.py',
         lineno=35,
         depth=6,
         type='variable',
         name='self.steps',
         text='self.steps = steps')

Fragment(uuid='280366e8-1542-4926-a019-292f151d45e1',
         path='/tasks/crosswords.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '\n'
              '    def prompt_status(self):\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='91878d28-b737-4e61-b8d3-66f2f1b8f80e',
         path='/tasks/crosswords.py',
         lineno=37,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '\n'
              '    def prompt_status(self):\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='7942dfc1-8855-4289-aac8-0b0be1e551a3',
         path='/tasks/crosswords.py',
         lineno=39,
         depth=2,
         type='function',
         name='prompt_status',
         text='def prompt_status(self):\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='2625d683-f756-4392-914c-5bdb7be5278f',
         path='/tasks/crosswords.py',
         lineno=40,
         depth=4,
         type='variable',
         name='count',
         text="count = {'sure': 0, 'maybe': 0, 'impossible': 0}")

Fragment(uuid='b71957af-303f-47cd-8e1c-9c63cd2a204e',
         path='/tasks/crosswords.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='        for ans, data, status in zip(self.ans, self.data, '
              'self.status):\n'
              '            # if status != 0: continue\n')

Fragment(uuid='760e8674-4240-4715-93b2-bde1b18e88da',
         path='/tasks/crosswords.py',
         lineno=41,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        for ans, data, status in zip(self.ans, self.data, '
              'self.status):\n'
              '            # if status != 0: continue\n')

Fragment(uuid='18ddfb80-3e81-4273-9ff8-46ea2402c5d6',
         path='/tasks/crosswords.py',
         lineno=41,
         depth=2,
         type='function',
         name='prompt_status',
         text='        for ans, data, status in zip(self.ans, self.data, '
              'self.status):\n'
              '            # if status != 0: continue\n')

Fragment(uuid='2e76ec73-c2a6-45f6-b9d5-c3b0f220b16e',
         path='/tasks/crosswords.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text="            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n')

Fragment(uuid='7160138f-612a-459c-a22e-1ebff6db104b',
         path='/tasks/crosswords.py',
         lineno=43,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text="            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n')

Fragment(uuid='2c5a5435-cbc0-4d05-9aa5-6945553bcc0b',
         path='/tasks/crosswords.py',
         lineno=43,
         depth=2,
         type='function',
         name='prompt_status',
         text="            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n')

Fragment(uuid='11b052a1-fad2-4e86-b3d6-1b50052a48a6',
         path='/tasks/crosswords.py',
         lineno=44,
         depth=6,
         type='variable',
         name='ans',
         text="ans = ' '.join(ans.lower())")

Fragment(uuid='698c2a0a-aa78-48e3-9023-42ce9b2e7d0e',
         path='/tasks/crosswords.py',
         lineno=45,
         depth=6,
         type='variable',
         name='line',
         text="line = f'{data}: {ans}'")

Fragment(uuid='13938ea2-58de-489c-86dc-56171117154a',
         path='/tasks/crosswords.py',
         lineno=46,
         depth=6,
         type='variable',
         name='prompt',
         text='prompt = value_prompt.format(input=line)')

Fragment(uuid='9837af5c-f9f5-4d0d-b067-90de0bc499f6',
         path='/tasks/crosswords.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='            if prompt in self.prompt_status_cache:\n'
              '                res = self.prompt_status_cache[prompt]\n'
              '            else:\n'
              '                res = gpt(prompt)[0]\n'
              '                self.prompt_status_cache[prompt] = res\n'
              '            # print(line)\n'
              '            # print(res)\n'
              '            # print()\n'
              "            res = res.split('\\n')[-1].strip()\n")

Fragment(uuid='39426d21-2cbb-4505-82c1-75c10284e00d',
         path='/tasks/crosswords.py',
         lineno=47,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='            if prompt in self.prompt_status_cache:\n'
              '                res = self.prompt_status_cache[prompt]\n'
              '            else:\n'
              '                res = gpt(prompt)[0]\n'
              '                self.prompt_status_cache[prompt] = res\n'
              '            # print(line)\n'
              '            # print(res)\n'
              '            # print()\n'
              "            res = res.split('\\n')[-1].strip()\n")

Fragment(uuid='97b814f7-8c75-43ef-8876-1b1b9f34e5a0',
         path='/tasks/crosswords.py',
         lineno=47,
         depth=2,
         type='function',
         name='prompt_status',
         text='            if prompt in self.prompt_status_cache:\n'
              '                res = self.prompt_status_cache[prompt]\n'
              '            else:\n'
              '                res = gpt(prompt)[0]\n'
              '                self.prompt_status_cache[prompt] = res\n'
              '            # print(line)\n'
              '            # print(res)\n'
              '            # print()\n'
              "            res = res.split('\\n')[-1].strip()\n")

Fragment(uuid='911e5f96-c789-4882-bc01-36a91c319843',
         path='/tasks/crosswords.py',
         lineno=48,
         depth=8,
         type='variable',
         name='res',
         text='res = self.prompt_status_cache[prompt]')

Fragment(uuid='b4fff13f-0014-42eb-a072-fd017ce46732',
         path='/tasks/crosswords.py',
         lineno=50,
         depth=9,
         type='variable',
         name='res',
         text='res = gpt(prompt)[0]')

Fragment(uuid='60da1b10-cb15-4963-acf6-d5ee1926a752',
         path='/tasks/crosswords.py',
         lineno=51,
         depth=9,
         type='variable',
         name='self.prompt_status_cache[prompt]',
         text='self.prompt_status_cache[prompt] = res')

Fragment(uuid='76c5fc4a-cd16-4a7c-a0ad-c0ac0af72a24',
         path='/tasks/crosswords.py',
         lineno=55,
         depth=6,
         type='variable',
         name='res',
         text="res = res.split('\\n')[-1].strip()")

Fragment(uuid='3cf64d55-f79d-45b6-804d-67bf39c48c23',
         path='/tasks/crosswords.py',
         lineno=56,
         depth=0,
         type='module',
         name='',
         text='            if res in count: count[res] += 1\n'
              '        # print(count)\n'
              '        return count\n')

Fragment(uuid='95706ceb-7197-4966-a7bc-9dd49d1d2f14',
         path='/tasks/crosswords.py',
         lineno=56,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='            if res in count: count[res] += 1\n'
              '        # print(count)\n'
              '        return count\n')

Fragment(uuid='4372ff82-8ed3-41e7-acbf-6dfa7e411db4',
         path='/tasks/crosswords.py',
         lineno=56,
         depth=2,
         type='function',
         name='prompt_status',
         text='            if res in count: count[res] += 1\n'
              '        # print(count)\n'
              '        return count')

Fragment(uuid='1e9f9b87-7124-45a3-954f-b59f8f85ad70',
         path='/tasks/crosswords.py',
         lineno=59,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def render_gt_board(self):\n'
              '        s = "GT Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ' '.join(self.board_gt[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(uuid='a6ede6de-b361-4fd7-9982-972bcedb77ae',
         path='/tasks/crosswords.py',
         lineno=59,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def render_gt_board(self):\n'
              '        s = "GT Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ' '.join(self.board_gt[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(uuid='bcaeddbe-5ecb-49f3-b865-68ec62efc2cb',
         path='/tasks/crosswords.py',
         lineno=60,
         depth=2,
         type='function',
         name='render_gt_board',
         text='def render_gt_board(self):\n'
              '        s = "GT Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ' '.join(self.board_gt[i*5:(i+1)*5]) + '\\n'\n"
              '        return s')

Fragment(uuid='58f1103c-cb37-4145-b992-0208f748089c',
         path='/tasks/crosswords.py',
         lineno=61,
         depth=4,
         type='variable',
         name='s',
         text='s = "GT Board:\\n"')

Fragment(uuid='9cdd684b-7cfe-4aab-8461-04860ab47b07',
         path='/tasks/crosswords.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def render_board(self):\n'
              '        s = "Current Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ''.join(self.board[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(uuid='d658b925-9ef2-43d4-a0b6-65ae2b2c6cbf',
         path='/tasks/crosswords.py',
         lineno=65,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def render_board(self):\n'
              '        s = "Current Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ''.join(self.board[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(uuid='4bfd8475-bef4-4ef3-ba4a-708dfeaa3811',
         path='/tasks/crosswords.py',
         lineno=66,
         depth=2,
         type='function',
         name='render_board',
         text='def render_board(self):\n'
              '        s = "Current Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ''.join(self.board[i*5:(i+1)*5]) + '\\n'\n"
              '        return s')

Fragment(uuid='e6681942-45f2-4612-a8e9-23343e167a90',
         path='/tasks/crosswords.py',
         lineno=67,
         depth=4,
         type='variable',
         name='s',
         text='s = "Current Board:\\n"')

Fragment(uuid='35b1125a-647b-4eea-b563-0f640601d1e7',
         path='/tasks/crosswords.py',
         lineno=71,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def render_clues(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        return s\n')

Fragment(uuid='7e2f642f-f1f7-4ef1-a052-a9a056b1d392',
         path='/tasks/crosswords.py',
         lineno=71,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='\n'
              '    def render_clues(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        return s\n')

Fragment(uuid='2973689a-ae90-4136-aefc-38f844e0575f',
         path='/tasks/crosswords.py',
         lineno=72,
         depth=2,
         type='function',
         name='render_clues',
         text='def render_clues(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        return s')

Fragment(uuid='a9fec1bc-15fb-4764-82c7-484134913cf9',
         path='/tasks/crosswords.py',
         lineno=73,
         depth=4,
         type='variable',
         name='s',
         text='s = ""')

Fragment(uuid='f1f79a29-8220-4bdf-9a19-893e338aca67',
         path='/tasks/crosswords.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def render_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans[i] + '\\n'\n"
              '        return s\n')

Fragment(uuid='98c45c99-e537-4f15-8ba4-7ca3d5b6f41b',
         path='/tasks/crosswords.py',
         lineno=83,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def render_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans[i] + '\\n'\n"
              '        return s\n')

Fragment(uuid='3cd33680-4251-4c0c-bf71-c751a29e79a9',
         path='/tasks/crosswords.py',
         lineno=84,
         depth=2,
         type='function',
         name='render_ans',
         text='def render_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans[i] + '\\n'\n"
              '        return s')

Fragment(uuid='7b2817e0-277d-47f1-be8c-b7137ddc3787',
         path='/tasks/crosswords.py',
         lineno=85,
         depth=4,
         type='variable',
         name='s',
         text='s = ""')

Fragment(uuid='a438b841-f7fd-43bb-9355-55a9ea593643',
         path='/tasks/crosswords.py',
         lineno=95,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def render_gt_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n')

Fragment(uuid='903f222b-9c67-458e-b72f-1cf851b0925f',
         path='/tasks/crosswords.py',
         lineno=95,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def render_gt_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n')

Fragment(uuid='4d717586-f58f-459b-9d28-a8710c8fd4dc',
         path='/tasks/crosswords.py',
         lineno=96,
         depth=2,
         type='function',
         name='render_gt_ans',
         text='def render_gt_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans_gt[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans_gt[i] + '\\n'\n"
              '        return s')

Fragment(uuid='bf8efacb-6aaf-447b-a160-3b98fd2ebf7a',
         path='/tasks/crosswords.py',
         lineno=97,
         depth=4,
         type='variable',
         name='s',
         text='s = ""')

Fragment(uuid='877af6b3-feaf-441c-adbf-3a948b15ef38',
         path='/tasks/crosswords.py',
         lineno=99,
         depth=0,
         type='module',
         name='',
         text='        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans_gt[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n')

Fragment(uuid='b8e4b9a9-3adb-40c1-922a-bd600340d926',
         path='/tasks/crosswords.py',
         lineno=99,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans_gt[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n')

Fragment(uuid='42358e1c-1fe2-430b-a66c-66d2a67d2b7b',
         path='/tasks/crosswords.py',
         lineno=103,
         depth=0,
         type='module',
         name='',
         text='        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans_gt[i] + '\\n'\n"
              '        return s\n')

Fragment(uuid='3c652153-7480-4724-8368-6ca9bc622913',
         path='/tasks/crosswords.py',
         lineno=103,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans_gt[i] + '\\n'\n"
              '        return s\n')

Fragment(uuid='8ef4bd08-d861-4814-b82d-ffa2edd70fb4',
         path='/tasks/crosswords.py',
         lineno=107,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def render(self, status=True):\n'
              '        if status:\n'
              "            return self.render_board() + '\\nUnfilled:\\n' + "
              "self.render_ans(status=0) + '\\nFilled:\\n' + "
              "self.render_ans(status=1) + '\\nChanged:\\n' + "
              'self.render_ans(status=2)\n'
              '        else:\n'
              "            return self.render_board() + '\\n' + "
              'self.render_ans()\n')

Fragment(uuid='e398804d-0f0f-41b7-a244-3adc18285262',
         path='/tasks/crosswords.py',
         lineno=107,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='\n'
              '    def render(self, status=True):\n'
              '        if status:\n'
              "            return self.render_board() + '\\nUnfilled:\\n' + "
              "self.render_ans(status=0) + '\\nFilled:\\n' + "
              "self.render_ans(status=1) + '\\nChanged:\\n' + "
              'self.render_ans(status=2)\n'
              '        else:\n'
              "            return self.render_board() + '\\n' + "
              'self.render_ans()\n')

Fragment(uuid='868c0e7e-8075-4c2e-bf62-f0c61cd44204',
         path='/tasks/crosswords.py',
         lineno=108,
         depth=2,
         type='function',
         name='render',
         text='def render(self, status=True):\n'
              '        if status:\n'
              "            return self.render_board() + '\\nUnfilled:\\n' + "
              "self.render_ans(status=0) + '\\nFilled:\\n' + "
              "self.render_ans(status=1) + '\\nChanged:\\n' + "
              'self.render_ans(status=2)\n'
              '        else:\n'
              "            return self.render_board() + '\\n' + "
              'self.render_ans()')

Fragment(uuid='69315a73-af33-48fe-8dbe-55b0ea8e2c85',
         path='/tasks/crosswords.py',
         lineno=113,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def get_ans(self, board):\n'
              "        ans = [''] * 10\n"
              '        for i in range(5):\n'
              "            ans[i] = ''.join(board[i*5:(i+1)*5])\n"
              '        for i in range(5):\n'
              "            ans[i+5] = ''.join(board[i::5])\n"
              '        return ans\n')

Fragment(uuid='c1bc5cb1-dc8e-415c-935d-79c79f6c89f9',
         path='/tasks/crosswords.py',
         lineno=113,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def get_ans(self, board):\n'
              "        ans = [''] * 10\n"
              '        for i in range(5):\n'
              "            ans[i] = ''.join(board[i*5:(i+1)*5])\n"
              '        for i in range(5):\n'
              "            ans[i+5] = ''.join(board[i::5])\n"
              '        return ans\n')

Fragment(uuid='98d311f2-b1ca-436c-9b8c-25d90e34d1bb',
         path='/tasks/crosswords.py',
         lineno=114,
         depth=2,
         type='function',
         name='get_ans',
         text='def get_ans(self, board):\n'
              "        ans = [''] * 10\n"
              '        for i in range(5):\n'
              "            ans[i] = ''.join(board[i*5:(i+1)*5])\n"
              '        for i in range(5):\n'
              "            ans[i+5] = ''.join(board[i::5])\n"
              '        return ans')

Fragment(uuid='6c1db083-afcd-44fd-802b-1f31d40b189e',
         path='/tasks/crosswords.py',
         lineno=115,
         depth=4,
         type='variable',
         name='ans',
         text="ans = [''] * 10")

Fragment(uuid='5cf0de7e-e469-4d4d-889c-d37b3ff0c386',
         path='/tasks/crosswords.py',
         lineno=117,
         depth=6,
         type='variable',
         name='ans[i]',
         text="ans[i] = ''.join(board[i*5:(i+1)*5])")

Fragment(uuid='bfc368d9-7be6-4114-8237-bf8e5dccab4a',
         path='/tasks/crosswords.py',
         lineno=119,
         depth=6,
         type='variable',
         name='ans[i+5]',
         text="ans[i+5] = ''.join(board[i::5])")

Fragment(uuid='d6efa32e-e8ef-4fd7-9aae-e997e8202ddf',
         path='/tasks/crosswords.py',
         lineno=121,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def step(self, action):\n'
              '        self.steps += 1\n'
              "        action = action.split('\\n')[-1]\n"
              "        action = action.split('. ')\n")

Fragment(uuid='78604456-238e-4218-b162-546104ecabff',
         path='/tasks/crosswords.py',
         lineno=121,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='    \n'
              '    def step(self, action):\n'
              '        self.steps += 1\n'
              "        action = action.split('\\n')[-1]\n"
              "        action = action.split('. ')\n")

Fragment(uuid='eb14c9d8-b827-411f-a832-02c61ec2dfc8',
         path='/tasks/crosswords.py',
         lineno=122,
         depth=2,
         type='function',
         name='step',
         text='def step(self, action):\n'
              '        self.steps += 1\n'
              "        action = action.split('\\n')[-1]\n"
              "        action = action.split('. ')\n")

Fragment(uuid='271c6387-6aa5-4e26-b881-64b07439442f',
         path='/tasks/crosswords.py',
         lineno=124,
         depth=4,
         type='variable',
         name='action',
         text="action = action.split('\\n')[-1]")

Fragment(uuid='2fd063bf-2cc9-4a03-91cb-f9212c6ed63c',
         path='/tasks/crosswords.py',
         lineno=125,
         depth=4,
         type='variable',
         name='action',
         text="action = action.split('. ')")

Fragment(uuid='291d746f-495c-48a8-a031-cf7a41340b7c',
         path='/tasks/crosswords.py',
         lineno=126,
         depth=0,
         type='module',
         name='',
         text='        if len(action) != 2:\n'
              '            return \'Invalid! Format should be like "h1. '
              'apple"\', 0, False, {}\n'
              '        pos, word = action\n')

Fragment(uuid='ccb6d964-719a-4b68-a953-ac58c69a6aa2',
         path='/tasks/crosswords.py',
         lineno=126,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='        if len(action) != 2:\n'
              '            return \'Invalid! Format should be like "h1. '
              'apple"\', 0, False, {}\n'
              '        pos, word = action\n')

Fragment(uuid='fba04373-cd12-4a9b-b4f3-e68c54cb6f78',
         path='/tasks/crosswords.py',
         lineno=126,
         depth=2,
         type='function',
         name='step',
         text='        if len(action) != 2:\n'
              '            return \'Invalid! Format should be like "h1. '
              'apple"\', 0, False, {}\n'
              '        pos, word = action\n')

Fragment(uuid='2784fabc-dd43-42e2-9877-f3292ca17c75',
         path='/tasks/crosswords.py',
         lineno=128,
         depth=4,
         type='variable',
         name='pos,',
         text='pos, word = action')

Fragment(uuid='41446498-abc8-491b-9bbf-1c37126e9711',
         path='/tasks/crosswords.py',
         lineno=129,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        if len(word) != 5:\n'
              "            return 'Invalid! Word should have 5 letters.', 0, "
              'False, {}\n')

Fragment(uuid='40edb586-6039-41b9-a97c-0f81189429b0',
         path='/tasks/crosswords.py',
         lineno=129,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='\n'
              '        if len(word) != 5:\n'
              "            return 'Invalid! Word should have 5 letters.', 0, "
              'False, {}\n')

Fragment(uuid='8f8aebef-7e6d-4c73-9292-d7a09849ccb1',
         path='/tasks/crosswords.py',
         lineno=129,
         depth=2,
         type='function',
         name='step',
         text='\n'
              '        if len(word) != 5:\n'
              "            return 'Invalid! Word should have 5 letters.', 0, "
              'False, {}\n')

Fragment(uuid='89bbf242-5b1b-4f41-a0ba-9cb74a52c113',
         path='/tasks/crosswords.py',
         lineno=132,
         depth=0,
         type='module',
         name='',
         text="        if pos.startswith('h'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx*5:(idx+1)*5] = list(word.upper())\n')

Fragment(uuid='30843103-af29-47c5-b15a-c7feaa9bbb43',
         path='/tasks/crosswords.py',
         lineno=132,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text="        if pos.startswith('h'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx*5:(idx+1)*5] = list(word.upper())\n')

Fragment(uuid='1e861b8a-b543-4920-b3a6-20ebbb681597',
         path='/tasks/crosswords.py',
         lineno=132,
         depth=2,
         type='function',
         name='step',
         text="        if pos.startswith('h'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx*5:(idx+1)*5] = list(word.upper())\n')

Fragment(uuid='8368cd25-77a4-499a-bd38-11c54299e6dc',
         path='/tasks/crosswords.py',
         lineno=133,
         depth=6,
         type='variable',
         name='idx',
         text='idx = int(pos[1:]) - 1')

Fragment(uuid='f15167fb-f4b8-4d3f-adbe-64acb3fa9a8b',
         path='/tasks/crosswords.py',
         lineno=134,
         depth=6,
         type='variable',
         name='self.board[idx*5:(idx+1)*5]',
         text='self.board[idx*5:(idx+1)*5] = list(word.upper())')

Fragment(uuid='efb49547-89ca-4ef2-b398-6f9b6ed45547',
         path='/tasks/crosswords.py',
         lineno=135,
         depth=0,
         type='module',
         name='',
         text="        elif pos.startswith('v'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx::5] = list(word.upper())\n'
              '            idx += 5  # for later status update\n'
              '        else:\n'
              "            return 'Invalid! Position should be h1-h5 or "
              "v1-v5', 0, False, {}\n"
              '        \n'
              '        self.new_ans = self.get_ans(self.board)\n'
              '        # self.status = [2 if (status == 1 and ans != new_ans) '
              'else status for status, ans, new_ans in zip(self.status, '
              'self.ans, self.new_ans)]\n'
              '        self.status = [2 if any(letter != new_letter and le')

Fragment(uuid='203396b3-031d-413f-9905-e21ada660c8d',
         path='/tasks/crosswords.py',
         lineno=135,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text="        elif pos.startswith('v'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx::5] = list(word.upper())\n'
              '            idx += 5  # for later status update\n'
              '        else:\n'
              "            return 'Invalid! Position should be h1-h5 or "
              "v1-v5', 0, False, {}\n"
              '        \n'
              '        self.new_ans = self.get_ans(self.board)\n'
              '        # self.status = [2 if (status == 1 and ans != new_ans) '
              'else status for status, ans, new_ans in zip(self.status, '
              'self.ans, self.new_ans)]\n'
              '        self.status = [2 if any(letter != new_letter and l')

Fragment(uuid='597848fa-a61a-4aed-bade-45c5bb55e5ab',
         path='/tasks/crosswords.py',
         lineno=135,
         depth=2,
         type='function',
         name='step',
         text="        elif pos.startswith('v'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx::5] = list(word.upper())\n'
              '            idx += 5  # for later status update\n'
              '        else:\n'
              "            return 'Invalid! Position should be h1-h5 or "
              "v1-v5', 0, False, {}\n"
              '        \n'
              '        self.new_ans = self.get_ans(self.board)\n'
              '        # self.status = [2 if (status == 1 and ans != new_ans) '
              'else status for status, ans, new_ans in zip(self.status, '
              'self.ans, self.new_ans)]\n'
              '        self.status = [2 if any(letter != new_letter and l')

Fragment(uuid='dabba70f-02c7-430d-afeb-3ae63f947a56',
         path='/tasks/crosswords.py',
         lineno=136,
         depth=7,
         type='variable',
         name='idx',
         text='idx = int(pos[1:]) - 1')

Fragment(uuid='cef99fe5-33eb-4df7-89b6-c1737eb321a8',
         path='/tasks/crosswords.py',
         lineno=137,
         depth=7,
         type='variable',
         name='self.board[idx::5]',
         text='self.board[idx::5] = list(word.upper())')

Fragment(uuid='4cce722b-3602-414c-b226-d99ff4338f02',
         path='/tasks/crosswords.py',
         lineno=142,
         depth=4,
         type='variable',
         name='self.new_ans',
         text='self.new_ans = self.get_ans(self.board)')

Fragment(uuid='815c4e67-1054-4da9-9dc0-848066a26b79',
         path='/tasks/crosswords.py',
         lineno=144,
         depth=0,
         type='module',
         name='',
         text="tter != '_' for letter, new_letter in zip(ans, new_ans)) else "
              'status for status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]\n'
              '        self.status[idx] = 1\n'
              '        self.ans = self.new_ans\n'
              '        r_all = (self.board == self.board_gt)\n'
              '        r_lette')

Fragment(uuid='6ccec7af-19cb-433a-9561-735a5aa5c3e6',
         path='/tasks/crosswords.py',
         lineno=144,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text="etter != '_' for letter, new_letter in zip(ans, new_ans)) else "
              'status for status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]\n'
              '        self.status[idx] = 1\n'
              '        self.ans = self.new_ans\n'
              '        r_all = (self.board == self.board_gt)\n'
              '        r_lett')

Fragment(uuid='8aa13fbe-cd77-4dfe-b250-0a96274f92cc',
         path='/tasks/crosswords.py',
         lineno=144,
         depth=2,
         type='function',
         name='step',
         text="etter != '_' for letter, new_letter in zip(ans, new_ans)) else "
              'status for status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]\n'
              '        self.status[idx] = 1\n'
              '        self.ans = self.new_ans\n'
              '        r_all = (self.board == self.board_gt)\n'
              '        r_lett')

Fragment(uuid='aaaa47ea-a4d6-449c-9f96-36ab155e0159',
         path='/tasks/crosswords.py',
         lineno=144,
         depth=4,
         type='variable',
         name='self.status',
         text="self.status = [2 if any(letter != new_letter and letter != '_' "
              'for letter, new_letter in zip(ans, new_ans)) else status for '
              'status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]')

Fragment(uuid='14a6d834-dacd-4338-944f-367a43875748',
         path='/tasks/crosswords.py',
         lineno=145,
         depth=4,
         type='variable',
         name='self.status[idx]',
         text='self.status[idx] = 1')

Fragment(uuid='ab242d37-3b38-482a-a88e-6692dda7b4ed',
         path='/tasks/crosswords.py',
         lineno=146,
         depth=4,
         type='variable',
         name='self.ans',
         text='self.ans = self.new_ans')

Fragment(uuid='c355106f-8a6d-45ed-8e0c-fc563e5fbf3e',
         path='/tasks/crosswords.py',
         lineno=147,
         depth=4,
         type='variable',
         name='r_all',
         text='r_all = (self.board == self.board_gt)')

Fragment(uuid='912549ae-38a4-4dcc-a9c3-de53f9d7e848',
         path='/tasks/crosswords.py',
         lineno=148,
         depth=0,
         type='module',
         name='',
         text='r = sum(a == b for a, b in zip(self.board, self.board_gt)) / '
              '25\n'
              '        r_word = sum(a == b for a, b in zip(self.ans, '
              'self.ans_gt)) / 10\n'
              '        return self.render(), r_all, (r_all or self.steps >= '
              "20), {'r_letter': r_letter, 'r_word': r_word, 'r_game': r_all}\n")

Fragment(uuid='fd84f92a-3ae0-4981-a14f-f3e2ae9cc6e1',
         path='/tasks/crosswords.py',
         lineno=148,
         depth=0,
         type='class',
         name='MiniCrosswordsEnv',
         text='er = sum(a == b for a, b in zip(self.board, self.board_gt)) / '
              '25\n'
              '        r_word = sum(a == b for a, b in zip(self.ans, '
              'self.ans_gt)) / 10\n'
              '        return self.render(), r_all, (r_all or self.steps >= '
              "20), {'r_letter': r_letter, 'r_word': r_word, 'r_game': r_all}")

Fragment(uuid='4dc0953f-dcd8-4e6d-8d7f-9f31e8e55c13',
         path='/tasks/crosswords.py',
         lineno=148,
         depth=2,
         type='function',
         name='step',
         text='er = sum(a == b for a, b in zip(self.board, self.board_gt)) / '
              '25\n'
              '        r_word = sum(a == b for a, b in zip(self.ans, '
              'self.ans_gt)) / 10\n'
              '        return self.render(), r_all, (r_all or self.steps >= '
              "20), {'r_letter': r_letter, 'r_word': r_word, 'r_game': r_all}")

Fragment(uuid='b3cca1ef-9e48-4ffb-adc0-b5f9de7ab1ea',
         path='/tasks/crosswords.py',
         lineno=148,
         depth=4,
         type='variable',
         name='r_letter',
         text='r_letter = sum(a == b for a, b in zip(self.board, '
              'self.board_gt)) / 25')

Fragment(uuid='0a2f6f55-d30b-4a74-b152-7a1b9729cc8b',
         path='/tasks/crosswords.py',
         lineno=149,
         depth=4,
         type='variable',
         name='r_word',
         text='r_word = sum(a == b for a, b in zip(self.ans, self.ans_gt)) / 10')

Fragment(uuid='dd9d0b9e-8013-4ec4-8a47-2e47b3df4329',
         path='/tasks/crosswords.py',
         lineno=151,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class MiniCrosswordsTask(Task):\n'
              '    """\n'
              '    Input (x)   : Decription of a 5x5 mini crossword\n'
              '    Output (y)  : List of 10 words to fill in the crossword\n'
              '    Reward (r)  : word level and game level\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(uuid='8459b9eb-cfcb-4e2a-b54a-5d524230c0b9',
         path='/tasks/crosswords.py',
         lineno=153,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='class MiniCrosswordsTask(Task):\n'
              '    """\n'
              '    Input (x)   : Decription of a 5x5 mini crossword\n'
              '    Output (y)  : List of 10 words to fill in the crossword\n'
              '    Reward (r)  : word level and game level\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(uuid='8c71cfe5-96db-4550-8056-66b758a39e10',
         path='/tasks/crosswords.py',
         lineno=161,
         depth=0,
         type='module',
         name='',
         text='    def __init__(self, file):\n'
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              '        self.env = MiniCrosswordsEnv(file)  # use it as a '
              'stateless tool\n'
              '        self.xs = []\n'
              '        for idx in range(len(self.env)):\n'
              '            self.env.reset(idx)\n'
              '            self.xs.append(self.env.render_clues())\n'
              '        self.steps = 10  # TODO: variable steps??\n'
              '        self.cache_proposals = {}\n')

Fragment(uuid='4b63aa01-1619-4201-a3eb-43c35c538ccf',
         path='/tasks/crosswords.py',
         lineno=161,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    def __init__(self, file):\n'
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              '        self.env = MiniCrosswordsEnv(file)  # use it as a '
              'stateless tool\n'
              '        self.xs = []\n'
              '        for idx in range(len(self.env)):\n'
              '            self.env.reset(idx)\n'
              '            self.xs.append(self.env.render_clues())\n'
              '        self.steps = 10  # TODO: variable steps??\n'
              '        self.cache_proposals = {}\n')

Fragment(uuid='c0febc55-dc2b-4455-85b8-192ef1e513ee',
         path='/tasks/crosswords.py',
         lineno=161,
         depth=2,
         type='function',
         name='__init__',
         text='def __init__(self, file):\n'
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              '        self.env = MiniCrosswordsEnv(file)  # use it as a '
              'stateless tool\n'
              '        self.xs = []\n'
              '        for idx in range(len(self.env)):\n'
              '            self.env.reset(idx)\n'
              '            self.xs.append(self.env.render_clues())\n'
              '        self.steps = 10  # TODO: variable steps??\n'
              '        self.cache_proposals = {}')

Fragment(uuid='b44f37cf-9872-40a8-98a5-4576c91a5ddf',
         path='/tasks/crosswords.py',
         lineno=166,
         depth=4,
         type='variable',
         name='self.env',
         text='self.env = MiniCrosswordsEnv(file)')

Fragment(uuid='1fd20e38-d603-4691-8cfc-f1c353f3eb6b',
         path='/tasks/crosswords.py',
         lineno=167,
         depth=4,
         type='variable',
         name='self.xs',
         text='self.xs = []')

Fragment(uuid='91364b50-1c8e-4e4c-a666-1a2abe4fba1c',
         path='/tasks/crosswords.py',
         lineno=171,
         depth=4,
         type='variable',
         name='self.steps',
         text='self.steps = 10')

Fragment(uuid='dcf7633e-6295-418d-a88b-52e74edfc698',
         path='/tasks/crosswords.py',
         lineno=172,
         depth=4,
         type='variable',
         name='self.cache_proposals',
         text='self.cache_proposals = {}')

Fragment(uuid='1933ed61-6f6a-4cc5-9bde-22bc452e0339',
         path='/tasks/crosswords.py',
         lineno=173,
         depth=0,
         type='module',
         name='',
         text='\n    def __len__(self) -> int:\n        return len(self.env)\n')

Fragment(uuid='5fed5870-7f32-4268-a993-9e55c1cbe7d6',
         path='/tasks/crosswords.py',
         lineno=173,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='\n    def __len__(self) -> int:\n        return len(self.env)\n')

Fragment(uuid='16f2978e-0225-4720-983b-c2979daf728d',
         path='/tasks/crosswords.py',
         lineno=174,
         depth=2,
         type='function',
         name='__len__',
         text='def __len__(self) -> int:\n        return len(self.env)')

Fragment(uuid='c1952805-cb72-4255-982b-e42c9c7618c9',
         path='/tasks/crosswords.py',
         lineno=176,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        self.env.reset(idx)\n'
              '        return self.env.render_clues()\n'
              '    \n'
              '    # def test_output(self, idx: int, output: str):  # TODO: '
              'r_word for now\n'
              '    #     self.env.reset(idx)\n'
              "    #     info = {'r_word': 0}\n"
              "    #     for line in output.split('\\n'):\n"
              "    #         if line.startswith('h') or line.startswith('v'):\n"
              '    #             _, _, _, info = self.env.step(line)\n'
              "    #     return info['r_word']\n")

Fragment(uuid='2aaa349b-b887-4de2-b055-b71402da1fb9',
         path='/tasks/crosswords.py',
         lineno=176,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        self.env.reset(idx)\n'
              '        return self.env.render_clues()\n'
              '    \n'
              '    # def test_output(self, idx: int, output: str):  # TODO: '
              'r_word for now\n'
              '    #     self.env.reset(idx)\n'
              "    #     info = {'r_word': 0}\n"
              "    #     for line in output.split('\\n'):\n"
              "    #         if line.startswith('h') or line.startswith('v'):\n"
              '    #             _, _, _, info = self.env.step(line)\n'
              "    #     return info['r_word']\n")

Fragment(uuid='ff9ed7e4-fc5c-4b95-84ba-3e2315f5536c',
         path='/tasks/crosswords.py',
         lineno=177,
         depth=2,
         type='function',
         name='get_input',
         text='def get_input(self, idx: int) -> str:\n'
              '        self.env.reset(idx)\n'
              '        return self.env.render_clues()')

Fragment(uuid='d440f604-0c19-4878-aaa8-2730618609a0',
         path='/tasks/crosswords.py',
         lineno=188,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              '        self.env.reset(idx)\n'
              "        output = output.split('Output:\\n')[-1]\n"
              "        info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}\n"
              '        for i, line in '
              "enumerate(output.strip().split('\\n')[-5:], 1):\n"
              "            letters = line.split(' ')[:5]\n"
              "            word = ''.join(letters)\n"
              "            word = word + '_' * (5 - len(word))\n"
              "            action = f'h{i}. {word}'\n"
              '            # print(action)\n'
              '            _, _, _, info = self.env.step(action)\n'
              "        info['r'] = info['r_word']\n"
              '        return info\n')

Fragment(uuid='8679bf94-618c-405f-92c7-980181710516',
         path='/tasks/crosswords.py',
         lineno=188,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              '        self.env.reset(idx)\n'
              "        output = output.split('Output:\\n')[-1]\n"
              "        info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}\n"
              '        for i, line in '
              "enumerate(output.strip().split('\\n')[-5:], 1):\n"
              "            letters = line.split(' ')[:5]\n"
              "            word = ''.join(letters)\n"
              "            word = word + '_' * (5 - len(word))\n"
              "            action = f'h{i}. {word}'\n"
              '            # print(action)\n'
              '            _, _, _, info = self.env.step(action)\n'
              "        info['r'] = info['r_word']\n"
              '        return info\n')

Fragment(uuid='ecb909e4-d37f-44e4-8eab-c6d4f0f5872e',
         path='/tasks/crosswords.py',
         lineno=189,
         depth=2,
         type='function',
         name='test_output',
         text='def test_output(self, idx: int, output: str):\n'
              '        self.env.reset(idx)\n'
              "        output = output.split('Output:\\n')[-1]\n"
              "        info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}\n"
              '        for i, line in '
              "enumerate(output.strip().split('\\n')[-5:], 1):\n"
              "            letters = line.split(' ')[:5]\n"
              "            word = ''.join(letters)\n"
              "            word = word + '_' * (5 - len(word))\n"
              "            action = f'h{i}. {word}'\n"
              '            # print(action)\n'
              '            _, _, _, info = self.env.step(action)\n'
              "        info['r'] = info['r_word']\n"
              '        return info')

Fragment(uuid='9f34e4a2-3715-4e32-9318-f109a0e4c6df',
         path='/tasks/crosswords.py',
         lineno=191,
         depth=4,
         type='variable',
         name='output',
         text="output = output.split('Output:\\n')[-1]")

Fragment(uuid='d642970e-69f3-4f1f-93f4-6f8e2e8a0faa',
         path='/tasks/crosswords.py',
         lineno=192,
         depth=4,
         type='variable',
         name='info',
         text="info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}")

Fragment(uuid='d6478159-ea8a-4822-8a65-e6dd284fbda0',
         path='/tasks/crosswords.py',
         lineno=194,
         depth=6,
         type='variable',
         name='letters',
         text="letters = line.split(' ')[:5]")

Fragment(uuid='0dabc713-a3f3-4d64-b70d-e34b451ac737',
         path='/tasks/crosswords.py',
         lineno=195,
         depth=6,
         type='variable',
         name='word',
         text="word = ''.join(letters)")

Fragment(uuid='5c7ac1f8-e67d-4346-b946-8446c6ed5563',
         path='/tasks/crosswords.py',
         lineno=196,
         depth=6,
         type='variable',
         name='word',
         text="word = word + '_' * (5 - len(word))")

Fragment(uuid='892f7a81-6ca9-4e49-830e-0ae10830fdaf',
         path='/tasks/crosswords.py',
         lineno=197,
         depth=6,
         type='variable',
         name='action',
         text="action = f'h{i}. {word}'")

Fragment(uuid='75c844c1-3aaf-4c4b-a1e8-e57da66c2ebb',
         path='/tasks/crosswords.py',
         lineno=199,
         depth=6,
         type='variable',
         name='_,',
         text='_, _, _, info = self.env.step(action)')

Fragment(uuid='dbc81d57-d4f5-491a-bb7f-e2e65679256c',
         path='/tasks/crosswords.py',
         lineno=200,
         depth=4,
         type='variable',
         name="info['r']",
         text="info['r'] = info['r_word']")

Fragment(uuid='17dac5ca-1858-43ea-9017-fb2e13400828',
         path='/tasks/crosswords.py',
         lineno=202,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def set_status(self, x: str, y: str):\n'
              '        idx = self.xs.index(x)\n'
              '        self.test_output(idx, y)  # update self.env\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='034f05d8-89e6-4668-bc57-3c99be7678f0',
         path='/tasks/crosswords.py',
         lineno=202,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='\n'
              '    def set_status(self, x: str, y: str):\n'
              '        idx = self.xs.index(x)\n'
              '        self.test_output(idx, y)  # update self.env\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='d054b534-c3ca-4639-9053-837479d8996d',
         path='/tasks/crosswords.py',
         lineno=203,
         depth=2,
         type='function',
         name='set_status',
         text='def set_status(self, x: str, y: str):\n'
              '        idx = self.xs.index(x)\n'
              '        self.test_output(idx, y)')

Fragment(uuid='2d39c585-c658-463d-b9af-4f3c36a2f0da',
         path='/tasks/crosswords.py',
         lineno=204,
         depth=4,
         type='variable',
         name='idx',
         text='idx = self.xs.index(x)')

Fragment(uuid='7e810813-f987-45aa-aa4b-6f158158be54',
         path='/tasks/crosswords.py',
         lineno=208,
         depth=0,
         type='module',
         name='',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='d8e583a0-aa02-4109-b31b-d6327181f9ef',
         path='/tasks/crosswords.py',
         lineno=208,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='052dbd19-f31a-4fa9-8970-ff7d520ee4d5',
         path='/tasks/crosswords.py',
         lineno=208,
         depth=3,
         type='function',
         name='standard_prompt_wrap',
         text="def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y')

Fragment(uuid='638855e5-418d-4098-98c4-3ffa2a248171',
         path='/tasks/crosswords.py',
         lineno=212,
         depth=0,
         type='module',
         name='',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n')

Fragment(uuid='8f09c7dc-6d57-4960-8cc9-6ebec9a33b11',
         path='/tasks/crosswords.py',
         lineno=212,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n')

Fragment(uuid='b9e1382c-85f8-4a03-8249-769df61ff330',
         path='/tasks/crosswords.py',
         lineno=212,
         depth=3,
         type='function',
         name='cot_prompt_wrap',
         text="def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y')

Fragment(uuid='22bdf6d0-2a89-464d-80d2-3c1682ae4d14',
         path='/tasks/crosswords.py',
         lineno=214,
         depth=0,
         type='module',
         name='',
         text='    \n'
              "    def propose_prompt_wrap(self, x: str, y: str='') -> str:\n"
              '        self.set_status(x, y)\n'
              '        return propose_prompt.format(input=self.env.render())\n')

Fragment(uuid='46c832ab-68c8-4063-8b65-3969dc87050d',
         path='/tasks/crosswords.py',
         lineno=214,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    \n'
              "    def propose_prompt_wrap(self, x: str, y: str='') -> str:\n"
              '        self.set_status(x, y)\n'
              '        return propose_prompt.format(input=self.env.render())\n')

Fragment(uuid='7a2b7bff-b599-4c3b-b12a-f059738478bb',
         path='/tasks/crosswords.py',
         lineno=215,
         depth=2,
         type='function',
         name='propose_prompt_wrap',
         text="def propose_prompt_wrap(self, x: str, y: str='') -> str:\n"
              '        self.set_status(x, y)\n'
              '        return propose_prompt.format(input=self.env.render())')

Fragment(uuid='16c37452-9eea-46c7-abd1-78bd68c03653',
         path='/tasks/crosswords.py',
         lineno=218,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def propose_outputs_unwrap(self, x: str, y: str, outputs: '
              'list, n_max_propose: int) -> list:\n'
              "        confidence_to_value = {'certain': 1, 'high': 0.5, "
              "'medium': 0.2, 'low': 0.1}  # TODO: ad hoc\n"
              '        proposals_to_scores = {}\n')

Fragment(uuid='92fdc9c1-2618-4149-9b8f-df061a7d682f',
         path='/tasks/crosswords.py',
         lineno=218,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    \n'
              '    def propose_outputs_unwrap(self, x: str, y: str, outputs: '
              'list, n_max_propose: int) -> list:\n'
              "        confidence_to_value = {'certain': 1, 'high': 0.5, "
              "'medium': 0.2, 'low': 0.1}  # TODO: ad hoc\n"
              '        proposals_to_scores = {}\n')

Fragment(uuid='0f832a2d-5a63-462e-8ca7-8247955f0076',
         path='/tasks/crosswords.py',
         lineno=219,
         depth=2,
         type='function',
         name='propose_outputs_unwrap',
         text='def propose_outputs_unwrap(self, x: str, y: str, outputs: list, '
              'n_max_propose: int) -> list:\n'
              "        confidence_to_value = {'certain': 1, 'high': 0.5, "
              "'medium': 0.2, 'low': 0.1}  # TODO: ad hoc\n"
              '        proposals_to_scores = {}\n')

Fragment(uuid='b72f34ed-21ab-46ec-9e81-f565fedbd64e',
         path='/tasks/crosswords.py',
         lineno=220,
         depth=4,
         type='variable',
         name='confidence_to_value',
         text="confidence_to_value = {'certain': 1, 'high': 0.5, 'medium': "
              "0.2, 'low': 0.1}")

Fragment(uuid='2dfd4d83-27c0-4f9a-bc3f-b5d6d582839a',
         path='/tasks/crosswords.py',
         lineno=221,
         depth=4,
         type='variable',
         name='proposals_to_scores',
         text='proposals_to_scores = {}')

Fragment(uuid='44cfd0e8-cb78-42c8-924f-1689d3c10760',
         path='/tasks/crosswords.py',
         lineno=222,
         depth=0,
         type='module',
         name='',
         text='        for output in outputs:\n'
              "            lines = output.split('\\n')\n"
              "            pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n")

Fragment(uuid='a966257a-621e-4419-9d07-bed0189e38d4',
         path='/tasks/crosswords.py',
         lineno=222,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='        for output in outputs:\n'
              "            lines = output.split('\\n')\n"
              "            pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n")

Fragment(uuid='12405492-18ea-4525-b69f-580faca9807e',
         path='/tasks/crosswords.py',
         lineno=222,
         depth=2,
         type='function',
         name='propose_outputs_unwrap',
         text='        for output in outputs:\n'
              "            lines = output.split('\\n')\n"
              "            pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n")

Fragment(uuid='4e77fb91-1f43-4a06-b375-3e243f1f0d4d',
         path='/tasks/crosswords.py',
         lineno=223,
         depth=6,
         type='variable',
         name='lines',
         text="lines = output.split('\\n')")

Fragment(uuid='11b7dce6-fbdd-4fd5-96d0-57ad14af87c9',
         path='/tasks/crosswords.py',
         lineno=224,
         depth=6,
         type='variable',
         name='pattern',
         text="pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'")

Fragment(uuid='54bd38fe-e8af-4747-8d8c-9ca470ce3dcc',
         path='/tasks/crosswords.py',
         lineno=225,
         depth=0,
         type='module',
         name='',
         text='            for line in lines:\n'
              '                match = re.match(pattern, line)\n')

Fragment(uuid='0d708d36-dd18-4636-9c2f-2c770c344225',
         path='/tasks/crosswords.py',
         lineno=225,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='            for line in lines:\n'
              '                match = re.match(pattern, line)\n')

Fragment(uuid='47a630cb-99ce-416e-a58f-5d1327e24e0c',
         path='/tasks/crosswords.py',
         lineno=225,
         depth=2,
         type='function',
         name='propose_outputs_unwrap',
         text='            for line in lines:\n'
              '                match = re.match(pattern, line)\n')

Fragment(uuid='a07bea69-1fcb-48ec-a951-bf3f4cb071c7',
         path='/tasks/crosswords.py',
         lineno=226,
         depth=8,
         type='variable',
         name='match',
         text='match = re.match(pattern, line)')

Fragment(uuid='7e73f77f-ba7e-49ac-9e11-a184db92ba5b',
         path='/tasks/crosswords.py',
         lineno=227,
         depth=0,
         type='module',
         name='',
         text='                if match:\n'
              '                    parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              "                    proposal = parts[0].lower() + '. ' + "
              'parts[1].lower()\n'
              '                    score = confidence_to_value.get(parts[2], '
              '0)\n'
              '                    proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score\n'
              '        \n'
              '        proposals = sorted(proposals_to_scores.items(), '
              'key=lambda x: x[1], reverse=True)\n')

Fragment(uuid='322521e5-db3d-4d2d-abfd-354b79ae6853',
         path='/tasks/crosswords.py',
         lineno=227,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='                if match:\n'
              '                    parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              "                    proposal = parts[0].lower() + '. ' + "
              'parts[1].lower()\n'
              '                    score = confidence_to_value.get(parts[2], '
              '0)\n'
              '                    proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score\n'
              '        \n'
              '        proposals = sorted(proposals_to_scores.items(), '
              'key=lambda x: x[1], reverse=True)\n')

Fragment(uuid='f7fc801b-a42a-4484-ad75-7148d5ffb637',
         path='/tasks/crosswords.py',
         lineno=227,
         depth=2,
         type='function',
         name='propose_outputs_unwrap',
         text='                if match:\n'
              '                    parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              "                    proposal = parts[0].lower() + '. ' + "
              'parts[1].lower()\n'
              '                    score = confidence_to_value.get(parts[2], '
              '0)\n'
              '                    proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score\n'
              '        \n'
              '        proposals = sorted(proposals_to_scores.items(), '
              'key=lambda x: x[1], reverse=True)\n')

Fragment(uuid='5ce974da-15ab-424d-bb7c-0519e30083f3',
         path='/tasks/crosswords.py',
         lineno=228,
         depth=10,
         type='variable',
         name='parts',
         text='parts = [match.group(1), match.group(2), match.group(3)]')

Fragment(uuid='f3b1b750-d1cf-4138-8bb1-21ba875f0f43',
         path='/tasks/crosswords.py',
         lineno=229,
         depth=10,
         type='variable',
         name='proposal',
         text="proposal = parts[0].lower() + '. ' + parts[1].lower()")

Fragment(uuid='78ad9204-6ae1-46a6-8596-4ae0abb5ea5e',
         path='/tasks/crosswords.py',
         lineno=230,
         depth=10,
         type='variable',
         name='score',
         text='score = confidence_to_value.get(parts[2], 0)')

Fragment(uuid='5fa420ff-89ea-4b4a-ae65-78e2b12324f7',
         path='/tasks/crosswords.py',
         lineno=231,
         depth=10,
         type='variable',
         name='proposals_to_scores[proposal]',
         text='proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score')

Fragment(uuid='6fdc74e5-977d-46bc-8714-35ed54e87f36',
         path='/tasks/crosswords.py',
         lineno=233,
         depth=4,
         type='variable',
         name='proposals',
         text='proposals = sorted(proposals_to_scores.items(), key=lambda x: '
              'x[1], reverse=True)')

Fragment(uuid='114efdb8-4a91-47a9-b0a8-de5ea0fb2b64',
         path='/tasks/crosswords.py',
         lineno=234,
         depth=0,
         type='module',
         name='',
         text='        if n_max_propose != -1:\n'
              '            proposals = proposals[:n_max_propose]\n'
              "        proposals = [y + proposal[0] + '\\n' for proposal in "
              'proposals]\n'
              '        self.cache_proposals[(x, y, n_max_propose)] = '
              'proposals\n'
              '        return proposals\n')

Fragment(uuid='415ce50c-39a6-40d5-9d25-98087ab2b34c',
         path='/tasks/crosswords.py',
         lineno=234,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='        if n_max_propose != -1:\n'
              '            proposals = proposals[:n_max_propose]\n'
              "        proposals = [y + proposal[0] + '\\n' for proposal in "
              'proposals]\n'
              '        self.cache_proposals[(x, y, n_max_propose)] = '
              'proposals\n'
              '        return proposals\n')

Fragment(uuid='f6693cb1-28a4-4b1c-8cd2-d94858cf1593',
         path='/tasks/crosswords.py',
         lineno=234,
         depth=2,
         type='function',
         name='propose_outputs_unwrap',
         text='        if n_max_propose != -1:\n'
              '            proposals = proposals[:n_max_propose]\n'
              "        proposals = [y + proposal[0] + '\\n' for proposal in "
              'proposals]\n'
              '        self.cache_proposals[(x, y, n_max_propose)] = '
              'proposals\n'
              '        return proposals')

Fragment(uuid='b6f6244c-71c1-49ea-b3ab-638c8e0fbf0a',
         path='/tasks/crosswords.py',
         lineno=235,
         depth=6,
         type='variable',
         name='proposals',
         text='proposals = proposals[:n_max_propose]')

Fragment(uuid='8d75bf19-d7fd-4975-9df0-8495b0a468e7',
         path='/tasks/crosswords.py',
         lineno=236,
         depth=4,
         type='variable',
         name='proposals',
         text="proposals = [y + proposal[0] + '\\n' for proposal in proposals]")

Fragment(uuid='2f3597e5-62da-49f1-9689-e91a25aec63f',
         path='/tasks/crosswords.py',
         lineno=237,
         depth=4,
         type='variable',
         name='self.cache_proposals[(x,',
         text='self.cache_proposals[(x, y, n_max_propose)] = proposals')

Fragment(uuid='f2a7ff10-6f79-424f-a863-2aa0fc9d9d48',
         path='/tasks/crosswords.py',
         lineno=239,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def evaluate(self, x: str, y: str, n_evaluate_sample: int) '
              '-> int:\n'
              '        self.set_status(x, y)\n'
              '        assert n_evaluate_sample == 1 # TODO: ad hoc\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='8647d329-c0f5-487a-b892-275b3ae6f780',
         path='/tasks/crosswords.py',
         lineno=239,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='    \n'
              '    def evaluate(self, x: str, y: str, n_evaluate_sample: int) '
              '-> int:\n'
              '        self.set_status(x, y)\n'
              '        assert n_evaluate_sample == 1 # TODO: ad hoc\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='5630ec34-d7c2-41ec-a759-eab80d889677',
         path='/tasks/crosswords.py',
         lineno=240,
         depth=2,
         type='function',
         name='evaluate',
         text='def evaluate(self, x: str, y: str, n_evaluate_sample: int) -> '
              'int:\n'
              '        self.set_status(x, y)\n'
              '        assert n_evaluate_sample == 1 # TODO: ad hoc\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(uuid='e34a1e21-3103-4752-81ef-a5dac27d7c0b',
         path='/tasks/crosswords.py',
         lineno=243,
         depth=4,
         type='variable',
         name='count',
         text="count = {'sure': 0, 'maybe': 0, 'impossible': 0}")

Fragment(uuid='315f9d2f-15e5-424a-88f7-b55c1578fdb4',
         path='/tasks/crosswords.py',
         lineno=244,
         depth=0,
         type='module',
         name='',
         text='        for ans, data, status in zip(self.env.ans, '
              'self.env.data, self.env.status):\n'
              "            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n'
              '            res = gpt(prompt)[0]\n'
              '            print(line)\n'
              '            print(res)\n'
              '            print()\n'
              "            res = res.split('\\n')[-1].strip()\n"
              '            if res in count: count[res] += 1\n'
              '        print(count)\n'
              '        return count')

Fragment(uuid='cd8d9645-859b-4407-9fa4-289dc23cd000',
         path='/tasks/crosswords.py',
         lineno=244,
         depth=0,
         type='class',
         name='MiniCrosswordsTask',
         text='        for ans, data, status in zip(self.env.ans, '
              'self.env.data, self.env.status):\n'
              "            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n'
              '            res = gpt(prompt)[0]\n'
              '            print(line)\n'
              '            print(res)\n'
              '            print()\n'
              "            res = res.split('\\n')[-1].strip()\n"
              '            if res in count: count[res] += 1\n'
              '        print(count)\n'
              '        return count')

Fragment(uuid='71cb8aca-4730-4a2a-868a-6e1627928356',
         path='/tasks/crosswords.py',
         lineno=244,
         depth=2,
         type='function',
         name='evaluate',
         text='        for ans, data, status in zip(self.env.ans, '
              'self.env.data, self.env.status):\n'
              "            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n'
              '            res = gpt(prompt)[0]\n'
              '            print(line)\n'
              '            print(res)\n'
              '            print()\n'
              "            res = res.split('\\n')[-1].strip()\n"
              '            if res in count: count[res] += 1\n'
              '        print(count)\n'
              '        return count')

Fragment(uuid='094ceae6-848e-415f-8647-8cfeedc4ffcb',
         path='/tasks/crosswords.py',
         lineno=246,
         depth=6,
         type='variable',
         name='ans',
         text="ans = ' '.join(ans.lower())")

Fragment(uuid='00b03fdd-c1d9-4a14-bf0b-5ad8791ef3f4',
         path='/tasks/crosswords.py',
         lineno=247,
         depth=6,
         type='variable',
         name='line',
         text="line = f'{data}: {ans}'")

Fragment(uuid='171a2974-aa76-401b-87ea-98e00d98a622',
         path='/tasks/crosswords.py',
         lineno=248,
         depth=6,
         type='variable',
         name='prompt',
         text='prompt = value_prompt.format(input=line)')

Fragment(uuid='f07bda92-ce8f-4466-8ab7-0d79a207427b',
         path='/tasks/crosswords.py',
         lineno=249,
         depth=6,
         type='variable',
         name='res',
         text='res = gpt(prompt)[0]')

Fragment(uuid='69926e2e-f8b8-4cc5-927d-9aaf459d0ceb',
         path='/tasks/crosswords.py',
         lineno=253,
         depth=6,
         type='variable',
         name='res',
         text="res = res.split('\\n')[-1].strip()")

Fragment(uuid='f47730e2-4433-425b-8e0e-c78a620a33c8',
         path='/tasks/game24.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import re\n'
              'import os\n'
              'import sympy\n'
              'import pandas as pd\n'
              'from tasks.base import Task, DATA_PATH\n'
              'from prompts.game24 import * \n'
              '\n'
              '\n'
              'def get_current_numbers(y: str) -> str:\n'
              "    last_line = y.strip().split('\\n')[-1]\n"
              "    return last_line.split('left: ')[-1].split(')')[0]\n")

Fragment(uuid='eb183929-23d2-41ce-b79c-8cb406984132',
         path='/tasks/game24.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import re')

Fragment(uuid='31a73931-1040-455b-b502-71011914e991',
         path='/tasks/game24.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tasks/game24.py\n'
              '  Functions: get_current_numbers\n'
              '  Classes: Game24Task\n'
              '  Methods: __init__ __len__ cot_prompt_wrap get_input '
              'propose_prompt_wrap standard_prompt_wrap test_output '
              'value_outputs_unwrap value_prompt_wrap\n'
              '  Variables: ans current_numbers expression last_line numbers '
              'path problem_numbers prompt self.data self.steps self.stops '
              'self.value_cache value value_map value_names\n'
              '  Usages: DATA_PATH Exception Task answer base cot_prompt count '
              'data file findall float format game24 idx input int items join '
              'len list lower name output pandas prompts propose_prompt '
              'read_csv replace self simplify sorted split standard_prompt '
              'staticmethod steps stops str strip sum super sympy tasks '
              'value_cache value_last_step_prompt value_outputs value_prompt\n')

Fragment(uuid='3ece0413-7f7c-4d9e-b4cb-b8488658de62',
         path='/tasks/game24.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='e08f9735-ef91-43b5-8974-e4d79bca3d7c',
         path='/tasks/game24.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='import sympy')

Fragment(uuid='217eceb4-bee5-4f87-9903-b983e841da5d',
         path='/tasks/game24.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='import pandas as pd')

Fragment(uuid='84f97dfe-d004-4dd0-921a-f0425f0a0ccc',
         path='/tasks/game24.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='from tasks.base import Task, DATA_PATH')

Fragment(uuid='b18c8c95-5210-488e-9bf1-88c954543110',
         path='/tasks/game24.py',
         lineno=6,
         depth=0,
         type='dependency',
         name='',
         text='from prompts.game24 import *')

Fragment(uuid='2bc0573a-03cc-457a-946c-be5c3e09c3b6',
         path='/tasks/game24.py',
         lineno=9,
         depth=0,
         type='function',
         name='get_current_numbers',
         text='def get_current_numbers(y: str) -> str:\n'
              "    last_line = y.strip().split('\\n')[-1]\n"
              "    return last_line.split('left: ')[-1].split(')')[0]")

Fragment(uuid='9d4fc1f6-4caa-4fc3-9d48-d9e988c2cd27',
         path='/tasks/game24.py',
         lineno=10,
         depth=2,
         type='variable',
         name='last_line',
         text="last_line = y.strip().split('\\n')[-1]")

Fragment(uuid='1f4ce88d-2267-4f48-9c46-31b6febcac81',
         path='/tasks/game24.py',
         lineno=12,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class Game24Task(Task):\n'
              '    """\n'
              '    Input (x)   : a string of 4 numbers\n'
              '    Output (y)  : a trajectory of 3 steps to reach 24\n'
              '    Reward (r)  : 0 or 1, depending on whether the trajectory '
              'is ')

Fragment(uuid='bdd2c5a0-f403-427f-a149-b944e56518dd',
         path='/tasks/game24.py',
         lineno=14,
         depth=0,
         type='class',
         name='Game24Task',
         text='class Game24Task(Task):\n'
              '    """\n'
              '    Input (x)   : a string of 4 numbers\n'
              '    Output (y)  : a trajectory of 3 steps to reach 24\n'
              '    Reward (r)  : 0 or 1, depending on whether the trajectory '
              'is c')

Fragment(uuid='add10753-6b33-4ef4-9830-1265c5a65ac5',
         path='/tasks/game24.py',
         lineno=18,
         depth=0,
         type='module',
         name='',
         text='correct\n'
              '    Input Example: \n'
              '        1 2 3 4\n'
              '    Output Example: \n'
              '        1 + 2 = 3 (left: 3 3 4)\n'
              '        3 + 3 = 6 (left: 4 6)\n'
              '        6 * 4 = 24 (left: 24)\n'
              '        (1 + 2 + 3) * 4 = 24\n'
              '    """\n')

Fragment(uuid='e4308298-2ccc-4034-94a8-bc52d523a90b',
         path='/tasks/game24.py',
         lineno=18,
         depth=0,
         type='class',
         name='Game24Task',
         text='orrect\n'
              '    Input Example: \n'
              '        1 2 3 4\n'
              '    Output Example: \n'
              '        1 + 2 = 3 (left: 3 3 4)\n'
              '        3 + 3 = 6 (left: 4 6)\n'
              '        6 * 4 = 24 (left: 24)\n'
              '        (1 + 2 + 3) * 4 = 24\n'
              '    """\n')

Fragment(uuid='05613304-d927-44da-8170-753f229de827',
         path='/tasks/game24.py',
         lineno=27,
         depth=0,
         type='module',
         name='',
         text="    def __init__(self, file='24.csv'):\n"
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, '24', file)\n"
              "        self.data = list(pd.read_csv(path)['Puzzles'])\n"
              '        self.value_cache = {}\n'
              '        self.steps = 4\n'
              "        self.stops = ['\\n'] * 4\n")

Fragment(uuid='9f189ff3-2a02-4bf8-be2a-de99ff923e0e',
         path='/tasks/game24.py',
         lineno=27,
         depth=0,
         type='class',
         name='Game24Task',
         text="    def __init__(self, file='24.csv'):\n"
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, '24', file)\n"
              "        self.data = list(pd.read_csv(path)['Puzzles'])\n"
              '        self.value_cache = {}\n'
              '        self.steps = 4\n'
              "        self.stops = ['\\n'] * 4\n")

Fragment(uuid='4b5176ea-2ca3-4666-9588-60fe9bab1674',
         path='/tasks/game24.py',
         lineno=27,
         depth=2,
         type='function',
         name='__init__',
         text="def __init__(self, file='24.csv'):\n"
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, '24', file)\n"
              "        self.data = list(pd.read_csv(path)['Puzzles'])\n"
              '        self.value_cache = {}\n'
              '        self.steps = 4\n'
              "        self.stops = ['\\n'] * 4")

Fragment(uuid='ab21d814-8a06-4f34-beea-1df0186892ef',
         path='/tasks/game24.py',
         lineno=32,
         depth=4,
         type='variable',
         name='path',
         text="path = os.path.join(DATA_PATH, '24', file)")

Fragment(uuid='d51712dd-3dab-4e44-a828-cd2bb07f5c59',
         path='/tasks/game24.py',
         lineno=33,
         depth=4,
         type='variable',
         name='self.data',
         text="self.data = list(pd.read_csv(path)['Puzzles'])")

Fragment(uuid='d1b16c6a-cd70-4bf6-8666-7bdf9d3d6950',
         path='/tasks/game24.py',
         lineno=34,
         depth=4,
         type='variable',
         name='self.value_cache',
         text='self.value_cache = {}')

Fragment(uuid='7b9f6af0-9791-4047-81d1-08fc83572216',
         path='/tasks/game24.py',
         lineno=35,
         depth=4,
         type='variable',
         name='self.steps',
         text='self.steps = 4')

Fragment(uuid='7506c19b-c535-49bb-aba5-d5f0636f3102',
         path='/tasks/game24.py',
         lineno=36,
         depth=4,
         type='variable',
         name='self.stops',
         text="self.stops = ['\\n'] * 4")

Fragment(uuid='36076338-734b-4cb7-bf36-7d61d44bbb26',
         path='/tasks/game24.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(uuid='a8f1dc47-37d6-41b3-b123-d601b1f75aab',
         path='/tasks/game24.py',
         lineno=37,
         depth=0,
         type='class',
         name='Game24Task',
         text='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(uuid='75aaa665-179e-40a7-83f3-4ad3689fabaa',
         path='/tasks/game24.py',
         lineno=38,
         depth=2,
         type='function',
         name='__len__',
         text='def __len__(self) -> int:\n        return len(self.data)')

Fragment(uuid='4c86ecc8-a7f0-4499-889f-a5b53b14bcd8',
         path='/tasks/game24.py',
         lineno=40,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(uuid='366c2e0f-719f-4736-aa76-96b957e5a848',
         path='/tasks/game24.py',
         lineno=40,
         depth=0,
         type='class',
         name='Game24Task',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(uuid='1fc3cda3-cc75-4c97-aa1d-85ea90970623',
         path='/tasks/game24.py',
         lineno=41,
         depth=2,
         type='function',
         name='get_input',
         text='def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]')

Fragment(uuid='d4d1d869-142a-4e64-b0a4-acb252fcf171',
         path='/tasks/game24.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]\n"
              "        numbers = re.findall(r'\\d+', expression)\n"
              "        problem_numbers = re.findall(r'\\d+', self.data[idx])\n"
              '        if sorted(numbers) != sorted(problem_numbers):\n'
              "            return {'r': 0}\n"
              '        try:\n'
              '            # print(sympy.simplify(expression))\n'
              "            return {'r': int(sympy.simplify(expression) == "
              '24)}\n'
              '        except Exception as e:\n'
              '            # print(e)\n'
              "            return {'r': 0}\n"
              '            \n'
              '    @staticmethod\n')

Fragment(uuid='ba55acd9-870e-43f7-84ce-91589e9be9b5',
         path='/tasks/game24.py',
         lineno=43,
         depth=0,
         type='class',
         name='Game24Task',
         text='\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]\n"
              "        numbers = re.findall(r'\\d+', expression)\n"
              "        problem_numbers = re.findall(r'\\d+', self.data[idx])\n"
              '        if sorted(numbers) != sorted(problem_numbers):\n'
              "            return {'r': 0}\n"
              '        try:\n'
              '            # print(sympy.simplify(expression))\n'
              "            return {'r': int(sympy.simplify(expression) == "
              '24)}\n'
              '        except Exception as e:\n'
              '            # print(e)\n'
              "            return {'r': 0}\n"
              '            \n'
              '    @staticmethod\n')

Fragment(uuid='11a00ccc-1a47-4d55-8dc4-41fadeddc662',
         path='/tasks/game24.py',
         lineno=44,
         depth=2,
         type='function',
         name='test_output',
         text='def test_output(self, idx: int, output: str):\n'
              '        expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]\n"
              "        numbers = re.findall(r'\\d+', expression)\n"
              "        problem_numbers = re.findall(r'\\d+', self.data[idx])\n"
              '        if sorted(numbers) != sorted(problem_numbers):\n'
              "            return {'r': 0}\n"
              '        try:\n'
              '            # print(sympy.simplify(expression))\n'
              "            return {'r': int(sympy.simplify(expression) == "
              '24)}\n'
              '        except Exception as e:\n'
              '            # print(e)\n'
              "            return {'r': 0}")

Fragment(uuid='743bbf19-d880-454f-a743-e072ecbcf3a1',
         path='/tasks/game24.py',
         lineno=45,
         depth=4,
         type='variable',
         name='expression',
         text='expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]")

Fragment(uuid='4f2d1c17-7c52-40a2-912a-2812e2040c70',
         path='/tasks/game24.py',
         lineno=46,
         depth=4,
         type='variable',
         name='numbers',
         text="numbers = re.findall(r'\\d+', expression)")

Fragment(uuid='668a36b6-a708-4444-9ebc-564dc57d57ff',
         path='/tasks/game24.py',
         lineno=47,
         depth=4,
         type='variable',
         name='problem_numbers',
         text="problem_numbers = re.findall(r'\\d+', self.data[idx])")

Fragment(uuid='a0ab5694-87e2-414a-9c1a-c11627fc9955',
         path='/tasks/game24.py',
         lineno=58,
         depth=0,
         type='module',
         name='',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='f2af78a8-e348-45e0-a54f-70f90790ab7a',
         path='/tasks/game24.py',
         lineno=58,
         depth=0,
         type='class',
         name='Game24Task',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='1cdc1dee-d39b-48bb-b236-6315c370b3ff',
         path='/tasks/game24.py',
         lineno=58,
         depth=3,
         type='function',
         name='standard_prompt_wrap',
         text="def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y')

Fragment(uuid='5f58a708-a5c7-4191-97b3-2f767b41cf0f',
         path='/tasks/game24.py',
         lineno=62,
         depth=0,
         type='module',
         name='',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='fdd724c8-9fc9-47e2-b3c3-5f2ad1eb2836',
         path='/tasks/game24.py',
         lineno=62,
         depth=0,
         type='class',
         name='Game24Task',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='e15f9599-87a6-4007-9e7b-fa009e215af5',
         path='/tasks/game24.py',
         lineno=62,
         depth=3,
         type='function',
         name='cot_prompt_wrap',
         text="def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y')

Fragment(uuid='c0f878d0-0f14-46ea-bd21-70b10009d332',
         path='/tasks/game24.py',
         lineno=66,
         depth=0,
         type='module',
         name='',
         text="    def propose_prompt_wrap(x: str, y: str='') -> str:\n"
              '        current_numbers = get_current_numbers(y if y else x)\n'
              "        if current_numbers == '24':\n"
              "            prompt = cot_prompt.format(input=x) + 'Steps:' + y\n"
              '            # print([prompt])\n'
              '        else:\n'
              '            prompt = '
              'propose_prompt.format(input=current_numbers)\n'
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='348d8f7f-6082-49e6-b735-bb7fd9e21db4',
         path='/tasks/game24.py',
         lineno=66,
         depth=0,
         type='class',
         name='Game24Task',
         text="    def propose_prompt_wrap(x: str, y: str='') -> str:\n"
              '        current_numbers = get_current_numbers(y if y else x)\n'
              "        if current_numbers == '24':\n"
              "            prompt = cot_prompt.format(input=x) + 'Steps:' + y\n"
              '            # print([prompt])\n'
              '        else:\n'
              '            prompt = '
              'propose_prompt.format(input=current_numbers)\n'
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='d1a71ca0-06d3-48f5-ac92-651a586e9e4a',
         path='/tasks/game24.py',
         lineno=66,
         depth=3,
         type='function',
         name='propose_prompt_wrap',
         text="def propose_prompt_wrap(x: str, y: str='') -> str:\n"
              '        current_numbers = get_current_numbers(y if y else x)\n'
              "        if current_numbers == '24':\n"
              "            prompt = cot_prompt.format(input=x) + 'Steps:' + y\n"
              '            # print([prompt])\n'
              '        else:\n'
              '            prompt = '
              'propose_prompt.format(input=current_numbers)\n'
              '        return prompt')

Fragment(uuid='d71a54c7-9627-4411-a5f4-8c600c2213cd',
         path='/tasks/game24.py',
         lineno=67,
         depth=5,
         type='variable',
         name='current_numbers',
         text='current_numbers = get_current_numbers(y if y else x)')

Fragment(uuid='3219112e-2cc9-4e79-807e-73b05b8104ec',
         path='/tasks/game24.py',
         lineno=69,
         depth=7,
         type='variable',
         name='prompt',
         text="prompt = cot_prompt.format(input=x) + 'Steps:' + y")

Fragment(uuid='549b52b3-9498-49d7-872c-006c767542b6',
         path='/tasks/game24.py',
         lineno=72,
         depth=8,
         type='variable',
         name='prompt',
         text='prompt = propose_prompt.format(input=current_numbers)')

Fragment(uuid='600d90f3-ee2b-4899-9720-84d1fbbd6330',
         path='/tasks/game24.py',
         lineno=76,
         depth=0,
         type='module',
         name='',
         text='    def value_prompt_wrap(x: str, y: str) -> str:\n'
              "        last_line = y.strip().split('\\n')[-1]\n"
              "        if 'left: ' not in last_line:  # last step\n"
              "            ans = last_line.lower().replace('answer: ', '')\n"
              '            # print([value_last_step_prompt.format(input=x, '
              'answer=ans)])\n'
              '            return value_last_step_prompt.format(input=x, '
              'answer=ans)\n'
              '        current_numbers = get_current_numbers(y)\n'
              '        return value_prompt.format(input=current_numbers)\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='53a955f1-c53d-4506-af4d-724e59879fc9',
         path='/tasks/game24.py',
         lineno=76,
         depth=0,
         type='class',
         name='Game24Task',
         text='    def value_prompt_wrap(x: str, y: str) -> str:\n'
              "        last_line = y.strip().split('\\n')[-1]\n"
              "        if 'left: ' not in last_line:  # last step\n"
              "            ans = last_line.lower().replace('answer: ', '')\n"
              '            # print([value_last_step_prompt.format(input=x, '
              'answer=ans)])\n'
              '            return value_last_step_prompt.format(input=x, '
              'answer=ans)\n'
              '        current_numbers = get_current_numbers(y)\n'
              '        return value_prompt.format(input=current_numbers)\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='51e5077e-d512-4064-bb8a-34a9765431e6',
         path='/tasks/game24.py',
         lineno=76,
         depth=3,
         type='function',
         name='value_prompt_wrap',
         text='def value_prompt_wrap(x: str, y: str) -> str:\n'
              "        last_line = y.strip().split('\\n')[-1]\n"
              "        if 'left: ' not in last_line:  # last step\n"
              "            ans = last_line.lower().replace('answer: ', '')\n"
              '            # print([value_last_step_prompt.format(input=x, '
              'answer=ans)])\n'
              '            return value_last_step_prompt.format(input=x, '
              'answer=ans)\n'
              '        current_numbers = get_current_numbers(y)\n'
              '        return value_prompt.format(input=current_numbers)')

Fragment(uuid='77abd8d0-822f-4fd9-807a-6f0faf87dd31',
         path='/tasks/game24.py',
         lineno=77,
         depth=5,
         type='variable',
         name='last_line',
         text="last_line = y.strip().split('\\n')[-1]")

Fragment(uuid='33bad24c-36ac-47c3-9923-1177eb2adddc',
         path='/tasks/game24.py',
         lineno=79,
         depth=7,
         type='variable',
         name='ans',
         text="ans = last_line.lower().replace('answer: ', '')")

Fragment(uuid='2980bba9-05c5-4f06-b5b9-e4beefafb995',
         path='/tasks/game24.py',
         lineno=82,
         depth=5,
         type='variable',
         name='current_numbers',
         text='current_numbers = get_current_numbers(y)')

Fragment(uuid='4d86e026-bf41-45d9-8555-59befa1eadf3',
         path='/tasks/game24.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='    def value_outputs_unwrap(x: str, y: str, value_outputs: '
              'list) -> float:\n'
              "        if len(y.strip().split('\\n')) == 4 and 'answer' not in "
              'y.lower():\n'
              '            return 0\n'
              "        value_names = [_.split('\\n')[-1] for _ in "
              'value_outputs]\n'
              "        value_map = {'impossible': 0.001, 'likely': 1, 'sure': "
              '20}  # TODO: ad hoc\n'
              '        value = sum(value * value_names.count(name) for name, '
              'value in value_map.items())\n'
              '        return value')

Fragment(uuid='e7da121f-1d71-49ef-8055-f7400b4f8905',
         path='/tasks/game24.py',
         lineno=86,
         depth=0,
         type='class',
         name='Game24Task',
         text='    def value_outputs_unwrap(x: str, y: str, value_outputs: '
              'list) -> float:\n'
              "        if len(y.strip().split('\\n')) == 4 and 'answer' not in "
              'y.lower():\n'
              '            return 0\n'
              "        value_names = [_.split('\\n')[-1] for _ in "
              'value_outputs]\n'
              "        value_map = {'impossible': 0.001, 'likely': 1, 'sure': "
              '20}  # TODO: ad hoc\n'
              '        value = sum(value * value_names.count(name) for name, '
              'value in value_map.items())\n'
              '        return value')

Fragment(uuid='f1d6d512-44fe-4f69-8ef0-fef6ea74cfeb',
         path='/tasks/game24.py',
         lineno=86,
         depth=3,
         type='function',
         name='value_outputs_unwrap',
         text='def value_outputs_unwrap(x: str, y: str, value_outputs: list) '
              '-> float:\n'
              "        if len(y.strip().split('\\n')) == 4 and 'answer' not in "
              'y.lower():\n'
              '            return 0\n'
              "        value_names = [_.split('\\n')[-1] for _ in "
              'value_outputs]\n'
              "        value_map = {'impossible': 0.001, 'likely': 1, 'sure': "
              '20}  # TODO: ad hoc\n'
              '        value = sum(value * value_names.count(name) for name, '
              'value in value_map.items())\n'
              '        return value')

Fragment(uuid='c41e7465-345b-4266-aebc-58b2e8b0a7cd',
         path='/tasks/game24.py',
         lineno=89,
         depth=5,
         type='variable',
         name='value_names',
         text="value_names = [_.split('\\n')[-1] for _ in value_outputs]")

Fragment(uuid='44198c03-272d-4c52-be4d-c9c6a06723a6',
         path='/tasks/game24.py',
         lineno=90,
         depth=5,
         type='variable',
         name='value_map',
         text="value_map = {'impossible': 0.001, 'likely': 1, 'sure': 20}")

Fragment(uuid='2faebf96-dc2c-4ab7-b34d-e25b471c9523',
         path='/tasks/game24.py',
         lineno=91,
         depth=5,
         type='variable',
         name='value',
         text='value = sum(value * value_names.count(name) for name, value in '
              'value_map.items())')

Fragment(uuid='75c7100d-5abf-4628-8bd2-2c1f9940022e',
         path='/tasks/text.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import os\n'
              'import re\n'
              'from tasks.base import Task, DATA_PATH\n'
              'from prompts.text import *\n'
              'from models import gpt\n')

Fragment(uuid='45dda192-6b18-4ca8-ab6e-ea4dd9625925',
         path='/tasks/text.py',
         lineno=1,
         depth=0,
         type='dependency',
         name='',
         text='import os')

Fragment(uuid='30105958-e2f7-4ccb-80e1-cea6452a009e',
         path='/tasks/text.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tasks/text.py\n'
              '  Classes: TextTask\n'
              '  Methods: __init__ __len__ compare_output_unwrap '
              'compare_prompt_wrap cot_prompt_wrap get_input '
              'standard_prompt_wrap test_output vote_outputs_unwrap '
              'vote_prompt_wrap\n'
              '  Variables: info match output path pattern prompt score '
              'score_outputs scores self.data self.steps self.stops vote '
              'vote_results\n'
              '  Usages: DATA_PATH DOTALL Task append base compare_output '
              'compare_prompt cot_prompt data enumerate file format gpt groups '
              'idx input int join len list model models n_candidates open '
              'print prompts range readlines score_output score_prompt self '
              'split standard_prompt staticmethod steps stops str sum super '
              'tasks text vote_output vote_outputs vote_prompt\n')

Fragment(uuid='0d513d16-ff1c-45ac-a3f0-af3ac44fc032',
         path='/tasks/text.py',
         lineno=2,
         depth=0,
         type='dependency',
         name='',
         text='import re')

Fragment(uuid='8b4e5fd9-675a-4f01-9544-f4eac4ef3040',
         path='/tasks/text.py',
         lineno=3,
         depth=0,
         type='dependency',
         name='',
         text='from tasks.base import Task, DATA_PATH')

Fragment(uuid='4b2eddc3-63cc-4033-8672-683e27cea0ac',
         path='/tasks/text.py',
         lineno=4,
         depth=0,
         type='dependency',
         name='',
         text='from prompts.text import *')

Fragment(uuid='bc590ecd-ec48-4d7f-988f-b694d7b96bf2',
         path='/tasks/text.py',
         lineno=5,
         depth=0,
         type='dependency',
         name='',
         text='from models import gpt')

Fragment(uuid='ba4cea27-8386-467f-a171-0f4163beed4c',
         path='/tasks/text.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class TextTask(Task):\n'
              '    """\n'
              '    Input (x)   : a text instruction\n'
              '    Output (y)  : a text generation\n'
              '    Reward (r)  : # TODO\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(uuid='3af5b54e-5317-44b8-a63d-ce7dbbcda4cf',
         path='/tasks/text.py',
         lineno=8,
         depth=0,
         type='class',
         name='TextTask',
         text='class TextTask(Task):\n'
              '    """\n'
              '    Input (x)   : a text instruction\n'
              '    Output (y)  : a text generation\n'
              '    Reward (r)  : # TODO\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(uuid='9a5f6f99-a056-4640-bda2-32f74411420e',
         path='/tasks/text.py',
         lineno=16,
         depth=0,
         type='module',
         name='',
         text="    def __init__(self, file='data_100_random_text.txt'):\n"
              '        """\n'
              '        file: a text file, each line is some sentences\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, 'text', file)\n"
              '        self.data = open(path).readlines()\n'
              '        self.steps = 2\n'
              "        self.stops = ['\\nPassage:\\n', None]\n")

Fragment(uuid='dfd90f2c-f137-4d3c-b17a-6272973f2eac',
         path='/tasks/text.py',
         lineno=16,
         depth=0,
         type='class',
         name='TextTask',
         text="    def __init__(self, file='data_100_random_text.txt'):\n"
              '        """\n'
              '        file: a text file, each line is some sentences\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, 'text', file)\n"
              '        self.data = open(path).readlines()\n'
              '        self.steps = 2\n'
              "        self.stops = ['\\nPassage:\\n', None]\n")

Fragment(uuid='3143d705-b85d-4cf3-a566-fa5054357781',
         path='/tasks/text.py',
         lineno=16,
         depth=2,
         type='function',
         name='__init__',
         text="def __init__(self, file='data_100_random_text.txt'):\n"
              '        """\n'
              '        file: a text file, each line is some sentences\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, 'text', file)\n"
              '        self.data = open(path).readlines()\n'
              '        self.steps = 2\n'
              "        self.stops = ['\\nPassage:\\n', None]")

Fragment(uuid='1de0803f-e25a-4707-9f12-5530a4b2599d',
         path='/tasks/text.py',
         lineno=21,
         depth=4,
         type='variable',
         name='path',
         text="path = os.path.join(DATA_PATH, 'text', file)")

Fragment(uuid='e181944b-b3ef-46df-873a-c345aa63b1b7',
         path='/tasks/text.py',
         lineno=22,
         depth=4,
         type='variable',
         name='self.data',
         text='self.data = open(path).readlines()')

Fragment(uuid='a6edc939-2dac-4ff2-b2b8-7a4306e4248a',
         path='/tasks/text.py',
         lineno=23,
         depth=4,
         type='variable',
         name='self.steps',
         text='self.steps = 2')

Fragment(uuid='fcb5ec29-6c4f-4fc3-9d1f-5b63c2331ec9',
         path='/tasks/text.py',
         lineno=24,
         depth=4,
         type='variable',
         name='self.stops',
         text="self.stops = ['\\nPassage:\\n', None]")

Fragment(uuid='2c624a77-e74a-4265-954b-9bb31cfa1602',
         path='/tasks/text.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(uuid='367b7696-0403-4dfb-832f-74ac907cfb9c',
         path='/tasks/text.py',
         lineno=25,
         depth=0,
         type='class',
         name='TextTask',
         text='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(uuid='a36140e7-1a57-446c-9e35-bfbc380a3ae4',
         path='/tasks/text.py',
         lineno=26,
         depth=2,
         type='function',
         name='__len__',
         text='def __len__(self) -> int:\n        return len(self.data)')

Fragment(uuid='3ac2e29a-f616-40c8-9225-1223b100925f',
         path='/tasks/text.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(uuid='e0df90a6-c9d2-49a9-909a-8d0f5930a66c',
         path='/tasks/text.py',
         lineno=28,
         depth=0,
         type='class',
         name='TextTask',
         text='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(uuid='b92165aa-4302-4c90-b013-1f1f038e8adf',
         path='/tasks/text.py',
         lineno=29,
         depth=2,
         type='function',
         name='get_input',
         text='def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]')

Fragment(uuid='6ffb25a8-3251-4db7-8d7f-24fb13d91592',
         path='/tasks/text.py',
         lineno=31,
         depth=0,
         type='module',
         name='',
         text='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              "        output = output.split('Passage:\\n')[-1]\n"
              '        prompt = score_prompt + output\n'
              "        score_outputs = gpt(prompt, n=5, model='gpt-4')\n"
              '        scores = []\n')

Fragment(uuid='4f1a36ad-f3d6-460b-827e-5d90e05dd84a',
         path='/tasks/text.py',
         lineno=31,
         depth=0,
         type='class',
         name='TextTask',
         text='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              "        output = output.split('Passage:\\n')[-1]\n"
              '        prompt = score_prompt + output\n'
              "        score_outputs = gpt(prompt, n=5, model='gpt-4')\n"
              '        scores = []\n')

Fragment(uuid='333e45fa-5d87-416f-97f2-2a180c3772d4',
         path='/tasks/text.py',
         lineno=32,
         depth=2,
         type='function',
         name='test_output',
         text='def test_output(self, idx: int, output: str):\n'
              "        output = output.split('Passage:\\n')[-1]\n"
              '        prompt = score_prompt + output\n'
              "        score_outputs = gpt(prompt, n=5, model='gpt-4')\n"
              '        scores = []\n')

Fragment(uuid='b0ecdb15-6145-427f-8366-6fedff509522',
         path='/tasks/text.py',
         lineno=33,
         depth=4,
         type='variable',
         name='output',
         text="output = output.split('Passage:\\n')[-1]")

Fragment(uuid='0c3680aa-67fa-4050-aa9a-3bb16b686cbf',
         path='/tasks/text.py',
         lineno=34,
         depth=4,
         type='variable',
         name='prompt',
         text='prompt = score_prompt + output')

Fragment(uuid='5c273a01-bfdb-41f5-a0e5-9fe4bec8bca9',
         path='/tasks/text.py',
         lineno=35,
         depth=4,
         type='variable',
         name='score_outputs',
         text="score_outputs = gpt(prompt, n=5, model='gpt-4')")

Fragment(uuid='825748a6-9fbc-465f-a948-8d7e753dce9c',
         path='/tasks/text.py',
         lineno=36,
         depth=4,
         type='variable',
         name='scores',
         text='scores = []')

Fragment(uuid='b180b612-bdb6-4e58-be02-bde998572541',
         path='/tasks/text.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='        for score_output in score_outputs:\n'
              '            # print(score_output)\n'
              '            pattern = r".*coherency score is (\\d+).*"\n'
              '            match = re.match(pattern, score_output, re.DOTALL)\n'
              '            if match:\n'
              '                score = int(match.groups()[0])\n'
              '                scores.append(score)\n'
              '            else:\n'
              "                print(f'------------------score no match: "
              "{[score_output]}')\n"
              '        print(scores)\n'
              "        # print('------------')\n"
              "        info = {'rs': scores, 'r': sum(scores) / len(scores) if "
              'scores else 0}\n'
              '        return info\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='2602455e-f878-471e-84cb-6631f49b3327',
         path='/tasks/text.py',
         lineno=37,
         depth=0,
         type='class',
         name='TextTask',
         text='        for score_output in score_outputs:\n'
              '            # print(score_output)\n'
              '            pattern = r".*coherency score is (\\d+).*"\n'
              '            match = re.match(pattern, score_output, re.DOTALL)\n'
              '            if match:\n'
              '                score = int(match.groups()[0])\n'
              '                scores.append(score)\n'
              '            else:\n'
              "                print(f'------------------score no match: "
              "{[score_output]}')\n"
              '        print(scores)\n'
              "        # print('------------')\n"
              "        info = {'rs': scores, 'r': sum(scores) / len(scores) if "
              'scores else 0}\n'
              '        return info\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='19c21127-725e-4321-a814-6328b6c505a7',
         path='/tasks/text.py',
         lineno=37,
         depth=2,
         type='function',
         name='test_output',
         text='        for score_output in score_outputs:\n'
              '            # print(score_output)\n'
              '            pattern = r".*coherency score is (\\d+).*"\n'
              '            match = re.match(pattern, score_output, re.DOTALL)\n'
              '            if match:\n'
              '                score = int(match.groups()[0])\n'
              '                scores.append(score)\n'
              '            else:\n'
              "                print(f'------------------score no match: "
              "{[score_output]}')\n"
              '        print(scores)\n'
              "        # print('------------')\n"
              "        info = {'rs': scores, 'r': sum(scores) / len(scores) if "
              'scores else 0}\n'
              '        return info')

Fragment(uuid='35062b5d-6ab9-41bd-98b5-83ca342014d6',
         path='/tasks/text.py',
         lineno=39,
         depth=6,
         type='variable',
         name='pattern',
         text='pattern = r".*coherency score is (\\d+).*"')

Fragment(uuid='1d636192-08e2-4de7-92a5-c6751f8891c5',
         path='/tasks/text.py',
         lineno=40,
         depth=6,
         type='variable',
         name='match',
         text='match = re.match(pattern, score_output, re.DOTALL)')

Fragment(uuid='8a621899-8de3-4a4e-ac13-e056fb80d4d3',
         path='/tasks/text.py',
         lineno=42,
         depth=8,
         type='variable',
         name='score',
         text='score = int(match.groups()[0])')

Fragment(uuid='115d04af-30d8-4877-a17f-366df02250b4',
         path='/tasks/text.py',
         lineno=48,
         depth=4,
         type='variable',
         name='info',
         text="info = {'rs': scores, 'r': sum(scores) / len(scores) if scores "
              'else 0}')

Fragment(uuid='871f5ded-fa05-433b-bad0-4125543b45b4',
         path='/tasks/text.py',
         lineno=52,
         depth=0,
         type='module',
         name='',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='4d29ce92-2266-45c2-9ac0-5bae562e6047',
         path='/tasks/text.py',
         lineno=52,
         depth=0,
         type='class',
         name='TextTask',
         text="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='284da072-b26b-478e-b1fd-7c9666278abb',
         path='/tasks/text.py',
         lineno=52,
         depth=3,
         type='function',
         name='standard_prompt_wrap',
         text="def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y')

Fragment(uuid='fc60e3d9-1d9b-46a6-86b5-8efe8fc9f96b',
         path='/tasks/text.py',
         lineno=56,
         depth=0,
         type='module',
         name='',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='90353603-91ae-4210-812d-1aaed713c7d6',
         path='/tasks/text.py',
         lineno=56,
         depth=0,
         type='class',
         name='TextTask',
         text="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='9f71ce7a-90cc-4279-b34b-ea3639a757b3',
         path='/tasks/text.py',
         lineno=56,
         depth=3,
         type='function',
         name='cot_prompt_wrap',
         text="def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y')

Fragment(uuid='3106d54f-b476-422f-a8c4-c1321b7d690a',
         path='/tasks/text.py',
         lineno=60,
         depth=0,
         type='module',
         name='',
         text='    def vote_prompt_wrap(x: str, ys: list) -> str:\n'
              '        prompt = vote_prompt\n'
              '        for i, y in enumerate(ys, 1):\n'
              "            # y = y.replace('Plan:\\n', '')\n"
              '            # TODO: truncate the plan part?\n'
              "            prompt += f'Choice {i}:\\n{y}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='c892146b-a3fe-44fb-bb99-f700ee5f8483',
         path='/tasks/text.py',
         lineno=60,
         depth=0,
         type='class',
         name='TextTask',
         text='    def vote_prompt_wrap(x: str, ys: list) -> str:\n'
              '        prompt = vote_prompt\n'
              '        for i, y in enumerate(ys, 1):\n'
              "            # y = y.replace('Plan:\\n', '')\n"
              '            # TODO: truncate the plan part?\n'
              "            prompt += f'Choice {i}:\\n{y}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='df864aa0-993b-4add-bfb5-9c78e12a5d51',
         path='/tasks/text.py',
         lineno=60,
         depth=3,
         type='function',
         name='vote_prompt_wrap',
         text='def vote_prompt_wrap(x: str, ys: list) -> str:\n'
              '        prompt = vote_prompt\n'
              '        for i, y in enumerate(ys, 1):\n'
              "            # y = y.replace('Plan:\\n', '')\n"
              '            # TODO: truncate the plan part?\n'
              "            prompt += f'Choice {i}:\\n{y}\\n'\n"
              '        return prompt')

Fragment(uuid='95d296c1-ffb2-416e-ad82-27c1d52fdbce',
         path='/tasks/text.py',
         lineno=61,
         depth=5,
         type='variable',
         name='prompt',
         text='prompt = vote_prompt')

Fragment(uuid='c3f88985-23b3-43fa-8e0d-45f958c6bf6e',
         path='/tasks/text.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='    def vote_outputs_unwrap(vote_outputs: list, n_candidates: '
              'int) -> list:\n'
              '        vote_results = [0] * n_candidates\n'
              '        for vote_output in vote_outputs:\n'
              '            pattern = r".*best choice is .*(\\d+).*"\n'
              '            match = re.match(pattern, vote_output, re.DOTALL)\n'
              '            if match:\n'
              '                vote = int(match.groups()[0]) - 1\n'
              '                if vote in range(n_candidates):\n'
              '                    vote_results[vote] += 1\n'
              '            else:\n'
              "                print(f'vote no match: {[vote_output]}')\n"
              '        return vote_results\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='8999859d-4377-4055-82cb-8bdb56685407',
         path='/tasks/text.py',
         lineno=69,
         depth=0,
         type='class',
         name='TextTask',
         text='    def vote_outputs_unwrap(vote_outputs: list, n_candidates: '
              'int) -> list:\n'
              '        vote_results = [0] * n_candidates\n'
              '        for vote_output in vote_outputs:\n'
              '            pattern = r".*best choice is .*(\\d+).*"\n'
              '            match = re.match(pattern, vote_output, re.DOTALL)\n'
              '            if match:\n'
              '                vote = int(match.groups()[0]) - 1\n'
              '                if vote in range(n_candidates):\n'
              '                    vote_results[vote] += 1\n'
              '            else:\n'
              "                print(f'vote no match: {[vote_output]}')\n"
              '        return vote_results\n'
              '\n'
              '    @staticmethod\n')

Fragment(uuid='81388b5a-100a-4982-9992-3e297741c79f',
         path='/tasks/text.py',
         lineno=69,
         depth=3,
         type='function',
         name='vote_outputs_unwrap',
         text='def vote_outputs_unwrap(vote_outputs: list, n_candidates: int) '
              '-> list:\n'
              '        vote_results = [0] * n_candidates\n'
              '        for vote_output in vote_outputs:\n'
              '            pattern = r".*best choice is .*(\\d+).*"\n'
              '            match = re.match(pattern, vote_output, re.DOTALL)\n'
              '            if match:\n'
              '                vote = int(match.groups()[0]) - 1\n'
              '                if vote in range(n_candidates):\n'
              '                    vote_results[vote] += 1\n'
              '            else:\n'
              "                print(f'vote no match: {[vote_output]}')\n"
              '        return vote_results')

Fragment(uuid='a6c5fb07-9ad4-4790-b747-e0fefc067807',
         path='/tasks/text.py',
         lineno=70,
         depth=5,
         type='variable',
         name='vote_results',
         text='vote_results = [0] * n_candidates')

Fragment(uuid='18247b95-815c-4390-bb93-67f17819ccc7',
         path='/tasks/text.py',
         lineno=72,
         depth=7,
         type='variable',
         name='pattern',
         text='pattern = r".*best choice is .*(\\d+).*"')

Fragment(uuid='7d711e75-cb6d-452a-9646-776c706ed27f',
         path='/tasks/text.py',
         lineno=73,
         depth=7,
         type='variable',
         name='match',
         text='match = re.match(pattern, vote_output, re.DOTALL)')

Fragment(uuid='9ea61197-e1d5-41e8-8d78-68f9cdb88314',
         path='/tasks/text.py',
         lineno=75,
         depth=9,
         type='variable',
         name='vote',
         text='vote = int(match.groups()[0]) - 1')

Fragment(uuid='323e4502-ea62-4ced-97ef-3763657bd5d5',
         path='/tasks/text.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='    def compare_prompt_wrap(x: str, ys: list) -> str:\n'
              "        assert len(ys) == 2, 'compare prompt only supports 2 "
              "candidates'\n"
              "        ys = [y.split('Passage:\\n')[-1] for y in ys]\n"
              "        prompt = compare_prompt + f'Passage "
              "1:\\n{ys[0]}\\n\\nPassage 2:\\n{ys[1]}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='76e8fe09-7a57-4098-8691-197f715dd40e',
         path='/tasks/text.py',
         lineno=83,
         depth=0,
         type='class',
         name='TextTask',
         text='    def compare_prompt_wrap(x: str, ys: list) -> str:\n'
              "        assert len(ys) == 2, 'compare prompt only supports 2 "
              "candidates'\n"
              "        ys = [y.split('Passage:\\n')[-1] for y in ys]\n"
              "        prompt = compare_prompt + f'Passage "
              "1:\\n{ys[0]}\\n\\nPassage 2:\\n{ys[1]}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(uuid='68684496-9a58-4e1d-9cce-92aa389e102d',
         path='/tasks/text.py',
         lineno=83,
         depth=3,
         type='function',
         name='compare_prompt_wrap',
         text='def compare_prompt_wrap(x: str, ys: list) -> str:\n'
              "        assert len(ys) == 2, 'compare prompt only supports 2 "
              "candidates'\n"
              "        ys = [y.split('Passage:\\n')[-1] for y in ys]\n"
              "        prompt = compare_prompt + f'Passage "
              "1:\\n{ys[0]}\\n\\nPassage 2:\\n{ys[1]}\\n'\n"
              '        return prompt')

Fragment(uuid='30e709d3-68b1-4b3a-9950-90574b7179ce',
         path='/tasks/text.py',
         lineno=85,
         depth=5,
         type='variable',
         name='ys',
         text="ys = [y.split('Passage:\\n')[-1] for y in ys]")

Fragment(uuid='526bcf06-3558-416e-a085-d5df9b70ae12',
         path='/tasks/text.py',
         lineno=86,
         depth=5,
         type='variable',
         name='prompt',
         text="prompt = compare_prompt + f'Passage 1:\\n{ys[0]}\\n\\nPassage "
              "2:\\n{ys[1]}\\n'")

Fragment(uuid='1a30fb8e-74a9-4ca7-8bb9-68f39b26caa9',
         path='/tasks/text.py',
         lineno=90,
         depth=0,
         type='module',
         name='',
         text='    def compare_output_unwrap(compare_output: str):\n'
              "        if 'more coherent passage is 1' in compare_output:\n"
              '            return 0\n'
              "        elif 'more coherent passage is 2' in compare_output:\n"
              '            return 1\n'
              "        elif 'two passages are similarly coherent' in "
              'compare_output:\n'
              '            return 0.5\n'
              '        else:\n'
              "            print(f'-----------------compare no match: "
              "{[compare_output]}')\n"
              '            return -1')

Fragment(uuid='e72b9992-f798-48f0-909f-5333f3159244',
         path='/tasks/text.py',
         lineno=90,
         depth=0,
         type='class',
         name='TextTask',
         text='    def compare_output_unwrap(compare_output: str):\n'
              "        if 'more coherent passage is 1' in compare_output:\n"
              '            return 0\n'
              "        elif 'more coherent passage is 2' in compare_output:\n"
              '            return 1\n'
              "        elif 'two passages are similarly coherent' in "
              'compare_output:\n'
              '            return 0.5\n'
              '        else:\n'
              "            print(f'-----------------compare no match: "
              "{[compare_output]}')\n"
              '            return -1')

Fragment(uuid='af16b123-4d3e-48d0-9b4f-647658d6d52e',
         path='/tasks/text.py',
         lineno=90,
         depth=3,
         type='function',
         name='compare_output_unwrap',
         text='def compare_output_unwrap(compare_output: str):\n'
              "        if 'more coherent passage is 1' in compare_output:\n"
              '            return 0\n'
              "        elif 'more coherent passage is 2' in compare_output:\n"
              '            return 1\n'
              "        elif 'two passages are similarly coherent' in "
              'compare_output:\n'
              '            return 0.5\n'
              '        else:\n'
              "            print(f'-----------------compare no match: "
              "{[compare_output]}')\n"
              '            return -1')