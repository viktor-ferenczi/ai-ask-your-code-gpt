Fragment(uuid='NORMALIZED-000000',
         path='/CMakeLists.txt',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='cmake_minimum_required(VERSION 3.2)\n'
              'project(TASO LANGUAGES CXX CUDA)\n')

Fragment(uuid='NORMALIZED-000001',
         path='/CMakeLists.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /CMakeLists.txt\n')

Fragment(uuid='NORMALIZED-000002',
         path='/CMakeLists.txt',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if (EXISTS ${CMAKE_CURRENT_BINARY_DIR}/config.cmake)\n'
              '  include (${CMAKE_CURRENT_BINARY_DIR}/config.cmake)\n'
              'else()\n'
              '  if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/config.cmake)\n'
              '    include(${CMAKE_CURRENT_SOURCE_DIR}/config.cmake)\n'
              '  endif()\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-000003',
         path='/CMakeLists.txt',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include directories\n'
              'include_directories(${CMAKE_INCLUDE_PATH})\n'
              'include_directories(${CMAKE_BINARY_DIR}) # to include protobuf '
              'headeer files\n'
              'include_directories("include")\n'
              '#include_directories("build")\n'
              '#include_directories("src/core")\n')

Fragment(uuid='NORMALIZED-000004',
         path='/CMakeLists.txt',
         lineno=18,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#initial variables\n'
              'set(TASO_LIBS "")\n'
              'set(TASO_LINK_LIBS ${CMAKE_DL_LIBS})\n'
              'set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n')

Fragment(uuid='NORMALIZED-000005',
         path='/CMakeLists.txt',
         lineno=23,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#Generate protobuf files\n'
              'find_package(Protobuf REQUIRED)\n'
              'message(STATUS "PROTOBUF=" ${PROTOBUF_LIBRARY})\n'
              'include_directories(${PROTOBUF_INCLUDE_DIR})\n'
              'protobuf_generate_cpp(PROTO_CPPS PROTO_HDRS '
              'src/core/rules.proto)\n'
              'list(APPEND TASO_LINK_LIBS ${PROTOBUF_LIBRARY})\n')

Fragment(uuid='NORMALIZED-000006',
         path='/CMakeLists.txt',
         lineno=30,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'file(GLOB_RECURSE TASO_SRCS\n'
              '  src/core/*.cc\n'
              '  )\n'
              'list(APPEND TASO_SRCS ${PROTO_CPPS})\n')

Fragment(uuid='NORMALIZED-000007',
         path='/CMakeLists.txt',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\nfile(GLOB_RECURSE TASO_CUDA_SRCS\n  src/cudnn/*.cu\n  )\n')

Fragment(uuid='NORMALIZED-000008',
         path='/CMakeLists.txt',
         lineno=39,
         depth=1,
         type='documentation',
         name='',
         text='\nfile(GLOB_RECURSE TASO_DNNL_SRCS\n  src/dnnl/*.cc\n  )\n')

Fragment(uuid='NORMALIZED-000009',
         path='/CMakeLists.txt',
         lineno=43,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#Generic compilation options\n'
              'include(CheckCXXCompilerFlag)\n'
              'check_cxx_compiler_flag("-std=c++11" SUPPORT_CXX11)\n'
              'if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")\n'
              '  message("Build in Debug mode")\n'
              '  set(CMAKE_CUDA_FLAGS "-O0 -g -Xcompiler=-fPIC '
              '${CMAKE_CUDA_FLAGS}")\n'
              '  set(CMAKE_CXX_FLAGS "-O0 -g -Wall -fPIC ${CMAKE_CXX_FLAGS}")\n'
              'else()\n'
              '  set(CMAKE_CUDA_FLAGS "-O2 -Xcompiler=-fPIC '
              '${CMAKE_CUDA_FLAGS}")\n'
              '  set(CMAKE_CXX_FLAGS "-O2 -Wall -fPIC ${CMAKE_CXX_FLAGS}")\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-000010',
         path='/CMakeLists.txt',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n#set CUDA')

Fragment(uuid='NORMALIZED-000011',
         path='/CMakeLists.txt',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\nif (NOT "${USE_CUDA}" STREQUAL "OFF")')

Fragment(uuid='NORMALIZED-000012',
         path='/CMakeLists.txt',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n  include(cmake/FindCUDA.cmake)')

Fragment(uuid='NORMALIZED-000013',
         path='/CMakeLists.txt',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n  find_cuda(${USE_CUDA})')

Fragment(uuid='NORMALIZED-000014',
         path='/CMakeLists.txt',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (CUDA_FOUND)')

Fragment(uuid='NORMALIZED-000015',
         path='/CMakeLists.txt',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND TASO_SRCS ${TASO_CUDA_SRCS})')

Fragment(uuid='NORMALIZED-000016',
         path='/CMakeLists.txt',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n    include_directories(${CUDA_INCLUDE_DIRS})')

Fragment(uuid='NORMALIZED-000017',
         path='/CMakeLists.txt',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n    message(STATUS "CUDA_INCLUDE_DIR=" ${CUDA_INCLUDE_DIRS})')

Fragment(uuid='NORMALIZED-000018',
         path='/CMakeLists.txt',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n    add_definitions(-DUSE_CUDNN)')

Fragment(uuid='NORMALIZED-000019',
         path='/CMakeLists.txt',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND TASO_LINK_LIBS ${CUDA_CUDART_LIBRARY})')

Fragment(uuid='NORMALIZED-000020',
         path='/CMakeLists.txt',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND TASO_LINK_LIBS ${CUDA_CUDA_LIBRARY})')

Fragment(uuid='NORMALIZED-000021',
         path='/CMakeLists.txt',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND TASO_LINK_LIBS ${CUDA_CUDNN_LIBRARY})')

Fragment(uuid='NORMALIZED-000022',
         path='/CMakeLists.txt',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND TASO_LINK_LIBS ${CUDA_CUBLAS_LIBRARY})')

Fragment(uuid='NORMALIZED-000023',
         path='/CMakeLists.txt',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n  else()')

Fragment(uuid='NORMALIZED-000024',
         path='/CMakeLists.txt',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    message(FATAL_ERROR "Cannot find CUDA, USE_CUDA=" '
              '${USE_CUDA})')

Fragment(uuid='NORMALIZED-000025',
         path='/CMakeLists.txt',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n  endif(CUDA_FOUND)')

Fragment(uuid='NORMALIZED-000026',
         path='/CMakeLists.txt',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\nendif()')

Fragment(uuid='NORMALIZED-000027',
         path='/CMakeLists.txt',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000028',
         path='/CMakeLists.txt',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n#set DNNL')

Fragment(uuid='NORMALIZED-000029',
         path='/CMakeLists.txt',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\nif (NOT "${USE_DNNL}" STREQUAL "OFF")')

Fragment(uuid='NORMALIZED-000030',
         path='/CMakeLists.txt',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n  if ("${USE_DNNL}" STREQUAL "ON")')

Fragment(uuid='NORMALIZED-000031',
         path='/CMakeLists.txt',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    message(FATAL_ERROR "Auto search DNNL is not supported yet; '
              'specify explicit DNNL path")')

Fragment(uuid='NORMALIZED-000032',
         path='/CMakeLists.txt',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n  elseif(IS_DIRECTORY ${USE_DNNL})')

Fragment(uuid='NORMALIZED-000033',
         path='/CMakeLists.txt',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND TASO_SRCS ${TASO_DNNL_SRCS})')

Fragment(uuid='NORMALIZED-000034',
         path='/CMakeLists.txt',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n    set(DNNL_PATH ${USE_DNNL})')

Fragment(uuid='NORMALIZED-000035',
         path='/CMakeLists.txt',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n    find_package(OpenMP)')

Fragment(uuid='NORMALIZED-000036',
         path='/CMakeLists.txt',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (OPENMP_FOUND)')

Fragment(uuid='NORMALIZED-000037',
         path='/CMakeLists.txt',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} '
              '${OpenMP_CXX_FLAGS}")')

Fragment(uuid='NORMALIZED-000038',
         path='/CMakeLists.txt',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n    else()')

Fragment(uuid='NORMALIZED-000039',
         path='/CMakeLists.txt',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n      message(FATAL_ERROR "OpenMP is not supported")')

Fragment(uuid='NORMALIZED-000040',
         path='/CMakeLists.txt',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n    endif(OPENMP_FOUND)')

Fragment(uuid='NORMALIZED-000041',
         path='/CMakeLists.txt',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n    set(DNNL_INCLUDE_DIRS ${DNNL_PATH}/include)')

Fragment(uuid='NORMALIZED-000042',
         path='/CMakeLists.txt',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n    include_directories(${DNNL_INCLUDE_DIRS})')

Fragment(uuid='NORMALIZED-000043',
         path='/CMakeLists.txt',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n    message(STATUS "DNNL_INCLUDE_DIRS=" ${DNNL_INCLUDE_DIRS})')

Fragment(uuid='NORMALIZED-000044',
         path='/CMakeLists.txt',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n    find_library(DNNL_LIBRARY dnnl')

Fragment(uuid='NORMALIZED-000045',
         path='/CMakeLists.txt',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n      ${DNNL_PATH}/lib)')

Fragment(uuid='NORMALIZED-000046',
         path='/CMakeLists.txt',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n    message(STATUS "Found DNNL_LIBRARY=" ${DNNL_LIBRARY})')

Fragment(uuid='NORMALIZED-000047',
         path='/CMakeLists.txt',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n    add_definitions(-DUSE_DNNL)')

Fragment(uuid='NORMALIZED-000048',
         path='/CMakeLists.txt',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n    list(APPEND TASO_LINK_LIBS ${DNNL_LIBRARY})')

Fragment(uuid='NORMALIZED-000049',
         path='/CMakeLists.txt',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n  endif()')

Fragment(uuid='NORMALIZED-000050',
         path='/CMakeLists.txt',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\nendif()')

Fragment(uuid='NORMALIZED-000051',
         path='/CMakeLists.txt',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000052',
         path='/CMakeLists.txt',
         lineno=97,
         depth=1,
         type='documentation',
         name='',
         text='\nadd_library(taso_runtime SHARED ${TASO_SRCS})\n')

Fragment(uuid='NORMALIZED-000053',
         path='/CMakeLists.txt',
         lineno=99,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(taso_runtime\n'
              '  PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\n')

Fragment(uuid='NORMALIZED-000054',
         path='/CMakeLists.txt',
         lineno=102,
         depth=1,
         type='documentation',
         name='',
         text='\ntarget_compile_features(taso_runtime PUBLIC cxx_std_11)\n')

Fragment(uuid='NORMALIZED-000055',
         path='/CMakeLists.txt',
         lineno=104,
         depth=1,
         type='documentation',
         name='',
         text='\ntarget_link_libraries(taso_runtime ${TASO_LINK_LIBS})\n')

Fragment(uuid='NORMALIZED-000056',
         path='/CMakeLists.txt',
         lineno=106,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'target_include_directories(taso_runtime\n'
              '  PUBLIC ${PROJECT_SOURCE_DIR}/include)\n')

Fragment(uuid='NORMALIZED-000057',
         path='/CMakeLists.txt',
         lineno=109,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'set_target_properties(taso_runtime\n'
              '                      PROPERTIES CUDA_SEPARABLE_COMPILATION '
              'ON)\n'
              '#install library\n'
              'install(TARGETS taso_runtime\n'
              '    LIBRARY DESTINATION lib)\n')

Fragment(uuid='NORMALIZED-000058',
         path='/CMakeLists.txt',
         lineno=115,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'install (DIRECTORY ${PROJECT_SOURCE_DIR}/include\n'
              '    DESTINATION .)\n')

Fragment(uuid='NORMALIZED-000059',
         path='/CMakeLists.txt',
         lineno=118,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'if ("${BUILD_CPP_EXAMPLES}" STREQUAL "ON")\n'
              '  set(CPP_EXAMPLES_DIR cpp_examples)\n'
              '  set(CPP_EXAMPLES_BIN dnn)\n'
              '  file(GLOB CPP_EXAMPLES_SRCS ${CPP_EXAMPLES_DIR}/*.cc)\n'
              '  add_executable(${CPP_EXAMPLES_BIN} ${CPP_EXAMPLES_SRCS})\n'
              '  set_target_properties(${CPP_EXAMPLES_BIN}\n'
              '    PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CPP_EXAMPLES_DIR})\n'
              '  target_link_libraries(${CPP_EXAMPLES_BIN} taso_runtime)\n'
              'endif()\n')

Fragment(uuid='NORMALIZED-000060',
         path='/INSTALL.md',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# TASO Installation\n'
              '\n'
              'TASO can be built from source code using the following '
              'instructions.\n'
              'We also provide prebuilt TASO docker images with all '
              'dependencies preinstalled.\n'
              '\n')

Fragment(uuid='NORMALIZED-000061',
         path='/INSTALL.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# TASO Installation\n'
              '## Install from Source\n'
              '### Prerequisties\n'
              '### Build TASO Runtime\n'
              '## Docker Images\n')

Fragment(uuid='NORMALIZED-000062',
         path='/INSTALL.md',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='## Install from Source\n\n')

Fragment(uuid='NORMALIZED-000063',
         path='/INSTALL.md',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='### Prerequisties\n'
              '\n'
              '* CMAKE 3.2 or higher\n'
              '* ProtocolBuffer 3.6.1 or higher\n'
              '* Cython 0.28 or higher\n'
              '* ONNX 1.5 or higher\n'
              '* CUDA 9.0 or higher and CUDNN 7.0 or higher\n'
              '\n')

Fragment(uuid='NORMALIZED-000064',
         path='/INSTALL.md',
         lineno=16,
         depth=6,
         type='documentation',
         name='',
         text='### Build TASO Runtime\n'
              '\n'
              '* To get started, clone the TASO source code from github.\n'
              '```')

Fragment(uuid='NORMALIZED-000065',
         path='/INSTALL.md',
         lineno=19,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'git clone --recursive https://www.github.com/jiazhihao/taso\n'
              'cd taso\n'
              '```')

Fragment(uuid='NORMALIZED-000066',
         path='/INSTALL.md',
         lineno=22,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'The `TASO_HOME` environment is used for building and running '
              'TASO. You can add the following line in `~/.bashrc`.\n'
              '```')

Fragment(uuid='NORMALIZED-000067',
         path='/INSTALL.md',
         lineno=24,
         depth=6,
         type='documentation',
         name='',
         text='\nexport TASO_HOME=/path/to/taso\n```\n')

Fragment(uuid='NORMALIZED-000068',
         path='/INSTALL.md',
         lineno=27,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              '* Build the TASO runtime library. The configuration of the TASO '
              'runtime can be modified by `config.cmake`. The default '
              'configuration builds the CUDA backend and automatically finds '
              'the CUDA libraries (e.g., cuDNN, cuBLAS). You can manually '
              'choose a CUDA path by changing `set(USE_CUDA ON)` to '
              '`set(USE_CUDA /path/to/cuda/library`). MKL support is coming '
              'soon.\n'
              '```')

Fragment(uuid='NORMALIZED-000069',
         path='/INSTALL.md',
         lineno=29,
         depth=6,
         type='documentation',
         name='',
         text='\nmkdir build; cd build; cmake ..\nsudo make install -j 4\n```\n')

Fragment(uuid='NORMALIZED-000070',
         path='/INSTALL.md',
         lineno=33,
         depth=6,
         type='documentation',
         name='',
         text='\n* Install the TASO python package.\n```')

Fragment(uuid='NORMALIZED-000071',
         path='/INSTALL.md',
         lineno=35,
         depth=6,
         type='documentation',
         name='',
         text='\ncd ../python\npython setup.py install\n```\n\n')

Fragment(uuid='NORMALIZED-000072',
         path='/INSTALL.md',
         lineno=40,
         depth=6,
         type='documentation',
         name='',
         text='## Docker Images\n'
              '\n'
              'We require '
              '[docker](https://docs.docker.com/engine/installation/) and '
              '[nvidia-docker](https://github.com/NVIDIA/nvidia-docker/) to '
              'run the TASO [docker images](https://hub.docker.com/u/tasoml).\n'
              '\n'
              '* First, clone the TASO gitpub repository to obtain the '
              'necessary scripts\n'
              '```')

Fragment(uuid='NORMALIZED-000073',
         path='/INSTALL.md',
         lineno=45,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'git clone --recursive https://www.github.com/jiazhihao/taso\n'
              '```\n')

Fragment(uuid='NORMALIZED-000074',
         path='/INSTALL.md',
         lineno=48,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              '* Second, we can use the following command to run a TASO docker '
              'image for CUDA 10.0.\n'
              '```')

Fragment(uuid='NORMALIZED-000075',
         path='/INSTALL.md',
         lineno=50,
         depth=6,
         type='documentation',
         name='',
         text='\n/path/to/taso/docker/run_docker.sh tasoml/cuda100\n```\n')

Fragment(uuid='NORMALIZED-000076',
         path='/INSTALL.md',
         lineno=53,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              '* You are ready to use TASO now. Try some of our example DNN '
              'architectures.\n'
              '```')

Fragment(uuid='NORMALIZED-000077',
         path='/INSTALL.md',
         lineno=55,
         depth=6,
         type='documentation',
         name='',
         text='\npython /path/to/taso/examples/resnext10.py\n```\n')

Fragment(uuid='NORMALIZED-000078',
         path='/LICENSE',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='                                 Apache License\n'
              '                           Version 2.0, January 2004\n'
              '                        http://www.apache.org/licenses/\n')

Fragment(uuid='NORMALIZED-000079',
         path='/LICENSE',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /LICENSE\n')

Fragment(uuid='NORMALIZED-000080',
         path='/LICENSE',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND '
              'DISTRIBUTION\n')

Fragment(uuid='NORMALIZED-000081',
         path='/LICENSE',
         lineno=6,
         depth=1,
         type='documentation',
         name='',
         text='\n   1. Definitions.\n')

Fragment(uuid='NORMALIZED-000082',
         path='/LICENSE',
         lineno=8,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      "License" shall mean the terms and conditions for use, '
              'reproduction,\n'
              '      and distribution as defined by Sections 1 through 9 of '
              'this document.\n')

Fragment(uuid='NORMALIZED-000083',
         path='/LICENSE',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      "Licensor" shall mean the copyright owner or entity '
              'authorized by\n'
              '      the copyright owner that is granting the License.\n')

Fragment(uuid='NORMALIZED-000084',
         path='/LICENSE',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      "Legal Entity" shall mean the union of the acting entity '
              'and all\n'
              '      other entities that control, are controlled by, or are '
              'under common\n'
              '      control with that entity. For the purposes of this '
              'definition,\n'
              '      "control" means (i) the power, direct or indirect, to '
              'cause the\n'
              '      direction or management of such entity, whether by '
              'contract or\n'
              '      otherwise, or (ii) ownership of fifty percent (50%) or '
              'more of the\n'
              '      outstanding shares, or (iii) beneficial ownership of such '
              'entity.\n')

Fragment(uuid='NORMALIZED-000085',
         path='/LICENSE',
         lineno=22,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      "You" (or "Your") shall mean an individual or Legal '
              'Entity\n'
              '      exercising permissions granted by this License.\n')

Fragment(uuid='NORMALIZED-000086',
         path='/LICENSE',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      "Source" form shall mean the preferred form for making '
              'modifications,\n'
              '      including but not limited to software source code, '
              'documentation\n'
              '      source, and configuration files.\n')

Fragment(uuid='NORMALIZED-000087',
         path='/LICENSE',
         lineno=29,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      "Object" form shall mean any form resulting from '
              'mechanical\n'
              '      transformation or translation of a Source form, including '
              'but\n'
              '      not limited to compiled object code, generated '
              'documentation,\n'
              '      and conversions to other media types.\n')

Fragment(uuid='NORMALIZED-000088',
         path='/LICENSE',
         lineno=34,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      "Work" shall mean the work of authorship, whether in '
              'Source or\n'
              '      Object form, made available under the License, as '
              'indicated by a\n'
              '      copyright notice that is included in or attached to the '
              'work\n'
              '      (an example is provided in the Appendix below).\n')

Fragment(uuid='NORMALIZED-000089',
         path='/LICENSE',
         lineno=39,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      "Derivative Works" shall mean any work, whether in Source '
              'or Object\n'
              '      form, that is based on (or derived from) the Work and for '
              'which the\n'
              '      editorial revisions, annotations, elaborations, or other '
              'modifications\n'
              '      represent, as a whole, an original work of authorship. '
              'For the purposes\n'
              '      of this License, Derivative Works shall not include works '
              'that remain\n'
              '      separable from, or merely link (or bind by name) to the '
              'interfaces of,\n'
              '      the Work and Derivative Works thereof.\n')

Fragment(uuid='NORMALIZED-000090',
         path='/LICENSE',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      "Contribution" shall mean any work of authorship, '
              'including')

Fragment(uuid='NORMALIZED-000091',
         path='/LICENSE',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      the original version of the Work and any modifications or '
              'additions')

Fragment(uuid='NORMALIZED-000092',
         path='/LICENSE',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      to that Work or Derivative Works thereof, that is '
              'intentionally')

Fragment(uuid='NORMALIZED-000093',
         path='/LICENSE',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      submitted to Licensor for inclusion in the Work by the '
              'copyright owner')

Fragment(uuid='NORMALIZED-000094',
         path='/LICENSE',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      or by an individual or Legal Entity authorized to submit '
              'on behalf of')

Fragment(uuid='NORMALIZED-000095',
         path='/LICENSE',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      the copyright owner. For the purposes of this definition, '
              '"submitted"')

Fragment(uuid='NORMALIZED-000096',
         path='/LICENSE',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      means any form of electronic, verbal, or written '
              'communication sent')

Fragment(uuid='NORMALIZED-000097',
         path='/LICENSE',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      to the Licensor or its representatives, including but not '
              'limited to')

Fragment(uuid='NORMALIZED-000098',
         path='/LICENSE',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      communication on electronic mailing lists, source code '
              'control systems,')

Fragment(uuid='NORMALIZED-000099',
         path='/LICENSE',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      and issue tracking systems that are managed by, or on '
              'behalf of, the')

Fragment(uuid='NORMALIZED-000100',
         path='/LICENSE',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      Licensor for the purpose of discussing and improving the '
              'Work, but')

Fragment(uuid='NORMALIZED-000101',
         path='/LICENSE',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      excluding communication that is conspicuously marked or '
              'otherwise')

Fragment(uuid='NORMALIZED-000102',
         path='/LICENSE',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      designated in writing by the copyright owner as "Not a '
              'Contribution."')

Fragment(uuid='NORMALIZED-000103',
         path='/LICENSE',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000104',
         path='/LICENSE',
         lineno=61,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      "Contributor" shall mean Licensor and any individual or '
              'Legal Entity\n'
              '      on behalf of whom a Contribution has been received by '
              'Licensor and\n'
              '      subsequently incorporated within the Work.\n')

Fragment(uuid='NORMALIZED-000105',
         path='/LICENSE',
         lineno=65,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '   2. Grant of Copyright License. Subject to the terms and '
              'conditions of\n'
              '      this License, each Contributor hereby grants to You a '
              'perpetual,\n'
              '      worldwide, non-exclusive, no-charge, royalty-free, '
              'irrevocable\n'
              '      copyright license to reproduce, prepare Derivative Works '
              'of,\n'
              '      publicly display, publicly perform, sublicense, and '
              'distribute the\n'
              '      Work and such Derivative Works in Source or Object form.\n')

Fragment(uuid='NORMALIZED-000106',
         path='/LICENSE',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '   3. Grant of Patent License. Subject to the terms and '
              'conditions of')

Fragment(uuid='NORMALIZED-000107',
         path='/LICENSE',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      this License, each Contributor hereby grants to You a '
              'perpetual,')

Fragment(uuid='NORMALIZED-000108',
         path='/LICENSE',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      worldwide, non-exclusive, no-charge, royalty-free, '
              'irrevocable')

Fragment(uuid='NORMALIZED-000109',
         path='/LICENSE',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      (except as stated in this section) patent license to '
              'make, have made,')

Fragment(uuid='NORMALIZED-000110',
         path='/LICENSE',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      use, offer to sell, sell, import, and otherwise transfer '
              'the Work,')

Fragment(uuid='NORMALIZED-000111',
         path='/LICENSE',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      where such license applies only to those patent claims '
              'licensable')

Fragment(uuid='NORMALIZED-000112',
         path='/LICENSE',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      by such Contributor that are necessarily infringed by '
              'their')

Fragment(uuid='NORMALIZED-000113',
         path='/LICENSE',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      Contribution(s) alone or by combination of their '
              'Contribution(s)')

Fragment(uuid='NORMALIZED-000114',
         path='/LICENSE',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      with the Work to which such Contribution(s) was '
              'submitted. If You')

Fragment(uuid='NORMALIZED-000115',
         path='/LICENSE',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      institute patent litigation against any entity (including '
              'a')

Fragment(uuid='NORMALIZED-000116',
         path='/LICENSE',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      cross-claim or counterclaim in a lawsuit) alleging that '
              'the Work')

Fragment(uuid='NORMALIZED-000117',
         path='/LICENSE',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      or a Contribution incorporated within the Work '
              'constitutes direct')

Fragment(uuid='NORMALIZED-000118',
         path='/LICENSE',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      or contributory patent infringement, then any patent '
              'licenses')

Fragment(uuid='NORMALIZED-000119',
         path='/LICENSE',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      granted to You under this License for that Work shall '
              'terminate')

Fragment(uuid='NORMALIZED-000120',
         path='/LICENSE',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n      as of the date such litigation is filed.')

Fragment(uuid='NORMALIZED-000121',
         path='/LICENSE',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000122',
         path='/LICENSE',
         lineno=88,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '   4. Redistribution. You may reproduce and distribute copies '
              'of the\n'
              '      Work or Derivative Works thereof in any medium, with or '
              'without\n'
              '      modifications, and in Source or Object form, provided '
              'that You\n'
              '      meet the following conditions:\n')

Fragment(uuid='NORMALIZED-000123',
         path='/LICENSE',
         lineno=93,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      (a) You must give any other recipients of the Work or\n'
              '          Derivative Works a copy of this License; and\n')

Fragment(uuid='NORMALIZED-000124',
         path='/LICENSE',
         lineno=96,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      (b) You must cause any modified files to carry prominent '
              'notices\n'
              '          stating that You changed the files; and\n')

Fragment(uuid='NORMALIZED-000125',
         path='/LICENSE',
         lineno=99,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      (c) You must retain, in the Source form of any Derivative '
              'Works\n'
              '          that You distribute, all copyright, patent, '
              'trademark, and\n'
              '          attribution notices from the Source form of the '
              'Work,\n'
              '          excluding those notices that do not pertain to any '
              'part of\n'
              '          the Derivative Works; and\n')

Fragment(uuid='NORMALIZED-000126',
         path='/LICENSE',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      (d) If the Work includes a "NOTICE" text file as part of '
              'its')

Fragment(uuid='NORMALIZED-000127',
         path='/LICENSE',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          distribution, then any Derivative Works that You '
              'distribute must')

Fragment(uuid='NORMALIZED-000128',
         path='/LICENSE',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          include a readable copy of the attribution notices '
              'contained')

Fragment(uuid='NORMALIZED-000129',
         path='/LICENSE',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          within such NOTICE file, excluding those notices that '
              'do not')

Fragment(uuid='NORMALIZED-000130',
         path='/LICENSE',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          pertain to any part of the Derivative Works, in at '
              'least one')

Fragment(uuid='NORMALIZED-000131',
         path='/LICENSE',
         lineno=110,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          of the following places: within a NOTICE text file '
              'distributed')

Fragment(uuid='NORMALIZED-000132',
         path='/LICENSE',
         lineno=111,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          as part of the Derivative Works; within the Source '
              'form or')

Fragment(uuid='NORMALIZED-000133',
         path='/LICENSE',
         lineno=112,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          documentation, if provided along with the Derivative '
              'Works; or,')

Fragment(uuid='NORMALIZED-000134',
         path='/LICENSE',
         lineno=113,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          within a display generated by the Derivative Works, '
              'if and')

Fragment(uuid='NORMALIZED-000135',
         path='/LICENSE',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          wherever such third-party notices normally appear. '
              'The contents')

Fragment(uuid='NORMALIZED-000136',
         path='/LICENSE',
         lineno=115,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          of the NOTICE file are for informational purposes '
              'only and')

Fragment(uuid='NORMALIZED-000137',
         path='/LICENSE',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          do not modify the License. You may add Your own '
              'attribution')

Fragment(uuid='NORMALIZED-000138',
         path='/LICENSE',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          notices within Derivative Works that You distribute, '
              'alongside')

Fragment(uuid='NORMALIZED-000139',
         path='/LICENSE',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          or as an addendum to the NOTICE text from the Work, '
              'provided')

Fragment(uuid='NORMALIZED-000140',
         path='/LICENSE',
         lineno=119,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          that such additional attribution notices cannot be '
              'construed')

Fragment(uuid='NORMALIZED-000141',
         path='/LICENSE',
         lineno=120,
         depth=2,
         type='documentation',
         name='',
         text='\n          as modifying the License.')

Fragment(uuid='NORMALIZED-000142',
         path='/LICENSE',
         lineno=121,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000143',
         path='/LICENSE',
         lineno=122,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      You may add Your own copyright statement to Your '
              'modifications and\n'
              '      may provide additional or different license terms and '
              'conditions\n'
              '      for use, reproduction, or distribution of Your '
              'modifications, or\n'
              '      for any such Derivative Works as a whole, provided Your '
              'use,\n'
              '      reproduction, and distribution of the Work otherwise '
              'complies with\n'
              '      the conditions stated in this License.\n')

Fragment(uuid='NORMALIZED-000144',
         path='/LICENSE',
         lineno=129,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '   5. Submission of Contributions. Unless You explicitly state '
              'otherwise,\n'
              '      any Contribution intentionally submitted for inclusion in '
              'the Work\n'
              '      by You to the Licensor shall be under the terms and '
              'conditions of\n'
              '      this License, without any additional terms or '
              'conditions.\n'
              '      Notwithstanding the above, nothing herein shall supersede '
              'or modify\n'
              '      the terms of any separate license agreement you may have '
              'executed\n'
              '      with Licensor regarding such Contributions.\n')

Fragment(uuid='NORMALIZED-000145',
         path='/LICENSE',
         lineno=137,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '   6. Trademarks. This License does not grant permission to use '
              'the trade\n'
              '      names, trademarks, service marks, or product names of the '
              'Licensor,\n'
              '      except as required for reasonable and customary use in '
              'describing the\n'
              '      origin of the Work and reproducing the content of the '
              'NOTICE file.\n')

Fragment(uuid='NORMALIZED-000146',
         path='/LICENSE',
         lineno=142,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '   7. Disclaimer of Warranty. Unless required by applicable law '
              'or\n'
              '      agreed to in writing, Licensor provides the Work (and '
              'each\n'
              '      Contributor provides its Contributions) on an "AS IS" '
              'BASIS,\n'
              '      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either '
              'express or\n'
              '      implied, including, without limitation, any warranties or '
              'conditions\n'
              '      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS '
              'FOR A\n'
              '      PARTICULAR PURPOSE. You are solely responsible for '
              'determining the\n'
              '      appropriateness of using or redistributing the Work and '
              'assume any\n'
              '      risks associated with Your exercise of permissions under '
              'this License.\n')

Fragment(uuid='NORMALIZED-000147',
         path='/LICENSE',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '   8. Limitation of Liability. In no event and under no legal '
              'theory,')

Fragment(uuid='NORMALIZED-000148',
         path='/LICENSE',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      whether in tort (including negligence), contract, or '
              'otherwise,')

Fragment(uuid='NORMALIZED-000149',
         path='/LICENSE',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      unless required by applicable law (such as deliberate and '
              'grossly')

Fragment(uuid='NORMALIZED-000150',
         path='/LICENSE',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      negligent acts) or agreed to in writing, shall any '
              'Contributor be')

Fragment(uuid='NORMALIZED-000151',
         path='/LICENSE',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      liable to You for damages, including any direct, '
              'indirect, special,')

Fragment(uuid='NORMALIZED-000152',
         path='/LICENSE',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      incidental, or consequential damages of any character '
              'arising as a')

Fragment(uuid='NORMALIZED-000153',
         path='/LICENSE',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      result of this License or out of the use or inability to '
              'use the')

Fragment(uuid='NORMALIZED-000154',
         path='/LICENSE',
         lineno=159,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      Work (including but not limited to damages for loss of '
              'goodwill,')

Fragment(uuid='NORMALIZED-000155',
         path='/LICENSE',
         lineno=160,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      work stoppage, computer failure or malfunction, or any '
              'and all')

Fragment(uuid='NORMALIZED-000156',
         path='/LICENSE',
         lineno=161,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      other commercial damages or losses), even if such '
              'Contributor')

Fragment(uuid='NORMALIZED-000157',
         path='/LICENSE',
         lineno=162,
         depth=2,
         type='documentation',
         name='',
         text='\n      has been advised of the possibility of such damages.')

Fragment(uuid='NORMALIZED-000158',
         path='/LICENSE',
         lineno=163,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000159',
         path='/LICENSE',
         lineno=164,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '   9. Accepting Warranty or Additional Liability. While '
              'redistributing\n'
              '      the Work or Derivative Works thereof, You may choose to '
              'offer,\n'
              '      and charge a fee for, acceptance of support, warranty, '
              'indemnity,\n'
              '      or other liability obligations and/or rights consistent '
              'with this\n'
              '      License. However, in accepting such obligations, You may '
              'act only\n'
              '      on Your own behalf and on Your sole responsibility, not '
              'on behalf\n'
              '      of any other Contributor, and only if You agree to '
              'indemnify,\n'
              '      defend, and hold each Contributor harmless for any '
              'liability\n'
              '      incurred by, or claims asserted against, such Contributor '
              'by reason\n'
              '      of your accepting any such warranty or additional '
              'liability.\n')

Fragment(uuid='NORMALIZED-000160',
         path='/LICENSE',
         lineno=175,
         depth=1,
         type='documentation',
         name='',
         text='\n   END OF TERMS AND CONDITIONS\n')

Fragment(uuid='NORMALIZED-000161',
         path='/LICENSE',
         lineno=177,
         depth=1,
         type='documentation',
         name='',
         text='\n   APPENDIX: How to apply the Apache License to your work.\n')

Fragment(uuid='NORMALIZED-000162',
         path='/LICENSE',
         lineno=179,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '      To apply the Apache License to your work, attach the '
              'following\n'
              '      boilerplate notice, with the fields enclosed by brackets '
              '"[]"\n'
              "      replaced with your own identifying information. (Don't "
              'include\n'
              '      the brackets!)  The text should be enclosed in the '
              'appropriate\n'
              '      comment syntax for the file format. We also recommend '
              'that a\n'
              '      file or class name and description of purpose be included '
              'on the\n'
              '      same "printed page" as the copyright notice for easier\n'
              '      identification within third-party archives.\n')

Fragment(uuid='NORMALIZED-000163',
         path='/LICENSE',
         lineno=188,
         depth=1,
         type='documentation',
         name='',
         text='\n   Copyright [yyyy] [name of copyright owner]\n')

Fragment(uuid='NORMALIZED-000164',
         path='/LICENSE',
         lineno=190,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '   Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '   you may not use this file except in compliance with the '
              'License.\n'
              '   You may obtain a copy of the License at\n')

Fragment(uuid='NORMALIZED-000165',
         path='/LICENSE',
         lineno=194,
         depth=1,
         type='documentation',
         name='',
         text='\n       http://www.apache.org/licenses/LICENSE-2.0\n')

Fragment(uuid='NORMALIZED-000166',
         path='/LICENSE',
         lineno=196,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '   Unless required by applicable law or agreed to in writing, '
              'software\n'
              '   distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              '   See the License for the specific language governing '
              'permissions and\n'
              '   limitations under the License.\n')

Fragment(uuid='NORMALIZED-000167',
         path='/README.md',
         lineno=1,
         depth=10,
         type='documentation',
         name='',
         text='# TASO: The Tensor Algebra SuperOptimizer for Deep Learning\n')

Fragment(uuid='NORMALIZED-000168',
         path='/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# TASO: The Tensor Algebra SuperOptimizer for Deep Learning\n'
              '## Install TASO\n'
              '## Use TASO\n'
              '### Optimize ONNX Models\n'
              '### Optimize TensorFlow Models\n'
              '### Optimize PyTorch Models\n'
              '### Optimize Arbitrary DNN Models using the Python Interface\n'
              '#Build DNN model\n'
              '#Optimize DNN model\n'
              '## Publication\n')

Fragment(uuid='NORMALIZED-000169',
         path='/README.md',
         lineno=2,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              'TASO optimizes the computation graphs of DNN models using '
              'automatically generated and verified graph transformations.')

Fragment(uuid='NORMALIZED-000170',
         path='/README.md',
         lineno=3,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              'For an arbitrary DNN model, TASO uses the auto-generated graph '
              'transformations to build a large search space of potential '
              'computation graphs that are equivalent to the original DNN '
              'model.')

Fragment(uuid='NORMALIZED-000171',
         path='/README.md',
         lineno=4,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              'TASO employs a cost-based search algorithm to explore the '
              'space, and automatically discovers highly optimized computation '
              'graphs.')

Fragment(uuid='NORMALIZED-000172',
         path='/README.md',
         lineno=5,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              'TASO outperforms the graph optimizers in existing deep learning '
              'frameworks by [up to '
              '3x](http://theory.stanford.edu/~aiken/publications/papers/sosp19.pdf).')

Fragment(uuid='NORMALIZED-000173',
         path='/README.md',
         lineno=6,
         depth=11,
         type='documentation',
         name='',
         text='\n<div align="center">')

Fragment(uuid='NORMALIZED-000174',
         path='/README.md',
         lineno=7,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '  <img '
              'src="https://github.com/jiazhihao/TASO/blob/master/figures/inference.png">')

Fragment(uuid='NORMALIZED-000175',
         path='/README.md',
         lineno=8,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              '  End-to-end inference performance comparison on a NVIDIA V100 '
              'GPU.')

Fragment(uuid='NORMALIZED-000176',
         path='/README.md',
         lineno=9,
         depth=11,
         type='documentation',
         name='',
         text='\n</div>')

Fragment(uuid='NORMALIZED-000177',
         path='/README.md',
         lineno=10,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000178',
         path='/README.md',
         lineno=11,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000179',
         path='/README.md',
         lineno=12,
         depth=1,
         type='documentation',
         name='',
         text='## Install TASO\n'
              '\n'
              'See [instructions](INSTALL.md) to install TASO from source.\n'
              'We also provide prebuilt [docker '
              'images](https://github.com/jiazhihao/TASO/blob/master/INSTALL.md) '
              'with all dependencies pre-installed.\n'
              '\n')

Fragment(uuid='NORMALIZED-000180',
         path='/README.md',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='## Use TASO\n'
              '\n'
              'TASO can directly optimize any pre-trained DNN models in '
              '[ONNX](https://onnx.ai), '
              '[TensorFlow](https://www.tensorflow.org/guide/saved_model), and '
              '[PyTorch](https://pytorch.org/docs/stable/onnx.html) graph '
              'formats.\n'
              'TASO also provides a Python interface for optimizing arbitrary '
              'DNN architectures.\n'
              'TASO supports exporting the optimized computation graphs to '
              'ONNX, which can be directly used as inputs by most existing '
              'deep learning frameworks.\n'
              '\n')

Fragment(uuid='NORMALIZED-000181',
         path='/README.md',
         lineno=23,
         depth=6,
         type='documentation',
         name='',
         text='### Optimize ONNX Models\n'
              '\n'
              'TASO can directly optimize pre-trained ONNX models, and this '
              'can be done in just a few lines of Python code.\n'
              'The following code snippet shows how to load a pre-trained DNN '
              'model from ONNX, optimize the model, and save the optimized '
              'model into a ONNX file.\n'
              '```python\n'
              'import taso\n'
              'import onnx\n'
              '\n'
              'old_model = taso.load_onnx("/path/to/load/onnx/model")\n'
              'taso_graph = taso.optimize(old_model)\n'
              'new_model = taso.export_onnx(taso_graph)\n'
              'onnx.save(new_model, "/path/to/save/new/onnx/model")\n'
              '```')

Fragment(uuid='NORMALIZED-000182',
         path='/README.md',
         lineno=35,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'The optimized model has the same accuracy as the original and '
              'can be directly used by existing deep learning frameworks.\n'
              'Some original and TASO-optimized ONNX files are available in '
              'the `onnx` folder.\n'
              '<!-- The following figure shows the end-to-end inference '
              'performance comparison on a NVIDIA V100 GPU. -->\n'
              '\n')

Fragment(uuid='NORMALIZED-000183',
         path='/README.md',
         lineno=40,
         depth=6,
         type='documentation',
         name='',
         text='### Optimize TensorFlow Models\n'
              '\n'
              'TASO can optimize TensorFlow models by converting the model to '
              'ONNX using [tf2onnx](https://github.com/onnx/tensorflow-onnx).\n'
              '\n'
              '* First, install `tf2onnx` from PyPi as follows or [from '
              'source](https://github.com/onnx/tensorflow-onnx).\n'
              '```')

Fragment(uuid='NORMALIZED-000184',
         path='/README.md',
         lineno=45,
         depth=6,
         type='documentation',
         name='',
         text='\npip install -U tf2onnx\n```\n')

Fragment(uuid='NORMALIZED-000185',
         path='/README.md',
         lineno=48,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              '* Second, convert a TensorFlow model to ONNX using `tf2onnx`.\n'
              '```')

Fragment(uuid='NORMALIZED-000186',
         path='/README.md',
         lineno=50,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              'python -m tf2onnx.convert \\\n'
              '       --saved-model /path/to/tensorflow/saved/model \\\n'
              '       --output /path/to/onnx/model/file\n'
              '```\n')

Fragment(uuid='NORMALIZED-000187',
         path='/README.md',
         lineno=55,
         depth=6,
         type='documentation',
         name='',
         text='\n'
              '* Third, use TASO to optimize the model in ONNX by following '
              'the [above '
              'instructions](https://github.com/jiazhihao/TASO#optimize-onnx-models).\n'
              '\n')

Fragment(uuid='NORMALIZED-000188',
         path='/README.md',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='### Optimize PyTorch Models\n'
              '\n'
              'PyTorch has built-in support for ONNX as a part of the '
              '[torch.onnx](https://pytorch.org/docs/master/onnx.html) '
              'package.\n'
              'TASO can directly optimize PyTorch models in the ONNX format.\n'
              '\n')

Fragment(uuid='NORMALIZED-000189',
         path='/README.md',
         lineno=63,
         depth=10,
         type='documentation',
         name='',
         text='### Optimize Arbitrary DNN Models using the Python Interface\n')

Fragment(uuid='NORMALIZED-000190',
         path='/README.md',
         lineno=64,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'TASO can also optimize arbitrary DNN architectures using the '
              'TASO Python interface. \n'
              'The following code snippet builds the left-most DNN graph '
              'depicted in the figure. TASO automatically performs a series of '
              'non-trivial transformations, and eventually discovers the '
              'right-most DNN graph, which is 1.3x faster on a V100 GPU. More '
              'DNN examples are available in the `examples` folder.\n')

Fragment(uuid='NORMALIZED-000191',
         path='/README.md',
         lineno=67,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '<div align="center">\n'
              '  <img '
              'src="https://github.com/jiazhihao/TASO/blob/master/figures/graph_subst.png">\n'
              '</div>\n')

Fragment(uuid='NORMALIZED-000192',
         path='/README.md',
         lineno=71,
         depth=10,
         type='documentation',
         name='',
         text='\n```python\nimport taso\nimport onnx\n')

Fragment(uuid='NORMALIZED-000193',
         path='/README.md',
         lineno=75,
         depth=11,
         type='documentation',
         name='',
         text='\n#Build DNN model')

Fragment(uuid='NORMALIZED-000194',
         path='/README.md',
         lineno=76,
         depth=11,
         type='documentation',
         name='',
         text='\ngraph = taso.new_graph()')

Fragment(uuid='NORMALIZED-000195',
         path='/README.md',
         lineno=77,
         depth=11,
         type='documentation',
         name='',
         text='\ninput = graph.new_input(dims=(1,128,56,56))')

Fragment(uuid='NORMALIZED-000196',
         path='/README.md',
         lineno=78,
         depth=11,
         type='documentation',
         name='',
         text='\nw1 = graph.new_weight(dims=(128,128,3,3))')

Fragment(uuid='NORMALIZED-000197',
         path='/README.md',
         lineno=79,
         depth=11,
         type='documentation',
         name='',
         text='\nw2 = graph.new_weight(dims=(128,128,1,1))')

Fragment(uuid='NORMALIZED-000198',
         path='/README.md',
         lineno=80,
         depth=11,
         type='documentation',
         name='',
         text='\nw3 = graph.new_weight(dims=(128,128,3,3))')

Fragment(uuid='NORMALIZED-000199',
         path='/README.md',
         lineno=81,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              'left = graph.conv2d(input=input, weight=w1, strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-000200',
         path='/README.md',
         lineno=82,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              'left = graph.conv2d(input=left, weight=w3, strides=(1,1), '
              'padding="SAME")')

Fragment(uuid='NORMALIZED-000201',
         path='/README.md',
         lineno=83,
         depth=11,
         type='documentation',
         name='',
         text='\n'
              'right = graph.conv2d(input=input, weight=w2, strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-000202',
         path='/README.md',
         lineno=84,
         depth=11,
         type='documentation',
         name='',
         text='\noutput = graph.add(left, right)')

Fragment(uuid='NORMALIZED-000203',
         path='/README.md',
         lineno=85,
         depth=11,
         type='documentation',
         name='',
         text='\noutput = graph.relu(output)')

Fragment(uuid='NORMALIZED-000204',
         path='/README.md',
         lineno=86,
         depth=11,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000205',
         path='/README.md',
         lineno=87,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '#Optimize DNN model\n'
              'new_graph = taso.optimize(graph)\n'
              'onnx_model = taso.export_onnx(new_graph)\n'
              'onnx.save(onnx_model, "/path/to/save/new/onnx/model")\n'
              '```\n'
              '\n')

Fragment(uuid='NORMALIZED-000206',
         path='/README.md',
         lineno=94,
         depth=10,
         type='documentation',
         name='',
         text='## Publication\n'
              '* Zhihao Jia, Oded Padon, James Thomas, Todd Warszawski, Matei '
              'Zaharia, and Alex Aiken. [TASO: Optimizing Deep Learning '
              'Computation with Automated Generation of Graph '
              'Substitutions](https://cs.stanford.edu/~zhihao/papers/sosp19.pdf). '
              'In Proceedings of the Symposium on Operating Systems Principles '
              '(SOSP), Ontario, Canada, October 2019.\n')

Fragment(uuid='NORMALIZED-000207',
         path='/README.md',
         lineno=96,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '* Zhihao Jia, James Thomas, Todd Warszawski, Mingyu Gao, Matei '
              'Zaharia, and Alex Aiken. [Optimizing DNN Computation with '
              'Relaxed Graph '
              'Substitutions](https://theory.stanford.edu/~aiken/publications/papers/sysml19b.pdf). '
              'In Proceedings of the Conference on Systems and Machine '
              'Learning (SysML), Palo Alto, CA, April 2019.\n'
              '\n')

Fragment(uuid='NORMALIZED-000208',
         path='/cmake/FindCUDA.cmake',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='#######################################################')

Fragment(uuid='NORMALIZED-000209',
         path='/cmake/FindCUDA.cmake',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n# Enhanced version of find CUDA.')

Fragment(uuid='NORMALIZED-000210',
         path='/cmake/FindCUDA.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /cmake/FindCUDA.cmake\n')

Fragment(uuid='NORMALIZED-000211',
         path='/cmake/FindCUDA.cmake',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-000212',
         path='/cmake/FindCUDA.cmake',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n# Usage:')

Fragment(uuid='NORMALIZED-000213',
         path='/cmake/FindCUDA.cmake',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n#   find_cuda(${USE_CUDA})')

Fragment(uuid='NORMALIZED-000214',
         path='/cmake/FindCUDA.cmake',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-000215',
         path='/cmake/FindCUDA.cmake',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n# - When USE_CUDA=ON, use auto search')

Fragment(uuid='NORMALIZED-000216',
         path='/cmake/FindCUDA.cmake',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n# - When USE_CUDA=/path/to/cuda-path, use the cuda path')

Fragment(uuid='NORMALIZED-000217',
         path='/cmake/FindCUDA.cmake',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-000218',
         path='/cmake/FindCUDA.cmake',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n# Provide variables:')

Fragment(uuid='NORMALIZED-000219',
         path='/cmake/FindCUDA.cmake',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-000220',
         path='/cmake/FindCUDA.cmake',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n# - CUDA_FOUND')

Fragment(uuid='NORMALIZED-000221',
         path='/cmake/FindCUDA.cmake',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n# - CUDA_INCLUDE_DIRS')

Fragment(uuid='NORMALIZED-000222',
         path='/cmake/FindCUDA.cmake',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n# - CUDA_TOOLKIT_ROOT_DIR')

Fragment(uuid='NORMALIZED-000223',
         path='/cmake/FindCUDA.cmake',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n# - CUDA_CUDA_LIBRARY')

Fragment(uuid='NORMALIZED-000224',
         path='/cmake/FindCUDA.cmake',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\n# - CUDA_CUDART_LIBRARY')

Fragment(uuid='NORMALIZED-000225',
         path='/cmake/FindCUDA.cmake',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n# - CUDA_NVRTC_LIBRARY')

Fragment(uuid='NORMALIZED-000226',
         path='/cmake/FindCUDA.cmake',
         lineno=17,
         depth=2,
         type='documentation',
         name='',
         text='\n# - CUDA_CUDNN_LIBRARY')

Fragment(uuid='NORMALIZED-000227',
         path='/cmake/FindCUDA.cmake',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='\n# - CUDA_CUBLAS_LIBRARY')

Fragment(uuid='NORMALIZED-000228',
         path='/cmake/FindCUDA.cmake',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n#')

Fragment(uuid='NORMALIZED-000229',
         path='/cmake/FindCUDA.cmake',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\nmacro(find_cuda use_cuda)')

Fragment(uuid='NORMALIZED-000230',
         path='/cmake/FindCUDA.cmake',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n  set(__use_cuda ${use_cuda})')

Fragment(uuid='NORMALIZED-000231',
         path='/cmake/FindCUDA.cmake',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n  if(__use_cuda STREQUAL "ON")')

Fragment(uuid='NORMALIZED-000232',
         path='/cmake/FindCUDA.cmake',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n    find_package(CUDA QUIET)')

Fragment(uuid='NORMALIZED-000233',
         path='/cmake/FindCUDA.cmake',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n  elseif(IS_DIRECTORY ${__use_cuda})')

Fragment(uuid='NORMALIZED-000234',
         path='/cmake/FindCUDA.cmake',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n    set(CUDA_TOOLKIT_ROOT_DIR ${__use_cuda})')

Fragment(uuid='NORMALIZED-000235',
         path='/cmake/FindCUDA.cmake',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    message(STATUS "Custom CUDA_PATH=" ${CUDA_TOOLKIT_ROOT_DIR})')

Fragment(uuid='NORMALIZED-000236',
         path='/cmake/FindCUDA.cmake',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n    set(CUDA_INCLUDE_DIRS ${CUDA_TOOLKIT_ROOT_DIR}/include)')

Fragment(uuid='NORMALIZED-000237',
         path='/cmake/FindCUDA.cmake',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n    set(CUDA_FOUND TRUE)')

Fragment(uuid='NORMALIZED-000238',
         path='/cmake/FindCUDA.cmake',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n    if(MSVC)')

Fragment(uuid='NORMALIZED-000239',
         path='/cmake/FindCUDA.cmake',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n      find_library(CUDA_CUDART_LIBRARY cudart')

Fragment(uuid='NORMALIZED-000240',
         path='/cmake/FindCUDA.cmake',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib/x64')

Fragment(uuid='NORMALIZED-000241',
         path='/cmake/FindCUDA.cmake',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)')

Fragment(uuid='NORMALIZED-000242',
         path='/cmake/FindCUDA.cmake',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n    else(MSVC)')

Fragment(uuid='NORMALIZED-000243',
         path='/cmake/FindCUDA.cmake',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n      find_library(CUDA_CUDART_LIBRARY cudart')

Fragment(uuid='NORMALIZED-000244',
         path='/cmake/FindCUDA.cmake',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib64')

Fragment(uuid='NORMALIZED-000245',
         path='/cmake/FindCUDA.cmake',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib)')

Fragment(uuid='NORMALIZED-000246',
         path='/cmake/FindCUDA.cmake',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n    endif(MSVC)')

Fragment(uuid='NORMALIZED-000247',
         path='/cmake/FindCUDA.cmake',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n  endif()')

Fragment(uuid='NORMALIZED-000248',
         path='/cmake/FindCUDA.cmake',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000249',
         path='/cmake/FindCUDA.cmake',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n  # additional libraries')

Fragment(uuid='NORMALIZED-000250',
         path='/cmake/FindCUDA.cmake',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n  if(CUDA_FOUND)')

Fragment(uuid='NORMALIZED-000251',
         path='/cmake/FindCUDA.cmake',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n    if(MSVC)')

Fragment(uuid='NORMALIZED-000252',
         path='/cmake/FindCUDA.cmake',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n      find_library(CUDA_CUDA_LIBRARY cuda')

Fragment(uuid='NORMALIZED-000253',
         path='/cmake/FindCUDA.cmake',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib/x64')

Fragment(uuid='NORMALIZED-000254',
         path='/cmake/FindCUDA.cmake',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)')

Fragment(uuid='NORMALIZED-000255',
         path='/cmake/FindCUDA.cmake',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n      find_library(CUDA_NVRTC_LIBRARY nvrtc')

Fragment(uuid='NORMALIZED-000256',
         path='/cmake/FindCUDA.cmake',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib/x64')

Fragment(uuid='NORMALIZED-000257',
         path='/cmake/FindCUDA.cmake',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)')

Fragment(uuid='NORMALIZED-000258',
         path='/cmake/FindCUDA.cmake',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n      find_library(CUDA_CUDNN_LIBRARY cudnn')

Fragment(uuid='NORMALIZED-000259',
         path='/cmake/FindCUDA.cmake',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib/x64')

Fragment(uuid='NORMALIZED-000260',
         path='/cmake/FindCUDA.cmake',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)')

Fragment(uuid='NORMALIZED-000261',
         path='/cmake/FindCUDA.cmake',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n      find_library(CUDA_CUBLAS_LIBRARY cublas')

Fragment(uuid='NORMALIZED-000262',
         path='/cmake/FindCUDA.cmake',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib/x64')

Fragment(uuid='NORMALIZED-000263',
         path='/cmake/FindCUDA.cmake',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)')

Fragment(uuid='NORMALIZED-000264',
         path='/cmake/FindCUDA.cmake',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n    else(MSVC)')

Fragment(uuid='NORMALIZED-000265',
         path='/cmake/FindCUDA.cmake',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n      find_library(_CUDA_CUDA_LIBRARY cuda')

Fragment(uuid='NORMALIZED-000266',
         path='/cmake/FindCUDA.cmake',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n        PATHS ${CUDA_TOOLKIT_ROOT_DIR}')

Fragment(uuid='NORMALIZED-000267',
         path='/cmake/FindCUDA.cmake',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        PATH_SUFFIXES lib lib64 targets/x86_64-linux/lib '
              'targets/x86_64-linux/lib/stubs lib64/stubs')

Fragment(uuid='NORMALIZED-000268',
         path='/cmake/FindCUDA.cmake',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n        NO_DEFAULT_PATH)')

Fragment(uuid='NORMALIZED-000269',
         path='/cmake/FindCUDA.cmake',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n      if(_CUDA_CUDA_LIBRARY)')

Fragment(uuid='NORMALIZED-000270',
         path='/cmake/FindCUDA.cmake',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n        set(CUDA_CUDA_LIBRARY ${_CUDA_CUDA_LIBRARY})')

Fragment(uuid='NORMALIZED-000271',
         path='/cmake/FindCUDA.cmake',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n      endif()')

Fragment(uuid='NORMALIZED-000272',
         path='/cmake/FindCUDA.cmake',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n      find_library(CUDA_NVRTC_LIBRARY nvrtc')

Fragment(uuid='NORMALIZED-000273',
         path='/cmake/FindCUDA.cmake',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n        PATHS ${CUDA_TOOLKIT_ROOT_DIR}')

Fragment(uuid='NORMALIZED-000274',
         path='/cmake/FindCUDA.cmake',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        PATH_SUFFIXES lib lib64 targets/x86_64-linux/lib '
              'targets/x86_64-linux/lib/stubs lib64/stubs lib/x86_64-linux-gnu')

Fragment(uuid='NORMALIZED-000275',
         path='/cmake/FindCUDA.cmake',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n        NO_DEFAULT_PATH)')

Fragment(uuid='NORMALIZED-000276',
         path='/cmake/FindCUDA.cmake',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n      find_library(CUDA_CUDNN_LIBRARY cudnn')

Fragment(uuid='NORMALIZED-000277',
         path='/cmake/FindCUDA.cmake',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib64')

Fragment(uuid='NORMALIZED-000278',
         path='/cmake/FindCUDA.cmake',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib)')

Fragment(uuid='NORMALIZED-000279',
         path='/cmake/FindCUDA.cmake',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n      find_library(CUDA_CUBLAS_LIBRARY cublas')

Fragment(uuid='NORMALIZED-000280',
         path='/cmake/FindCUDA.cmake',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib64')

Fragment(uuid='NORMALIZED-000281',
         path='/cmake/FindCUDA.cmake',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n        ${CUDA_TOOLKIT_ROOT_DIR}/lib)')

Fragment(uuid='NORMALIZED-000282',
         path='/cmake/FindCUDA.cmake',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n    endif(MSVC)')

Fragment(uuid='NORMALIZED-000283',
         path='/cmake/FindCUDA.cmake',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    message(STATUS "Found CUDA_TOOLKIT_ROOT_DIR=" '
              '${CUDA_TOOLKIT_ROOT_DIR})')

Fragment(uuid='NORMALIZED-000284',
         path='/cmake/FindCUDA.cmake',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    message(STATUS "Found CUDA_CUDA_LIBRARY=" '
              '${CUDA_CUDA_LIBRARY})')

Fragment(uuid='NORMALIZED-000285',
         path='/cmake/FindCUDA.cmake',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    message(STATUS "Found CUDA_CUDART_LIBRARY=" '
              '${CUDA_CUDART_LIBRARY})')

Fragment(uuid='NORMALIZED-000286',
         path='/cmake/FindCUDA.cmake',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    message(STATUS "Found CUDA_NVRTC_LIBRARY=" '
              '${CUDA_NVRTC_LIBRARY})')

Fragment(uuid='NORMALIZED-000287',
         path='/cmake/FindCUDA.cmake',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    message(STATUS "Found CUDA_CUDNN_LIBRARY=" '
              '${CUDA_CUDNN_LIBRARY})')

Fragment(uuid='NORMALIZED-000288',
         path='/cmake/FindCUDA.cmake',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    message(STATUS "Found CUDA_CUBLAS_LIBRARY=" '
              '${CUDA_CUBLAS_LIBRARY})')

Fragment(uuid='NORMALIZED-000289',
         path='/cmake/FindCUDA.cmake',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n  endif(CUDA_FOUND)')

Fragment(uuid='NORMALIZED-000290',
         path='/cmake/FindCUDA.cmake',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\nendmacro(find_cuda)')

Fragment(uuid='NORMALIZED-000291',
         path='/cmake/FindCUDA.cmake',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000292',
         path='/config.cmake',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='set(USE_CUDA ON)\n'
              'set(USE_CUDNN ON)\n'
              'set(USE_DNNL OFF)\n'
              'set(BUILD_CPP_EXAMPLES OFF)\n')

Fragment(uuid='NORMALIZED-000293',
         path='/config.cmake',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /config.cmake\n')

Fragment(uuid='NORMALIZED-000294',
         path='/cpp_examples/bert.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /cpp_examples/bert.h\n')

Fragment(uuid='NORMALIZED-000295',
         path='/cpp_examples/bert.h',
         lineno=19,
         depth=2,
         type='function_decl',
         name='attention',
         text='TensorHandle attention(Graph* graph, const TensorHandle input, '
              'int heads) {\n'
              '  int d_model = input->dim[1];\n'
              '  int d_k = d_model / heads;\n'
              '  assert(input->dim[1] % heads == 0);\n'
              '  TensorHandle weights[3];\n'
              '  for (int i = 0; i < 3; i++) {\n'
              '    weights[i] = new_random_weight(graph, { d_model, d_model '
              '});\n'
              '  }\n'
              '  // compute query, key, value tensors\n'
              '  auto q = graph->matmul(input, weights[0]);\n'
              '  auto k = graph->matmul(input, weights[1]);\n'
              '  auto v = graph->matmul(input, weights[2]);\n'
              '  // reshape query, key, value to multiple heads\n'
              '  q = graph->reshape(q, { -1, heads, d_k });\n'
              '  k = graph->reshape(k, { -1, heads, d_k });\n'
              '  v = graph->reshape(v, { -1, heads, d_k });\n'
              '  // transpose query, key, value for batched matmul\n'
              '  q = graph->transpose(q, { 1, 0, 2 }, true);\n'
              '  k = graph->transpose(k, { 1, 2, 0 }, true);\n'
              '  v = graph->transpose(v, { 1, 0, 2 }, true);\n'
              '  // perform matrix multiplications\n'
              '  auto logits = graph->matmul(q, k);\n'
              '  auto output = graph->matmul(logits, v);\n'
              '  // transpose the output back\n'
              '  output = graph->transpose(output, { 1, 0, 2 }, true);\n'
              '  output = graph->reshape(output, { input->dim[0], '
              'input->dim[1] });\n'
              '\n'
              '  // a final linear layer\n'
              '  auto linear = new_random_weight(graph, { d_model, d_model '
              '});\n'
              '  output = graph->matmul(output, linear);\n'
              '  return output;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000296',
         path='/cpp_examples/bert.h',
         lineno=52,
         depth=2,
         type='function_decl',
         name='bert',
         text='Graph* bert(float alpha, int budget, bool printSubst = false) '
              '{\n'
              '  const int seq_length = 64;\n'
              '  const int hidden_dims = 1024;\n'
              '  Graph *graph = new Graph();\n'
              '  auto inp = new_input(graph, { seq_length, hidden_dims });\n'
              '  inp = graph->relu(inp);\n'
              '  auto t = inp;\n'
              '  for (int i = 0; i < 8; i++) {\n'
              '    t = attention(graph, t, 16);\n'
              '  }\n'
              '  return graph->optimize(alpha, budget, printSubst);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000297',
         path='/cpp_examples/dnn.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /cpp_examples/dnn.cc\n')

Fragment(uuid='NORMALIZED-000298',
         path='/cpp_examples/dnn.cc',
         lineno=27,
         depth=2,
         type='enum_decl',
         name='DNNModel',
         text='enum DNNModel {\n'
              '  None,\n'
              '  BERT,\n'
              '  NASNETA,\n'
              '  NASRNN,\n'
              '  Resnet50,\n'
              '  Resnext50,\n'
              '};\n')

Fragment(uuid='NORMALIZED-000299',
         path='/cpp_examples/dnn.cc',
         lineno=36,
         depth=2,
         type='function_decl',
         name='name2model',
         text='DNNModel name2model(std::string name) {\n'
              '  if (name == "bert") return BERT;\n'
              '  if (name == "nasnet-a") return NASNETA;\n'
              '  if (name == "nasrnn") return NASRNN;\n'
              '  if (name == "resnet50") return Resnet50;\n'
              '  if (name == "resnext50") return Resnext50;\n'
              '  return None;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000300',
         path='/cpp_examples/dnn.cc',
         lineno=45,
         depth=2,
         type='function_decl',
         name='parse_args',
         text='void parse_args(float& alpha,\n'
              '                int& budget,\n'
              '                std::string& exportFileName,\n'
              '                DNNModel& dnnModel,\n'
              '                int argc, char **argv) {\n'
              '  alpha = 1.05;\n'
              '  budget = 300;\n'
              '  exportFileName = "";\n'
              '  dnnModel = None;\n'
              '  for (int i = 1; i < argc; i++) {\n'
              '    if (!strcmp(argv[i], "--alpha")) {\n'
              '      alpha = std::atof(argv[++i]);\n'
              '      continue;\n'
              '    }\n'
              '    if (!strcmp(argv[i], "--budget")) {\n'
              '      budget = std::atoi(argv[++i]);\n'
              '      continue;\n'
              '    }\n'
              '    if (!strcmp(argv[i], "--export")) {\n'
              '      exportFileName = argv[++i];\n'
              '      continue;\n'
              '    }\n'
              '    if (!strcmp(argv[i], "--dnn")) {\n'
              '      dnnModel = name2model(std::string(argv[++i]));\n'
              '      continue;\n'
              '    }\n'
              '    fprintf(stderr, "Found unknown option!!\\n");\n'
              '    assert(false);\n'
              '  }\n'
              '  if (dnnModel == None) fprintf(stderr, "Must specify a DNN '
              'model!\\n");\n'
              '}\n')

Fragment(uuid='NORMALIZED-000301',
         path='/cpp_examples/dnn.cc',
         lineno=77,
         depth=2,
         type='function_decl',
         name='main',
         text='int main(int argc, char **argv) {\n'
              '  int budget;\n'
              '  float alpha;\n'
              '  std::string exportFileName;\n'
              '  DNNModel dnn = None;\n'
              '  parse_args(alpha, budget, exportFileName, dnn, argc, argv);\n'
              '  printf("DNN Model %d, alpha = %.4lf, budget = %d\\n", dnn, '
              'alpha, budget);\n'
              '\n'
              '  Graph* graph = nullptr;\n'
              '  switch (dnn) {\n'
              '    case BERT:\n'
              '      graph = bert(alpha, budget);\n'
              '      break;\n'
              '    case NASNETA:\n'
              '      graph = nasnet_a(alpha, budget);\n'
              '      break;\n'
              '    case NASRNN:\n'
              '      graph = nasrnn(alpha, budget);\n'
              '      break;\n'
              '    case Resnet50:\n'
              '      graph = resnet50(alpha, budget);\n'
              '      break;\n'
              '    case Resnext50:\n'
              '      graph = resnext50(alpha, budget);\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  if (!exportFileName.empty()) '
              'graph->export_to_file(exportFileName);\n'
              '  return 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000302',
         path='/cpp_examples/example_utils.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /cpp_examples/example_utils.h\n')

Fragment(uuid='NORMALIZED-000303',
         path='/cpp_examples/example_utils.h',
         lineno=28,
         depth=2,
         type='function_decl',
         name='new_random_data',
         text='DATATYPE* new_random_data(size_t size) {\n'
              '  // Random generator.\n'
              '  static std::random_device r;\n'
              '  static std::default_random_engine e(r());\n'
              '  static std::uniform_real_distribution<DATATYPE> dist;\n'
              '  auto gen = [&]() { return dist(e); };\n'
              '\n'
              '  auto data = new DATATYPE[size];\n'
              '  std::generate(data, data + size, gen);\n'
              '  return data;\n'
              '}\n')

Fragment(uuid='NORMALIZED-000304',
         path='/cpp_examples/example_utils.h',
         lineno=40,
         depth=2,
         type='function_decl',
         name='dims2size',
         text='size_t dims2size(const std::vector<int>& dims) {\n'
              '  return std::accumulate(dims.begin(), dims.end(), 1, '
              'std::multiplies<size_t>());\n'
              '}\n')

Fragment(uuid='NORMALIZED-000305',
         path='/cpp_examples/example_utils.h',
         lineno=44,
         depth=2,
         type='function_decl',
         name='new_input',
         text='inline TensorHandle new_input(Graph* graph, const '
              'std::vector<int>& dims) {\n'
              '  return graph->new_input(dims.size(), dims.data());\n'
              '}\n')

Fragment(uuid='NORMALIZED-000306',
         path='/cpp_examples/example_utils.h',
         lineno=48,
         depth=2,
         type='function_decl',
         name='new_weight',
         text='inline TensorHandle new_weight(Graph* graph, const '
              'std::vector<int>& dims, const DATATYPE* data) {\n'
              '  return graph->new_weight(dims.size(), dims.data(), data);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000307',
         path='/cpp_examples/example_utils.h',
         lineno=52,
         depth=2,
         type='function_decl',
         name='new_random_weight',
         text='inline TensorHandle new_random_weight(Graph* graph, const '
              'std::vector<int>& dims) {\n'
              '  return new_weight(graph, dims, '
              'new_random_data(dims2size(dims)));\n'
              '}\n')

Fragment(uuid='NORMALIZED-000308',
         path='/cpp_examples/nasnet_a.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /cpp_examples/nasnet_a.h\n')

Fragment(uuid='NORMALIZED-000309',
         path='/cpp_examples/nasrnn.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /cpp_examples/nasrnn.h\n')

Fragment(uuid='NORMALIZED-000310',
         path='/cpp_examples/resnet50.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /cpp_examples/resnet50.h\n')

Fragment(uuid='NORMALIZED-000311',
         path='/cpp_examples/resnet50.h',
         lineno=19,
         depth=2,
         type='function_decl',
         name='resnet_block',
         text='TensorHandle resnet_block(Graph* graph, const TensorHandle '
              'input, int strideH, int strideW, int outChannels) {\n'
              '  TensorHandle t = input;\n'
              '  auto w1 = new_random_weight(graph, { outChannels, t->dim[1], '
              '1, 1 });\n'
              '  t = graph->conv2d(t, w1, 1, 1, PD_MODE_SAME, AC_MODE_RELU);\n'
              '  auto w2 = new_random_weight(graph, { outChannels, t->dim[1], '
              '3, 3 });\n'
              '  t = graph->conv2d(t, w2, strideH, strideW, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '  auto w3 = new_random_weight(graph, { 4 * outChannels, '
              't->dim[1], 1, 1 });\n'
              '  t = graph->conv2d(t, w3, 1, 1, PD_MODE_SAME);\n'
              '  auto inp = input;\n'
              '  if (strideH > 1 || inp->dim[1] != 4 * outChannels) {\n'
              '    auto w4 = new_random_weight(graph, { 4 * outChannels, '
              'inp->dim[1], 1, 1 });\n'
              '    inp = graph->conv2d(inp, w4, strideH, strideW, '
              'PD_MODE_SAME, AC_MODE_RELU);\n'
              '  }\n'
              '  return graph->relu(graph->element(OP_EW_ADD, inp, t));\n'
              '}\n')

Fragment(uuid='NORMALIZED-000312',
         path='/cpp_examples/resnet50.h',
         lineno=35,
         depth=2,
         type='function_decl',
         name='resnet50',
         text='Graph* resnet50(float alpha, int budget, bool printSubst = '
              'false) {\n'
              '  Graph *graph = new Graph();\n'
              '  auto inp = new_input(graph, { 1, 64, 56, 56 });\n'
              '  auto t = inp;\n'
              '  int stride = 1;\n'
              '  for (int i = 0; i < 3; i++) {\n'
              '    t = resnet_block(graph, t, stride, stride, 64);\n'
              '  }\n'
              '  stride = 2;\n'
              '  for (int i = 0; i < 4; i++) {\n'
              '    t = resnet_block(graph, t, stride, stride, 128);\n'
              '    stride = 1;\n'
              '  }\n'
              '  stride = 2;\n'
              '  for (int i = 0; i < 6; i++) {\n'
              '    t = resnet_block(graph, t, stride, stride, 256);\n'
              '    stride = 1;\n'
              '  }\n'
              '  stride = 2;\n'
              '  for (int i = 0; i < 3; i++) {\n'
              '    t = resnet_block(graph, t, stride, stride, 512);\n'
              '    stride = 1;\n'
              '  }\n'
              '  return graph->optimize(alpha, budget, printSubst);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000313',
         path='/cpp_examples/resnext50.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /cpp_examples/resnext50.h\n')

Fragment(uuid='NORMALIZED-000314',
         path='/cpp_examples/resnext50.h',
         lineno=19,
         depth=2,
         type='function_decl',
         name='resnext_block',
         text='TensorHandle resnext_block(Graph* graph, const TensorHandle '
              'input, int strideH, int strideW, int outChannels, int groups) '
              '{\n'
              '  TensorHandle t = input;\n'
              '  auto w1 = new_random_weight(graph, { outChannels, t->dim[1], '
              '1, 1 });\n'
              '  t = graph->conv2d(t, w1, 1, 1, PD_MODE_SAME, AC_MODE_RELU);\n'
              '  auto w2 = new_random_weight(graph, { outChannels, t->dim[1] / '
              'groups, 3, 3 });\n'
              '  t = graph->conv2d(t, w2, strideH, strideW, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '  auto w3 = new_random_weight(graph, { 2 * outChannels, '
              't->dim[1], 1, 1 });\n'
              '  t = graph->conv2d(t, w3, 1, 1, PD_MODE_SAME);\n'
              '  auto inp = input;\n'
              '  if (strideH > 1 || inp->dim[1] != 2 * outChannels) {\n'
              '    auto w4 = new_random_weight(graph, { 2 * outChannels, '
              'inp->dim[1], 1, 1 });\n'
              '    inp = graph->conv2d(inp, w4, strideH, strideW, '
              'PD_MODE_SAME, AC_MODE_RELU);\n'
              '  }\n'
              '  return graph->relu(graph->element(OP_EW_ADD, inp, t));\n'
              '}\n')

Fragment(uuid='NORMALIZED-000315',
         path='/cpp_examples/resnext50.h',
         lineno=35,
         depth=2,
         type='function_decl',
         name='resnext50',
         text='Graph* resnext50(float alpha, int budget, bool printSubst = '
              'false) {\n'
              '  Graph *graph = new Graph();\n'
              '  auto inp = new_input(graph, { 1, 3, 224, 224 });\n'
              '  auto weight = new_random_weight(graph, { 64, 3, 7, 7 });\n'
              '  auto t = graph->conv2d(inp, weight, 2, 2, PD_MODE_SAME, '
              'AC_MODE_RELU);\n'
              '  t = graph->pool2d_max(t, 3, 3, 2, 2, PD_MODE_SAME);\n'
              '  int stride = 1;\n'
              '  for (int i = 0; i < 3; i++) {\n'
              '    t = resnext_block(graph, t, stride, stride, 128, 32);\n'
              '  }\n'
              '  stride = 2;\n'
              '  for (int i = 0; i < 4; i++) {\n'
              '    t = resnext_block(graph, t, stride, stride, 256, 32);\n'
              '    stride = 1;\n'
              '  }\n'
              '  stride = 2;\n'
              '  for (int i = 0; i < 6; i++) {\n'
              '    t = resnext_block(graph, t, stride, stride, 512, 32);\n'
              '    stride = 1;\n'
              '  }\n'
              '  stride = 2;\n'
              '  for (int i = 0; i < 3; i++) {\n'
              '    t = resnext_block(graph, t, stride, stride, 1024, 32);\n'
              '    stride = 1;\n'
              '  }\n'
              '  return graph->optimize(alpha, budget, printSubst);\n'
              '}\n')

Fragment(uuid='NORMALIZED-000316',
         path='/docker/Dockerfile',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# Copyright 2019 Stanford\n'
              '#\n'
              '# Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '# you may not use this file except in compliance with the '
              'License.\n'
              '# You may obtain a copy of the License at\n'
              '#\n'
              '#     http://www.apache.org/licenses/LICENSE-2.0\n'
              '#\n'
              '# Unless required by applicable law or agreed to in writing, '
              'software\n'
              '# distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              '# See the License for the specific language governing '
              'permissions and\n'
              '# limitations under the License.\n'
              '#\n')

Fragment(uuid='NORMALIZED-000317',
         path='/docker/Dockerfile',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /docker/Dockerfile\n')

Fragment(uuid='NORMALIZED-000318',
         path='/docker/Dockerfile',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\nFROM nvidia/cuda:10.0-devel-ubuntu16.04\n')

Fragment(uuid='NORMALIZED-000319',
         path='/docker/Dockerfile',
         lineno=17,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'RUN apt-get update && apt-get install -y '
              '--no-install-recommends wget sudo binutils git && \\\n'
              '    rm -rf /var/lib/apt/lists/*\n')

Fragment(uuid='NORMALIZED-000320',
         path='/docker/Dockerfile',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'RUN wget -c '
              'http://developer.download.nvidia.com/compute/redist/cudnn/v7.6.0/cudnn-10.0-linux-x64-v7.6.0.64.tgz '
              '&& \\\n'
              '    tar -xzf cudnn-10.0-linux-x64-v7.6.0.64.tgz -C /usr/local '
              '&& \\\n'
              '    rm cudnn-10.0-linux-x64-v7.6.0.64.tgz && \\\n'
              '    ldconfig\n')

Fragment(uuid='NORMALIZED-000321',
         path='/docker/Dockerfile',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'RUN wget -c '
              'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh '
              '&& \\')

Fragment(uuid='NORMALIZED-000322',
         path='/docker/Dockerfile',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    mv Miniconda3-latest-Linux-x86_64.sh '
              '~/Miniconda3-latest-Linux-x86_64.sh && \\')

Fragment(uuid='NORMALIZED-000323',
         path='/docker/Dockerfile',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n    chmod +x ~/Miniconda3-latest-Linux-x86_64.sh && \\')

Fragment(uuid='NORMALIZED-000324',
         path='/docker/Dockerfile',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n    ~/Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda && \\')

Fragment(uuid='NORMALIZED-000325',
         path='/docker/Dockerfile',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n    rm ~/Miniconda3-latest-Linux-x86_64.sh && \\')

Fragment(uuid='NORMALIZED-000326',
         path='/docker/Dockerfile',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n    /opt/conda/bin/conda upgrade --all && \\')

Fragment(uuid='NORMALIZED-000327',
         path='/docker/Dockerfile',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    /opt/conda/bin/conda install conda-build conda-verify && \\')

Fragment(uuid='NORMALIZED-000328',
         path='/docker/Dockerfile',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n    /opt/conda/bin/conda clean -ya')

Fragment(uuid='NORMALIZED-000329',
         path='/docker/Dockerfile',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000330',
         path='/docker/Dockerfile',
         lineno=34,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'RUN /opt/conda/bin/conda install cmake make\n'
              'RUN /opt/conda/bin/conda install -c conda-forge protobuf=3.9 '
              'numpy onnx\n'
              'RUN /opt/conda/bin/conda install -c anaconda cython\n')

Fragment(uuid='NORMALIZED-000331',
         path='/docker/Dockerfile',
         lineno=38,
         depth=1,
         type='documentation',
         name='',
         text='\nENV PATH /opt/conda/bin:$PATH\nENV TASO_HOME /usr/TASO/\n')

Fragment(uuid='NORMALIZED-000332',
         path='/docker/Dockerfile',
         lineno=41,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'COPY install_taso.sh /install/install_taso.sh\n'
              'RUN bash /install/install_taso.sh\n')

Fragment(uuid='NORMALIZED-000333',
         path='/docker/Dockerfile',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\nWORKDIR /usr/TASO\n#RUN chmod -R a+w /usr/TASO\n')

Fragment(uuid='NORMALIZED-000334',
         path='/docker/install_taso.sh',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='#!/bin/bash\n'
              '# Copyright 2019 Stanford\n'
              '#\n'
              '# Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '# you may not use this file except in compliance with the '
              'License.\n'
              '# You may obtain a copy of the License at\n'
              '#\n'
              '#     http://www.apache.org/licenses/LICENSE-2.0\n'
              '#\n'
              '# Unless required by applicable law or agreed to in writing, '
              'software\n'
              '# distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              '# See the License for the specific language governing '
              'permissions and\n'
              '# limitations under the License.\n'
              '#\n')

Fragment(uuid='NORMALIZED-000335',
         path='/docker/install_taso.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /docker/install_taso.sh\n')

Fragment(uuid='NORMALIZED-000336',
         path='/docker/install_taso.sh',
         lineno=16,
         depth=1,
         type='documentation',
         name='',
         text='\nset -e\nset -u\nset -o pipefail\n')

Fragment(uuid='NORMALIZED-000337',
         path='/docker/install_taso.sh',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'cd /usr\n'
              'git clone --recursive https://github.com/jiazhihao/TASO.git\n'
              'cd /usr/TASO\n'
              'mkdir -p build\n'
              'cd build\n'
              'cmake ..\n'
              'sudo make install -j10\n'
              'cd /usr/TASO/python\n'
              'python setup.py install\n')

Fragment(uuid='NORMALIZED-000338',
         path='/docker/run_docker.sh',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='#!/usr/bin/env bash\n'
              '# Copyright 2019 Stanford\n'
              '#\n'
              '# Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '# you may not use this file except in compliance with the '
              'License.\n'
              '# You may obtain a copy of the License at\n'
              '#\n'
              '#     http://www.apache.org/licenses/LICENSE-2.0\n'
              '#\n'
              '# Unless required by applicable law or agreed to in writing, '
              'software\n'
              '# distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              '# See the License for the specific language governing '
              'permissions and\n'
              '# limitations under the License.\n'
              '#\n')

Fragment(uuid='NORMALIZED-000339',
         path='/docker/run_docker.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /docker/run_docker.sh\n')

Fragment(uuid='NORMALIZED-000340',
         path='/docker/run_docker.sh',
         lineno=16,
         depth=1,
         type='documentation',
         name='',
         text='\nIMAGE_NAME=("$1")\nCOMMAND="bash"\n')

Fragment(uuid='NORMALIZED-000341',
         path='/docker/run_docker.sh',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\nWORKSPACE="/usr/TASO"\n')

Fragment(uuid='NORMALIZED-000342',
         path='/docker/run_docker.sh',
         lineno=21,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'echo "WORKSPACE: ${WORKSPACE}"\n'
              'echo "IMAGE NAME: ${IMAGE_NAME}"\n'
              'echo "DOCKER BINARY: nvidia-docker"\n')

Fragment(uuid='NORMALIZED-000343',
         path='/docker/run_docker.sh',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'nvidia-docker run --rm --pid=host \\\n'
              '    -it --net=host \\\n'
              '    ${IMAGE_NAME} \\\n'
              '    ${COMMAND[@]}\n')

Fragment(uuid='NORMALIZED-000344',
         path='/examples/batched_resnet.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import argparse\nimport onnx\n\nimport taso as ts\n')

Fragment(uuid='NORMALIZED-000345',
         path='/examples/batched_resnet.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-000346',
         path='/examples/batched_resnet.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/batched_resnet.py\n'
              '  Functions: main resnet_block resnet_model '
              'shared_resnet_model\n'
              '  Variables and usages: ArgumentParser action activation '
              'add_argument all_w alpha append argparse args budget conv2d '
              'default description dims export_onnx graph help input '
              'input_size new_graph new_input new_weight num_models '
              'num_shared_blocks onnx optimize optimized_model original_model '
              'out_channels padding parse_args parser range relu save '
              'save_graphs shared_w split strides taso tuple type use_shared_w '
              'weight weights\n')

Fragment(uuid='NORMALIZED-000347',
         path='/examples/batched_resnet.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-000348',
         path='/examples/batched_resnet.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-000349',
         path='/examples/batched_resnet.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def resnet_block(graph, input, strides, out_channels, '
              'shared_w=None):\n')

Fragment(uuid='NORMALIZED-000350',
         path='/examples/batched_resnet.py',
         lineno=6,
         depth=1,
         type='function',
         name='resnet_block',
         text='def resnet_block(graph, input, strides, out_channels, '
              'shared_w=None):\n')

Fragment(uuid='NORMALIZED-000351',
         path='/examples/batched_resnet.py',
         lineno=7,
         depth=0,
         type='module',
         name='',
         text='    if shared_w is not None:\n'
              '        w1 = shared_w[0]\n'
              '        w2 = shared_w[1]\n'
              '        w3 = shared_w[2]\n'
              '        w4 = shared_w[3]\n'
              '    else:\n'
              '        w1 = None\n'
              '        w2 = None\n'
              '        w3 = None\n'
              '        w4 = None\n')

Fragment(uuid='NORMALIZED-000352',
         path='/examples/batched_resnet.py',
         lineno=7,
         depth=1,
         type='function',
         name='resnet_block',
         text='    if shared_w is not None:\n'
              '        w1 = shared_w[0]\n'
              '        w2 = shared_w[1]\n'
              '        w3 = shared_w[2]\n'
              '        w4 = shared_w[3]\n'
              '    else:\n'
              '        w1 = None\n'
              '        w2 = None\n'
              '        w3 = None\n'
              '        w4 = None\n')

Fragment(uuid='NORMALIZED-000353',
         path='/examples/batched_resnet.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if w1 is None:\n'
              '        w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n')

Fragment(uuid='NORMALIZED-000354',
         path='/examples/batched_resnet.py',
         lineno=17,
         depth=1,
         type='function',
         name='resnet_block',
         text='\n'
              '    if w1 is None:\n'
              '        w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n')

Fragment(uuid='NORMALIZED-000355',
         path='/examples/batched_resnet.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='    if w2 is None:\n'
              '        w2 = '
              'graph.new_weight(dims=(out_channels,t.dim(1),3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n')

Fragment(uuid='NORMALIZED-000356',
         path='/examples/batched_resnet.py',
         lineno=23,
         depth=1,
         type='function',
         name='resnet_block',
         text='    if w2 is None:\n'
              '        w2 = '
              'graph.new_weight(dims=(out_channels,t.dim(1),3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n')

Fragment(uuid='NORMALIZED-000357',
         path='/examples/batched_resnet.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='    if w3 is None:\n'
              '        w3 = '
              'graph.new_weight(dims=(4*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n')

Fragment(uuid='NORMALIZED-000358',
         path='/examples/batched_resnet.py',
         lineno=28,
         depth=1,
         type='function',
         name='resnet_block',
         text='    if w3 is None:\n'
              '        w3 = '
              'graph.new_weight(dims=(4*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n')

Fragment(uuid='NORMALIZED-000359',
         path='/examples/batched_resnet.py',
         lineno=32,
         depth=0,
         type='module',
         name='',
         text='    if (strides[0]>1) or (input.dim(1) != out_channels*4):\n')

Fragment(uuid='NORMALIZED-000360',
         path='/examples/batched_resnet.py',
         lineno=32,
         depth=1,
         type='function',
         name='resnet_block',
         text='    if (strides[0]>1) or (input.dim(1) != out_channels*4):\n')

Fragment(uuid='NORMALIZED-000361',
         path='/examples/batched_resnet.py',
         lineno=33,
         depth=0,
         type='module',
         name='',
         text='        if w4 is None:\n'
              '            w4 = '
              'graph.new_weight(dims=(out_channels*4,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return (graph.relu(graph.add(input, t)), [w1, w2, w3, w4])\n')

Fragment(uuid='NORMALIZED-000362',
         path='/examples/batched_resnet.py',
         lineno=33,
         depth=1,
         type='function',
         name='resnet_block',
         text='        if w4 is None:\n'
              '            w4 = '
              'graph.new_weight(dims=(out_channels*4,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return (graph.relu(graph.add(input, t)), [w1, w2, w3, w4])')

Fragment(uuid='NORMALIZED-000363',
         path='/examples/batched_resnet.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def resnet_model(graph, input, all_w=None, '
              'num_shared_blocks=None):\n'
              '    if all_w is None:\n'
              '        use_shared_w = False\n'
              '        all_w = []\n'
              '    else:\n'
              '        use_shared_w = True\n'
              '    t = input\n'
              '    j = 0\n')

Fragment(uuid='NORMALIZED-000364',
         path='/examples/batched_resnet.py',
         lineno=40,
         depth=1,
         type='function',
         name='resnet_model',
         text='def resnet_model(graph, input, all_w=None, '
              'num_shared_blocks=None):\n'
              '    if all_w is None:\n'
              '        use_shared_w = False\n'
              '        all_w = []\n'
              '    else:\n'
              '        use_shared_w = True\n'
              '    t = input\n'
              '    j = 0\n')

Fragment(uuid='NORMALIZED-000365',
         path='/examples/batched_resnet.py',
         lineno=48,
         depth=0,
         type='module',
         name='',
         text='    for i in range(3):\n'
              '        if use_shared_w and j < num_shared_blocks:\n'
              '            t, weights = resnet_block(graph, t, (1,1), 64,\n'
              '                                      shared_w=all_w[j])\n'
              '        else:\n'
              '            t, weights = resnet_block(graph, t, (1,1), 64)\n'
              '            all_w.append(weights)\n'
              '        j += 1\n'
              '    strides = (2,2)\n')

Fragment(uuid='NORMALIZED-000366',
         path='/examples/batched_resnet.py',
         lineno=48,
         depth=1,
         type='function',
         name='resnet_model',
         text='    for i in range(3):\n'
              '        if use_shared_w and j < num_shared_blocks:\n'
              '            t, weights = resnet_block(graph, t, (1,1), 64,\n'
              '                                      shared_w=all_w[j])\n'
              '        else:\n'
              '            t, weights = resnet_block(graph, t, (1,1), 64)\n'
              '            all_w.append(weights)\n'
              '        j += 1\n'
              '    strides = (2,2)\n')

Fragment(uuid='NORMALIZED-000367',
         path='/examples/batched_resnet.py',
         lineno=57,
         depth=0,
         type='module',
         name='',
         text='    for i in range(4):\n'
              '        if use_shared_w and j < num_shared_blocks:\n'
              '            t, weights = resnet_block(graph, t, strides, 128,\n'
              '                                      shared_w=all_w[j])\n'
              '        else:\n'
              '            t, weights = resnet_block(graph, t, strides, 128)\n'
              '            all_w.append(weights)\n'
              '        j += 1\n'
              '        strides = (1,1)\n'
              '    return all_w\n')

Fragment(uuid='NORMALIZED-000368',
         path='/examples/batched_resnet.py',
         lineno=57,
         depth=1,
         type='function',
         name='resnet_model',
         text='    for i in range(4):\n'
              '        if use_shared_w and j < num_shared_blocks:\n'
              '            t, weights = resnet_block(graph, t, strides, 128,\n'
              '                                      shared_w=all_w[j])\n'
              '        else:\n'
              '            t, weights = resnet_block(graph, t, strides, 128)\n'
              '            all_w.append(weights)\n'
              '        j += 1\n'
              '        strides = (1,1)\n'
              '    return all_w')

Fragment(uuid='NORMALIZED-000369',
         path='/examples/batched_resnet.py',
         lineno=67,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def shared_resnet_model(graph, input, num_models, '
              'num_shared_blocks):\n'
              '    all_w = resnet_model(graph, input)\n'
              '    for i in range(1, num_models):\n'
              '        resnet_model(graph, input, all_w, num_shared_blocks)\n'
              '    return graph\n')

Fragment(uuid='NORMALIZED-000370',
         path='/examples/batched_resnet.py',
         lineno=68,
         depth=1,
         type='function',
         name='shared_resnet_model',
         text='def shared_resnet_model(graph, input, num_models, '
              'num_shared_blocks):\n'
              '    all_w = resnet_model(graph, input)\n'
              '    for i in range(1, num_models):\n'
              '        resnet_model(graph, input, all_w, num_shared_blocks)\n'
              '    return graph')

Fragment(uuid='NORMALIZED-000371',
         path='/examples/batched_resnet.py',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def main(args):\n'
              '    graph = ts.new_graph()\n'
              '    input_size = tuple([int(x) for x in '
              "args.input_size.split('x')])\n"
              '    input = graph.new_input(dims=input_size)\n'
              '    shared_resnet_model(graph, input, args.num_models, '
              'args.num_shared_blocks)\n')

Fragment(uuid='NORMALIZED-000372',
         path='/examples/batched_resnet.py',
         lineno=74,
         depth=1,
         type='function',
         name='main',
         text='def main(args):\n'
              '    graph = ts.new_graph()\n'
              '    input_size = tuple([int(x) for x in '
              "args.input_size.split('x')])\n"
              '    input = graph.new_input(dims=input_size)\n'
              '    shared_resnet_model(graph, input, args.num_models, '
              'args.num_shared_blocks)\n'
              '    if args.save_graphs:\n'
              '        original_model = ts.export_onnx(graph)\n'
              "        onnx.save(original_model, 'original_model.onnx')\n"
              '\n'
              '    new_graph = ts.optimize(graph, alpha=1.0, budget=1000)\n'
              '    if args.save_graphs:\n'
              '        optimized_model = ts.export_onnx(new_graph)\n'
              "        onnx.save(optimized_model, 'optimized_model.onnx')")

Fragment(uuid='NORMALIZED-000373',
         path='/examples/batched_resnet.py',
         lineno=79,
         depth=0,
         type='module',
         name='',
         text='    if args.save_graphs:\n'
              '        original_model = ts.export_onnx(graph)\n'
              "        onnx.save(original_model, 'original_model.onnx')\n"
              '\n'
              '    new_graph = ts.optimize(graph, alpha=1.0, budget=1000)\n')

Fragment(uuid='NORMALIZED-000374',
         path='/examples/batched_resnet.py',
         lineno=84,
         depth=0,
         type='module',
         name='',
         text='    if args.save_graphs:\n'
              '        optimized_model = ts.export_onnx(new_graph)\n'
              "        onnx.save(optimized_model, 'optimized_model.onnx')\n")

Fragment(uuid='NORMALIZED-000375',
         path='/examples/batched_resnet.py',
         lineno=86,
         depth=8,
         type='documentation',
         name='',
         text='optimized_model.onnx')

Fragment(uuid='NORMALIZED-000376',
         path='/examples/batched_resnet.py',
         lineno=87,
         depth=0,
         type='module',
         name='',
         text='\n'
              "if __name__=='__main__':\n"
              "    parser=argparse.ArgumentParser(description='')\n"
              "    parser.add_argument('--num_models', type=int, default=1,\n"
              "                        help='Number of parallel models')\n"
              "    parser.add_argument('--num_shared_blocks', type=int, "
              'default=0,\n'
              "                        help='Number of shared blocks')\n"
              "    parser.add_argument('--input_size', type=str, "
              "default='1x3x32x32',\n"
              '                        help=\'Input size ("NxCxHxW")\')\n'
              "    parser.add_argument('--save_graphs', action='store_true', "
              'default=False,\n'
              "                        help=('If set, saves original and "
              "optimized models in '\n"
              "                              'ONNX form'))\n"
              '    args = parser.parse_args()\n'
              '    main(args)\n')

Fragment(uuid='NORMALIZED-000377',
         path='/examples/batched_resnet.py',
         lineno=91,
         depth=7,
         type='documentation',
         name='',
         text='Number of parallel models')

Fragment(uuid='NORMALIZED-000378',
         path='/examples/batched_resnet.py',
         lineno=93,
         depth=7,
         type='documentation',
         name='',
         text='Number of shared blocks')

Fragment(uuid='NORMALIZED-000379',
         path='/examples/batched_resnet.py',
         lineno=95,
         depth=7,
         type='documentation',
         name='',
         text='Input size ("NxCxHxW")')

Fragment(uuid='NORMALIZED-000380',
         path='/examples/batched_resnet.py',
         lineno=97,
         depth=9,
         type='documentation',
         name='',
         text='If set, saves original and optimized models in ')

Fragment(uuid='NORMALIZED-000381',
         path='/examples/bert.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import taso as ts\n'
              '\n'
              'seq_length = 64\n'
              'hidden_dims = 1024\n'
              'batch_size = 16\n')

Fragment(uuid='NORMALIZED-000382',
         path='/examples/bert.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-000383',
         path='/examples/bert.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/bert.py\n'
              '  Functions: attention\n'
              '  Variables and usages: alpha append batch_size budget d_model '
              'dims graph heads hidden_dims input linear logits matmul '
              'new_graph new_input new_weight optimize output perm range relu '
              'reshape seq_length shape shuffle taso transpose weights\n')

Fragment(uuid='NORMALIZED-000384',
         path='/examples/bert.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def attention(graph, input, heads):\n'
              '    d_model = input.dim(1)\n'
              '    d_k = d_model // heads\n'
              '    assert input.dim(1) % heads == 0\n'
              '    weights = list()\n')

Fragment(uuid='NORMALIZED-000385',
         path='/examples/bert.py',
         lineno=7,
         depth=1,
         type='function',
         name='attention',
         text='def attention(graph, input, heads):\n'
              '    d_model = input.dim(1)\n'
              '    d_k = d_model // heads\n'
              '    assert input.dim(1) % heads == 0\n'
              '    weights = list()\n')

Fragment(uuid='NORMALIZED-000386',
         path='/examples/bert.py',
         lineno=12,
         depth=0,
         type='module',
         name='',
         text='    for i in range(3):\n'
              '        weights.append(graph.new_weight(dims=(d_model, '
              'd_model)))\n'
              '    # compute query, key, value tensors\n'
              '    q = graph.matmul(input, weights[0])\n'
              '    k = graph.matmul(input, weights[1])\n'
              '    v = graph.matmul(input, weights[2])\n'
              '    # reshape query, key, value to multiple heads\n'
              '    q = graph.reshape(q, shape=(ba')

Fragment(uuid='NORMALIZED-000387',
         path='/examples/bert.py',
         lineno=12,
         depth=1,
         type='function',
         name='attention',
         text='    for i in range(3):\n'
              '        weights.append(graph.new_weight(dims=(d_model, '
              'd_model)))\n'
              '    # compute query, key, value tensors\n'
              '    q = graph.matmul(input, weights[0])\n'
              '    k = graph.matmul(input, weights[1])\n'
              '    v = graph.matmul(input, weights[2])\n'
              '    # reshape query, key,')

Fragment(uuid='NORMALIZED-000388',
         path='/examples/bert.py',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='# compute query, key, value tensors')

Fragment(uuid='NORMALIZED-000389',
         path='/examples/bert.py',
         lineno=18,
         depth=1,
         type='function',
         name='attention',
         text=' value to multiple heads\n'
              '    q = graph.reshape(q, shape=(batch_size, 64,16,64))\n'
              '    k = graph.reshape(k, shape=(batch_size, 64,16,64))\n'
              '    v = graph.reshape(v, shape=(batch_size, 64,16,64))\n'
              '    # transpose query, key, value for batched matmul\n'
              '    q = graph.transpose(q, perm=')

Fragment(uuid='NORMALIZED-000390',
         path='/examples/bert.py',
         lineno=18,
         depth=2,
         type='documentation',
         name='',
         text='# reshape query, key, value to multiple heads')

Fragment(uuid='NORMALIZED-000391',
         path='/examples/bert.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text='tch_size, 64,16,64))\n'
              '    k = graph.reshape(k, shape=(batch_size, 64,16,64))\n'
              '    v = graph.reshape(v, shape=(batch_size, 64,16,64))\n'
              '    # transpose query, key, value for batched matmul\n'
              '    q = graph.transpose(q, perm=(0,2,1,3), shuffle=True)\n'
              '    k = graph.transpose(k, perm=(0,2,1,3), shuffle=True)\n'
              '    v = graph.transpose(v, perm=(0,2')

Fragment(uuid='NORMALIZED-000392',
         path='/examples/bert.py',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='# transpose query, key, value for batched matmul')

Fragment(uuid='NORMALIZED-000393',
         path='/examples/bert.py',
         lineno=23,
         depth=1,
         type='function',
         name='attention',
         text='(0,2,1,3), shuffle=True)\n'
              '    k = graph.transpose(k, perm=(0,2,1,3), shuffle=True)\n'
              '    v = graph.transpose(v, perm=(0,2,1,3), shuffle=True)\n'
              '    # perform matrix multiplications\n'
              '    logits = graph.matmul(q, k)\n'
              '    output = graph.matmul(logits, v)\n'
              '    # transpose the output bac')

Fragment(uuid='NORMALIZED-000394',
         path='/examples/bert.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text=',1,3), shuffle=True)\n'
              '    # perform matrix multiplications\n'
              '    logits = graph.matmul(q, k)\n'
              '    output = graph.matmul(logits, v)\n'
              '    # transpose the output back\n'
              '    output = graph.transpose(output,perm=(0,2,1,3), '
              'shuffle=True)\n'
              '    output = graph.reshape(output, shape=(batch_size * 64, '
              '1024))\n'
              '\n'
              '    # a final linear layer\n'
              '    linear = gr')

Fragment(uuid='NORMALIZED-000395',
         path='/examples/bert.py',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='# perform matrix multiplications')

Fragment(uuid='NORMALIZED-000396',
         path='/examples/bert.py',
         lineno=29,
         depth=1,
         type='function',
         name='attention',
         text='k\n'
              '    output = graph.transpose(output,perm=(0,2,1,3), '
              'shuffle=True)\n'
              '    output = graph.reshape(output, shape=(batch_size * 64, '
              '1024))\n'
              '\n'
              '    # a final linear layer\n'
              '    linear = graph.new_weight(dims=(d_model, d_model))\n'
              '    output = graph.matmul(input, linear)\n'
              '    return output')

Fragment(uuid='NORMALIZED-000397',
         path='/examples/bert.py',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='# transpose the output back')

Fragment(uuid='NORMALIZED-000398',
         path='/examples/bert.py',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='# a final linear layer')

Fragment(uuid='NORMALIZED-000399',
         path='/examples/bert.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='aph.new_weight(dims=(d_model, d_model))\n'
              '    output = graph.matmul(input, linear)\n'
              '    return output\n'
              '\n'
              'graph = ts.new_graph()\n'
              'input = graph.new_input(dims=(batch_size * seq_length, '
              'hidden_dims))\n'
              'input = graph.relu(input)\n'
              't = input\n'
              'for i in range(8):\n'
              '    t = attention(graph, t, 16)\n'
              '\n'
              'new_graph = ts.optimize(graph, alpha=1.0, budget=100)\n')

Fragment(uuid='NORMALIZED-000400',
         path='/examples/enas.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import argparse\n'
              'import taso as ts\n'
              'import onnx\n'
              '\n'
              'NUM_LAYERS = 12\n')

Fragment(uuid='NORMALIZED-000401',
         path='/examples/enas.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-000402',
         path='/examples/enas.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/enas.py\n'
              '  Functions: add_skips create_architecture create_layer_weights '
              'get_dims main parse_arcs separable_conv\n'
              '  Variables and usages: ArgumentParser NUM_LAYERS ValueError '
              'action activation add_argument all_arcs all_w alpha append arcs '
              'argparse args avgpool2d budget channels conv2d conv_w default '
              'description dims enumerate export_onnx graph help input '
              'input_file input_size kernel_dim kernel_size kernels layer '
              'layer_id layers line maxpool2d min_size new_graph new_input '
              'new_weight num_layers num_models onnx onnx_model open optimize '
              'padding parse_args parser range save save_models size sizes '
              'skips spec split strides strip taso tuple type weight\n')

Fragment(uuid='NORMALIZED-000403',
         path='/examples/enas.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-000404',
         path='/examples/enas.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-000405',
         path='/examples/enas.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def create_layer_weights(graph, num_layers, channels):\n'
              '    """Instantiates weights for each layer.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        num_layers: The number of layers.\n'
              '        channels: The number of channels.\n'
              '\n'
              '       Returns:\n'
              '        A list of lists of weights (one list for each layer).\n'
              '    """\n'
              '    all_w = []\n')

Fragment(uuid='NORMALIZED-000406',
         path='/examples/enas.py',
         lineno=7,
         depth=1,
         type='function',
         name='create_layer_weights',
         text='def create_layer_weights(graph, num_layers, channels):\n'
              '    """Instantiates weights for each layer.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        num_layers: The number of layers.\n'
              '        channels: The number of channels.\n'
              '\n'
              '       Returns:\n'
              '        A list of lists of weights (one list for each layer).\n'
              '    """\n'
              '    all_w = []\n')

Fragment(uuid='NORMALIZED-000407',
         path='/examples/enas.py',
         lineno=8,
         depth=4,
         type='documentation',
         name='',
         text='Instantiates weights for each layer.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        num_layers: The number of layers.\n'
              '        channels: The number of channels.\n'
              '\n'
              '       Returns:\n'
              '        A list of lists of weights (one list for each layer).\n'
              '    ')

Fragment(uuid='NORMALIZED-000408',
         path='/examples/enas.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text='    for i in range(num_layers):\n'
              '        w = []\n'
              '        # conv_3x3\n'
              '        w.append(graph.new_weight(dims=(channels, channels, 3, '
              '3))) # conv_3x3\n'
              '        # conv_5x5\n'
              '        w.append(graph.new_weight(dims=(channels, channels, 5, '
              '5))) # conv_5x5\n'
              '        # separable conv_3x3\n'
              '        w.append(grap')

Fragment(uuid='NORMALIZED-000409',
         path='/examples/enas.py',
         lineno=19,
         depth=1,
         type='function',
         name='create_layer_weights',
         text='    for i in range(num_layers):\n'
              '        w = []\n'
              '        # conv_3x3\n'
              '        w.append(graph.new_weight(dims=(channels, channels, 3, '
              '3))) # conv_3x3\n'
              '        # conv_5x5\n'
              '        w.append(graph.new_weight(dims=(channels, channels, 5, '
              '5))) # conv_5x5\n'
              '        # separable conv_3x3\n'
              '        w.append(grap')

Fragment(uuid='NORMALIZED-000410',
         path='/examples/enas.py',
         lineno=25,
         depth=4,
         type='documentation',
         name='',
         text='# separable conv_3x3')

Fragment(uuid='NORMALIZED-000411',
         path='/examples/enas.py',
         lineno=26,
         depth=0,
         type='module',
         name='',
         text='h.new_weight(dims=(channels, 1, 3, 3)))\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 3, 3)))\n'
              '        # separable conv_5x5\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 5, 5)))\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 5, 5)))\n'
              '\n'
              '        all_w.append(w)\n'
              '    return all_w\n')

Fragment(uuid='NORMALIZED-000412',
         path='/examples/enas.py',
         lineno=26,
         depth=1,
         type='function',
         name='create_layer_weights',
         text='h.new_weight(dims=(channels, 1, 3, 3)))\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 3, 3)))\n'
              '        # separable conv_5x5\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 5, 5)))\n'
              '        w.append(graph.new_weight(dims=(channels, 1, 5, 5)))\n'
              '\n'
              '        all_w.append(w)\n'
              '    return all_w')

Fragment(uuid='NORMALIZED-000413',
         path='/examples/enas.py',
         lineno=28,
         depth=4,
         type='documentation',
         name='',
         text='# separable conv_5x5')

Fragment(uuid='NORMALIZED-000414',
         path='/examples/enas.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_dims(t):\n'
              '    """Returns the size of a tensor."""\n'
              '    return tuple([t.dim(i) for i in range(4)])\n')

Fragment(uuid='NORMALIZED-000415',
         path='/examples/enas.py',
         lineno=35,
         depth=1,
         type='function',
         name='get_dims',
         text='def get_dims(t):\n'
              '    """Returns the size of a tensor."""\n'
              '    return tuple([t.dim(i) for i in range(4)])')

Fragment(uuid='NORMALIZED-000416',
         path='/examples/enas.py',
         lineno=36,
         depth=4,
         type='documentation',
         name='',
         text='Returns the size of a tensor.')

Fragment(uuid='NORMALIZED-000417',
         path='/examples/enas.py',
         lineno=38,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def add_skips(graph, layers, skips):\n'
              '    """Adds the output from the specified skip connections.\n'
              '\n'
              '       Computes the input to the next layer by summing together '
              'the outputs\n'
              '       from the specified skip connections with the output from '
              'the previous\n'
              '       layer. Downsamples outputs with appropriately sized '
              'average pooling\n'
              '       layers to ensure that all tensors have the same size '
              'before summing.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '    ')

Fragment(uuid='NORMALIZED-000418',
         path='/examples/enas.py',
         lineno=39,
         depth=1,
         type='function',
         name='add_skips',
         text='def add_skips(graph, layers, skips):\n'
              '    """Adds the output from the specified skip connections.\n'
              '\n'
              '       Computes the input to the next layer by summing together '
              'the outputs\n'
              '       from the specified skip connections with the output from '
              'the previous\n'
              '       layer. Downsamples outputs with appropriately sized '
              'average pooling\n'
              '       layers to ensure that all tensors have the same size '
              'before summing.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '     ')

Fragment(uuid='NORMALIZED-000419',
         path='/examples/enas.py',
         lineno=40,
         depth=4,
         type='documentation',
         name='',
         text='Adds the output from the specified skip connections.\n'
              '\n'
              '       Computes the input to the next layer by summing together '
              'the outputs\n'
              '       from the specified skip connections with the output from '
              'the previous\n'
              '       layer. Downsamples outputs with appropriately sized '
              'average pooling\n'
              '       layers to ensure that all tensors have the same size '
              'before summing.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        layers: A list of the output tensors of each layer.\n'
              '        skips: A list where element i is 1 if the current '
              'layer\n'
              '               has a skip connection to layer i and 0 '
              'otherwise.\n'
              '\n'
              '       Returns:\n'
              '        The sum of all skip connections and the output of the '
              'previous layer.\n'
              '    ')

Fragment(uuid='NORMALIZED-000420',
         path='/examples/enas.py',
         lineno=49,
         depth=0,
         type='module',
         name='',
         text='    layers: A list of the output tensors of each layer.\n'
              '        skips: A list where element i is 1 if the current '
              'layer\n'
              '               has a skip connection to layer i and 0 '
              'otherwise.\n'
              '\n'
              '       Returns:\n'
              '        The sum of all skip connections and the output of the '
              'previous layer.\n'
              '    """\n'
              '    t = layers[-1]\n'
              '    sizes = \\\n'
              '        set([get_dims(layers[i]) for i in range(len(skips)) if '
              'skips[i] == 1])\n'
              '    sizes.add(get_dims(t))\n'
              '    min_size = min(sizes)\n')

Fragment(uuid='NORMALIZED-000421',
         path='/examples/enas.py',
         lineno=49,
         depth=1,
         type='function',
         name='add_skips',
         text='   layers: A list of the output tensors of each layer.\n'
              '        skips: A list where element i is 1 if the current '
              'layer\n'
              '               has a skip connection to layer i and 0 '
              'otherwise.\n'
              '\n'
              '       Returns:\n'
              '        The sum of all skip connections and the output of the '
              'previous layer.\n'
              '    """\n'
              '    t = layers[-1]\n'
              '    sizes = \\\n'
              '        set([get_dims(layers[i]) for i in range(len(skips)) if '
              'skips[i] == 1])\n'
              '    sizes.add(get_dims(t))\n'
              '    min_size = min(sizes)\n')

Fragment(uuid='NORMALIZED-000422',
         path='/examples/enas.py',
         lineno=61,
         depth=0,
         type='module',
         name='',
         text='    for i in range(len(skips)):\n'
              '        if skips[i] == 1:\n'
              '            size = get_dims(layers[i])\n'
              '            if size > min_size:\n'
              '                kernel_size = size[-1] - 2 * (min_size[-1] - '
              '1)\n'
              '                t = graph.add(\n'
              '                        graph.avgpool2d(input=layers[i],\n'
              '                                        kernels=[kernel_size, '
              'kernel_size],\n'
              '                                        strides=[2, 2],\n'
              '                                        padding="VALID"),\n'
              '                        t)\n'
              '            else:\n'
              '                t = graph.add(layers[i], t)\n'
              '    return t\n')

Fragment(uuid='NORMALIZED-000423',
         path='/examples/enas.py',
         lineno=61,
         depth=1,
         type='function',
         name='add_skips',
         text='    for i in range(len(skips)):\n'
              '        if skips[i] == 1:\n'
              '            size = get_dims(layers[i])\n'
              '            if size > min_size:\n'
              '                kernel_size = size[-1] - 2 * (min_size[-1] - '
              '1)\n'
              '                t = graph.add(\n'
              '                        graph.avgpool2d(input=layers[i],\n'
              '                                        kernels=[kernel_size, '
              'kernel_size],\n'
              '                                        strides=[2, 2],\n'
              '                                        padding="VALID"),\n'
              '                        t)\n'
              '            else:\n'
              '                t = graph.add(layers[i], t)\n'
              '    return t')

Fragment(uuid='NORMALIZED-000424',
         path='/examples/enas.py',
         lineno=75,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def separable_conv(graph, input, all_w, kernel_dim, layer_id):\n'
              '    """Defines a separable convolution.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '        kernel_dim: The size of the kernel.\n'
              '        layer_id: The ID of the layer for which the separable '
              'conv is generated.\n'
              '\n'
              '       Returns:\n'
              '        The output of the separable conv.\n'
              '    """\n')

Fragment(uuid='NORMALIZED-000425',
         path='/examples/enas.py',
         lineno=76,
         depth=1,
         type='function',
         name='separable_conv',
         text='def separable_conv(graph, input, all_w, kernel_dim, layer_id):\n'
              '    """Defines a separable convolution.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '        kernel_dim: The size of the kernel.\n'
              '        layer_id: The ID of the layer for which the separable '
              'conv is generated.\n'
              '\n'
              '       Returns:\n'
              '        The output of the separable conv.\n'
              '    """\n')

Fragment(uuid='NORMALIZED-000426',
         path='/examples/enas.py',
         lineno=77,
         depth=4,
         type='documentation',
         name='',
         text='Defines a separable convolution.\n'
              '\n'
              '       Args:\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '        kernel_dim: The size of the kernel.\n'
              '        layer_id: The ID of the layer for which the separable '
              'conv is generated.\n'
              '\n'
              '       Returns:\n'
              '        The output of the separable conv.\n'
              '    ')

Fragment(uuid='NORMALIZED-000427',
         path='/examples/enas.py',
         lineno=89,
         depth=0,
         type='module',
         name='',
         text='    if kernel_dim == 3:\n'
              '        conv_w = all_w[layer_id][2:4]\n'
              '    elif kernel_dim == 5:\n'
              '        conv_w = all_w[layer_id][4:]\n'
              '    else:\n'
              "        raise ValueError('Invalid kernel dim for '\n"
              "                         'separable conv: %d' % (kernel_dim))\n"
              '    t = graph.conv2d(input=input, weight=conv_w[0], strides=(1, '
              '1),\n'
              '                     padding="SAME", activation="RELU")\n'
              '    return graph.conv2d(input=t, weight=conv_w[1], strides=(1, '
              '1),\n'
              '                            padding="SAME", activation="RELU")\n')

Fragment(uuid='NORMALIZED-000428',
         path='/examples/enas.py',
         lineno=89,
         depth=1,
         type='function',
         name='separable_conv',
         text='    if kernel_dim == 3:\n'
              '        conv_w = all_w[layer_id][2:4]\n'
              '    elif kernel_dim == 5:\n'
              '        conv_w = all_w[layer_id][4:]\n'
              '    else:\n'
              "        raise ValueError('Invalid kernel dim for '\n"
              "                         'separable conv: %d' % (kernel_dim))\n"
              '    t = graph.conv2d(input=input, weight=conv_w[0], strides=(1, '
              '1),\n'
              '                     padding="SAME", activation="RELU")\n'
              '    return graph.conv2d(input=t, weight=conv_w[1], strides=(1, '
              '1),\n'
              '                            padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-000429',
         path='/examples/enas.py',
         lineno=94,
         depth=11,
         type='documentation',
         name='',
         text='Invalid kernel dim for ')

Fragment(uuid='NORMALIZED-000430',
         path='/examples/enas.py',
         lineno=100,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def create_architecture(arc, graph, input, all_w):\n'
              '    """Creates an architecture with shared weights.\n'
              '\n'
              '       Instantiates a new architecture using the specified '
              'string\n'
              '       representation. Each layer is one of six operators: '
              'conv_3x3,\n'
              '       separable conv_3x3, conv_5x5, separable conv_5x5, '
              'average poooling,\n'
              '       or max pooling (see <https://github.com/melodyguan/enas> '
              'for details).\n')

Fragment(uuid='NORMALIZED-000431',
         path='/examples/enas.py',
         lineno=101,
         depth=1,
         type='function',
         name='create_architecture',
         text='def create_architecture(arc, graph, input, all_w):\n'
              '    """Creates an architecture with shared weights.\n'
              '\n'
              '       Instantiates a new architecture using the specified '
              'string\n'
              '       representation. Each layer is one of six operators: '
              'conv_3x3,\n'
              '       separable conv_3x3, conv_5x5, separable conv_5x5, '
              'average poooling,\n'
              '       or max pooling (see <https://github.com/melodyguan/enas> '
              'for details).\n')

Fragment(uuid='NORMALIZED-000432',
         path='/examples/enas.py',
         lineno=102,
         depth=4,
         type='documentation',
         name='',
         text='Creates an architecture with shared weights.\n'
              '\n'
              '       Instantiates a new architecture using the specified '
              'string\n'
              '       representation. Each layer is one of six operators: '
              'conv_3x3,\n'
              '       separable conv_3x3, conv_5x5, separable conv_5x5, '
              'average poooling,\n'
              '       or max pooling (see <https://github.com/melodyguan/enas> '
              'for details).\n')

Fragment(uuid='NORMALIZED-000433',
         path='/examples/enas.py',
         lineno=108,
         depth=0,
         type='module',
         name='',
         text='       Each stateful layer is initialized with pre-defined '
              'weights which will be\n'
              '       shared with parallel architectures.\n'
              '\n'
              '       Args:\n'
              '        arc: The string representation of the architecture.\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '    """\n'
              '    t = input\n'
              "    layers = arc.split('|')\n"
              '\n'
              '    y = []\n')

Fragment(uuid='NORMALIZED-000434',
         path='/examples/enas.py',
         lineno=108,
         depth=1,
         type='function',
         name='create_architecture',
         text='       Each stateful layer is initialized with pre-defined '
              'weights which will be\n'
              '       shared with parallel architectures.\n'
              '\n'
              '       Args:\n'
              '        arc: The string representation of the architecture.\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '    """\n'
              '    t = input\n'
              "    layers = arc.split('|')\n"
              '\n'
              '    y = []\n')

Fragment(uuid='NORMALIZED-000435',
         path='/examples/enas.py',
         lineno=108,
         depth=4,
         type='documentation',
         name='',
         text='       Each stateful layer is initialized with pre-defined '
              'weights which will be\n'
              '       shared with parallel architectures.\n'
              '\n'
              '       Args:\n'
              '        arc: The string representation of the architecture.\n'
              '        graph: The TASO graph.\n'
              '        input: The input tensor.\n'
              '        all_w: A list of lists of weights (one list for each '
              'layer).\n'
              '    ')

Fragment(uuid='NORMALIZED-000436',
         path='/examples/enas.py',
         lineno=121,
         depth=0,
         type='module',
         name='',
         text='    for i, layer in enumerate(layers):\n'
              "        spec = [int(x) for x in layer.split(' ')]\n")

Fragment(uuid='NORMALIZED-000437',
         path='/examples/enas.py',
         lineno=121,
         depth=1,
         type='function',
         name='create_architecture',
         text='    for i, layer in enumerate(layers):\n'
              "        spec = [int(x) for x in layer.split(' ')]\n")

Fragment(uuid='NORMALIZED-000438',
         path='/examples/enas.py',
         lineno=123,
         depth=0,
         type='module',
         name='',
         text='        if i > 0:\n'
              '            t = add_skips(graph, y, spec[1:])\n')

Fragment(uuid='NORMALIZED-000439',
         path='/examples/enas.py',
         lineno=123,
         depth=1,
         type='function',
         name='create_architecture',
         text='        if i > 0:\n'
              '            t = add_skips(graph, y, spec[1:])\n')

Fragment(uuid='NORMALIZED-000440',
         path='/examples/enas.py',
         lineno=125,
         depth=0,
         type='module',
         name='',
         text='        if spec[0] == 0:\n'
              '           t = graph.conv2d(input=t, weight=all_w[i][0], '
              'strides=(1, 1),\n'
              '                            padding="SAME", activation="RELU")\n')

Fragment(uuid='NORMALIZED-000441',
         path='/examples/enas.py',
         lineno=125,
         depth=1,
         type='function',
         name='create_architecture',
         text='        if spec[0] == 0:\n'
              '           t = graph.conv2d(input=t, weight=all_w[i][0], '
              'strides=(1, 1),\n'
              '                            padding="SAME", activation="RELU")\n')

Fragment(uuid='NORMALIZED-000442',
         path='/examples/enas.py',
         lineno=128,
         depth=0,
         type='module',
         name='',
         text='        elif spec[0] == 1:\n'
              '           t = separable_conv(graph, t, all_w, kernel_dim=3, '
              'layer_id=i)\n')

Fragment(uuid='NORMALIZED-000443',
         path='/examples/enas.py',
         lineno=128,
         depth=1,
         type='function',
         name='create_architecture',
         text='        elif spec[0] == 1:\n'
              '           t = separable_conv(graph, t, all_w, kernel_dim=3, '
              'layer_id=i)\n')

Fragment(uuid='NORMALIZED-000444',
         path='/examples/enas.py',
         lineno=130,
         depth=0,
         type='module',
         name='',
         text='        elif spec[0] == 2:\n'
              '           t = graph.conv2d(input=t, weight=all_w[i][1], '
              'strides=(1, 1),\n'
              '                            padding="SAME", activation="RELU")\n')

Fragment(uuid='NORMALIZED-000445',
         path='/examples/enas.py',
         lineno=130,
         depth=1,
         type='function',
         name='create_architecture',
         text='        elif spec[0] == 2:\n'
              '           t = graph.conv2d(input=t, weight=all_w[i][1], '
              'strides=(1, 1),\n'
              '                            padding="SAME", activation="RELU")\n')

Fragment(uuid='NORMALIZED-000446',
         path='/examples/enas.py',
         lineno=133,
         depth=0,
         type='module',
         name='',
         text='        elif spec[0] == 3:\n'
              '           t = separable_conv(graph, t, all_w, kernel_dim=5, '
              'layer_id=i)\n')

Fragment(uuid='NORMALIZED-000447',
         path='/examples/enas.py',
         lineno=133,
         depth=1,
         type='function',
         name='create_architecture',
         text='        elif spec[0] == 3:\n'
              '           t = separable_conv(graph, t, all_w, kernel_dim=5, '
              'layer_id=i)\n')

Fragment(uuid='NORMALIZED-000448',
         path='/examples/enas.py',
         lineno=135,
         depth=0,
         type='module',
         name='',
         text='        elif spec[0] == 4:\n'
              '           t = graph.avgpool2d(input=t, kernels=[3, 3], '
              'strides=[2, 2],\n'
              '                               padding="SAME", '
              'activation="NONE")\n')

Fragment(uuid='NORMALIZED-000449',
         path='/examples/enas.py',
         lineno=135,
         depth=1,
         type='function',
         name='create_architecture',
         text='        elif spec[0] == 4:\n'
              '           t = graph.avgpool2d(input=t, kernels=[3, 3], '
              'strides=[2, 2],\n'
              '                               padding="SAME", '
              'activation="NONE")\n')

Fragment(uuid='NORMALIZED-000450',
         path='/examples/enas.py',
         lineno=138,
         depth=0,
         type='module',
         name='',
         text='        elif spec[0] == 5:\n'
              '           t = graph.maxpool2d(input=t, kernels=[3, 3], '
              'strides=[2, 2],\n'
              '                               padding="SAME", '
              'activation="NONE")\n'
              '        y.append(t)\n')

Fragment(uuid='NORMALIZED-000451',
         path='/examples/enas.py',
         lineno=138,
         depth=1,
         type='function',
         name='create_architecture',
         text='        elif spec[0] == 5:\n'
              '           t = graph.maxpool2d(input=t, kernels=[3, 3], '
              'strides=[2, 2],\n'
              '                               padding="SAME", '
              'activation="NONE")\n'
              '        y.append(t)')

Fragment(uuid='NORMALIZED-000452',
         path='/examples/enas.py',
         lineno=142,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def parse_arcs(input_file):\n'
              '    """Extracts the architecture string representations from an '
              'input file."""\n'
              '    arcs = []\n'
              "    with open(input_file, 'r') as f:\n"
              '        for line in f:\n'
              '            arcs.append(line.strip())\n'
              '    return arcs\n')

Fragment(uuid='NORMALIZED-000453',
         path='/examples/enas.py',
         lineno=143,
         depth=1,
         type='function',
         name='parse_arcs',
         text='def parse_arcs(input_file):\n'
              '    """Extracts the architecture string representations from an '
              'input file."""\n'
              '    arcs = []\n'
              "    with open(input_file, 'r') as f:\n"
              '        for line in f:\n'
              '            arcs.append(line.strip())\n'
              '    return arcs')

Fragment(uuid='NORMALIZED-000454',
         path='/examples/enas.py',
         lineno=144,
         depth=4,
         type='documentation',
         name='',
         text='Extracts the architecture string representations from an input '
              'file.')

Fragment(uuid='NORMALIZED-000455',
         path='/examples/enas.py',
         lineno=150,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def main(args):\n'
              '    graph = ts.new_graph()\n'
              '    input_size = tuple([int(x) for x in '
              "args.input_size.split('x')])\n"
              '    input = graph.new_input(dims=input_size)\n'
              '    all_w = create_layer_weights(graph, NUM_LAYERS, '
              'args.channels)\n'
              '    all_arcs = parse_arcs(args.input_file)\n'
              '    if args.num_models is not None:\n'
              '        all_arcs = all_arcs[:args.num_models]\n'
              '\n'
              '    # stem conv\n'
              '    t = graph.conv2d(input=input,\n'
              '                     '
              'weight=graph.new_weight(dims=(args.channels,\n'
              '                                                   '
              'input.dim(1), 1, 1)),\n'
              '                     strides=(1, 1), padding="SAME", '
              'activation="RELU")\n')

Fragment(uuid='NORMALIZED-000456',
         path='/examples/enas.py',
         lineno=151,
         depth=1,
         type='function',
         name='main',
         text='def main(args):\n'
              '    graph = ts.new_graph()\n'
              '    input_size = tuple([int(x) for x in '
              "args.input_size.split('x')])\n"
              '    input = graph.new_input(dims=input_size)\n'
              '    all_w = create_layer_weights(graph, NUM_LAYERS, '
              'args.channels)\n'
              '    all_arcs = parse_arcs(args.input_file)\n'
              '    if args.num_models is not None:\n'
              '        all_arcs = all_arcs[:args.num_models]\n'
              '\n'
              '    # stem conv\n'
              '    t = graph.conv2d(input=input,\n'
              '                     '
              'weight=graph.new_weight(dims=(args.channels,\n'
              '                                                   '
              'input.dim(1), 1, 1)),\n'
              '                     strides=(1, 1), padding="SAME", '
              'activation="RELU")\n')

Fragment(uuid='NORMALIZED-000457',
         path='/examples/enas.py',
         lineno=165,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    for arc in all_arcs:\n'
              '        create_architecture(arc, graph, t, all_w)\n')

Fragment(uuid='NORMALIZED-000458',
         path='/examples/enas.py',
         lineno=165,
         depth=1,
         type='function',
         name='main',
         text='\n'
              '    for arc in all_arcs:\n'
              '        create_architecture(arc, graph, t, all_w)\n'
              '\n'
              '    if args.save_models:\n'
              '        onnx_model = ts.export_onnx(graph)\n'
              "        onnx.save(onnx_model, 'original_model.onnx')\n"
              '\n'
              '    new_graph = ts.optimize(graph, alpha=1.0, budget=1000)\n'
              '    if args.save_models:\n'
              '        onnx_model = ts.export_onnx(new_graph)\n'
              "        onnx.save(onnx_model, 'optimized_model.onnx')")

Fragment(uuid='NORMALIZED-000459',
         path='/examples/enas.py',
         lineno=168,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if args.save_models:\n'
              '        onnx_model = ts.export_onnx(graph)\n'
              "        onnx.save(onnx_model, 'original_model.onnx')\n"
              '\n'
              '    new_graph = ts.optimize(graph, alpha=1.0, budget=1000)\n')

Fragment(uuid='NORMALIZED-000460',
         path='/examples/enas.py',
         lineno=174,
         depth=0,
         type='module',
         name='',
         text='    if args.save_models:\n'
              '        onnx_model = ts.export_onnx(new_graph)\n'
              "        onnx.save(onnx_model, 'optimized_model.onnx')\n")

Fragment(uuid='NORMALIZED-000461',
         path='/examples/enas.py',
         lineno=176,
         depth=8,
         type='documentation',
         name='',
         text='optimized_model.onnx')

Fragment(uuid='NORMALIZED-000462',
         path='/examples/enas.py',
         lineno=177,
         depth=0,
         type='module',
         name='',
         text='\n'
              "if __name__=='__main__':\n"
              '    parser = argparse.ArgumentParser(\n'
              "        description='Runs architectures sampled by the ENAS "
              "algorithm in TASO')\n"
              "    parser.add_argument('--input_file', type=str,\n"
              "                        default='examples/enas_arcs.txt',\n"
              "                        help='Input file specifying ENAS "
              "models')\n"
              "    parser.add_argument('--num_models', type=int, "
              'default=None,\n'
              "                        help=('Number of models to fuse '\n"
              "                              '(fuses all models if not s")

Fragment(uuid='NORMALIZED-000463',
         path='/examples/enas.py',
         lineno=180,
         depth=8,
         type='documentation',
         name='',
         text='Runs architectures sampled by the ENAS algorithm in TASO')

Fragment(uuid='NORMALIZED-000464',
         path='/examples/enas.py',
         lineno=182,
         depth=7,
         type='documentation',
         name='',
         text='examples/enas_arcs.txt')

Fragment(uuid='NORMALIZED-000465',
         path='/examples/enas.py',
         lineno=183,
         depth=7,
         type='documentation',
         name='',
         text='Input file specifying ENAS models')

Fragment(uuid='NORMALIZED-000466',
         path='/examples/enas.py',
         lineno=185,
         depth=9,
         type='documentation',
         name='',
         text='Number of models to fuse ')

Fragment(uuid='NORMALIZED-000467',
         path='/examples/enas.py',
         lineno=186,
         depth=0,
         type='module',
         name='',
         text="pecified)'))\n"
              "    parser.add_argument('--input_size', type=str, "
              "default='1x3x32x32',\n"
              '                        help=\'Input size ("NxCxHxW")\')\n'
              "    parser.add_argument('--channels', type=int, default=32,\n"
              "                        help='Number of channels')\n"
              "    parser.add_argument('--save_models', action='store_true', "
              'default=False,\n'
              "                        help=('If set, saves original and "
              "optimized models in '\n"
              "                              'ONNX form'))\n"
              '    args = parser.parse_args()\n'
              '    main(args)\n')

Fragment(uuid='NORMALIZED-000468',
         path='/examples/enas.py',
         lineno=186,
         depth=9,
         type='documentation',
         name='',
         text='(fuses all models if not specified)')

Fragment(uuid='NORMALIZED-000469',
         path='/examples/enas.py',
         lineno=188,
         depth=7,
         type='documentation',
         name='',
         text='Input size ("NxCxHxW")')

Fragment(uuid='NORMALIZED-000470',
         path='/examples/enas.py',
         lineno=192,
         depth=9,
         type='documentation',
         name='',
         text='If set, saves original and optimized models in ')

Fragment(uuid='NORMALIZED-000471',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000472',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1|5 ')

Fragment(uuid='NORMALIZED-000473',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000474',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000475',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000476',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000477',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1|1 ')

Fragment(uuid='NORMALIZED-000478',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000479',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000480',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000481',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000482',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000483',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000484',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000485',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000486',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1|2 ')

Fragment(uuid='NORMALIZED-000487',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000488',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000489',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000490',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000491',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000492',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1|4 ')

Fragment(uuid='NORMALIZED-000493',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000494',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000495',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000496',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000497',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000498',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000499',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1|4 ')

Fragment(uuid='NORMALIZED-000500',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000501',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000502',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000503',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000504',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000505',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000506',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000507',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1|2 ')

Fragment(uuid='NORMALIZED-000508',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000509',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000510',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000511',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000512',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000513',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000514',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000515',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000516',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000517',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000518',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000519',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000520',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000521',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000522',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000523',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000524',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000525',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000526',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1|0 ')

Fragment(uuid='NORMALIZED-000527',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000528',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000529',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000530',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000531',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000532',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000533',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000534',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000535',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000536',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000537',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='1')

Fragment(uuid='NORMALIZED-000538',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=3,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000539',
         path='/examples/enas_arcs.txt',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /examples/enas_arcs.txt\n')

Fragment(uuid='NORMALIZED-000540',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='4|3 ')

Fragment(uuid='NORMALIZED-000541',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1|0 ')

Fragment(uuid='NORMALIZED-000542',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000543',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000544',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000545',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000546',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-000547',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000548',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000549',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000550',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000551',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000552',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000553',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000554',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000555',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-000556',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000557',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000558',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000559',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000560',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000561',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000562',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000563',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000564',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000565',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000566',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000567',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000568',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0|1 ')

Fragment(uuid='NORMALIZED-000569',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000570',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000571',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000572',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000573',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000574',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000575',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000576',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1|2 ')

Fragment(uuid='NORMALIZED-000577',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000578',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000579',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000580',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000581',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000582',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000583',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000584',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000585',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1|4 ')

Fragment(uuid='NORMALIZED-000586',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000587',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000588',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000589',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000590',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000591',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000592',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000593',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000594',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000595',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000596',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000597',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000598',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000599',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000600',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000601',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000602',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000603',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000604',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000605',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000606',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='0')

Fragment(uuid='NORMALIZED-000607',
         path='/examples/enas_arcs.txt',
         lineno=2,
         depth=3,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000608',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-000609',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000610',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000611',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000612',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000613',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000614',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0|1 ')

Fragment(uuid='NORMALIZED-000615',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000616',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000617',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000618',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0|3 ')

Fragment(uuid='NORMALIZED-000619',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000620',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000621',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000622',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000623',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1|3 ')

Fragment(uuid='NORMALIZED-000624',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000625',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000626',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000627',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000628',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000629',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1|2 ')

Fragment(uuid='NORMALIZED-000630',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000631',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000632',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000633',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000634',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000635',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000636',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-000637',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000638',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000639',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000640',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000641',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000642',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000643',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000644',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1|0 ')

Fragment(uuid='NORMALIZED-000645',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000646',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000647',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000648',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000649',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000650',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000651',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000652',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000653',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000654',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000655',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000656',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000657',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000658',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000659',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000660',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000661',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000662',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000663',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='1|2 ')

Fragment(uuid='NORMALIZED-000664',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000665',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000666',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000667',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000668',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000669',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000670',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000671',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000672',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000673',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000674',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='0')

Fragment(uuid='NORMALIZED-000675',
         path='/examples/enas_arcs.txt',
         lineno=3,
         depth=3,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000676',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-000677',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0|1 ')

Fragment(uuid='NORMALIZED-000678',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000679',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000680',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000681',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000682',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1|1 ')

Fragment(uuid='NORMALIZED-000683',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000684',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000685',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000686',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0|1 ')

Fragment(uuid='NORMALIZED-000687',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000688',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000689',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000690',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000691',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000692',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000693',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000694',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000695',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000696',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000697',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000698',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000699',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000700',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000701',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000702',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000703',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000704',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000705',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000706',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000707',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000708',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000709',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000710',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000711',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000712',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0|3 ')

Fragment(uuid='NORMALIZED-000713',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000714',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000715',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000716',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000717',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000718',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000719',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000720',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000721',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000722',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000723',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000724',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000725',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000726',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000727',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000728',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000729',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000730',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000731',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-000732',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000733',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000734',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000735',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000736',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000737',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000738',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000739',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000740',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000741',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000742',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='0')

Fragment(uuid='NORMALIZED-000743',
         path='/examples/enas_arcs.txt',
         lineno=4,
         depth=3,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000744',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='4|0 ')

Fragment(uuid='NORMALIZED-000745',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000746',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000747',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0|1 ')

Fragment(uuid='NORMALIZED-000748',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000749',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000750',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000751',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000752',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000753',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000754',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000755',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000756',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000757',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000758',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000759',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000760',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000761',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000762',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000763',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000764',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000765',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1|3 ')

Fragment(uuid='NORMALIZED-000766',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000767',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000768',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000769',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000770',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000771',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000772',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000773',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000774',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000775',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000776',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000777',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000778',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000779',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000780',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000781',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000782',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000783',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000784',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000785',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000786',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000787',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000788',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000789',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1|0 ')

Fragment(uuid='NORMALIZED-000790',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000791',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000792',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000793',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000794',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000795',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000796',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000797',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000798',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000799',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000800',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000801',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000802',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000803',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000804',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000805',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000806',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000807',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000808',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000809',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000810',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='1')

Fragment(uuid='NORMALIZED-000811',
         path='/examples/enas_arcs.txt',
         lineno=5,
         depth=3,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000812',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000813',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1|2 ')

Fragment(uuid='NORMALIZED-000814',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000815',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000816',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000817',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000818',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1|4 ')

Fragment(uuid='NORMALIZED-000819',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000820',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000821',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000822',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000823',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000824',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000825',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000826',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000827',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000828',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000829',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000830',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000831',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000832',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000833',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-000834',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000835',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000836',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000837',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000838',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000839',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000840',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0|3 ')

Fragment(uuid='NORMALIZED-000841',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000842',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000843',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000844',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000845',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000846',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000847',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000848',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000849',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000850',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000851',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000852',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000853',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000854',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000855',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000856',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000857',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1|0 ')

Fragment(uuid='NORMALIZED-000858',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000859',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000860',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000861',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000862',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000863',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000864',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000865',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000866',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000867',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000868',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000869',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000870',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000871',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000872',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000873',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000874',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000875',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000876',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000877',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000878',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='0')

Fragment(uuid='NORMALIZED-000879',
         path='/examples/enas_arcs.txt',
         lineno=6,
         depth=3,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000880',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000881',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000882',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000883',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-000884',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000885',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000886',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000887',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000888',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000889',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000890',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-000891',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000892',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000893',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000894',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000895',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000896',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000897',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000898',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000899',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000900',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000901',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000902',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000903',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000904',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000905',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000906',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000907',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000908',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000909',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000910',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000911',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000912',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000913',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000914',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000915',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000916',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000917',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000918',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000919',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000920',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000921',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000922',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000923',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000924',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000925',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1|2 ')

Fragment(uuid='NORMALIZED-000926',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000927',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000928',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000929',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000930',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000931',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000932',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000933',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000934',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000935',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1|4 ')

Fragment(uuid='NORMALIZED-000936',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000937',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000938',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000939',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000940',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000941',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000942',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000943',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000944',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000945',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000946',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='0')

Fragment(uuid='NORMALIZED-000947',
         path='/examples/enas_arcs.txt',
         lineno=7,
         depth=3,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-000948',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='4|2 ')

Fragment(uuid='NORMALIZED-000949',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-000950',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000951',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-000952',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000953',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000954',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0|1 ')

Fragment(uuid='NORMALIZED-000955',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000956',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000957',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000958',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1|1 ')

Fragment(uuid='NORMALIZED-000959',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000960',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000961',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000962',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000963',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1|2 ')

Fragment(uuid='NORMALIZED-000964',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000965',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000966',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000967',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000968',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000969',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-000970',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000971',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000972',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000973',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000974',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000975',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000976',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1|3 ')

Fragment(uuid='NORMALIZED-000977',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000978',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000979',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000980',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000981',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000982',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000983',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000984',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1|2 ')

Fragment(uuid='NORMALIZED-000985',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000986',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000987',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000988',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000989',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000990',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000991',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000992',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-000993',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1|4 ')

Fragment(uuid='NORMALIZED-000994',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000995',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000996',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000997',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000998',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-000999',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001000',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001001',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001002',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001003',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1|0 ')

Fragment(uuid='NORMALIZED-001004',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001005',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001006',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001007',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001008',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001009',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001010',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001011',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001012',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001013',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001014',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='0')

Fragment(uuid='NORMALIZED-001015',
         path='/examples/enas_arcs.txt',
         lineno=8,
         depth=3,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001016',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='2|0 ')

Fragment(uuid='NORMALIZED-001017',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-001018',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001019',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-001020',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001021',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001022',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0|0 ')

Fragment(uuid='NORMALIZED-001023',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001024',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001025',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001026',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-001027',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001028',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001029',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001030',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001031',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1|3 ')

Fragment(uuid='NORMALIZED-001032',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001033',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001034',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001035',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001036',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001037',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1|0 ')

Fragment(uuid='NORMALIZED-001038',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001039',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001040',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001041',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001042',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001043',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001044',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0|3 ')

Fragment(uuid='NORMALIZED-001045',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001046',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001047',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001048',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001049',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001050',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001051',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001052',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-001053',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001054',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001055',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001056',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001057',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001058',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001059',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001060',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001061',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0|1 ')

Fragment(uuid='NORMALIZED-001062',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001063',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001064',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001065',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001066',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001067',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001068',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001069',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001070',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001071',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0|3 ')

Fragment(uuid='NORMALIZED-001072',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001073',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001074',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001075',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001076',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001077',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001078',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001079',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001080',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001081',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001082',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='0')

Fragment(uuid='NORMALIZED-001083',
         path='/examples/enas_arcs.txt',
         lineno=9,
         depth=3,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001084',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='5|0 ')

Fragment(uuid='NORMALIZED-001085',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1|4 ')

Fragment(uuid='NORMALIZED-001086',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001087',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-001088',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001089',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001090',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1|3 ')

Fragment(uuid='NORMALIZED-001091',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001092',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001093',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001094',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0|1 ')

Fragment(uuid='NORMALIZED-001095',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001096',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001097',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001098',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001099',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-001100',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001101',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001102',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001103',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001104',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001105',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-001106',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001107',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001108',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001109',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001110',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001111',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001112',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0|5 ')

Fragment(uuid='NORMALIZED-001113',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001114',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001115',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001116',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001117',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001118',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001119',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001120',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0|2 ')

Fragment(uuid='NORMALIZED-001121',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001122',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001123',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001124',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001125',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001126',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001127',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001128',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001129',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1|0 ')

Fragment(uuid='NORMALIZED-001130',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001131',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001132',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001133',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001134',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001135',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001136',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001137',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001138',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001139',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0|4 ')

Fragment(uuid='NORMALIZED-001140',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001141',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001142',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001143',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001144',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001145',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001146',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1 ')

Fragment(uuid='NORMALIZED-001147',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001148',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001149',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='0 ')

Fragment(uuid='NORMALIZED-001150',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=3,
         type='documentation',
         name='',
         text='1')

Fragment(uuid='NORMALIZED-001151',
         path='/examples/enas_arcs.txt',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001152',
         path='/examples/eval_groups.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import xflow\n'
              '\n'
              'graph = xflow.new_graph()\n'
              'input = graph.new_input(dims=(1,512,28,28))\n'
              'input = graph.maxpool2d(input=input, kernels=(1,1), '
              'strides=(1,1), padding="SAME")\n'
              '# Printing the performance of different multi-branch '
              'convolutions\n'
              'graph.print_measurements()\n'
              'i = 1\n'
              'while i <= 32:\n'
              '    print("Num. Convs Per Grop = {}".format(i))\n'
              '    weig')

Fragment(uuid='NORMALIZED-001153',
         path='/examples/eval_groups.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001154',
         path='/examples/eval_groups.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/eval_groups.py\n'
              '  Variables and usages: activation conv2d dims format graph '
              'input kernels maxpool2d new_graph new_input new_weight padding '
              'print print_measurements strides weight xflow\n')

Fragment(uuid='NORMALIZED-001155',
         path='/examples/eval_groups.py',
         lineno=6,
         depth=0,
         type='documentation',
         name='',
         text='# Printing the performance of different multi-branch '
              'convolutions')

Fragment(uuid='NORMALIZED-001156',
         path='/examples/eval_groups.py',
         lineno=10,
         depth=8,
         type='documentation',
         name='',
         text='Num. Convs Per Grop = {}')

Fragment(uuid='NORMALIZED-001157',
         path='/examples/eval_groups.py',
         lineno=11,
         depth=0,
         type='module',
         name='',
         text='ht = graph.new_weight(dims=(512,512//i,3,3))\n'
              '    t = '
              'graph.conv2d(input=input,weight=weight,strides=(1,1),padding="SAME", '
              'activation="RELU")\n'
              '    i *= 2\n'
              '\n'
              '#weight1 = graph.new_weight(dims=(256,8,3,3))\n'
              '#t1 = graph.conv2d(input=input,weight=weight1,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#weight2 = graph.new_weight(dims=(256,16,3,')

Fragment(uuid='NORMALIZED-001158',
         path='/examples/eval_groups.py',
         lineno=15,
         depth=0,
         type='documentation',
         name='',
         text='#weight1 = graph.new_weight(dims=(256,8,3,3))')

Fragment(uuid='NORMALIZED-001159',
         path='/examples/eval_groups.py',
         lineno=16,
         depth=0,
         type='documentation',
         name='',
         text='#t1 = graph.conv2d(input=input,weight=weight1,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001160',
         path='/examples/eval_groups.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='3))\n'
              '#t2 = graph.conv2d(input=input,weight=weight2,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#weight3 = graph.new_weight(dims=(256,32,3,3))\n'
              '#t3 = graph.conv2d(input=input,weight=weight3,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#weight4 = graph.new_weight(dims=(256,64,3,3))\n'
              '#t4 = graph.conv2d(input=input,weight=weight4,s')

Fragment(uuid='NORMALIZED-001161',
         path='/examples/eval_groups.py',
         lineno=17,
         depth=0,
         type='documentation',
         name='',
         text='#weight2 = graph.new_weight(dims=(256,16,3,3))')

Fragment(uuid='NORMALIZED-001162',
         path='/examples/eval_groups.py',
         lineno=18,
         depth=0,
         type='documentation',
         name='',
         text='#t2 = graph.conv2d(input=input,weight=weight2,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001163',
         path='/examples/eval_groups.py',
         lineno=19,
         depth=0,
         type='documentation',
         name='',
         text='#weight3 = graph.new_weight(dims=(256,32,3,3))')

Fragment(uuid='NORMALIZED-001164',
         path='/examples/eval_groups.py',
         lineno=20,
         depth=0,
         type='documentation',
         name='',
         text='#t3 = graph.conv2d(input=input,weight=weight3,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001165',
         path='/examples/eval_groups.py',
         lineno=21,
         depth=0,
         type='documentation',
         name='',
         text='#weight4 = graph.new_weight(dims=(256,64,3,3))')

Fragment(uuid='NORMALIZED-001166',
         path='/examples/eval_groups.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='trides=(1,1), padding="SAME", activation="RELU")\n'
              '#weight5 = graph.new_weight(dims=(256,128,3,3))\n'
              '#t5 = graph.conv2d(input=input,weight=weight5,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#weight6 = graph.new_weight(dims=(256,256,3,3))\n'
              '#t6 = graph.conv2d(input=input,weight=weight6,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '\n')

Fragment(uuid='NORMALIZED-001167',
         path='/examples/eval_groups.py',
         lineno=22,
         depth=0,
         type='documentation',
         name='',
         text='#t4 = graph.conv2d(input=input,weight=weight4,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001168',
         path='/examples/eval_groups.py',
         lineno=23,
         depth=0,
         type='documentation',
         name='',
         text='#weight5 = graph.new_weight(dims=(256,128,3,3))')

Fragment(uuid='NORMALIZED-001169',
         path='/examples/eval_groups.py',
         lineno=24,
         depth=0,
         type='documentation',
         name='',
         text='#t5 = graph.conv2d(input=input,weight=weight5,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001170',
         path='/examples/eval_groups.py',
         lineno=25,
         depth=0,
         type='documentation',
         name='',
         text='#weight6 = graph.new_weight(dims=(256,256,3,3))')

Fragment(uuid='NORMALIZED-001171',
         path='/examples/eval_groups.py',
         lineno=26,
         depth=0,
         type='documentation',
         name='',
         text='#t6 = graph.conv2d(input=input,weight=weight6,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001172',
         path='/examples/eval_joint.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import xflow\n'
              'import onnx\n'
              '\n'
              '# 1. evaluate the performance by just considering substitution '
              'optimizations\n'
              'print("Measuring the performance of graph substitution '
              'optimizations (average of 1000 runs)")\n'
              "graph = xflow.load('bert_graphs/bert_subst_nw.onnx')\n"
              'print("XFlow: end-to-end inference time = '
              '{}ms".format(graph.run_time()))\n'
              'print()\n'
              '\n'
              '#2. evaluate the performance by just performing data layout '
              'optimizations\n'
              'print("Measuring the performance of data layout '
              'optimizations")\n'
              "graph = xflow.load('bert_graphs/bert_layout_nw.onnx')\n"
              'print("XFlow: end-to-end inferen')

Fragment(uuid='NORMALIZED-001173',
         path='/examples/eval_joint.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001174',
         path='/examples/eval_joint.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/eval_joint.py\n'
              '  Variables and usages: format graph load onnx print run_time '
              'xflow\n')

Fragment(uuid='NORMALIZED-001175',
         path='/examples/eval_joint.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001176',
         path='/examples/eval_joint.py',
         lineno=4,
         depth=0,
         type='documentation',
         name='',
         text='# 1. evaluate the performance by just considering substitution '
              'optimizations')

Fragment(uuid='NORMALIZED-001177',
         path='/examples/eval_joint.py',
         lineno=5,
         depth=4,
         type='documentation',
         name='',
         text='Measuring the performance of graph substitution optimizations '
              '(average of 1000 runs)')

Fragment(uuid='NORMALIZED-001178',
         path='/examples/eval_joint.py',
         lineno=6,
         depth=5,
         type='documentation',
         name='',
         text='bert_graphs/bert_subst_nw.onnx')

Fragment(uuid='NORMALIZED-001179',
         path='/examples/eval_joint.py',
         lineno=7,
         depth=6,
         type='documentation',
         name='',
         text='XFlow: end-to-end inference time = {}ms')

Fragment(uuid='NORMALIZED-001180',
         path='/examples/eval_joint.py',
         lineno=10,
         depth=0,
         type='documentation',
         name='',
         text='#2. evaluate the performance by just performing data layout '
              'optimizations')

Fragment(uuid='NORMALIZED-001181',
         path='/examples/eval_joint.py',
         lineno=11,
         depth=4,
         type='documentation',
         name='',
         text='Measuring the performance of data layout optimizations')

Fragment(uuid='NORMALIZED-001182',
         path='/examples/eval_joint.py',
         lineno=12,
         depth=5,
         type='documentation',
         name='',
         text='bert_graphs/bert_layout_nw.onnx')

Fragment(uuid='NORMALIZED-001183',
         path='/examples/eval_joint.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='ce time = {}ms".format(graph.run_time()))\n'
              'print()\n'
              '\n'
              '#3. evaluate the performance by sequential optimizations\n'
              'print("Measuring the performance of sequential optimizations")\n'
              "graph = xflow.load('bert_graphs/bert_sequential_nw.onnx')\n"
              'print("XFlow: end-to-end inference time = '
              '{}ms".format(graph.run_time()))\n'
              'print()\n'
              '\n'
              '#4. evaluate the performance by joint optimizations\n'
              'print("Measuring the performance of joint optimizations")\n'
              "graph = xflow.load('bert_graphs/bert_xflow_nw.onnx')\n"
              'print("XFlow: end-to-end inference time = '
              '{}ms".format(graph.run_time()))\n'
              'print()\n'
              '\n')

Fragment(uuid='NORMALIZED-001184',
         path='/examples/eval_joint.py',
         lineno=13,
         depth=6,
         type='documentation',
         name='',
         text='XFlow: end-to-end inference time = {}ms')

Fragment(uuid='NORMALIZED-001185',
         path='/examples/eval_joint.py',
         lineno=16,
         depth=0,
         type='documentation',
         name='',
         text='#3. evaluate the performance by sequential optimizations')

Fragment(uuid='NORMALIZED-001186',
         path='/examples/eval_joint.py',
         lineno=17,
         depth=4,
         type='documentation',
         name='',
         text='Measuring the performance of sequential optimizations')

Fragment(uuid='NORMALIZED-001187',
         path='/examples/eval_joint.py',
         lineno=18,
         depth=5,
         type='documentation',
         name='',
         text='bert_graphs/bert_sequential_nw.onnx')

Fragment(uuid='NORMALIZED-001188',
         path='/examples/eval_joint.py',
         lineno=19,
         depth=6,
         type='documentation',
         name='',
         text='XFlow: end-to-end inference time = {}ms')

Fragment(uuid='NORMALIZED-001189',
         path='/examples/eval_joint.py',
         lineno=22,
         depth=0,
         type='documentation',
         name='',
         text='#4. evaluate the performance by joint optimizations')

Fragment(uuid='NORMALIZED-001190',
         path='/examples/eval_joint.py',
         lineno=23,
         depth=4,
         type='documentation',
         name='',
         text='Measuring the performance of joint optimizations')

Fragment(uuid='NORMALIZED-001191',
         path='/examples/eval_joint.py',
         lineno=24,
         depth=5,
         type='documentation',
         name='',
         text='bert_graphs/bert_xflow_nw.onnx')

Fragment(uuid='NORMALIZED-001192',
         path='/examples/eval_joint.py',
         lineno=25,
         depth=6,
         type='documentation',
         name='',
         text='XFlow: end-to-end inference time = {}ms')

Fragment(uuid='NORMALIZED-001193',
         path='/examples/inceptionv3.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import taso\n')

Fragment(uuid='NORMALIZED-001194',
         path='/examples/inceptionv3.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001195',
         path='/examples/inceptionv3.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/inceptionv3.py\n'
              '  Functions: conv2d get_pads inception_a inception_b '
              'inception_c inception_d inception_e inception_front '
              'inception_logits inception_v3 pool2d\n'
              '  Variables and usages: NotImplemented activation alpha '
              'avgpool2d batch_size budget channels_7x7 concat dims graph '
              'input kernel kernels maxpool2d new_graph new_input new_weight '
              'opt_graph optimize out_channels padding pads pool_features '
              'pool_type print run_time stride strides taso v1x1 v3x3 v3x3a '
              'v3x3b v3x3dbl v3x3dbla v3x3dblb v5x5 v7x7 v7x7dbl v7x7x3 v_pool '
              'weight\n')

Fragment(uuid='NORMALIZED-001196',
         path='/examples/inceptionv3.py',
         lineno=2,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_pads(kernel, padding):\n'
              '    if sum(padding) == 0 and sum(kernel) > 2:\n'
              '        pads = "VALID"\n'
              '    else:\n'
              '        pads = "SAME"\n'
              '    return pads\n')

Fragment(uuid='NORMALIZED-001197',
         path='/examples/inceptionv3.py',
         lineno=3,
         depth=1,
         type='function',
         name='get_pads',
         text='def get_pads(kernel, padding):\n'
              '    if sum(padding) == 0 and sum(kernel) > 2:\n'
              '        pads = "VALID"\n'
              '    else:\n'
              '        pads = "SAME"\n'
              '    return pads')

Fragment(uuid='NORMALIZED-001198',
         path='/examples/inceptionv3.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def conv2d(graph, v, out_channels, kernel=(1, 1), stride=(1, '
              '1), padding=(0, 0)):\n'
              '    w = graph.new_weight(dims=(out_channels, v.dim(1), '
              '*kernel))\n'
              '    v = graph.conv2d(input=v, weight=w, strides=stride, '
              'padding=get_pads(kernel, padding), activation="RELU")\n'
              '    return v\n')

Fragment(uuid='NORMALIZED-001199',
         path='/examples/inceptionv3.py',
         lineno=10,
         depth=1,
         type='function',
         name='conv2d',
         text='def conv2d(graph, v, out_channels, kernel=(1, 1), stride=(1, '
              '1), padding=(0, 0)):\n'
              '    w = graph.new_weight(dims=(out_channels, v.dim(1), '
              '*kernel))\n'
              '    v = graph.conv2d(input=v, weight=w, strides=stride, '
              'padding=get_pads(kernel, padding), activation="RELU")\n'
              '    return v')

Fragment(uuid='NORMALIZED-001200',
         path='/examples/inceptionv3.py',
         lineno=14,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def pool2d(graph, v, pool_type, kernel=(1, 1), stride=(1, 1), '
              'padding=(0, 0)):\n')

Fragment(uuid='NORMALIZED-001201',
         path='/examples/inceptionv3.py',
         lineno=15,
         depth=1,
         type='function',
         name='pool2d',
         text='def pool2d(graph, v, pool_type, kernel=(1, 1), stride=(1, 1), '
              'padding=(0, 0)):\n')

Fragment(uuid='NORMALIZED-001202',
         path='/examples/inceptionv3.py',
         lineno=16,
         depth=0,
         type='module',
         name='',
         text="    if pool_type == 'global_avg':\n"
              '        pads = "VALID"\n'
              '        x = graph.avgpool2d(input=v, kernels=kernel, '
              'strides=[1, 1], padding=pads)\n'
              "    elif pool_type == 'avg':\n"
              '        pads = get_pads(kernel, padding)\n'
              '        x = graph.avgpool2d(input=v, kernels=kernel, '
              'strides=stride, padding=pads)\n'
              "    elif pool_type == 'max':\n"
              '        pads = get_pads(kernel, padding)\n'
              '        x = graph.maxpool2d(input=v, kernels=kernel, '
              'strides=stride, padding=pads)\n'
              '    else:\n'
              '        raise NotImplemented\n'
              '    return x\n')

Fragment(uuid='NORMALIZED-001203',
         path='/examples/inceptionv3.py',
         lineno=16,
         depth=1,
         type='function',
         name='pool2d',
         text="    if pool_type == 'global_avg':\n"
              '        pads = "VALID"\n'
              '        x = graph.avgpool2d(input=v, kernels=kernel, '
              'strides=[1, 1], padding=pads)\n'
              "    elif pool_type == 'avg':\n"
              '        pads = get_pads(kernel, padding)\n'
              '        x = graph.avgpool2d(input=v, kernels=kernel, '
              'strides=stride, padding=pads)\n'
              "    elif pool_type == 'max':\n"
              '        pads = get_pads(kernel, padding)\n'
              '        x = graph.maxpool2d(input=v, kernels=kernel, '
              'strides=stride, padding=pads)\n'
              '    else:\n'
              '        raise NotImplemented\n'
              '    return x')

Fragment(uuid='NORMALIZED-001204',
         path='/examples/inceptionv3.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '\n'
              'def inception_front(graph, v):  # 3 x 299 x 299\n'
              '    v = conv2d(graph, v, out_channels=32, kernel=(3, 3), '
              'stride=(2, 2))  # 32 x 149 x 149\n'
              '    v = conv2d(graph, v, out_channels=32, kernel=(3, 3))  # 32 '
              'x 147 x 147\n'
              '    v = conv2d(graph, v, out_channels=64, kernel=(3, 3), '
              'padding=(1, 1))  # 64 x 147 x 147\n'
              '    v')

Fragment(uuid='NORMALIZED-001205',
         path='/examples/inceptionv3.py',
         lineno=30,
         depth=1,
         type='function',
         name='inception_front',
         text='def inception_front(graph, v):  # 3 x 299 x 299\n'
              '    v = conv2d(graph, v, out_channels=32, kernel=(3, 3), '
              'stride=(2, 2))  # 32 x 149 x 149\n'
              '    v = conv2d(graph, v, out_channels=32, kernel=(3, 3))  # 32 '
              'x 147 x 147\n'
              '    v = conv2d(graph, v, out_channels=64, kernel=(3, 3), '
              'padding=(1, 1))  # 64 x 147 x 147\n'
              '    v = po')

Fragment(uuid='NORMALIZED-001206',
         path='/examples/inceptionv3.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text=" = pool2d(graph, v, pool_type='max', kernel=(3, 3), stride=(2, "
              '2))  # 64 x 73 x 73\n'
              '    v = conv2d(graph, v, 80, kernel=(1, 1))  # 80 x 73 x 73\n'
              '    v = conv2d(graph, v, out_channels=192, kernel=(3, 3))  # '
              '192 x 71 x 71\n'
              "    v = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))  # 192 x 35 x 35\n'
              '    return v\n')

Fragment(uuid='NORMALIZED-001207',
         path='/examples/inceptionv3.py',
         lineno=34,
         depth=1,
         type='function',
         name='inception_front',
         text="ol2d(graph, v, pool_type='max', kernel=(3, 3), stride=(2, 2))  "
              '# 64 x 73 x 73\n'
              '    v = conv2d(graph, v, 80, kernel=(1, 1))  # 80 x 73 x 73\n'
              '    v = conv2d(graph, v, out_channels=192, kernel=(3, 3))  # '
              '192 x 71 x 71\n'
              "    v = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))  # 192 x 35 x 35\n'
              '    return v')

Fragment(uuid='NORMALIZED-001208',
         path='/examples/inceptionv3.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def inception_a(graph, v, pool_features):\n'
              '    v1x1 = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '\n'
              '    v5x5 = conv2d(graph, v, out_channels=48, kernel=(1, 1))\n'
              '    v5x5 = conv2d(graph, v5x5, out_channels=64, kernel=(5, 5), '
              'padding=(2, 2))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_chann')

Fragment(uuid='NORMALIZED-001209',
         path='/examples/inceptionv3.py',
         lineno=41,
         depth=1,
         type='function',
         name='inception_a',
         text='def inception_a(graph, v, pool_features):\n'
              '    v1x1 = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '\n'
              '    v5x5 = conv2d(graph, v, out_channels=48, kernel=(1, 1))\n'
              '    v5x5 = conv2d(graph, v5x5, out_channels=64, kernel=(5, 5), '
              'padding=(2, 2))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_chann')

Fragment(uuid='NORMALIZED-001210',
         path='/examples/inceptionv3.py',
         lineno=48,
         depth=0,
         type='module',
         name='',
         text='els=96, kernel=(3, 3), padding=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, 3), padding=(1, 1))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='avg', kernel=(3, 3), "
              'stride=(1, 1), padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=pool_features, '
              'kernel=(1, 1))\n'
              '    return graph.concat(1, [v1x1, v5x5, v3x3dbl, v_pool])\n')

Fragment(uuid='NORMALIZED-001211',
         path='/examples/inceptionv3.py',
         lineno=48,
         depth=1,
         type='function',
         name='inception_a',
         text='els=96, kernel=(3, 3), padding=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, 3), padding=(1, 1))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='avg', kernel=(3, 3), "
              'stride=(1, 1), padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=pool_features, '
              'kernel=(1, 1))\n'
              '    return graph.concat(1, [v1x1, v5x5, v3x3dbl, v_pool])')

Fragment(uuid='NORMALIZED-001212',
         path='/examples/inceptionv3.py',
         lineno=54,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def inception_b(graph, v):\n'
              '    v3x3 = conv2d(graph, v, out_channels=384, kernel=(3, 3), '
              'stride=(2, 2))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, ')

Fragment(uuid='NORMALIZED-001213',
         path='/examples/inceptionv3.py',
         lineno=56,
         depth=1,
         type='function',
         name='inception_b',
         text='def inception_b(graph, v):\n'
              '    v3x3 = conv2d(graph, v, out_channels=384, kernel=(3, 3), '
              'stride=(2, 2))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=64, kernel=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, 3')

Fragment(uuid='NORMALIZED-001214',
         path='/examples/inceptionv3.py',
         lineno=60,
         depth=0,
         type='module',
         name='',
         text='3), padding=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, 3), stride=(2, 2))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))\n'
              '    return graph.concat(1, [v3x3, v3x3dbl, v_pool]);\n')

Fragment(uuid='NORMALIZED-001215',
         path='/examples/inceptionv3.py',
         lineno=60,
         depth=1,
         type='function',
         name='inception_b',
         text='), padding=(1, 1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=96, '
              'kernel=(3, 3), stride=(2, 2))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))\n'
              '    return graph.concat(1, [v3x3, v3x3dbl, v_pool]);')

Fragment(uuid='NORMALIZED-001216',
         path='/examples/inceptionv3.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def inception_c(graph, v, channels_7x7):\n'
              '    v1x1 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '\n'
              '    c7 = channels_7x7\n'
              '    v7x7 = conv2d(graph, v, out_channels=c7, kernel=(1, 1))\n'
              '    v7x7 = conv2d(graph, v7x7, out_channels=c7, kernel=')

Fragment(uuid='NORMALIZED-001217',
         path='/examples/inceptionv3.py',
         lineno=67,
         depth=1,
         type='function',
         name='inception_c',
         text='def inception_c(graph, v, channels_7x7):\n'
              '    v1x1 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '\n'
              '    c7 = channels_7x7\n'
              '    v7x7 = conv2d(graph, v, out_channels=c7, kernel=(1, 1))\n'
              '    v7x7 = conv2d(graph, v7x7, out_channels=c7, kernel=(1')

Fragment(uuid='NORMALIZED-001218',
         path='/examples/inceptionv3.py',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='(1, 7), padding=(0, 3))\n'
              '    v7x7 = conv2d(graph, v7x7, out_channels=192, kernel=(7, 1), '
              'padding=(3, 0))\n'
              '\n'
              '    v7x7dbl = conv2d(graph, v, out_channels=c7, kernel=(1, 1))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(7, 1), paddin')

Fragment(uuid='NORMALIZED-001219',
         path='/examples/inceptionv3.py',
         lineno=72,
         depth=1,
         type='function',
         name='inception_c',
         text=', 7), padding=(0, 3))\n'
              '    v7x7 = conv2d(graph, v7x7, out_channels=192, kernel=(7, 1), '
              'padding=(3, 0))\n'
              '\n'
              '    v7x7dbl = conv2d(graph, v, out_channels=c7, kernel=(1, 1))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(7, 1), padding')

Fragment(uuid='NORMALIZED-001220',
         path='/examples/inceptionv3.py',
         lineno=76,
         depth=0,
         type='module',
         name='',
         text='g=(3, 0))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(1, 7), padding=(0, 3))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(7, 1), padding=(3, 0))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=192, kernel=(')

Fragment(uuid='NORMALIZED-001221',
         path='/examples/inceptionv3.py',
         lineno=76,
         depth=1,
         type='function',
         name='inception_c',
         text='=(3, 0))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(1, 7), padding=(0, 3))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=c7, '
              'kernel=(7, 1), padding=(3, 0))\n'
              '    v7x7dbl = conv2d(graph, v7x7dbl, out_channels=192, kernel=(')

Fragment(uuid='NORMALIZED-001222',
         path='/examples/inceptionv3.py',
         lineno=79,
         depth=0,
         type='module',
         name='',
         text='1, 7), padding=(0, 3))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='avg', kernel=(3, 3), "
              'stride=(1, 1), padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=192, kernel=(1, '
              '1))\n'
              '    return graph.concat(1, [v1x1, v7x7, v7x7dbl, v_pool])\n')

Fragment(uuid='NORMALIZED-001223',
         path='/examples/inceptionv3.py',
         lineno=79,
         depth=1,
         type='function',
         name='inception_c',
         text='1, 7), padding=(0, 3))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='avg', kernel=(3, 3), "
              'stride=(1, 1), padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=192, kernel=(1, '
              '1))\n'
              '    return graph.concat(1, [v1x1, v7x7, v7x7dbl, v_pool])')

Fragment(uuid='NORMALIZED-001224',
         path='/examples/inceptionv3.py',
         lineno=84,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def inception_d(graph, v):\n'
              '    v3x3 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '    v3x3 = conv2d(graph, v3x3, out_channels=320, kernel=(3, 3), '
              'stride=(2, 2))\n'
              '\n'
              '    v7x7x3 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(1, '
              '7), paddi')

Fragment(uuid='NORMALIZED-001225',
         path='/examples/inceptionv3.py',
         lineno=86,
         depth=1,
         type='function',
         name='inception_d',
         text='def inception_d(graph, v):\n'
              '    v3x3 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '    v3x3 = conv2d(graph, v3x3, out_channels=320, kernel=(3, 3), '
              'stride=(2, 2))\n'
              '\n'
              '    v7x7x3 = conv2d(graph, v, out_channels=192, kernel=(1, 1))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(1, '
              '7), paddin')

Fragment(uuid='NORMALIZED-001226',
         path='/examples/inceptionv3.py',
         lineno=91,
         depth=0,
         type='module',
         name='',
         text='ng=(0, 3))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(7, '
              '1), padding=(3, 0))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(3, '
              '3), stride=(2, 2))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))\n'
              '    return graph.concat(1, [v3x3, v7x7x3, v_pool])\n')

Fragment(uuid='NORMALIZED-001227',
         path='/examples/inceptionv3.py',
         lineno=91,
         depth=1,
         type='function',
         name='inception_d',
         text='g=(0, 3))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(7, '
              '1), padding=(3, 0))\n'
              '    v7x7x3 = conv2d(graph, v7x7x3, out_channels=192, kernel=(3, '
              '3), stride=(2, 2))\n'
              '\n'
              "    v_pool = pool2d(graph, v, pool_type='max', kernel=(3, 3), "
              'stride=(2, 2))\n'
              '    return graph.concat(1, [v3x3, v7x7x3, v_pool])')

Fragment(uuid='NORMALIZED-001228',
         path='/examples/inceptionv3.py',
         lineno=97,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def inception_e(graph, v):\n'
              '    v1x1 = conv2d(graph, v, out_channels=320, kernel=(1, 1))\n'
              '\n'
              '    v3x3 = conv2d(graph, v, out_channels=384, kernel=(1, 1))\n'
              '    v3x3a = conv2d(graph, v3x3, out_channels=384, kernel=(1, '
              '3), pa')

Fragment(uuid='NORMALIZED-001229',
         path='/examples/inceptionv3.py',
         lineno=99,
         depth=1,
         type='function',
         name='inception_e',
         text='def inception_e(graph, v):\n'
              '    v1x1 = conv2d(graph, v, out_channels=320, kernel=(1, 1))\n'
              '\n'
              '    v3x3 = conv2d(graph, v, out_channels=384, kernel=(1, 1))\n'
              '    v3x3a = conv2d(graph, v3x3, out_channels=384, kernel=(1, '
              '3), pad')

Fragment(uuid='NORMALIZED-001230',
         path='/examples/inceptionv3.py',
         lineno=103,
         depth=0,
         type='module',
         name='',
         text='dding=(0, 1))\n'
              '    v3x3b = conv2d(graph, v3x3, out_channels=384, kernel=(3, '
              '1), padding=(1, 0))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=448, kernel=(1, '
              '1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=384, kerne')

Fragment(uuid='NORMALIZED-001231',
         path='/examples/inceptionv3.py',
         lineno=103,
         depth=1,
         type='function',
         name='inception_e',
         text='ding=(0, 1))\n'
              '    v3x3b = conv2d(graph, v3x3, out_channels=384, kernel=(3, '
              '1), padding=(1, 0))\n'
              '\n'
              '    v3x3dbl = conv2d(graph, v, out_channels=448, kernel=(1, '
              '1))\n'
              '    v3x3dbl = conv2d(graph, v3x3dbl, out_channels=384, kerne')

Fragment(uuid='NORMALIZED-001232',
         path='/examples/inceptionv3.py',
         lineno=107,
         depth=0,
         type='module',
         name='',
         text='l=(3, 3), padding=(1, 1))\n'
              '    v3x3dbla = conv2d(graph, v3x3dbl, out_channels=384, '
              'kernel=(1, 3), padding=(0, 1))\n'
              '    v3x3dblb = conv2d(graph, v3x3dbl, out_channels=384, '
              'kernel=(3, 1), padding=(1, 0))\n'
              '\n'
              '    v_pool = pool2')

Fragment(uuid='NORMALIZED-001233',
         path='/examples/inceptionv3.py',
         lineno=107,
         depth=1,
         type='function',
         name='inception_e',
         text='l=(3, 3), padding=(1, 1))\n'
              '    v3x3dbla = conv2d(graph, v3x3dbl, out_channels=384, '
              'kernel=(1, 3), padding=(0, 1))\n'
              '    v3x3dblb = conv2d(graph, v3x3dbl, out_channels=384, '
              'kernel=(3, 1), padding=(1, 0))\n'
              '\n'
              '    v_pool = pool2')

Fragment(uuid='NORMALIZED-001234',
         path='/examples/inceptionv3.py',
         lineno=111,
         depth=0,
         type='module',
         name='',
         text="d(graph, v, pool_type='avg', kernel=(3, 3), stride=(1, 1), "
              'padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=192, kernel=(1, '
              '1))\n'
              '    return graph.concat(1, [v1x1, v3x3a, v3x3b, v3x3dbla, '
              'v3x3dblb, v_pool])\n')

Fragment(uuid='NORMALIZED-001235',
         path='/examples/inceptionv3.py',
         lineno=111,
         depth=1,
         type='function',
         name='inception_e',
         text="d(graph, v, pool_type='avg', kernel=(3, 3), stride=(1, 1), "
              'padding=(1, 1))\n'
              '    v_pool = conv2d(graph, v_pool, out_channels=192, kernel=(1, '
              '1))\n'
              '    return graph.concat(1, [v1x1, v3x3a, v3x3b, v3x3dbla, '
              'v3x3dblb, v_pool])')

Fragment(uuid='NORMALIZED-001236',
         path='/examples/inceptionv3.py',
         lineno=114,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def inception_logits(graph, v):\n'
              "    return pool2d(graph, v, pool_type='global_avg')\n")

Fragment(uuid='NORMALIZED-001237',
         path='/examples/inceptionv3.py',
         lineno=116,
         depth=1,
         type='function',
         name='inception_logits',
         text='def inception_logits(graph, v):\n'
              "    return pool2d(graph, v, pool_type='global_avg')")

Fragment(uuid='NORMALIZED-001238',
         path='/examples/inceptionv3.py',
         lineno=118,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def inception_v3(batch_size=1):\n'
              '    graph = taso.new_graph()\n'
              '    v = graph.new_input(dims=(batch_size, 3, 299, 299))\n'
              '    v = inception_front(graph, v)\n'
              '    v = inception_a(graph, v, 32)\n'
              '    v = inception_a(graph, v, 64)\n'
              '    v = inception_a(graph, v, 64)\n'
              '    v = inception_b(graph, v)\n'
              '    v = inception_c(graph, v, 128)\n'
              '    v = inception_c(graph, v, 160)\n'
              '    v = inception_c(graph, ')

Fragment(uuid='NORMALIZED-001239',
         path='/examples/inceptionv3.py',
         lineno=120,
         depth=1,
         type='function',
         name='inception_v3',
         text='def inception_v3(batch_size=1):\n'
              '    graph = taso.new_graph()\n'
              '    v = graph.new_input(dims=(batch_size, 3, 299, 299))\n'
              '    v = inception_front(graph, v)\n'
              '    v = inception_a(graph, v, 32)\n'
              '    v = inception_a(graph, v, 64)\n'
              '    v = inception_a(graph, v, 64)\n'
              '    v = inception_b(graph, v)')

Fragment(uuid='NORMALIZED-001240',
         path='/examples/inceptionv3.py',
         lineno=127,
         depth=1,
         type='function',
         name='inception_v3',
         text='\n'
              '    v = inception_c(graph, v, 128)\n'
              '    v = inception_c(graph, v, 160)\n'
              '    v = inception_c(graph, v, 160)\n'
              '    v = inception_c(graph, v, 192)\n'
              '    v = inception_d(graph, v)\n'
              '    v = inception_e(graph, v)\n'
              '    v = inception_e(graph, v)\n'
              '    v = inception_logits(graph, v)\n'
              '    return graph')

Fragment(uuid='NORMALIZED-001241',
         path='/examples/inceptionv3.py',
         lineno=130,
         depth=0,
         type='module',
         name='',
         text='v, 160)\n'
              '    v = inception_c(graph, v, 192)\n'
              '    v = inception_d(graph, v)\n'
              '    v = inception_e(graph, v)\n'
              '    v = inception_e(graph, v)\n'
              '    v = inception_logits(graph, v)\n'
              '    return graph\n'
              '\n'
              'graph = inception_v3(batch_size=32)  # change batch_size from 4 '
              'to 8 would cause error.\n'
              'opt_graph = taso.optimize(graph, alpha=1.0, budget=30)\n'
              '\n'
              'print(graph.run_time())\n'
              'print(opt_graph.run_time())\n')

Fragment(uuid='NORMALIZED-001242',
         path='/examples/inceptionv3.py',
         lineno=138,
         depth=0,
         type='documentation',
         name='',
         text='# change batch_size from 4 to 8 would cause error.')

Fragment(uuid='NORMALIZED-001243',
         path='/examples/nasnet_a.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import taso as ts\nimport onnx\n')

Fragment(uuid='NORMALIZED-001244',
         path='/examples/nasnet_a.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001245',
         path='/examples/nasnet_a.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/nasnet_a.py\n'
              '  Functions: fit normal_cell reduction_cell seperable_conv '
              'squeeze\n'
              '  Variables and usages: activation alpha append avgpool2d '
              'budget check_model checker concat conv2d current dims '
              'export_onnx format graph input kernels maxpool2d new_graph '
              'new_input new_weight onnx onnx_model optimize out_channels '
              'outputs padding prev range save strides taso weight weight1 '
              'weight2\n')

Fragment(uuid='NORMALIZED-001246',
         path='/examples/nasnet_a.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001247',
         path='/examples/nasnet_a.py',
         lineno=3,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def squeeze(graph, out_channels, input):\n'
              '    weight = graph.new_weight(dims=(out_channels, input.dim(1), '
              '1, 1))\n'
              '    return graph.conv2d(input=input, weight=weight,\n'
              '                        strides=(1, 1), padding="SAME",\n'
              '                        activation="RELU")\n')

Fragment(uuid='NORMALIZED-001248',
         path='/examples/nasnet_a.py',
         lineno=4,
         depth=1,
         type='function',
         name='squeeze',
         text='def squeeze(graph, out_channels, input):\n'
              '    weight = graph.new_weight(dims=(out_channels, input.dim(1), '
              '1, 1))\n'
              '    return graph.conv2d(input=input, weight=weight,\n'
              '                        strides=(1, 1), padding="SAME",\n'
              '                        activation="RELU")')

Fragment(uuid='NORMALIZED-001249',
         path='/examples/nasnet_a.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def fit(graph, current, input):\n'
              '    if input.dim(2) == current.dim(2):\n'
              '        return squeeze(graph, current.dim(1), input)\n'
              '    else:\n'
              '        weight = graph.new_weight(dims=(current.dim(1), '
              'input.dim(1), 3, 3))\n'
              '        return graph.conv2d(input=input, weight=weight, '
              'strides=(2, 2), padding="SAME", activation="RELU")\n')

Fragment(uuid='NORMALIZED-001250',
         path='/examples/nasnet_a.py',
         lineno=10,
         depth=1,
         type='function',
         name='fit',
         text='def fit(graph, current, input):\n'
              '    if input.dim(2) == current.dim(2):\n'
              '        return squeeze(graph, current.dim(1), input)\n'
              '    else:\n'
              '        weight = graph.new_weight(dims=(current.dim(1), '
              'input.dim(1), 3, 3))\n'
              '        return graph.conv2d(input=input, weight=weight, '
              'strides=(2, 2), padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001251',
         path='/examples/nasnet_a.py',
         lineno=16,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def seperable_conv(graph, input, out_channels, kernels, '
              'strides, padding, activation = "NONE"):\n'
              '    assert input.dim(1) % out_channels == 0, "input.dim(1)={}, '
              'out_channels={}".format(input.dim(1), out_channels)\n'
              '    weight1 = graph.new_weight(dims=(out_channels, input.dim(1) '
              '// out_chan')

Fragment(uuid='NORMALIZED-001252',
         path='/examples/nasnet_a.py',
         lineno=17,
         depth=1,
         type='function',
         name='seperable_conv',
         text='def seperable_conv(graph, input, out_channels, kernels, '
              'strides, padding, activation = "NONE"):\n'
              '    assert input.dim(1) % out_channels == 0, "input.dim(1)={}, '
              'out_channels={}".format(input.dim(1), out_channels)\n'
              '    weight1 = graph.new_weight(dims=(out_channels, input.dim(1) '
              '// out_chan')

Fragment(uuid='NORMALIZED-001253',
         path='/examples/nasnet_a.py',
         lineno=18,
         depth=6,
         type='documentation',
         name='',
         text='input.dim(1)={}, out_channels={}')

Fragment(uuid='NORMALIZED-001254',
         path='/examples/nasnet_a.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text='nels, kernels[0], kernels[1]))\n'
              '    t = graph.conv2d(input=input, weight=weight1, '
              'strides=strides, padding=padding)\n'
              '    weight2 = graph.new_weight(dims=(out_channels, t.dim(1), 1, '
              '1))\n'
              '    return graph.conv2d(input=t, weight=weight2, strides=(1, '
              '1), padding="SAME", activation=activation)\n')

Fragment(uuid='NORMALIZED-001255',
         path='/examples/nasnet_a.py',
         lineno=19,
         depth=1,
         type='function',
         name='seperable_conv',
         text='nels, kernels[0], kernels[1]))\n'
              '    t = graph.conv2d(input=input, weight=weight1, '
              'strides=strides, padding=padding)\n'
              '    weight2 = graph.new_weight(dims=(out_channels, t.dim(1), 1, '
              '1))\n'
              '    return graph.conv2d(input=t, weight=weight2, strides=(1, '
              '1), padding="SAME", activation=activation)')

Fragment(uuid='NORMALIZED-001256',
         path='/examples/nasnet_a.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def normal_cell(graph, prev, cur, out_channels):\n'
              '    cur = squeeze(graph, out_channels, cur)\n'
              '    prev = fit(graph, cur, prev)\n'
              '    ts = list()\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(cur)\n'
              '    ts.')

Fragment(uuid='NORMALIZED-001257',
         path='/examples/nasnet_a.py',
         lineno=24,
         depth=1,
         type='function',
         name='normal_cell',
         text='def normal_cell(graph, prev, cur, out_channels):\n'
              '    cur = squeeze(graph, out_channels, cur)\n'
              '    prev = fit(graph, cur, prev)\n'
              '    ts = list()\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(cur)\n'
              '    ts.a')

Fragment(uuid='NORMALIZED-001258',
         path='/examples/nasnet_a.py',
         lineno=31,
         depth=0,
         type='module',
         name='',
         text='append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(graph.avgpool2d(input=cur, ')

Fragment(uuid='NORMALIZED-001259',
         path='/examples/nasnet_a.py',
         lineno=31,
         depth=1,
         type='function',
         name='normal_cell',
         text='ppend(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(graph.avgpool2d(input=cur, k')

Fragment(uuid='NORMALIZED-001260',
         path='/examples/nasnet_a.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(prev)\n'
              '    ts.append(graph.avgpool2d(input=prev, kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(graph.avgpool2d(input=prev, kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, out_channels')

Fragment(uuid='NORMALIZED-001261',
         path='/examples/nasnet_a.py',
         lineno=35,
         depth=1,
         type='function',
         name='normal_cell',
         text='ernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(prev)\n'
              '    ts.append(graph.avgpool2d(input=prev, kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(graph.avgpool2d(input=prev, kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, out_channels')

Fragment(uuid='NORMALIZED-001262',
         path='/examples/nasnet_a.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text='=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    assert len(ts) == 10, "Expected 10 tensors, got '
              '{}".format(len(ts))\n'
              '    outputs = list()\n')

Fragment(uuid='NORMALIZED-001263',
         path='/examples/nasnet_a.py',
         lineno=39,
         depth=1,
         type='function',
         name='normal_cell',
         text='=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    assert len(ts) == 10, "Expected 10 tensors, got '
              '{}".format(len(ts))\n'
              '    outputs = list()\n')

Fragment(uuid='NORMALIZED-001264',
         path='/examples/nasnet_a.py',
         lineno=43,
         depth=6,
         type='documentation',
         name='',
         text='Expected 10 tensors, got {}')

Fragment(uuid='NORMALIZED-001265',
         path='/examples/nasnet_a.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='    for i in range(5):\n'
              '        outputs.append(graph.add(ts[2*i], ts[2*i+1]))\n'
              '    return graph.concat(1, outputs)\n')

Fragment(uuid='NORMALIZED-001266',
         path='/examples/nasnet_a.py',
         lineno=45,
         depth=1,
         type='function',
         name='normal_cell',
         text='    for i in range(5):\n'
              '        outputs.append(graph.add(ts[2*i], ts[2*i+1]))\n'
              '    return graph.concat(1, outputs)')

Fragment(uuid='NORMALIZED-001267',
         path='/examples/nasnet_a.py',
         lineno=48,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def reduction_cell(graph, prev, cur, out_channels):\n'
              '    cur = squeeze(graph, out_channels, cur)\n'
              '    prev = fit(graph, cur, prev)\n'
              '    ts = list()\n'
              '    outputs = list()\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(7,7), strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channels,\n'
              '              kernels=(5,5), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(t')

Fragment(uuid='NORMALIZED-001268',
         path='/examples/nasnet_a.py',
         lineno=49,
         depth=1,
         type='function',
         name='reduction_cell',
         text='def reduction_cell(graph, prev, cur, out_channels):\n'
              '    cur = squeeze(graph, out_channels, cur)\n'
              '    prev = fit(graph, cur, prev)\n'
              '    ts = list()\n'
              '    outputs = list()\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(7,7), strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=cur, '
              'out_channels=out_channe')

Fragment(uuid='NORMALIZED-001269',
         path='/examples/nasnet_a.py',
         lineno=56,
         depth=1,
         type='function',
         name='reduction_cell',
         text='ls,\n'
              '              kernels=(5,5), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[0], ts[1]))\n'
              '    ts.append(graph.maxpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(7,7), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[2], ts[3')

Fragment(uuid='NORMALIZED-001270',
         path='/examples/nasnet_a.py',
         lineno=58,
         depth=0,
         type='module',
         name='',
         text='s[0], ts[1]))\n'
              '    ts.append(graph.maxpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(7,7), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[2], ts[3]))\n'
              '    ts.append(graph.avgpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(5')

Fragment(uuid='NORMALIZED-001271',
         path='/examples/nasnet_a.py',
         lineno=62,
         depth=1,
         type='function',
         name='reduction_cell',
         text=']))\n'
              '    ts.append(graph.avgpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=prev, '
              'out_channels=out_channels,\n'
              '              kernels=(5,5), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[4], ts[5]))\n'
              '    ts.append(graph.maxpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append')

Fragment(uuid='NORMALIZED-001272',
         path='/examples/nasnet_a.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text=',5), strides=(2,2), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[4], ts[5]))\n'
              '    ts.append(graph.maxpool2d(input=cur, kernels=(3,3), '
              'strides=(2,2), padding="SAME"))\n'
              '    ts.append(seperable_conv(graph, input=outputs[0], '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[6], ts[7]))\n'
              '    ts.append(graph.avgpool2d(input=outputs[0], kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(outpu')

Fragment(uuid='NORMALIZED-001273',
         path='/examples/nasnet_a.py',
         lineno=68,
         depth=1,
         type='function',
         name='reduction_cell',
         text='(seperable_conv(graph, input=outputs[0], '
              'out_channels=out_channels,\n'
              '              kernels=(3,3), strides=(1,1), padding="SAME"))\n'
              '    outputs.append(graph.add(ts[6], ts[7]))\n'
              '    ts.append(graph.avgpool2d(input=outputs[0], kernels=(3,3), '
              'strides=(1,1), padding="SAME"))\n'
              '    ts.append(outputs[1])\n'
              '    outputs.append(graph.add(ts[8], ts[9]))\n'
              '    return graph.concat(1, outputs)')

Fragment(uuid='NORMALIZED-001274',
         path='/examples/nasnet_a.py',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='ts[1])\n'
              '    outputs.append(graph.add(ts[8], ts[9]))\n'
              '    return graph.concat(1, outputs)\n'
              '\n'
              'graph = ts.new_graph()\n'
              'input = graph.new_input(dims=(1,3,224,224))\n'
              'weight = graph.new_weight(dims=(64,3,7,7))\n'
              'input = graph.conv2d(input=input, weight=weight, '
              'strides=(2,2),\n'
              '                 padding="SAME", activation="RELU")\n'
              'input = graph.maxpool2d(input=input, kernels=(3,3), '
              'strides=(2,2), padding="SAME")\n'
              '\n'
              'out_channels = 128\n'
              'for i in range(3):\n'
              '    prev = input\n'
              '    cur = input\n')

Fragment(uuid='NORMALIZED-001275',
         path='/examples/nasnet_a.py',
         lineno=87,
         depth=0,
         type='module',
         name='',
         text='    for j in range(5):\n'
              '        t = normal_cell(graph, prev, cur, out_channels)\n'
              '        prev = cur\n'
              '        cur = t\n'
              '    out_channels *= 2\n'
              '    input = reduction_cell(graph, prev, cur, out_channels)\n'
              'new_graph = ts.optimize(graph, alpha=1.0, budget=100)\n'
              'onnx_model = ts.export_onnx(new_graph)\n'
              'onnx.checker.check_model(onnx_model)\n'
              'onnx.save(onnx_model, "nasneta_taso.onnx")\n')

Fragment(uuid='NORMALIZED-001276',
         path='/examples/nasrnn.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import taso\nimport onnx\n\nhidden_size = 512\nlength = 5\n')

Fragment(uuid='NORMALIZED-001277',
         path='/examples/nasrnn.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001278',
         path='/examples/nasrnn.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/nasrnn.py\n'
              '  Functions: combine nas_node\n'
              '  Variables and usages: alpha append budget dims export_onnx '
              'graph hidden_size input length matmul midt new_graph new_input '
              'new_weight onnx onnx_model optimize range relu sigmoid state '
              'tanh taso\n')

Fragment(uuid='NORMALIZED-001279',
         path='/examples/nasrnn.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001280',
         path='/examples/nasrnn.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def combine(graph, x, h):\n'
              '    w1 = graph.new_weight(dims=(hidden_size, x.dim(1)))\n'
              '    w2 = graph.new_weight(dims=(hidden_size, h.dim(1)))\n'
              '    return graph.add(graph.matmul(x, w1), graph.matmul(h, w2))\n')

Fragment(uuid='NORMALIZED-001281',
         path='/examples/nasrnn.py',
         lineno=7,
         depth=1,
         type='function',
         name='combine',
         text='def combine(graph, x, h):\n'
              '    w1 = graph.new_weight(dims=(hidden_size, x.dim(1)))\n'
              '    w2 = graph.new_weight(dims=(hidden_size, h.dim(1)))\n'
              '    return graph.add(graph.matmul(x, w1), graph.matmul(h, w2))')

Fragment(uuid='NORMALIZED-001282',
         path='/examples/nasrnn.py',
         lineno=11,
         depth=0,
         type='module',
         name='',
         text='\ndef nas_node(graph, input, x):\n    t = list()\n')

Fragment(uuid='NORMALIZED-001283',
         path='/examples/nasrnn.py',
         lineno=12,
         depth=1,
         type='function',
         name='nas_node',
         text='def nas_node(graph, input, x):\n    t = list()\n')

Fragment(uuid='NORMALIZED-001284',
         path='/examples/nasrnn.py',
         lineno=14,
         depth=0,
         type='module',
         name='',
         text='    for i in range(8):\n'
              '        t.append(combine(graph, x, input))\n'
              '    midt = list()\n'
              '    midt.append(graph.add(graph.relu(t[0]), '
              'graph.sigmoid(t[3])))\n'
              '    midt.append(graph.add(graph.sigmoid(t[1]), '
              'graph.tanh(t[2])))\n'
              '    midt.append(graph.mul(graph.sigmoid(t[4]), '
              'graph.tanh(t[5])))\n'
              '    midt.append(graph.mul(graph.sigmoid(t[6]), '
              'graph.relu(t[7])))\n'
              '    midt.append(graph.add(graph.sigmoid(midt[1]), '
              'graph.tanh(midt[2])))\n'
              '    midt.append(graph.mul(graph.tanh(m')

Fragment(uuid='NORMALIZED-001285',
         path='/examples/nasrnn.py',
         lineno=14,
         depth=1,
         type='function',
         name='nas_node',
         text='    for i in range(8):\n'
              '        t.append(combine(graph, x, input))\n'
              '    midt = list()\n'
              '    midt.append(graph.add(graph.relu(t[0]), '
              'graph.sigmoid(t[3])))\n'
              '    midt.append(graph.add(graph.sigmoid(t[1]), '
              'graph.tanh(t[2])))\n'
              '    midt.append(graph.mul(graph.sigmoid(t[4]), '
              'graph.tanh(t[5])))\n'
              '    midt.app')

Fragment(uuid='NORMALIZED-001286',
         path='/examples/nasrnn.py',
         lineno=20,
         depth=1,
         type='function',
         name='nas_node',
         text='end(graph.mul(graph.sigmoid(t[6]), graph.relu(t[7])))\n'
              '    midt.append(graph.add(graph.sigmoid(midt[1]), '
              'graph.tanh(midt[2])))\n'
              '    midt.append(graph.mul(graph.tanh(midt[0]), '
              'graph.tanh(midt[3])))\n'
              '    midt.append(graph.mul(graph.tanh(midt[4]), '
              'graph.tanh(midt[5])))\n'
              '    return graph.tanh(midt[6])')

Fragment(uuid='NORMALIZED-001287',
         path='/examples/nasrnn.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='idt[0]), graph.tanh(midt[3])))\n'
              '    midt.append(graph.mul(graph.tanh(midt[4]), '
              'graph.tanh(midt[5])))\n'
              '    return graph.tanh(midt[6])\n'
              '\n'
              'graph = taso.new_graph()\n'
              'xs = list()\n'
              'for i in range(length):\n'
              '    xs.append(graph.new_input(dims=(1, hidden_size)))\n'
              'state = graph.new_weight(dims=(1, hidden_size))\n'
              'for i in range(length):\n'
              '    state = nas_node(graph, state, xs[i])\n'
              'new_graph = taso.optimize(graph, alpha=1.0, budget=100)\n'
              'onnx_model = taso.export_onnx(new_graph)\n')

Fragment(uuid='NORMALIZED-001288',
         path='/examples/resnet50.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import taso as ts\n')

Fragment(uuid='NORMALIZED-001289',
         path='/examples/resnet50.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001290',
         path='/examples/resnet50.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/resnet50.py\n'
              '  Functions: resnet_block\n'
              '  Variables and usages: activation alpha budget conv2d dims '
              'graph input new_graph new_input new_weight optimize '
              'out_channels padding range relu strides taso weight\n')

Fragment(uuid='NORMALIZED-001291',
         path='/examples/resnet50.py',
         lineno=2,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def resnet_block(graph, input, strides, out_channels):\n'
              '    w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w2 = graph.new_weight(dims=(out_channels,t')

Fragment(uuid='NORMALIZED-001292',
         path='/examples/resnet50.py',
         lineno=3,
         depth=1,
         type='function',
         name='resnet_block',
         text='def resnet_block(graph, input, strides, out_channels):\n'
              '    w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w2 = graph.new_weight(dims=(out_channels,t.')

Fragment(uuid='NORMALIZED-001293',
         path='/examples/resnet50.py',
         lineno=8,
         depth=0,
         type='module',
         name='',
         text='.dim(1),3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w3 = graph.new_weight(dims=(4*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n')

Fragment(uuid='NORMALIZED-001294',
         path='/examples/resnet50.py',
         lineno=8,
         depth=1,
         type='function',
         name='resnet_block',
         text='dim(1),3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w3 = graph.new_weight(dims=(4*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n')

Fragment(uuid='NORMALIZED-001295',
         path='/examples/resnet50.py',
         lineno=15,
         depth=0,
         type='module',
         name='',
         text='    if (strides[0]>1) or (input.dim(1) != out_channels*4):\n'
              '        w4 = '
              'graph.new_weight(dims=(out_channels*4,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return graph.relu(graph.add(input, t))\n'
              '\n'
              'graph = ts.new_graph()\n'
              'input = graph.new_input(dims=(1,64,56,56))\n'
              't = input\n'
              'for i in range(3):\n'
              '    t =')

Fragment(uuid='NORMALIZED-001296',
         path='/examples/resnet50.py',
         lineno=15,
         depth=1,
         type='function',
         name='resnet_block',
         text='    if (strides[0]>1) or (input.dim(1) != out_channels*4):\n'
              '        w4 = '
              'graph.new_weight(dims=(out_channels*4,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return graph.relu(graph.add(input, t))')

Fragment(uuid='NORMALIZED-001297',
         path='/examples/resnet50.py',
         lineno=26,
         depth=0,
         type='module',
         name='',
         text=' resnet_block(graph, t, (1,1), 64)\n'
              'strides = (2,2)\n'
              'for i in range(4):\n'
              '    t = resnet_block(graph, t, strides, 128)\n'
              '    strides = (1,1)\n'
              'strides = (2,2)\n'
              'for i in range(6):\n'
              '    t = resnet_block(graph, t, strides, 256)\n'
              ' ')

Fragment(uuid='NORMALIZED-001298',
         path='/examples/resnet50.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='   strides = (1,1)\n'
              'strides = (2,2)\n'
              'for i in range(3):\n'
              '    t = resnet_block(graph, t, strides, 512)\n'
              '    strides = (1,1)\n'
              '\n'
              'new_graph = ts.optimize(graph, alpha=1.0, budget=1000)\n'
              '#onnx_model = ts.export_onnx(new_graph)\n'
              '\n')

Fragment(uuid='NORMALIZED-001299',
         path='/examples/resnet50.py',
         lineno=41,
         depth=0,
         type='documentation',
         name='',
         text='#onnx_model = ts.export_onnx(new_graph)')

Fragment(uuid='NORMALIZED-001300',
         path='/examples/resnext50.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import taso as ts\nimport onnx\n')

Fragment(uuid='NORMALIZED-001301',
         path='/examples/resnext50.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001302',
         path='/examples/resnext50.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/resnext50.py\n'
              '  Functions: resnext_block\n'
              '  Variables and usages: activation alpha budget check_model '
              'checker conv2d dims export_onnx graph groups input kernels '
              'maxpool2d new_graph new_input new_weight onnx onnx_model '
              'optimize out_channels padding range relu save strides taso '
              'weight\n')

Fragment(uuid='NORMALIZED-001303',
         path='/examples/resnext50.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001304',
         path='/examples/resnext50.py',
         lineno=3,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def resnext_block(graph, input, strides, out_channels, '
              'groups):\n'
              '    w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w2 = graph.new_weight(dims=(out_channels,t')

Fragment(uuid='NORMALIZED-001305',
         path='/examples/resnext50.py',
         lineno=4,
         depth=1,
         type='function',
         name='resnext_block',
         text='def resnext_block(graph, input, strides, out_channels, '
              'groups):\n'
              '    w1 = '
              'graph.new_weight(dims=(out_channels,input.dim(1),1,1))\n'
              '    t = graph.conv2d(input=input, weight=w1,\n'
              '                     strides=(1,1), padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w2 = graph.new_weight(dims=(out_channels,t')

Fragment(uuid='NORMALIZED-001306',
         path='/examples/resnext50.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='.dim(1)//groups,3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w3 = graph.new_weight(dims=(2*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n')

Fragment(uuid='NORMALIZED-001307',
         path='/examples/resnext50.py',
         lineno=9,
         depth=1,
         type='function',
         name='resnext_block',
         text='.dim(1)//groups,3,3))\n'
              '    t = graph.conv2d(input=t, weight=w2,\n'
              '                     strides=strides, padding="SAME",\n'
              '                     activation="RELU")\n'
              '    w3 = graph.new_weight(dims=(2*out_channels,t.dim(1),1,1))\n'
              '    t = graph.conv2d(input=t, weight=w3,\n'
              '                     strides=(1,1), padding="SAME")\n')

Fragment(uuid='NORMALIZED-001308',
         path='/examples/resnext50.py',
         lineno=16,
         depth=0,
         type='module',
         name='',
         text='    if (strides[0]>1) or (input.dim(1) != out_channels*2):\n'
              '        w4 = '
              'graph.new_weight(dims=(out_channels*2,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return')

Fragment(uuid='NORMALIZED-001309',
         path='/examples/resnext50.py',
         lineno=16,
         depth=1,
         type='function',
         name='resnext_block',
         text='    if (strides[0]>1) or (input.dim(1) != out_channels*2):\n'
              '        w4 = '
              'graph.new_weight(dims=(out_channels*2,input.dim(1),1,1))\n'
              '        input=graph.conv2d(input=input, weight=w4,\n'
              '                           strides=strides, padding="SAME",\n'
              '                           activation="RELU")\n'
              '    return graph.relu(graph.add(input, t))')

Fragment(uuid='NORMALIZED-001310',
         path='/examples/resnext50.py',
         lineno=21,
         depth=0,
         type='module',
         name='',
         text=' graph.relu(graph.add(input, t))\n'
              '\n'
              'graph = ts.new_graph()\n'
              'input = graph.new_input(dims=(1,3,224,224))\n'
              'weight = graph.new_weight(dims=(64,3,7,7))\n'
              't = graph.conv2d(input=input, weight=weight, strides=(2,2),\n'
              '                 padding="SAME", activation="RELU")\n'
              't = graph.maxpool2d(input=t, kernels=(3,3')

Fragment(uuid='NORMALIZED-001311',
         path='/examples/resnext50.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='), strides=(2,2), padding="SAME")\n'
              'for i in range(3):\n'
              '    t = resnext_block(graph, t, (1,1), 128, 32)\n'
              'strides = (2,2)\n'
              'for i in range(4):\n'
              '    t = resnext_block(graph, t, strides, 256, 32)\n'
              '    strides = (1,1)\n'
              'strides = (2,2)\n'
              'for i in range(6):\n'
              '    t = resnext_block(graph, t, strides, 512, 32)\n'
              '    st')

Fragment(uuid='NORMALIZED-001312',
         path='/examples/resnext50.py',
         lineno=38,
         depth=0,
         type='module',
         name='',
         text='rides = (1,1)\n'
              'strides = (2,2)\n'
              'for i in range(3):\n'
              '    t = resnext_block(graph, t, strides, 1024, 32)\n'
              '    strides = (1,1)\n'
              '\n'
              'new_graph = ts.optimize(graph, alpha=1.0, budget=100)\n'
              'onnx_model = ts.export_onnx(new_graph)\n'
              'onnx.checker.check_model(onnx_model)\n'
              'onnx.save(onnx_model, "resnext50_xflow.onnx")\n')

Fragment(uuid='NORMALIZED-001313',
         path='/examples/resnext50.py',
         lineno=47,
         depth=4,
         type='documentation',
         name='',
         text='resnext50_xflow.onnx')

Fragment(uuid='NORMALIZED-001314',
         path='/examples/test_onnx.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import taso\n'
              'import onnx\n'
              'import argparse\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("-f", "--file", help="Path to input ONNX '
              'file", required=True)\n'
              '\n'
              'args = parser.parse_args()\n'
              '\n'
              '#graph = '
              'taso.load_onnx("/home/ubuntu/taso/onnx/squeezenet1.1.onnx")\n'
              '#graph = '
              'taso.load_onnx("/home/ubuntu/taso/onnx/bertsquad10.onnx")\n'
              'graph = taso.load_onnx(args.file)\n'
              '#graph = xflow.load("/home/ubuntu/resnext')

Fragment(uuid='NORMALIZED-001315',
         path='/examples/test_onnx.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001316',
         path='/examples/test_onnx.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /examples/test_onnx.py\n'
              '  Variables and usages: ArgumentParser add_argument alpha '
              'argparse args budget check_model checker cost export_onnx file '
              'format graph help load_onnx new_graph onnx onnx_model optimize '
              'parse_args parser print print_subst required save taso\n')

Fragment(uuid='NORMALIZED-001317',
         path='/examples/test_onnx.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001318',
         path='/examples/test_onnx.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001319',
         path='/examples/test_onnx.py',
         lineno=6,
         depth=5,
         type='documentation',
         name='',
         text='Path to input ONNX file')

Fragment(uuid='NORMALIZED-001320',
         path='/examples/test_onnx.py',
         lineno=10,
         depth=0,
         type='documentation',
         name='',
         text='#graph = '
              'taso.load_onnx("/home/ubuntu/taso/onnx/squeezenet1.1.onnx")')

Fragment(uuid='NORMALIZED-001321',
         path='/examples/test_onnx.py',
         lineno=11,
         depth=0,
         type='documentation',
         name='',
         text='#graph = '
              'taso.load_onnx("/home/ubuntu/taso/onnx/bertsquad10.onnx")')

Fragment(uuid='NORMALIZED-001322',
         path='/examples/test_onnx.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='-101.onnx") \n'
              '#graph = '
              'xflow.load("/home/ubuntu/ONNXModel/inception_v2/model.onnx")\n'
              'print(" original_cost = {}".format(graph.cost()))\n'
              'new_graph = taso.optimize(graph, alpha = 1.0, budget = 100, '
              'print_subst=True)\n'
              'print("optimized_cost = {}".format(new_graph.cost()))\n'
              'onnx_model = taso.export_onnx(new_graph)\n'
              'onnx.checker.check_model(onnx_model)\n'
              'onnx.save(onnx_model, "{}.taso.onnx".format(args.file))\n')

Fragment(uuid='NORMALIZED-001323',
         path='/examples/test_onnx.py',
         lineno=13,
         depth=0,
         type='documentation',
         name='',
         text='#graph = xflow.load("/home/ubuntu/resnext-101.onnx") ')

Fragment(uuid='NORMALIZED-001324',
         path='/examples/test_onnx.py',
         lineno=14,
         depth=0,
         type='documentation',
         name='',
         text='#graph = '
              'xflow.load("/home/ubuntu/ONNXModel/inception_v2/model.onnx")')

Fragment(uuid='NORMALIZED-001325',
         path='/include/taso/cuda_helper.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /include/taso/cuda_helper.h\n')

Fragment(uuid='NORMALIZED-001326',
         path='/include/taso/cuda_helper.h',
         lineno=38,
         depth=2,
         type='var_decl',
         name='BLOCK_SIZE_LIMIT',
         text='const int BLOCK_SIZE_LIMIT = 32768;\n')

Fragment(uuid='NORMALIZED-001327',
         path='/include/taso/cuda_helper.h',
         lineno=41,
         depth=2,
         type='function_decl',
         name='GET_BLOCKS',
         text='inline int GET_BLOCKS(const int N)\n'
              '{\n'
              '  int ret = (N + CUDA_NUM_THREADS - 1) / CUDA_NUM_THREADS;\n'
              '  return (ret > BLOCK_SIZE_LIMIT) ? BLOCK_SIZE_LIMIT : ret;\n'
              '}\n')

Fragment(uuid='NORMALIZED-001328',
         path='/include/taso/cuda_helper.h',
         lineno=47,
         depth=2,
         type='function_decl',
         name='helperSetTensorDescriptor',
         text='')

Fragment(uuid='NORMALIZED-001329',
         path='/include/taso/cuda_helper.h',
         lineno=50,
         depth=2,
         type='function_decl',
         name='helperSetBroadcastableTensorDescriptor',
         text='')

Fragment(uuid='NORMALIZED-001330',
         path='/include/taso/cuda_helper.h',
         lineno=55,
         depth=2,
         type='function_decl',
         name='assign_kernel',
         text='')

Fragment(uuid='NORMALIZED-001331',
         path='/include/taso/cuda_helper.h',
         lineno=58,
         depth=2,
         type='function_decl',
         name='copy_kernel',
         text='')

Fragment(uuid='NORMALIZED-001332',
         path='/include/taso/cuda_helper.h',
         lineno=60,
         depth=2,
         type='function_decl',
         name='get_activation_mode',
         text='')

Fragment(uuid='NORMALIZED-001333',
         path='/include/taso/dnnl_helper.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /include/taso/dnnl_helper.h\n')

Fragment(uuid='NORMALIZED-001334',
         path='/include/taso/dnnl_helper.h',
         lineno=46,
         depth=2,
         type='function_decl',
         name='microsecond_timer',
         text='inline uint64_t microsecond_timer() {\n'
              '  auto t = std::chrono::steady_clock::now();\n'
              '  return '
              'std::chrono::duration_cast<std::chrono::microseconds>(t.time_since_epoch()).count();\n'
              '}\n')

Fragment(uuid='NORMALIZED-001335',
         path='/include/taso/dnnl_helper.h',
         lineno=51,
         depth=2,
         type='var_decl',
         name='dnnl',
         text='')

Fragment(uuid='NORMALIZED-001336',
         path='/include/taso/dnnl_helper.h',
         lineno=52,
         depth=2,
         type='var_decl',
         name='dnnl',
         text='')

Fragment(uuid='NORMALIZED-001337',
         path='/include/taso/dnnl_helper.h',
         lineno=54,
         depth=2,
         type='function_decl',
         name='assign_kernel',
         text='')

Fragment(uuid='NORMALIZED-001338',
         path='/include/taso/dnnl_helper.h',
         lineno=55,
         depth=2,
         type='function_decl',
         name='copy_kernel',
         text='')

Fragment(uuid='NORMALIZED-001339',
         path='/include/taso/dnnl_helper.h',
         lineno=57,
         depth=2,
         type='var_decl',
         name='dnnl',
         text='')

Fragment(uuid='NORMALIZED-001340',
         path='/include/taso/dnnl_helper.h',
         lineno=60,
         depth=2,
         type='var_decl',
         name='dnnl',
         text='')

Fragment(uuid='NORMALIZED-001341',
         path='/include/taso/ops.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /include/taso/ops.h\n')

Fragment(uuid='NORMALIZED-001342',
         path='/include/taso/ops.h',
         lineno=51,
         depth=2,
         type='var_decl',
         name='taso',
         text='')

Fragment(uuid='NORMALIZED-001343',
         path='/include/taso/substitution.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /include/taso/substitution.h\n')

Fragment(uuid='NORMALIZED-001344',
         path='/python/sample.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import xflow\n'
              'import onnx\n'
              '\n'
              'graph = xflow.new_graph()\n'
              'input = graph.new_input(dims=(1,256,28,28))\n'
              'input = graph.maxpool2d(input=input, kernels=(1,1), '
              'strides=(1,1), padding="SAME")\n'
              'weight1 = graph.new_weight(dims=(256,8,3,3))\n'
              '#weight2 = graph.new_weight(dims=(256,16,3,3))\n'
              '#weight3 = graph.new_weight(dims=(256,32,')

Fragment(uuid='NORMALIZED-001345',
         path='/python/sample.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001346',
         path='/python/sample.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /python/sample.py\n'
              '  Variables and usages: activation alpha budget check_model '
              'checker conv2d dims export_onnx graph input kernels maxpool2d '
              'new_graph new_input new_weight onnx onnx_model optimize padding '
              'save strides weight weight1 xflow\n')

Fragment(uuid='NORMALIZED-001347',
         path='/python/sample.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001348',
         path='/python/sample.py',
         lineno=8,
         depth=0,
         type='documentation',
         name='',
         text='#weight2 = graph.new_weight(dims=(256,16,3,3))')

Fragment(uuid='NORMALIZED-001349',
         path='/python/sample.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='3,3))\n'
              '#weight4 = graph.new_weight(dims=(256,64,3,3))\n'
              '#weight5 = graph.new_weight(dims=(256,128,3,3))\n'
              '#weight6 = graph.new_weight(dims=(256,256,3,3))\n'
              't1 = graph.conv2d(input=input,weight=weight1,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#t2 = graph.conv2d(input=input,weight=weight2,strides=(1,1), '
              'padding=')

Fragment(uuid='NORMALIZED-001350',
         path='/python/sample.py',
         lineno=9,
         depth=0,
         type='documentation',
         name='',
         text='#weight3 = graph.new_weight(dims=(256,32,3,3))')

Fragment(uuid='NORMALIZED-001351',
         path='/python/sample.py',
         lineno=10,
         depth=0,
         type='documentation',
         name='',
         text='#weight4 = graph.new_weight(dims=(256,64,3,3))')

Fragment(uuid='NORMALIZED-001352',
         path='/python/sample.py',
         lineno=11,
         depth=0,
         type='documentation',
         name='',
         text='#weight5 = graph.new_weight(dims=(256,128,3,3))')

Fragment(uuid='NORMALIZED-001353',
         path='/python/sample.py',
         lineno=12,
         depth=0,
         type='documentation',
         name='',
         text='#weight6 = graph.new_weight(dims=(256,256,3,3))')

Fragment(uuid='NORMALIZED-001354',
         path='/python/sample.py',
         lineno=14,
         depth=0,
         type='module',
         name='',
         text='"SAME", activation="RELU")\n'
              '#t3 = graph.conv2d(input=input,weight=weight3,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#t4 = graph.conv2d(input=input,weight=weight4,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '#t5 = graph.conv2d(input=input,weight=weight5,strides=(1,1), '
              'padding="SAME", activation="RELU"')

Fragment(uuid='NORMALIZED-001355',
         path='/python/sample.py',
         lineno=14,
         depth=0,
         type='documentation',
         name='',
         text='#t2 = graph.conv2d(input=input,weight=weight2,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001356',
         path='/python/sample.py',
         lineno=15,
         depth=0,
         type='documentation',
         name='',
         text='#t3 = graph.conv2d(input=input,weight=weight3,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001357',
         path='/python/sample.py',
         lineno=16,
         depth=0,
         type='documentation',
         name='',
         text='#t4 = graph.conv2d(input=input,weight=weight4,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001358',
         path='/python/sample.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text=')\n'
              '#t6 = graph.conv2d(input=input,weight=weight6,strides=(1,1), '
              'padding="SAME", activation="RELU")\n'
              '\n'
              'new_graph = xflow.optimize(graph, alpha=1.0, budget=100)\n'
              'onnx_model = xflow.export_onnx(new_graph)\n'
              'onnx.checker.check_model(onnx_model)\n'
              'onnx.save(onnx_model, '
              '"/home/ubuntu/ONNXModel/inception_v2/model_xflow.onnx")\n')

Fragment(uuid='NORMALIZED-001359',
         path='/python/sample.py',
         lineno=17,
         depth=0,
         type='documentation',
         name='',
         text='#t5 = graph.conv2d(input=input,weight=weight5,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001360',
         path='/python/sample.py',
         lineno=18,
         depth=0,
         type='documentation',
         name='',
         text='#t6 = graph.conv2d(input=input,weight=weight6,strides=(1,1), '
              'padding="SAME", activation="RELU")')

Fragment(uuid='NORMALIZED-001361',
         path='/python/sample.py',
         lineno=23,
         depth=4,
         type='documentation',
         name='',
         text='/home/ubuntu/ONNXModel/inception_v2/model_xflow.onnx')

Fragment(uuid='NORMALIZED-001362',
         path='/python/setup.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# Copyright 2019 Stanford\n'
              '#\n'
              '# Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '# you may not use this file except in compliance with the '
              'License.\n'
              '# You may obtain a copy of the License at\n'
              '#\n'
              '#     http://www.apache.org/licenses/LICENSE-2.0\n'
              '#\n'
              '# Unless required by applicable law or agreed to in writing, '
              'software\n'
              '# distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              '# See the License for the speci')

Fragment(uuid='NORMALIZED-001363',
         path='/python/setup.py',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# Copyright 2019 Stanford')

Fragment(uuid='NORMALIZED-001364',
         path='/python/setup.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /python/setup.py\n'
              '  Functions: config_cython\n'
              '  Variables and usages: Build Cython Extension ImportError '
              'append argv compiler_directives core cythonize description '
              'distutils endswith ext_modules extension extra_compile_args '
              'extra_link_args find_packages get_config_var include_dirs '
              'install_requires language libraries listdir name packages path '
              'print setup setup_args setuptools sys_cflags sysconfig version '
              'zip_safe\n')

Fragment(uuid='NORMALIZED-001365',
         path='/python/setup.py',
         lineno=3,
         depth=0,
         type='documentation',
         name='',
         text='# Licensed under the Apache License, Version 2.0 (the '
              '"License");')

Fragment(uuid='NORMALIZED-001366',
         path='/python/setup.py',
         lineno=4,
         depth=0,
         type='documentation',
         name='',
         text='# you may not use this file except in compliance with the '
              'License.')

Fragment(uuid='NORMALIZED-001367',
         path='/python/setup.py',
         lineno=5,
         depth=0,
         type='documentation',
         name='',
         text='# You may obtain a copy of the License at')

Fragment(uuid='NORMALIZED-001368',
         path='/python/setup.py',
         lineno=7,
         depth=0,
         type='documentation',
         name='',
         text='#     http://www.apache.org/licenses/LICENSE-2.0')

Fragment(uuid='NORMALIZED-001369',
         path='/python/setup.py',
         lineno=9,
         depth=0,
         type='documentation',
         name='',
         text='# Unless required by applicable law or agreed to in writing, '
              'software')

Fragment(uuid='NORMALIZED-001370',
         path='/python/setup.py',
         lineno=10,
         depth=0,
         type='documentation',
         name='',
         text='# distributed under the License is distributed on an "AS IS" '
              'BASIS,')

Fragment(uuid='NORMALIZED-001371',
         path='/python/setup.py',
         lineno=11,
         depth=0,
         type='documentation',
         name='',
         text='# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.')

Fragment(uuid='NORMALIZED-001372',
         path='/python/setup.py',
         lineno=12,
         depth=0,
         type='module',
         name='',
         text='fic language governing permissions and\n'
              '# limitations under the License.\n'
              '#\n'
              'import os\n'
              'import sys\n'
              'import sysconfig\n'
              'from setuptools import find_packages\n'
              '\n'
              '# need to use distutils.core for correct placement of cython '
              'dll           \n'
              'if "--inplace" in '
              'sys.argv:                                                \n'
              '    from distutils.core import setup\n'
              '    from distutils.extension import '
              'Extension                              \n'
              'else:\n'
              '    from setuptools import setup\n'
              '    from setuptools.extension import Extension\n')

Fragment(uuid='NORMALIZED-001373',
         path='/python/setup.py',
         lineno=12,
         depth=0,
         type='documentation',
         name='',
         text='# See the License for the specific language governing '
              'permissions and')

Fragment(uuid='NORMALIZED-001374',
         path='/python/setup.py',
         lineno=13,
         depth=0,
         type='documentation',
         name='',
         text='# limitations under the License.')

Fragment(uuid='NORMALIZED-001375',
         path='/python/setup.py',
         lineno=15,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001376',
         path='/python/setup.py',
         lineno=16,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001377',
         path='/python/setup.py',
         lineno=17,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001378',
         path='/python/setup.py',
         lineno=18,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001379',
         path='/python/setup.py',
         lineno=18,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001380',
         path='/python/setup.py',
         lineno=20,
         depth=0,
         type='documentation',
         name='',
         text='# need to use distutils.core for correct placement of cython '
              'dll           ')

Fragment(uuid='NORMALIZED-001381',
         path='/python/setup.py',
         lineno=22,
         depth=3,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001382',
         path='/python/setup.py',
         lineno=22,
         depth=3,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001383',
         path='/python/setup.py',
         lineno=23,
         depth=3,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001384',
         path='/python/setup.py',
         lineno=23,
         depth=3,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001385',
         path='/python/setup.py',
         lineno=25,
         depth=4,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001386',
         path='/python/setup.py',
         lineno=25,
         depth=4,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001387',
         path='/python/setup.py',
         lineno=26,
         depth=4,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001388',
         path='/python/setup.py',
         lineno=26,
         depth=4,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001389',
         path='/python/setup.py',
         lineno=27,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def config_cython():\n'
              '    sys_cflags = sysconfig.get_config_var("CFLAGS")\n'
              '    try:\n'
              '        from Cython.Build import cythonize\n'
              '        ret = []\n'
              '        path = "taso/_cython"\n')

Fragment(uuid='NORMALIZED-001390',
         path='/python/setup.py',
         lineno=28,
         depth=1,
         type='function',
         name='config_cython',
         text='def config_cython():\n'
              '    sys_cflags = sysconfig.get_config_var("CFLAGS")\n'
              '    try:\n'
              '        from Cython.Build import cythonize\n'
              '        ret = []\n'
              '        path = "taso/_cython"\n')

Fragment(uuid='NORMALIZED-001391',
         path='/python/setup.py',
         lineno=31,
         depth=5,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001392',
         path='/python/setup.py',
         lineno=31,
         depth=5,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001393',
         path='/python/setup.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='        for fn in os.listdir(path):\n')

Fragment(uuid='NORMALIZED-001394',
         path='/python/setup.py',
         lineno=34,
         depth=1,
         type='function',
         name='config_cython',
         text='        for fn in os.listdir(path):\n'
              '            if not fn.endswith(".pyx"):\n'
              '                continue\n'
              '            ret.append(Extension(\n'
              '                "taso.%s" % fn[:-4],\n'
              '                ["%s/%s" % (path, fn)],\n'
              '                include_dirs=["../include", '
              '"/usr/local/cuda/include"],\n'
              '                libraries=["taso_runtime"],\n'
              '                extra_compile_args=["-DUSE_CUDNN", '
              '"-std=c++11"],\n'
              '                extra_link_args=[],\n'
              '                language="c++"))\n'
              '        return cythonize(ret, '
              'compiler_directives={"language_level" : 3})\n'
              '    except ImportError:\n'
              '        print("WARNING: cython is not installed!!!")\n'
              '        return []')

Fragment(uuid='NORMALIZED-001395',
         path='/python/setup.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='            if not fn.endswith(".pyx"):\n'
              '                continue\n'
              '            ret.append(Extension(\n'
              '                "taso.%s" % fn[:-4],\n'
              '                ["%s/%s" % (path, fn)],\n'
              '                include_dirs=["../include", '
              '"/usr/local/cuda/include"],\n'
              '                libraries=["taso_runtime"],\n'
              '                extra_compile_args=["-DUSE_CUDNN", '
              '"-std=c++11"],\n'
              '                extra_link_args=[],\n'
              '                language="c++"))\n'
              '        return cythonize(ret, '
              'compiler_directives={"language_level" : 3})\n'
              '    except ImportError:\n'
              '        print("WARNING: cython is not installed!!!")\n'
              '        return []\n'
              '\n'
              'setup_args = {}\n'
              '\n'
              '#if not ')

Fragment(uuid='NORMALIZED-001396',
         path='/python/setup.py',
         lineno=40,
         depth=14,
         type='documentation',
         name='',
         text='/usr/local/cuda/include')

Fragment(uuid='NORMALIZED-001397',
         path='/python/setup.py',
         lineno=47,
         depth=9,
         type='documentation',
         name='',
         text='WARNING: cython is not installed!!!')

Fragment(uuid='NORMALIZED-001398',
         path='/python/setup.py',
         lineno=52,
         depth=0,
         type='module',
         name='',
         text="os.getenv('CONDA_BUILD'):\n"
              '#    curr_path = '
              'os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))\n'
              '#    for i, path in enumerate(LIB_LIST):\n'
              '#    LIB_LIST[i] = os.path.relpath(path, curr_path)\n'
              '#    setup_args = {\n'
              '#        "include_package_data": True,\n'
              '#        "data_files": [(\'taso\', LIB_LIST)]\n'
              '#    }\n'
              '\n'
              's')

Fragment(uuid='NORMALIZED-001399',
         path='/python/setup.py',
         lineno=52,
         depth=0,
         type='documentation',
         name='',
         text="#if not os.getenv('CONDA_BUILD'):")

Fragment(uuid='NORMALIZED-001400',
         path='/python/setup.py',
         lineno=53,
         depth=0,
         type='documentation',
         name='',
         text='#    curr_path = '
              'os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))')

Fragment(uuid='NORMALIZED-001401',
         path='/python/setup.py',
         lineno=54,
         depth=0,
         type='documentation',
         name='',
         text='#    for i, path in enumerate(LIB_LIST):')

Fragment(uuid='NORMALIZED-001402',
         path='/python/setup.py',
         lineno=55,
         depth=0,
         type='documentation',
         name='',
         text='#    LIB_LIST[i] = os.path.relpath(path, curr_path)')

Fragment(uuid='NORMALIZED-001403',
         path='/python/setup.py',
         lineno=57,
         depth=0,
         type='documentation',
         name='',
         text='#        "include_package_data": True,')

Fragment(uuid='NORMALIZED-001404',
         path='/python/setup.py',
         lineno=58,
         depth=0,
         type='documentation',
         name='',
         text='#        "data_files": [(\'taso\', LIB_LIST)]')

Fragment(uuid='NORMALIZED-001405',
         path='/python/setup.py',
         lineno=61,
         depth=0,
         type='module',
         name='',
         text="etup(name='taso',\n"
              '      version="0.1.0",\n'
              '      description="TASO: A Tensor Algebra SuperOptimizer for '
              'Deep Learning",\n'
              '      zip_safe=False,\n'
              '      install_requires=[],\n'
              '      packages=find_packages(),\n'
              "      url='https://github.com/jiazhihao/taso',\n"
              '      ext_modules=config_cython(),\n'
              '      #**setup_args,\n'
              '      )\n'
              '\n')

Fragment(uuid='NORMALIZED-001406',
         path='/python/setup.py',
         lineno=63,
         depth=5,
         type='documentation',
         name='',
         text='TASO: A Tensor Algebra SuperOptimizer for Deep Learning')

Fragment(uuid='NORMALIZED-001407',
         path='/python/setup.py',
         lineno=67,
         depth=5,
         type='documentation',
         name='',
         text='https://github.com/jiazhihao/taso')

Fragment(uuid='NORMALIZED-001408',
         path='/python/taso/__init__.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='from .core import *\n'
              'import onnx\n'
              'from onnx import helper, TensorProto, numpy_helper\n')

Fragment(uuid='NORMALIZED-001409',
         path='/python/taso/__init__.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001410',
         path='/python/taso/__init__.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001411',
         path='/python/taso/__init__.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /python/taso/__init__.py\n'
              '  Functions: _add _add_node_attribute _argmax _argmin '
              '_avgpool2d _batchnorm _cast _ceil _check_output _concat '
              '_constant _conv2d _crop_and_resize _div _dropout _equal _exp '
              '_flatten _gemm _get_conv_pool_pads_attr _get_inputs '
              '_get_list_from_initializer _globalavgpool2d _greater _identity '
              '_input_tensor_name _leakyrelu _less _log _logical_not _matmul '
              '_max _maxpool2d _min _mul _output_tensor_name _pad '
              '_parse_attribute _prelu _reducemax _reducemean _reducemin '
              '_reduceprod _reducesum _relu _reshape _resize '
              '_resize_nearest_neighbor _round _shape _sigmoid _size _slice '
              '_split _sqrt _squeeze _strided_slice _sub _sum _transpose '
              '_unsqueeze export_onnx load_onnx new_graph '
              'onnx_datatype_tostring optimize\n'
              '  Classes: InputNotFoundError\n'
              '  Variables and usages: AttributeProto Exception FLOAT INT '
              'INT64 INTS PyGraph STRING TENSOR TensorProto alpha append attr '
              'attribute attributes attrs atts avgpool2d axes axes_ints '
              'axes_list axis batchnorm begin_mask budget bytes cast ceil '
              'concat conv2d core crop_and_resize data datatype decode '
              'dependents dim_value dims dropout dtype ellipsis_mask end_mask '
              'epsilon equal filename format get_input_dims get_input_edges '
              'get_num_outputs get_operator_attr get_operator_list '
              'get_operator_type get_output_dims get_weight_value graph '
              'graph_initializers graph_inputs graph_nodes graph_outputs '
              'greater group guid helper inedge inedges init initializer input '
              'input_node input_tensor input_weight_names inputs int64_data '
              'ints intype keepdims kernels leakyrelu less load logical_not '
              'make_attribute make_graph make_model make_node make_tensor '
              'make_tensor_value_info matmul maxpool2d model mytype nDim name '
              'name_to_op new_axis_mask new_height new_input new_weight '
              'new_width node node_list numpy_helper onnx onnx_graph '
              'onnx_model onnx_output opList op_type operator_attrs opname '
              'optype origin_dim out_edges output output_guids outputs padding '
              'pads perm perm_ints prelu print print_measurements print_subst '
              'producer_name range rate raw_data reduce_argmax reduce_argmin '
              'reduce_max reduce_mean reduce_min reduce_prod reduce_sum relu '
              'reshape reshaped_bias resize resize_nearest_neighbor '
              'ret_in_array round shape shape_in_array shrink_axis_mask '
              'shuffle sigmoid size slice slope split split_ints split_list '
              'sqrt squeeze start steps strides taso_output tensor '
              'tensor_owner tensor_type tensors to_array to_type transpose '
              'tuple type unsqueeze weight weight_data xf_operators\n')

Fragment(uuid='NORMALIZED-001412',
         path='/python/taso/__init__.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001413',
         path='/python/taso/__init__.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001414',
         path='/python/taso/__init__.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001415',
         path='/python/taso/__init__.py',
         lineno=4,
         depth=0,
         type='module',
         name='',
         text='\n'
              'class InputNotFoundError(Exception):\n'
              '    """Raised when cannot find input tensors """\n'
              '    pass\n'
              '\n'
              '# correspond to '
              'https://github.com/onnx/onnx/blob/master/onnx/onnx.proto\n'
              'def onnx_datatype_tostring(dtype):\n')

Fragment(uuid='NORMALIZED-001416',
         path='/python/taso/__init__.py',
         lineno=5,
         depth=1,
         type='class',
         name='InputNotFoundError',
         text='class InputNotFoundError(Exception):\n'
              '    """Raised when cannot find input tensors """\n'
              '    pass')

Fragment(uuid='NORMALIZED-001417',
         path='/python/taso/__init__.py',
         lineno=6,
         depth=4,
         type='documentation',
         name='',
         text='Raised when cannot find input tensors ')

Fragment(uuid='NORMALIZED-001418',
         path='/python/taso/__init__.py',
         lineno=9,
         depth=0,
         type='documentation',
         name='',
         text='# correspond to '
              'https://github.com/onnx/onnx/blob/master/onnx/onnx.proto')

Fragment(uuid='NORMALIZED-001419',
         path='/python/taso/__init__.py',
         lineno=10,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text='def onnx_datatype_tostring(dtype):\n')

Fragment(uuid='NORMALIZED-001420',
         path='/python/taso/__init__.py',
         lineno=11,
         depth=0,
         type='module',
         name='',
         text="    if dtype == 0:\n        return 'UNDEFINED'\n")

Fragment(uuid='NORMALIZED-001421',
         path='/python/taso/__init__.py',
         lineno=11,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    if dtype == 0:\n        return 'UNDEFINED'\n")

Fragment(uuid='NORMALIZED-001422',
         path='/python/taso/__init__.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 1:\n        return 'FLOAT'\n")

Fragment(uuid='NORMALIZED-001423',
         path='/python/taso/__init__.py',
         lineno=13,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 1:\n        return 'FLOAT'\n")

Fragment(uuid='NORMALIZED-001424',
         path='/python/taso/__init__.py',
         lineno=15,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 2:\n        return 'UINT8'\n")

Fragment(uuid='NORMALIZED-001425',
         path='/python/taso/__init__.py',
         lineno=15,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 2:\n        return 'UINT8'\n")

Fragment(uuid='NORMALIZED-001426',
         path='/python/taso/__init__.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 3:\n        return 'INT8'\n")

Fragment(uuid='NORMALIZED-001427',
         path='/python/taso/__init__.py',
         lineno=17,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 3:\n        return 'INT8'\n")

Fragment(uuid='NORMALIZED-001428',
         path='/python/taso/__init__.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 4:\n        return 'UINT16'\n")

Fragment(uuid='NORMALIZED-001429',
         path='/python/taso/__init__.py',
         lineno=19,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 4:\n        return 'UINT16'\n")

Fragment(uuid='NORMALIZED-001430',
         path='/python/taso/__init__.py',
         lineno=21,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 5:\n        return 'INT16'\n")

Fragment(uuid='NORMALIZED-001431',
         path='/python/taso/__init__.py',
         lineno=21,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 5:\n        return 'INT16'\n")

Fragment(uuid='NORMALIZED-001432',
         path='/python/taso/__init__.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 6:\n        return 'INT32'\n")

Fragment(uuid='NORMALIZED-001433',
         path='/python/taso/__init__.py',
         lineno=23,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 6:\n        return 'INT32'\n")

Fragment(uuid='NORMALIZED-001434',
         path='/python/taso/__init__.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 7:\n        return 'INT64'\n")

Fragment(uuid='NORMALIZED-001435',
         path='/python/taso/__init__.py',
         lineno=25,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 7:\n        return 'INT64'\n")

Fragment(uuid='NORMALIZED-001436',
         path='/python/taso/__init__.py',
         lineno=27,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 8:\n        return 'STRING'\n")

Fragment(uuid='NORMALIZED-001437',
         path='/python/taso/__init__.py',
         lineno=27,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 8:\n        return 'STRING'\n")

Fragment(uuid='NORMALIZED-001438',
         path='/python/taso/__init__.py',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 9:\n        return 'BOOL'\n")

Fragment(uuid='NORMALIZED-001439',
         path='/python/taso/__init__.py',
         lineno=29,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 9:\n        return 'BOOL'\n")

Fragment(uuid='NORMALIZED-001440',
         path='/python/taso/__init__.py',
         lineno=31,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 10:\n        return 'FLOAT16'\n")

Fragment(uuid='NORMALIZED-001441',
         path='/python/taso/__init__.py',
         lineno=31,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 10:\n        return 'FLOAT16'\n")

Fragment(uuid='NORMALIZED-001442',
         path='/python/taso/__init__.py',
         lineno=33,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 11:\n        return 'DOUBLE'\n")

Fragment(uuid='NORMALIZED-001443',
         path='/python/taso/__init__.py',
         lineno=33,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 11:\n        return 'DOUBLE'\n")

Fragment(uuid='NORMALIZED-001444',
         path='/python/taso/__init__.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 12:\n        return 'UINT32'\n")

Fragment(uuid='NORMALIZED-001445',
         path='/python/taso/__init__.py',
         lineno=35,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 12:\n        return 'UINT32'\n")

Fragment(uuid='NORMALIZED-001446',
         path='/python/taso/__init__.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 13:\n        return 'UINT64'\n")

Fragment(uuid='NORMALIZED-001447',
         path='/python/taso/__init__.py',
         lineno=37,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 13:\n        return 'UINT64'\n")

Fragment(uuid='NORMALIZED-001448',
         path='/python/taso/__init__.py',
         lineno=39,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 14:\n        return 'COMPLEX64'\n")

Fragment(uuid='NORMALIZED-001449',
         path='/python/taso/__init__.py',
         lineno=39,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 14:\n        return 'COMPLEX64'\n")

Fragment(uuid='NORMALIZED-001450',
         path='/python/taso/__init__.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text="    elif dtype == 15:\n        return 'COMPLEX128'\n")

Fragment(uuid='NORMALIZED-001451',
         path='/python/taso/__init__.py',
         lineno=41,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text="    elif dtype == 15:\n        return 'COMPLEX128'\n")

Fragment(uuid='NORMALIZED-001452',
         path='/python/taso/__init__.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text='    elif dtype == 16:\n'
              "        return 'BFLOAT16'\n"
              '    else:\n'
              "        raise Exception('Unknown onnx datatype')\n")

Fragment(uuid='NORMALIZED-001453',
         path='/python/taso/__init__.py',
         lineno=43,
         depth=1,
         type='function',
         name='onnx_datatype_tostring',
         text='    elif dtype == 16:\n'
              "        return 'BFLOAT16'\n"
              '    else:\n'
              "        raise Exception('Unknown onnx datatype')")

Fragment(uuid='NORMALIZED-001454',
         path='/python/taso/__init__.py',
         lineno=46,
         depth=9,
         type='documentation',
         name='',
         text='Unknown onnx datatype')

Fragment(uuid='NORMALIZED-001455',
         path='/python/taso/__init__.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _check_output(taso_output, onnx_output):\n'
              '    # TODO: check output match\n'
              '    return True\n')

Fragment(uuid='NORMALIZED-001456',
         path='/python/taso/__init__.py',
         lineno=48,
         depth=1,
         type='function',
         name='_check_output',
         text='def _check_output(taso_output, onnx_output):\n'
              '    # TODO: check output match\n'
              '    return True')

Fragment(uuid='NORMALIZED-001457',
         path='/python/taso/__init__.py',
         lineno=49,
         depth=1,
         type='documentation',
         name='',
         text='# TODO: check output match')

Fragment(uuid='NORMALIZED-001458',
         path='/python/taso/__init__.py',
         lineno=51,
         depth=0,
         type='module',
         name='',
         text='\ndef _parse_attribute(attributes):\n    atts = dict()\n')

Fragment(uuid='NORMALIZED-001459',
         path='/python/taso/__init__.py',
         lineno=52,
         depth=1,
         type='function',
         name='_parse_attribute',
         text='def _parse_attribute(attributes):\n    atts = dict()\n')

Fragment(uuid='NORMALIZED-001460',
         path='/python/taso/__init__.py',
         lineno=54,
         depth=0,
         type='module',
         name='',
         text='    for att in attributes:\n'
              '        if att.type == onnx.AttributeProto.INT:\n'
              '            atts[att.name] = att.i\n'
              '        elif att.type == onnx.AttributeProto.INTS:\n'
              '            atts[att.name] = att.ints\n'
              '        elif att.type == onnx.AttributeProto.FLOAT:\n'
              '            atts[att.name] = att.f\n'
              '        elif att.type == onnx.AttributeProto.STRING:\n'
              '            atts[att.name] = att.s\n'
              '        elif att.type == onnx.AttributeProto.TENSOR:\n'
              '            atts[att.name] = att.t\n'
              '        else:\n'
              '            assert False, "Unsupported Attribute Type: '
              '{}".format(att.type)\n'
              '    return atts\n')

Fragment(uuid='NORMALIZED-001461',
         path='/python/taso/__init__.py',
         lineno=54,
         depth=1,
         type='function',
         name='_parse_attribute',
         text='    for att in attributes:\n'
              '        if att.type == onnx.AttributeProto.INT:\n'
              '            atts[att.name] = att.i\n'
              '        elif att.type == onnx.AttributeProto.INTS:\n'
              '            atts[att.name] = att.ints\n'
              '        elif att.type == onnx.AttributeProto.FLOAT:\n'
              '            atts[att.name] = att.f\n'
              '        elif att.type == onnx.AttributeProto.STRING:\n'
              '            atts[att.name] = att.s\n'
              '        elif att.type == onnx.AttributeProto.TENSOR:\n'
              '            atts[att.name] = att.t\n'
              '        else:\n'
              '            assert False, "Unsupported Attribute Type: '
              '{}".format(att.type)\n'
              '    return atts')

Fragment(uuid='NORMALIZED-001462',
         path='/python/taso/__init__.py',
         lineno=66,
         depth=11,
         type='documentation',
         name='',
         text='Unsupported Attribute Type: {}')

Fragment(uuid='NORMALIZED-001463',
         path='/python/taso/__init__.py',
         lineno=68,
         depth=0,
         type='module',
         name='',
         text='\ndef _get_conv_pool_pads_attr(attrs):\n')

Fragment(uuid='NORMALIZED-001464',
         path='/python/taso/__init__.py',
         lineno=69,
         depth=1,
         type='function',
         name='_get_conv_pool_pads_attr',
         text='def _get_conv_pool_pads_attr(attrs):\n')

Fragment(uuid='NORMALIZED-001465',
         path='/python/taso/__init__.py',
         lineno=70,
         depth=0,
         type='module',
         name='',
         text='    if ("auto_pad" in attrs):\n'
              '        padding = attrs["auto_pad"]\n')

Fragment(uuid='NORMALIZED-001466',
         path='/python/taso/__init__.py',
         lineno=70,
         depth=1,
         type='function',
         name='_get_conv_pool_pads_attr',
         text='    if ("auto_pad" in attrs):\n'
              '        padding = attrs["auto_pad"]\n')

Fragment(uuid='NORMALIZED-001467',
         path='/python/taso/__init__.py',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='        if isinstance(padding, bytes):\n'
              '            padding = padding.decode()\n')

Fragment(uuid='NORMALIZED-001468',
         path='/python/taso/__init__.py',
         lineno=72,
         depth=1,
         type='function',
         name='_get_conv_pool_pads_attr',
         text='        if isinstance(padding, bytes):\n'
              '            padding = padding.decode()\n')

Fragment(uuid='NORMALIZED-001469',
         path='/python/taso/__init__.py',
         lineno=74,
         depth=0,
         type='module',
         name='',
         text="        if (padding=='SAME_LOWER') or (padding=='SAME_UPPER'):\n"
              '            pads = "SAME"\n'
              "        elif (padding=='VALID'):\n"
              '            pads = "VALID"\n'
              '        else:\n'
              '            assert padding==\'NOTSET\', "Unrecogonized auto_pad '
              'value: {}".format(padding)\n'
              '        # Note that we always think conv1x1 has SAME padding\n'
              '        # This will allow fusing enlarged convs\n')

Fragment(uuid='NORMALIZED-001470',
         path='/python/taso/__init__.py',
         lineno=74,
         depth=1,
         type='function',
         name='_get_conv_pool_pads_attr',
         text="        if (padding=='SAME_LOWER') or (padding=='SAME_UPPER'):\n"
              '            pads = "SAME"\n'
              "        elif (padding=='VALID'):\n"
              '            pads = "VALID"\n'
              '        else:\n'
              '            assert padding==\'NOTSET\', "Unrecogonized auto_pad '
              'value: {}".format(padding)\n'
              '        # Note that we always think conv1x1 has SAME padding\n'
              '        # This will allow fusing enlarged convs\n')

Fragment(uuid='NORMALIZED-001471',
         path='/python/taso/__init__.py',
         lineno=79,
         depth=11,
         type='documentation',
         name='',
         text='Unrecogonized auto_pad value: {}')

Fragment(uuid='NORMALIZED-001472',
         path='/python/taso/__init__.py',
         lineno=80,
         depth=4,
         type='documentation',
         name='',
         text='# Note that we always think conv1x1 has SAME padding')

Fragment(uuid='NORMALIZED-001473',
         path='/python/taso/__init__.py',
         lineno=81,
         depth=4,
         type='documentation',
         name='',
         text='# This will allow fusing enlarged convs')

Fragment(uuid='NORMALIZED-001474',
         path='/python/taso/__init__.py',
         lineno=82,
         depth=0,
         type='module',
         name='',
         text="        if sum(attrs['kernel_shape']) <= 2:\n"
              '            pads = "SAME"\n')

Fragment(uuid='NORMALIZED-001475',
         path='/python/taso/__init__.py',
         lineno=82,
         depth=1,
         type='function',
         name='_get_conv_pool_pads_attr',
         text="        if sum(attrs['kernel_shape']) <= 2:\n"
              '            pads = "SAME"\n')

Fragment(uuid='NORMALIZED-001476',
         path='/python/taso/__init__.py',
         lineno=84,
         depth=0,
         type='module',
         name='',
         text="        if padding != 'NOTSET':\n"
              '            return pads\n'
              '    # Assume zero padding if the pads are missing\n')

Fragment(uuid='NORMALIZED-001477',
         path='/python/taso/__init__.py',
         lineno=84,
         depth=1,
         type='function',
         name='_get_conv_pool_pads_attr',
         text="        if padding != 'NOTSET':\n"
              '            return pads\n'
              '    # Assume zero padding if the pads are missing\n')

Fragment(uuid='NORMALIZED-001478',
         path='/python/taso/__init__.py',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='# Assume zero padding if the pads are missing')

Fragment(uuid='NORMALIZED-001479',
         path='/python/taso/__init__.py',
         lineno=87,
         depth=0,
         type='module',
         name='',
         text='    if "pads" not in attrs:\n'
              "        attrs['pads'] = [0 for i in "
              "range(len(attrs['kernel_shape'])*2)]\n"
              '    # Note that we always think conv1x1 has SAME padding\n'
              '    # This will allow fusing enlarged convs\n')

Fragment(uuid='NORMALIZED-001480',
         path='/python/taso/__init__.py',
         lineno=87,
         depth=1,
         type='function',
         name='_get_conv_pool_pads_attr',
         text='    if "pads" not in attrs:\n'
              "        attrs['pads'] = [0 for i in "
              "range(len(attrs['kernel_shape'])*2)]\n"
              '    # Note that we always think conv1x1 has SAME padding\n'
              '    # This will allow fusing enlarged convs\n')

Fragment(uuid='NORMALIZED-001481',
         path='/python/taso/__init__.py',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='# Note that we always think conv1x1 has SAME padding')

Fragment(uuid='NORMALIZED-001482',
         path='/python/taso/__init__.py',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='# This will allow fusing enlarged convs')

Fragment(uuid='NORMALIZED-001483',
         path='/python/taso/__init__.py',
         lineno=91,
         depth=0,
         type='module',
         name='',
         text='    if sum(attrs["pads"]) == 0 and sum(attrs[\'kernel_shape\']) '
              '> 2:\n'
              '        pads = "VALID"\n'
              '    else:\n'
              '        pads = "SAME"\n'
              '    return pads\n')

Fragment(uuid='NORMALIZED-001484',
         path='/python/taso/__init__.py',
         lineno=91,
         depth=1,
         type='function',
         name='_get_conv_pool_pads_attr',
         text='    if sum(attrs["pads"]) == 0 and sum(attrs[\'kernel_shape\']) '
              '> 2:\n'
              '        pads = "VALID"\n'
              '    else:\n'
              '        pads = "SAME"\n'
              '    return pads')

Fragment(uuid='NORMALIZED-001485',
         path='/python/taso/__init__.py',
         lineno=96,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _get_list_from_initializer(initializer, name):\n'
              '    for data in initializer:\n'
              '        if data.name == name:\n'
              '            ret = list()\n'
              '            if data.int64_data != []:\n'
              '                for dim in data.int64_data:\n'
              '                    ret.append(dim)\n'
              '            elif data.raw_data and data.raw_data != []:\n'
              '                ret_in_array = numpy_helper.to_array(data)\n'
              '                for dim in ret_in_array:\n'
              '                        ret.append(dim)\n'
              '            return ret\n'
              '    raise InputNotFoundError\n'
              '    return []\n')

Fragment(uuid='NORMALIZED-001486',
         path='/python/taso/__init__.py',
         lineno=97,
         depth=1,
         type='function',
         name='_get_list_from_initializer',
         text='def _get_list_from_initializer(initializer, name):\n'
              '    for data in initializer:\n'
              '        if data.name == name:\n'
              '            ret = list()\n'
              '            if data.int64_data != []:\n'
              '                for dim in data.int64_data:\n'
              '                    ret.append(dim)\n'
              '            elif data.raw_data and data.raw_data != []:\n'
              '                ret_in_array = numpy_helper.to_array(data)\n'
              '                for dim in ret_in_array:\n'
              '                        ret.append(dim)\n'
              '            return ret\n'
              '    raise InputNotFoundError\n'
              '    return []')

Fragment(uuid='NORMALIZED-001487',
         path='/python/taso/__init__.py',
         lineno=111,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _get_inputs(op, graph, tensors, initializer):\n'
              '    inputs = list()\n'
              '    for i in op.input:\n'
              '        input_tensor = None\n'
              '        if i in tensors:\n'
              '            input_tensor = tensors[i]\n'
              '        else:\n'
              '            for init in initializer:\n'
              '                if init.name == i:\n'
              '                    input_tensor = graph.new_weight(\n'
              '                        dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '                    break\n'
              '        if input_tensor is None:\n'
              '            raise InputNotFoundError\n'
              '            return []\n'
              '        inputs.append(input_tensor)\n'
              '    return inputs\n')

Fragment(uuid='NORMALIZED-001488',
         path='/python/taso/__init__.py',
         lineno=112,
         depth=1,
         type='function',
         name='_get_inputs',
         text='def _get_inputs(op, graph, tensors, initializer):\n'
              '    inputs = list()\n'
              '    for i in op.input:\n'
              '        input_tensor = None\n'
              '        if i in tensors:\n'
              '            input_tensor = tensors[i]\n'
              '        else:\n'
              '            for init in initializer:\n'
              '                if init.name == i:\n'
              '                    input_tensor = graph.new_weight(\n'
              '                        dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '                    break\n'
              '        if input_tensor is None:\n'
              '            raise InputNotFoundError\n'
              '            return []\n'
              '        inputs.append(input_tensor)\n'
              '    return inputs')

Fragment(uuid='NORMALIZED-001489',
         path='/python/taso/__init__.py',
         lineno=129,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _add(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    outputs = graph.add(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001490',
         path='/python/taso/__init__.py',
         lineno=130,
         depth=1,
         type='function',
         name='_add',
         text='def _add(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    outputs = graph.add(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001491',
         path='/python/taso/__init__.py',
         lineno=134,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _argmax(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ArgMax requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axis = attrs["axis"]\n'
              '    axes_list = [axis]\n'
              '    outputs = graph.reduce_argmax(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001492',
         path='/python/taso/__init__.py',
         lineno=135,
         depth=1,
         type='function',
         name='_argmax',
         text='def _argmax(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ArgMax requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axis = attrs["axis"]\n'
              '    axes_list = [axis]\n'
              '    outputs = graph.reduce_argmax(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001493',
         path='/python/taso/__init__.py',
         lineno=137,
         depth=4,
         type='documentation',
         name='',
         text='ArgMax requires exactly one input')

Fragment(uuid='NORMALIZED-001494',
         path='/python/taso/__init__.py',
         lineno=144,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _argmin(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ArgMin requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axis = attrs["axis"]\n'
              '    axes_list = [axis]\n'
              '    outputs = graph.reduce_argmin(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001495',
         path='/python/taso/__init__.py',
         lineno=145,
         depth=1,
         type='function',
         name='_argmin',
         text='def _argmin(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ArgMin requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axis = attrs["axis"]\n'
              '    axes_list = [axis]\n'
              '    outputs = graph.reduce_argmin(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001496',
         path='/python/taso/__init__.py',
         lineno=147,
         depth=4,
         type='documentation',
         name='',
         text='ArgMin requires exactly one input')

Fragment(uuid='NORMALIZED-001497',
         path='/python/taso/__init__.py',
         lineno=154,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _batchnorm(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              "    if 'epsilon' in attrs:\n"
              "        epsilon = attrs['epsilon']\n"
              '    else:\n'
              '        epsilon = -1\n'
              '    outputs = graph.batchnorm(inputs[0], inputs[1], inputs[2], '
              'inputs[3], inputs[4], epsilon)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001498',
         path='/python/taso/__init__.py',
         lineno=155,
         depth=1,
         type='function',
         name='_batchnorm',
         text='def _batchnorm(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              "    if 'epsilon' in attrs:\n"
              "        epsilon = attrs['epsilon']\n"
              '    else:\n'
              '        epsilon = -1\n'
              '    outputs = graph.batchnorm(inputs[0], inputs[1], inputs[2], '
              'inputs[3], inputs[4], epsilon)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001499',
         path='/python/taso/__init__.py',
         lineno=164,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _cast(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    #assert len(op.input) == 1, "Cast requires exactly one '
              'input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name == op.input[0]:\n'
              '    #            ')

Fragment(uuid='NORMALIZED-001500',
         path='/python/taso/__init__.py',
         lineno=165,
         depth=1,
         type='function',
         name='_cast',
         text='def _cast(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    #assert len(op.input) == 1, "Cast requires exactly one '
              'input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name == op.input[0]:\n'
              '    #            ')

Fragment(uuid='NORMALIZED-001501',
         path='/python/taso/__init__.py',
         lineno=167,
         depth=2,
         type='documentation',
         name='',
         text='#assert len(op.input) == 1, "Cast requires exactly one input"')

Fragment(uuid='NORMALIZED-001502',
         path='/python/taso/__init__.py',
         lineno=168,
         depth=2,
         type='documentation',
         name='',
         text='#input_tensor = None')

Fragment(uuid='NORMALIZED-001503',
         path='/python/taso/__init__.py',
         lineno=169,
         depth=2,
         type='documentation',
         name='',
         text='#if op.input[0] in tensors:')

Fragment(uuid='NORMALIZED-001504',
         path='/python/taso/__init__.py',
         lineno=170,
         depth=2,
         type='documentation',
         name='',
         text='#    input_tensor = tensors[op.input[0]]')

Fragment(uuid='NORMALIZED-001505',
         path='/python/taso/__init__.py',
         lineno=172,
         depth=2,
         type='documentation',
         name='',
         text='#    for init in initializer:')

Fragment(uuid='NORMALIZED-001506',
         path='/python/taso/__init__.py',
         lineno=173,
         depth=2,
         type='documentation',
         name='',
         text='#        if init.name == op.input[0]:')

Fragment(uuid='NORMALIZED-001507',
         path='/python/taso/__init__.py',
         lineno=174,
         depth=0,
         type='module',
         name='',
         text='input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    to_type = onnx_datatype_tostring(attrs["to"])\n'
              '    outputs = graph.cast(input=inputs[0], datatype=to_type)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001508',
         path='/python/taso/__init__.py',
         lineno=174,
         depth=1,
         type='function',
         name='_cast',
         text='input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    to_type = onnx_datatype_tostring(attrs["to"])\n'
              '    outputs = graph.cast(input=inputs[0], datatype=to_type)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001509',
         path='/python/taso/__init__.py',
         lineno=174,
         depth=2,
         type='documentation',
         name='',
         text='#            input_tensor = graph.new_weight(')

Fragment(uuid='NORMALIZED-001510',
         path='/python/taso/__init__.py',
         lineno=175,
         depth=2,
         type='documentation',
         name='',
         text='#                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))')

Fragment(uuid='NORMALIZED-001511',
         path='/python/taso/__init__.py',
         lineno=177,
         depth=2,
         type='documentation',
         name='',
         text='#assert input_tensor is not None, "Input Tensor Not Found"')

Fragment(uuid='NORMALIZED-001512',
         path='/python/taso/__init__.py',
         lineno=182,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _ceil(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Ceil requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.ceil(inputs[0])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001513',
         path='/python/taso/__init__.py',
         lineno=183,
         depth=1,
         type='function',
         name='_ceil',
         text='def _ceil(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Ceil requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.ceil(inputs[0])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001514',
         path='/python/taso/__init__.py',
         lineno=185,
         depth=4,
         type='documentation',
         name='',
         text='Ceil requires exactly one input')

Fragment(uuid='NORMALIZED-001515',
         path='/python/taso/__init__.py',
         lineno=189,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _concat(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axis = attrs["axis"]\n'
              '    outputs = graph.concat(axis, inputs)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001516',
         path='/python/taso/__init__.py',
         lineno=190,
         depth=1,
         type='function',
         name='_concat',
         text='def _concat(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axis = attrs["axis"]\n'
              '    outputs = graph.concat(axis, inputs)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001517',
         path='/python/taso/__init__.py',
         lineno=196,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _constant(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    # TODO: Currently do not support sparse value\n'
              '    assert "value" in attrs, "Do not support sparse value for '
              'Constant"\n'
              '    tensor = attrs["value"]\n'
              '    dims = list()\n'
              '    for dim in tensor.dims:\n'
              '        dims.append(dim)\n'
              '    weight_data = numpy_helper.to_array(tensor)\n'
              '    outputs = graph.new_weight(dims=tuple(dims), '
              'data=weight_data)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001518',
         path='/python/taso/__init__.py',
         lineno=197,
         depth=1,
         type='function',
         name='_constant',
         text='def _constant(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    # TODO: Currently do not support sparse value\n'
              '    assert "value" in attrs, "Do not support sparse value for '
              'Constant"\n'
              '    tensor = attrs["value"]\n'
              '    dims = list()\n'
              '    for dim in tensor.dims:\n'
              '        dims.append(dim)\n'
              '    weight_data = numpy_helper.to_array(tensor)\n'
              '    outputs = graph.new_weight(dims=tuple(dims), '
              'data=weight_data)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001519',
         path='/python/taso/__init__.py',
         lineno=200,
         depth=2,
         type='documentation',
         name='',
         text='# TODO: Currently do not support sparse value')

Fragment(uuid='NORMALIZED-001520',
         path='/python/taso/__init__.py',
         lineno=201,
         depth=4,
         type='documentation',
         name='',
         text='Do not support sparse value for Constant')

Fragment(uuid='NORMALIZED-001521',
         path='/python/taso/__init__.py',
         lineno=209,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _conv2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n')

Fragment(uuid='NORMALIZED-001522',
         path='/python/taso/__init__.py',
         lineno=210,
         depth=1,
         type='function',
         name='_conv2d',
         text='def _conv2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n')

Fragment(uuid='NORMALIZED-001523',
         path='/python/taso/__init__.py',
         lineno=213,
         depth=0,
         type='module',
         name='',
         text='    if "group" not in attrs:\n'
              '        group = 1 # default 1\n'
              '    else:\n'
              '        group = attrs["group"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    strides = attrs["strides"]\n'
              '    outputs = graph.conv2d(input=inputs[0], weight=inputs[1], '
              'strides=strides, padding=pads)\n')

Fragment(uuid='NORMALIZED-001524',
         path='/python/taso/__init__.py',
         lineno=213,
         depth=1,
         type='function',
         name='_conv2d',
         text='    if "group" not in attrs:\n'
              '        group = 1 # default 1\n'
              '    else:\n'
              '        group = attrs["group"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    strides = attrs["strides"]\n'
              '    outputs = graph.conv2d(input=inputs[0], weight=inputs[1], '
              'strides=strides, padding=pads)\n')

Fragment(uuid='NORMALIZED-001525',
         path='/python/taso/__init__.py',
         lineno=220,
         depth=0,
         type='module',
         name='',
         text='    if len(inputs) > 2:\n'
              '        dim = inputs[2].dim(0)\n'
              '        reshaped_bias = graph.reshape(inputs[2], (1, dim, 1, '
              '1))\n'
              '        outputs = graph.add(outputs, reshaped_bias)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001526',
         path='/python/taso/__init__.py',
         lineno=220,
         depth=1,
         type='function',
         name='_conv2d',
         text='    if len(inputs) > 2:\n'
              '        dim = inputs[2].dim(0)\n'
              '        reshaped_bias = graph.reshape(inputs[2], (1, dim, 1, '
              '1))\n'
              '        outputs = graph.add(outputs, reshaped_bias)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001527',
         path='/python/taso/__init__.py',
         lineno=225,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _div(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Div takes exactly two inputs"\n'
              '    outputs = graph.div(x=inputs[0], y=inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001528',
         path='/python/taso/__init__.py',
         lineno=226,
         depth=1,
         type='function',
         name='_div',
         text='def _div(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Div takes exactly two inputs"\n'
              '    outputs = graph.div(x=inputs[0], y=inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001529',
         path='/python/taso/__init__.py',
         lineno=228,
         depth=4,
         type='documentation',
         name='',
         text='Div takes exactly two inputs')

Fragment(uuid='NORMALIZED-001530',
         path='/python/taso/__init__.py',
         lineno=231,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _dropout(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Dropout takes exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    rate = attrs["ratio"]\n'
              '    outputs = graph.dropout(input=inputs[0], rate=rate)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001531',
         path='/python/taso/__init__.py',
         lineno=232,
         depth=1,
         type='function',
         name='_dropout',
         text='def _dropout(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Dropout takes exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    rate = attrs["ratio"]\n'
              '    outputs = graph.dropout(input=inputs[0], rate=rate)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001532',
         path='/python/taso/__init__.py',
         lineno=234,
         depth=4,
         type='documentation',
         name='',
         text='Dropout takes exactly one input')

Fragment(uuid='NORMALIZED-001533',
         path='/python/taso/__init__.py',
         lineno=239,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _equal(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Equal takes exactly two inputs"\n'
              '    outputs = graph.equal(x=inputs[0], y=inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001534',
         path='/python/taso/__init__.py',
         lineno=240,
         depth=1,
         type='function',
         name='_equal',
         text='def _equal(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Equal takes exactly two inputs"\n'
              '    outputs = graph.equal(x=inputs[0], y=inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001535',
         path='/python/taso/__init__.py',
         lineno=242,
         depth=4,
         type='documentation',
         name='',
         text='Equal takes exactly two inputs')

Fragment(uuid='NORMALIZED-001536',
         path='/python/taso/__init__.py',
         lineno=245,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _exp(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Exp requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.exp(input=inputs[0])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001537',
         path='/python/taso/__init__.py',
         lineno=246,
         depth=1,
         type='function',
         name='_exp',
         text='def _exp(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Exp requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.exp(input=inputs[0])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001538',
         path='/python/taso/__init__.py',
         lineno=248,
         depth=4,
         type='documentation',
         name='',
         text='Exp requires exactly one input')

Fragment(uuid='NORMALIZED-001539',
         path='/python/taso/__init__.py',
         lineno=252,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _flatten(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Flatten requires exactly one '
              'input"\n'
              '    shape = []\n'
              '    shape.append(inputs[0].dim(0))\n'
              '    dim = 1\n'
              '    for i in range(1, inputs[0].nDim):\n'
              '        dim *= inputs[0].dim(i)\n'
              '    shape.append(dim)\n'
              '    outputs = graph.reshape(inputs[0], tuple(shape))\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001540',
         path='/python/taso/__init__.py',
         lineno=253,
         depth=1,
         type='function',
         name='_flatten',
         text='def _flatten(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Flatten requires exactly one '
              'input"\n'
              '    shape = []\n'
              '    shape.append(inputs[0].dim(0))\n'
              '    dim = 1\n'
              '    for i in range(1, inputs[0].nDim):\n'
              '        dim *= inputs[0].dim(i)\n'
              '    shape.append(dim)\n'
              '    outputs = graph.reshape(inputs[0], tuple(shape))\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001541',
         path='/python/taso/__init__.py',
         lineno=255,
         depth=4,
         type='documentation',
         name='',
         text='Flatten requires exactly one input')

Fragment(uuid='NORMALIZED-001542',
         path='/python/taso/__init__.py',
         lineno=264,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _gemm(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    if "transA" in attrs and attrs["transA"] == 1:\n'
              '        inputs[0] = graph.transpose(inputs[0], (1,0), '
              'shuffle=True)\n'
              '    if "transB" in attrs and attrs["transB"] == 1:\n'
              '        inputs[1] = graph.transpose(inputs[1], (1,0), '
              'shuffle=True)\n'
              '    outputs = graph.matmul(inputs[0], inputs[1])\n'
              '    if len(inputs) > 2:\n'
              '        outputs = graph.add(outputs, inputs[2])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001543',
         path='/python/taso/__init__.py',
         lineno=265,
         depth=1,
         type='function',
         name='_gemm',
         text='def _gemm(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    if "transA" in attrs and attrs["transA"] == 1:\n'
              '        inputs[0] = graph.transpose(inputs[0], (1,0), '
              'shuffle=True)\n'
              '    if "transB" in attrs and attrs["transB"] == 1:\n'
              '        inputs[1] = graph.transpose(inputs[1], (1,0), '
              'shuffle=True)\n'
              '    outputs = graph.matmul(inputs[0], inputs[1])\n'
              '    if len(inputs) > 2:\n'
              '        outputs = graph.add(outputs, inputs[2])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001544',
         path='/python/taso/__init__.py',
         lineno=276,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _greater(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Greater takes exactly two '
              'inputs"\n'
              '    outputs = graph.greater(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001545',
         path='/python/taso/__init__.py',
         lineno=277,
         depth=1,
         type='function',
         name='_greater',
         text='def _greater(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Greater takes exactly two '
              'inputs"\n'
              '    outputs = graph.greater(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001546',
         path='/python/taso/__init__.py',
         lineno=279,
         depth=4,
         type='documentation',
         name='',
         text='Greater takes exactly two inputs')

Fragment(uuid='NORMALIZED-001547',
         path='/python/taso/__init__.py',
         lineno=282,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _identity(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Identity takes exactly one '
              'input"\n'
              '    outputs = graph.dropout(inputs[0], 0.0)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001548',
         path='/python/taso/__init__.py',
         lineno=283,
         depth=1,
         type='function',
         name='_identity',
         text='def _identity(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Identity takes exactly one '
              'input"\n'
              '    outputs = graph.dropout(inputs[0], 0.0)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001549',
         path='/python/taso/__init__.py',
         lineno=285,
         depth=4,
         type='documentation',
         name='',
         text='Identity takes exactly one input')

Fragment(uuid='NORMALIZED-001550',
         path='/python/taso/__init__.py',
         lineno=288,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _leakyrelu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "LeakyRelu requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    alpha = attrs["alpha"]\n'
              '    outputs = graph.leakyrelu(input=inputs[0], alpha=alpha)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001551',
         path='/python/taso/__init__.py',
         lineno=289,
         depth=1,
         type='function',
         name='_leakyrelu',
         text='def _leakyrelu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "LeakyRelu requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    alpha = attrs["alpha"]\n'
              '    outputs = graph.leakyrelu(input=inputs[0], alpha=alpha)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001552',
         path='/python/taso/__init__.py',
         lineno=291,
         depth=4,
         type='documentation',
         name='',
         text='LeakyRelu requires exactly one input')

Fragment(uuid='NORMALIZED-001553',
         path='/python/taso/__init__.py',
         lineno=296,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _less(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Less takes exactly two inputs"\n'
              '    outputs = graph.less(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001554',
         path='/python/taso/__init__.py',
         lineno=297,
         depth=1,
         type='function',
         name='_less',
         text='def _less(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Less takes exactly two inputs"\n'
              '    outputs = graph.less(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001555',
         path='/python/taso/__init__.py',
         lineno=299,
         depth=4,
         type='documentation',
         name='',
         text='Less takes exactly two inputs')

Fragment(uuid='NORMALIZED-001556',
         path='/python/taso/__init__.py',
         lineno=302,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _log(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Log requires exactly one input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name =')

Fragment(uuid='NORMALIZED-001557',
         path='/python/taso/__init__.py',
         lineno=303,
         depth=1,
         type='function',
         name='_log',
         text='def _log(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Log requires exactly one input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name =')

Fragment(uuid='NORMALIZED-001558',
         path='/python/taso/__init__.py',
         lineno=305,
         depth=4,
         type='documentation',
         name='',
         text='Log requires exactly one input')

Fragment(uuid='NORMALIZED-001559',
         path='/python/taso/__init__.py',
         lineno=306,
         depth=2,
         type='documentation',
         name='',
         text='#input_tensor = None')

Fragment(uuid='NORMALIZED-001560',
         path='/python/taso/__init__.py',
         lineno=307,
         depth=2,
         type='documentation',
         name='',
         text='#if op.input[0] in tensors:')

Fragment(uuid='NORMALIZED-001561',
         path='/python/taso/__init__.py',
         lineno=308,
         depth=2,
         type='documentation',
         name='',
         text='#    input_tensor = tensors[op.input[0]]')

Fragment(uuid='NORMALIZED-001562',
         path='/python/taso/__init__.py',
         lineno=310,
         depth=2,
         type='documentation',
         name='',
         text='#    for init in initializer:')

Fragment(uuid='NORMALIZED-001563',
         path='/python/taso/__init__.py',
         lineno=311,
         depth=0,
         type='module',
         name='',
         text='= op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.log(input=inputs[0])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001564',
         path='/python/taso/__init__.py',
         lineno=311,
         depth=1,
         type='function',
         name='_log',
         text='= op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.log(input=inputs[0])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001565',
         path='/python/taso/__init__.py',
         lineno=311,
         depth=2,
         type='documentation',
         name='',
         text='#        if init.name == op.input[0]:')

Fragment(uuid='NORMALIZED-001566',
         path='/python/taso/__init__.py',
         lineno=312,
         depth=2,
         type='documentation',
         name='',
         text='#            input_tensor = graph.new_weight(')

Fragment(uuid='NORMALIZED-001567',
         path='/python/taso/__init__.py',
         lineno=313,
         depth=2,
         type='documentation',
         name='',
         text='#                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))')

Fragment(uuid='NORMALIZED-001568',
         path='/python/taso/__init__.py',
         lineno=315,
         depth=2,
         type='documentation',
         name='',
         text='#assert input_tensor is not None, "Input Tensor Not Found"')

Fragment(uuid='NORMALIZED-001569',
         path='/python/taso/__init__.py',
         lineno=319,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _logical_not(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Not requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.logical_not(input=inputs[0])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001570',
         path='/python/taso/__init__.py',
         lineno=320,
         depth=1,
         type='function',
         name='_logical_not',
         text='def _logical_not(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Not requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.logical_not(input=inputs[0])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001571',
         path='/python/taso/__init__.py',
         lineno=322,
         depth=4,
         type='documentation',
         name='',
         text='Not requires exactly one input')

Fragment(uuid='NORMALIZED-001572',
         path='/python/taso/__init__.py',
         lineno=326,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _matmul(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "MatMul takes exactly two inputs"\n'
              '    outputs = graph.matmul(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001573',
         path='/python/taso/__init__.py',
         lineno=327,
         depth=1,
         type='function',
         name='_matmul',
         text='def _matmul(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "MatMul takes exactly two inputs"\n'
              '    outputs = graph.matmul(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001574',
         path='/python/taso/__init__.py',
         lineno=329,
         depth=4,
         type='documentation',
         name='',
         text='MatMul takes exactly two inputs')

Fragment(uuid='NORMALIZED-001575',
         path='/python/taso/__init__.py',
         lineno=332,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _min(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Min takes exactly two inputs"\n'
              '    outputs = graph.min(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001576',
         path='/python/taso/__init__.py',
         lineno=333,
         depth=1,
         type='function',
         name='_min',
         text='def _min(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Min takes exactly two inputs"\n'
              '    outputs = graph.min(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001577',
         path='/python/taso/__init__.py',
         lineno=335,
         depth=4,
         type='documentation',
         name='',
         text='Min takes exactly two inputs')

Fragment(uuid='NORMALIZED-001578',
         path='/python/taso/__init__.py',
         lineno=338,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _mul(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Mul takes exactly two inputs"\n'
              '    outputs = graph.mul(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001579',
         path='/python/taso/__init__.py',
         lineno=339,
         depth=1,
         type='function',
         name='_mul',
         text='def _mul(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Mul takes exactly two inputs"\n'
              '    outputs = graph.mul(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001580',
         path='/python/taso/__init__.py',
         lineno=341,
         depth=4,
         type='documentation',
         name='',
         text='Mul takes exactly two inputs')

Fragment(uuid='NORMALIZED-001581',
         path='/python/taso/__init__.py',
         lineno=344,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _pad(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    # TODO: use the shape information from the ONNX runtime to\n'
              '    # calculate the exact output shape\n'
              '    # Currently treat pad as a no op\n'
              "    #assert sum(attrs['pads']) == 0\n"
              '    return inputs[0]\n')

Fragment(uuid='NORMALIZED-001582',
         path='/python/taso/__init__.py',
         lineno=345,
         depth=1,
         type='function',
         name='_pad',
         text='def _pad(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    # TODO: use the shape information from the ONNX runtime to\n'
              '    # calculate the exact output shape\n'
              '    # Currently treat pad as a no op\n'
              "    #assert sum(attrs['pads']) == 0\n"
              '    return inputs[0]')

Fragment(uuid='NORMALIZED-001583',
         path='/python/taso/__init__.py',
         lineno=348,
         depth=2,
         type='documentation',
         name='',
         text='# TODO: use the shape information from the ONNX runtime to')

Fragment(uuid='NORMALIZED-001584',
         path='/python/taso/__init__.py',
         lineno=349,
         depth=2,
         type='documentation',
         name='',
         text='# calculate the exact output shape')

Fragment(uuid='NORMALIZED-001585',
         path='/python/taso/__init__.py',
         lineno=350,
         depth=2,
         type='documentation',
         name='',
         text='# Currently treat pad as a no op')

Fragment(uuid='NORMALIZED-001586',
         path='/python/taso/__init__.py',
         lineno=351,
         depth=2,
         type='documentation',
         name='',
         text="#assert sum(attrs['pads']) == 0")

Fragment(uuid='NORMALIZED-001587',
         path='/python/taso/__init__.py',
         lineno=353,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _prelu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "PRelu requires exactly two '
              'inputs"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.prelu(x=inputs[0], slope=inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001588',
         path='/python/taso/__init__.py',
         lineno=354,
         depth=1,
         type='function',
         name='_prelu',
         text='def _prelu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "PRelu requires exactly two '
              'inputs"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.prelu(x=inputs[0], slope=inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001589',
         path='/python/taso/__init__.py',
         lineno=356,
         depth=4,
         type='documentation',
         name='',
         text='PRelu requires exactly two inputs')

Fragment(uuid='NORMALIZED-001590',
         path='/python/taso/__init__.py',
         lineno=360,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _max(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Max takes exactly two inputs"\n'
              '    outputs = graph.max(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001591',
         path='/python/taso/__init__.py',
         lineno=361,
         depth=1,
         type='function',
         name='_max',
         text='def _max(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Max takes exactly two inputs"\n'
              '    outputs = graph.max(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001592',
         path='/python/taso/__init__.py',
         lineno=363,
         depth=4,
         type='documentation',
         name='',
         text='Max takes exactly two inputs')

Fragment(uuid='NORMALIZED-001593',
         path='/python/taso/__init__.py',
         lineno=366,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _maxpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "MaxPool2D requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    kernels = attrs["kernel_shape"]\n'
              '    strides = attrs["strides"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    outputs = graph.maxpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001594',
         path='/python/taso/__init__.py',
         lineno=367,
         depth=1,
         type='function',
         name='_maxpool2d',
         text='def _maxpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "MaxPool2D requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    kernels = attrs["kernel_shape"]\n'
              '    strides = attrs["strides"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    outputs = graph.maxpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001595',
         path='/python/taso/__init__.py',
         lineno=369,
         depth=4,
         type='documentation',
         name='',
         text='MaxPool2D requires exactly one input')

Fragment(uuid='NORMALIZED-001596',
         path='/python/taso/__init__.py',
         lineno=376,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _avgpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "AvgPool2D requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    kernels = attrs["kernel_shape"]\n'
              '    strides = attrs["strides"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    outputs = graph.avgpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001597',
         path='/python/taso/__init__.py',
         lineno=377,
         depth=1,
         type='function',
         name='_avgpool2d',
         text='def _avgpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "AvgPool2D requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    kernels = attrs["kernel_shape"]\n'
              '    strides = attrs["strides"]\n'
              '    pads = _get_conv_pool_pads_attr(attrs)\n'
              '    outputs = graph.avgpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001598',
         path='/python/taso/__init__.py',
         lineno=379,
         depth=4,
         type='documentation',
         name='',
         text='AvgPool2D requires exactly one input')

Fragment(uuid='NORMALIZED-001599',
         path='/python/taso/__init__.py',
         lineno=386,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _globalavgpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "GlobalAvgPool2D requires exactly '
              'one input"\n'
              '    dim = inputs[0].dim(inputs[0].nDim-1)\n'
              '    kernels = [dim, dim]\n'
              '    strides = [1, 1]\n'
              '    pads = "VALID"\n'
              '    outputs = graph.avgpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001600',
         path='/python/taso/__init__.py',
         lineno=387,
         depth=1,
         type='function',
         name='_globalavgpool2d',
         text='def _globalavgpool2d(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "GlobalAvgPool2D requires exactly '
              'one input"\n'
              '    dim = inputs[0].dim(inputs[0].nDim-1)\n'
              '    kernels = [dim, dim]\n'
              '    strides = [1, 1]\n'
              '    pads = "VALID"\n'
              '    outputs = graph.avgpool2d(input=inputs[0], kernels=kernels, '
              'strides=strides, padding=pads)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001601',
         path='/python/taso/__init__.py',
         lineno=389,
         depth=4,
         type='documentation',
         name='',
         text='GlobalAvgPool2D requires exactly one input')

Fragment(uuid='NORMALIZED-001602',
         path='/python/taso/__init__.py',
         lineno=396,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _reducemax(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMax requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_max(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001603',
         path='/python/taso/__init__.py',
         lineno=397,
         depth=1,
         type='function',
         name='_reducemax',
         text='def _reducemax(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMax requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_max(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001604',
         path='/python/taso/__init__.py',
         lineno=399,
         depth=4,
         type='documentation',
         name='',
         text='ReduceMax requires exactly one input')

Fragment(uuid='NORMALIZED-001605',
         path='/python/taso/__init__.py',
         lineno=408,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _reducemean(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMean requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_mean(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001606',
         path='/python/taso/__init__.py',
         lineno=409,
         depth=1,
         type='function',
         name='_reducemean',
         text='def _reducemean(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMean requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_mean(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001607',
         path='/python/taso/__init__.py',
         lineno=411,
         depth=4,
         type='documentation',
         name='',
         text='ReduceMean requires exactly one input')

Fragment(uuid='NORMALIZED-001608',
         path='/python/taso/__init__.py',
         lineno=420,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _reducemin(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMin requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_min(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001609',
         path='/python/taso/__init__.py',
         lineno=421,
         depth=1,
         type='function',
         name='_reducemin',
         text='def _reducemin(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceMin requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_min(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001610',
         path='/python/taso/__init__.py',
         lineno=423,
         depth=4,
         type='documentation',
         name='',
         text='ReduceMin requires exactly one input')

Fragment(uuid='NORMALIZED-001611',
         path='/python/taso/__init__.py',
         lineno=432,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _reduceprod(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceProd requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_prod(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001612',
         path='/python/taso/__init__.py',
         lineno=433,
         depth=1,
         type='function',
         name='_reduceprod',
         text='def _reduceprod(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceProd requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_prod(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001613',
         path='/python/taso/__init__.py',
         lineno=435,
         depth=4,
         type='documentation',
         name='',
         text='ReduceProd requires exactly one input')

Fragment(uuid='NORMALIZED-001614',
         path='/python/taso/__init__.py',
         lineno=444,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _reducesum(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceSum requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_sum(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001615',
         path='/python/taso/__init__.py',
         lineno=445,
         depth=1,
         type='function',
         name='_reducesum',
         text='def _reducesum(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "ReduceSum requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    keepdims = attrs["keepdims"]\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes_list = list()\n'
              '    for i in axes_ints:\n'
              '        axes_list.append(i)\n'
              '    outputs = graph.reduce_sum(input=inputs[0], '
              'axes=tuple(axes_list), keepdims=keepdims)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001616',
         path='/python/taso/__init__.py',
         lineno=447,
         depth=4,
         type='documentation',
         name='',
         text='ReduceSum requires exactly one input')

Fragment(uuid='NORMALIZED-001617',
         path='/python/taso/__init__.py',
         lineno=456,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _reshape(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2\n'
              '    shape = list()\n'
              '    for data in initializer:\n'
              '        if data.name == op.input[1]:\n'
              '            shape = list()\n'
              '            if data.int64_data != []:\n'
              '                for dim in data.int64_data:\n'
              '                    shape.append(dim)\n'
              '            elif data.raw_data and data.raw_data != []:\n'
              '                shape_in_array = numpy_helper.to_array(data)\n'
              '                for dim in shape_in_array:\n'
              '                    shape.append(dim)\n'
              '    outputs = graph.reshape(inputs[0], tuple(shape))\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001618',
         path='/python/taso/__init__.py',
         lineno=457,
         depth=1,
         type='function',
         name='_reshape',
         text='def _reshape(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2\n'
              '    shape = list()\n'
              '    for data in initializer:\n'
              '        if data.name == op.input[1]:\n'
              '            shape = list()\n'
              '            if data.int64_data != []:\n'
              '                for dim in data.int64_data:\n'
              '                    shape.append(dim)\n'
              '            elif data.raw_data and data.raw_data != []:\n'
              '                shape_in_array = numpy_helper.to_array(data)\n'
              '                for dim in shape_in_array:\n'
              '                    shape.append(dim)\n'
              '    outputs = graph.reshape(inputs[0], tuple(shape))\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001619',
         path='/python/taso/__init__.py',
         lineno=473,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _resize(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) >= 2, "Resize takes at least two '
              'inputs"\n'
              '    outputs = graph.resize(inputs[0], inputs[1])\n'
              '    return outputs\n'
              '\n'
              '# TensorFlow resize_nearest_neighbor\n'
              '# '
              'https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/resize-nearest-neighbor\n'
              'def _resize_nearest_neighbor(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "ResizeNearestNeighbor takes '
              'exactly two inputs"\n'
              '    shape = list()\n')

Fragment(uuid='NORMALIZED-001620',
         path='/python/taso/__init__.py',
         lineno=474,
         depth=1,
         type='function',
         name='_resize',
         text='def _resize(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) >= 2, "Resize takes at least two '
              'inputs"\n'
              '    outputs = graph.resize(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001621',
         path='/python/taso/__init__.py',
         lineno=476,
         depth=4,
         type='documentation',
         name='',
         text='Resize takes at least two inputs')

Fragment(uuid='NORMALIZED-001622',
         path='/python/taso/__init__.py',
         lineno=480,
         depth=0,
         type='documentation',
         name='',
         text='# TensorFlow resize_nearest_neighbor')

Fragment(uuid='NORMALIZED-001623',
         path='/python/taso/__init__.py',
         lineno=481,
         depth=0,
         type='documentation',
         name='',
         text='# '
              'https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/resize-nearest-neighbor')

Fragment(uuid='NORMALIZED-001624',
         path='/python/taso/__init__.py',
         lineno=482,
         depth=1,
         type='function',
         name='_resize_nearest_neighbor',
         text='def _resize_nearest_neighbor(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "ResizeNearestNeighbor takes '
              'exactly two inputs"\n'
              '    shape = list()\n'
              '    for data in initializer:\n'
              '        if data.name == op.input[1]:\n'
              '            for dim in data.int64_data:\n'
              '                shape.append(dim)\n'
              '    assert len(shape) == 2, "ResizeNeareestNeighbor: new size '
              'cannot be statically inferred"\n'
              '    outputs = graph.resize_nearest_neighbor(input=inputs[0], '
              'new_height=shape[0], new_width=shape[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001625',
         path='/python/taso/__init__.py',
         lineno=484,
         depth=4,
         type='documentation',
         name='',
         text='ResizeNearestNeighbor takes exactly two inputs')

Fragment(uuid='NORMALIZED-001626',
         path='/python/taso/__init__.py',
         lineno=486,
         depth=0,
         type='module',
         name='',
         text='    for data in initializer:\n'
              '        if data.name == op.input[1]:\n')

Fragment(uuid='NORMALIZED-001627',
         path='/python/taso/__init__.py',
         lineno=488,
         depth=0,
         type='module',
         name='',
         text='            for dim in data.int64_data:\n'
              '                shape.append(dim)\n'
              '    assert len(shape) == 2, "ResizeNeareestNeighbor: new size '
              'cannot be statically inferred"\n'
              '    outputs = graph.resize_nearest_neighbor(input=inputs[0], '
              'new_height=shape[0], new_width=shape[1])\n'
              '    return outputs\n'
              '\n'
              '# TensorFlow crop_and_resize\n'
              '# https://www.tensorf')

Fragment(uuid='NORMALIZED-001628',
         path='/python/taso/__init__.py',
         lineno=490,
         depth=4,
         type='documentation',
         name='',
         text='ResizeNeareestNeighbor: new size cannot be statically inferred')

Fragment(uuid='NORMALIZED-001629',
         path='/python/taso/__init__.py',
         lineno=494,
         depth=0,
         type='documentation',
         name='',
         text='# TensorFlow crop_and_resize')

Fragment(uuid='NORMALIZED-001630',
         path='/python/taso/__init__.py',
         lineno=495,
         depth=0,
         type='module',
         name='',
         text='low.org/api_docs/cc/class/tensorflow/ops/crop-and-resize\n'
              'def _crop_and_resize(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 4, "CropAndResize takes exactly four '
              'inputs"\n'
              '    outputs = graph.crop_and_resize(inputs[0], inputs[1], '
              'inputs[2], inputs[3])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001631',
         path='/python/taso/__init__.py',
         lineno=495,
         depth=0,
         type='documentation',
         name='',
         text='# '
              'https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/crop-and-resize')

Fragment(uuid='NORMALIZED-001632',
         path='/python/taso/__init__.py',
         lineno=496,
         depth=1,
         type='function',
         name='_crop_and_resize',
         text='def _crop_and_resize(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 4, "CropAndResize takes exactly four '
              'inputs"\n'
              '    outputs = graph.crop_and_resize(inputs[0], inputs[1], '
              'inputs[2], inputs[3])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001633',
         path='/python/taso/__init__.py',
         lineno=498,
         depth=4,
         type='documentation',
         name='',
         text='CropAndResize takes exactly four inputs')

Fragment(uuid='NORMALIZED-001634',
         path='/python/taso/__init__.py',
         lineno=501,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _relu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Relu requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.relu(input=inputs[0])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001635',
         path='/python/taso/__init__.py',
         lineno=502,
         depth=1,
         type='function',
         name='_relu',
         text='def _relu(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Relu requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.relu(input=inputs[0])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001636',
         path='/python/taso/__init__.py',
         lineno=504,
         depth=4,
         type='documentation',
         name='',
         text='Relu requires exactly one input')

Fragment(uuid='NORMALIZED-001637',
         path='/python/taso/__init__.py',
         lineno=508,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _round(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Round requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.round(inputs[0])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001638',
         path='/python/taso/__init__.py',
         lineno=509,
         depth=1,
         type='function',
         name='_round',
         text='def _round(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Round requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.round(inputs[0])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001639',
         path='/python/taso/__init__.py',
         lineno=511,
         depth=4,
         type='documentation',
         name='',
         text='Round requires exactly one input')

Fragment(uuid='NORMALIZED-001640',
         path='/python/taso/__init__.py',
         lineno=515,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _shape(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs)== 1, "Shape requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.shape(inputs[0])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001641',
         path='/python/taso/__init__.py',
         lineno=516,
         depth=1,
         type='function',
         name='_shape',
         text='def _shape(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs)== 1, "Shape requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.shape(inputs[0])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001642',
         path='/python/taso/__init__.py',
         lineno=518,
         depth=4,
         type='documentation',
         name='',
         text='Shape requires exactly one input')

Fragment(uuid='NORMALIZED-001643',
         path='/python/taso/__init__.py',
         lineno=522,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _sigmoid(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Sigmoid requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.sigmoid(input=inputs[0])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001644',
         path='/python/taso/__init__.py',
         lineno=523,
         depth=1,
         type='function',
         name='_sigmoid',
         text='def _sigmoid(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Sigmoid requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.sigmoid(input=inputs[0])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001645',
         path='/python/taso/__init__.py',
         lineno=525,
         depth=4,
         type='documentation',
         name='',
         text='Sigmoid requires exactly one input')

Fragment(uuid='NORMALIZED-001646',
         path='/python/taso/__init__.py',
         lineno=529,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _size(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Size requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.size(inputs[0])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001647',
         path='/python/taso/__init__.py',
         lineno=530,
         depth=1,
         type='function',
         name='_size',
         text='def _size(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Size requires exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.size(inputs[0])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001648',
         path='/python/taso/__init__.py',
         lineno=532,
         depth=4,
         type='documentation',
         name='',
         text='Size requires exactly one input')

Fragment(uuid='NORMALIZED-001649',
         path='/python/taso/__init__.py',
         lineno=536,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _slice(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) >= 3, "Slice requires at least 3 '
              'inputs"\n'
              '    assert len(inputs) <= 5, "Slice takes at most 5 inputs"\n'
              '    start = _get_list_from_initializer(initializer, '
              'op.input[1])\n'
              '    # replace INT_MAX with 999999\n')

Fragment(uuid='NORMALIZED-001650',
         path='/python/taso/__init__.py',
         lineno=537,
         depth=1,
         type='function',
         name='_slice',
         text='def _slice(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) >= 3, "Slice requires at least 3 '
              'inputs"\n'
              '    assert len(inputs) <= 5, "Slice takes at most 5 inputs"\n'
              '    start = _get_list_from_initializer(initializer, '
              'op.input[1])\n'
              '    # replace INT_MAX with 999999\n')

Fragment(uuid='NORMALIZED-001651',
         path='/python/taso/__init__.py',
         lineno=539,
         depth=4,
         type='documentation',
         name='',
         text='Slice requires at least 3 inputs')

Fragment(uuid='NORMALIZED-001652',
         path='/python/taso/__init__.py',
         lineno=540,
         depth=4,
         type='documentation',
         name='',
         text='Slice takes at most 5 inputs')

Fragment(uuid='NORMALIZED-001653',
         path='/python/taso/__init__.py',
         lineno=542,
         depth=2,
         type='documentation',
         name='',
         text='# replace INT_MAX with 999999')

Fragment(uuid='NORMALIZED-001654',
         path='/python/taso/__init__.py',
         lineno=543,
         depth=0,
         type='module',
         name='',
         text='    for i in range(len(start)):\n'
              '        start[i] = min(999999, start[i])\n'
              '    end = _get_list_from_initializer(initializer, op.input[2])\n'
              '    # replace INT_MAX with 999999\n')

Fragment(uuid='NORMALIZED-001655',
         path='/python/taso/__init__.py',
         lineno=543,
         depth=1,
         type='function',
         name='_slice',
         text='    for i in range(len(start)):\n'
              '        start[i] = min(999999, start[i])\n'
              '    end = _get_list_from_initializer(initializer, op.input[2])\n'
              '    # replace INT_MAX with 999999\n')

Fragment(uuid='NORMALIZED-001656',
         path='/python/taso/__init__.py',
         lineno=546,
         depth=2,
         type='documentation',
         name='',
         text='# replace INT_MAX with 999999')

Fragment(uuid='NORMALIZED-001657',
         path='/python/taso/__init__.py',
         lineno=547,
         depth=0,
         type='module',
         name='',
         text='    for i in range(len(end)):\n'
              '        end[i] = min(999999, end[i])\n'
              '    if len(op.input) > 3:\n'
              '        axes = _get_list_from_initializer(initializer, '
              'op.input[3])\n'
              '    else:\n'
              '        axes = None\n'
              '    if len(op.input) > 4:\n'
              '        steps = _get_list_from_initializer(initializer, '
              'op.input[4])\n'
              '    else:\n'
              '        steps = None\n'
              '    outputs = graph.slice(inputs[0], start, end, axes, steps)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001658',
         path='/python/taso/__init__.py',
         lineno=547,
         depth=1,
         type='function',
         name='_slice',
         text='    for i in range(len(end)):\n'
              '        end[i] = min(999999, end[i])\n'
              '    if len(op.input) > 3:\n'
              '        axes = _get_list_from_initializer(initializer, '
              'op.input[3])\n'
              '    else:\n'
              '        axes = None\n'
              '    if len(op.input) > 4:\n'
              '        steps = _get_list_from_initializer(initializer, '
              'op.input[4])\n'
              '    else:\n'
              '        steps = None\n'
              '    outputs = graph.slice(inputs[0], start, end, axes, steps)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001659',
         path='/python/taso/__init__.py',
         lineno=559,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _split(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Split requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axis = attrs["axis"]\n'
              '    split_ints = attrs["split"]\n'
              '    if type(split_ints) is not list:\n'
              '        origin_dim = inputs[0].dim(axis)\n'
              '        split_list = [int(origin_dim / split_ints)] * '
              'split_ints\n'
              '        outputs = graph.split(inputs[0], axis, split_list)\n'
              '    else:\n'
              '        split_list = list()\n')

Fragment(uuid='NORMALIZED-001660',
         path='/python/taso/__init__.py',
         lineno=560,
         depth=1,
         type='function',
         name='_split',
         text='def _split(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Split requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axis = attrs["axis"]\n'
              '    split_ints = attrs["split"]\n'
              '    if type(split_ints) is not list:\n'
              '        origin_dim = inputs[0].dim(axis)\n'
              '        split_list = [int(origin_dim / split_ints)] * '
              'split_ints\n'
              '        outputs = graph.split(inputs[0], axis, split_list)\n'
              '    else:\n'
              '        split_list = list()\n')

Fragment(uuid='NORMALIZED-001661',
         path='/python/taso/__init__.py',
         lineno=562,
         depth=4,
         type='documentation',
         name='',
         text='Split requires exactly one input')

Fragment(uuid='NORMALIZED-001662',
         path='/python/taso/__init__.py',
         lineno=572,
         depth=0,
         type='module',
         name='',
         text='        for i in split_ints:\n'
              '            split_list.append(i)\n'
              '        outputs = graph.split(inputs[0], axis, split_list)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001663',
         path='/python/taso/__init__.py',
         lineno=572,
         depth=1,
         type='function',
         name='_split',
         text='        for i in split_ints:\n'
              '            split_list.append(i)\n'
              '        outputs = graph.split(inputs[0], axis, split_list)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001664',
         path='/python/taso/__init__.py',
         lineno=576,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _sqrt(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Sqrt requires exactly one input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name ')

Fragment(uuid='NORMALIZED-001665',
         path='/python/taso/__init__.py',
         lineno=577,
         depth=1,
         type='function',
         name='_sqrt',
         text='def _sqrt(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Sqrt requires exactly one input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if init.name ')

Fragment(uuid='NORMALIZED-001666',
         path='/python/taso/__init__.py',
         lineno=579,
         depth=4,
         type='documentation',
         name='',
         text='Sqrt requires exactly one input')

Fragment(uuid='NORMALIZED-001667',
         path='/python/taso/__init__.py',
         lineno=580,
         depth=2,
         type='documentation',
         name='',
         text='#input_tensor = None')

Fragment(uuid='NORMALIZED-001668',
         path='/python/taso/__init__.py',
         lineno=581,
         depth=2,
         type='documentation',
         name='',
         text='#if op.input[0] in tensors:')

Fragment(uuid='NORMALIZED-001669',
         path='/python/taso/__init__.py',
         lineno=582,
         depth=2,
         type='documentation',
         name='',
         text='#    input_tensor = tensors[op.input[0]]')

Fragment(uuid='NORMALIZED-001670',
         path='/python/taso/__init__.py',
         lineno=584,
         depth=2,
         type='documentation',
         name='',
         text='#    for init in initializer:')

Fragment(uuid='NORMALIZED-001671',
         path='/python/taso/__init__.py',
         lineno=585,
         depth=0,
         type='module',
         name='',
         text='== op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.sqrt(input=inputs[0])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001672',
         path='/python/taso/__init__.py',
         lineno=585,
         depth=1,
         type='function',
         name='_sqrt',
         text='== op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    outputs = graph.sqrt(input=inputs[0])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001673',
         path='/python/taso/__init__.py',
         lineno=585,
         depth=2,
         type='documentation',
         name='',
         text='#        if init.name == op.input[0]:')

Fragment(uuid='NORMALIZED-001674',
         path='/python/taso/__init__.py',
         lineno=586,
         depth=2,
         type='documentation',
         name='',
         text='#            input_tensor = graph.new_weight(')

Fragment(uuid='NORMALIZED-001675',
         path='/python/taso/__init__.py',
         lineno=587,
         depth=2,
         type='documentation',
         name='',
         text='#                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))')

Fragment(uuid='NORMALIZED-001676',
         path='/python/taso/__init__.py',
         lineno=589,
         depth=2,
         type='documentation',
         name='',
         text='#assert input_tensor is not None, "Input Tensor Not Found"')

Fragment(uuid='NORMALIZED-001677',
         path='/python/taso/__init__.py',
         lineno=593,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _squeeze(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Squeeze takes exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes = list()\n'
              '    for i in axes_ints:\n'
              '        axes.append(i)\n'
              '    outputs = graph.squeeze(input=inputs[0], axes=tuple(axes))\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001678',
         path='/python/taso/__init__.py',
         lineno=594,
         depth=1,
         type='function',
         name='_squeeze',
         text='def _squeeze(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Squeeze takes exactly one input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes = list()\n'
              '    for i in axes_ints:\n'
              '        axes.append(i)\n'
              '    outputs = graph.squeeze(input=inputs[0], axes=tuple(axes))\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001679',
         path='/python/taso/__init__.py',
         lineno=596,
         depth=4,
         type='documentation',
         name='',
         text='Squeeze takes exactly one input')

Fragment(uuid='NORMALIZED-001680',
         path='/python/taso/__init__.py',
         lineno=604,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _strided_slice(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 4, "StrideSlice takes exactly four '
              'inputs"\n'
              '    start = _get_list_from_initializer(initializer, '
              'op.input[1])\n'
              '    end = _get_list_from_initializer(initializer, op.input[2])\n'
              '    steps = _get_list_from_initializer(initializer, '
              'op.input[3])\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    begin_mask = attrs["begin_mask"]\n'
              '    end_mask = attrs["end_mask"]\n'
              '   ')

Fragment(uuid='NORMALIZED-001681',
         path='/python/taso/__init__.py',
         lineno=605,
         depth=1,
         type='function',
         name='_strided_slice',
         text='def _strided_slice(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 4, "StrideSlice takes exactly four '
              'inputs"\n'
              '    start = _get_list_from_initializer(initializer, '
              'op.input[1])\n'
              '    end = _get_list_from_initializer(initializer, op.input[2])\n'
              '    steps = _get_list_from_initializer(initializer, '
              'op.input[3])\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    begin_mask = attrs["begin_mask"]\n'
              '    end_mask = attrs["end_mask"]\n'
              '   ')

Fragment(uuid='NORMALIZED-001682',
         path='/python/taso/__init__.py',
         lineno=607,
         depth=4,
         type='documentation',
         name='',
         text='StrideSlice takes exactly four inputs')

Fragment(uuid='NORMALIZED-001683',
         path='/python/taso/__init__.py',
         lineno=614,
         depth=0,
         type='module',
         name='',
         text=' ellipsis_mask = attrs["ellipsis_mask"]\n'
              '    new_axis_mask = attrs["new_axis_mask"]\n'
              '    shrink_axis_mask = attrs["shrink_axis_mask"]\n'
              '    # TODO: support new_axis and shrink axis\n'
              '    assert new_axis_mask == 0, "Non zero new_axis_mask is not '
              'supported yet"\n'
              '    assert shrink_axis_mask == 0, "Non zero shrink_axis_mask is '
              'not supported yet"\n'
              '    # TODO: current assume that strided slice returns the '
              'original tensor\n'
              '    outputs = graph.slice(inputs[0], None, None, None, None)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001684',
         path='/python/taso/__init__.py',
         lineno=614,
         depth=1,
         type='function',
         name='_strided_slice',
         text=' ellipsis_mask = attrs["ellipsis_mask"]\n'
              '    new_axis_mask = attrs["new_axis_mask"]\n'
              '    shrink_axis_mask = attrs["shrink_axis_mask"]\n'
              '    # TODO: support new_axis and shrink axis\n'
              '    assert new_axis_mask == 0, "Non zero new_axis_mask is not '
              'supported yet"\n'
              '    assert shrink_axis_mask == 0, "Non zero shrink_axis_mask is '
              'not supported yet"\n'
              '    # TODO: current assume that strided slice returns the '
              'original tensor\n'
              '    outputs = graph.slice(inputs[0], None, None, None, None)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001685',
         path='/python/taso/__init__.py',
         lineno=617,
         depth=2,
         type='documentation',
         name='',
         text='# TODO: support new_axis and shrink axis')

Fragment(uuid='NORMALIZED-001686',
         path='/python/taso/__init__.py',
         lineno=618,
         depth=4,
         type='documentation',
         name='',
         text='Non zero new_axis_mask is not supported yet')

Fragment(uuid='NORMALIZED-001687',
         path='/python/taso/__init__.py',
         lineno=619,
         depth=4,
         type='documentation',
         name='',
         text='Non zero shrink_axis_mask is not supported yet')

Fragment(uuid='NORMALIZED-001688',
         path='/python/taso/__init__.py',
         lineno=620,
         depth=2,
         type='documentation',
         name='',
         text='# TODO: current assume that strided slice returns the original '
              'tensor')

Fragment(uuid='NORMALIZED-001689',
         path='/python/taso/__init__.py',
         lineno=623,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _sub(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Sub takes exactly two inputs"\n'
              '    outputs = graph.sub(x=inputs[0], y=inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001690',
         path='/python/taso/__init__.py',
         lineno=624,
         depth=1,
         type='function',
         name='_sub',
         text='def _sub(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "Sub takes exactly two inputs"\n'
              '    outputs = graph.sub(x=inputs[0], y=inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001691',
         path='/python/taso/__init__.py',
         lineno=626,
         depth=4,
         type='documentation',
         name='',
         text='Sub takes exactly two inputs')

Fragment(uuid='NORMALIZED-001692',
         path='/python/taso/__init__.py',
         lineno=629,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _sum(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "TASO assumes Sum takes exactly '
              'two inputs. Submit a github issue when you see this."\n'
              '    outputs = graph.add(inputs[0], inputs[1])\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001693',
         path='/python/taso/__init__.py',
         lineno=630,
         depth=1,
         type='function',
         name='_sum',
         text='def _sum(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 2, "TASO assumes Sum takes exactly '
              'two inputs. Submit a github issue when you see this."\n'
              '    outputs = graph.add(inputs[0], inputs[1])\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001694',
         path='/python/taso/__init__.py',
         lineno=632,
         depth=4,
         type='documentation',
         name='',
         text='TASO assumes Sum takes exactly two inputs. Submit a github '
              'issue when you see this.')

Fragment(uuid='NORMALIZED-001695',
         path='/python/taso/__init__.py',
         lineno=635,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _transpose(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Transpose requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    perm_ints = attrs["perm"]\n'
              '    perm = list()\n'
              '    for i in perm_ints:\n'
              '        perm.append(i)\n'
              '    outputs = graph.transpose(inputs[0], tuple(perm), '
              'shuffle=True)\n'
              '    return outputs\n')

Fragment(uuid='NORMALIZED-001696',
         path='/python/taso/__init__.py',
         lineno=636,
         depth=1,
         type='function',
         name='_transpose',
         text='def _transpose(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Transpose requires exactly one '
              'input"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    perm_ints = attrs["perm"]\n'
              '    perm = list()\n'
              '    for i in perm_ints:\n'
              '        perm.append(i)\n'
              '    outputs = graph.transpose(inputs[0], tuple(perm), '
              'shuffle=True)\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001697',
         path='/python/taso/__init__.py',
         lineno=638,
         depth=4,
         type='documentation',
         name='',
         text='Transpose requires exactly one input')

Fragment(uuid='NORMALIZED-001698',
         path='/python/taso/__init__.py',
         lineno=646,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _unsqueeze(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Unsqueeze takes exactly one '
              'input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if ')

Fragment(uuid='NORMALIZED-001699',
         path='/python/taso/__init__.py',
         lineno=647,
         depth=1,
         type='function',
         name='_unsqueeze',
         text='def _unsqueeze(op, graph, tensors, initializer):\n'
              '    inputs = _get_inputs(op, graph, tensors, initializer)\n'
              '    assert len(inputs) == 1, "Unsqueeze takes exactly one '
              'input"\n'
              '    #input_tensor = None\n'
              '    #if op.input[0] in tensors:\n'
              '    #    input_tensor = tensors[op.input[0]]\n'
              '    #else:\n'
              '    #    for init in initializer:\n'
              '    #        if i')

Fragment(uuid='NORMALIZED-001700',
         path='/python/taso/__init__.py',
         lineno=649,
         depth=4,
         type='documentation',
         name='',
         text='Unsqueeze takes exactly one input')

Fragment(uuid='NORMALIZED-001701',
         path='/python/taso/__init__.py',
         lineno=650,
         depth=2,
         type='documentation',
         name='',
         text='#input_tensor = None')

Fragment(uuid='NORMALIZED-001702',
         path='/python/taso/__init__.py',
         lineno=651,
         depth=2,
         type='documentation',
         name='',
         text='#if op.input[0] in tensors:')

Fragment(uuid='NORMALIZED-001703',
         path='/python/taso/__init__.py',
         lineno=652,
         depth=2,
         type='documentation',
         name='',
         text='#    input_tensor = tensors[op.input[0]]')

Fragment(uuid='NORMALIZED-001704',
         path='/python/taso/__init__.py',
         lineno=654,
         depth=2,
         type='documentation',
         name='',
         text='#    for init in initializer:')

Fragment(uuid='NORMALIZED-001705',
         path='/python/taso/__init__.py',
         lineno=655,
         depth=0,
         type='module',
         name='',
         text='init.name == op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes = list()\n')

Fragment(uuid='NORMALIZED-001706',
         path='/python/taso/__init__.py',
         lineno=655,
         depth=1,
         type='function',
         name='_unsqueeze',
         text='nit.name == op.input[0]:\n'
              '    #            input_tensor = graph.new_weight(\n'
              '    #                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))\n'
              '    #            break\n'
              '    #assert input_tensor is not None, "Input Tensor Not Found"\n'
              '    attrs = _parse_attribute(op.attribute)\n'
              '    axes_ints = attrs["axes"]\n'
              '    axes = list()\n')

Fragment(uuid='NORMALIZED-001707',
         path='/python/taso/__init__.py',
         lineno=655,
         depth=2,
         type='documentation',
         name='',
         text='#        if init.name == op.input[0]:')

Fragment(uuid='NORMALIZED-001708',
         path='/python/taso/__init__.py',
         lineno=656,
         depth=2,
         type='documentation',
         name='',
         text='#            input_tensor = graph.new_weight(')

Fragment(uuid='NORMALIZED-001709',
         path='/python/taso/__init__.py',
         lineno=657,
         depth=2,
         type='documentation',
         name='',
         text='#                dims=tuple(list(init.dims)), '
              'data=numpy_helper.to_array(init))')

Fragment(uuid='NORMALIZED-001710',
         path='/python/taso/__init__.py',
         lineno=659,
         depth=2,
         type='documentation',
         name='',
         text='#assert input_tensor is not None, "Input Tensor Not Found"')

Fragment(uuid='NORMALIZED-001711',
         path='/python/taso/__init__.py',
         lineno=663,
         depth=0,
         type='module',
         name='',
         text='    for i in axes_ints:\n'
              '        axes.append(i)\n'
              '    outputs = graph.unsqueeze(input=inputs[0], '
              'axes=tuple(axes))\n'
              '    return outputs\n'
              '\n'
              '# Add all supported operators\n'
              'xf_operators = dict()\n'
              "xf_operators['Add'] = _add\n"
              "xf_operators['ArgMax'] = _argmax\n"
              "xf_operators['ArgMin'] = _argmin\n"
              "xf_operators['BatchNormalization'] = _batchnorm\n"
              "xf_operators['Cast'] = _cast\n"
              "xf_operators['Ceil'] = _ceil\n"
              "xf_operators['Concat'] = _concat\n"
              'xf_operators["Constant"] = _constant\n'
              'xf_o')

Fragment(uuid='NORMALIZED-001712',
         path='/python/taso/__init__.py',
         lineno=663,
         depth=1,
         type='function',
         name='_unsqueeze',
         text='    for i in axes_ints:\n'
              '        axes.append(i)\n'
              '    outputs = graph.unsqueeze(input=inputs[0], '
              'axes=tuple(axes))\n'
              '    return outputs')

Fragment(uuid='NORMALIZED-001713',
         path='/python/taso/__init__.py',
         lineno=668,
         depth=0,
         type='documentation',
         name='',
         text='# Add all supported operators')

Fragment(uuid='NORMALIZED-001714',
         path='/python/taso/__init__.py',
         lineno=678,
         depth=0,
         type='module',
         name='',
         text="perators['Conv'] = _conv2d\n"
              "xf_operators['Div'] = _div\n"
              "xf_operators['Dropout'] = _dropout\n"
              "xf_operators['Equal'] = _equal\n"
              "xf_operators['Exp'] = _exp\n"
              "xf_operators['Flatten'] = _flatten\n"
              "xf_operators['Gemm'] = _gemm\n"
              "xf_operators['Grea")

Fragment(uuid='NORMALIZED-001715',
         path='/python/taso/__init__.py',
         lineno=685,
         depth=0,
         type='module',
         name='',
         text="ter'] = _greater\n"
              "xf_operators['Identity'] = _identity\n"
              "xf_operators['LeakyRelu'] = _leakyrelu\n"
              "xf_operators['Less'] = _less\n"
              "xf_operators['Log'] = _log\n"
              "xf_operators['Pad'] = _pad\n"
              "xf_operators['PRelu'] = _prelu\n"
              "xf_operators['ReduceMa")

Fragment(uuid='NORMALIZED-001716',
         path='/python/taso/__init__.py',
         lineno=692,
         depth=0,
         type='module',
         name='',
         text="x'] = _reducemax\n"
              "xf_operators['ReduceMean'] = _reducemean\n"
              "xf_operators['ReduceMin'] = _reducemin\n"
              "xf_operators['ReduceProd'] = _reduceprod\n"
              "xf_operators['ReduceSum'] = _reducesum\n"
              "xf_operators['Reshape'] = _reshape\n"
              "xf_operators['Rel")

Fragment(uuid='NORMALIZED-001717',
         path='/python/taso/__init__.py',
         lineno=698,
         depth=0,
         type='module',
         name='',
         text="u'] = _relu\n"
              "xf_operators['Round'] = _round\n"
              "xf_operators['MatMul'] = _matmul\n"
              "xf_operators['Max'] = _max\n"
              "xf_operators['MaxPool'] = _maxpool2d\n"
              "xf_operators['Min'] = _min\n"
              "xf_operators['Mul'] = _mul\n"
              "xf_operators['Not'] = _logical_not\n")

Fragment(uuid='NORMALIZED-001718',
         path='/python/taso/__init__.py',
         lineno=706,
         depth=0,
         type='module',
         name='',
         text="xf_operators['AveragePool'] = _avgpool2d\n"
              "xf_operators['GlobalAveragePool'] = _globalavgpool2d\n"
              "xf_operators['Shape'] = _shape\n"
              "xf_operators['Size'] = _size\n"
              "xf_operators['Slice'] = _slice\n"
              "xf_operators['Split'] = _split\n"
              "xf_operators['Sqrt'] = _sqrt\n"
              "xf_operators['Squeeze'] = _squeeze\n"
              "xf_operators['StridedSlice'] = _strided_slice\n"
              "xf_operators['Sub'] = _sub\n"
              "xf_operators['Sum'] = _sum\n"
              "xf_operators['Transpose'] = _transpose\n"
              "xf_operators['Unsqueeze'] = _unsqueeze\n")

Fragment(uuid='NORMALIZED-001719',
         path='/python/taso/__init__.py',
         lineno=719,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def new_graph(print_measurements = False):\n'
              '    graph = core.PyGraph()\n'
              '    if print_measurements:\n'
              '        graph.print_measurements()\n'
              '    return graph\n')

Fragment(uuid='NORMALIZED-001720',
         path='/python/taso/__init__.py',
         lineno=720,
         depth=1,
         type='function',
         name='new_graph',
         text='def new_graph(print_measurements = False):\n'
              '    graph = core.PyGraph()\n'
              '    if print_measurements:\n'
              '        graph.print_measurements()\n'
              '    return graph')

Fragment(uuid='NORMALIZED-001721',
         path='/python/taso/__init__.py',
         lineno=725,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def load_onnx(filename):\n'
              "    '''\n"
              '    Load a onnx file and return a Graph\n'
              '\n'
              '    @params\n'
              '    filename is a string containing a file name\n'
              '    @return\n'
              '    Loaded in-memory Graph\n'
              "    '''\n"
              '    graph = core.PyGraph()\n'
              '    model = onnx.load(filename)\n'
              '    tensors = dict()\n')

Fragment(uuid='NORMALIZED-001722',
         path='/python/taso/__init__.py',
         lineno=726,
         depth=1,
         type='function',
         name='load_onnx',
         text='def load_onnx(filename):\n'
              "    '''\n"
              '    Load a onnx file and return a Graph\n'
              '\n'
              '    @params\n'
              '    filename is a string containing a file name\n'
              '    @return\n'
              '    Loaded in-memory Graph\n'
              "    '''\n"
              '    graph = core.PyGraph()\n'
              '    model = onnx.load(filename)\n'
              '    tensors = dict()\n')

Fragment(uuid='NORMALIZED-001723',
         path='/python/taso/__init__.py',
         lineno=727,
         depth=4,
         type='documentation',
         name='',
         text='\n'
              '    Load a onnx file and return a Graph\n'
              '\n'
              '    @params\n'
              '    filename is a string containing a file name\n'
              '    @return\n'
              '    Loaded in-memory Graph\n'
              '    ')

Fragment(uuid='NORMALIZED-001724',
         path='/python/taso/__init__.py',
         lineno=738,
         depth=0,
         type='module',
         name='',
         text='    for t in model.graph.input:\n        dims = list()\n')

Fragment(uuid='NORMALIZED-001725',
         path='/python/taso/__init__.py',
         lineno=738,
         depth=1,
         type='function',
         name='load_onnx',
         text='    for t in model.graph.input:\n        dims = list()\n')

Fragment(uuid='NORMALIZED-001726',
         path='/python/taso/__init__.py',
         lineno=740,
         depth=0,
         type='module',
         name='',
         text='        for d in t.type.tensor_type.shape.dim:\n'
              '            dims.append(d.dim_value)\n'
              '        weight_data = None\n')

Fragment(uuid='NORMALIZED-001727',
         path='/python/taso/__init__.py',
         lineno=740,
         depth=1,
         type='function',
         name='load_onnx',
         text='        for d in t.type.tensor_type.shape.dim:\n'
              '            dims.append(d.dim_value)\n'
              '        weight_data = None\n')

Fragment(uuid='NORMALIZED-001728',
         path='/python/taso/__init__.py',
         lineno=743,
         depth=0,
         type='module',
         name='',
         text='        for weight in model.graph.initializer:\n'
              '            if (weight.name == t.name):\n'
              '                weight_data = numpy_helper.to_array(weight)\n'
              '        # We classify an input to be a pure input if we cannot '
              'find its weights\n'
              '        if weight_data is None:\n'
              '            tensors[t.name] = '
              'graph.new_input(dims=tuple(dims))\n'
              '        else:\n'
              '            tensors[t.name] = '
              'graph.new_weight(dims=tuple(dims), data=weight_data)\n'
              '\n'
              '    # Add initializers not in the inputs\n')

Fragment(uuid='NORMALIZED-001729',
         path='/python/taso/__init__.py',
         lineno=743,
         depth=1,
         type='function',
         name='load_onnx',
         text='        for weight in model.graph.initializer:\n'
              '            if (weight.name == t.name):\n'
              '                weight_data = numpy_helper.to_array(weight)\n'
              '        # We classify an input to be a pure input if we cannot '
              'find its weights\n'
              '        if weight_data is None:\n'
              '            tensors[t.name] = '
              'graph.new_input(dims=tuple(dims))\n'
              '        else:\n'
              '            tensors[t.name] = '
              'graph.new_weight(dims=tuple(dims), data=weight_data)\n'
              '\n'
              '    # Add initializers not in the inputs\n')

Fragment(uuid='NORMALIZED-001730',
         path='/python/taso/__init__.py',
         lineno=746,
         depth=4,
         type='documentation',
         name='',
         text='# We classify an input to be a pure input if we cannot find its '
              'weights')

Fragment(uuid='NORMALIZED-001731',
         path='/python/taso/__init__.py',
         lineno=752,
         depth=2,
         type='documentation',
         name='',
         text='# Add initializers not in the inputs')

Fragment(uuid='NORMALIZED-001732',
         path='/python/taso/__init__.py',
         lineno=753,
         depth=0,
         type='module',
         name='',
         text='    for weight in model.graph.initializer:\n'
              '        if weight.name not in tensors:\n'
              '            if weight.dims:\n'
              '                dims = list(weight.dims)\n'
              '                weight_data = numpy_helper.to_array(weight)\n'
              '                tensors[weight.name] = '
              'graph.new_weight(dims=tuple(dims), data=weight_data)\n'
              '\n'
              '    # Reorder nodes to satisfy data dependencies\n'
              '    tensor_owner = dict()\n'
              '    name_to_op = dict()\n'
              '    idx = 0\n')

Fragment(uuid='NORMALIZED-001733',
         path='/python/taso/__init__.py',
         lineno=753,
         depth=1,
         type='function',
         name='load_onnx',
         text='    for weight in model.graph.initializer:\n'
              '        if weight.name not in tensors:\n'
              '            if weight.dims:\n'
              '                dims = list(weight.dims)\n'
              '                weight_data = numpy_helper.to_array(weight)\n'
              '                tensors[weight.name] = '
              'graph.new_weight(dims=tuple(dims), data=weight_data)\n'
              '\n'
              '    # Reorder nodes to satisfy data dependencies\n'
              '    tensor_owner = dict()\n'
              '    name_to_op = dict()\n'
              '    idx = 0\n')

Fragment(uuid='NORMALIZED-001734',
         path='/python/taso/__init__.py',
         lineno=760,
         depth=2,
         type='documentation',
         name='',
         text='# Reorder nodes to satisfy data dependencies')

Fragment(uuid='NORMALIZED-001735',
         path='/python/taso/__init__.py',
         lineno=764,
         depth=0,
         type='module',
         name='',
         text='    for op in model.graph.node:\n'
              '        # Assign a name to the node if empty\n'
              '        if len(op.name) == 0:\n'
              "            op.name = op.op_type + '_' + str(idx)\n"
              '        idx += 1\n'
              '        name_to_op[op.name] = op\n')

Fragment(uuid='NORMALIZED-001736',
         path='/python/taso/__init__.py',
         lineno=764,
         depth=1,
         type='function',
         name='load_onnx',
         text='    for op in model.graph.node:\n'
              '        # Assign a name to the node if empty\n'
              '        if len(op.name) == 0:\n'
              "            op.name = op.op_type + '_' + str(idx)\n"
              '        idx += 1\n'
              '        name_to_op[op.name] = op\n')

Fragment(uuid='NORMALIZED-001737',
         path='/python/taso/__init__.py',
         lineno=765,
         depth=3,
         type='documentation',
         name='',
         text='# Assign a name to the node if empty')

Fragment(uuid='NORMALIZED-001738',
         path='/python/taso/__init__.py',
         lineno=770,
         depth=0,
         type='module',
         name='',
         text='        for output in op.output:\n'
              '            tensor_owner[output] = op.name\n'
              '    out_edges = dict()\n'
              '    dependents = dict()\n'
              '    node_list = list()\n')

Fragment(uuid='NORMALIZED-001739',
         path='/python/taso/__init__.py',
         lineno=770,
         depth=1,
         type='function',
         name='load_onnx',
         text='        for output in op.output:\n'
              '            tensor_owner[output] = op.name\n'
              '    out_edges = dict()\n'
              '    dependents = dict()\n'
              '    node_list = list()\n')

Fragment(uuid='NORMALIZED-001740',
         path='/python/taso/__init__.py',
         lineno=775,
         depth=0,
         type='module',
         name='',
         text='    for op in model.graph.node:\n'
              '        dependents[op.name] = 0\n')

Fragment(uuid='NORMALIZED-001741',
         path='/python/taso/__init__.py',
         lineno=775,
         depth=1,
         type='function',
         name='load_onnx',
         text='    for op in model.graph.node:\n'
              '        dependents[op.name] = 0\n')

Fragment(uuid='NORMALIZED-001742',
         path='/python/taso/__init__.py',
         lineno=777,
         depth=0,
         type='module',
         name='',
         text='        for input in op.input:\n'
              '            if input in tensor_owner:\n'
              '                dependents[op.name] += 1\n'
              '                input_node = tensor_owner[input]\n'
              '                if input_node not in out_edges:\n'
              '                    out_edges[input_node] = list()\n'
              '                out_edges[input_node].append(op.name)\n'
              '        if dependents[op.name] == 0:\n'
              '            node_list.append(op.name)\n'
              '    idx = 0\n')

Fragment(uuid='NORMALIZED-001743',
         path='/python/taso/__init__.py',
         lineno=777,
         depth=1,
         type='function',
         name='load_onnx',
         text='        for input in op.input:\n'
              '            if input in tensor_owner:\n'
              '                dependents[op.name] += 1\n'
              '                input_node = tensor_owner[input]\n'
              '                if input_node not in out_edges:\n'
              '                    out_edges[input_node] = list()\n'
              '                out_edges[input_node].append(op.name)\n'
              '        if dependents[op.name] == 0:\n'
              '            node_list.append(op.name)\n'
              '    idx = 0\n')

Fragment(uuid='NORMALIZED-001744',
         path='/python/taso/__init__.py',
         lineno=787,
         depth=0,
         type='module',
         name='',
         text='    while idx < len(node_list):\n'
              '        opname = node_list[idx]\n'
              '        if opname in out_edges:\n')

Fragment(uuid='NORMALIZED-001745',
         path='/python/taso/__init__.py',
         lineno=787,
         depth=1,
         type='function',
         name='load_onnx',
         text='    while idx < len(node_list):\n'
              '        opname = node_list[idx]\n'
              '        if opname in out_edges:\n')

Fragment(uuid='NORMALIZED-001746',
         path='/python/taso/__init__.py',
         lineno=790,
         depth=0,
         type='module',
         name='',
         text='            for e in out_edges[opname]:\n'
              '                dependents[e] -= 1\n'
              '                if dependents[e] == 0:\n'
              '                    node_list.append(e)\n'
              '        idx += 1\n'
              '    assert len(node_list) == len(model.graph.node), "Internal '
              'error when reording ONNX operators"\n'
              '\n'
              '    # Add nodes into TASO graph\n'
              '    cnt = 0\n')

Fragment(uuid='NORMALIZED-001747',
         path='/python/taso/__init__.py',
         lineno=790,
         depth=1,
         type='function',
         name='load_onnx',
         text='            for e in out_edges[opname]:\n'
              '                dependents[e] -= 1\n'
              '                if dependents[e] == 0:\n'
              '                    node_list.append(e)\n'
              '        idx += 1\n'
              '    assert len(node_list) == len(model.graph.node), "Internal '
              'error when reording ONNX operators"\n'
              '\n'
              '    # Add nodes into TASO graph\n'
              '    cnt = 0\n')

Fragment(uuid='NORMALIZED-001748',
         path='/python/taso/__init__.py',
         lineno=795,
         depth=4,
         type='documentation',
         name='',
         text='Internal error when reording ONNX operators')

Fragment(uuid='NORMALIZED-001749',
         path='/python/taso/__init__.py',
         lineno=797,
         depth=2,
         type='documentation',
         name='',
         text='# Add nodes into TASO graph')

Fragment(uuid='NORMALIZED-001750',
         path='/python/taso/__init__.py',
         lineno=799,
         depth=0,
         type='module',
         name='',
         text='    for opname in node_list:\n'
              '        op = name_to_op[opname]\n'
              '        #print(cnt, op.op_type, opname)\n'
              '        cnt += 1\n'
              '        if op.op_type in xf_operators:\n'
              '            try:\n'
              '                outputs = xf_operators[op.op_type](op, graph, '
              'tensors, model.graph.initializer)\n'
              '                if not isinstance(outputs, list):\n'
              '                    outputs = [outputs]\n'
              '                assert len(outputs) == len(op.output), "Number '
              'of output tensors mismatch"\n')

Fragment(uuid='NORMALIZED-001751',
         path='/python/taso/__init__.py',
         lineno=799,
         depth=1,
         type='function',
         name='load_onnx',
         text='    for opname in node_list:\n'
              '        op = name_to_op[opname]\n'
              '        #print(cnt, op.op_type, opname)\n'
              '        cnt += 1\n'
              '        if op.op_type in xf_operators:\n'
              '            try:\n'
              '                outputs = xf_operators[op.op_type](op, graph, '
              'tensors, model.graph.initializer)\n'
              '                if not isinstance(outputs, list):\n'
              '                    outputs = [outputs]\n'
              '                assert len(outputs) == len(op.output), "Number '
              'of output tensors mismatch"\n')

Fragment(uuid='NORMALIZED-001752',
         path='/python/taso/__init__.py',
         lineno=801,
         depth=4,
         type='documentation',
         name='',
         text='#print(cnt, op.op_type, opname)')

Fragment(uuid='NORMALIZED-001753',
         path='/python/taso/__init__.py',
         lineno=808,
         depth=10,
         type='documentation',
         name='',
         text='Number of output tensors mismatch')

Fragment(uuid='NORMALIZED-001754',
         path='/python/taso/__init__.py',
         lineno=809,
         depth=0,
         type='module',
         name='',
         text='                for i in range(len(outputs)):\n'
              '                    assert _check_output(outputs[i], '
              'op.output[i])\n'
              '                    tensors[op.output[i]] = outputs[i]\n'
              '            except InputNotFoundError:\n'
              '                print("Cannot find input tensor for operator: '
              'name({}) type({}) (Skipped)".format(opname, op.op_type))\n'
              '                continue\n'
              '        else:\n'
              '            print("Found unsupported ONNX operator: {} '
              '(Skipped)".format(op.op_type))\n'
              '            continue\n'
              '    return graph\n'
              '\n'
              'input_weight_names = dict()\n'
              "input_weight_names['Add'] = ['input1', 'input2']\n"
              'i')

Fragment(uuid='NORMALIZED-001755',
         path='/python/taso/__init__.py',
         lineno=809,
         depth=1,
         type='function',
         name='load_onnx',
         text='                for i in range(len(outputs)):\n'
              '                    assert _check_output(outputs[i], '
              'op.output[i])\n'
              '                    tensors[op.output[i]] = outputs[i]\n'
              '            except InputNotFoundError:\n'
              '                print("Cannot find input tensor for operator: '
              'name({}) type({}) (Skipped)".format(opname, op.op_type))\n'
              '                continue\n'
              '        else:\n'
              '            print("Found unsupported ONNX operator: {} '
              '(Skipped)".format(op.op_type))\n'
              '            continue\n'
              '    return graph')

Fragment(uuid='NORMALIZED-001756',
         path='/python/taso/__init__.py',
         lineno=813,
         depth=15,
         type='documentation',
         name='',
         text='Cannot find input tensor for operator: name({}) type({}) '
              '(Skipped)')

Fragment(uuid='NORMALIZED-001757',
         path='/python/taso/__init__.py',
         lineno=816,
         depth=13,
         type='documentation',
         name='',
         text='Found unsupported ONNX operator: {} (Skipped)')

Fragment(uuid='NORMALIZED-001758',
         path='/python/taso/__init__.py',
         lineno=822,
         depth=0,
         type='module',
         name='',
         text="nput_weight_names['AveragePool'] = ['input']\n"
              "input_weight_names['BatchNormalization'] = ['input', 'scale', "
              "'bias', 'mean', 'var']\n"
              "input_weight_names['Concat'] = ['input1', 'input2', 'input3', "
              "'input4', 'input5', 'input6']\n"
              "input_weight_names['Conv'] = ['input', 'weight', 'bias']\n"
              'input')

Fragment(uuid='NORMALIZED-001759',
         path='/python/taso/__init__.py',
         lineno=826,
         depth=0,
         type='module',
         name='',
         text="_weight_names['MatMul'] = ['input', 'weight']\n"
              "input_weight_names['Mul'] = ['input1', 'input2']\n"
              "input_weight_names['Reshape'] = ['input', 'shape']\n"
              "input_weight_names['BroadcastAdd'] = ['input1', 'input2']\n"
              "input_weight_names['Transpose'] = ['input']\n"
              '\n'
              'operator_attrs = dict()\n'
              'operator_at')

Fragment(uuid='NORMALIZED-001760',
         path='/python/taso/__init__.py',
         lineno=833,
         depth=0,
         type='module',
         name='',
         text="trs['Add'] = []\n"
              "operator_attrs['ArgMax'] = []\n"
              "operator_attrs['ArgMin'] = []\n"
              "operator_attrs['AveragePool'] = ['kernel_shape', 'pads', "
              "'strides']\n"
              "operator_attrs['BatchNormalization'] = ['epsilon'] # TODO: Add "
              'momentum\n'
              "operator_attrs['Cast'] = []\n"
              "operator_attrs['Ceil'] = []\n"
              "operator_attrs['Concat'] = ['axis']\n"
              "operator_attrs['Conv'] = ['group', 'kernel_shape', 'pads', "
              "'strides']\n"
              "operator_attrs['Div'] = []\n"
              "operator_attrs['Dropout'] = []\n"
              "operator_attrs['Gemm'] = []\n"
              "operator_attrs['Greater'] = []\n"
              "operator_attrs['Identity'] = []\n"
              "operator_attrs['Less'] = []\n"
              'operator_attr')

Fragment(uuid='NORMALIZED-001761',
         path='/python/taso/__init__.py',
         lineno=837,
         depth=0,
         type='documentation',
         name='',
         text='# TODO: Add momentum')

Fragment(uuid='NORMALIZED-001762',
         path='/python/taso/__init__.py',
         lineno=848,
         depth=0,
         type='module',
         name='',
         text="s['Log'] = []\n"
              "operator_attrs['Pad'] = []\n"
              "operator_attrs['MatMul'] = []\n"
              "operator_attrs['MaxPool'] = ['kernel_shape', 'pads', "
              "'strides']\n"
              "operator_attrs['Mul'] = []\n"
              "operator_attrs['Shape'] = []\n"
              "operator_attrs['Sigmoid'] = []\n"
              "operator_attrs['Slice'] = []\n"
              "operator_attrs['Split'] = ['axis'")

Fragment(uuid='NORMALIZED-001763',
         path='/python/taso/__init__.py',
         lineno=856,
         depth=0,
         type='module',
         name='',
         text=", 'split']\n"
              'operator_attrs["Squeeze"] = [\'axes\']\n'
              "operator_attrs['StridedSlice'] = []\n"
              "operator_attrs['Relu'] = []\n"
              "operator_attrs['Reshape'] = []\n"
              "operator_attrs['Tanh'] = []\n"
              "operator_attrs['Transpose'] = ['perm']\n"
              "operator_attrs['Unsqueeze'] = ['axes']\n"
              "operator_attrs['BroadcastAdd'] = []\n")

Fragment(uuid='NORMALIZED-001764',
         path='/python/taso/__init__.py',
         lineno=865,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _input_tensor_name(graph, inedge, op):\n'
              "    intype = graph.get_operator_type(inedge['srcOp'])\n"
              '    if intype == "Input":\n'
              '        return "data"\n'
              '    elif intype == "Weight":\n'
              '        mytype = graph.get_operator_type(op)\n'
              '        return "{}{}_{}".format(mytype, op[\'guid\'], '
              "input_weight_names[mytype][inedge['dstIdx']])\n"
              '    else:\n'
              "        return _output_tensor_name(graph, inedge['srcOp'], "
              "inedge['srcIdx'])\n")

Fragment(uuid='NORMALIZED-001765',
         path='/python/taso/__init__.py',
         lineno=866,
         depth=1,
         type='function',
         name='_input_tensor_name',
         text='def _input_tensor_name(graph, inedge, op):\n'
              "    intype = graph.get_operator_type(inedge['srcOp'])\n"
              '    if intype == "Input":\n'
              '        return "data"\n'
              '    elif intype == "Weight":\n'
              '        mytype = graph.get_operator_type(op)\n'
              '        return "{}{}_{}".format(mytype, op[\'guid\'], '
              "input_weight_names[mytype][inedge['dstIdx']])\n"
              '    else:\n'
              "        return _output_tensor_name(graph, inedge['srcOp'], "
              "inedge['srcIdx'])")

Fragment(uuid='NORMALIZED-001766',
         path='/python/taso/__init__.py',
         lineno=875,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _output_tensor_name(graph, op, idx):\n'
              '    type = graph.get_operator_type(op)\n'
              '    return "{}{}_fwd{}".format(type, op[\'guid\'], idx)\n')

Fragment(uuid='NORMALIZED-001767',
         path='/python/taso/__init__.py',
         lineno=876,
         depth=1,
         type='function',
         name='_output_tensor_name',
         text='def _output_tensor_name(graph, op, idx):\n'
              '    type = graph.get_operator_type(op)\n'
              '    return "{}{}_fwd{}".format(type, op[\'guid\'], idx)')

Fragment(uuid='NORMALIZED-001768',
         path='/python/taso/__init__.py',
         lineno=879,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def _add_node_attribute(graph, node, op, optype):\n'
              '    for key in operator_attrs[optype]:\n'
              '        val = graph.get_operator_attr(op, key)\n'
              '        attr = helper.make_attribute(key, val)\n'
              '        node.attribute.append(attr)\n')

Fragment(uuid='NORMALIZED-001769',
         path='/python/taso/__init__.py',
         lineno=880,
         depth=1,
         type='function',
         name='_add_node_attribute',
         text='def _add_node_attribute(graph, node, op, optype):\n'
              '    for key in operator_attrs[optype]:\n'
              '        val = graph.get_operator_attr(op, key)\n'
              '        attr = helper.make_attribute(key, val)\n'
              '        node.attribute.append(attr)')

Fragment(uuid='NORMALIZED-001770',
         path='/python/taso/__init__.py',
         lineno=885,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def export_onnx(graph):\n'
              "    '''\n"
              '    Export a XFlow graph to an ONNX graph\n'
              '    @params\n'
              '    graph is a XFlow graph\n'
              '\n'
              '    @return\n'
              '    A in-memory ONNX graph\n'
              "    '''\n"
              '    opList = graph.get_operator_list()\n'
              '    graph_nodes = list()\n'
              '    graph_inputs = list()\n'
              '    graph_initializers = list()\n'
              '    graph_outputs = list()\n'
              '    output_guids = dict()\n')

Fragment(uuid='NORMALIZED-001771',
         path='/python/taso/__init__.py',
         lineno=886,
         depth=1,
         type='function',
         name='export_onnx',
         text='def export_onnx(graph):\n'
              "    '''\n"
              '    Export a XFlow graph to an ONNX graph\n'
              '    @params\n'
              '    graph is a XFlow graph\n'
              '\n'
              '    @return\n'
              '    A in-memory ONNX graph\n'
              "    '''\n"
              '    opList = graph.get_operator_list()\n'
              '    graph_nodes = list()\n'
              '    graph_inputs = list()\n'
              '    graph_initializers = list()\n'
              '    graph_outputs = list()\n'
              '    output_guids = dict()\n')

Fragment(uuid='NORMALIZED-001772',
         path='/python/taso/__init__.py',
         lineno=887,
         depth=4,
         type='documentation',
         name='',
         text='\n'
              '    Export a XFlow graph to an ONNX graph\n'
              '    @params\n'
              '    graph is a XFlow graph\n'
              '\n'
              '    @return\n'
              '    A in-memory ONNX graph\n'
              '    ')

Fragment(uuid='NORMALIZED-001773',
         path='/python/taso/__init__.py',
         lineno=901,
         depth=0,
         type='module',
         name='',
         text='    for op in opList:\n'
              '        mytype = graph.get_operator_type(op)\n'
              '        inedges = graph.get_input_edges(op)\n'
              '        #print("op.guid={} mytype={} '
              'inedges={}".format(op[\'guid\'], mytype, len(inedges)))\n'
              '        inputs = list()\n')

Fragment(uuid='NORMALIZED-001774',
         path='/python/taso/__init__.py',
         lineno=901,
         depth=1,
         type='function',
         name='export_onnx',
         text='    for op in opList:\n'
              '        mytype = graph.get_operator_type(op)\n'
              '        inedges = graph.get_input_edges(op)\n'
              '        #print("op.guid={} mytype={} '
              'inedges={}".format(op[\'guid\'], mytype, len(inedges)))\n'
              '        inputs = list()\n')

Fragment(uuid='NORMALIZED-001775',
         path='/python/taso/__init__.py',
         lineno=904,
         depth=4,
         type='documentation',
         name='',
         text='#print("op.guid={} mytype={} inedges={}".format(op[\'guid\'], '
              'mytype, len(inedges)))')

Fragment(uuid='NORMALIZED-001776',
         path='/python/taso/__init__.py',
         lineno=906,
         depth=0,
         type='module',
         name='',
         text='        for e in inedges:\n'
              "            intype = graph.get_operator_type(e['srcOp'])\n"
              '            inputs.append(_input_tensor_name(graph, e, op))\n'
              "            output_guids.pop((e['srcOp']['guid'], e['srcIdx']), "
              'None)\n')

Fragment(uuid='NORMALIZED-001777',
         path='/python/taso/__init__.py',
         lineno=906,
         depth=1,
         type='function',
         name='export_onnx',
         text='        for e in inedges:\n'
              "            intype = graph.get_operator_type(e['srcOp'])\n"
              '            inputs.append(_input_tensor_name(graph, e, op))\n'
              "            output_guids.pop((e['srcOp']['guid'], e['srcIdx']), "
              'None)\n')

Fragment(uuid='NORMALIZED-001778',
         path='/python/taso/__init__.py',
         lineno=910,
         depth=0,
         type='module',
         name='',
         text="            if intype == 'Input' or intype == 'Weight':\n"
              '                '
              'graph_inputs.append(helper.make_tensor_value_info(_input_tensor_name(graph, '
              'e, op),\n'
              '                                    TensorProto.FLOAT, '
              "graph.get_input_dims(op, e['dstIdx'])))\n")

Fragment(uuid='NORMALIZED-001779',
         path='/python/taso/__init__.py',
         lineno=910,
         depth=1,
         type='function',
         name='export_onnx',
         text="            if intype == 'Input' or intype == 'Weight':\n"
              '                '
              'graph_inputs.append(helper.make_tensor_value_info(_input_tensor_name(graph, '
              'e, op),\n'
              '                                    TensorProto.FLOAT, '
              "graph.get_input_dims(op, e['dstIdx'])))\n")

Fragment(uuid='NORMALIZED-001780',
         path='/python/taso/__init__.py',
         lineno=913,
         depth=0,
         type='module',
         name='',
         text="            if intype == 'Weight':\n"
              '                '
              'graph_initializers.append(helper.make_tensor(_input_tensor_name(graph, '
              'e, op),\n'
              '                                          TensorProto.FLOAT, '
              "graph.get_input_dims(op, e['dstIdx']),\n"
              '                                          '
              "graph.get_weight_value(e['srcOp'])))\n"
              '\n'
              '        # add a second input for Reshape\n')

Fragment(uuid='NORMALIZED-001781',
         path='/python/taso/__init__.py',
         lineno=913,
         depth=1,
         type='function',
         name='export_onnx',
         text="            if intype == 'Weight':\n"
              '                '
              'graph_initializers.append(helper.make_tensor(_input_tensor_name(graph, '
              'e, op),\n'
              '                                          TensorProto.FLOAT, '
              "graph.get_input_dims(op, e['dstIdx']),\n"
              '                                          '
              "graph.get_weight_value(e['srcOp'])))\n"
              '\n'
              '        # add a second input for Reshape\n')

Fragment(uuid='NORMALIZED-001782',
         path='/python/taso/__init__.py',
         lineno=918,
         depth=4,
         type='documentation',
         name='',
         text='# add a second input for Reshape')

Fragment(uuid='NORMALIZED-001783',
         path='/python/taso/__init__.py',
         lineno=919,
         depth=0,
         type='module',
         name='',
         text="        if mytype == 'Reshape':\n"
              "            inputs.append('Reshape_attr{}'.format(op['guid']))\n"
              '            shape = graph.get_output_dims(op, 0)\n'
              '            '
              "graph_inputs.append(helper.make_tensor_value_info('Reshape_attr{}'.format(op['guid']), "
              'TensorProto.INT64, [len(shape)]))\n'
              '            '
              "graph_initializers.append(helper.make_tensor('Reshape_attr{}'.format(op['guid']), "
              'TensorProto.INT64, [len(shape)], shape))\n'
              '        outputs = list()\n')

Fragment(uuid='NORMALIZED-001784',
         path='/python/taso/__init__.py',
         lineno=919,
         depth=1,
         type='function',
         name='export_onnx',
         text="        if mytype == 'Reshape':\n"
              "            inputs.append('Reshape_attr{}'.format(op['guid']))\n"
              '            shape = graph.get_output_dims(op, 0)\n'
              '            '
              "graph_inputs.append(helper.make_tensor_value_info('Reshape_attr{}'.format(op['guid']), "
              'TensorProto.INT64, [len(shape)]))\n'
              '            '
              "graph_initializers.append(helper.make_tensor('Reshape_attr{}'.format(op['guid']), "
              'TensorProto.INT64, [len(shape)], shape))\n'
              '        outputs = list()\n')

Fragment(uuid='NORMALIZED-001785',
         path='/python/taso/__init__.py',
         lineno=925,
         depth=0,
         type='module',
         name='',
         text='        for i in range(graph.get_num_outputs(op)):\n'
              '            outputs.append(_output_tensor_name(graph, op, i))\n'
              "            output_guids[(op['guid'], i)] = op\n"
              '        node = helper.make_node(mytype, inputs, outputs, '
              "'{}{}'.format(mytype, op['guid']))\n"
              '        _add_node_attribute(graph, node, op, mytype)\n'
              '        graph_nodes.append(node)\n')

Fragment(uuid='NORMALIZED-001786',
         path='/python/taso/__init__.py',
         lineno=925,
         depth=1,
         type='function',
         name='export_onnx',
         text='        for i in range(graph.get_num_outputs(op)):\n'
              '            outputs.append(_output_tensor_name(graph, op, i))\n'
              "            output_guids[(op['guid'], i)] = op\n"
              '        node = helper.make_node(mytype, inputs, outputs, '
              "'{}{}'.format(mytype, op['guid']))\n"
              '        _add_node_attribute(graph, node, op, mytype)\n'
              '        graph_nodes.append(node)\n')

Fragment(uuid='NORMALIZED-001787',
         path='/python/taso/__init__.py',
         lineno=931,
         depth=0,
         type='module',
         name='',
         text='    for guid, idx in output_guids:\n'
              '        op = output_guids[(guid, idx)]\n'
              '        '
              'graph_outputs.append(helper.make_tensor_value_info(_output_tensor_name(graph, '
              'op, idx),\n'
              '                             TensorProto.FLOAT, '
              'graph.get_output_dims(op, idx)))\n'
              "    onnx_graph = helper.make_graph(graph_nodes, 'main', "
              'graph_inputs, graph_outputs, graph_initializers)\n'
              '    onnx_model = helper.make_model(onnx_graph, '
              "producer_name='TASO Optimized Model')\n"
              '    return onnx_model\n')

Fragment(uuid='NORMALIZED-001788',
         path='/python/taso/__init__.py',
         lineno=931,
         depth=1,
         type='function',
         name='export_onnx',
         text='    for guid, idx in output_guids:\n'
              '        op = output_guids[(guid, idx)]\n'
              '        '
              'graph_outputs.append(helper.make_tensor_value_info(_output_tensor_name(graph, '
              'op, idx),\n'
              '                             TensorProto.FLOAT, '
              'graph.get_output_dims(op, idx)))\n'
              "    onnx_graph = helper.make_graph(graph_nodes, 'main', "
              'graph_inputs, graph_outputs, graph_initializers)\n'
              '    onnx_model = helper.make_model(onnx_graph, '
              "producer_name='TASO Optimized Model')\n"
              '    return onnx_model')

Fragment(uuid='NORMALIZED-001789',
         path='/python/taso/__init__.py',
         lineno=936,
         depth=8,
         type='documentation',
         name='',
         text='TASO Optimized Model')

Fragment(uuid='NORMALIZED-001790',
         path='/python/taso/__init__.py',
         lineno=938,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def optimize(graph, alpha = 1.0, budget = 1000, print_subst = '
              'False):\n'
              '    return graph.optimize(alpha, budget, print_subst)\n'
              '\n'
              '# Current TASO Version\n'
              '__version__ = "0.1.0"\n')

Fragment(uuid='NORMALIZED-001791',
         path='/python/taso/__init__.py',
         lineno=939,
         depth=1,
         type='function',
         name='optimize',
         text='def optimize(graph, alpha = 1.0, budget = 1000, print_subst = '
              'False):\n'
              '    return graph.optimize(alpha, budget, print_subst)')

Fragment(uuid='NORMALIZED-001792',
         path='/python/taso/__init__.py',
         lineno=942,
         depth=0,
         type='documentation',
         name='',
         text='# Current TASO Version')

Fragment(uuid='NORMALIZED-001793',
         path='/python/taso/_cython/CCore.pxd',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# Copyright 2019 Stanford\n'
              '#\n'
              '# Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '# you may not use this file except in compliance with the '
              'License.\n'
              '# You may obtain a copy of the License at\n'
              '#\n'
              '#     http://www.apache.org/licenses/LICENSE-2.0\n'
              '#\n'
              '# Unless required by applicable law or agreed to in writing, '
              'software\n'
              '# distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              '# See the License for the specific language governing '
              'permissions and\n'
              '# limitations under the License.\n'
              '#\n')

Fragment(uuid='NORMALIZED-001794',
         path='/python/taso/_cython/CCore.pxd',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /python/taso/_cython/CCore.pxd\n')

Fragment(uuid='NORMALIZED-001795',
         path='/python/taso/_cython/CCore.pxd',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n#ccore.pxd\n')

Fragment(uuid='NORMALIZED-001796',
         path='/python/taso/_cython/CCore.pxd',
         lineno=17,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'from libcpp.memory cimport shared_ptr\n'
              'from libcpp.vector cimport vector\n'
              'from libcpp cimport bool\n')

Fragment(uuid='NORMALIZED-001797',
         path='/python/taso/_cython/CCore.pxd',
         lineno=21,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'cdef extern from "taso/ops.h" namespace "taso":\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum DataType:\n'
              '        DT_FLOAT  = 111,\n'
              '        DT_DOUBLE = 222,\n'
              '        DT_HALF   = 333,\n'
              '        DT_INT8   = 444,\n'
              '        DT_UINT8  = 555,\n'
              '        DT_INT32  = 666,\n'
              '        DT_INT64  = 777,\n'
              '        DT_BOOL   = 888,\n')

Fragment(uuid='NORMALIZED-001798',
         path='/python/taso/_cython/CCore.pxd',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n    # This must be consistent with include/taso/ops.h')

Fragment(uuid='NORMALIZED-001799',
         path='/python/taso/_cython/CCore.pxd',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    cdef enum OpType:')

Fragment(uuid='NORMALIZED-001800',
         path='/python/taso/_cython/CCore.pxd',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_INPUT')

Fragment(uuid='NORMALIZED-001801',
         path='/python/taso/_cython/CCore.pxd',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_WEIGHT')

Fragment(uuid='NORMALIZED-001802',
         path='/python/taso/_cython/CCore.pxd',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_ANY')

Fragment(uuid='NORMALIZED-001803',
         path='/python/taso/_cython/CCore.pxd',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_CONV2D')

Fragment(uuid='NORMALIZED-001804',
         path='/python/taso/_cython/CCore.pxd',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_DROPOUT')

Fragment(uuid='NORMALIZED-001805',
         path='/python/taso/_cython/CCore.pxd',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_LINEAR')

Fragment(uuid='NORMALIZED-001806',
         path='/python/taso/_cython/CCore.pxd',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_POOL2D_MAX')

Fragment(uuid='NORMALIZED-001807',
         path='/python/taso/_cython/CCore.pxd',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_POOL2D_AVG')

Fragment(uuid='NORMALIZED-001808',
         path='/python/taso/_cython/CCore.pxd',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_RELU')

Fragment(uuid='NORMALIZED-001809',
         path='/python/taso/_cython/CCore.pxd',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_SIGMOID')

Fragment(uuid='NORMALIZED-001810',
         path='/python/taso/_cython/CCore.pxd',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_TANH')

Fragment(uuid='NORMALIZED-001811',
         path='/python/taso/_cython/CCore.pxd',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_BATCHNORM')

Fragment(uuid='NORMALIZED-001812',
         path='/python/taso/_cython/CCore.pxd',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_CONCAT')

Fragment(uuid='NORMALIZED-001813',
         path='/python/taso/_cython/CCore.pxd',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_SPLIT')

Fragment(uuid='NORMALIZED-001814',
         path='/python/taso/_cython/CCore.pxd',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_RESHAPE')

Fragment(uuid='NORMALIZED-001815',
         path='/python/taso/_cython/CCore.pxd',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_TRANSPOSE')

Fragment(uuid='NORMALIZED-001816',
         path='/python/taso/_cython/CCore.pxd',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n        # RNN operators')

Fragment(uuid='NORMALIZED-001817',
         path='/python/taso/_cython/CCore.pxd',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_EW_ADD')

Fragment(uuid='NORMALIZED-001818',
         path='/python/taso/_cython/CCore.pxd',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_EW_MUL')

Fragment(uuid='NORMALIZED-001819',
         path='/python/taso/_cython/CCore.pxd',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_MATMUL')

Fragment(uuid='NORMALIZED-001820',
         path='/python/taso/_cython/CCore.pxd',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_SCALARMUL')

Fragment(uuid='NORMALIZED-001821',
         path='/python/taso/_cython/CCore.pxd',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_ENLARGE')

Fragment(uuid='NORMALIZED-001822',
         path='/python/taso/_cython/CCore.pxd',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_MERGE_GCONV')

Fragment(uuid='NORMALIZED-001823',
         path='/python/taso/_cython/CCore.pxd',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_CONSTANT_IMM,')

Fragment(uuid='NORMALIZED-001824',
         path='/python/taso/_cython/CCore.pxd',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_CONSTANT_ICONV,')

Fragment(uuid='NORMALIZED-001825',
         path='/python/taso/_cython/CCore.pxd',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_CONSTANT_ONE,')

Fragment(uuid='NORMALIZED-001826',
         path='/python/taso/_cython/CCore.pxd',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_CONSTANT_POOL,')

Fragment(uuid='NORMALIZED-001827',
         path='/python/taso/_cython/CCore.pxd',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_SQUEEZE,')

Fragment(uuid='NORMALIZED-001828',
         path='/python/taso/_cython/CCore.pxd',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_UNSQUEEZE,')

Fragment(uuid='NORMALIZED-001829',
         path='/python/taso/_cython/CCore.pxd',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_EW_SUB,')

Fragment(uuid='NORMALIZED-001830',
         path='/python/taso/_cython/CCore.pxd',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_EW_DIV,')

Fragment(uuid='NORMALIZED-001831',
         path='/python/taso/_cython/CCore.pxd',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_EW_EQUAL,')

Fragment(uuid='NORMALIZED-001832',
         path='/python/taso/_cython/CCore.pxd',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_EW_GREATER,')

Fragment(uuid='NORMALIZED-001833',
         path='/python/taso/_cython/CCore.pxd',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_EW_LESS,')

Fragment(uuid='NORMALIZED-001834',
         path='/python/taso/_cython/CCore.pxd',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_EW_MAX,')

Fragment(uuid='NORMALIZED-001835',
         path='/python/taso/_cython/CCore.pxd',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_EW_MIN,')

Fragment(uuid='NORMALIZED-001836',
         path='/python/taso/_cython/CCore.pxd',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_REDUCE_ARGMAX,')

Fragment(uuid='NORMALIZED-001837',
         path='/python/taso/_cython/CCore.pxd',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_REDUCE_ARGMIN,')

Fragment(uuid='NORMALIZED-001838',
         path='/python/taso/_cython/CCore.pxd',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_REDUCE_MAX,')

Fragment(uuid='NORMALIZED-001839',
         path='/python/taso/_cython/CCore.pxd',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_REDUCE_MEAN,')

Fragment(uuid='NORMALIZED-001840',
         path='/python/taso/_cython/CCore.pxd',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_REDUCE_MIN,')

Fragment(uuid='NORMALIZED-001841',
         path='/python/taso/_cython/CCore.pxd',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_REDUCE_PROD,')

Fragment(uuid='NORMALIZED-001842',
         path='/python/taso/_cython/CCore.pxd',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_REDUCE_SUM,')

Fragment(uuid='NORMALIZED-001843',
         path='/python/taso/_cython/CCore.pxd',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_PAD,')

Fragment(uuid='NORMALIZED-001844',
         path='/python/taso/_cython/CCore.pxd',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_SHAPE,')

Fragment(uuid='NORMALIZED-001845',
         path='/python/taso/_cython/CCore.pxd',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_SIZE,')

Fragment(uuid='NORMALIZED-001846',
         path='/python/taso/_cython/CCore.pxd',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_TOPK,')

Fragment(uuid='NORMALIZED-001847',
         path='/python/taso/_cython/CCore.pxd',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_WHERE,')

Fragment(uuid='NORMALIZED-001848',
         path='/python/taso/_cython/CCore.pxd',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_CEIL,')

Fragment(uuid='NORMALIZED-001849',
         path='/python/taso/_cython/CCore.pxd',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_CAST,')

Fragment(uuid='NORMALIZED-001850',
         path='/python/taso/_cython/CCore.pxd',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_EXP,')

Fragment(uuid='NORMALIZED-001851',
         path='/python/taso/_cython/CCore.pxd',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_ROUND,')

Fragment(uuid='NORMALIZED-001852',
         path='/python/taso/_cython/CCore.pxd',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_LOG,')

Fragment(uuid='NORMALIZED-001853',
         path='/python/taso/_cython/CCore.pxd',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_LOGICAL_NOT,')

Fragment(uuid='NORMALIZED-001854',
         path='/python/taso/_cython/CCore.pxd',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_SQRT,')

Fragment(uuid='NORMALIZED-001855',
         path='/python/taso/_cython/CCore.pxd',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_LEAKYRELU,')

Fragment(uuid='NORMALIZED-001856',
         path='/python/taso/_cython/CCore.pxd',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_SLICE,')

Fragment(uuid='NORMALIZED-001857',
         path='/python/taso/_cython/CCore.pxd',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_RESIZE,')

Fragment(uuid='NORMALIZED-001858',
         path='/python/taso/_cython/CCore.pxd',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_PRELU,')

Fragment(uuid='NORMALIZED-001859',
         path='/python/taso/_cython/CCore.pxd',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_FUSE_CONV_BATCHNORM,')

Fragment(uuid='NORMALIZED-001860',
         path='/python/taso/_cython/CCore.pxd',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_FUSE_CONV_BATCHNORM_ALPHA_VAR,')

Fragment(uuid='NORMALIZED-001861',
         path='/python/taso/_cython/CCore.pxd',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_FUSE_CONV_BATCHNORM_BIAS,')

Fragment(uuid='NORMALIZED-001862',
         path='/python/taso/_cython/CCore.pxd',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n        OP_BROADCAST_ADD')

Fragment(uuid='NORMALIZED-001863',
         path='/python/taso/_cython/CCore.pxd',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001864',
         path='/python/taso/_cython/CCore.pxd',
         lineno=99,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum PMParameter:\n'
              '        PM_OP_TYPE\n'
              '        PM_NUM_INPUTS\n'
              '        PM_NUM_OUTPUTS\n'
              '        PM_GROUP\n'
              '        PM_KERNEL_H\n'
              '        PM_KERNEL_W\n'
              '        PM_STRIDE_H\n'
              '        PM_STRIDE_W\n'
              '        PM_PAD\n'
              '        PM_ACTI\n'
              '        PM_NUMDIM\n'
              '        PM_AXIS\n'
              '        PM_PERM\n'
              '        PM_OUTSHUFFLE\n'
              '        PM_MERGE_GCONV_COUNT\n'
              '        PM_AXES\n'
              '        PM_EPSILON\n')

Fragment(uuid='NORMALIZED-001865',
         path='/python/taso/_cython/CCore.pxd',
         lineno=119,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum ActiMode:\n'
              '        AC_MODE_NONE\n'
              '        AC_MODE_SIGMOID\n'
              '        AC_MODE_RELU\n'
              '        AC_MODE_TANH\n')

Fragment(uuid='NORMALIZED-001866',
         path='/python/taso/_cython/CCore.pxd',
         lineno=126,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum PaddingMode:\n'
              '        PD_MODE_SAME\n'
              '        PD_MODE_VALID\n')

Fragment(uuid='NORMALIZED-001867',
         path='/python/taso/_cython/CCore.pxd',
         lineno=131,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    # This must be consistent with include/taso/ops.h\n'
              '    cdef enum ConstantMode:\n'
              '        CN_MODE_IDENTITY\n'
              '        CN_MODE_ZEROS\n'
              '        CN_MODE_ONES\n'
              '        CN_MODE_ONES_SCALED_L1\n'
              '        CN_MODE_ONES_SCALED_L2\n'
              '        CN_MODE_ONES_SCALED_ALL\n')

Fragment(uuid='NORMALIZED-001868',
         path='/python/taso/_cython/CCore.pxd',
         lineno=140,
         depth=1,
         type='documentation',
         name='',
         text='\n    cdef cppclass Model:\n        Model()\n')

Fragment(uuid='NORMALIZED-001869',
         path='/python/taso/_cython/CCore.pxd',
         lineno=143,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#    ctypedef struct SplitInfo:\n'
              '#        int num\n'
              '#        int pos[MAX_NUM_SPLITS]\n'
              '#\n'
              '#    ctypedef cppclass OpBase:\n'
              '#        pass\n')

Fragment(uuid='NORMALIZED-001870',
         path='/python/taso/_cython/CCore.pxd',
         lineno=150,
         depth=1,
         type='documentation',
         name='',
         text='\n    ctypedef struct Op:\n        size_t guid\n        pass\n')

Fragment(uuid='NORMALIZED-001871',
         path='/python/taso/_cython/CCore.pxd',
         lineno=154,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    ctypedef struct Edge:\n'
              '        Op srcOp\n'
              '        Op dstOp\n'
              '        int srcIdx\n'
              '        int dstIdx    \n')

Fragment(uuid='NORMALIZED-001872',
         path='/python/taso/_cython/CCore.pxd',
         lineno=160,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '    ctypedef struct Tensor:\n'
              '        int numDim\n'
              '        int dim[4]\n'
              '        int stride[4] # NOTE: this must be consistent with the '
              'C++ header\n'
              '        pass\n'
              '#        int idx\n'
              '#        Op op\n'
              '#        void* ptr\n'
              '#        SplitInfo split[MAX_DIM]\n')

Fragment(uuid='NORMALIZED-001873',
         path='/python/taso/_cython/CCore.pxd',
         lineno=170,
         depth=1,
         type='documentation',
         name='',
         text='\n    ctypedef Tensor* TensorHandle\n')

Fragment(uuid='NORMALIZED-001874',
         path='/python/taso/_cython/CCore.pxd',
         lineno=172,
         depth=2,
         type='documentation',
         name='',
         text='\n    cdef cppclass Graph:')

Fragment(uuid='NORMALIZED-001875',
         path='/python/taso/_cython/CCore.pxd',
         lineno=173,
         depth=2,
         type='documentation',
         name='',
         text='\n        Graph()')

Fragment(uuid='NORMALIZED-001876',
         path='/python/taso/_cython/CCore.pxd',
         lineno=174,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle batchnorm(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001877',
         path='/python/taso/_cython/CCore.pxd',
         lineno=175,
         depth=2,
         type='documentation',
         name='',
         text='\n                               const TensorHandle scale,')

Fragment(uuid='NORMALIZED-001878',
         path='/python/taso/_cython/CCore.pxd',
         lineno=176,
         depth=2,
         type='documentation',
         name='',
         text='\n                               const TensorHandle bias,')

Fragment(uuid='NORMALIZED-001879',
         path='/python/taso/_cython/CCore.pxd',
         lineno=177,
         depth=2,
         type='documentation',
         name='',
         text='\n                               const TensorHandle mean,')

Fragment(uuid='NORMALIZED-001880',
         path='/python/taso/_cython/CCore.pxd',
         lineno=178,
         depth=2,
         type='documentation',
         name='',
         text='\n                               const TensorHandle var,')

Fragment(uuid='NORMALIZED-001881',
         path='/python/taso/_cython/CCore.pxd',
         lineno=179,
         depth=2,
         type='documentation',
         name='',
         text='\n                               const float epsilon)')

Fragment(uuid='NORMALIZED-001882',
         path='/python/taso/_cython/CCore.pxd',
         lineno=180,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        TensorHandle cast(const TensorHandle input, DataType '
              'datatype)')

Fragment(uuid='NORMALIZED-001883',
         path='/python/taso/_cython/CCore.pxd',
         lineno=181,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle ceil(const TensorHandle input)')

Fragment(uuid='NORMALIZED-001884',
         path='/python/taso/_cython/CCore.pxd',
         lineno=182,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle concat(int axis, int n,')

Fragment(uuid='NORMALIZED-001885',
         path='/python/taso/_cython/CCore.pxd',
         lineno=183,
         depth=2,
         type='documentation',
         name='',
         text='\n                            const TensorHandle* inputs)')

Fragment(uuid='NORMALIZED-001886',
         path='/python/taso/_cython/CCore.pxd',
         lineno=184,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle conv2d(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001887',
         path='/python/taso/_cython/CCore.pxd',
         lineno=185,
         depth=2,
         type='documentation',
         name='',
         text='\n                            const TensorHandle weight,')

Fragment(uuid='NORMALIZED-001888',
         path='/python/taso/_cython/CCore.pxd',
         lineno=186,
         depth=2,
         type='documentation',
         name='',
         text='\n                            int strideH, int strideW,')

Fragment(uuid='NORMALIZED-001889',
         path='/python/taso/_cython/CCore.pxd',
         lineno=187,
         depth=2,
         type='documentation',
         name='',
         text='\n                            PaddingMode _padding,')

Fragment(uuid='NORMALIZED-001890',
         path='/python/taso/_cython/CCore.pxd',
         lineno=188,
         depth=2,
         type='documentation',
         name='',
         text='\n                            ActiMode _activation)')

Fragment(uuid='NORMALIZED-001891',
         path='/python/taso/_cython/CCore.pxd',
         lineno=189,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle dropout(const TensorHandle input)')

Fragment(uuid='NORMALIZED-001892',
         path='/python/taso/_cython/CCore.pxd',
         lineno=190,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle element(OpType type,')

Fragment(uuid='NORMALIZED-001893',
         path='/python/taso/_cython/CCore.pxd',
         lineno=191,
         depth=2,
         type='documentation',
         name='',
         text='\n                             const TensorHandle x,')

Fragment(uuid='NORMALIZED-001894',
         path='/python/taso/_cython/CCore.pxd',
         lineno=192,
         depth=2,
         type='documentation',
         name='',
         text='\n                             const TensorHandle y)')

Fragment(uuid='NORMALIZED-001895',
         path='/python/taso/_cython/CCore.pxd',
         lineno=193,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle exp(const TensorHandle input)')

Fragment(uuid='NORMALIZED-001896',
         path='/python/taso/_cython/CCore.pxd',
         lineno=194,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle log(const TensorHandle input)')

Fragment(uuid='NORMALIZED-001897',
         path='/python/taso/_cython/CCore.pxd',
         lineno=195,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle logical_not(const TensorHandle input)')

Fragment(uuid='NORMALIZED-001898',
         path='/python/taso/_cython/CCore.pxd',
         lineno=196,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle pool2d_max(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001899',
         path='/python/taso/_cython/CCore.pxd',
         lineno=197,
         depth=2,
         type='documentation',
         name='',
         text='\n                                int kernelH, int kernelW,')

Fragment(uuid='NORMALIZED-001900',
         path='/python/taso/_cython/CCore.pxd',
         lineno=198,
         depth=2,
         type='documentation',
         name='',
         text='\n                                int strideH, int strideW,')

Fragment(uuid='NORMALIZED-001901',
         path='/python/taso/_cython/CCore.pxd',
         lineno=199,
         depth=2,
         type='documentation',
         name='',
         text='\n                                PaddingMode padding,')

Fragment(uuid='NORMALIZED-001902',
         path='/python/taso/_cython/CCore.pxd',
         lineno=200,
         depth=2,
         type='documentation',
         name='',
         text='\n                                ActiMode activation)')

Fragment(uuid='NORMALIZED-001903',
         path='/python/taso/_cython/CCore.pxd',
         lineno=201,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle pool2d_avg(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001904',
         path='/python/taso/_cython/CCore.pxd',
         lineno=202,
         depth=2,
         type='documentation',
         name='',
         text='\n                                int kernelH, int kernelW,')

Fragment(uuid='NORMALIZED-001905',
         path='/python/taso/_cython/CCore.pxd',
         lineno=203,
         depth=2,
         type='documentation',
         name='',
         text='\n                                int strideH, int strideW,')

Fragment(uuid='NORMALIZED-001906',
         path='/python/taso/_cython/CCore.pxd',
         lineno=204,
         depth=2,
         type='documentation',
         name='',
         text='\n                                PaddingMode padding,')

Fragment(uuid='NORMALIZED-001907',
         path='/python/taso/_cython/CCore.pxd',
         lineno=205,
         depth=2,
         type='documentation',
         name='',
         text='\n                                ActiMode activation)')

Fragment(uuid='NORMALIZED-001908',
         path='/python/taso/_cython/CCore.pxd',
         lineno=206,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle matmul(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001909',
         path='/python/taso/_cython/CCore.pxd',
         lineno=207,
         depth=2,
         type='documentation',
         name='',
         text='\n                            const TensorHandle weight,')

Fragment(uuid='NORMALIZED-001910',
         path='/python/taso/_cython/CCore.pxd',
         lineno=208,
         depth=2,
         type='documentation',
         name='',
         text='\n                            ActiMode activation)')

Fragment(uuid='NORMALIZED-001911',
         path='/python/taso/_cython/CCore.pxd',
         lineno=209,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle reduce_argmax(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001912',
         path='/python/taso/_cython/CCore.pxd',
         lineno=210,
         depth=2,
         type='documentation',
         name='',
         text='\n                                   const vector[int] axes,')

Fragment(uuid='NORMALIZED-001913',
         path='/python/taso/_cython/CCore.pxd',
         lineno=211,
         depth=2,
         type='documentation',
         name='',
         text='\n                                   bool keepdims)')

Fragment(uuid='NORMALIZED-001914',
         path='/python/taso/_cython/CCore.pxd',
         lineno=212,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle reduce_argmin(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001915',
         path='/python/taso/_cython/CCore.pxd',
         lineno=213,
         depth=2,
         type='documentation',
         name='',
         text='\n                                   const vector[int] axes,')

Fragment(uuid='NORMALIZED-001916',
         path='/python/taso/_cython/CCore.pxd',
         lineno=214,
         depth=2,
         type='documentation',
         name='',
         text='\n                                   bool keepdims)')

Fragment(uuid='NORMALIZED-001917',
         path='/python/taso/_cython/CCore.pxd',
         lineno=215,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle reduce_max(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001918',
         path='/python/taso/_cython/CCore.pxd',
         lineno=216,
         depth=2,
         type='documentation',
         name='',
         text='\n                                const vector[int] axes,')

Fragment(uuid='NORMALIZED-001919',
         path='/python/taso/_cython/CCore.pxd',
         lineno=217,
         depth=2,
         type='documentation',
         name='',
         text='\n                                bool keepdims)')

Fragment(uuid='NORMALIZED-001920',
         path='/python/taso/_cython/CCore.pxd',
         lineno=218,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle reduce_mean(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001921',
         path='/python/taso/_cython/CCore.pxd',
         lineno=219,
         depth=2,
         type='documentation',
         name='',
         text='\n                                 const vector[int] axes,')

Fragment(uuid='NORMALIZED-001922',
         path='/python/taso/_cython/CCore.pxd',
         lineno=220,
         depth=2,
         type='documentation',
         name='',
         text='\n                                 bool keepdims)')

Fragment(uuid='NORMALIZED-001923',
         path='/python/taso/_cython/CCore.pxd',
         lineno=221,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle reduce_min(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001924',
         path='/python/taso/_cython/CCore.pxd',
         lineno=222,
         depth=2,
         type='documentation',
         name='',
         text='\n                                const vector[int] axes,')

Fragment(uuid='NORMALIZED-001925',
         path='/python/taso/_cython/CCore.pxd',
         lineno=223,
         depth=2,
         type='documentation',
         name='',
         text='\n                                bool keepdims)')

Fragment(uuid='NORMALIZED-001926',
         path='/python/taso/_cython/CCore.pxd',
         lineno=224,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle reduce_prod(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001927',
         path='/python/taso/_cython/CCore.pxd',
         lineno=225,
         depth=2,
         type='documentation',
         name='',
         text='\n                                 const vector[int] axes,')

Fragment(uuid='NORMALIZED-001928',
         path='/python/taso/_cython/CCore.pxd',
         lineno=226,
         depth=2,
         type='documentation',
         name='',
         text='\n                                 bool keepdims)')

Fragment(uuid='NORMALIZED-001929',
         path='/python/taso/_cython/CCore.pxd',
         lineno=227,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle reduce_sum(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001930',
         path='/python/taso/_cython/CCore.pxd',
         lineno=228,
         depth=2,
         type='documentation',
         name='',
         text='\n                                const vector[int] axes,')

Fragment(uuid='NORMALIZED-001931',
         path='/python/taso/_cython/CCore.pxd',
         lineno=229,
         depth=2,
         type='documentation',
         name='',
         text='\n                                bool keepdims)')

Fragment(uuid='NORMALIZED-001932',
         path='/python/taso/_cython/CCore.pxd',
         lineno=230,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle reshape(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001933',
         path='/python/taso/_cython/CCore.pxd',
         lineno=231,
         depth=2,
         type='documentation',
         name='',
         text='\n                             const vector[int] shape)')

Fragment(uuid='NORMALIZED-001934',
         path='/python/taso/_cython/CCore.pxd',
         lineno=232,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle leakyrelu(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001935',
         path='/python/taso/_cython/CCore.pxd',
         lineno=233,
         depth=2,
         type='documentation',
         name='',
         text='\n                               float alpha, bool _inplace)')

Fragment(uuid='NORMALIZED-001936',
         path='/python/taso/_cython/CCore.pxd',
         lineno=234,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle relu(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001937',
         path='/python/taso/_cython/CCore.pxd',
         lineno=235,
         depth=2,
         type='documentation',
         name='',
         text='\n                          bool _inplace)')

Fragment(uuid='NORMALIZED-001938',
         path='/python/taso/_cython/CCore.pxd',
         lineno=236,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle round(const TensorHandle input)')

Fragment(uuid='NORMALIZED-001939',
         path='/python/taso/_cython/CCore.pxd',
         lineno=237,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        TensorHandle shape(const TensorHandle input, OpType '
              'type)')

Fragment(uuid='NORMALIZED-001940',
         path='/python/taso/_cython/CCore.pxd',
         lineno=238,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle sigmoid(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001941',
         path='/python/taso/_cython/CCore.pxd',
         lineno=239,
         depth=2,
         type='documentation',
         name='',
         text='\n                            bool _inplace)')

Fragment(uuid='NORMALIZED-001942',
         path='/python/taso/_cython/CCore.pxd',
         lineno=240,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle slice(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001943',
         path='/python/taso/_cython/CCore.pxd',
         lineno=241,
         depth=2,
         type='documentation',
         name='',
         text='\n                           const vector[int] start,')

Fragment(uuid='NORMALIZED-001944',
         path='/python/taso/_cython/CCore.pxd',
         lineno=242,
         depth=2,
         type='documentation',
         name='',
         text='\n                           const vector[int] end,')

Fragment(uuid='NORMALIZED-001945',
         path='/python/taso/_cython/CCore.pxd',
         lineno=243,
         depth=2,
         type='documentation',
         name='',
         text='\n                           const vector[int] axse,')

Fragment(uuid='NORMALIZED-001946',
         path='/python/taso/_cython/CCore.pxd',
         lineno=244,
         depth=2,
         type='documentation',
         name='',
         text='\n                           const vector[int] steps)')

Fragment(uuid='NORMALIZED-001947',
         path='/python/taso/_cython/CCore.pxd',
         lineno=245,
         depth=2,
         type='documentation',
         name='',
         text='\n        void split(const TensorHandle input, int axis,')

Fragment(uuid='NORMALIZED-001948',
         path='/python/taso/_cython/CCore.pxd',
         lineno=246,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                   const vector[int] sizes, TensorHandle* '
              'outputs)')

Fragment(uuid='NORMALIZED-001949',
         path='/python/taso/_cython/CCore.pxd',
         lineno=247,
         depth=2,
         type='documentation',
         name='',
         text='\n        void split_equal(const TensorHandle input, int axis,')

Fragment(uuid='NORMALIZED-001950',
         path='/python/taso/_cython/CCore.pxd',
         lineno=248,
         depth=2,
         type='documentation',
         name='',
         text='\n                         int num, TensorHandle* outputs)')

Fragment(uuid='NORMALIZED-001951',
         path='/python/taso/_cython/CCore.pxd',
         lineno=249,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle sqrt(const TensorHandle input)')

Fragment(uuid='NORMALIZED-001952',
         path='/python/taso/_cython/CCore.pxd',
         lineno=250,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle squeeze(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001953',
         path='/python/taso/_cython/CCore.pxd',
         lineno=251,
         depth=2,
         type='documentation',
         name='',
         text='\n                              const vector[int] axes)')

Fragment(uuid='NORMALIZED-001954',
         path='/python/taso/_cython/CCore.pxd',
         lineno=252,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle tanh(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001955',
         path='/python/taso/_cython/CCore.pxd',
         lineno=253,
         depth=2,
         type='documentation',
         name='',
         text='\n                          bool _inplace)')

Fragment(uuid='NORMALIZED-001956',
         path='/python/taso/_cython/CCore.pxd',
         lineno=254,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle transpose(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001957',
         path='/python/taso/_cython/CCore.pxd',
         lineno=255,
         depth=2,
         type='documentation',
         name='',
         text='\n                               const vector[int] perm,')

Fragment(uuid='NORMALIZED-001958',
         path='/python/taso/_cython/CCore.pxd',
         lineno=256,
         depth=2,
         type='documentation',
         name='',
         text='\n                               bool shuffle)')

Fragment(uuid='NORMALIZED-001959',
         path='/python/taso/_cython/CCore.pxd',
         lineno=257,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle unsqueeze(const TensorHandle input,')

Fragment(uuid='NORMALIZED-001960',
         path='/python/taso/_cython/CCore.pxd',
         lineno=258,
         depth=2,
         type='documentation',
         name='',
         text='\n                               const vector[int] axes)')

Fragment(uuid='NORMALIZED-001961',
         path='/python/taso/_cython/CCore.pxd',
         lineno=259,
         depth=2,
         type='documentation',
         name='',
         text='\n        TensorHandle new_input(int ndim, const int* dims)')

Fragment(uuid='NORMALIZED-001962',
         path='/python/taso/_cython/CCore.pxd',
         lineno=260,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        TensorHandle new_weight(int ndim, const int* dims, '
              'const float* data)')

Fragment(uuid='NORMALIZED-001963',
         path='/python/taso/_cython/CCore.pxd',
         lineno=261,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        Graph* optimize(float alpha, int budget, bool '
              'print_subst)')

Fragment(uuid='NORMALIZED-001964',
         path='/python/taso/_cython/CCore.pxd',
         lineno=262,
         depth=2,
         type='documentation',
         name='',
         text='\n        int get_operator_list(Op* ops, size_t maxNumOps)')

Fragment(uuid='NORMALIZED-001965',
         path='/python/taso/_cython/CCore.pxd',
         lineno=263,
         depth=2,
         type='documentation',
         name='',
         text='\n        int get_input_edges(Edge* edges, size_t guid)')

Fragment(uuid='NORMALIZED-001966',
         path='/python/taso/_cython/CCore.pxd',
         lineno=264,
         depth=2,
         type='documentation',
         name='',
         text='\n        OpType get_operator_type(size_t guid)')

Fragment(uuid='NORMALIZED-001967',
         path='/python/taso/_cython/CCore.pxd',
         lineno=265,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        int get_operator_int_attr(size_t guid, PMParameter attr)')

Fragment(uuid='NORMALIZED-001968',
         path='/python/taso/_cython/CCore.pxd',
         lineno=266,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        float get_operator_float_attr(size_t guid, PMParameter '
              'attr)')

Fragment(uuid='NORMALIZED-001969',
         path='/python/taso/_cython/CCore.pxd',
         lineno=267,
         depth=2,
         type='documentation',
         name='',
         text='\n        int get_num_outputs(size_t guid)')

Fragment(uuid='NORMALIZED-001970',
         path='/python/taso/_cython/CCore.pxd',
         lineno=268,
         depth=2,
         type='documentation',
         name='',
         text='\n        int get_input_dims(size_t guid, int* dims, int idx)')

Fragment(uuid='NORMALIZED-001971',
         path='/python/taso/_cython/CCore.pxd',
         lineno=269,
         depth=2,
         type='documentation',
         name='',
         text='\n        void get_weight_value(size_t guid, float* data)')

Fragment(uuid='NORMALIZED-001972',
         path='/python/taso/_cython/CCore.pxd',
         lineno=270,
         depth=2,
         type='documentation',
         name='',
         text='\n        int get_split_lens(size_t guid, int* lens)')

Fragment(uuid='NORMALIZED-001973',
         path='/python/taso/_cython/CCore.pxd',
         lineno=271,
         depth=2,
         type='documentation',
         name='',
         text='\n        int get_output_dims(size_t guid, int* dims, int idx)')

Fragment(uuid='NORMALIZED-001974',
         path='/python/taso/_cython/CCore.pxd',
         lineno=272,
         depth=2,
         type='documentation',
         name='',
         text='\n        void print_measurements()')

Fragment(uuid='NORMALIZED-001975',
         path='/python/taso/_cython/CCore.pxd',
         lineno=273,
         depth=2,
         type='documentation',
         name='',
         text='\n        float total_cost()')

Fragment(uuid='NORMALIZED-001976',
         path='/python/taso/_cython/CCore.pxd',
         lineno=274,
         depth=2,
         type='documentation',
         name='',
         text='\n        float run()')

Fragment(uuid='NORMALIZED-001977',
         path='/python/taso/_cython/CCore.pxd',
         lineno=275,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-001978',
         path='/python/taso/_cython/core.pyx',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# Copyright 2019 Stanford\n'
              '#\n'
              '# Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              '# you may not use this file except in compliance with the '
              'License.\n'
              '# You may obtain a copy of the License at\n'
              '#\n'
              '#     http://www.apache.org/licenses/LICENSE-2.0\n'
              '#\n'
              '# Unless required by applicable law or agreed to in writing, '
              'software\n'
              '# distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              '# W')

Fragment(uuid='NORMALIZED-001979',
         path='/python/taso/_cython/core.pyx',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# Copyright 2019 Stanford')

Fragment(uuid='NORMALIZED-001980',
         path='/python/taso/_cython/core.pyx',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /python/taso/_cython/core.pyx\n'
              '  Functions: __cinit__(self, tensor) __set__ '
              'get_activation_mode get_data_type get_padding_mode\n'
              '  Classes: PyGraph PyModel PyTensor\n'
              '  Methods: __cinit__ __dealloc__ add avgpool2d batchnorm cast '
              'ceil concat conv2d cost div dropout equal exp get_input_dims '
              'get_input_edges get_num_outputs get_operator_attr '
              'get_operator_list get_operator_type get_output_dims '
              'get_split_lens get_weight_value greater identity leakyrelu less '
              'log logical_not matmul max maxpool2d min mul new_input '
              'new_weight optimize prelu print_measurements reduce_argmax '
              'reduce_argmin reduce_max reduce_mean reduce_min reduce_prod '
              'reduce_sum relu reshape round run_time shape sigmoid size slice '
              'split sqrt squeeze sub tanh transpose unsqueeze\n'
              '  Variables and usages: AC_MODE_NONE AC_MODE_RELU '
              'AC_MODE_SIGMOID AC_MODE_TANH CCore DT_BOOL DT_DOUBLE DT_FLOAT '
              'DT_HALF DT_INT32 DT_INT64 DT_INT8 DT_UINT8 Edge Graph Model '
              'NULL OP_BATCHNORM OP_BROADCAST_ADD OP_CAST OP_CEIL OP_CONCAT '
              'OP_CONV2D OP_DROPOUT OP_EW_ADD OP_EW_DIV OP_EW_EQUAL '
              'OP_EW_GREATER OP_EW_LESS OP_EW_MAX OP_EW_MIN OP_EW_MUL '
              'OP_EW_SUB OP_EXP OP_INPUT OP_LOG OP_LOGICAL_NOT OP_MATMUL '
              'OP_PAD OP_POOL2D_AVG OP_POOL2D_MAX OP_PRELU OP_REDUCE_ARGMAX '
              'OP_REDUCE_ARGMIN OP_REDUCE_MAX OP_REDUCE_MEAN OP_REDUCE_MIN '
              'OP_REDUCE_PROD OP_REDUCE_SUM OP_RELU OP_RESHAPE OP_RESIZE '
              'OP_ROUND OP_SHAPE OP_SIGMOID OP_SIZE OP_SLICE OP_SPLIT OP_SQRT '
              'OP_SQUEEZE OP_TANH OP_TOPK OP_TRANSPOSE OP_UNSQUEEZE OP_WEIGHT '
              'OP_WHERE Op OpType PD_MODE_SAME PD_MODE_VALID PM_AXIS '
              'PM_EPSILON PM_GROUP PM_KERNEL_H PM_KERNEL_W PM_PAD PM_PERM '
              'PM_STRIDE_H PM_STRIDE_W PaddingMode Tensor TensorHandle '
              '_set_tensor activation alpha append array as_floats attrname '
              'axes axis bias budget c_void_p caxes cdef cend cimport cinputs '
              'coutputs cperm cpython cshape csizes cstart csteps ctensor '
              'ctypes data datatype dim_array dimlist dims edges element else '
              'epsilon flatten format from get_operator_float_attr '
              'get_operator_int_attr graph guid handle inEdges inline inplace '
              'input inputH inputW inputs keepdims kernels lenlist lens long '
              'mean nDim ndarray ndim ndims new_graph numDim numEdges numOps '
              'numpy numsplits opList op_table outputs p_graph p_model padH '
              'padW padding perIdx perm pool2d_avg pool2d_max print_subst '
              'property rand random range rate resize return scale shuffle '
              'sizes slope split_equal start steps strides tensor tolist '
              'total_cost tuple type unsigned value vector weight zeros\n')

Fragment(uuid='NORMALIZED-001981',
         path='/python/taso/_cython/core.pyx',
         lineno=3,
         depth=0,
         type='documentation',
         name='',
         text='# Licensed under the Apache License, Version 2.0 (the '
              '"License");')

Fragment(uuid='NORMALIZED-001982',
         path='/python/taso/_cython/core.pyx',
         lineno=4,
         depth=0,
         type='documentation',
         name='',
         text='# you may not use this file except in compliance with the '
              'License.')

Fragment(uuid='NORMALIZED-001983',
         path='/python/taso/_cython/core.pyx',
         lineno=5,
         depth=0,
         type='documentation',
         name='',
         text='# You may obtain a copy of the License at')

Fragment(uuid='NORMALIZED-001984',
         path='/python/taso/_cython/core.pyx',
         lineno=7,
         depth=0,
         type='documentation',
         name='',
         text='#     http://www.apache.org/licenses/LICENSE-2.0')

Fragment(uuid='NORMALIZED-001985',
         path='/python/taso/_cython/core.pyx',
         lineno=9,
         depth=0,
         type='documentation',
         name='',
         text='# Unless required by applicable law or agreed to in writing, '
              'software')

Fragment(uuid='NORMALIZED-001986',
         path='/python/taso/_cython/core.pyx',
         lineno=10,
         depth=0,
         type='documentation',
         name='',
         text='# distributed under the License is distributed on an "AS IS" '
              'BASIS,')

Fragment(uuid='NORMALIZED-001987',
         path='/python/taso/_cython/core.pyx',
         lineno=11,
         depth=0,
         type='module',
         name='',
         text='ITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or '
              'implied.\n'
              '# See the License for the specific language governing '
              'permissions and\n'
              '# limitations under the License.\n'
              '#\n'
              '\n'
              'from CCore cimport Model\n'
              'from CCore cimport Graph\n'
              'from CCore cimport Tensor\n'
              'from CCore cimport *\n'
              'from cpython cimport array\n'
              'import ctypes\n'
              'import array\n'
              'import numpy as np\n'
              '\n'
              '#helper function\n'
              'def get_padding_mode(padding):\n')

Fragment(uuid='NORMALIZED-001988',
         path='/python/taso/_cython/core.pyx',
         lineno=11,
         depth=0,
         type='documentation',
         name='',
         text='# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.')

Fragment(uuid='NORMALIZED-001989',
         path='/python/taso/_cython/core.pyx',
         lineno=12,
         depth=0,
         type='documentation',
         name='',
         text='# See the License for the specific language governing '
              'permissions and')

Fragment(uuid='NORMALIZED-001990',
         path='/python/taso/_cython/core.pyx',
         lineno=13,
         depth=0,
         type='documentation',
         name='',
         text='# limitations under the License.')

Fragment(uuid='NORMALIZED-001991',
         path='/python/taso/_cython/core.pyx',
         lineno=16,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001992',
         path='/python/taso/_cython/core.pyx',
         lineno=17,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001993',
         path='/python/taso/_cython/core.pyx',
         lineno=18,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-001994',
         path='/python/taso/_cython/core.pyx',
         lineno=21,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001995',
         path='/python/taso/_cython/core.pyx',
         lineno=22,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001996',
         path='/python/taso/_cython/core.pyx',
         lineno=23,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-001997',
         path='/python/taso/_cython/core.pyx',
         lineno=26,
         depth=1,
         type='function',
         name='get_padding_mode',
         text='def get_padding_mode(padding):\n'
              '    if (padding == "SAME"):\n'
              '        return PD_MODE_SAME\n'
              '    elif (padding == "VALID"):\n'
              '        return PD_MODE_VALID\n'
              '    else:\n'
              '        assert(False)')

Fragment(uuid='NORMALIZED-001998',
         path='/python/taso/_cython/core.pyx',
         lineno=27,
         depth=0,
         type='module',
         name='',
         text='    if (padding == "SAME"):\n'
              '        return PD_MODE_SAME\n'
              '    elif (padding == "VALID"):\n'
              '        return PD_MODE_VALID\n'
              '    else:\n'
              '        assert(False)\n')

Fragment(uuid='NORMALIZED-001999',
         path='/python/taso/_cython/core.pyx',
         lineno=33,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_data_type(datatype):\n'
              '    if datatype == "FLOAT":\n'
              '        return DT_FLOAT\n'
              '    elif datatype == "DOUBLE":\n'
              '        return DT_DOUBLE\n'
              '    elif datatype == "FLOAT16":\n'
              '        return DT_HALF\n'
              '    elif datatype == "INT8":\n'
              '        return DT_INT8\n'
              '    elif datatype == "UINT8":\n'
              '        return DT_UINT8\n'
              '    elif datatype == "INT32":\n'
              '        return DT_INT32\n'
              '    elif datatype == "INT64":\n'
              '        return DT_INT64\n'
              '    elif datatype == "BOOL":\n'
              '        return DT_BOOL\n')

Fragment(uuid='NORMALIZED-002000',
         path='/python/taso/_cython/core.pyx',
         lineno=34,
         depth=1,
         type='function',
         name='get_data_type',
         text='def get_data_type(datatype):\n'
              '    if datatype == "FLOAT":\n'
              '        return DT_FLOAT\n'
              '    elif datatype == "DOUBLE":\n'
              '        return DT_DOUBLE\n'
              '    elif datatype == "FLOAT16":\n'
              '        return DT_HALF\n'
              '    elif datatype == "INT8":\n'
              '        return DT_INT8\n'
              '    elif datatype == "UINT8":\n'
              '        return DT_UINT8\n'
              '    elif datatype == "INT32":\n'
              '        return DT_INT32\n'
              '    elif datatype == "INT64":\n'
              '        return DT_INT64\n'
              '    elif datatype == "BOOL":\n'
              '        return DT_BOOL')

Fragment(uuid='NORMALIZED-002001',
         path='/python/taso/_cython/core.pyx',
         lineno=51,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def get_activation_mode(activation):\n'
              '    if (activation == "NONE"):\n'
              '        return AC_MODE_NONE\n'
              '    elif (activation == "SIGMOID"):\n'
              '        return AC_MODE_SIGMOID\n'
              '    elif (activation == "RELU"):\n'
              '        return AC_MODE_RELU\n'
              '    elif (activation == "TANH"):\n'
              '        return AC_MODE_TANH\n'
              '    else:\n'
              '        assert(False)\n'
              '\n'
              'cdef class PyModel:\n'
              '    cdef Model *p_model # Hold a Model instance\n')

Fragment(uuid='NORMALIZED-002002',
         path='/python/taso/_cython/core.pyx',
         lineno=52,
         depth=1,
         type='function',
         name='get_activation_mode',
         text='def get_activation_mode(activation):\n'
              '    if (activation == "NONE"):\n'
              '        return AC_MODE_NONE\n'
              '    elif (activation == "SIGMOID"):\n'
              '        return AC_MODE_SIGMOID\n'
              '    elif (activation == "RELU"):\n'
              '        return AC_MODE_RELU\n'
              '    elif (activation == "TANH"):\n'
              '        return AC_MODE_TANH\n'
              '    else:\n'
              '        assert(False)')

Fragment(uuid='NORMALIZED-002003',
         path='/python/taso/_cython/core.pyx',
         lineno=64,
         depth=1,
         type='class',
         name='PyModel',
         text='class PyModel:\n'
              '    cdef Model *p_model # Hold a Model instance\n'
              '\n'
              '    def __cinit__(self):\n'
              '        self.p_model = new Model()\n'
              '\n'
              '    def __dealloc__(self):\n'
              '        del self.p_model')

Fragment(uuid='NORMALIZED-002004',
         path='/python/taso/_cython/core.pyx',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='# Hold a Model instance')

Fragment(uuid='NORMALIZED-002005',
         path='/python/taso/_cython/core.pyx',
         lineno=66,
         depth=0,
         type='module',
         name='',
         text='\n    def __cinit__(self):\n        self.p_model = new Model()\n')

Fragment(uuid='NORMALIZED-002006',
         path='/python/taso/_cython/core.pyx',
         lineno=67,
         depth=3,
         type='function',
         name='__cinit__',
         text='def __cinit__(self):\n        self.p_model = new Model()')

Fragment(uuid='NORMALIZED-002007',
         path='/python/taso/_cython/core.pyx',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __dealloc__(self):\n'
              '        del self.p_model\n'
              '\n'
              'cdef class PyTensor:\n'
              '    cdef TensorHandle ctensor # Hold a Tensor instance\n'
              '\n'
              '    cdef inline _set_tensor(self, tensor):\n'
              '        cdef unsigned long long ptr\n'
              '        if tensor is None:\n'
              '            self.ctensor = <TensorHandle>(NULL)\n'
              '        else:\n'
              '            ptr = ctypes.cast(tensor, ctypes.c_void_p).value\n'
              '            self.ctensor = <TensorHandle>(ptr)\n'
              '\n'
              '    property tensor:\n')

Fragment(uuid='NORMALIZED-002008',
         path='/python/taso/_cython/core.pyx',
         lineno=70,
         depth=3,
         type='function',
         name='__dealloc__',
         text='def __dealloc__(self):\n        del self.p_model')

Fragment(uuid='NORMALIZED-002009',
         path='/python/taso/_cython/core.pyx',
         lineno=73,
         depth=1,
         type='class',
         name='PyTensor',
         text='class PyTensor:\n'
              '    cdef TensorHandle ctensor # Hold a Tensor instance\n'
              '\n'
              '    cdef inline _set_tensor(self, tensor):\n'
              '        cdef unsigned long long ptr\n'
              '        if tensor is None:\n'
              '            self.ctensor = <TensorHandle>(NULL)\n'
              '        else:\n'
              '            ptr = ctypes.cast(tensor, ctypes.c_void_p).value\n'
              '            self.ctensor = <TensorHandle>(ptr)')

Fragment(uuid='NORMALIZED-002010',
         path='/python/taso/_cython/core.pyx',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='# Hold a Tensor instance')

Fragment(uuid='NORMALIZED-002011',
         path='/python/taso/_cython/core.pyx',
         lineno=85,
         depth=0,
         type='module',
         name='',
         text='        def __get__(self):\n'
              '            if self.ctensor == NULL:\n'
              '                return None\n'
              '            else:\n'
              '                return ctypes.cast(<unsigned long '
              'long>self.ctensor, ctypes.c_void_p)\n')

Fragment(uuid='NORMALIZED-002012',
         path='/python/taso/_cython/core.pyx',
         lineno=90,
         depth=0,
         type='module',
         name='',
         text='        \n'
              '        def __set__(self, value):\n'
              '            self._set_tensor(value)\n'
              '\n'
              '    property nDim:\n')

Fragment(uuid='NORMALIZED-002013',
         path='/python/taso/_cython/core.pyx',
         lineno=91,
         depth=1,
         type='function',
         name='__set__',
         text='def __set__(self, value):\n            self._set_tensor(value)')

Fragment(uuid='NORMALIZED-002014',
         path='/python/taso/_cython/core.pyx',
         lineno=95,
         depth=0,
         type='module',
         name='',
         text='        def __get__(self):\n'
              '            if self.ctensor == NULL:\n'
              '                return None\n'
              '            else:\n'
              '                return self.ctensor.numDim\n')

Fragment(uuid='NORMALIZED-002015',
         path='/python/taso/_cython/core.pyx',
         lineno=100,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __cinit__(self, tensor):\n'
              '        self._set_tensor(tensor)\n')

Fragment(uuid='NORMALIZED-002016',
         path='/python/taso/_cython/core.pyx',
         lineno=101,
         depth=1,
         type='function',
         name='__cinit__(self, tensor)',
         text='\n\n    def __cinit__(self, tensor):')

Fragment(uuid='NORMALIZED-002017',
         path='/python/taso/_cython/core.pyx',
         lineno=103,
         depth=0,
         type='module',
         name='',
         text='\n    def dim(self, int idx):\n')

Fragment(uuid='NORMALIZED-002018',
         path='/python/taso/_cython/core.pyx',
         lineno=105,
         depth=0,
         type='module',
         name='',
         text='        if (idx < self.ctensor.numDim):\n'
              '            return self.ctensor.dim[idx]\n'
              '        else:\n'
              '            assert False , "Error: index out of range"\n'
              '            return None\n'
              '\n'
              '# Construct operator table\n'
              'op_table = dict()\n'
              'op_table[OP_INPUT] = "Input"\n'
              'op_table[OP_WEIGHT] = "Weight"\n'
              'op_table[OP_CONV2D] = "Conv"\n'
              'op_table[OP_DROPOUT] = "Dropout"\n'
              'op_table[OP_POOL2D_MAX] = "MaxPool"\n'
              'op_table[OP_POOL2D_AVG] = "AveragePool"\n'
              'op_table[OP_RELU] = "Relu"\n'
              'op_table[OP_SIGMOID')

Fragment(uuid='NORMALIZED-002019',
         path='/python/taso/_cython/core.pyx',
         lineno=108,
         depth=5,
         type='documentation',
         name='',
         text='Error: index out of range')

Fragment(uuid='NORMALIZED-002020',
         path='/python/taso/_cython/core.pyx',
         lineno=111,
         depth=0,
         type='documentation',
         name='',
         text='# Construct operator table')

Fragment(uuid='NORMALIZED-002021',
         path='/python/taso/_cython/core.pyx',
         lineno=120,
         depth=0,
         type='module',
         name='',
         text='] = "Sigmoid"\n'
              'op_table[OP_TANH] = "Tanh"\n'
              'op_table[OP_BATCHNORM] = "BatchNormalization"\n'
              'op_table[OP_CONCAT] = "Concat"\n'
              'op_table[OP_SPLIT] = "Split"\n'
              'op_table[OP_RESHAPE] = "Reshape"\n'
              'op_table[OP_TRANSPOSE] = "Transpose"\n'
              'op_table[OP_EW_')

Fragment(uuid='NORMALIZED-002022',
         path='/python/taso/_cython/core.pyx',
         lineno=127,
         depth=0,
         type='module',
         name='',
         text='ADD] = "Add"\n'
              'op_table[OP_EW_MUL] = "Mul"\n'
              'op_table[OP_MATMUL] = "MatMul"\n'
              'op_table[OP_SQUEEZE] = "Squeeze"\n'
              'op_table[OP_UNSQUEEZE] = "Unsqueeze"\n'
              'op_table[OP_EW_SUB] = "Sub"\n'
              'op_table[OP_EW_DIV] = "Div"\n'
              'op_table[OP_EW_EQUAL] = "Equal"\n'
              'op')

Fragment(uuid='NORMALIZED-002023',
         path='/python/taso/_cython/core.pyx',
         lineno=135,
         depth=0,
         type='module',
         name='',
         text='_table[OP_EW_GREATER] = "Greater"\n'
              'op_table[OP_EW_LESS] = "Less"\n'
              'op_table[OP_EW_MAX] = "Max"\n'
              'op_table[OP_EW_MIN] = "Min"\n'
              'op_table[OP_REDUCE_ARGMAX] = "ArgMax"\n'
              'op_table[OP_REDUCE_ARGMIN] = "ArgMin"\n'
              'op_table[OP_REDUCE_MAX] = "ReduceMax')

Fragment(uuid='NORMALIZED-002024',
         path='/python/taso/_cython/core.pyx',
         lineno=141,
         depth=0,
         type='module',
         name='',
         text='"\n'
              'op_table[OP_REDUCE_MEAN] = "ReduceMean"\n'
              'op_table[OP_REDUCE_MIN] = "ReduceMin"\n'
              'op_table[OP_REDUCE_PROD] = "ReduceProd"\n'
              'op_table[OP_REDUCE_SUM] = "ReduceSum"\n'
              'op_table[OP_PAD] = "Pad"\n'
              'op_table[OP_SHAPE] = "Shape"\n'
              'op_table[OP_SIZE] = ')

Fragment(uuid='NORMALIZED-002025',
         path='/python/taso/_cython/core.pyx',
         lineno=148,
         depth=0,
         type='module',
         name='',
         text='"Size"\n'
              'op_table[OP_TOPK] = "TopK"\n'
              'op_table[OP_WHERE] = "Where"\n'
              'op_table[OP_CEIL] = "Ceil"\n'
              'op_table[OP_CAST] = "Cast"\n'
              'op_table[OP_EXP] = "Exp"\n'
              'op_table[OP_ROUND] = "Round"\n'
              'op_table[OP_LOG] = "Log"\n'
              'op_table[OP_LOGICAL_NOT] = "Not"\n'
              'op_')

Fragment(uuid='NORMALIZED-002026',
         path='/python/taso/_cython/core.pyx',
         lineno=157,
         depth=0,
         type='module',
         name='',
         text='table[OP_SQRT] = "Sqrt"\n'
              'op_table[OP_SLICE] = "Slice"\n'
              'op_table[OP_RESIZE] = "Resize"\n'
              '# op_table[OP_BROADCAST_ADD] = "BroadcastAdd"\n'
              'op_table[OP_BROADCAST_ADD] = "Add"\n'
              '\n'
              'cdef class PyGraph:\n'
              '    cdef Graph *p_graph #Hold a Graph instance\n')

Fragment(uuid='NORMALIZED-002027',
         path='/python/taso/_cython/core.pyx',
         lineno=160,
         depth=0,
         type='documentation',
         name='',
         text='# op_table[OP_BROADCAST_ADD] = "BroadcastAdd"')

Fragment(uuid='NORMALIZED-002028',
         path='/python/taso/_cython/core.pyx',
         lineno=163,
         depth=1,
         type='class',
         name='PyGraph',
         text='class PyGraph:\n    cdef Graph *p_graph #Hold a Graph instance\n')

Fragment(uuid='NORMALIZED-002029',
         path='/python/taso/_cython/core.pyx',
         lineno=164,
         depth=2,
         type='documentation',
         name='',
         text='#Hold a Graph instance')

Fragment(uuid='NORMALIZED-002030',
         path='/python/taso/_cython/core.pyx',
         lineno=165,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __cinit__(self, graph = None):\n'
              '        cdef unsigned long long ptr\n'
              '        if graph is None:\n'
              '            self.p_graph = new Graph()\n'
              '        else:\n'
              '            ptr = ctypes.cast(graph, ctypes.c_void_p).value\n'
              '            self.p_graph = <Graph*>(ptr)\n')

Fragment(uuid='NORMALIZED-002031',
         path='/python/taso/_cython/core.pyx',
         lineno=165,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def __cinit__(self, graph = None):\n'
              '        cdef unsigned long long ptr\n'
              '        if graph is None:\n'
              '            self.p_graph = new Graph()\n'
              '        else:\n'
              '            ptr = ctypes.cast(graph, ctypes.c_void_p).value\n'
              '            self.p_graph = <Graph*>(ptr)\n')

Fragment(uuid='NORMALIZED-002032',
         path='/python/taso/_cython/core.pyx',
         lineno=166,
         depth=3,
         type='function',
         name='__cinit__',
         text='def __cinit__(self, graph = None):\n'
              '        cdef unsigned long long ptr\n'
              '        if graph is None:\n'
              '            self.p_graph = new Graph()\n'
              '        else:\n'
              '            ptr = ctypes.cast(graph, ctypes.c_void_p).value\n'
              '            self.p_graph = <Graph*>(ptr)')

Fragment(uuid='NORMALIZED-002033',
         path='/python/taso/_cython/core.pyx',
         lineno=173,
         depth=0,
         type='module',
         name='',
         text='    def print_measurements(self):\n'
              '        self.p_graph.print_measurements()\n')

Fragment(uuid='NORMALIZED-002034',
         path='/python/taso/_cython/core.pyx',
         lineno=173,
         depth=1,
         type='class',
         name='PyGraph',
         text='    def print_measurements(self):\n'
              '        self.p_graph.print_measurements()\n')

Fragment(uuid='NORMALIZED-002035',
         path='/python/taso/_cython/core.pyx',
         lineno=173,
         depth=3,
         type='function',
         name='print_measurements',
         text='def print_measurements(self):\n'
              '        self.p_graph.print_measurements()')

Fragment(uuid='NORMALIZED-002036',
         path='/python/taso/_cython/core.pyx',
         lineno=175,
         depth=0,
         type='module',
         name='',
         text='\n    def run_time(self):\n        return self.p_graph.run()\n')

Fragment(uuid='NORMALIZED-002037',
         path='/python/taso/_cython/core.pyx',
         lineno=175,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n    def run_time(self):\n        return self.p_graph.run()\n')

Fragment(uuid='NORMALIZED-002038',
         path='/python/taso/_cython/core.pyx',
         lineno=176,
         depth=3,
         type='function',
         name='run_time',
         text='def run_time(self):\n        return self.p_graph.run()')

Fragment(uuid='NORMALIZED-002039',
         path='/python/taso/_cython/core.pyx',
         lineno=178,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def cost(self):\n'
              '        return self.p_graph.total_cost()\n'
              '\n'
              '    #def __dealloc__(self):\n'
              '        #t = ctypes.cast(<unsigned long long>self.p_graph, '
              'ctypes.c_void_p)\n'
              '        #print(t)\n'
              '        #del self.p_graph\n'
              '\n'
              '    # element-wise addition\n')

Fragment(uuid='NORMALIZED-002040',
         path='/python/taso/_cython/core.pyx',
         lineno=178,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def cost(self):\n'
              '        return self.p_graph.total_cost()\n'
              '\n'
              '    #def __dealloc__(self):\n'
              '        #t = ctypes.cast(<unsigned long long>self.p_graph, '
              'ctypes.c_void_p)\n'
              '        #print(t)\n'
              '        #del self.p_graph\n'
              '\n'
              '    # element-wise addition\n')

Fragment(uuid='NORMALIZED-002041',
         path='/python/taso/_cython/core.pyx',
         lineno=179,
         depth=3,
         type='function',
         name='cost',
         text='def cost(self):\n        return self.p_graph.total_cost()')

Fragment(uuid='NORMALIZED-002042',
         path='/python/taso/_cython/core.pyx',
         lineno=182,
         depth=2,
         type='documentation',
         name='',
         text='#def __dealloc__(self):')

Fragment(uuid='NORMALIZED-002043',
         path='/python/taso/_cython/core.pyx',
         lineno=183,
         depth=2,
         type='documentation',
         name='',
         text='#t = ctypes.cast(<unsigned long long>self.p_graph, '
              'ctypes.c_void_p)')

Fragment(uuid='NORMALIZED-002044',
         path='/python/taso/_cython/core.pyx',
         lineno=187,
         depth=2,
         type='documentation',
         name='',
         text='# element-wise addition')

Fragment(uuid='NORMALIZED-002045',
         path='/python/taso/_cython/core.pyx',
         lineno=188,
         depth=0,
         type='module',
         name='',
         text='    def add(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_ADD, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002046',
         path='/python/taso/_cython/core.pyx',
         lineno=188,
         depth=1,
         type='class',
         name='PyGraph',
         text='    def add(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_ADD, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002047',
         path='/python/taso/_cython/core.pyx',
         lineno=188,
         depth=3,
         type='function',
         name='add',
         text='def add(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_ADD, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002048',
         path='/python/taso/_cython/core.pyx',
         lineno=192,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def batchnorm(self, PyTensor input, PyTensor scale, '
              'PyTensor bias, PyTensor mean, PyTensor var, float epsilon = '
              '-1):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.batchnorm(input.ctensor, scale.ctensor,\n'
              '                                                          '
              'bias.ctensor, mean.ctensor, var.ctensor, epsilon)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002049',
         path='/python/taso/_cython/core.pyx',
         lineno=192,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def batchnorm(self, PyTensor input, PyTensor scale, '
              'PyTensor bias, PyTensor mean, PyTensor var, float epsilon = '
              '-1):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.batchnorm(input.ctensor, scale.ctensor,\n'
              '                                                          '
              'bias.ctensor, mean.ctensor, var.ctensor, epsilon)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002050',
         path='/python/taso/_cython/core.pyx',
         lineno=193,
         depth=3,
         type='function',
         name='batchnorm',
         text='def batchnorm(self, PyTensor input, PyTensor scale, PyTensor '
              'bias, PyTensor mean, PyTensor var, float epsilon = -1):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.batchnorm(input.ctensor, scale.ctensor,\n'
              '                                                          '
              'bias.ctensor, mean.ctensor, var.ctensor, epsilon)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002051',
         path='/python/taso/_cython/core.pyx',
         lineno=198,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def cast(self, *, PyTensor input, datatype):\n'
              '        datatype = get_data_type(datatype)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.cast(input.ctensor, datatype)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)    \n')

Fragment(uuid='NORMALIZED-002052',
         path='/python/taso/_cython/core.pyx',
         lineno=198,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def cast(self, *, PyTensor input, datatype):\n'
              '        datatype = get_data_type(datatype)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.cast(input.ctensor, datatype)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)    \n')

Fragment(uuid='NORMALIZED-002053',
         path='/python/taso/_cython/core.pyx',
         lineno=199,
         depth=3,
         type='function',
         name='cast',
         text='def cast(self, *, PyTensor input, datatype):\n'
              '        datatype = get_data_type(datatype)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.cast(input.ctensor, datatype)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002054',
         path='/python/taso/_cython/core.pyx',
         lineno=204,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def ceil(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.ceil(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002055',
         path='/python/taso/_cython/core.pyx',
         lineno=204,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def ceil(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.ceil(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002056',
         path='/python/taso/_cython/core.pyx',
         lineno=205,
         depth=3,
         type='function',
         name='ceil',
         text='def ceil(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.ceil(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002057',
         path='/python/taso/_cython/core.pyx',
         lineno=209,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def concat(self, int axis, list inputs):\n'
              '        cdef TensorHandle cinputs[32]\n'
              '        cdef unsigned long long ptr\n'
              '        assert len(inputs) <= 32\n'
              '        for i in range(len(inputs)):\n'
              '            assert(type(inputs[i]) == PyTensor)\n'
              '            assert(inputs[i].tensor is not None)\n'
              '            ptr = ctypes.cast(inputs[i].tensor, '
              'ctypes.c_void_p).value\n'
              '            cinputs[i] = <TensorHandle>(ptr)\n'
              '        cdef TensorHandle handle = self.p_graph.concat(axis, '
              'len(inputs), cinputs)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002058',
         path='/python/taso/_cython/core.pyx',
         lineno=209,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def concat(self, int axis, list inputs):\n'
              '        cdef TensorHandle cinputs[32]\n'
              '        cdef unsigned long long ptr\n'
              '        assert len(inputs) <= 32\n'
              '        for i in range(len(inputs)):\n'
              '            assert(type(inputs[i]) == PyTensor)\n'
              '            assert(inputs[i].tensor is not None)\n'
              '            ptr = ctypes.cast(inputs[i].tensor, '
              'ctypes.c_void_p).value\n'
              '            cinputs[i] = <TensorHandle>(ptr)\n'
              '        cdef TensorHandle handle = self.p_graph.concat(axis, '
              'len(inputs), cinputs)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002059',
         path='/python/taso/_cython/core.pyx',
         lineno=210,
         depth=3,
         type='function',
         name='concat',
         text='def concat(self, int axis, list inputs):\n'
              '        cdef TensorHandle cinputs[32]\n'
              '        cdef unsigned long long ptr\n'
              '        assert len(inputs) <= 32\n'
              '        for i in range(len(inputs)):\n'
              '            assert(type(inputs[i]) == PyTensor)\n'
              '            assert(inputs[i].tensor is not None)\n'
              '            ptr = ctypes.cast(inputs[i].tensor, '
              'ctypes.c_void_p).value\n'
              '            cinputs[i] = <TensorHandle>(ptr)\n'
              '        cdef TensorHandle handle = self.p_graph.concat(axis, '
              'len(inputs), cinputs)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002060',
         path='/python/taso/_cython/core.pyx',
         lineno=222,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def conv2d(self, *, PyTensor input, PyTensor weight, '
              'strides, padding, activation = "NONE"):\n'
              '        assert (type(input) == PyTensor)\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.conv2d(input.ctensor, weight.ctensor, strides[0], '
              'strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002061',
         path='/python/taso/_cython/core.pyx',
         lineno=222,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def conv2d(self, *, PyTensor input, PyTensor weight, '
              'strides, padding, activation = "NONE"):\n'
              '        assert (type(input) == PyTensor)\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.conv2d(input.ctensor, weight.ctensor, strides[0], '
              'strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002062',
         path='/python/taso/_cython/core.pyx',
         lineno=223,
         depth=3,
         type='function',
         name='conv2d',
         text='def conv2d(self, *, PyTensor input, PyTensor weight, strides, '
              'padding, activation = "NONE"):\n'
              '        assert (type(input) == PyTensor)\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.conv2d(input.ctensor, weight.ctensor, strides[0], '
              'strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002063',
         path='/python/taso/_cython/core.pyx',
         lineno=230,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def div(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_DIV, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002064',
         path='/python/taso/_cython/core.pyx',
         lineno=230,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def div(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_DIV, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002065',
         path='/python/taso/_cython/core.pyx',
         lineno=231,
         depth=3,
         type='function',
         name='div',
         text='def div(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_DIV, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002066',
         path='/python/taso/_cython/core.pyx',
         lineno=235,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def dropout(self, PyTensor input, float rate = 0):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002067',
         path='/python/taso/_cython/core.pyx',
         lineno=235,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def dropout(self, PyTensor input, float rate = 0):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002068',
         path='/python/taso/_cython/core.pyx',
         lineno=236,
         depth=3,
         type='function',
         name='dropout',
         text='def dropout(self, PyTensor input, float rate = 0):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002069',
         path='/python/taso/_cython/core.pyx',
         lineno=237,
         depth=3,
         type='documentation',
         name='',
         text='# We ignore dropout rate for inference')

Fragment(uuid='NORMALIZED-002070',
         path='/python/taso/_cython/core.pyx',
         lineno=241,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def equal(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_EQUAL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002071',
         path='/python/taso/_cython/core.pyx',
         lineno=241,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def equal(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_EQUAL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002072',
         path='/python/taso/_cython/core.pyx',
         lineno=242,
         depth=3,
         type='function',
         name='equal',
         text='def equal(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_EQUAL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002073',
         path='/python/taso/_cython/core.pyx',
         lineno=246,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def exp(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.exp(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002074',
         path='/python/taso/_cython/core.pyx',
         lineno=246,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def exp(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.exp(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002075',
         path='/python/taso/_cython/core.pyx',
         lineno=247,
         depth=3,
         type='function',
         name='exp',
         text='def exp(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.exp(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002076',
         path='/python/taso/_cython/core.pyx',
         lineno=251,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def greater(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_GREATER, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002077',
         path='/python/taso/_cython/core.pyx',
         lineno=251,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def greater(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_GREATER, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002078',
         path='/python/taso/_cython/core.pyx',
         lineno=252,
         depth=3,
         type='function',
         name='greater',
         text='def greater(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_GREATER, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002079',
         path='/python/taso/_cython/core.pyx',
         lineno=256,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def identity(self, PyTensor input):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002080',
         path='/python/taso/_cython/core.pyx',
         lineno=256,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def identity(self, PyTensor input):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002081',
         path='/python/taso/_cython/core.pyx',
         lineno=257,
         depth=3,
         type='function',
         name='identity',
         text='def identity(self, PyTensor input):\n'
              '        # We ignore dropout rate for inference\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.dropout(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002082',
         path='/python/taso/_cython/core.pyx',
         lineno=258,
         depth=3,
         type='documentation',
         name='',
         text='# We ignore dropout rate for inference')

Fragment(uuid='NORMALIZED-002083',
         path='/python/taso/_cython/core.pyx',
         lineno=262,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def leakyrelu(self, PyTensor input, float alpha, bool '
              'inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.leakyrelu(input.ctensor, alpha, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002084',
         path='/python/taso/_cython/core.pyx',
         lineno=262,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def leakyrelu(self, PyTensor input, float alpha, bool '
              'inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.leakyrelu(input.ctensor, alpha, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002085',
         path='/python/taso/_cython/core.pyx',
         lineno=263,
         depth=3,
         type='function',
         name='leakyrelu',
         text='def leakyrelu(self, PyTensor input, float alpha, bool inplace = '
              'False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.leakyrelu(input.ctensor, alpha, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002086',
         path='/python/taso/_cython/core.pyx',
         lineno=267,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def less(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_LESS, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002087',
         path='/python/taso/_cython/core.pyx',
         lineno=267,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def less(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_LESS, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002088',
         path='/python/taso/_cython/core.pyx',
         lineno=268,
         depth=3,
         type='function',
         name='less',
         text='def less(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_LESS, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002089',
         path='/python/taso/_cython/core.pyx',
         lineno=272,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def log(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.log(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002090',
         path='/python/taso/_cython/core.pyx',
         lineno=272,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def log(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.log(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002091',
         path='/python/taso/_cython/core.pyx',
         lineno=273,
         depth=3,
         type='function',
         name='log',
         text='def log(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.log(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002092',
         path='/python/taso/_cython/core.pyx',
         lineno=277,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def logical_not(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.logical_not(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002093',
         path='/python/taso/_cython/core.pyx',
         lineno=277,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def logical_not(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.logical_not(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002094',
         path='/python/taso/_cython/core.pyx',
         lineno=278,
         depth=3,
         type='function',
         name='logical_not',
         text='def logical_not(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.logical_not(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002095',
         path='/python/taso/_cython/core.pyx',
         lineno=282,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def matmul(self, PyTensor input, PyTensor weight, '
              'activation = "NONE"):\n'
              '        assert(type(input) == PyTensor)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.matmul(input.ctensor, weight.ctensor, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002096',
         path='/python/taso/_cython/core.pyx',
         lineno=282,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def matmul(self, PyTensor input, PyTensor weight, '
              'activation = "NONE"):\n'
              '        assert(type(input) == PyTensor)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.matmul(input.ctensor, weight.ctensor, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002097',
         path='/python/taso/_cython/core.pyx',
         lineno=283,
         depth=3,
         type='function',
         name='matmul',
         text='def matmul(self, PyTensor input, PyTensor weight, activation = '
              '"NONE"):\n'
              '        assert(type(input) == PyTensor)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.matmul(input.ctensor, weight.ctensor, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002098',
         path='/python/taso/_cython/core.pyx',
         lineno=289,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def max(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MAX, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002099',
         path='/python/taso/_cython/core.pyx',
         lineno=289,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def max(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MAX, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002100',
         path='/python/taso/_cython/core.pyx',
         lineno=290,
         depth=3,
         type='function',
         name='max',
         text='def max(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MAX, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002101',
         path='/python/taso/_cython/core.pyx',
         lineno=294,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def min(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MIN, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    # element-wise multiplication\n')

Fragment(uuid='NORMALIZED-002102',
         path='/python/taso/_cython/core.pyx',
         lineno=294,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def min(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MIN, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n'
              '\n'
              '    # element-wise multiplication\n')

Fragment(uuid='NORMALIZED-002103',
         path='/python/taso/_cython/core.pyx',
         lineno=295,
         depth=3,
         type='function',
         name='min',
         text='def min(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MIN, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002104',
         path='/python/taso/_cython/core.pyx',
         lineno=300,
         depth=2,
         type='documentation',
         name='',
         text='# element-wise multiplication')

Fragment(uuid='NORMALIZED-002105',
         path='/python/taso/_cython/core.pyx',
         lineno=301,
         depth=0,
         type='module',
         name='',
         text='    def mul(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MUL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002106',
         path='/python/taso/_cython/core.pyx',
         lineno=301,
         depth=1,
         type='class',
         name='PyGraph',
         text='    def mul(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MUL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002107',
         path='/python/taso/_cython/core.pyx',
         lineno=301,
         depth=3,
         type='function',
         name='mul',
         text='def mul(self, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_MUL, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002108',
         path='/python/taso/_cython/core.pyx',
         lineno=305,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def maxpool2d(self, PyTensor input, kernels, strides, '
              'padding, activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_max(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002109',
         path='/python/taso/_cython/core.pyx',
         lineno=305,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def maxpool2d(self, PyTensor input, kernels, strides, '
              'padding, activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_max(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002110',
         path='/python/taso/_cython/core.pyx',
         lineno=306,
         depth=3,
         type='function',
         name='maxpool2d',
         text='def maxpool2d(self, PyTensor input, kernels, strides, padding, '
              'activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_max(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002111',
         path='/python/taso/_cython/core.pyx',
         lineno=312,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def avgpool2d(self, *, PyTensor input, kernels, strides, '
              'padding, activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_avg(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002112',
         path='/python/taso/_cython/core.pyx',
         lineno=312,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def avgpool2d(self, *, PyTensor input, kernels, strides, '
              'padding, activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_avg(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002113',
         path='/python/taso/_cython/core.pyx',
         lineno=313,
         depth=3,
         type='function',
         name='avgpool2d',
         text='def avgpool2d(self, *, PyTensor input, kernels, strides, '
              'padding, activation = "NONE"):\n'
              '        padding = get_padding_mode(padding)\n'
              '        activation = get_activation_mode(activation)\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.pool2d_avg(input.ctensor, kernels[0], kernels[1], '
              'strides[0], strides[1], padding, activation)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002114',
         path='/python/taso/_cython/core.pyx',
         lineno=319,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def prelu(self, *, PyTensor x, PyTensor slope):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_PRELU, x.ctensor, slope.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002115',
         path='/python/taso/_cython/core.pyx',
         lineno=319,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def prelu(self, *, PyTensor x, PyTensor slope):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_PRELU, x.ctensor, slope.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002116',
         path='/python/taso/_cython/core.pyx',
         lineno=320,
         depth=3,
         type='function',
         name='prelu',
         text='def prelu(self, *, PyTensor x, PyTensor slope):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_PRELU, x.ctensor, slope.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002117',
         path='/python/taso/_cython/core.pyx',
         lineno=324,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def reduce_argmax(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmax(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002118',
         path='/python/taso/_cython/core.pyx',
         lineno=324,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def reduce_argmax(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmax(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002119',
         path='/python/taso/_cython/core.pyx',
         lineno=325,
         depth=3,
         type='function',
         name='reduce_argmax',
         text='def reduce_argmax(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmax(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002120',
         path='/python/taso/_cython/core.pyx',
         lineno=333,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def reduce_argmin(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmin(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002121',
         path='/python/taso/_cython/core.pyx',
         lineno=333,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def reduce_argmin(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmin(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002122',
         path='/python/taso/_cython/core.pyx',
         lineno=334,
         depth=3,
         type='function',
         name='reduce_argmin',
         text='def reduce_argmin(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_argmin(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002123',
         path='/python/taso/_cython/core.pyx',
         lineno=342,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def reduce_max(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_max(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002124',
         path='/python/taso/_cython/core.pyx',
         lineno=342,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def reduce_max(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_max(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002125',
         path='/python/taso/_cython/core.pyx',
         lineno=343,
         depth=3,
         type='function',
         name='reduce_max',
         text='def reduce_max(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_max(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002126',
         path='/python/taso/_cython/core.pyx',
         lineno=351,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def reduce_mean(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_mean(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002127',
         path='/python/taso/_cython/core.pyx',
         lineno=351,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def reduce_mean(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_mean(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002128',
         path='/python/taso/_cython/core.pyx',
         lineno=352,
         depth=3,
         type='function',
         name='reduce_mean',
         text='def reduce_mean(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_mean(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002129',
         path='/python/taso/_cython/core.pyx',
         lineno=360,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def reduce_min(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_min(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002130',
         path='/python/taso/_cython/core.pyx',
         lineno=360,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def reduce_min(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_min(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002131',
         path='/python/taso/_cython/core.pyx',
         lineno=361,
         depth=3,
         type='function',
         name='reduce_min',
         text='def reduce_min(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_min(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002132',
         path='/python/taso/_cython/core.pyx',
         lineno=369,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def reduce_prod(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_prod(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002133',
         path='/python/taso/_cython/core.pyx',
         lineno=369,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def reduce_prod(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_prod(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002134',
         path='/python/taso/_cython/core.pyx',
         lineno=370,
         depth=3,
         type='function',
         name='reduce_prod',
         text='def reduce_prod(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_prod(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002135',
         path='/python/taso/_cython/core.pyx',
         lineno=378,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def reduce_sum(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_sum(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002136',
         path='/python/taso/_cython/core.pyx',
         lineno=378,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def reduce_sum(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_sum(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002137',
         path='/python/taso/_cython/core.pyx',
         lineno=379,
         depth=3,
         type='function',
         name='reduce_sum',
         text='def reduce_sum(self, *, PyTensor input, tuple axes, bool '
              'keepdims = True):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reduce_sum(input.ctensor, caxes, keepdims)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002138',
         path='/python/taso/_cython/core.pyx',
         lineno=387,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def reshape(self, PyTensor input, tuple shape):\n'
              '        cdef vector[int] cshape\n'
              '        cshape.resize(len(shape))\n'
              '        for i in range(len(shape)):\n'
              '            cshape[i] = shape[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reshape(input.ctensor, cshape)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002139',
         path='/python/taso/_cython/core.pyx',
         lineno=387,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def reshape(self, PyTensor input, tuple shape):\n'
              '        cdef vector[int] cshape\n'
              '        cshape.resize(len(shape))\n'
              '        for i in range(len(shape)):\n'
              '            cshape[i] = shape[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reshape(input.ctensor, cshape)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002140',
         path='/python/taso/_cython/core.pyx',
         lineno=388,
         depth=3,
         type='function',
         name='reshape',
         text='def reshape(self, PyTensor input, tuple shape):\n'
              '        cdef vector[int] cshape\n'
              '        cshape.resize(len(shape))\n'
              '        for i in range(len(shape)):\n'
              '            cshape[i] = shape[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.reshape(input.ctensor, cshape)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002141',
         path='/python/taso/_cython/core.pyx',
         lineno=396,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def relu(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.relu(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002142',
         path='/python/taso/_cython/core.pyx',
         lineno=396,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def relu(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.relu(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002143',
         path='/python/taso/_cython/core.pyx',
         lineno=397,
         depth=3,
         type='function',
         name='relu',
         text='def relu(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.relu(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002144',
         path='/python/taso/_cython/core.pyx',
         lineno=401,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def round(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.round(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002145',
         path='/python/taso/_cython/core.pyx',
         lineno=401,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def round(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.round(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002146',
         path='/python/taso/_cython/core.pyx',
         lineno=402,
         depth=3,
         type='function',
         name='round',
         text='def round(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.round(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002147',
         path='/python/taso/_cython/core.pyx',
         lineno=406,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def shape(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SHAPE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002148',
         path='/python/taso/_cython/core.pyx',
         lineno=406,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def shape(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SHAPE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002149',
         path='/python/taso/_cython/core.pyx',
         lineno=407,
         depth=3,
         type='function',
         name='shape',
         text='def shape(self, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SHAPE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002150',
         path='/python/taso/_cython/core.pyx',
         lineno=411,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def sigmoid(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sigmoid(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002151',
         path='/python/taso/_cython/core.pyx',
         lineno=411,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def sigmoid(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sigmoid(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002152',
         path='/python/taso/_cython/core.pyx',
         lineno=412,
         depth=3,
         type='function',
         name='sigmoid',
         text='def sigmoid(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sigmoid(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002153',
         path='/python/taso/_cython/core.pyx',
         lineno=416,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def size(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SIZE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002154',
         path='/python/taso/_cython/core.pyx',
         lineno=416,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def size(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SIZE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002155',
         path='/python/taso/_cython/core.pyx',
         lineno=417,
         depth=3,
         type='function',
         name='size',
         text='def size(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.shape(input.ctensor, OP_SIZE)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002156',
         path='/python/taso/_cython/core.pyx',
         lineno=421,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def slice(self, PyTensor input, start, end, axes, steps):\n'
              '        cdef vector[int] cstart\n'
              '        cdef vector[int] cend\n'
              '        cdef vector[int] caxes\n'
              '        cdef vector[int] csteps\n'
              '        cstart.resize(len(start))\n')

Fragment(uuid='NORMALIZED-002157',
         path='/python/taso/_cython/core.pyx',
         lineno=421,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def slice(self, PyTensor input, start, end, axes, steps):\n'
              '        cdef vector[int] cstart\n'
              '        cdef vector[int] cend\n'
              '        cdef vector[int] caxes\n'
              '        cdef vector[int] csteps\n'
              '        cstart.resize(len(start))\n')

Fragment(uuid='NORMALIZED-002158',
         path='/python/taso/_cython/core.pyx',
         lineno=422,
         depth=3,
         type='function',
         name='slice',
         text='def slice(self, PyTensor input, start, end, axes, steps):\n'
              '        cdef vector[int] cstart\n'
              '        cdef vector[int] cend\n'
              '        cdef vector[int] caxes\n'
              '        cdef vector[int] csteps\n'
              '        cstart.resize(len(start))\n')

Fragment(uuid='NORMALIZED-002159',
         path='/python/taso/_cython/core.pyx',
         lineno=428,
         depth=0,
         type='module',
         name='',
         text='        for i in range(len(start)):\n'
              '            cstart[i] = start[i]\n'
              '        cend.resize(len(end))\n')

Fragment(uuid='NORMALIZED-002160',
         path='/python/taso/_cython/core.pyx',
         lineno=428,
         depth=1,
         type='class',
         name='PyGraph',
         text='        for i in range(len(start)):\n'
              '            cstart[i] = start[i]\n'
              '        cend.resize(len(end))\n')

Fragment(uuid='NORMALIZED-002161',
         path='/python/taso/_cython/core.pyx',
         lineno=428,
         depth=3,
         type='function',
         name='slice',
         text='        for i in range(len(start)):\n'
              '            cstart[i] = start[i]\n'
              '        cend.resize(len(end))\n')

Fragment(uuid='NORMALIZED-002162',
         path='/python/taso/_cython/core.pyx',
         lineno=431,
         depth=0,
         type='module',
         name='',
         text='        for i in range(len(end)):\n'
              '            cend[i] = end[i]\n'
              '        if axes: \n'
              '            caxes.resize(len(axes))\n')

Fragment(uuid='NORMALIZED-002163',
         path='/python/taso/_cython/core.pyx',
         lineno=431,
         depth=1,
         type='class',
         name='PyGraph',
         text='        for i in range(len(end)):\n'
              '            cend[i] = end[i]\n'
              '        if axes: \n'
              '            caxes.resize(len(axes))\n')

Fragment(uuid='NORMALIZED-002164',
         path='/python/taso/_cython/core.pyx',
         lineno=431,
         depth=3,
         type='function',
         name='slice',
         text='        for i in range(len(end)):\n'
              '            cend[i] = end[i]\n'
              '        if axes: \n'
              '            caxes.resize(len(axes))\n')

Fragment(uuid='NORMALIZED-002165',
         path='/python/taso/_cython/core.pyx',
         lineno=435,
         depth=0,
         type='module',
         name='',
         text='            for i in range(len(axes)):\n'
              '                caxes[i] = axes[i]\n'
              '        else:\n'
              '            caxes.resize(len(start))\n')

Fragment(uuid='NORMALIZED-002166',
         path='/python/taso/_cython/core.pyx',
         lineno=435,
         depth=1,
         type='class',
         name='PyGraph',
         text='            for i in range(len(axes)):\n'
              '                caxes[i] = axes[i]\n'
              '        else:\n'
              '            caxes.resize(len(start))\n')

Fragment(uuid='NORMALIZED-002167',
         path='/python/taso/_cython/core.pyx',
         lineno=435,
         depth=3,
         type='function',
         name='slice',
         text='            for i in range(len(axes)):\n'
              '                caxes[i] = axes[i]\n'
              '        else:\n'
              '            caxes.resize(len(start))\n')

Fragment(uuid='NORMALIZED-002168',
         path='/python/taso/_cython/core.pyx',
         lineno=439,
         depth=0,
         type='module',
         name='',
         text='            for i in range(len(start)):\n'
              '                caxes[i] = i\n'
              '        if steps:\n'
              '            csteps.resize(len(steps))\n')

Fragment(uuid='NORMALIZED-002169',
         path='/python/taso/_cython/core.pyx',
         lineno=439,
         depth=1,
         type='class',
         name='PyGraph',
         text='            for i in range(len(start)):\n'
              '                caxes[i] = i\n'
              '        if steps:\n'
              '            csteps.resize(len(steps))\n')

Fragment(uuid='NORMALIZED-002170',
         path='/python/taso/_cython/core.pyx',
         lineno=439,
         depth=3,
         type='function',
         name='slice',
         text='            for i in range(len(start)):\n'
              '                caxes[i] = i\n'
              '        if steps:\n'
              '            csteps.resize(len(steps))\n')

Fragment(uuid='NORMALIZED-002171',
         path='/python/taso/_cython/core.pyx',
         lineno=443,
         depth=0,
         type='module',
         name='',
         text='            for i in range(len(steps)):\n'
              '                csteps[i] = steps[i]\n'
              '        else:\n'
              '            csteps.resize(len(start))\n')

Fragment(uuid='NORMALIZED-002172',
         path='/python/taso/_cython/core.pyx',
         lineno=443,
         depth=1,
         type='class',
         name='PyGraph',
         text='            for i in range(len(steps)):\n'
              '                csteps[i] = steps[i]\n'
              '        else:\n'
              '            csteps.resize(len(start))\n')

Fragment(uuid='NORMALIZED-002173',
         path='/python/taso/_cython/core.pyx',
         lineno=443,
         depth=3,
         type='function',
         name='slice',
         text='            for i in range(len(steps)):\n'
              '                csteps[i] = steps[i]\n'
              '        else:\n'
              '            csteps.resize(len(start))\n')

Fragment(uuid='NORMALIZED-002174',
         path='/python/taso/_cython/core.pyx',
         lineno=447,
         depth=0,
         type='module',
         name='',
         text='            for i in range(len(start)):\n'
              '                csteps[i] = 1\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.slice(input.ctensor, cstart, cend, caxes, csteps)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002175',
         path='/python/taso/_cython/core.pyx',
         lineno=447,
         depth=1,
         type='class',
         name='PyGraph',
         text='            for i in range(len(start)):\n'
              '                csteps[i] = 1\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.slice(input.ctensor, cstart, cend, caxes, csteps)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002176',
         path='/python/taso/_cython/core.pyx',
         lineno=447,
         depth=3,
         type='function',
         name='slice',
         text='            for i in range(len(start)):\n'
              '                csteps[i] = 1\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.slice(input.ctensor, cstart, cend, caxes, csteps)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002177',
         path='/python/taso/_cython/core.pyx',
         lineno=452,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def split(self, PyTensor input, int axis, sizes):\n'
              '        cdef TensorHandle coutputs[32]\n'
              '        cdef vector[int] csizes\n'
              '        if type(sizes) is list:\n'
              '            assert len(sizes) <= 32\n'
              '            csizes.resize(len(sizes))\n')

Fragment(uuid='NORMALIZED-002178',
         path='/python/taso/_cython/core.pyx',
         lineno=452,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def split(self, PyTensor input, int axis, sizes):\n'
              '        cdef TensorHandle coutputs[32]\n'
              '        cdef vector[int] csizes\n'
              '        if type(sizes) is list:\n'
              '            assert len(sizes) <= 32\n'
              '            csizes.resize(len(sizes))\n')

Fragment(uuid='NORMALIZED-002179',
         path='/python/taso/_cython/core.pyx',
         lineno=453,
         depth=3,
         type='function',
         name='split',
         text='def split(self, PyTensor input, int axis, sizes):\n'
              '        cdef TensorHandle coutputs[32]\n'
              '        cdef vector[int] csizes\n'
              '        if type(sizes) is list:\n'
              '            assert len(sizes) <= 32\n'
              '            csizes.resize(len(sizes))\n')

Fragment(uuid='NORMALIZED-002180',
         path='/python/taso/_cython/core.pyx',
         lineno=459,
         depth=0,
         type='module',
         name='',
         text='            for i in range(len(sizes)):\n'
              '                csizes[i] = sizes[i]\n'
              '            self.p_graph.split(input.ctensor, axis, csizes, '
              'coutputs)\n'
              '        else:\n'
              '            # sizes is an integer\n'
              '            self.p_graph.split_equal(input.ctensor, axis, '
              'sizes, coutputs)\n'
              '        outputs = list()\n')

Fragment(uuid='NORMALIZED-002181',
         path='/python/taso/_cython/core.pyx',
         lineno=459,
         depth=1,
         type='class',
         name='PyGraph',
         text='            for i in range(len(sizes)):\n'
              '                csizes[i] = sizes[i]\n'
              '            self.p_graph.split(input.ctensor, axis, csizes, '
              'coutputs)\n'
              '        else:\n'
              '            # sizes is an integer\n'
              '            self.p_graph.split_equal(input.ctensor, axis, '
              'sizes, coutputs)\n'
              '        outputs = list()\n')

Fragment(uuid='NORMALIZED-002182',
         path='/python/taso/_cython/core.pyx',
         lineno=459,
         depth=3,
         type='function',
         name='split',
         text='            for i in range(len(sizes)):\n'
              '                csizes[i] = sizes[i]\n'
              '            self.p_graph.split(input.ctensor, axis, csizes, '
              'coutputs)\n'
              '        else:\n'
              '            # sizes is an integer\n'
              '            self.p_graph.split_equal(input.ctensor, axis, '
              'sizes, coutputs)\n'
              '        outputs = list()\n')

Fragment(uuid='NORMALIZED-002183',
         path='/python/taso/_cython/core.pyx',
         lineno=463,
         depth=6,
         type='documentation',
         name='',
         text='# sizes is an integer')

Fragment(uuid='NORMALIZED-002184',
         path='/python/taso/_cython/core.pyx',
         lineno=466,
         depth=0,
         type='module',
         name='',
         text='        for i in range(len(sizes)):\n'
              '            t = ctypes.cast(<unsigned long long>coutputs[i], '
              'ctypes.c_void_p)\n'
              '            outputs.append(PyTensor(t))\n'
              '        return outputs\n')

Fragment(uuid='NORMALIZED-002185',
         path='/python/taso/_cython/core.pyx',
         lineno=466,
         depth=1,
         type='class',
         name='PyGraph',
         text='        for i in range(len(sizes)):\n'
              '            t = ctypes.cast(<unsigned long long>coutputs[i], '
              'ctypes.c_void_p)\n'
              '            outputs.append(PyTensor(t))\n'
              '        return outputs\n')

Fragment(uuid='NORMALIZED-002186',
         path='/python/taso/_cython/core.pyx',
         lineno=466,
         depth=3,
         type='function',
         name='split',
         text='        for i in range(len(sizes)):\n'
              '            t = ctypes.cast(<unsigned long long>coutputs[i], '
              'ctypes.c_void_p)\n'
              '            outputs.append(PyTensor(t))\n'
              '        return outputs')

Fragment(uuid='NORMALIZED-002187',
         path='/python/taso/_cython/core.pyx',
         lineno=470,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def sqrt(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sqrt(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002188',
         path='/python/taso/_cython/core.pyx',
         lineno=470,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def sqrt(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sqrt(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002189',
         path='/python/taso/_cython/core.pyx',
         lineno=471,
         depth=3,
         type='function',
         name='sqrt',
         text='def sqrt(self, *, PyTensor input):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.sqrt(input.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002190',
         path='/python/taso/_cython/core.pyx',
         lineno=475,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def squeeze(self, *, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.squeeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002191',
         path='/python/taso/_cython/core.pyx',
         lineno=475,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def squeeze(self, *, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.squeeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002192',
         path='/python/taso/_cython/core.pyx',
         lineno=476,
         depth=3,
         type='function',
         name='squeeze',
         text='def squeeze(self, *, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.squeeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002193',
         path='/python/taso/_cython/core.pyx',
         lineno=484,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def sub(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_SUB, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002194',
         path='/python/taso/_cython/core.pyx',
         lineno=484,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def sub(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_SUB, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002195',
         path='/python/taso/_cython/core.pyx',
         lineno=485,
         depth=3,
         type='function',
         name='sub',
         text='def sub(self, *, PyTensor x, PyTensor y):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.element(OP_EW_SUB, x.ctensor, y.ctensor)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002196',
         path='/python/taso/_cython/core.pyx',
         lineno=489,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def tanh(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.tanh(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002197',
         path='/python/taso/_cython/core.pyx',
         lineno=489,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def tanh(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.tanh(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002198',
         path='/python/taso/_cython/core.pyx',
         lineno=490,
         depth=3,
         type='function',
         name='tanh',
         text='def tanh(self, PyTensor input, bool inplace = False):\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.tanh(input.ctensor, inplace)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002199',
         path='/python/taso/_cython/core.pyx',
         lineno=494,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def transpose(self, PyTensor input, tuple perm, bool '
              'shuffle = False):\n'
              '        cdef vector[int] cperm\n'
              '        cperm.resize(len(perm))\n'
              '        for i in range(len(perm)):\n'
              '            cperm[i] = perm[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.transpose(input.ctensor, cperm, shuffle)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002200',
         path='/python/taso/_cython/core.pyx',
         lineno=494,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def transpose(self, PyTensor input, tuple perm, bool '
              'shuffle = False):\n'
              '        cdef vector[int] cperm\n'
              '        cperm.resize(len(perm))\n'
              '        for i in range(len(perm)):\n'
              '            cperm[i] = perm[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.transpose(input.ctensor, cperm, shuffle)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002201',
         path='/python/taso/_cython/core.pyx',
         lineno=495,
         depth=3,
         type='function',
         name='transpose',
         text='def transpose(self, PyTensor input, tuple perm, bool shuffle = '
              'False):\n'
              '        cdef vector[int] cperm\n'
              '        cperm.resize(len(perm))\n'
              '        for i in range(len(perm)):\n'
              '            cperm[i] = perm[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.transpose(input.ctensor, cperm, shuffle)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002202',
         path='/python/taso/_cython/core.pyx',
         lineno=503,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def unsqueeze(self, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.unsqueeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002203',
         path='/python/taso/_cython/core.pyx',
         lineno=503,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def unsqueeze(self, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.unsqueeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002204',
         path='/python/taso/_cython/core.pyx',
         lineno=504,
         depth=3,
         type='function',
         name='unsqueeze',
         text='def unsqueeze(self, PyTensor input, tuple axes):\n'
              '        cdef vector[int] caxes\n'
              '        caxes.resize(len(axes))\n'
              '        for i in range(len(axes)):\n'
              '            caxes[i] = axes[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.unsqueeze(input.ctensor, caxes)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002205',
         path='/python/taso/_cython/core.pyx',
         lineno=512,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def new_input(self, *, tuple dims):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        assert (ndim < 16)\n'
              '        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = self.p_graph.new_input(ndim, '
              'dim_array)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002206',
         path='/python/taso/_cython/core.pyx',
         lineno=512,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def new_input(self, *, tuple dims):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        assert (ndim < 16)\n'
              '        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = self.p_graph.new_input(ndim, '
              'dim_array)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002207',
         path='/python/taso/_cython/core.pyx',
         lineno=513,
         depth=3,
         type='function',
         name='new_input',
         text='def new_input(self, *, tuple dims):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        assert (ndim < 16)\n'
              '        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = self.p_graph.new_input(ndim, '
              'dim_array)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002208',
         path='/python/taso/_cython/core.pyx',
         lineno=522,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def new_weight(self, *, tuple dims, data = None):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        cdef array.array arr\n'
              '        if data is None:\n'
              '            data = np.random.rand(*dims)\n'
              '        if isinstance(data, np.ndarray):\n'
              '            assert dims == data.shape\n'
              "            arr = array.array('f', data.flatten().tolist())\n"
              '        else:\n'
              "            arr = array.array('f', data)\n"
              '        assert (ndim < 16)\n')

Fragment(uuid='NORMALIZED-002209',
         path='/python/taso/_cython/core.pyx',
         lineno=522,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def new_weight(self, *, tuple dims, data = None):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        cdef array.array arr\n'
              '        if data is None:\n'
              '            data = np.random.rand(*dims)\n'
              '        if isinstance(data, np.ndarray):\n'
              '            assert dims == data.shape\n'
              "            arr = array.array('f', data.flatten().tolist())\n"
              '        else:\n'
              "            arr = array.array('f', data)\n"
              '        assert (ndim < 16)\n')

Fragment(uuid='NORMALIZED-002210',
         path='/python/taso/_cython/core.pyx',
         lineno=523,
         depth=3,
         type='function',
         name='new_weight',
         text='def new_weight(self, *, tuple dims, data = None):\n'
              '        cdef int ndim = len(dims)\n'
              '        cdef int dim_array[16]\n'
              '        cdef array.array arr\n'
              '        if data is None:\n'
              '            data = np.random.rand(*dims)\n'
              '        if isinstance(data, np.ndarray):\n'
              '            assert dims == data.shape\n'
              "            arr = array.array('f', data.flatten().tolist())\n"
              '        else:\n'
              "            arr = array.array('f', data)\n"
              '        assert (ndim < 16)\n')

Fragment(uuid='NORMALIZED-002211',
         path='/python/taso/_cython/core.pyx',
         lineno=535,
         depth=0,
         type='module',
         name='',
         text='        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.new_weight(ndim, dim_array, arr.data.as_floats)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002212',
         path='/python/taso/_cython/core.pyx',
         lineno=535,
         depth=1,
         type='class',
         name='PyGraph',
         text='        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.new_weight(ndim, dim_array, arr.data.as_floats)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)\n')

Fragment(uuid='NORMALIZED-002213',
         path='/python/taso/_cython/core.pyx',
         lineno=535,
         depth=3,
         type='function',
         name='new_weight',
         text='        for i in range(0, len(dims)):\n'
              '            dim_array[i] = dims[i]\n'
              '        cdef TensorHandle handle = '
              'self.p_graph.new_weight(ndim, dim_array, arr.data.as_floats)\n'
              '        t = ctypes.cast(<unsigned long long>handle, '
              'ctypes.c_void_p)\n'
              '        return PyTensor(t)')

Fragment(uuid='NORMALIZED-002214',
         path='/python/taso/_cython/core.pyx',
         lineno=540,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def optimize(self, float alpha, int budget, bool '
              'print_subst):\n'
              '        cdef Graph* new_graph = self.p_graph.optimize(alpha, '
              'budget, print_subst)\n'
              '        graph = ctypes.cast(<unsigned long long>new_graph, '
              'ctypes.c_void_p)\n'
              '        return PyGraph(graph)\n')

Fragment(uuid='NORMALIZED-002215',
         path='/python/taso/_cython/core.pyx',
         lineno=540,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def optimize(self, float alpha, int budget, bool '
              'print_subst):\n'
              '        cdef Graph* new_graph = self.p_graph.optimize(alpha, '
              'budget, print_subst)\n'
              '        graph = ctypes.cast(<unsigned long long>new_graph, '
              'ctypes.c_void_p)\n'
              '        return PyGraph(graph)\n')

Fragment(uuid='NORMALIZED-002216',
         path='/python/taso/_cython/core.pyx',
         lineno=541,
         depth=3,
         type='function',
         name='optimize',
         text='def optimize(self, float alpha, int budget, bool print_subst):\n'
              '        cdef Graph* new_graph = self.p_graph.optimize(alpha, '
              'budget, print_subst)\n'
              '        graph = ctypes.cast(<unsigned long long>new_graph, '
              'ctypes.c_void_p)\n'
              '        return PyGraph(graph)')

Fragment(uuid='NORMALIZED-002217',
         path='/python/taso/_cython/core.pyx',
         lineno=545,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_operator_list(self):\n'
              '        cdef Op ops[4192]\n'
              '        cdef int numOps = self.p_graph.get_operator_list(ops, '
              '4192)\n'
              '        opList = list()\n'
              '        for i in range(numOps):\n'
              '            #print(ops[i].guid)\n'
              '            opList.append(ops[i])\n'
              '        return opList\n')

Fragment(uuid='NORMALIZED-002218',
         path='/python/taso/_cython/core.pyx',
         lineno=545,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def get_operator_list(self):\n'
              '        cdef Op ops[4192]\n'
              '        cdef int numOps = self.p_graph.get_operator_list(ops, '
              '4192)\n'
              '        opList = list()\n'
              '        for i in range(numOps):\n'
              '            #print(ops[i].guid)\n'
              '            opList.append(ops[i])\n'
              '        return opList\n')

Fragment(uuid='NORMALIZED-002219',
         path='/python/taso/_cython/core.pyx',
         lineno=546,
         depth=3,
         type='function',
         name='get_operator_list',
         text='def get_operator_list(self):\n'
              '        cdef Op ops[4192]\n'
              '        cdef int numOps = self.p_graph.get_operator_list(ops, '
              '4192)\n'
              '        opList = list()\n'
              '        for i in range(numOps):\n'
              '            #print(ops[i].guid)\n'
              '            opList.append(ops[i])\n'
              '        return opList')

Fragment(uuid='NORMALIZED-002220',
         path='/python/taso/_cython/core.pyx',
         lineno=554,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_input_edges(self, Op op):\n'
              '        cdef Edge edges[128];\n'
              '        cdef int numEdges = self.p_graph.get_input_edges(edges, '
              'op.guid)\n'
              '        inEdges = list()\n'
              '        for i in range(numEdges):\n'
              '            inEdges.append(edges[i])\n'
              '        return inEdges\n')

Fragment(uuid='NORMALIZED-002221',
         path='/python/taso/_cython/core.pyx',
         lineno=554,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def get_input_edges(self, Op op):\n'
              '        cdef Edge edges[128];\n'
              '        cdef int numEdges = self.p_graph.get_input_edges(edges, '
              'op.guid)\n'
              '        inEdges = list()\n'
              '        for i in range(numEdges):\n'
              '            inEdges.append(edges[i])\n'
              '        return inEdges\n')

Fragment(uuid='NORMALIZED-002222',
         path='/python/taso/_cython/core.pyx',
         lineno=555,
         depth=3,
         type='function',
         name='get_input_edges',
         text='def get_input_edges(self, Op op):\n'
              '        cdef Edge edges[128];\n'
              '        cdef int numEdges = self.p_graph.get_input_edges(edges, '
              'op.guid)\n'
              '        inEdges = list()\n'
              '        for i in range(numEdges):\n'
              '            inEdges.append(edges[i])\n'
              '        return inEdges')

Fragment(uuid='NORMALIZED-002223',
         path='/python/taso/_cython/core.pyx',
         lineno=562,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_input_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_input_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist\n')

Fragment(uuid='NORMALIZED-002224',
         path='/python/taso/_cython/core.pyx',
         lineno=562,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def get_input_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_input_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist\n')

Fragment(uuid='NORMALIZED-002225',
         path='/python/taso/_cython/core.pyx',
         lineno=563,
         depth=3,
         type='function',
         name='get_input_dims',
         text='def get_input_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_input_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist')

Fragment(uuid='NORMALIZED-002226',
         path='/python/taso/_cython/core.pyx',
         lineno=570,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_weight_value(self, Op op):\n'
              '        dims = self.get_input_dims(op, 0)\n'
              '        data = np.zeros(shape=dims)\n'
              "        val = array.array('f', data.flatten().tolist())\n"
              '        cdef array.array arr = val\n'
              '        self.p_graph.get_weight_value(op.guid, '
              'arr.data.as_floats)\n'
              '        return val\n')

Fragment(uuid='NORMALIZED-002227',
         path='/python/taso/_cython/core.pyx',
         lineno=570,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def get_weight_value(self, Op op):\n'
              '        dims = self.get_input_dims(op, 0)\n'
              '        data = np.zeros(shape=dims)\n'
              "        val = array.array('f', data.flatten().tolist())\n"
              '        cdef array.array arr = val\n'
              '        self.p_graph.get_weight_value(op.guid, '
              'arr.data.as_floats)\n'
              '        return val\n')

Fragment(uuid='NORMALIZED-002228',
         path='/python/taso/_cython/core.pyx',
         lineno=571,
         depth=3,
         type='function',
         name='get_weight_value',
         text='def get_weight_value(self, Op op):\n'
              '        dims = self.get_input_dims(op, 0)\n'
              '        data = np.zeros(shape=dims)\n'
              "        val = array.array('f', data.flatten().tolist())\n"
              '        cdef array.array arr = val\n'
              '        self.p_graph.get_weight_value(op.guid, '
              'arr.data.as_floats)\n'
              '        return val')

Fragment(uuid='NORMALIZED-002229',
         path='/python/taso/_cython/core.pyx',
         lineno=578,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_split_lens(self, Op op):\n'
              '        cdef int lens[128]\n'
              '        cdef int numsplits = '
              'self.p_graph.get_split_lens(op.guid, lens)\n'
              '        lenlist = list()\n'
              '        for i in range(numsplits):\n'
              '            lenlist.append(lens[i])\n'
              '        return lenlist\n')

Fragment(uuid='NORMALIZED-002230',
         path='/python/taso/_cython/core.pyx',
         lineno=578,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def get_split_lens(self, Op op):\n'
              '        cdef int lens[128]\n'
              '        cdef int numsplits = '
              'self.p_graph.get_split_lens(op.guid, lens)\n'
              '        lenlist = list()\n'
              '        for i in range(numsplits):\n'
              '            lenlist.append(lens[i])\n'
              '        return lenlist\n')

Fragment(uuid='NORMALIZED-002231',
         path='/python/taso/_cython/core.pyx',
         lineno=579,
         depth=3,
         type='function',
         name='get_split_lens',
         text='def get_split_lens(self, Op op):\n'
              '        cdef int lens[128]\n'
              '        cdef int numsplits = '
              'self.p_graph.get_split_lens(op.guid, lens)\n'
              '        lenlist = list()\n'
              '        for i in range(numsplits):\n'
              '            lenlist.append(lens[i])\n'
              '        return lenlist')

Fragment(uuid='NORMALIZED-002232',
         path='/python/taso/_cython/core.pyx',
         lineno=586,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_output_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_output_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist\n')

Fragment(uuid='NORMALIZED-002233',
         path='/python/taso/_cython/core.pyx',
         lineno=586,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def get_output_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_output_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist\n')

Fragment(uuid='NORMALIZED-002234',
         path='/python/taso/_cython/core.pyx',
         lineno=587,
         depth=3,
         type='function',
         name='get_output_dims',
         text='def get_output_dims(self, Op op, int idx):\n'
              '        cdef int dims[8]\n'
              '        cdef int ndims = self.p_graph.get_output_dims(op.guid, '
              'dims, idx)\n'
              '        dimlist = list()\n'
              '        for i in range(ndims):\n'
              '            dimlist.append(dims[i])\n'
              '        return dimlist')

Fragment(uuid='NORMALIZED-002235',
         path='/python/taso/_cython/core.pyx',
         lineno=594,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_num_outputs(self, Op op):\n'
              '        return self.p_graph.get_num_outputs(op.guid)\n')

Fragment(uuid='NORMALIZED-002236',
         path='/python/taso/_cython/core.pyx',
         lineno=594,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def get_num_outputs(self, Op op):\n'
              '        return self.p_graph.get_num_outputs(op.guid)\n')

Fragment(uuid='NORMALIZED-002237',
         path='/python/taso/_cython/core.pyx',
         lineno=595,
         depth=3,
         type='function',
         name='get_num_outputs',
         text='def get_num_outputs(self, Op op):\n'
              '        return self.p_graph.get_num_outputs(op.guid)')

Fragment(uuid='NORMALIZED-002238',
         path='/python/taso/_cython/core.pyx',
         lineno=597,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_operator_type(self, Op op):\n'
              '        cdef OpType type = '
              'self.p_graph.get_operator_type(op.guid)\n'
              '        if type in op_table:\n'
              '            return op_table[type]\n'
              '        else:\n'
              "            assert False, 'Undefined type: {}'.format(type)\n"
              '            return "Undefined"\n')

Fragment(uuid='NORMALIZED-002239',
         path='/python/taso/_cython/core.pyx',
         lineno=597,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def get_operator_type(self, Op op):\n'
              '        cdef OpType type = '
              'self.p_graph.get_operator_type(op.guid)\n'
              '        if type in op_table:\n'
              '            return op_table[type]\n'
              '        else:\n'
              "            assert False, 'Undefined type: {}'.format(type)\n"
              '            return "Undefined"\n')

Fragment(uuid='NORMALIZED-002240',
         path='/python/taso/_cython/core.pyx',
         lineno=598,
         depth=3,
         type='function',
         name='get_operator_type',
         text='def get_operator_type(self, Op op):\n'
              '        cdef OpType type = '
              'self.p_graph.get_operator_type(op.guid)\n'
              '        if type in op_table:\n'
              '            return op_table[type]\n'
              '        else:\n'
              "            assert False, 'Undefined type: {}'.format(type)\n"
              '            return "Undefined"')

Fragment(uuid='NORMALIZED-002241',
         path='/python/taso/_cython/core.pyx',
         lineno=605,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def get_operator_attr(self, Op op, attrname):\n'
              '        cdef int kh, kw, sh, sw\n'
              '        cdef PaddingMode pm\n')

Fragment(uuid='NORMALIZED-002242',
         path='/python/taso/_cython/core.pyx',
         lineno=605,
         depth=1,
         type='class',
         name='PyGraph',
         text='\n'
              '    def get_operator_attr(self, Op op, attrname):\n'
              '        cdef int kh, kw, sh, sw\n'
              '        cdef PaddingMode pm\n')

Fragment(uuid='NORMALIZED-002243',
         path='/python/taso/_cython/core.pyx',
         lineno=606,
         depth=3,
         type='function',
         name='get_operator_attr',
         text='def get_operator_attr(self, Op op, attrname):\n'
              '        cdef int kh, kw, sh, sw\n'
              '        cdef PaddingMode pm\n')

Fragment(uuid='NORMALIZED-002244',
         path='/python/taso/_cython/core.pyx',
         lineno=609,
         depth=0,
         type='module',
         name='',
         text="        if attrname == 'kernel_shape':\n"
              '            kh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            return [kh, kw]\n'
              "        elif attrname == 'strides':\n"
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            return [sh, sw]\n'
              "        elif attrname == 'pads':\n"
              '            pm = '
              '<PaddingMode>self.p_graph.get_operator_int_attr(op.guid, '
              'PM_PAD)\n')

Fragment(uuid='NORMALIZED-002245',
         path='/python/taso/_cython/core.pyx',
         lineno=609,
         depth=1,
         type='class',
         name='PyGraph',
         text="        if attrname == 'kernel_shape':\n"
              '            kh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            return [kh, kw]\n'
              "        elif attrname == 'strides':\n"
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            return [sh, sw]\n'
              "        elif attrname == 'pads':\n"
              '            pm = '
              '<PaddingMode>self.p_graph.get_operator_int_attr(op.guid, '
              'PM_PAD)\n')

Fragment(uuid='NORMALIZED-002246',
         path='/python/taso/_cython/core.pyx',
         lineno=609,
         depth=3,
         type='function',
         name='get_operator_attr',
         text="        if attrname == 'kernel_shape':\n"
              '            kh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            return [kh, kw]\n'
              "        elif attrname == 'strides':\n"
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            return [sh, sw]\n'
              "        elif attrname == 'pads':\n"
              '            pm = '
              '<PaddingMode>self.p_graph.get_operator_int_attr(op.guid, '
              'PM_PAD)\n')

Fragment(uuid='NORMALIZED-002247',
         path='/python/taso/_cython/core.pyx',
         lineno=619,
         depth=0,
         type='module',
         name='',
         text='            if pm == PD_MODE_VALID:\n'
              '                return [0, 0, 0, 0]\n'
              '            assert pm == PD_MODE_SAME\n'
              '            dims = self.get_input_dims(op, 0)\n'
              '            assert len(dims) == 4, "input tensor must be 4 dim '
              'for pads attribute"\n'
              '            kh = self.p_graph.get_operator_int_attr(op.gu')

Fragment(uuid='NORMALIZED-002248',
         path='/python/taso/_cython/core.pyx',
         lineno=619,
         depth=1,
         type='class',
         name='PyGraph',
         text='            if pm == PD_MODE_VALID:\n'
              '                return [0, 0, 0, 0]\n'
              '            assert pm == PD_MODE_SAME\n'
              '            dims = self.get_input_dims(op, 0)\n'
              '            assert len(dims) == 4, "input tensor must be 4 dim '
              'for pads attribute"\n'
              '            kh = self.p_graph.get_operator_int_attr(op.gu')

Fragment(uuid='NORMALIZED-002249',
         path='/python/taso/_cython/core.pyx',
         lineno=619,
         depth=3,
         type='function',
         name='get_operator_attr',
         text='            if pm == PD_MODE_VALID:\n'
              '                return [0, 0, 0, 0]\n'
              '            assert pm == PD_MODE_SAME\n'
              '            dims = self.get_input_dims(op, 0)\n'
              '            assert len(dims) == 4, "input tensor must be 4 dim '
              'for pads attribute"\n'
              '            kh = self.p_graph.get_operator_int_attr(op.gu')

Fragment(uuid='NORMALIZED-002250',
         path='/python/taso/_cython/core.pyx',
         lineno=623,
         depth=9,
         type='documentation',
         name='',
         text='input tensor must be 4 dim for pads attribute')

Fragment(uuid='NORMALIZED-002251',
         path='/python/taso/_cython/core.pyx',
         lineno=624,
         depth=0,
         type='module',
         name='',
         text='id, PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            inputH = dims[2]\n'
              '            inputW = dims[3]\n')

Fragment(uuid='NORMALIZED-002252',
         path='/python/taso/_cython/core.pyx',
         lineno=624,
         depth=1,
         type='class',
         name='PyGraph',
         text='id, PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            inputH = dims[2]\n'
              '            inputW = dims[3]\n')

Fragment(uuid='NORMALIZED-002253',
         path='/python/taso/_cython/core.pyx',
         lineno=624,
         depth=3,
         type='function',
         name='get_operator_attr',
         text='id, PM_KERNEL_H)\n'
              '            kw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_KERNEL_W)\n'
              '            sh = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_H)\n'
              '            sw = self.p_graph.get_operator_int_attr(op.guid, '
              'PM_STRIDE_W)\n'
              '            inputH = dims[2]\n'
              '            inputW = dims[3]\n')

Fragment(uuid='NORMALIZED-002254',
         path='/python/taso/_cython/core.pyx',
         lineno=630,
         depth=0,
         type='module',
         name='',
         text='            if inputH % sh == 0:\n'
              '                padH = max(kh - sh, 0)\n'
              '            else:\n'
              '                padH = max(kh - (inputH % sh), 0)\n')

Fragment(uuid='NORMALIZED-002255',
         path='/python/taso/_cython/core.pyx',
         lineno=630,
         depth=1,
         type='class',
         name='PyGraph',
         text='            if inputH % sh == 0:\n'
              '                padH = max(kh - sh, 0)\n'
              '            else:\n'
              '                padH = max(kh - (inputH % sh), 0)\n')

Fragment(uuid='NORMALIZED-002256',
         path='/python/taso/_cython/core.pyx',
         lineno=630,
         depth=3,
         type='function',
         name='get_operator_attr',
         text='            if inputH % sh == 0:\n'
              '                padH = max(kh - sh, 0)\n'
              '            else:\n'
              '                padH = max(kh - (inputH % sh), 0)\n')

Fragment(uuid='NORMALIZED-002257',
         path='/python/taso/_cython/core.pyx',
         lineno=634,
         depth=0,
         type='module',
         name='',
         text='            if inputW % sw == 0:\n'
              '                padW = max(kw - sw, 0)\n'
              '            else:\n'
              '                padW = max(kw - (inputW % sw), 0)\n'
              '            # Ensure padding is same on both sides\n')

Fragment(uuid='NORMALIZED-002258',
         path='/python/taso/_cython/core.pyx',
         lineno=634,
         depth=1,
         type='class',
         name='PyGraph',
         text='            if inputW % sw == 0:\n'
              '                padW = max(kw - sw, 0)\n'
              '            else:\n'
              '                padW = max(kw - (inputW % sw), 0)\n'
              '            # Ensure padding is same on both sides\n')

Fragment(uuid='NORMALIZED-002259',
         path='/python/taso/_cython/core.pyx',
         lineno=634,
         depth=3,
         type='function',
         name='get_operator_attr',
         text='            if inputW % sw == 0:\n'
              '                padW = max(kw - sw, 0)\n'
              '            else:\n'
              '                padW = max(kw - (inputW % sw), 0)\n'
              '            # Ensure padding is same on both sides\n')

Fragment(uuid='NORMALIZED-002260',
         path='/python/taso/_cython/core.pyx',
         lineno=638,
         depth=7,
         type='documentation',
         name='',
         text='# Ensure padding is same on both sides')

Fragment(uuid='NORMALIZED-002261',
         path='/python/taso/_cython/core.pyx',
         lineno=639,
         depth=0,
         type='module',
         name='',
         text='            if padH % 2 == 1:\n                padH += 1\n')

Fragment(uuid='NORMALIZED-002262',
         path='/python/taso/_cython/core.pyx',
         lineno=639,
         depth=1,
         type='class',
         name='PyGraph',
         text='            if padH % 2 == 1:\n                padH += 1\n')

Fragment(uuid='NORMALIZED-002263',
         path='/python/taso/_cython/core.pyx',
         lineno=639,
         depth=3,
         type='function',
         name='get_operator_attr',
         text='            if padH % 2 == 1:\n                padH += 1\n')

Fragment(uuid='NORMALIZED-002264',
         path='/python/taso/_cython/core.pyx',
         lineno=641,
         depth=0,
         type='module',
         name='',
         text='            if padW % 2 == 1:\n'
              '                padW += 1\n'
              '            return [padH // 2, padW // 2, padH - padH // 2, '
              'padW - padW // 2]\n')

Fragment(uuid='NORMALIZED-002265',
         path='/python/taso/_cython/core.pyx',
         lineno=641,
         depth=1,
         type='class',
         name='PyGraph',
         text='            if padW % 2 == 1:\n'
              '                padW += 1\n'
              '            return [padH // 2, padW // 2, padH - padH // 2, '
              'padW - padW // 2]\n')

Fragment(uuid='NORMALIZED-002266',
         path='/python/taso/_cython/core.pyx',
         lineno=641,
         depth=3,
         type='function',
         name='get_operator_attr',
         text='            if padW % 2 == 1:\n'
              '                padW += 1\n'
              '            return [padH // 2, padW // 2, padH - padH // 2, '
              'padW - padW // 2]\n')

Fragment(uuid='NORMALIZED-002267',
         path='/python/taso/_cython/core.pyx',
         lineno=644,
         depth=0,
         type='module',
         name='',
         text="        elif attrname == 'group':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_GROUP)\n')

Fragment(uuid='NORMALIZED-002268',
         path='/python/taso/_cython/core.pyx',
         lineno=644,
         depth=1,
         type='class',
         name='PyGraph',
         text="        elif attrname == 'group':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_GROUP)\n')

Fragment(uuid='NORMALIZED-002269',
         path='/python/taso/_cython/core.pyx',
         lineno=644,
         depth=3,
         type='function',
         name='get_operator_attr',
         text="        elif attrname == 'group':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_GROUP)\n')

Fragment(uuid='NORMALIZED-002270',
         path='/python/taso/_cython/core.pyx',
         lineno=646,
         depth=0,
         type='module',
         name='',
         text="        elif attrname == 'axis':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_AXIS)\n')

Fragment(uuid='NORMALIZED-002271',
         path='/python/taso/_cython/core.pyx',
         lineno=646,
         depth=1,
         type='class',
         name='PyGraph',
         text="        elif attrname == 'axis':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_AXIS)\n')

Fragment(uuid='NORMALIZED-002272',
         path='/python/taso/_cython/core.pyx',
         lineno=646,
         depth=3,
         type='function',
         name='get_operator_attr',
         text="        elif attrname == 'axis':\n"
              '            return self.p_graph.get_operator_int_attr(op.guid, '
              'PM_AXIS)\n')

Fragment(uuid='NORMALIZED-002273',
         path='/python/taso/_cython/core.pyx',
         lineno=648,
         depth=0,
         type='module',
         name='',
         text="        elif attrname == 'split':\n"
              '            return self.get_split_lens(op)\n')

Fragment(uuid='NORMALIZED-002274',
         path='/python/taso/_cython/core.pyx',
         lineno=648,
         depth=1,
         type='class',
         name='PyGraph',
         text="        elif attrname == 'split':\n"
              '            return self.get_split_lens(op)\n')

Fragment(uuid='NORMALIZED-002275',
         path='/python/taso/_cython/core.pyx',
         lineno=648,
         depth=3,
         type='function',
         name='get_operator_attr',
         text="        elif attrname == 'split':\n"
              '            return self.get_split_lens(op)\n')

Fragment(uuid='NORMALIZED-002276',
         path='/python/taso/_cython/core.pyx',
         lineno=650,
         depth=0,
         type='module',
         name='',
         text="        elif attrname == 'perm':\n"
              '            perIdx = '
              'self.p_graph.get_operator_int_attr(op.guid, PM_PERM)\n'
              '            dims = self.get_output_dims(op, 0)\n')

Fragment(uuid='NORMALIZED-002277',
         path='/python/taso/_cython/core.pyx',
         lineno=650,
         depth=1,
         type='class',
         name='PyGraph',
         text="        elif attrname == 'perm':\n"
              '            perIdx = '
              'self.p_graph.get_operator_int_attr(op.guid, PM_PERM)\n'
              '            dims = self.get_output_dims(op, 0)\n')

Fragment(uuid='NORMALIZED-002278',
         path='/python/taso/_cython/core.pyx',
         lineno=650,
         depth=3,
         type='function',
         name='get_operator_attr',
         text="        elif attrname == 'perm':\n"
              '            perIdx = '
              'self.p_graph.get_operator_int_attr(op.guid, PM_PERM)\n'
              '            dims = self.get_output_dims(op, 0)\n')

Fragment(uuid='NORMALIZED-002279',
         path='/python/taso/_cython/core.pyx',
         lineno=653,
         depth=0,
         type='module',
         name='',
         text='            for i in range(len(dims)-1,-1,-1):\n'
              '                dims[i] = perIdx % len(dims)\n'
              '                perIdx = perIdx // len(dims)\n'
              '            perm = tuple(dims)\n'
              '            return perm\n'
              "        elif attrname == 'epsilon':\n"
              '            return '
              'self.p_graph.get_operator_float_attr(op.guid, PM_EPSILON)\n'
              "        elif attrname == 'axes':\n"
              '            # FIXME\n'
              '            return [0]\n'
              '        else:\n'
              "           assert False, 'Internal error: unknow attribute "
              "{}'.format(attrname)\n")

Fragment(uuid='NORMALIZED-002280',
         path='/python/taso/_cython/core.pyx',
         lineno=653,
         depth=1,
         type='class',
         name='PyGraph',
         text='            for i in range(len(dims)-1,-1,-1):\n'
              '                dims[i] = perIdx % len(dims)\n'
              '                perIdx = perIdx // len(dims)\n'
              '            perm = tuple(dims)\n'
              '            return perm\n'
              "        elif attrname == 'epsilon':\n"
              '            return '
              'self.p_graph.get_operator_float_attr(op.guid, PM_EPSILON)\n'
              "        elif attrname == 'axes':\n"
              '            # FIXME\n'
              '            return [0]\n'
              '        else:\n'
              "           assert False, 'Internal error: unknow attribute "
              "{}'.format(attrname)")

Fragment(uuid='NORMALIZED-002281',
         path='/python/taso/_cython/core.pyx',
         lineno=653,
         depth=3,
         type='function',
         name='get_operator_attr',
         text='            for i in range(len(dims)-1,-1,-1):\n'
              '                dims[i] = perIdx % len(dims)\n'
              '                perIdx = perIdx // len(dims)\n'
              '            perm = tuple(dims)\n'
              '            return perm\n'
              "        elif attrname == 'epsilon':\n"
              '            return '
              'self.p_graph.get_operator_float_attr(op.guid, PM_EPSILON)\n'
              "        elif attrname == 'axes':\n"
              '            # FIXME\n'
              '            return [0]\n'
              '        else:\n'
              "           assert False, 'Internal error: unknow attribute "
              "{}'.format(attrname)")

Fragment(uuid='NORMALIZED-002282',
         path='/python/taso/_cython/core.pyx',
         lineno=664,
         depth=11,
         type='documentation',
         name='',
         text='Internal error: unknow attribute {}')

Fragment(uuid='NORMALIZED-002283',
         path='/src/core/activation.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/activation.cc\n')

Fragment(uuid='NORMALIZED-002284',
         path='/src/core/batchnorm.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/batchnorm.cc\n')

Fragment(uuid='NORMALIZED-002285',
         path='/src/core/broadcast_add.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/broadcast_add.cc\n')

Fragment(uuid='NORMALIZED-002286',
         path='/src/core/cast.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/cast.cc\n')

Fragment(uuid='NORMALIZED-002287',
         path='/src/core/concat.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/concat.cc\n')

Fragment(uuid='NORMALIZED-002288',
         path='/src/core/concat.cc',
         lineno=138,
         depth=2,
         type='function_decl',
         name='bitmask',
         text='int bitmask(int n, bool* bits)\n'
              '{\n'
              '  int ret = 0;\n'
              '  for (int i = 0; i < n; i++)\n'
              '    ret = bits[i] ? ret * 2 + 1 : ret * 2;\n'
              '  return ret;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002289',
         path='/src/core/constant.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/constant.cc\n')

Fragment(uuid='NORMALIZED-002290',
         path='/src/core/conv2d.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/conv2d.cc\n')

Fragment(uuid='NORMALIZED-002291',
         path='/src/core/element.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/element.cc\n')

Fragment(uuid='NORMALIZED-002292',
         path='/src/core/elementwise_unary.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/elementwise_unary.cc\n')

Fragment(uuid='NORMALIZED-002293',
         path='/src/core/enlarge.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/enlarge.cc\n')

Fragment(uuid='NORMALIZED-002294',
         path='/src/core/fuse_conv_batchnorm.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/fuse_conv_batchnorm.cc\n')

Fragment(uuid='NORMALIZED-002295',
         path='/src/core/fuse_conv_batchnorm_alpha_var.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/fuse_conv_batchnorm_alpha_var.cc\n')

Fragment(uuid='NORMALIZED-002296',
         path='/src/core/fuse_conv_batchnorm_bias.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/fuse_conv_batchnorm_bias.cc\n')

Fragment(uuid='NORMALIZED-002297',
         path='/src/core/graph_to_trt.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/graph_to_trt.cc\n')

Fragment(uuid='NORMALIZED-002298',
         path='/src/core/matmul.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/matmul.cc\n')

Fragment(uuid='NORMALIZED-002299',
         path='/src/core/merge_gconv.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/merge_gconv.cc\n')

Fragment(uuid='NORMALIZED-002300',
         path='/src/core/mul.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/mul.cc\n')

Fragment(uuid='NORMALIZED-002301',
         path='/src/core/noop.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/noop.cc\n')

Fragment(uuid='NORMALIZED-002302',
         path='/src/core/ops.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/ops.cc\n')

Fragment(uuid='NORMALIZED-002303',
         path='/src/core/ops.cc',
         lineno=20,
         depth=2,
         type='using_directive',
         name='',
         text='')

Fragment(uuid='NORMALIZED-002304',
         path='/src/core/ops.cc',
         lineno=353,
         depth=2,
         type='var_decl',
         name='model_singleton',
         text='static Model* model_singleton = NULL;\n')

Fragment(uuid='NORMALIZED-002305',
         path='/src/core/pad.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/pad.cc\n')

Fragment(uuid='NORMALIZED-002306',
         path='/src/core/pool2d.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/pool2d.cc\n')

Fragment(uuid='NORMALIZED-002307',
         path='/src/core/reduce.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/reduce.cc\n')

Fragment(uuid='NORMALIZED-002308',
         path='/src/core/reshape.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/reshape.cc\n')

Fragment(uuid='NORMALIZED-002309',
         path='/src/core/resize.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/resize.cc\n')

Fragment(uuid='NORMALIZED-002310',
         path='/src/core/rules.proto',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='syntax = "proto2";\n')

Fragment(uuid='NORMALIZED-002311',
         path='/src/core/rules.proto',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/core/rules.proto\n')

Fragment(uuid='NORMALIZED-002312',
         path='/src/core/rules.proto',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\npackage GraphSubst;\n')

Fragment(uuid='NORMALIZED-002313',
         path='/src/core/rules.proto',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'message Parameter {\n'
              '  required int32 key = 1;\n'
              '  required int32 value = 2;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002314',
         path='/src/core/rules.proto',
         lineno=9,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'message Tensor {\n'
              '  required int32 opId = 1;\n'
              '  required int32 tsId = 2;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002315',
         path='/src/core/rules.proto',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'message Operator {\n'
              '  required int32 type = 1;\n'
              '  repeated Tensor input = 2;\n'
              '  repeated Parameter para = 3;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002316',
         path='/src/core/rules.proto',
         lineno=20,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'message MapOutput {\n'
              '  required int32 srcOpId = 1;\n'
              '  required int32 dstOpId = 2;\n'
              '  required int32 srcTsId = 3;\n'
              '  required int32 dstTsId = 4;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002317',
         path='/src/core/rules.proto',
         lineno=27,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'message Rule {\n'
              '  repeated Operator srcOp = 1;\n'
              '  repeated Operator dstOp = 2;\n'
              '  repeated MapOutput mappedOutput = 3;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002318',
         path='/src/core/rules.proto',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\nmessage RuleCollection {\n  repeated Rule rule = 1;\n}\n')

Fragment(uuid='NORMALIZED-002319',
         path='/src/core/shape.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/shape.cc\n')

Fragment(uuid='NORMALIZED-002320',
         path='/src/core/slice.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/slice.cc\n')

Fragment(uuid='NORMALIZED-002321',
         path='/src/core/split.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/split.cc\n')

Fragment(uuid='NORMALIZED-002322',
         path='/src/core/squeeze.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/squeeze.cc\n')

Fragment(uuid='NORMALIZED-002323',
         path='/src/core/substitution.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/substitution.cc\n')

Fragment(uuid='NORMALIZED-002324',
         path='/src/core/substitution.cc',
         lineno=19,
         depth=2,
         type='function_decl',
         name='create_avg_pool_conv',
         text='GraphXfer* create_avg_pool_conv(Model* model)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input = subst->new_tensor();\n'
              '  TensorX weight = subst->new_tensor();\n'
              '  OpX* avg_pool = subst->create_pool2d_avg(input, weight, 1, '
              '1,\n'
              '                                           PD_MODE_SAME,\n'
              '                                           AC_MODE_NONE);\n'
              '  OpX* conv = subst->create_conv2d(input, weight, 1, 1,\n'
              '                                   PD_MODE_SAME,\n'
              '                                   AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  subst->map_output(avg_pool->outputs[0], conv->outputs[0]);\n'
              '  subst->srcOps.push_back(avg_pool);\n'
              '  subst->dstOps.push_back(conv);\n'
              '  return subst;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002325',
         path='/src/core/substitution.cc',
         lineno=36,
         depth=2,
         type='function_decl',
         name='create_two_pools',
         text='GraphXfer* create_two_pools(Model* model)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input = subst->new_tensor();\n'
              '  TensorX w1 = subst->new_tensor();\n'
              '  //TensorX w2 = subst->new_tensor();\n'
              '  OpX* pool1 = subst->create_pool2d_avg(input, w1, 1, 1,\n'
              '                                        PD_MODE_SAME,\n'
              '                                        AC_MODE_NONE);\n'
              '  //OpX* pool2 = subst->create_pool2d_avg(input, w2, 1, 1,\n'
              '  //                                      PD_MODE_SAME,\n'
              '  //                                      AC_MODE_NONE);\n'
              '  //OpX* add = subst->create_element(pool1->outputs[0], '
              'pool2->outputs[0],\n'
              '  //                                 OP_EW_ADD);\n'
              '  OpX* pool3 = subst->create_conv2d(input, w1, 1, 1,\n'
              '                                    PD_MODE_SAME,\n'
              '                                    AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  subst->map_output(pool1->outputs[0], pool3->outputs[0]);\n'
              '  subst->srcOps.push_back(pool1);\n'
              '  //subst->srcOps.push_back(pool2);\n'
              '  //subst->srcOps.push_back(add);\n'
              '  subst->dstOps.push_back(pool3);\n'
              '  return subst;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002326',
         path='/src/core/substitution.cc',
         lineno=181,
         depth=2,
         type='function_decl',
         name='create_merge_seperable_convs',
         text='GraphXfer* create_merge_seperable_convs(Model* model)\n'
              '{\n'
              '  GraphXfer* subst = new GraphXfer(model);\n'
              '  TensorX input1 = subst->new_tensor();\n'
              '  TensorX input2 = subst->new_tensor();\n'
              '  TensorX w1 = subst->new_tensor();\n'
              '  TensorX w2 = subst->new_tensor();\n'
              '  TensorX w3 = subst->new_tensor();\n'
              '  TensorX w4 = subst->new_tensor();\n'
              '  OpX* conv1 = subst->create_conv2d(input1, w1, 1, 1, '
              'PD_MODE_SAME,\n'
              '                                    AC_MODE_NONE);\n'
              '  OpX* conv2 = subst->create_conv2d(input2, w2, 1, 1, '
              'PD_MODE_SAME,\n'
              '                                    AC_MODE_NONE);\n'
              '  OpX* conv3 = subst->create_conv2d(conv1->outputs[0], w3, 1, '
              '1,\n'
              '                                    PD_MODE_SAME, '
              'AC_MODE_NONE);\n'
              '  OpX* conv4 = subst->create_conv2d(conv2->outputs[0], w4, 1, '
              '1,\n'
              '                                    PD_MODE_SAME, '
              'AC_MODE_NONE);\n'
              '  OpX* add = subst->create_element(conv3->outputs[0], '
              'conv4->outputs[0],\n'
              '                                   OP_EW_ADD);\n'
              '  OpX* concatIn = subst->create_concat(1/*axis*/, 4/*dim*/, '
              'input1, input2, false/*isSrc*/);\n'
              '  OpX* concat1 = subst->create_concat(0/*axis*/, 4/*dim*/, w1, '
              'w2, false/*isSrc*/);\n'
              '  OpX* concat2 = subst->create_concat(1/*axis*/, 4/*dim*/, w3, '
              'w4, false/*isSrc*/);\n'
              '  OpX* conv5 = subst->create_conv2d(concatIn->outputs[0], '
              'concat1->outputs[0], 1, 1,\n'
              '                                    PD_MODE_SAME, AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  OpX* conv6 = subst->create_conv2d(conv5->outputs[0], '
              'concat2->outputs[0], 1, 1,\n'
              '                                    PD_MODE_SAME,AC_MODE_NONE, '
              'false/*isSrc*/);\n'
              '  subst->map_output(add->outputs[0], conv6->outputs[0]);\n'
              '  subst->srcOps.push_back(conv1);\n'
              '  subst->srcOps.push_back(conv2);\n'
              '  subst->srcOps.push_back(conv3);\n'
              '  subst->srcOps.push_back(conv4);\n'
              '  subst->srcOps.push_back(add);\n'
              '  subst->dstOps.push_back(concatIn);\n'
              '  subst->dstOps.push_back(concat1);\n'
              '  subst->dstOps.push_back(concat2);\n'
              '  subst->dstOps.push_back(conv5);\n'
              '  subst->dstOps.push_back(conv6);\n'
              '  return subst;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002327',
         path='/src/core/substitution.cc',
         lineno=221,
         depth=2,
         type='function_decl',
         name='get_parameter_from_pb',
         text='bool get_parameter_from_pb(const GraphSubst::Operator& pbOp,\n'
              '                           PMParameter pm,\n'
              '                           int &value)\n'
              '{\n'
              '  for (int i = 0; i < pbOp.para_size(); i++)\n'
              '    if (pbOp.para(i).key() == pm) {\n'
              '      value = pbOp.para(i).value();\n'
              '      return true;\n'
              '    }\n'
              '  return false;  \n'
              '}\n')

Fragment(uuid='NORMALIZED-002328',
         path='/src/core/substitution.cc',
         lineno=399,
         depth=2,
         type='function_decl',
         name='to_tn_parameter',
         text='TNParameter to_tn_parameter(bool isInput, int n)\n'
              '{\n'
              '  switch (n) {\n'
              '    case 0: return isInput ? IN_0 : OU_0;\n'
              '    case 1: return isInput ? IN_1 : OU_1;\n'
              '    case 2: return isInput ? IN_2 : OU_2;\n'
              '    case 3: return isInput ? IN_3 : OU_3;\n'
              '    case 4: return isInput ? IN_4 : OU_4;\n'
              '    case 5: return isInput ? IN_5 : OU_5;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  assert(false);\n'
              '}\n')

Fragment(uuid='NORMALIZED-002329',
         path='/src/core/substitution.cc',
         lineno=414,
         depth=2,
         type='function_decl',
         name='to_dim_parameter',
         text='DIMParameter to_dim_parameter(int n)\n'
              '{\n'
              '  switch (n) {\n'
              '    case 0: return DIM_0;\n'
              '    case 1: return DIM_1;\n'
              '    case 2: return DIM_2;\n'
              '    case 3: return DIM_3;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  assert(false);\n'
              '}\n')

Fragment(uuid='NORMALIZED-002330',
         path='/src/core/topk.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/topk.cc\n')

Fragment(uuid='NORMALIZED-002331',
         path='/src/core/transpose.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/transpose.cc\n')

Fragment(uuid='NORMALIZED-002332',
         path='/src/core/transpose.cc',
         lineno=19,
         depth=2,
         type='function_decl',
         name='permutation_to_index',
         text='int permutation_to_index(const std::vector<int>& perm)\n'
              '{\n'
              '  // check perm\n'
              '  for (size_t i = 0; i < perm.size(); i++) {\n'
              '    assert(perm[i] >= 0 && perm[i] < (int)perm.size());\n'
              '    for (size_t j = i + 1; j < perm.size(); j++)\n'
              '      assert(perm[i] != perm[j]);\n'
              '  }\n'
              '  int idx = 0;\n'
              '  for (size_t i = 0; i < perm.size(); i++)\n'
              '    idx = idx * perm.size() + perm[i];\n'
              '  return idx;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002333',
         path='/src/core/unsqueeze.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/unsqueeze.cc\n')

Fragment(uuid='NORMALIZED-002334',
         path='/src/core/where.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/core/where.cc\n')

Fragment(uuid='NORMALIZED-002335',
         path='/src/cudnn/activation_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-002336',
         path='/src/cudnn/activation_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/activation_kernel.cu\n')

Fragment(uuid='NORMALIZED-002337',
         path='/src/cudnn/activation_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-002338',
         path='/src/cudnn/activation_kernel.cu',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Activation::map(void)')

Fragment(uuid='NORMALIZED-002339',
         path='/src/cudnn/activation_kernel.cu',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002340',
         path='/src/cudnn/activation_kernel.cu',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n  // create descriptors')

Fragment(uuid='NORMALIZED-002341',
         path='/src/cudnn/activation_kernel.cu',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));')

Fragment(uuid='NORMALIZED-002342',
         path='/src/cudnn/activation_kernel.cu',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n  helperSetTensorDescriptor(inputs[0], inputTensor);')

Fragment(uuid='NORMALIZED-002343',
         path='/src/cudnn/activation_kernel.cu',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));')

Fragment(uuid='NORMALIZED-002344',
         path='/src/cudnn/activation_kernel.cu',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudnnActivationMode_t mode;')

Fragment(uuid='NORMALIZED-002345',
         path='/src/cudnn/activation_kernel.cu',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n  switch (type) {')

Fragment(uuid='NORMALIZED-002346',
         path='/src/cudnn/activation_kernel.cu',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_RELU:')

Fragment(uuid='NORMALIZED-002347',
         path='/src/cudnn/activation_kernel.cu',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_LEAKYRELU:')

Fragment(uuid='NORMALIZED-002348',
         path='/src/cudnn/activation_kernel.cu',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n      mode = CUDNN_ACTIVATION_RELU;')

Fragment(uuid='NORMALIZED-002349',
         path='/src/cudnn/activation_kernel.cu',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-002350',
         path='/src/cudnn/activation_kernel.cu',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_SIGMOID:')

Fragment(uuid='NORMALIZED-002351',
         path='/src/cudnn/activation_kernel.cu',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n      mode = CUDNN_ACTIVATION_SIGMOID;')

Fragment(uuid='NORMALIZED-002352',
         path='/src/cudnn/activation_kernel.cu',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-002353',
         path='/src/cudnn/activation_kernel.cu',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_TANH:')

Fragment(uuid='NORMALIZED-002354',
         path='/src/cudnn/activation_kernel.cu',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n      mode = CUDNN_ACTIVATION_TANH;')

Fragment(uuid='NORMALIZED-002355',
         path='/src/cudnn/activation_kernel.cu',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-002356',
         path='/src/cudnn/activation_kernel.cu',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n    default:')

Fragment(uuid='NORMALIZED-002357',
         path='/src/cudnn/activation_kernel.cu',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n      assert(false);')

Fragment(uuid='NORMALIZED-002358',
         path='/src/cudnn/activation_kernel.cu',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002359',
         path='/src/cudnn/activation_kernel.cu',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,')

Fragment(uuid='NORMALIZED-002360',
         path='/src/cudnn/activation_kernel.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_NOT_PROPAGATE_NAN, 0.0));')

Fragment(uuid='NORMALIZED-002361',
         path='/src/cudnn/activation_kernel.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (!inPlace) {')

Fragment(uuid='NORMALIZED-002362',
         path='/src/cudnn/activation_kernel.cu',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n    size_t outputSize = sizeof(DATATYPE);')

Fragment(uuid='NORMALIZED-002363',
         path='/src/cudnn/activation_kernel.cu',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int i = 0; i < inputs[0].numDim; i++)')

Fragment(uuid='NORMALIZED-002364',
         path='/src/cudnn/activation_kernel.cu',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n      outputSize *= inputs[0].dim[i];')

Fragment(uuid='NORMALIZED-002365',
         path='/src/cudnn/activation_kernel.cu',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));')

Fragment(uuid='NORMALIZED-002366',
         path='/src/cudnn/activation_kernel.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-002367',
         path='/src/cudnn/activation_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n    outputs[0].data_ptr = inputs[0].data_ptr;')

Fragment(uuid='NORMALIZED-002368',
         path='/src/cudnn/activation_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002369',
         path='/src/cudnn/activation_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002370',
         path='/src/cudnn/activation_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002371',
         path='/src/cudnn/activation_kernel.cu',
         lineno=52,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Activation::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  if (!inPlace) {\n'
              '    checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-002372',
         path='/src/cudnn/activation_kernel.cu',
         lineno=61,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Activation::forward(bool block)\n'
              '{\n'
              '  const float alpha = 1.0f;\n'
              '  const float beta = 0.0f;\n'
              '  checkCUDNN(cudnnActivationForward(model->dnn, actiDesc,\n'
              '      &alpha, inputTensor, inputs[0].data_ptr,\n'
              '      &beta, inputTensor, outputs[0].data_ptr));\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-002373',
         path='/src/cudnn/activation_kernel.cu',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Model::measure_activation_cost(Activation* act)')

Fragment(uuid='NORMALIZED-002374',
         path='/src/cudnn/activation_kernel.cu',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002375',
         path='/src/cudnn/activation_kernel.cu',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-002376',
         path='/src/cudnn/activation_kernel.cu',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-002377',
         path='/src/cudnn/activation_kernel.cu',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n  helperSetTensorDescriptor(act->inputs[0], inputTensor);')

Fragment(uuid='NORMALIZED-002378',
         path='/src/cudnn/activation_kernel.cu',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudnnActivationMode_t mode;')

Fragment(uuid='NORMALIZED-002379',
         path='/src/cudnn/activation_kernel.cu',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n  switch (act->type) {')

Fragment(uuid='NORMALIZED-002380',
         path='/src/cudnn/activation_kernel.cu',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_RELU:')

Fragment(uuid='NORMALIZED-002381',
         path='/src/cudnn/activation_kernel.cu',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_LEAKYRELU:')

Fragment(uuid='NORMALIZED-002382',
         path='/src/cudnn/activation_kernel.cu',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n      mode = CUDNN_ACTIVATION_RELU;')

Fragment(uuid='NORMALIZED-002383',
         path='/src/cudnn/activation_kernel.cu',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-002384',
         path='/src/cudnn/activation_kernel.cu',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_SIGMOID:')

Fragment(uuid='NORMALIZED-002385',
         path='/src/cudnn/activation_kernel.cu',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n      mode = CUDNN_ACTIVATION_SIGMOID;')

Fragment(uuid='NORMALIZED-002386',
         path='/src/cudnn/activation_kernel.cu',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-002387',
         path='/src/cudnn/activation_kernel.cu',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_TANH:')

Fragment(uuid='NORMALIZED-002388',
         path='/src/cudnn/activation_kernel.cu',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n      mode = CUDNN_ACTIVATION_TANH;')

Fragment(uuid='NORMALIZED-002389',
         path='/src/cudnn/activation_kernel.cu',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-002390',
         path='/src/cudnn/activation_kernel.cu',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n    default:')

Fragment(uuid='NORMALIZED-002391',
         path='/src/cudnn/activation_kernel.cu',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n      assert(false);')

Fragment(uuid='NORMALIZED-002392',
         path='/src/cudnn/activation_kernel.cu',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002393',
         path='/src/cudnn/activation_kernel.cu',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,')

Fragment(uuid='NORMALIZED-002394',
         path='/src/cudnn/activation_kernel.cu',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_NOT_PROPAGATE_NAN, 0.0));')

Fragment(uuid='NORMALIZED-002395',
         path='/src/cudnn/activation_kernel.cu',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-002396',
         path='/src/cudnn/activation_kernel.cu',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-002397',
         path='/src/cudnn/activation_kernel.cu',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < REPEAT_TIMES; i++) {')

Fragment(uuid='NORMALIZED-002398',
         path='/src/cudnn/activation_kernel.cu',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (act->inPlace) {')

Fragment(uuid='NORMALIZED-002399',
         path='/src/cudnn/activation_kernel.cu',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDNN(cudnnActivationForward(dnn, actiDesc,')

Fragment(uuid='NORMALIZED-002400',
         path='/src/cudnn/activation_kernel.cu',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n          &alpha, inputTensor, inputPtr,')

Fragment(uuid='NORMALIZED-002401',
         path='/src/cudnn/activation_kernel.cu',
         lineno=100,
         depth=2,
         type='documentation',
         name='',
         text='\n          &beta, inputTensor, inputPtr));')

Fragment(uuid='NORMALIZED-002402',
         path='/src/cudnn/activation_kernel.cu',
         lineno=101,
         depth=2,
         type='documentation',
         name='',
         text='\n    } else {')

Fragment(uuid='NORMALIZED-002403',
         path='/src/cudnn/activation_kernel.cu',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDNN(cudnnActivationForward(dnn, actiDesc,')

Fragment(uuid='NORMALIZED-002404',
         path='/src/cudnn/activation_kernel.cu',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\n          &alpha, inputTensor, inputPtr,')

Fragment(uuid='NORMALIZED-002405',
         path='/src/cudnn/activation_kernel.cu',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n          &beta, inputTensor, outputPtr));')

Fragment(uuid='NORMALIZED-002406',
         path='/src/cudnn/activation_kernel.cu',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002407',
         path='/src/cudnn/activation_kernel.cu',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002408',
         path='/src/cudnn/activation_kernel.cu',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-002409',
         path='/src/cudnn/activation_kernel.cu',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-002410',
         path='/src/cudnn/activation_kernel.cu',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n  float milliseconds;')

Fragment(uuid='NORMALIZED-002411',
         path='/src/cudnn/activation_kernel.cu',
         lineno=110,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-002412',
         path='/src/cudnn/activation_kernel.cu',
         lineno=111,
         depth=2,
         type='documentation',
         name='',
         text='\n  act->runtime = milliseconds / REPEAT_TIMES;')

Fragment(uuid='NORMALIZED-002413',
         path='/src/cudnn/activation_kernel.cu',
         lineno=112,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (print_cost)')

Fragment(uuid='NORMALIZED-002414',
         path='/src/cudnn/activation_kernel.cu',
         lineno=113,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    printf("  measure[Activation]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",')

Fragment(uuid='NORMALIZED-002415',
         path='/src/cudnn/activation_kernel.cu',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '           act->inputs[0].dim[0], act->inputs[0].dim[1], '
              'act->inputs[0].dim[2],')

Fragment(uuid='NORMALIZED-002416',
         path='/src/cudnn/activation_kernel.cu',
         lineno=115,
         depth=2,
         type='documentation',
         name='',
         text='\n           act->inputs[0].dim[3], act->type, act->runtime);')

Fragment(uuid='NORMALIZED-002417',
         path='/src/cudnn/activation_kernel.cu',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002418',
         path='/src/cudnn/activation_kernel.cu',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002419',
         path='/src/cudnn/activation_kernel.cu',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002420',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-002421',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/batchnorm_kernel.cu\n')

Fragment(uuid='NORMALIZED-002422',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-002423',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'float BatchNorm::get_min_epsilon(void)\n'
              '{\n'
              '  return CUDNN_BN_MIN_EPSILON;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002424',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid BatchNorm::map(void)')

Fragment(uuid='NORMALIZED-002425',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002426',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(inputs[0].numDim == 4);')

Fragment(uuid='NORMALIZED-002427',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n  // create descriptors')

Fragment(uuid='NORMALIZED-002428',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));')

Fragment(uuid='NORMALIZED-002429',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&biasTensor));')

Fragment(uuid='NORMALIZED-002430',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));')

Fragment(uuid='NORMALIZED-002431',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputN = inputs[0].dim[0];')

Fragment(uuid='NORMALIZED-002432',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputC = inputs[0].dim[1];')

Fragment(uuid='NORMALIZED-002433',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputH = inputs[0].dim[2];')

Fragment(uuid='NORMALIZED-002434',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputW = inputs[0].dim[3];')

Fragment(uuid='NORMALIZED-002435',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002436',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));')

Fragment(uuid='NORMALIZED-002437',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002438',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));')

Fragment(uuid='NORMALIZED-002439',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002440',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, 1, inputC, 1, 1));')

Fragment(uuid='NORMALIZED-002441',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n#ifdef DO_TRAINING')

Fragment(uuid='NORMALIZED-002442',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDA(cudaMalloc(&runningMean, sizeof(DATATYPE) * '
              'inputC));')

Fragment(uuid='NORMALIZED-002443',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDA(cudaMalloc(&runningVar, sizeof(DATATYPE) * inputC));')

Fragment(uuid='NORMALIZED-002444',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&saveMean, sizeof(DATATYPE) * inputC));')

Fragment(uuid='NORMALIZED-002445',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&saveVar, sizeof(DATATYPE) * inputC));')

Fragment(uuid='NORMALIZED-002446',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&biasPtr, sizeof(DATATYPE) * inputC));')

Fragment(uuid='NORMALIZED-002447',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&scalePtr, sizeof(DATATYPE) * inputC));')

Fragment(uuid='NORMALIZED-002448',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n   initialize scale to ones and bias to zeros')

Fragment(uuid='NORMALIZED-002449',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002450',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n    scalePtr, inputC, 1.0f);')

Fragment(uuid='NORMALIZED-002451',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002452',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n    biasPtr, inputC, 0.0f);')

Fragment(uuid='NORMALIZED-002453',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002454',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n    runningMean, inputC, 0.0f);')

Fragment(uuid='NORMALIZED-002455',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002456',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n    runningVar, inputC, 0.0f);')

Fragment(uuid='NORMALIZED-002457',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n#endif')

Fragment(uuid='NORMALIZED-002458',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();')

Fragment(uuid='NORMALIZED-002459',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));')

Fragment(uuid='NORMALIZED-002460',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002461',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002462',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=62,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void BatchNorm::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(biasTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '#ifdef DO_TRAINING\n'
              '  checkCUDA(cudaFree(runningMean));\n'
              '  checkCUDA(cudaFree(runningVar));\n'
              '  checkCUDA(cudaFree(saveMean));\n'
              '  checkCUDA(cudaFree(saveVar));\n'
              '  checkCUDA(cudaFree(biasPtr));\n'
              '  checkCUDA(cudaFree(scalePtr));\n'
              '#endif\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-002463',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid BatchNorm::forward(bool block)')

Fragment(uuid='NORMALIZED-002464',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002465',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-002466',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-002467',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float eps = epsilon;')

Fragment(uuid='NORMALIZED-002468',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudnnBatchNormMode_t mode = CUDNN_BATCHNORM_SPATIAL;')

Fragment(uuid='NORMALIZED-002469',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n  //int inputC = inputs[0].dim[1];')

Fragment(uuid='NORMALIZED-002470',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n#ifdef DO_TRAINING ')

Fragment(uuid='NORMALIZED-002471',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (model->isTraining) {')

Fragment(uuid='NORMALIZED-002472',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n    assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002473',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n      runningMean, inputC, 0.0f);')

Fragment(uuid='NORMALIZED-002474',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n    assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002475',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n      runningVar, inputC, 0.0f);')

Fragment(uuid='NORMALIZED-002476',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnBatchNormalizationForwardTraining(')

Fragment(uuid='NORMALIZED-002477',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      model->dnn, mode, &alpha, &beta, inputTensor, '
              'inputs[0].data_ptr,')

Fragment(uuid='NORMALIZED-002478',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      outputTensor, outputs[0].data_ptr, biasTensor, scalePtr, '
              'biasPtr,')

Fragment(uuid='NORMALIZED-002479',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n      1.0, runningMean, runningVar, eps, saveMean, saveVar));')

Fragment(uuid='NORMALIZED-002480',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-002481',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n#endif')

Fragment(uuid='NORMALIZED-002482',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnBatchNormalizationForwardInference(')

Fragment(uuid='NORMALIZED-002483',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      model->dnn, mode, &alpha, &beta, inputTensor, '
              'inputs[0].data_ptr,')

Fragment(uuid='NORMALIZED-002484',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      outputTensor, outputs[0].data_ptr, biasTensor, '
              'inputs[1].data_ptr, inputs[2].data_ptr,')

Fragment(uuid='NORMALIZED-002485',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=100,
         depth=2,
         type='documentation',
         name='',
         text='\n      inputs[3].data_ptr, inputs[4].data_ptr, eps));')

Fragment(uuid='NORMALIZED-002486',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=101,
         depth=2,
         type='documentation',
         name='',
         text='\n#ifdef DO_TRAINING ')

Fragment(uuid='NORMALIZED-002487',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002488',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\n#endif')

Fragment(uuid='NORMALIZED-002489',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (block)')

Fragment(uuid='NORMALIZED-002490',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-002491',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002492',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002493',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Model::measure_batchnorm_cost(BatchNorm* bn)')

Fragment(uuid='NORMALIZED-002494',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002495',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=110,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-002496',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=111,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-002497',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=112,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputN = bn->inputs[0].dim[0];')

Fragment(uuid='NORMALIZED-002498',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=113,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputC = bn->inputs[0].dim[1];')

Fragment(uuid='NORMALIZED-002499',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputH = bn->inputs[0].dim[2];')

Fragment(uuid='NORMALIZED-002500',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=115,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputW = bn->inputs[0].dim[3];')

Fragment(uuid='NORMALIZED-002501',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudnnBatchNormMode_t mode = CUDNN_BATCHNORM_SPATIAL;')

Fragment(uuid='NORMALIZED-002502',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002503',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));')

Fragment(uuid='NORMALIZED-002504',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=119,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002505',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=120,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));')

Fragment(uuid='NORMALIZED-002506',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=121,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002507',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=122,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, 1, inputC, 1, 1));')

Fragment(uuid='NORMALIZED-002508',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=123,
         depth=2,
         type='documentation',
         name='',
         text='\n#ifdef DO_TRAINING')

Fragment(uuid='NORMALIZED-002509',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=124,
         depth=2,
         type='documentation',
         name='',
         text='\n  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002510',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=125,
         depth=2,
         type='documentation',
         name='',
         text='\n    scalePtr, inputC, 0.5f);')

Fragment(uuid='NORMALIZED-002511',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=126,
         depth=2,
         type='documentation',
         name='',
         text='\n  assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002512',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=127,
         depth=2,
         type='documentation',
         name='',
         text='\n    biasPtr, inputC, 0.5f);')

Fragment(uuid='NORMALIZED-002513',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=128,
         depth=2,
         type='documentation',
         name='',
         text='\n#endif')

Fragment(uuid='NORMALIZED-002514',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=129,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-002515',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=130,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-002516',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=131,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < REPEAT_TIMES; i++) {')

Fragment(uuid='NORMALIZED-002517',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=132,
         depth=2,
         type='documentation',
         name='',
         text='\n#ifdef DO_TRAINING')

Fragment(uuid='NORMALIZED-002518',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=133,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (isTraining) {')

Fragment(uuid='NORMALIZED-002519',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=134,
         depth=2,
         type='documentation',
         name='',
         text='\n      assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002520',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=135,
         depth=2,
         type='documentation',
         name='',
         text='\n        runningMean, inputC, 0.0f);')

Fragment(uuid='NORMALIZED-002521',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=136,
         depth=2,
         type='documentation',
         name='',
         text='\n      assign_kernel<<<GET_BLOCKS(inputC), CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002522',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=137,
         depth=2,
         type='documentation',
         name='',
         text='\n        runningVar, inputC, 0.0f);')

Fragment(uuid='NORMALIZED-002523',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=138,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDNN(cudnnBatchNormalizationForwardTraining(')

Fragment(uuid='NORMALIZED-002524',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=139,
         depth=2,
         type='documentation',
         name='',
         text='\n        dnn, mode, &alpha, &beta, inputTensor, inputPtr,')

Fragment(uuid='NORMALIZED-002525',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=140,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        outputTensor, outputPtr, biasTensor, scalePtr, biasPtr,')

Fragment(uuid='NORMALIZED-002526',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=141,
         depth=2,
         type='documentation',
         name='',
         text='\n        1.0, runningMean, runningVar, CUDNN_BN_MIN_EPSILON,')

Fragment(uuid='NORMALIZED-002527',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=142,
         depth=2,
         type='documentation',
         name='',
         text='\n        saveMean, saveVar));')

Fragment(uuid='NORMALIZED-002528',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=143,
         depth=2,
         type='documentation',
         name='',
         text='\n    } else {')

Fragment(uuid='NORMALIZED-002529',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=144,
         depth=2,
         type='documentation',
         name='',
         text='\n#endif')

Fragment(uuid='NORMALIZED-002530',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDNN(cudnnBatchNormalizationForwardInference(')

Fragment(uuid='NORMALIZED-002531',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\n        dnn, mode, &alpha, &beta, inputTensor, inputPtr,')

Fragment(uuid='NORMALIZED-002532',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        outputTensor, outputPtr, biasTensor, scalePtr, biasPtr,')

Fragment(uuid='NORMALIZED-002533',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\n        runningMean, runningVar, CUDNN_BN_MIN_EPSILON));')

Fragment(uuid='NORMALIZED-002534',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n#ifdef DO_TRAINING')

Fragment(uuid='NORMALIZED-002535',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002536',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\n#endif')

Fragment(uuid='NORMALIZED-002537',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002538',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-002539',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-002540',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n  float milliseconds;')

Fragment(uuid='NORMALIZED-002541',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-002542',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n  bn->runtime = milliseconds / REPEAT_TIMES;')

Fragment(uuid='NORMALIZED-002543',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (print_cost)')

Fragment(uuid='NORMALIZED-002544',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=159,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    printf("measure[BatchNorm]: i(%d %d %d %d) cost(%.4lf)\\n",')

Fragment(uuid='NORMALIZED-002545',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=160,
         depth=2,
         type='documentation',
         name='',
         text='\n           inputN, inputC, inputH, inputW, bn->runtime);')

Fragment(uuid='NORMALIZED-002546',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=161,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002547',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=162,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002548',
         path='/src/cudnn/batchnorm_kernel.cu',
         lineno=163,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002549',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-002550',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/broadcast_add_kernel.cu\n')

Fragment(uuid='NORMALIZED-002551',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-002552',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '__global__\n'
              'void broadcast_add_kernel(int batch,\n'
              '                          int channel,\n'
              '                          int h_w_size,\n'
              '                          DATATYPE* dst_ptr,\n'
              '                          DATATYPE* _data,\n'
              '                          DATATYPE* _bias)\n'
              '{\n'
              '  int volume = batch * channel * h_w_size;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int channel_idx = i % h_w_size;\n'
              '    dst_ptr[i] = _data[i] + _bias[channel_idx];\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-002553',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void BroadcastAdd::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-002554',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=43,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void BroadcastAdd::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-002555',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid BroadcastAdd::forward(bool block)')

Fragment(uuid='NORMALIZED-002556',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002557',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n  int batch = outputs[0].dim[0];')

Fragment(uuid='NORMALIZED-002558',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  int channel = outputs[0].dim[1];')

Fragment(uuid='NORMALIZED-002559',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n  int h_w_size = outputs[0].dim[2] * outputs[0].dim[3];')

Fragment(uuid='NORMALIZED-002560',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* _data_ptr = (DATATYPE*) inputs[0].data_ptr;')

Fragment(uuid='NORMALIZED-002561',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* _bias_ptr = (DATATYPE*) inputs[1].data_ptr;')

Fragment(uuid='NORMALIZED-002562',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  broadcast_add_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002563',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      batch, channel, h_w_size, (DATATYPE*)outputs[0].data_ptr,')

Fragment(uuid='NORMALIZED-002564',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n      _data_ptr, _bias_ptr);')

Fragment(uuid='NORMALIZED-002565',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (block)')

Fragment(uuid='NORMALIZED-002566',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-002567',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002568',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002569',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002570',
         path='/src/cudnn/broadcast_add_kernel.cu',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002571',
         path='/src/cudnn/cast_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-002572',
         path='/src/cudnn/cast_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/cast_kernel.cu\n')

Fragment(uuid='NORMALIZED-002573',
         path='/src/cudnn/cast_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-002574',
         path='/src/cudnn/cast_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Cast::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n')

Fragment(uuid='NORMALIZED-002575',
         path='/src/cudnn/cast_kernel.cu',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Cast::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-002576',
         path='/src/cudnn/cast_kernel.cu',
         lineno=29,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Cast::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-002577',
         path='/src/cudnn/cast_kernel.cu',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_cast_cost(Cast* cast)\n'
              '{\n'
              '  cast->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[Cast]: type(%d) cost(%.4lf)\\n",\n'
              '           cast->type, cast->runtime);\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-002578',
         path='/src/cudnn/concat_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-002579',
         path='/src/cudnn/concat_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/concat_kernel.cu\n')

Fragment(uuid='NORMALIZED-002580',
         path='/src/cudnn/concat_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-002581',
         path='/src/cudnn/concat_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Concat::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-002582',
         path='/src/cudnn/concat_kernel.cu',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Concat::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-002583',
         path='/src/cudnn/concat_kernel.cu',
         lineno=30,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '__global__\n'
              'void assign_with_stride(DATATYPE* dst,\n'
              '                        const DATATYPE* src,\n'
              '                        int num_blocks,\n'
              '                        int dst_blk_size,\n'
              '                        int src_blk_size)\n'
              '{\n'
              '  assert(src_blk_size <= dst_blk_size);\n'
              '  CUDA_KERNEL_LOOP(i, num_blocks * src_blk_size)\n'
              '  {\n'
              '    int blk_idx = i / src_blk_size;\n'
              '    int blk_offset = i % src_blk_size;\n'
              '    int src_offset = blk_idx * src_blk_size + blk_offset;\n'
              '    int dst_offset = blk_idx * dst_blk_size + blk_offset;\n'
              '    dst[dst_offset] = src[src_offset];\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-002584',
         path='/src/cudnn/concat_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Concat::forward(bool block)')

Fragment(uuid='NORMALIZED-002585',
         path='/src/cudnn/concat_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002586',
         path='/src/cudnn/concat_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n  int offset = 0;')

Fragment(uuid='NORMALIZED-002587',
         path='/src/cudnn/concat_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < numInputs; i++) {')

Fragment(uuid='NORMALIZED-002588',
         path='/src/cudnn/concat_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n    //if (needCopy[i]) {')

Fragment(uuid='NORMALIZED-002589',
         path='/src/cudnn/concat_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n    int dst_blk_size = 1, src_blk_size = 1, num_blocks = 1;')

Fragment(uuid='NORMALIZED-002590',
         path='/src/cudnn/concat_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int j = inputs[i].numDim-1; j >= 0; j--)')

Fragment(uuid='NORMALIZED-002591',
         path='/src/cudnn/concat_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n      if (j >= axis) {')

Fragment(uuid='NORMALIZED-002592',
         path='/src/cudnn/concat_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n        dst_blk_size *= outputs[0].dim[j];')

Fragment(uuid='NORMALIZED-002593',
         path='/src/cudnn/concat_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n        src_blk_size *= inputs[i].dim[j];')

Fragment(uuid='NORMALIZED-002594',
         path='/src/cudnn/concat_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n      } else {')

Fragment(uuid='NORMALIZED-002595',
         path='/src/cudnn/concat_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n        num_blocks *= outputs[0].dim[j];')

Fragment(uuid='NORMALIZED-002596',
         path='/src/cudnn/concat_kernel.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002597',
         path='/src/cudnn/concat_kernel.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n    assert(inputs[i].data_ptr != NULL);')

Fragment(uuid='NORMALIZED-002598',
         path='/src/cudnn/concat_kernel.cu',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    assign_with_stride<<<GET_BLOCKS(num_blocks*src_blk_size), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002599',
         path='/src/cudnn/concat_kernel.cu',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        ((DATATYPE*)outputs[0].data_ptr) + offset, '
              '(DATATYPE*)inputs[i].data_ptr,')

Fragment(uuid='NORMALIZED-002600',
         path='/src/cudnn/concat_kernel.cu',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n        num_blocks, dst_blk_size, src_blk_size);')

Fragment(uuid='NORMALIZED-002601',
         path='/src/cudnn/concat_kernel.cu',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n    offset += src_blk_size;')

Fragment(uuid='NORMALIZED-002602',
         path='/src/cudnn/concat_kernel.cu',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002603',
         path='/src/cudnn/concat_kernel.cu',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (block)')

Fragment(uuid='NORMALIZED-002604',
         path='/src/cudnn/concat_kernel.cu',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-002605',
         path='/src/cudnn/concat_kernel.cu',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n  //FIXME')

Fragment(uuid='NORMALIZED-002606',
         path='/src/cudnn/concat_kernel.cu',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //DATATYPE* print_vals = (DATATYPE*) '
              'malloc(outputs[0].volume() * sizeof(DATATYPE));')

Fragment(uuid='NORMALIZED-002607',
         path='/src/cudnn/concat_kernel.cu',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //checkCUDA(cudaMemcpy(print_vals, outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE), cudaMemcpyDefault));')

Fragment(uuid='NORMALIZED-002608',
         path='/src/cudnn/concat_kernel.cu',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n  //for (int i = 0; i < outputs[0].volume(); i++)')

Fragment(uuid='NORMALIZED-002609',
         path='/src/cudnn/concat_kernel.cu',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n  //  printf("output[%d]: %.4lf\\n", i, print_vals[i]);')

Fragment(uuid='NORMALIZED-002610',
         path='/src/cudnn/concat_kernel.cu',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n  //for (int i = 0; i < numInputs; i++) {')

Fragment(uuid='NORMALIZED-002611',
         path='/src/cudnn/concat_kernel.cu',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //  checkCUDA(cudaMemcpy(print_vals, inputs[i].data_ptr, '
              'inputs[i].volume() * sizeof(DATATYPE), cudaMemcpyDefault));')

Fragment(uuid='NORMALIZED-002612',
         path='/src/cudnn/concat_kernel.cu',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //  printf("concat_forward: inputs[%d].ptr=%p\\n", i, '
              'inputs[i].data_ptr);')

Fragment(uuid='NORMALIZED-002613',
         path='/src/cudnn/concat_kernel.cu',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n  //  for (int j = 0; j < inputs[i].volume(); j++)')

Fragment(uuid='NORMALIZED-002614',
         path='/src/cudnn/concat_kernel.cu',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //    printf("input[%d][%d]: %.4lf\\n", i, j, print_vals[j]);')

Fragment(uuid='NORMALIZED-002615',
         path='/src/cudnn/concat_kernel.cu',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n  //}')

Fragment(uuid='NORMALIZED-002616',
         path='/src/cudnn/concat_kernel.cu',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002617',
         path='/src/cudnn/concat_kernel.cu',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002618',
         path='/src/cudnn/concat_kernel.cu',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Model::measure_concat_cost(Concat* concat)')

Fragment(uuid='NORMALIZED-002619',
         path='/src/cudnn/concat_kernel.cu',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002620',
         path='/src/cudnn/concat_kernel.cu',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-002621',
         path='/src/cudnn/concat_kernel.cu',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-002622',
         path='/src/cudnn/concat_kernel.cu',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < REPEAT_TIMES; i++) {')

Fragment(uuid='NORMALIZED-002623',
         path='/src/cudnn/concat_kernel.cu',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n    int offset = 0;')

Fragment(uuid='NORMALIZED-002624',
         path='/src/cudnn/concat_kernel.cu',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n    // TODO: remove needCopy and should not include operators')

Fragment(uuid='NORMALIZED-002625',
         path='/src/cudnn/concat_kernel.cu',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n    // that can be preproceed')

Fragment(uuid='NORMALIZED-002626',
         path='/src/cudnn/concat_kernel.cu',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int j = 0; j < concat->numInputs; j++) ')

Fragment(uuid='NORMALIZED-002627',
         path='/src/cudnn/concat_kernel.cu',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n      if (concat->needCopy[j]) {')

Fragment(uuid='NORMALIZED-002628',
         path='/src/cudnn/concat_kernel.cu',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        int dst_blk_size = 1, src_blk_size = 1, num_blocks = 1;')

Fragment(uuid='NORMALIZED-002629',
         path='/src/cudnn/concat_kernel.cu',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n        for (int d = concat->inputs[j].numDim-1; d >= 0; d--)')

Fragment(uuid='NORMALIZED-002630',
         path='/src/cudnn/concat_kernel.cu',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n          if (d >= concat->axis) {')

Fragment(uuid='NORMALIZED-002631',
         path='/src/cudnn/concat_kernel.cu',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n            dst_blk_size *= concat->outputs[0].dim[d];')

Fragment(uuid='NORMALIZED-002632',
         path='/src/cudnn/concat_kernel.cu',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n            src_blk_size *= concat->inputs[j].dim[d];')

Fragment(uuid='NORMALIZED-002633',
         path='/src/cudnn/concat_kernel.cu',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n          } else {')

Fragment(uuid='NORMALIZED-002634',
         path='/src/cudnn/concat_kernel.cu',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n            num_blocks *= concat->outputs[0].dim[d];')

Fragment(uuid='NORMALIZED-002635',
         path='/src/cudnn/concat_kernel.cu',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n          }')

Fragment(uuid='NORMALIZED-002636',
         path='/src/cudnn/concat_kernel.cu',
         lineno=100,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        '
              'assign_with_stride<<<GET_BLOCKS(num_blocks*src_blk_size), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-002637',
         path='/src/cudnn/concat_kernel.cu',
         lineno=101,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '            ((DATATYPE*)outputPtr) + offset, '
              '(DATATYPE*)inputPtr,')

Fragment(uuid='NORMALIZED-002638',
         path='/src/cudnn/concat_kernel.cu',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\n            num_blocks, dst_blk_size, src_blk_size);')

Fragment(uuid='NORMALIZED-002639',
         path='/src/cudnn/concat_kernel.cu',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\n        offset += src_blk_size;')

Fragment(uuid='NORMALIZED-002640',
         path='/src/cudnn/concat_kernel.cu',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002641',
         path='/src/cudnn/concat_kernel.cu',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002642',
         path='/src/cudnn/concat_kernel.cu',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-002643',
         path='/src/cudnn/concat_kernel.cu',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-002644',
         path='/src/cudnn/concat_kernel.cu',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n  float milliseconds;')

Fragment(uuid='NORMALIZED-002645',
         path='/src/cudnn/concat_kernel.cu',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-002646',
         path='/src/cudnn/concat_kernel.cu',
         lineno=110,
         depth=2,
         type='documentation',
         name='',
         text='\n  concat->runtime = milliseconds / REPEAT_TIMES;')

Fragment(uuid='NORMALIZED-002647',
         path='/src/cudnn/concat_kernel.cu',
         lineno=111,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (print_cost)')

Fragment(uuid='NORMALIZED-002648',
         path='/src/cudnn/concat_kernel.cu',
         lineno=112,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    printf("  measure[Concat]: cost(%.4lf)\\n", '
              'concat->runtime);')

Fragment(uuid='NORMALIZED-002649',
         path='/src/cudnn/concat_kernel.cu',
         lineno=113,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002650',
         path='/src/cudnn/concat_kernel.cu',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002651',
         path='/src/cudnn/concat_kernel.cu',
         lineno=115,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002652',
         path='/src/cudnn/constant_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-002653',
         path='/src/cudnn/constant_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/constant_kernel.cu\n')

Fragment(uuid='NORMALIZED-002654',
         path='/src/cudnn/constant_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-002655',
         path='/src/cudnn/constant_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Constant::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-002656',
         path='/src/cudnn/constant_kernel.cu',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Constant::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-002657',
         path='/src/cudnn/constant_kernel.cu',
         lineno=30,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Constant::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-002658',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-002659',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/conv2d_kernel.cu\n')

Fragment(uuid='NORMALIZED-002660',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-002661',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Conv2D::map(void)')

Fragment(uuid='NORMALIZED-002662',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002663',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n  // create descriptors')

Fragment(uuid='NORMALIZED-002664',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));')

Fragment(uuid='NORMALIZED-002665',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&biasTensor));')

Fragment(uuid='NORMALIZED-002666',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));')

Fragment(uuid='NORMALIZED-002667',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateFilterDescriptor(&filterDesc));')

Fragment(uuid='NORMALIZED-002668',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateConvolutionDescriptor(&convDesc));')

Fragment(uuid='NORMALIZED-002669',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputN = inputs[0].dim[0];')

Fragment(uuid='NORMALIZED-002670',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputC = inputs[0].dim[1];')

Fragment(uuid='NORMALIZED-002671',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputH = inputs[0].dim[2];')

Fragment(uuid='NORMALIZED-002672',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputW = inputs[0].dim[3];')

Fragment(uuid='NORMALIZED-002673',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n  int outputC = inputs[1].dim[0];')

Fragment(uuid='NORMALIZED-002674',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n  int groups = inputs[0].dim[1] / inputs[1].dim[1];')

Fragment(uuid='NORMALIZED-002675',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n  int padH, padW;')

Fragment(uuid='NORMALIZED-002676',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n  get_padding(&padH, &padW);')

Fragment(uuid='NORMALIZED-002677',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n  // set descriptors')

Fragment(uuid='NORMALIZED-002678',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002679',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));')

Fragment(uuid='NORMALIZED-002680',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002681',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, 1, outputC, 1, 1));')

Fragment(uuid='NORMALIZED-002682',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetFilter4dDescriptor(filterDesc, '
              'CUDNN_DATA_FLOAT,')

Fragment(uuid='NORMALIZED-002683',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_TENSOR_NCHW, inputs[1].dim[0], inputs[1].dim[1],')

Fragment(uuid='NORMALIZED-002684',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n      inputs[1].dim[2], inputs[1].dim[3]));')

Fragment(uuid='NORMALIZED-002685',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetConvolution2dDescriptor(convDesc, padH, '
              'padW,')

Fragment(uuid='NORMALIZED-002686',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n      strideH, strideW, 1/*dilationH*/, 1/*dilationW*/,')

Fragment(uuid='NORMALIZED-002687',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_CROSS_CORRELATION, CUDNN_DATA_FLOAT));')

Fragment(uuid='NORMALIZED-002688',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetConvolutionMathType(convDesc, '
              'CUDNN_TENSOR_OP_MATH));')

Fragment(uuid='NORMALIZED-002689',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (groups != 1) {')

Fragment(uuid='NORMALIZED-002690',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    checkCUDNN(cudnnSetConvolutionGroupCount(convDesc, groups));')

Fragment(uuid='NORMALIZED-002691',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002692',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n  int n, c, h, w;')

Fragment(uuid='NORMALIZED-002693',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnGetConvolution2dForwardOutputDim(convDesc,')

Fragment(uuid='NORMALIZED-002694',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n      inputTensor, filterDesc, &n, &c, &h, &w));')

Fragment(uuid='NORMALIZED-002695',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(n == inputN);')

Fragment(uuid='NORMALIZED-002696',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(c == outputC);')

Fragment(uuid='NORMALIZED-002697',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputs[0].dim[2] == h);')

Fragment(uuid='NORMALIZED-002698',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputs[0].dim[3] == w);')

Fragment(uuid='NORMALIZED-002699',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002700',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, n, c, h, w));')

Fragment(uuid='NORMALIZED-002701',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (activation != AC_MODE_NONE) {')

Fragment(uuid='NORMALIZED-002702',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));')

Fragment(uuid='NORMALIZED-002703',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    cudnnActivationMode_t mode = '
              'get_activation_mode(activation);')

Fragment(uuid='NORMALIZED-002704',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,')

Fragment(uuid='NORMALIZED-002705',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n        CUDNN_NOT_PROPAGATE_NAN, 0.0));')

Fragment(uuid='NORMALIZED-002706',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002707',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n  // allocate tensors')

Fragment(uuid='NORMALIZED-002708',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n  size_t outputSize = sizeof(DATATYPE) * n * c * h * w;')

Fragment(uuid='NORMALIZED-002709',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n  size_t biasSize = sizeof(DATATYPE) * outputC;')

Fragment(uuid='NORMALIZED-002710',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&biasPtr, biasSize));')

Fragment(uuid='NORMALIZED-002711',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));')

Fragment(uuid='NORMALIZED-002712',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002713',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002714',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=72,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Conv2D::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(biasTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '  checkCUDNN(cudnnDestroyFilterDescriptor(filterDesc));\n'
              '  checkCUDNN(cudnnDestroyConvolutionDescriptor(convDesc));\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  }\n'
              '  // free tensors\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '  checkCUDA(cudaFree(biasPtr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-002715',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Conv2D::forward(bool block)')

Fragment(uuid='NORMALIZED-002716',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002717',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-002718',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-002719',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (activation != AC_MODE_NONE) {')

Fragment(uuid='NORMALIZED-002720',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnConvolutionBiasActivationForward(')

Fragment(uuid='NORMALIZED-002721',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        model->dnn, &alpha, inputTensor, inputs[0].data_ptr, '
              'filterDesc, inputs[1].data_ptr,')

Fragment(uuid='NORMALIZED-002722',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        convDesc, fwdAlgo, model->workSpace, '
              'model->workSpaceSize,')

Fragment(uuid='NORMALIZED-002723',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        &beta, outputTensor, outputs[0].data_ptr, biasTensor, '
              'biasPtr, actiDesc,')

Fragment(uuid='NORMALIZED-002724',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n        outputTensor, outputs[0].data_ptr));')

Fragment(uuid='NORMALIZED-002725',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-002726',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnConvolutionForward(')

Fragment(uuid='NORMALIZED-002727',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        model->dnn, &alpha, inputTensor, inputs[0].data_ptr, '
              'filterDesc, inputs[1].data_ptr,')

Fragment(uuid='NORMALIZED-002728',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=100,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        convDesc, fwdAlgo, model->workSpace, '
              'model->workSpaceSize,')

Fragment(uuid='NORMALIZED-002729',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=101,
         depth=2,
         type='documentation',
         name='',
         text='\n        &beta, outputTensor, outputs[0].data_ptr));')

Fragment(uuid='NORMALIZED-002730',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    checkCUDNN(cudnnAddTensor(model->dnn, &alpha, biasTensor, '
              'biasPtr,')

Fragment(uuid='NORMALIZED-002731',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\n        &alpha, outputTensor, outputs[0].data_ptr));')

Fragment(uuid='NORMALIZED-002732',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002733',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (block)')

Fragment(uuid='NORMALIZED-002734',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-002735',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002736',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002737',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Model::measure_conv2d_cost(Conv2D* conv)')

Fragment(uuid='NORMALIZED-002738',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=110,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002739',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=111,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-002740',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=112,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-002741',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=113,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputN = conv->inputs[0].dim[0];')

Fragment(uuid='NORMALIZED-002742',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputC = conv->inputs[0].dim[1];')

Fragment(uuid='NORMALIZED-002743',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=115,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputH = conv->inputs[0].dim[2];')

Fragment(uuid='NORMALIZED-002744',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputW = conv->inputs[0].dim[3];')

Fragment(uuid='NORMALIZED-002745',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n  int kernelH = conv->inputs[1].dim[2];')

Fragment(uuid='NORMALIZED-002746',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n  int kernelW = conv->inputs[1].dim[3];')

Fragment(uuid='NORMALIZED-002747',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=119,
         depth=2,
         type='documentation',
         name='',
         text='\n  int outputC = conv->outputs[0].dim[1];')

Fragment(uuid='NORMALIZED-002748',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=120,
         depth=2,
         type='documentation',
         name='',
         text='\n  int outputH = conv->outputs[0].dim[2];')

Fragment(uuid='NORMALIZED-002749',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=121,
         depth=2,
         type='documentation',
         name='',
         text='\n  int outputW = conv->outputs[0].dim[3];')

Fragment(uuid='NORMALIZED-002750',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=122,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  int groups = conv->inputs[0].dim[1] / conv->inputs[1].dim[1];')

Fragment(uuid='NORMALIZED-002751',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=123,
         depth=2,
         type='documentation',
         name='',
         text='\n  int padH, padW;')

Fragment(uuid='NORMALIZED-002752',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=124,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // Reference: '
              'https://www.tensorflow.org/api_guides/python/nn#Convolution')

Fragment(uuid='NORMALIZED-002753',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=125,
         depth=2,
         type='documentation',
         name='',
         text='\n  switch (conv->padding) {')

Fragment(uuid='NORMALIZED-002754',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=126,
         depth=2,
         type='documentation',
         name='',
         text='\n    case PD_MODE_SAME:')

Fragment(uuid='NORMALIZED-002755',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=127,
         depth=2,
         type='documentation',
         name='',
         text='\n      int totalPadH, totalPadW;')

Fragment(uuid='NORMALIZED-002756',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=128,
         depth=2,
         type='documentation',
         name='',
         text='\n      if (inputH % conv->strideH == 0)')

Fragment(uuid='NORMALIZED-002757',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=129,
         depth=2,
         type='documentation',
         name='',
         text='\n        totalPadH = max(kernelH - conv->strideH, 0);')

Fragment(uuid='NORMALIZED-002758',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=130,
         depth=2,
         type='documentation',
         name='',
         text='\n      else')

Fragment(uuid='NORMALIZED-002759',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=131,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        totalPadH = max(kernelH - (inputH % conv->strideH), 0);')

Fragment(uuid='NORMALIZED-002760',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=132,
         depth=2,
         type='documentation',
         name='',
         text='\n      if (inputW % conv->strideW == 0)')

Fragment(uuid='NORMALIZED-002761',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=133,
         depth=2,
         type='documentation',
         name='',
         text='\n        totalPadW = max(kernelW - conv->strideW, 0);')

Fragment(uuid='NORMALIZED-002762',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=134,
         depth=2,
         type='documentation',
         name='',
         text='\n      else')

Fragment(uuid='NORMALIZED-002763',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=135,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        totalPadW = max(kernelW - (inputW % conv->strideW), 0);')

Fragment(uuid='NORMALIZED-002764',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=136,
         depth=2,
         type='documentation',
         name='',
         text='\n      // assert same padding on both sides')

Fragment(uuid='NORMALIZED-002765',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=137,
         depth=2,
         type='documentation',
         name='',
         text='\n      padH = (totalPadH + 1) / 2;')

Fragment(uuid='NORMALIZED-002766',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=138,
         depth=2,
         type='documentation',
         name='',
         text='\n      padW = (totalPadW + 1) / 2;')

Fragment(uuid='NORMALIZED-002767',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=139,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-002768',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=140,
         depth=2,
         type='documentation',
         name='',
         text='\n    case PD_MODE_VALID:')

Fragment(uuid='NORMALIZED-002769',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=141,
         depth=2,
         type='documentation',
         name='',
         text='\n      padH = 0;')

Fragment(uuid='NORMALIZED-002770',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=142,
         depth=2,
         type='documentation',
         name='',
         text='\n      padW = 0;')

Fragment(uuid='NORMALIZED-002771',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=143,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-002772',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=144,
         depth=2,
         type='documentation',
         name='',
         text='\n    default:')

Fragment(uuid='NORMALIZED-002773',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n      assert(false);')

Fragment(uuid='NORMALIZED-002774',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002775',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002776',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));')

Fragment(uuid='NORMALIZED-002777',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(biasTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002778',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, 1, outputC, 1, 1));')

Fragment(uuid='NORMALIZED-002779',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetFilter4dDescriptor(filterDesc, '
              'CUDNN_DATA_FLOAT,')

Fragment(uuid='NORMALIZED-002780',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      CUDNN_TENSOR_NCHW, conv->inputs[1].dim[0], '
              'conv->inputs[1].dim[1],')

Fragment(uuid='NORMALIZED-002781',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n      conv->inputs[1].dim[2], conv->inputs[1].dim[3]));')

Fragment(uuid='NORMALIZED-002782',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetConvolution2dDescriptor(convDesc, padH, '
              'padW,')

Fragment(uuid='NORMALIZED-002783',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      conv->strideH, conv->strideW, 1/*dilationH*/, '
              '1/*dilationW*/,')

Fragment(uuid='NORMALIZED-002784',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_CROSS_CORRELATION, CUDNN_DATA_FLOAT));')

Fragment(uuid='NORMALIZED-002785',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetConvolutionMathType(convDesc, '
              'CUDNN_TENSOR_OP_MATH));')

Fragment(uuid='NORMALIZED-002786',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnSetConvolutionGroupCount(convDesc, groups));')

Fragment(uuid='NORMALIZED-002787',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=159,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, '
              'CUDNN_ACTIVATION_RELU,')

Fragment(uuid='NORMALIZED-002788',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=160,
         depth=2,
         type='documentation',
         name='',
         text='\n        CUDNN_NOT_PROPAGATE_NAN, 0.0));')

Fragment(uuid='NORMALIZED-002789',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=161,
         depth=2,
         type='documentation',
         name='',
         text='\n  int n, c, h, w;')

Fragment(uuid='NORMALIZED-002790',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=162,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnGetConvolution2dForwardOutputDim(convDesc,')

Fragment(uuid='NORMALIZED-002791',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=163,
         depth=2,
         type='documentation',
         name='',
         text='\n      inputTensor, filterDesc, &n, &c, &h, &w));')

Fragment(uuid='NORMALIZED-002792',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=164,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(n == inputN);')

Fragment(uuid='NORMALIZED-002793',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=165,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(c == outputC);')

Fragment(uuid='NORMALIZED-002794',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=166,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputH == h);')

Fragment(uuid='NORMALIZED-002795',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=167,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputW == w);')

Fragment(uuid='NORMALIZED-002796',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=168,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-002797',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=169,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, n, c, h, w));')

Fragment(uuid='NORMALIZED-002798',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=170,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  size_t inputSize = sizeof(DATATYPE) * inputN * inputC * '
              'inputH * inputW;')

Fragment(uuid='NORMALIZED-002799',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=171,
         depth=2,
         type='documentation',
         name='',
         text='\n  size_t filterSize = sizeof(DATATYPE) * inputC * outputC')

Fragment(uuid='NORMALIZED-002800',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=172,
         depth=2,
         type='documentation',
         name='',
         text='\n                      * kernelH * kernelW;')

Fragment(uuid='NORMALIZED-002801',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=173,
         depth=2,
         type='documentation',
         name='',
         text='\n  size_t outputSize = sizeof(DATATYPE) * n * c * h * w;')

Fragment(uuid='NORMALIZED-002802',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=174,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(inputSize < MAX_TENSOR_SIZE);')

Fragment(uuid='NORMALIZED-002803',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=175,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(filterSize < MAX_TENSOR_SIZE);')

Fragment(uuid='NORMALIZED-002804',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=176,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputSize < MAX_TENSOR_SIZE);')

Fragment(uuid='NORMALIZED-002805',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=177,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002806',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=178,
         depth=2,
         type='documentation',
         name='',
         text='\n  const int reqAlgCnt = 8;')

Fragment(uuid='NORMALIZED-002807',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=179,
         depth=2,
         type='documentation',
         name='',
         text='\n  int cnt = 0;')

Fragment(uuid='NORMALIZED-002808',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=180,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudnnConvolutionFwdAlgoPerf_t perfResults[reqAlgCnt];')

Fragment(uuid='NORMALIZED-002809',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=181,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnFindConvolutionForwardAlgorithmEx(')

Fragment(uuid='NORMALIZED-002810',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=182,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      dnn, inputTensor, inputPtr, filterDesc, filterPtr, '
              'convDesc,')

Fragment(uuid='NORMALIZED-002811',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=183,
         depth=2,
         type='documentation',
         name='',
         text='\n      outputTensor, outputPtr, reqAlgCnt, &cnt, perfResults,')

Fragment(uuid='NORMALIZED-002812',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=184,
         depth=2,
         type='documentation',
         name='',
         text='\n      workSpace, workSpaceSize));')

Fragment(uuid='NORMALIZED-002813',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=185,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(cnt > 0);')

Fragment(uuid='NORMALIZED-002814',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=186,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(perfResults[0].status);')

Fragment(uuid='NORMALIZED-002815',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=187,
         depth=2,
         type='documentation',
         name='',
         text='\n  //for (int i = 0; i < cnt; i++) {')

Fragment(uuid='NORMALIZED-002816',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=188,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //printf("fwdAlgo(%d) time(%.2lfms) space(%dMB)\\n", '
              'perfResults[i].algo,')

Fragment(uuid='NORMALIZED-002817',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=189,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    //       perfResults[i].time, perfResults[i].memory / 1024 '
              '/ 1024);')

Fragment(uuid='NORMALIZED-002818',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=190,
         depth=2,
         type='documentation',
         name='',
         text='\n  //}')

Fragment(uuid='NORMALIZED-002819',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=191,
         depth=2,
         type='documentation',
         name='',
         text='\n  conv->fwdAlgo = perfResults[0].algo;')

Fragment(uuid='NORMALIZED-002820',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=192,
         depth=2,
         type='documentation',
         name='',
         text='\n ')

Fragment(uuid='NORMALIZED-002821',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=193,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-002822',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=194,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {')

Fragment(uuid='NORMALIZED-002823',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=195,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (i == WARMUP_TIMES) {')

Fragment(uuid='NORMALIZED-002824',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=196,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-002825',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=197,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002826',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=198,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (conv->activation != AC_MODE_NONE) {')

Fragment(uuid='NORMALIZED-002827',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=199,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDNN(cudnnConvolutionBiasActivationForward(')

Fragment(uuid='NORMALIZED-002828',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=200,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          dnn, &alpha, inputTensor, inputPtr, filterDesc, '
              'filterPtr,')

Fragment(uuid='NORMALIZED-002829',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=201,
         depth=2,
         type='documentation',
         name='',
         text='\n          convDesc, conv->fwdAlgo, workSpace, workSpaceSize,')

Fragment(uuid='NORMALIZED-002830',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=202,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          &beta, outputTensor, outputPtr, biasTensor, biasPtr, '
              'actiDesc,')

Fragment(uuid='NORMALIZED-002831',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=203,
         depth=2,
         type='documentation',
         name='',
         text='\n          outputTensor, outputPtr));')

Fragment(uuid='NORMALIZED-002832',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=204,
         depth=2,
         type='documentation',
         name='',
         text='\n    } else {')

Fragment(uuid='NORMALIZED-002833',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=205,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDNN(cudnnConvolutionForward(')

Fragment(uuid='NORMALIZED-002834',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=206,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          dnn, &alpha, inputTensor, inputPtr, filterDesc, '
              'filterPtr,')

Fragment(uuid='NORMALIZED-002835',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=207,
         depth=2,
         type='documentation',
         name='',
         text='\n          convDesc, conv->fwdAlgo, workSpace, workSpaceSize,')

Fragment(uuid='NORMALIZED-002836',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=208,
         depth=2,
         type='documentation',
         name='',
         text='\n          &beta, outputTensor, outputPtr));')

Fragment(uuid='NORMALIZED-002837',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=209,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      checkCUDNN(cudnnAddTensor(dnn, &alpha, biasTensor, '
              'biasPtr,')

Fragment(uuid='NORMALIZED-002838',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=210,
         depth=2,
         type='documentation',
         name='',
         text='\n          &alpha, outputTensor, outputPtr));')

Fragment(uuid='NORMALIZED-002839',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=211,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002840',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=212,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002841',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=213,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-002842',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=214,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-002843',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=215,
         depth=2,
         type='documentation',
         name='',
         text='\n  float milliseconds;')

Fragment(uuid='NORMALIZED-002844',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=216,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-002845',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=217,
         depth=2,
         type='documentation',
         name='',
         text='\n  conv->runtime = milliseconds / REPEAT_TIMES;')

Fragment(uuid='NORMALIZED-002846',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=218,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (print_cost)')

Fragment(uuid='NORMALIZED-002847',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=219,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    printf("  measure[Conv2D]: i(%d %d %d %d) w(%d %d %d %d) '
              's(%d %d) p(%d %d) cost(%.4lf)\\n",')

Fragment(uuid='NORMALIZED-002848',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=220,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '           conv->inputs[0].dim[0], conv->inputs[0].dim[1], '
              'conv->inputs[0].dim[2], conv->inputs[0].dim[3],')

Fragment(uuid='NORMALIZED-002849',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=221,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '           conv->inputs[1].dim[0], conv->inputs[1].dim[1], '
              'conv->inputs[1].dim[2], conv->inputs[1].dim[3],')

Fragment(uuid='NORMALIZED-002850',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=222,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '           conv->strideH, conv->strideW, padH, padW, '
              'conv->runtime);')

Fragment(uuid='NORMALIZED-002851',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=223,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002852',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=224,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002853',
         path='/src/cudnn/conv2d_kernel.cu',
         lineno=225,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002854',
         path='/src/cudnn/cuda_helper.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='#include "taso/cuda_helper.h"\nusing namespace taso;\n')

Fragment(uuid='NORMALIZED-002855',
         path='/src/cudnn/cuda_helper.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/cuda_helper.cu\n')

Fragment(uuid='NORMALIZED-002856',
         path='/src/cudnn/cuda_helper.cu',
         lineno=3,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '__global__\n'
              'void assign_kernel(float* ptr, int size, float value)\n'
              '{\n'
              '  CUDA_KERNEL_LOOP(i, size)\n'
              '  {\n'
              '    ptr[i] = value;\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-002857',
         path='/src/cudnn/cuda_helper.cu',
         lineno=12,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '__global__\n'
              'void copy_kernel(float* dst, const float* src, int size)\n'
              '{\n'
              '  CUDA_KERNEL_LOOP(i, size)\n'
              '  {\n'
              '    dst[i] = src[i];\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-002858',
         path='/src/cudnn/cuda_helper.cu',
         lineno=21,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'cudnnActivationMode_t get_activation_mode(ActiMode activation)\n'
              '{\n'
              '  switch (activation) {\n'
              '    case AC_MODE_SIGMOID:\n'
              '      return CUDNN_ACTIVATION_SIGMOID;\n'
              '    case AC_MODE_RELU:\n'
              '      return CUDNN_ACTIVATION_RELU;\n'
              '    case AC_MODE_TANH:\n'
              '      return CUDNN_ACTIVATION_TANH;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  // return RELU as default\n'
              '  return CUDNN_ACTIVATION_RELU;\n'
              '}\n')

Fragment(uuid='NORMALIZED-002859',
         path='/src/cudnn/cuda_helper.cu',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid helperSetTensorDescriptor(const Tensor& tensor,')

Fragment(uuid='NORMALIZED-002860',
         path='/src/cudnn/cuda_helper.cu',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                               cudnnTensorDescriptor_t '
              'tensorDesc)')

Fragment(uuid='NORMALIZED-002861',
         path='/src/cudnn/cuda_helper.cu',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002862',
         path='/src/cudnn/cuda_helper.cu',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n  switch(tensor.numDim) {')

Fragment(uuid='NORMALIZED-002863',
         path='/src/cudnn/cuda_helper.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n    case 1:')

Fragment(uuid='NORMALIZED-002864',
         path='/src/cudnn/cuda_helper.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-002865',
         path='/src/cudnn/cuda_helper.cu',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n      int dims[] = {tensor.dim[0], 1, 1, 1};')

Fragment(uuid='NORMALIZED-002866',
         path='/src/cudnn/cuda_helper.cu',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n      int strides[] = {tensor.stride[0], 1, 1, 1};')

Fragment(uuid='NORMALIZED-002867',
         path='/src/cudnn/cuda_helper.cu',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      checkCUDNN(cudnnSetTensorNdDescriptor(tensorDesc, '
              'CUDNN_DATA_FLOAT,')

Fragment(uuid='NORMALIZED-002868',
         path='/src/cudnn/cuda_helper.cu',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                                            4, dims, strides));')

Fragment(uuid='NORMALIZED-002869',
         path='/src/cudnn/cuda_helper.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-002870',
         path='/src/cudnn/cuda_helper.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002871',
         path='/src/cudnn/cuda_helper.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n    case 2:')

Fragment(uuid='NORMALIZED-002872',
         path='/src/cudnn/cuda_helper.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-002873',
         path='/src/cudnn/cuda_helper.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n      int dims[] = {tensor.dim[0], tensor.dim[1], 1, 1};')

Fragment(uuid='NORMALIZED-002874',
         path='/src/cudnn/cuda_helper.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      int strides[] = {tensor.stride[0], tensor.stride[1], 1, '
              '1};')

Fragment(uuid='NORMALIZED-002875',
         path='/src/cudnn/cuda_helper.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      checkCUDNN(cudnnSetTensorNdDescriptor(tensorDesc, '
              'CUDNN_DATA_FLOAT,')

Fragment(uuid='NORMALIZED-002876',
         path='/src/cudnn/cuda_helper.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                                            4, dims, strides));')

Fragment(uuid='NORMALIZED-002877',
         path='/src/cudnn/cuda_helper.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-002878',
         path='/src/cudnn/cuda_helper.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002879',
         path='/src/cudnn/cuda_helper.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n    default:')

Fragment(uuid='NORMALIZED-002880',
         path='/src/cudnn/cuda_helper.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n    {')

Fragment(uuid='NORMALIZED-002881',
         path='/src/cudnn/cuda_helper.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n      assert(tensor.numDim >= 3);')

Fragment(uuid='NORMALIZED-002882',
         path='/src/cudnn/cuda_helper.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      checkCUDNN(cudnnSetTensorNdDescriptor(tensorDesc, '
              'CUDNN_DATA_FLOAT,')

Fragment(uuid='NORMALIZED-002883',
         path='/src/cudnn/cuda_helper.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n          tensor.numDim, tensor.dim, tensor.stride));')

Fragment(uuid='NORMALIZED-002884',
         path='/src/cudnn/cuda_helper.cu',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002885',
         path='/src/cudnn/cuda_helper.cu',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002886',
         path='/src/cudnn/cuda_helper.cu',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-002887',
         path='/src/cudnn/cuda_helper.cu',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002888',
         path='/src/cudnn/cuda_helper.cu',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'void helperSetBroadcastableTensorDescriptor(const Tensor& input,')

Fragment(uuid='NORMALIZED-002889',
         path='/src/cudnn/cuda_helper.cu',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                                            const Tensor& '
              'output,')

Fragment(uuid='NORMALIZED-002890',
         path='/src/cudnn/cuda_helper.cu',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '                                            '
              'cudnnTensorDescriptor_t tensorDesc)')

Fragment(uuid='NORMALIZED-002891',
         path='/src/cudnn/cuda_helper.cu',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002892',
         path='/src/cudnn/cuda_helper.cu',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n  int dims[16], strides[16];')

Fragment(uuid='NORMALIZED-002893',
         path='/src/cudnn/cuda_helper.cu',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(output.numDim <= 16);')

Fragment(uuid='NORMALIZED-002894',
         path='/src/cudnn/cuda_helper.cu',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(input.numDim <= output.numDim);')

Fragment(uuid='NORMALIZED-002895',
         path='/src/cudnn/cuda_helper.cu',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(input.default_layout());')

Fragment(uuid='NORMALIZED-002896',
         path='/src/cudnn/cuda_helper.cu',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(output.default_layout());')

Fragment(uuid='NORMALIZED-002897',
         path='/src/cudnn/cuda_helper.cu',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < output.numDim; i++) {')

Fragment(uuid='NORMALIZED-002898',
         path='/src/cudnn/cuda_helper.cu',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (i < input.numDim) {')

Fragment(uuid='NORMALIZED-002899',
         path='/src/cudnn/cuda_helper.cu',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      strides[output.numDim-1-i] = '
              'input.stride[input.numDim-1-i];')

Fragment(uuid='NORMALIZED-002900',
         path='/src/cudnn/cuda_helper.cu',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n      dims[output.numDim-1-i] = input.dim[input.numDim-1-i];')

Fragment(uuid='NORMALIZED-002901',
         path='/src/cudnn/cuda_helper.cu',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n    } else {')

Fragment(uuid='NORMALIZED-002902',
         path='/src/cudnn/cuda_helper.cu',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n      strides[output.numDim-1-i] = input.stride[0];')

Fragment(uuid='NORMALIZED-002903',
         path='/src/cudnn/cuda_helper.cu',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n      dims[output.numDim-1-i] = 1;')

Fragment(uuid='NORMALIZED-002904',
         path='/src/cudnn/cuda_helper.cu',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002905',
         path='/src/cudnn/cuda_helper.cu',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002906',
         path='/src/cudnn/cuda_helper.cu',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n  int num_dim = output.numDim;')

Fragment(uuid='NORMALIZED-002907',
         path='/src/cudnn/cuda_helper.cu',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (num_dim < 4) {')

Fragment(uuid='NORMALIZED-002908',
         path='/src/cudnn/cuda_helper.cu',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n    num_dim = 4;')

Fragment(uuid='NORMALIZED-002909',
         path='/src/cudnn/cuda_helper.cu',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int i = output.numDim; i < num_dim; i++) {')

Fragment(uuid='NORMALIZED-002910',
         path='/src/cudnn/cuda_helper.cu',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n      dims[i] = 1;')

Fragment(uuid='NORMALIZED-002911',
         path='/src/cudnn/cuda_helper.cu',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n      strides[i] = 1;')

Fragment(uuid='NORMALIZED-002912',
         path='/src/cudnn/cuda_helper.cu',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002913',
         path='/src/cudnn/cuda_helper.cu',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-002914',
         path='/src/cudnn/cuda_helper.cu',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n  //for (int i = 0; i < num_dim; i++)')

Fragment(uuid='NORMALIZED-002915',
         path='/src/cudnn/cuda_helper.cu',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //  printf("dims[%d] = %d input.dim(%d) output.dim(%d)\\n", '
              'i, dims[i], input.dim[i], output.dim[i]);')

Fragment(uuid='NORMALIZED-002916',
         path='/src/cudnn/cuda_helper.cu',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n  //for (int i = 0; i < num_dim; i++)')

Fragment(uuid='NORMALIZED-002917',
         path='/src/cudnn/cuda_helper.cu',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  //  printf("strides[%d] = %d input.stride(%d) '
              'output.stride(%d)\\n", i, strides[i], input.stride[i], '
              'output.stride[i]);')

Fragment(uuid='NORMALIZED-002918',
         path='/src/cudnn/cuda_helper.cu',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n ')

Fragment(uuid='NORMALIZED-002919',
         path='/src/cudnn/cuda_helper.cu',
         lineno=97,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensorNdDescriptor(tensorDesc, '
              'CUDNN_DATA_FLOAT,\n'
              '      num_dim, dims, strides));\n'
              '}\n'
              '\n')

Fragment(uuid='NORMALIZED-002920',
         path='/src/cudnn/element_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-002921',
         path='/src/cudnn/element_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/element_kernel.cu\n')

Fragment(uuid='NORMALIZED-002922',
         path='/src/cudnn/element_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-002923',
         path='/src/cudnn/element_kernel.cu',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n__global__')

Fragment(uuid='NORMALIZED-002924',
         path='/src/cudnn/element_kernel.cu',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid elementwise_kernel(int volume,')

Fragment(uuid='NORMALIZED-002925',
         path='/src/cudnn/element_kernel.cu',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n                        OpType type,')

Fragment(uuid='NORMALIZED-002926',
         path='/src/cudnn/element_kernel.cu',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n                        const Tensor xTensor,')

Fragment(uuid='NORMALIZED-002927',
         path='/src/cudnn/element_kernel.cu',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n                        const Tensor yTensor,')

Fragment(uuid='NORMALIZED-002928',
         path='/src/cudnn/element_kernel.cu',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n                        const Tensor zTensor,')

Fragment(uuid='NORMALIZED-002929',
         path='/src/cudnn/element_kernel.cu',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n                        const DATATYPE* x,')

Fragment(uuid='NORMALIZED-002930',
         path='/src/cudnn/element_kernel.cu',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n\t\t\tconst DATATYPE* y,')

Fragment(uuid='NORMALIZED-002931',
         path='/src/cudnn/element_kernel.cu',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n\t\t\tDATATYPE* z)')

Fragment(uuid='NORMALIZED-002932',
         path='/src/cudnn/element_kernel.cu',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-002933',
         path='/src/cudnn/element_kernel.cu',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n  int pos[6];')

Fragment(uuid='NORMALIZED-002934',
         path='/src/cudnn/element_kernel.cu',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(zTensor.numDim <= 6);')

Fragment(uuid='NORMALIZED-002935',
         path='/src/cudnn/element_kernel.cu',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n  CUDA_KERNEL_LOOP(id_z, volume)')

Fragment(uuid='NORMALIZED-002936',
         path='/src/cudnn/element_kernel.cu',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n  {')

Fragment(uuid='NORMALIZED-002937',
         path='/src/cudnn/element_kernel.cu',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n    int id_x = 0, id_y = 0;')

Fragment(uuid='NORMALIZED-002938',
         path='/src/cudnn/element_kernel.cu',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int j = 0; j < zTensor.numDim; j++) {')

Fragment(uuid='NORMALIZED-002939',
         path='/src/cudnn/element_kernel.cu',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n      pos[j] = (id_z / zTensor.stride[j]) % zTensor.dim[j];')

Fragment(uuid='NORMALIZED-002940',
         path='/src/cudnn/element_kernel.cu',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002941',
         path='/src/cudnn/element_kernel.cu',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n    int diff = zTensor.numDim - xTensor.numDim;')

Fragment(uuid='NORMALIZED-002942',
         path='/src/cudnn/element_kernel.cu',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int j = 0; j < xTensor.numDim; j++) {')

Fragment(uuid='NORMALIZED-002943',
         path='/src/cudnn/element_kernel.cu',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n      id_x += xTensor.stride[j] * pos[j + diff];')

Fragment(uuid='NORMALIZED-002944',
         path='/src/cudnn/element_kernel.cu',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002945',
         path='/src/cudnn/element_kernel.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n    diff = zTensor.numDim - yTensor.numDim;')

Fragment(uuid='NORMALIZED-002946',
         path='/src/cudnn/element_kernel.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int j = 0; j < yTensor.numDim; j++) {')

Fragment(uuid='NORMALIZED-002947',
         path='/src/cudnn/element_kernel.cu',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n      id_y += yTensor.stride[j] * pos[j + diff];')

Fragment(uuid='NORMALIZED-002948',
         path='/src/cudnn/element_kernel.cu',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-002949',
         path='/src/cudnn/element_kernel.cu',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-002950',
         path='/src/cudnn/element_kernel.cu',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n    switch (type) {')

Fragment(uuid='NORMALIZED-002951',
         path='/src/cudnn/element_kernel.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_ADD:')

Fragment(uuid='NORMALIZED-002952',
         path='/src/cudnn/element_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-002953',
         path='/src/cudnn/element_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n        z[id_z] = x[id_x] + y[id_y];')

Fragment(uuid='NORMALIZED-002954',
         path='/src/cudnn/element_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-002955',
         path='/src/cudnn/element_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002956',
         path='/src/cudnn/element_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_MUL:')

Fragment(uuid='NORMALIZED-002957',
         path='/src/cudnn/element_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-002958',
         path='/src/cudnn/element_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n        z[id_z] = x[id_x] * y[id_y];')

Fragment(uuid='NORMALIZED-002959',
         path='/src/cudnn/element_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-002960',
         path='/src/cudnn/element_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002961',
         path='/src/cudnn/element_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_MAX:')

Fragment(uuid='NORMALIZED-002962',
         path='/src/cudnn/element_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-002963',
         path='/src/cudnn/element_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n        z[id_z] = max(x[id_x], y[id_y]);')

Fragment(uuid='NORMALIZED-002964',
         path='/src/cudnn/element_kernel.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-002965',
         path='/src/cudnn/element_kernel.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002966',
         path='/src/cudnn/element_kernel.cu',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_MIN:')

Fragment(uuid='NORMALIZED-002967',
         path='/src/cudnn/element_kernel.cu',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-002968',
         path='/src/cudnn/element_kernel.cu',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n        z[id_z] = min(x[id_x], y[id_y]);')

Fragment(uuid='NORMALIZED-002969',
         path='/src/cudnn/element_kernel.cu',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-002970',
         path='/src/cudnn/element_kernel.cu',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002971',
         path='/src/cudnn/element_kernel.cu',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_SUB:')

Fragment(uuid='NORMALIZED-002972',
         path='/src/cudnn/element_kernel.cu',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-002973',
         path='/src/cudnn/element_kernel.cu',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n        z[id_z] = x[id_x] - y[id_y];')

Fragment(uuid='NORMALIZED-002974',
         path='/src/cudnn/element_kernel.cu',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-002975',
         path='/src/cudnn/element_kernel.cu',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002976',
         path='/src/cudnn/element_kernel.cu',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_DIV:')

Fragment(uuid='NORMALIZED-002977',
         path='/src/cudnn/element_kernel.cu',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-002978',
         path='/src/cudnn/element_kernel.cu',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n        z[id_z] = x[id_x] / y[id_y];')

Fragment(uuid='NORMALIZED-002979',
         path='/src/cudnn/element_kernel.cu',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-002980',
         path='/src/cudnn/element_kernel.cu',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002981',
         path='/src/cudnn/element_kernel.cu',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_EQUAL:')

Fragment(uuid='NORMALIZED-002982',
         path='/src/cudnn/element_kernel.cu',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-002983',
         path='/src/cudnn/element_kernel.cu',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n        z[id_z] = (x[id_x] == y[id_y]);')

Fragment(uuid='NORMALIZED-002984',
         path='/src/cudnn/element_kernel.cu',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-002985',
         path='/src/cudnn/element_kernel.cu',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002986',
         path='/src/cudnn/element_kernel.cu',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_GREATER:')

Fragment(uuid='NORMALIZED-002987',
         path='/src/cudnn/element_kernel.cu',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-002988',
         path='/src/cudnn/element_kernel.cu',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n        z[id_z] = (x[id_x] > y[id_y]);')

Fragment(uuid='NORMALIZED-002989',
         path='/src/cudnn/element_kernel.cu',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-002990',
         path='/src/cudnn/element_kernel.cu',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002991',
         path='/src/cudnn/element_kernel.cu',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_LESS:')

Fragment(uuid='NORMALIZED-002992',
         path='/src/cudnn/element_kernel.cu',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-002993',
         path='/src/cudnn/element_kernel.cu',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n        z[id_z] = (x[id_x] < y[id_y]);')

Fragment(uuid='NORMALIZED-002994',
         path='/src/cudnn/element_kernel.cu',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-002995',
         path='/src/cudnn/element_kernel.cu',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-002996',
         path='/src/cudnn/element_kernel.cu',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_PRELU:')

Fragment(uuid='NORMALIZED-002997',
         path='/src/cudnn/element_kernel.cu',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-002998',
         path='/src/cudnn/element_kernel.cu',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n        z[id_z] = x[id_x] >= 0 ? x[id_x] : y[id_y] * x[id_x];')

Fragment(uuid='NORMALIZED-002999',
         path='/src/cudnn/element_kernel.cu',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003000',
         path='/src/cudnn/element_kernel.cu',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-003001',
         path='/src/cudnn/element_kernel.cu',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n      default:')

Fragment(uuid='NORMALIZED-003002',
         path='/src/cudnn/element_kernel.cu',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n        assert(false);')

Fragment(uuid='NORMALIZED-003003',
         path='/src/cudnn/element_kernel.cu',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003004',
         path='/src/cudnn/element_kernel.cu',
         lineno=100,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003005',
         path='/src/cudnn/element_kernel.cu',
         lineno=101,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003006',
         path='/src/cudnn/element_kernel.cu',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003007',
         path='/src/cudnn/element_kernel.cu',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\nbool Element::use_kernel(void) const')

Fragment(uuid='NORMALIZED-003008',
         path='/src/cudnn/element_kernel.cu',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003009',
         path='/src/cudnn/element_kernel.cu',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n  switch (type) {')

Fragment(uuid='NORMALIZED-003010',
         path='/src/cudnn/element_kernel.cu',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_EW_ADD:')

Fragment(uuid='NORMALIZED-003011',
         path='/src/cudnn/element_kernel.cu',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_EW_MUL:')

Fragment(uuid='NORMALIZED-003012',
         path='/src/cudnn/element_kernel.cu',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_EW_MAX:')

Fragment(uuid='NORMALIZED-003013',
         path='/src/cudnn/element_kernel.cu',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n    case OP_EW_MIN:')

Fragment(uuid='NORMALIZED-003014',
         path='/src/cudnn/element_kernel.cu',
         lineno=110,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-003015',
         path='/src/cudnn/element_kernel.cu',
         lineno=111,
         depth=2,
         type='documentation',
         name='',
         text='\n    default:')

Fragment(uuid='NORMALIZED-003016',
         path='/src/cudnn/element_kernel.cu',
         lineno=112,
         depth=2,
         type='documentation',
         name='',
         text='\n      return false;')

Fragment(uuid='NORMALIZED-003017',
         path='/src/cudnn/element_kernel.cu',
         lineno=113,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003018',
         path='/src/cudnn/element_kernel.cu',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // use cudnn kernel only if inputs and output have default '
              'layouts')

Fragment(uuid='NORMALIZED-003019',
         path='/src/cudnn/element_kernel.cu',
         lineno=115,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (inputs[0].default_layout() && inputs[1].default_layout()')

Fragment(uuid='NORMALIZED-003020',
         path='/src/cudnn/element_kernel.cu',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n  && outputs[0].default_layout()) {')

Fragment(uuid='NORMALIZED-003021',
         path='/src/cudnn/element_kernel.cu',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n    // Do nothing')

Fragment(uuid='NORMALIZED-003022',
         path='/src/cudnn/element_kernel.cu',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-003023',
         path='/src/cudnn/element_kernel.cu',
         lineno=119,
         depth=2,
         type='documentation',
         name='',
         text='\n    return false;')

Fragment(uuid='NORMALIZED-003024',
         path='/src/cudnn/element_kernel.cu',
         lineno=120,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003025',
         path='/src/cudnn/element_kernel.cu',
         lineno=121,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // CUDNNv7.6.5 raequirement: Each dimension of the input '
              'tensor A must ')

Fragment(uuid='NORMALIZED-003026',
         path='/src/cudnn/element_kernel.cu',
         lineno=122,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // match the corresponding dimension of the destination '
              'tensor C, and ')

Fragment(uuid='NORMALIZED-003027',
         path='/src/cudnn/element_kernel.cu',
         lineno=123,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // each dimension of the input tensor B must match the '
              'corresponding ')

Fragment(uuid='NORMALIZED-003028',
         path='/src/cudnn/element_kernel.cu',
         lineno=124,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // dimension of the destination tensor C or must be equal to '
              '1. ')

Fragment(uuid='NORMALIZED-003029',
         path='/src/cudnn/element_kernel.cu',
         lineno=125,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // In the latter case, the same value from the input tensor B '
              'for ')

Fragment(uuid='NORMALIZED-003030',
         path='/src/cudnn/element_kernel.cu',
         lineno=126,
         depth=2,
         type='documentation',
         name='',
         text='\n  // those dimensions will be used to blend into the C tensor.')

Fragment(uuid='NORMALIZED-003031',
         path='/src/cudnn/element_kernel.cu',
         lineno=127,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (inputs[0].volume() != outputs[0].volume())')

Fragment(uuid='NORMALIZED-003032',
         path='/src/cudnn/element_kernel.cu',
         lineno=128,
         depth=2,
         type='documentation',
         name='',
         text='\n    return false;')

Fragment(uuid='NORMALIZED-003033',
         path='/src/cudnn/element_kernel.cu',
         lineno=129,
         depth=2,
         type='documentation',
         name='',
         text='\n  return true;')

Fragment(uuid='NORMALIZED-003034',
         path='/src/cudnn/element_kernel.cu',
         lineno=130,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003035',
         path='/src/cudnn/element_kernel.cu',
         lineno=131,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003036',
         path='/src/cudnn/element_kernel.cu',
         lineno=132,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Element::map(void)\n'
              '{\n'
              '  if (use_kernel()) {\n'
              '    // create descriptors\n'
              '    checkCUDNN(cudnnCreateTensorDescriptor(&in1Tensor));\n'
              '    checkCUDNN(cudnnCreateTensorDescriptor(&in2Tensor));\n'
              '    checkCUDNN(cudnnCreateTensorDescriptor(&outTensor));\n'
              '    checkCUDNN(cudnnCreateOpTensorDescriptor(&opDesc));\n'
              '    // set descriptors\n'
              '    helperSetBroadcastableTensorDescriptor(inputs[0], '
              'outputs[0], in1Tensor);\n'
              '    helperSetBroadcastableTensorDescriptor(inputs[1], '
              'outputs[0], in2Tensor);\n'
              '    helperSetTensorDescriptor(outputs[0], outTensor);\n')

Fragment(uuid='NORMALIZED-003037',
         path='/src/cudnn/element_kernel.cu',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n    cudnnOpTensorOp_t opType;')

Fragment(uuid='NORMALIZED-003038',
         path='/src/cudnn/element_kernel.cu',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\n    switch (type) {')

Fragment(uuid='NORMALIZED-003039',
         path='/src/cudnn/element_kernel.cu',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_ADD:')

Fragment(uuid='NORMALIZED-003040',
         path='/src/cudnn/element_kernel.cu',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\n        opType = CUDNN_OP_TENSOR_ADD;')

Fragment(uuid='NORMALIZED-003041',
         path='/src/cudnn/element_kernel.cu',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003042',
         path='/src/cudnn/element_kernel.cu',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_MUL:')

Fragment(uuid='NORMALIZED-003043',
         path='/src/cudnn/element_kernel.cu',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\n        opType = CUDNN_OP_TENSOR_MUL;')

Fragment(uuid='NORMALIZED-003044',
         path='/src/cudnn/element_kernel.cu',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003045',
         path='/src/cudnn/element_kernel.cu',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_MAX:')

Fragment(uuid='NORMALIZED-003046',
         path='/src/cudnn/element_kernel.cu',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n        opType = CUDNN_OP_TENSOR_MAX;')

Fragment(uuid='NORMALIZED-003047',
         path='/src/cudnn/element_kernel.cu',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003048',
         path='/src/cudnn/element_kernel.cu',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_MIN:')

Fragment(uuid='NORMALIZED-003049',
         path='/src/cudnn/element_kernel.cu',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n        opType = CUDNN_OP_TENSOR_MIN;')

Fragment(uuid='NORMALIZED-003050',
         path='/src/cudnn/element_kernel.cu',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003051',
         path='/src/cudnn/element_kernel.cu',
         lineno=159,
         depth=2,
         type='documentation',
         name='',
         text='\n      default:')

Fragment(uuid='NORMALIZED-003052',
         path='/src/cudnn/element_kernel.cu',
         lineno=160,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        fprintf(stderr, "Unsupported Elementwise Operator by '
              'cuDNN: %d\\n", type);')

Fragment(uuid='NORMALIZED-003053',
         path='/src/cudnn/element_kernel.cu',
         lineno=161,
         depth=2,
         type='documentation',
         name='',
         text='\n        assert(false);')

Fragment(uuid='NORMALIZED-003054',
         path='/src/cudnn/element_kernel.cu',
         lineno=162,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003055',
         path='/src/cudnn/element_kernel.cu',
         lineno=163,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    checkCUDNN(cudnnSetOpTensorDescriptor(opDesc, opType, '
              'CUDNN_DATA_FLOAT,')

Fragment(uuid='NORMALIZED-003056',
         path='/src/cudnn/element_kernel.cu',
         lineno=164,
         depth=2,
         type='documentation',
         name='',
         text='\n        CUDNN_NOT_PROPAGATE_NAN));')

Fragment(uuid='NORMALIZED-003057',
         path='/src/cudnn/element_kernel.cu',
         lineno=165,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-003058',
         path='/src/cudnn/element_kernel.cu',
         lineno=166,
         depth=2,
         type='documentation',
         name='',
         text='\n    // No preprocessing for our customized kernel')

Fragment(uuid='NORMALIZED-003059',
         path='/src/cudnn/element_kernel.cu',
         lineno=167,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003060',
         path='/src/cudnn/element_kernel.cu',
         lineno=168,
         depth=2,
         type='documentation',
         name='',
         text='\n  // allocate tensors')

Fragment(uuid='NORMALIZED-003061',
         path='/src/cudnn/element_kernel.cu',
         lineno=169,
         depth=2,
         type='documentation',
         name='',
         text='\n  size_t outputSize = sizeof(DATATYPE);')

Fragment(uuid='NORMALIZED-003062',
         path='/src/cudnn/element_kernel.cu',
         lineno=170,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < outputs[0].numDim; i++)')

Fragment(uuid='NORMALIZED-003063',
         path='/src/cudnn/element_kernel.cu',
         lineno=171,
         depth=2,
         type='documentation',
         name='',
         text='\n    outputSize *= outputs[0].dim[i];')

Fragment(uuid='NORMALIZED-003064',
         path='/src/cudnn/element_kernel.cu',
         lineno=172,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));')

Fragment(uuid='NORMALIZED-003065',
         path='/src/cudnn/element_kernel.cu',
         lineno=173,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003066',
         path='/src/cudnn/element_kernel.cu',
         lineno=174,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003067',
         path='/src/cudnn/element_kernel.cu',
         lineno=175,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Element::unmap(void)\n'
              '{\n'
              '  if (use_kernel()) {\n'
              '    checkCUDNN(cudnnDestroyTensorDescriptor(in1Tensor));\n'
              '    checkCUDNN(cudnnDestroyTensorDescriptor(in2Tensor));\n'
              '    checkCUDNN(cudnnDestroyTensorDescriptor(outTensor));\n'
              '    checkCUDNN(cudnnDestroyOpTensorDescriptor(opDesc));\n'
              '  }\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003068',
         path='/src/cudnn/element_kernel.cu',
         lineno=186,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Element::forward(bool block)')

Fragment(uuid='NORMALIZED-003069',
         path='/src/cudnn/element_kernel.cu',
         lineno=187,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003070',
         path='/src/cudnn/element_kernel.cu',
         lineno=188,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (use_kernel()) {')

Fragment(uuid='NORMALIZED-003071',
         path='/src/cudnn/element_kernel.cu',
         lineno=189,
         depth=2,
         type='documentation',
         name='',
         text='\n    const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-003072',
         path='/src/cudnn/element_kernel.cu',
         lineno=190,
         depth=2,
         type='documentation',
         name='',
         text='\n    const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-003073',
         path='/src/cudnn/element_kernel.cu',
         lineno=191,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    checkCUDNN(cudnnOpTensor(model->dnn, opDesc, &alpha, '
              'in1Tensor, inputs[0].data_ptr,')

Fragment(uuid='NORMALIZED-003074',
         path='/src/cudnn/element_kernel.cu',
         lineno=192,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        &alpha, in2Tensor, inputs[1].data_ptr, &beta, '
              'outTensor, outputs[0].data_ptr));')

Fragment(uuid='NORMALIZED-003075',
         path='/src/cudnn/element_kernel.cu',
         lineno=193,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-003076',
         path='/src/cudnn/element_kernel.cu',
         lineno=194,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    elementwise_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-003077',
         path='/src/cudnn/element_kernel.cu',
         lineno=195,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        outputs[0].volume(), type, inputs[0], inputs[1], '
              'outputs[0],')

Fragment(uuid='NORMALIZED-003078',
         path='/src/cudnn/element_kernel.cu',
         lineno=196,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        (DATATYPE*)inputs[0].data_ptr, '
              '(DATATYPE*)inputs[1].data_ptr,')

Fragment(uuid='NORMALIZED-003079',
         path='/src/cudnn/element_kernel.cu',
         lineno=197,
         depth=2,
         type='documentation',
         name='',
         text='\n\t(DATATYPE*)outputs[0].data_ptr);')

Fragment(uuid='NORMALIZED-003080',
         path='/src/cudnn/element_kernel.cu',
         lineno=198,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003081',
         path='/src/cudnn/element_kernel.cu',
         lineno=199,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (block)')

Fragment(uuid='NORMALIZED-003082',
         path='/src/cudnn/element_kernel.cu',
         lineno=200,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003083',
         path='/src/cudnn/element_kernel.cu',
         lineno=201,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003084',
         path='/src/cudnn/element_kernel.cu',
         lineno=202,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003085',
         path='/src/cudnn/element_kernel.cu',
         lineno=203,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Model::measure_element_cost(Element* ele)')

Fragment(uuid='NORMALIZED-003086',
         path='/src/cudnn/element_kernel.cu',
         lineno=204,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003087',
         path='/src/cudnn/element_kernel.cu',
         lineno=205,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // cudnnOpTensor only supports OP_EW_ADD, OP_EW_MUL, '
              'OP_EW_MAX, OP_EW_MIN')

Fragment(uuid='NORMALIZED-003088',
         path='/src/cudnn/element_kernel.cu',
         lineno=206,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (ele->use_kernel()) {')

Fragment(uuid='NORMALIZED-003089',
         path='/src/cudnn/element_kernel.cu',
         lineno=207,
         depth=2,
         type='documentation',
         name='',
         text='\n    const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-003090',
         path='/src/cudnn/element_kernel.cu',
         lineno=208,
         depth=2,
         type='documentation',
         name='',
         text='\n    const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-003091',
         path='/src/cudnn/element_kernel.cu',
         lineno=209,
         depth=2,
         type='documentation',
         name='',
         text='\n    helperSetBroadcastableTensorDescriptor(ele->inputs[0],')

Fragment(uuid='NORMALIZED-003092',
         path='/src/cudnn/element_kernel.cu',
         lineno=210,
         depth=2,
         type='documentation',
         name='',
         text='\n        ele->outputs[0], inputTensor);')

Fragment(uuid='NORMALIZED-003093',
         path='/src/cudnn/element_kernel.cu',
         lineno=211,
         depth=2,
         type='documentation',
         name='',
         text='\n    helperSetBroadcastableTensorDescriptor(ele->inputs[1],')

Fragment(uuid='NORMALIZED-003094',
         path='/src/cudnn/element_kernel.cu',
         lineno=212,
         depth=2,
         type='documentation',
         name='',
         text='\n        ele->outputs[0], biasTensor);')

Fragment(uuid='NORMALIZED-003095',
         path='/src/cudnn/element_kernel.cu',
         lineno=213,
         depth=2,
         type='documentation',
         name='',
         text='\n    helperSetTensorDescriptor(ele->outputs[0], outputTensor);')

Fragment(uuid='NORMALIZED-003096',
         path='/src/cudnn/element_kernel.cu',
         lineno=214,
         depth=2,
         type='documentation',
         name='',
         text='\n    cudnnOpTensorOp_t opType;')

Fragment(uuid='NORMALIZED-003097',
         path='/src/cudnn/element_kernel.cu',
         lineno=215,
         depth=2,
         type='documentation',
         name='',
         text='\n    switch (ele->type) {')

Fragment(uuid='NORMALIZED-003098',
         path='/src/cudnn/element_kernel.cu',
         lineno=216,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_ADD:')

Fragment(uuid='NORMALIZED-003099',
         path='/src/cudnn/element_kernel.cu',
         lineno=217,
         depth=2,
         type='documentation',
         name='',
         text='\n        opType = CUDNN_OP_TENSOR_ADD;')

Fragment(uuid='NORMALIZED-003100',
         path='/src/cudnn/element_kernel.cu',
         lineno=218,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003101',
         path='/src/cudnn/element_kernel.cu',
         lineno=219,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_MUL:')

Fragment(uuid='NORMALIZED-003102',
         path='/src/cudnn/element_kernel.cu',
         lineno=220,
         depth=2,
         type='documentation',
         name='',
         text='\n        opType = CUDNN_OP_TENSOR_MUL;')

Fragment(uuid='NORMALIZED-003103',
         path='/src/cudnn/element_kernel.cu',
         lineno=221,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003104',
         path='/src/cudnn/element_kernel.cu',
         lineno=222,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_MAX:')

Fragment(uuid='NORMALIZED-003105',
         path='/src/cudnn/element_kernel.cu',
         lineno=223,
         depth=2,
         type='documentation',
         name='',
         text='\n        opType = CUDNN_OP_TENSOR_MAX;')

Fragment(uuid='NORMALIZED-003106',
         path='/src/cudnn/element_kernel.cu',
         lineno=224,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003107',
         path='/src/cudnn/element_kernel.cu',
         lineno=225,
         depth=2,
         type='documentation',
         name='',
         text='\n      case OP_EW_MIN:')

Fragment(uuid='NORMALIZED-003108',
         path='/src/cudnn/element_kernel.cu',
         lineno=226,
         depth=2,
         type='documentation',
         name='',
         text='\n        opType = CUDNN_OP_TENSOR_MIN;')

Fragment(uuid='NORMALIZED-003109',
         path='/src/cudnn/element_kernel.cu',
         lineno=227,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003110',
         path='/src/cudnn/element_kernel.cu',
         lineno=228,
         depth=2,
         type='documentation',
         name='',
         text='\n      default:')

Fragment(uuid='NORMALIZED-003111',
         path='/src/cudnn/element_kernel.cu',
         lineno=229,
         depth=2,
         type='documentation',
         name='',
         text='\n      {')

Fragment(uuid='NORMALIZED-003112',
         path='/src/cudnn/element_kernel.cu',
         lineno=230,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        fprintf(stderr, "Unsupported Elementwise Operator by '
              'cuDNN: %d\\n", ele->type);')

Fragment(uuid='NORMALIZED-003113',
         path='/src/cudnn/element_kernel.cu',
         lineno=231,
         depth=2,
         type='documentation',
         name='',
         text='\n        assert(false);')

Fragment(uuid='NORMALIZED-003114',
         path='/src/cudnn/element_kernel.cu',
         lineno=232,
         depth=2,
         type='documentation',
         name='',
         text='\n      }')

Fragment(uuid='NORMALIZED-003115',
         path='/src/cudnn/element_kernel.cu',
         lineno=233,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003116',
         path='/src/cudnn/element_kernel.cu',
         lineno=234,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    checkCUDNN(cudnnSetOpTensorDescriptor(opDesc, opType, '
              'CUDNN_DATA_FLOAT,')

Fragment(uuid='NORMALIZED-003117',
         path='/src/cudnn/element_kernel.cu',
         lineno=235,
         depth=2,
         type='documentation',
         name='',
         text='\n        CUDNN_NOT_PROPAGATE_NAN));')

Fragment(uuid='NORMALIZED-003118',
         path='/src/cudnn/element_kernel.cu',
         lineno=236,
         depth=2,
         type='documentation',
         name='',
         text='\n  ')

Fragment(uuid='NORMALIZED-003119',
         path='/src/cudnn/element_kernel.cu',
         lineno=237,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003120',
         path='/src/cudnn/element_kernel.cu',
         lineno=238,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-003121',
         path='/src/cudnn/element_kernel.cu',
         lineno=239,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int i = 0; i < REPEAT_TIMES; i++) {')

Fragment(uuid='NORMALIZED-003122',
         path='/src/cudnn/element_kernel.cu',
         lineno=240,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      checkCUDNN(cudnnOpTensor(dnn, opDesc, &alpha, '
              'inputTensor, inputPtr,')

Fragment(uuid='NORMALIZED-003123',
         path='/src/cudnn/element_kernel.cu',
         lineno=241,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          &alpha, biasTensor, filterPtr, &beta, outputTensor, '
              'outputPtr));')

Fragment(uuid='NORMALIZED-003124',
         path='/src/cudnn/element_kernel.cu',
         lineno=242,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003125',
         path='/src/cudnn/element_kernel.cu',
         lineno=243,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-003126',
         path='/src/cudnn/element_kernel.cu',
         lineno=244,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-003127',
         path='/src/cudnn/element_kernel.cu',
         lineno=245,
         depth=2,
         type='documentation',
         name='',
         text='\n    float milliseconds;')

Fragment(uuid='NORMALIZED-003128',
         path='/src/cudnn/element_kernel.cu',
         lineno=246,
         depth=2,
         type='documentation',
         name='',
         text='\n    cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-003129',
         path='/src/cudnn/element_kernel.cu',
         lineno=247,
         depth=2,
         type='documentation',
         name='',
         text='\n    ele->runtime = milliseconds / REPEAT_TIMES;')

Fragment(uuid='NORMALIZED-003130',
         path='/src/cudnn/element_kernel.cu',
         lineno=248,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (print_cost)')

Fragment(uuid='NORMALIZED-003131',
         path='/src/cudnn/element_kernel.cu',
         lineno=249,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      printf("  measure[Element]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",')

Fragment(uuid='NORMALIZED-003132',
         path='/src/cudnn/element_kernel.cu',
         lineno=250,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '             ele->inputs[0].dim[0], ele->inputs[0].dim[1], '
              'ele->inputs[0].dim[2],')

Fragment(uuid='NORMALIZED-003133',
         path='/src/cudnn/element_kernel.cu',
         lineno=251,
         depth=2,
         type='documentation',
         name='',
         text='\n             ele->inputs[0].dim[3], ele->type, ele->runtime);')

Fragment(uuid='NORMALIZED-003134',
         path='/src/cudnn/element_kernel.cu',
         lineno=252,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-003135',
         path='/src/cudnn/element_kernel.cu',
         lineno=253,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    // Use our implementation to measure other elementwise '
              'operators')

Fragment(uuid='NORMALIZED-003136',
         path='/src/cudnn/element_kernel.cu',
         lineno=254,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003137',
         path='/src/cudnn/element_kernel.cu',
         lineno=255,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-003138',
         path='/src/cudnn/element_kernel.cu',
         lineno=256,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int i = 0; i < REPEAT_TIMES; i++) {')

Fragment(uuid='NORMALIZED-003139',
         path='/src/cudnn/element_kernel.cu',
         lineno=257,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      '
              'elementwise_kernel<<<GET_BLOCKS(ele->outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-003140',
         path='/src/cudnn/element_kernel.cu',
         lineno=258,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '          ele->outputs[0].volume(), ele->type, ele->inputs[0], '
              'ele->inputs[1],')

Fragment(uuid='NORMALIZED-003141',
         path='/src/cudnn/element_kernel.cu',
         lineno=259,
         depth=2,
         type='documentation',
         name='',
         text='\n          ele->outputs[0], inputPtr, filterPtr, outputPtr);')

Fragment(uuid='NORMALIZED-003142',
         path='/src/cudnn/element_kernel.cu',
         lineno=260,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003143',
         path='/src/cudnn/element_kernel.cu',
         lineno=261,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-003144',
         path='/src/cudnn/element_kernel.cu',
         lineno=262,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-003145',
         path='/src/cudnn/element_kernel.cu',
         lineno=263,
         depth=2,
         type='documentation',
         name='',
         text='\n    float milliseconds;')

Fragment(uuid='NORMALIZED-003146',
         path='/src/cudnn/element_kernel.cu',
         lineno=264,
         depth=2,
         type='documentation',
         name='',
         text='\n    cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-003147',
         path='/src/cudnn/element_kernel.cu',
         lineno=265,
         depth=2,
         type='documentation',
         name='',
         text='\n    ele->runtime = milliseconds / REPEAT_TIMES;')

Fragment(uuid='NORMALIZED-003148',
         path='/src/cudnn/element_kernel.cu',
         lineno=266,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (print_cost)')

Fragment(uuid='NORMALIZED-003149',
         path='/src/cudnn/element_kernel.cu',
         lineno=267,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      printf("  measure[Element]: i(%d %d %d %d) type(%d) '
              'cost(%.4lf)\\n",')

Fragment(uuid='NORMALIZED-003150',
         path='/src/cudnn/element_kernel.cu',
         lineno=268,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '             ele->inputs[0].dim[0], ele->inputs[0].dim[1], '
              'ele->inputs[0].dim[2],')

Fragment(uuid='NORMALIZED-003151',
         path='/src/cudnn/element_kernel.cu',
         lineno=269,
         depth=2,
         type='documentation',
         name='',
         text='\n             ele->inputs[0].dim[3], ele->type, ele->runtime);')

Fragment(uuid='NORMALIZED-003152',
         path='/src/cudnn/element_kernel.cu',
         lineno=270,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003153',
         path='/src/cudnn/element_kernel.cu',
         lineno=271,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003154',
         path='/src/cudnn/element_kernel.cu',
         lineno=272,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003155',
         path='/src/cudnn/element_kernel.cu',
         lineno=273,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003156',
         path='/src/cudnn/elementwise_unary_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003157',
         path='/src/cudnn/elementwise_unary_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/elementwise_unary_kernel.cu\n')

Fragment(uuid='NORMALIZED-003158',
         path='/src/cudnn/elementwise_unary_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003159',
         path='/src/cudnn/elementwise_unary_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'bool ElementWiseUnary::use_kernel(void) const\n'
              '{\n'
              '  return false;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003160',
         path='/src/cudnn/elementwise_unary_kernel.cu',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void ElementWiseUnary::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003161',
         path='/src/cudnn/elementwise_unary_kernel.cu',
         lineno=29,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void ElementWiseUnary::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003162',
         path='/src/cudnn/elementwise_unary_kernel.cu',
         lineno=34,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void ElementWiseUnary::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003163',
         path='/src/cudnn/elementwise_unary_kernel.cu',
         lineno=40,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_elementwise_unary_cost(ElementWiseUnary* '
              'unary)\n'
              '{\n'
              '  unary->runtime = 0;\n'
              '  if (print_cost)\n'
              '    printf("  measure[ElementWiseUnary]: type(%d) '
              'cost(%.4lf)\\n",\n'
              '           unary->type, unary->runtime);\n'
              '}\n')

Fragment(uuid='NORMALIZED-003164',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003165',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/enlarge_kernel.cu\n')

Fragment(uuid='NORMALIZED-003166',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003167',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\n__global__')

Fragment(uuid='NORMALIZED-003168',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid enlarge_kernel(DATATYPE* dst_ptr,')

Fragment(uuid='NORMALIZED-003169',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n                    const DATATYPE* src_ptr,')

Fragment(uuid='NORMALIZED-003170',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n                    int volume,')

Fragment(uuid='NORMALIZED-003171',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n                    int dst_h,')

Fragment(uuid='NORMALIZED-003172',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n                    int dst_w,')

Fragment(uuid='NORMALIZED-003173',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n                    int src_h,')

Fragment(uuid='NORMALIZED-003174',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n                    int src_w)')

Fragment(uuid='NORMALIZED-003175',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003176',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n  int off_h = (dst_h - src_h) / 2;')

Fragment(uuid='NORMALIZED-003177',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n  int off_w = (dst_w - src_w) / 2;')

Fragment(uuid='NORMALIZED-003178',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n  CUDA_KERNEL_LOOP(i, volume)')

Fragment(uuid='NORMALIZED-003179',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n  {')

Fragment(uuid='NORMALIZED-003180',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n    int h = (i % (dst_h * dst_w)) / dst_w - off_h;')

Fragment(uuid='NORMALIZED-003181',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n    int w = (i % (dst_h * dst_w)) % dst_w - off_w;')

Fragment(uuid='NORMALIZED-003182',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n    if ((h < 0) || (h >= src_h) || (w < 0) || (w >= src_w))')

Fragment(uuid='NORMALIZED-003183',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n      dst_ptr[i] = 0.0f;')

Fragment(uuid='NORMALIZED-003184',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n    else {')

Fragment(uuid='NORMALIZED-003185',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      int offset = (i / (dst_h * dst_w)) * (src_h * src_w) + h '
              '* src_w + w;')

Fragment(uuid='NORMALIZED-003186',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n      dst_ptr[i] = src_ptr[offset];')

Fragment(uuid='NORMALIZED-003187',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003188',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003189',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003190',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003191',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=43,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Enlarge::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003192',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=49,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Enlarge::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003193',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=54,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Enlarge::forward(bool block)\n'
              '{\n'
              '  enlarge_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr, outputs[0].volume(),\n'
              '      outputs[0].dim[2], outputs[0].dim[3], inputs[0].dim[2], '
              'inputs[0].dim[3]);\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003194',
         path='/src/cudnn/enlarge_kernel.cu',
         lineno=63,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_enlarge_cost(Enlarge* enl)\n'
              '{\n'
              '  enl->runtime = 0.0f;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003195',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003196',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu\n')

Fragment(uuid='NORMALIZED-003197',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003198',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '__global__\n'
              'void fuse_conv_batchnorm_alpha_var_kernel(int c_out,\n'
              '                                int c_in_h_w,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* conv_w,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* var)\n'
              '{\n'
              '  int volume = c_out * c_in_h_w;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'sqrt(abs(var[c_out_idx]) + CUDNN_BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003199',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void FuseConvBatchNormAlphaVar::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  assert(inputs[2].numDim == 1);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003200',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void FuseConvBatchNormAlphaVar::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003201',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid FuseConvBatchNormAlphaVar::forward(bool block)')

Fragment(uuid='NORMALIZED-003202',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003203',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  int c_out = outputs[0].dim[0];')

Fragment(uuid='NORMALIZED-003204',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n  int c_in_h_w = outputs[0].volume() / c_out;')

Fragment(uuid='NORMALIZED-003205',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* conv_w_ptr = (DATATYPE*) inputs[0].data_ptr;')

Fragment(uuid='NORMALIZED-003206',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* scale_ptr = (DATATYPE*) inputs[1].data_ptr;')

Fragment(uuid='NORMALIZED-003207',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* var_ptr = (DATATYPE*) inputs[2].data_ptr;')

Fragment(uuid='NORMALIZED-003208',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  '
              'fuse_conv_batchnorm_alpha_var_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-003209',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n      c_out, c_in_h_w, (DATATYPE*)outputs[0].data_ptr,')

Fragment(uuid='NORMALIZED-003210',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n      conv_w_ptr, scale_ptr, var_ptr);')

Fragment(uuid='NORMALIZED-003211',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (block)')

Fragment(uuid='NORMALIZED-003212',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003213',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003214',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003215',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003216',
         path='/src/cudnn/fuse_conv_batchnorm_alpha_var_kernel.cu',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003217',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003218',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/fuse_conv_batchnorm_bias_kernel.cu\n')

Fragment(uuid='NORMALIZED-003219',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003220',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '__global__\n'
              'void fuse_conv_batchnorm_bias_kernel(int volume,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* beta,\n'
              '                                DATATYPE* mean,\n'
              '                                DATATYPE* var)\n'
              '{\n'
              '  // int i = blockIdx.x * blockDim.x + threadIdx.x;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    dst_ptr[i] = beta[i] - scale[i] * mean[i] / sqrt(var[i] + '
              'CUDNN_BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003221',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=34,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void FuseConvBatchNormBias::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 1);\n'
              '  assert(inputs[1].numDim == 1);\n'
              '  assert(inputs[2].numDim == 1);\n'
              '  assert(inputs[3].numDim == 1);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003222',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=44,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void FuseConvBatchNormBias::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003223',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid FuseConvBatchNormBias::forward(bool block)')

Fragment(uuid='NORMALIZED-003224',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003225',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  int volume = outputs[0].volume();')

Fragment(uuid='NORMALIZED-003226',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* scale_ptr = (DATATYPE*) inputs[0].data_ptr;')

Fragment(uuid='NORMALIZED-003227',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* beta_ptr = (DATATYPE*) inputs[1].data_ptr;')

Fragment(uuid='NORMALIZED-003228',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* mean_ptr = (DATATYPE*) inputs[2].data_ptr;')

Fragment(uuid='NORMALIZED-003229',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* var_ptr = (DATATYPE*) inputs[3].data_ptr;')

Fragment(uuid='NORMALIZED-003230',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  '
              'fuse_conv_batchnorm_bias_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-003231',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      volume, (DATATYPE*)outputs[0].data_ptr, scale_ptr, '
              'beta_ptr, mean_ptr, var_ptr);')

Fragment(uuid='NORMALIZED-003232',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (block)')

Fragment(uuid='NORMALIZED-003233',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003234',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003235',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003236',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003237',
         path='/src/cudnn/fuse_conv_batchnorm_bias_kernel.cu',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003238',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2020 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003239',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/fuse_conv_batchnorm_kernel.cu\n')

Fragment(uuid='NORMALIZED-003240',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003241',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '__global__\n'
              'void fuse_conv_batchnorm_kernel(int c_out,\n'
              '                                int c_in_h_w,\n'
              '                                DATATYPE* dst_ptr,\n'
              '                                DATATYPE* conv_w,\n'
              '                                DATATYPE* scale,\n'
              '                                DATATYPE* var)\n'
              '{\n'
              '  int volume = c_out * c_in_h_w;\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'sqrt(abs(var[c_out_idx]) + CUDNN_BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003242',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void FuseConvBatchNorm::map(void)\n'
              '{\n'
              '  assert(inputs[0].numDim == 4);\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003243',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=42,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void FuseConvBatchNorm::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003244',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid FuseConvBatchNorm::forward(bool block)')

Fragment(uuid='NORMALIZED-003245',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003246',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n  int c_out = outputs[0].dim[0];')

Fragment(uuid='NORMALIZED-003247',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n  int c_in_h_w = outputs[0].volume() / c_out;')

Fragment(uuid='NORMALIZED-003248',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* conv_w_ptr = (DATATYPE*) inputs[0].data_ptr;')

Fragment(uuid='NORMALIZED-003249',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* scale_ptr = (DATATYPE*) inputs[1].data_ptr;')

Fragment(uuid='NORMALIZED-003250',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n  DATATYPE* var_ptr = (DATATYPE*) inputs[4].data_ptr;')

Fragment(uuid='NORMALIZED-003251',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  fuse_conv_batchnorm_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-003252',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n      c_out, c_in_h_w, (DATATYPE*)outputs[0].data_ptr,')

Fragment(uuid='NORMALIZED-003253',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n      conv_w_ptr, scale_ptr, var_ptr);')

Fragment(uuid='NORMALIZED-003254',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (block)')

Fragment(uuid='NORMALIZED-003255',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003256',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003257',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003258',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003259',
         path='/src/cudnn/fuse_conv_batchnorm_kernel.cu',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003260',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003261',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/matmul_kernel.cu\n')

Fragment(uuid='NORMALIZED-003262',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003263',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Matmul::map(void)')

Fragment(uuid='NORMALIZED-003264',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003265',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n  // create descriptors')

Fragment(uuid='NORMALIZED-003266',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));')

Fragment(uuid='NORMALIZED-003267',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n  helperSetTensorDescriptor(outputs[0], outputTensor);')

Fragment(uuid='NORMALIZED-003268',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (activation != AC_MODE_NONE) {')

Fragment(uuid='NORMALIZED-003269',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n    cudnnActivationMode_t mode;')

Fragment(uuid='NORMALIZED-003270',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n    switch (activation) {')

Fragment(uuid='NORMALIZED-003271',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n      case AC_MODE_SIGMOID:')

Fragment(uuid='NORMALIZED-003272',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n        mode = CUDNN_ACTIVATION_SIGMOID;')

Fragment(uuid='NORMALIZED-003273',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003274',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n      case AC_MODE_RELU:')

Fragment(uuid='NORMALIZED-003275',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n        mode = CUDNN_ACTIVATION_RELU;')

Fragment(uuid='NORMALIZED-003276',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003277',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n      case AC_MODE_TANH:')

Fragment(uuid='NORMALIZED-003278',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n        mode = CUDNN_ACTIVATION_TANH;')

Fragment(uuid='NORMALIZED-003279',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003280',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n      default:')

Fragment(uuid='NORMALIZED-003281',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n        assert(false);')

Fragment(uuid='NORMALIZED-003282',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003283',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));')

Fragment(uuid='NORMALIZED-003284',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,')

Fragment(uuid='NORMALIZED-003285',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n        CUDNN_NOT_PROPAGATE_NAN, 0.0));')

Fragment(uuid='NORMALIZED-003286',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003287',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n  // allocate tensors')

Fragment(uuid='NORMALIZED-003288',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();')

Fragment(uuid='NORMALIZED-003289',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));')

Fragment(uuid='NORMALIZED-003290',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003291',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003292',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=48,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Matmul::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  }\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003293',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Matmul::forward(bool block)')

Fragment(uuid='NORMALIZED-003294',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003295',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-003296',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-003297',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n  int numDim = outputs[0].numDim;')

Fragment(uuid='NORMALIZED-003298',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n  int m = inputs[0].dim[numDim-2];')

Fragment(uuid='NORMALIZED-003299',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n  int n = inputs[1].dim[numDim-1];')

Fragment(uuid='NORMALIZED-003300',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n  int k = inputs[0].dim[numDim-1];')

Fragment(uuid='NORMALIZED-003301',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n  cublasOperation_t transA, transB;')

Fragment(uuid='NORMALIZED-003302',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n  int lda, ldb, ldc;')

Fragment(uuid='NORMALIZED-003303',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (inputs[0].stride[numDim-2] == 1) {')

Fragment(uuid='NORMALIZED-003304',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n    transA = CUBLAS_OP_N;')

Fragment(uuid='NORMALIZED-003305',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n    lda = inputs[0].stride[numDim-1];')

Fragment(uuid='NORMALIZED-003306',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-003307',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n    assert(inputs[0].stride[numDim-1] == 1);')

Fragment(uuid='NORMALIZED-003308',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n    transA = CUBLAS_OP_T;')

Fragment(uuid='NORMALIZED-003309',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n    lda = inputs[0].stride[numDim-2];')

Fragment(uuid='NORMALIZED-003310',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003311',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (inputs[1].stride[numDim-2] == 1) {')

Fragment(uuid='NORMALIZED-003312',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n    transB = CUBLAS_OP_N;')

Fragment(uuid='NORMALIZED-003313',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n    ldb = inputs[1].stride[numDim-1];')

Fragment(uuid='NORMALIZED-003314',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-003315',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n    assert(inputs[1].stride[numDim-1] == 1);')

Fragment(uuid='NORMALIZED-003316',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n    transB = CUBLAS_OP_T;')

Fragment(uuid='NORMALIZED-003317',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n    ldb = inputs[1].stride[numDim-2];')

Fragment(uuid='NORMALIZED-003318',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003319',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n  ldc = outputs[0].stride[numDim-1];')

Fragment(uuid='NORMALIZED-003320',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (numDim == 2) {')

Fragment(uuid='NORMALIZED-003321',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n    // Normal 2D Matmul')

Fragment(uuid='NORMALIZED-003322',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cublasSgemm(model->blas, transA, transB,')

Fragment(uuid='NORMALIZED-003323',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n        m, n, k, &alpha, (float*)inputs[0].data_ptr, lda,')

Fragment(uuid='NORMALIZED-003324',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        (float*)inputs[1].data_ptr, ldb, &beta, '
              '(float*)outputs[0].data_ptr, ldc));')

Fragment(uuid='NORMALIZED-003325',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-003326',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n    // Batched Matmul')

Fragment(uuid='NORMALIZED-003327',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n    int strideA = inputs[0].stride[numDim-3];')

Fragment(uuid='NORMALIZED-003328',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n    int strideB = inputs[1].stride[numDim-3];')

Fragment(uuid='NORMALIZED-003329',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n    int strideC = outputs[0].stride[numDim-3];')

Fragment(uuid='NORMALIZED-003330',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n    int batch = 1;')

Fragment(uuid='NORMALIZED-003331',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int i = 0; i < numDim-2; i++)')

Fragment(uuid='NORMALIZED-003332',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n      batch *= outputs[0].dim[i];')

Fragment(uuid='NORMALIZED-003333',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    checkCUDA(cublasSgemmStridedBatched(model->blas, transA, '
              'transB,')

Fragment(uuid='NORMALIZED-003334',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        m, n, k, &alpha, (float*)inputs[0].data_ptr, lda, '
              'strideA,')

Fragment(uuid='NORMALIZED-003335',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n        (float*)inputs[1].data_ptr, ldb, strideB,')

Fragment(uuid='NORMALIZED-003336',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=100,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        &beta, (float*)outputs[0].data_ptr, ldc, strideC, '
              'batch));')

Fragment(uuid='NORMALIZED-003337',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=101,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003338',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (activation != AC_MODE_NONE)')

Fragment(uuid='NORMALIZED-003339',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnActivationForward(model->dnn, actiDesc,')

Fragment(uuid='NORMALIZED-003340',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n        &alpha, outputTensor, outputs[0].data_ptr,')

Fragment(uuid='NORMALIZED-003341',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n        &beta, outputTensor, outputs[0].data_ptr));')

Fragment(uuid='NORMALIZED-003342',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (block)')

Fragment(uuid='NORMALIZED-003343',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003344',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003345',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003346',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=110,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Matmul::set_layout(void)\n'
              '{\n'
              '  // CuBLAS uses column-major.\n'
              '  int numDim = outputs[0].numDim;\n'
              '  outputs[0].stride[numDim-2] = 1;\n'
              '  outputs[0].stride[numDim-1] = outputs[0].dim[numDim-2];\n'
              '  int size = outputs[0].dim[numDim-2] * '
              'outputs[0].dim[numDim-1];\n'
              '  for (int i = numDim-3; i >= 0; i--) {\n'
              '    outputs[0].stride[i] = size;\n'
              '    size *= outputs[0].dim[i];\n'
              '  }\n'
              '  assert(size == outputs[0].volume());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003347',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=124,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Model::measure_matmul_cost(Matmul* mm)')

Fragment(uuid='NORMALIZED-003348',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=125,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003349',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=126,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-003350',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=127,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-003351',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=128,
         depth=2,
         type='documentation',
         name='',
         text='\n  int numDim = mm->outputs[0].numDim;')

Fragment(uuid='NORMALIZED-003352',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=129,
         depth=2,
         type='documentation',
         name='',
         text='\n  int m = mm->inputs[0].dim[numDim-2];')

Fragment(uuid='NORMALIZED-003353',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=130,
         depth=2,
         type='documentation',
         name='',
         text='\n  int n = mm->inputs[1].dim[numDim-1];')

Fragment(uuid='NORMALIZED-003354',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=131,
         depth=2,
         type='documentation',
         name='',
         text='\n  int k = mm->inputs[0].dim[numDim-1];')

Fragment(uuid='NORMALIZED-003355',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=132,
         depth=2,
         type='documentation',
         name='',
         text='\n  cublasOperation_t transA, transB;')

Fragment(uuid='NORMALIZED-003356',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=133,
         depth=2,
         type='documentation',
         name='',
         text='\n  int lda, ldb, ldc;')

Fragment(uuid='NORMALIZED-003357',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=134,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  if (mm->inputs[0].stride[numDim-2] == 1 && '
              'mm->inputs[0].stride[numDim-1] >= m) {')

Fragment(uuid='NORMALIZED-003358',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=135,
         depth=2,
         type='documentation',
         name='',
         text='\n    transA = CUBLAS_OP_N;')

Fragment(uuid='NORMALIZED-003359',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=136,
         depth=2,
         type='documentation',
         name='',
         text='\n    lda = mm->inputs[0].stride[numDim-1];')

Fragment(uuid='NORMALIZED-003360',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=137,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-003361',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=138,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    assert(mm->inputs[0].stride[numDim-1] == 1 && '
              'mm->inputs[0].stride[numDim-2] >= k);')

Fragment(uuid='NORMALIZED-003362',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=139,
         depth=2,
         type='documentation',
         name='',
         text='\n    transA = CUBLAS_OP_T;')

Fragment(uuid='NORMALIZED-003363',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=140,
         depth=2,
         type='documentation',
         name='',
         text='\n    lda = mm->inputs[0].stride[numDim-2];')

Fragment(uuid='NORMALIZED-003364',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=141,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003365',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=142,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  if (mm->inputs[1].stride[numDim-2] == 1 && '
              'mm->inputs[1].stride[numDim-1] >= k) {')

Fragment(uuid='NORMALIZED-003366',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=143,
         depth=2,
         type='documentation',
         name='',
         text='\n    transB = CUBLAS_OP_N;')

Fragment(uuid='NORMALIZED-003367',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=144,
         depth=2,
         type='documentation',
         name='',
         text='\n    ldb = mm->inputs[1].stride[numDim-1];')

Fragment(uuid='NORMALIZED-003368',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n  } else {')

Fragment(uuid='NORMALIZED-003369',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    assert(mm->inputs[1].stride[numDim-1] == 1 && '
              'mm->inputs[1].stride[numDim-2] >= n);')

Fragment(uuid='NORMALIZED-003370',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n    transB = CUBLAS_OP_T;')

Fragment(uuid='NORMALIZED-003371',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\n    ldb = mm->inputs[1].stride[numDim-2];')

Fragment(uuid='NORMALIZED-003372',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003373',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n  ldc = mm->outputs[0].stride[numDim-1];')

Fragment(uuid='NORMALIZED-003374',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003375',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (mm->activation != AC_MODE_NONE) {')

Fragment(uuid='NORMALIZED-003376',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n    cudnnActivationMode_t mode;')

Fragment(uuid='NORMALIZED-003377',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n    switch (mm->activation) {')

Fragment(uuid='NORMALIZED-003378',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n      case AC_MODE_SIGMOID:')

Fragment(uuid='NORMALIZED-003379',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n        mode = CUDNN_ACTIVATION_SIGMOID;')

Fragment(uuid='NORMALIZED-003380',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003381',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\n      case AC_MODE_RELU:')

Fragment(uuid='NORMALIZED-003382',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=159,
         depth=2,
         type='documentation',
         name='',
         text='\n        mode = CUDNN_ACTIVATION_RELU;')

Fragment(uuid='NORMALIZED-003383',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=160,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003384',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=161,
         depth=2,
         type='documentation',
         name='',
         text='\n      case AC_MODE_TANH:')

Fragment(uuid='NORMALIZED-003385',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=162,
         depth=2,
         type='documentation',
         name='',
         text='\n        mode = CUDNN_ACTIVATION_TANH;')

Fragment(uuid='NORMALIZED-003386',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=163,
         depth=2,
         type='documentation',
         name='',
         text='\n        break;')

Fragment(uuid='NORMALIZED-003387',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=164,
         depth=2,
         type='documentation',
         name='',
         text='\n      default:')

Fragment(uuid='NORMALIZED-003388',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=165,
         depth=2,
         type='documentation',
         name='',
         text='\n        assert(false);')

Fragment(uuid='NORMALIZED-003389',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=166,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003390',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=167,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,')

Fragment(uuid='NORMALIZED-003391',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=168,
         depth=2,
         type='documentation',
         name='',
         text='\n        CUDNN_NOT_PROPAGATE_NAN, 0.0));')

Fragment(uuid='NORMALIZED-003392',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=169,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003393',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=170,
         depth=2,
         type='documentation',
         name='',
         text='\n  helperSetTensorDescriptor(mm->outputs[0], outputTensor);')

Fragment(uuid='NORMALIZED-003394',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=171,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003395',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=172,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003396',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=173,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {')

Fragment(uuid='NORMALIZED-003397',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=174,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (i == WARMUP_TIMES)')

Fragment(uuid='NORMALIZED-003398',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=175,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-003399',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=176,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (numDim == 2) {')

Fragment(uuid='NORMALIZED-003400',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=177,
         depth=2,
         type='documentation',
         name='',
         text='\n      // Normal 2D Matmul')

Fragment(uuid='NORMALIZED-003401',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=178,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDA(cublasSgemm(blas, transA, transB,')

Fragment(uuid='NORMALIZED-003402',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=179,
         depth=2,
         type='documentation',
         name='',
         text='\n          m, n, k, &alpha, inputPtr, lda,')

Fragment(uuid='NORMALIZED-003403',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=180,
         depth=2,
         type='documentation',
         name='',
         text='\n          filterPtr, ldb, &beta, outputPtr, ldc));')

Fragment(uuid='NORMALIZED-003404',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=181,
         depth=2,
         type='documentation',
         name='',
         text='\n    } else {')

Fragment(uuid='NORMALIZED-003405',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=182,
         depth=2,
         type='documentation',
         name='',
         text='\n      // Batched Matmul')

Fragment(uuid='NORMALIZED-003406',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=183,
         depth=2,
         type='documentation',
         name='',
         text='\n      int strideA = mm->inputs[0].stride[numDim-3];')

Fragment(uuid='NORMALIZED-003407',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=184,
         depth=2,
         type='documentation',
         name='',
         text='\n      int strideB = mm->inputs[1].stride[numDim-3];')

Fragment(uuid='NORMALIZED-003408',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=185,
         depth=2,
         type='documentation',
         name='',
         text='\n      int strideC = mm->outputs[0].stride[numDim-3];')

Fragment(uuid='NORMALIZED-003409',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=186,
         depth=2,
         type='documentation',
         name='',
         text='\n      int batch = 1;')

Fragment(uuid='NORMALIZED-003410',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=187,
         depth=2,
         type='documentation',
         name='',
         text='\n      for (int i = 0; i < numDim-2; i++)')

Fragment(uuid='NORMALIZED-003411',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=188,
         depth=2,
         type='documentation',
         name='',
         text='\n        batch *= mm->outputs[0].dim[i];')

Fragment(uuid='NORMALIZED-003412',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=189,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      checkCUDA(cublasSgemmStridedBatched(blas, transA, transB,')

Fragment(uuid='NORMALIZED-003413',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=190,
         depth=2,
         type='documentation',
         name='',
         text='\n          m, n, k, &alpha, inputPtr, lda, strideA,')

Fragment(uuid='NORMALIZED-003414',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=191,
         depth=2,
         type='documentation',
         name='',
         text='\n          filterPtr, ldb, strideB,')

Fragment(uuid='NORMALIZED-003415',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=192,
         depth=2,
         type='documentation',
         name='',
         text='\n          &beta, outputPtr, ldc, strideC, batch));')

Fragment(uuid='NORMALIZED-003416',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=193,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003417',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=194,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (mm->activation != AC_MODE_NONE)')

Fragment(uuid='NORMALIZED-003418',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=195,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDNN(cudnnActivationForward(dnn, actiDesc,')

Fragment(uuid='NORMALIZED-003419',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=196,
         depth=2,
         type='documentation',
         name='',
         text='\n          &alpha, outputTensor, outputPtr,')

Fragment(uuid='NORMALIZED-003420',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=197,
         depth=2,
         type='documentation',
         name='',
         text='\n          &beta, outputTensor, outputPtr));')

Fragment(uuid='NORMALIZED-003421',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=198,
         depth=2,
         type='documentation',
         name='',
         text='\n  } ')

Fragment(uuid='NORMALIZED-003422',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=199,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-003423',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=200,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-003424',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=201,
         depth=2,
         type='documentation',
         name='',
         text='\n  float milliseconds;')

Fragment(uuid='NORMALIZED-003425',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=202,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-003426',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=203,
         depth=2,
         type='documentation',
         name='',
         text='\n  mm->runtime = milliseconds / REPEAT_TIMES;')

Fragment(uuid='NORMALIZED-003427',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=204,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (print_cost)')

Fragment(uuid='NORMALIZED-003428',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=205,
         depth=2,
         type='documentation',
         name='',
         text='\n    printf("  measure[Matmul]: %s %s acti(%d) cost(%.4lf)\\n",')

Fragment(uuid='NORMALIZED-003429',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=206,
         depth=2,
         type='documentation',
         name='',
         text='\n           mm->inputs[0].to_string("input").c_str(),')

Fragment(uuid='NORMALIZED-003430',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=207,
         depth=2,
         type='documentation',
         name='',
         text='\n           mm->inputs[1].to_string("weight").c_str(),')

Fragment(uuid='NORMALIZED-003431',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=208,
         depth=2,
         type='documentation',
         name='',
         text='\n           mm->activation, mm->runtime);')

Fragment(uuid='NORMALIZED-003432',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=209,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003433',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=210,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003434',
         path='/src/cudnn/matmul_kernel.cu',
         lineno=211,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003435',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003436',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/merge_gconv_kernel.cu\n')

Fragment(uuid='NORMALIZED-003437',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003438',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '__global__\n'
              'void merge_gconv_kernel(DATATYPE* dst_ptr,\n'
              '                        const DATATYPE* src_ptr,\n'
              '                        int volume,\n'
              '                        int c_in_h_w,\n'
              '                        int c_out,\n'
              '                        int count)\n'
              '{\n'
              '  assert(c_out % count == 0);\n'
              '  CUDA_KERNEL_LOOP(i, volume)\n'
              '  {\n'
              '    int mod = i % c_in_h_w;\n'
              '    int div = i / c_in_h_w;\n'
              '    int dst_i = div * c_in_h_w * count + div / (c_out / count) '
              '* c_in_h_w + mod;\n'
              '    dst_ptr[dst_i] = src_ptr[i];\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003439',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void MergeGConv::map(void)\n'
              '{\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003440',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=43,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void MergeGConv::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003441',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid MergeGConv::forward(bool block)')

Fragment(uuid='NORMALIZED-003442',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003443',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n  int c_out = inputs[0].dim[0];')

Fragment(uuid='NORMALIZED-003444',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  int c_in_h_w = inputs[0].volume() / c_out;')

Fragment(uuid='NORMALIZED-003445',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputs[0].dim[1] % inputs[0].dim[1] == 0);')

Fragment(uuid='NORMALIZED-003446',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n  int count = outputs[0].dim[1] / inputs[0].dim[1];')

Fragment(uuid='NORMALIZED-003447',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  assign_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-003448',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      (DATATYPE*)outputs[0].data_ptr, outputs[0].volume(), '
              '0.0f);')

Fragment(uuid='NORMALIZED-003449',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  merge_gconv_kernel<<<GET_BLOCKS(inputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-003450',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      (DATATYPE*)outputs[0].data_ptr, '
              '(DATATYPE*)inputs[0].data_ptr,')

Fragment(uuid='NORMALIZED-003451',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n      inputs[0].volume(), c_in_h_w, c_out, count);')

Fragment(uuid='NORMALIZED-003452',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003453',
         path='/src/cudnn/merge_gconv_kernel.cu',
         lineno=60,
         depth=1,
         type='documentation',
         name='',
         text='\n  if (block)\n    checkCUDA(cudaDeviceSynchronize());\n}\n')

Fragment(uuid='NORMALIZED-003454',
         path='/src/cudnn/mul_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003455',
         path='/src/cudnn/mul_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/mul_kernel.cu\n')

Fragment(uuid='NORMALIZED-003456',
         path='/src/cudnn/mul_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003457',
         path='/src/cudnn/mul_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Mul::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003458',
         path='/src/cudnn/mul_kernel.cu',
         lineno=26,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Mul::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003459',
         path='/src/cudnn/mul_kernel.cu',
         lineno=31,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Mul::forward(bool block)\n'
              '{\n'
              '  assert(false);\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003460',
         path='/src/cudnn/mul_kernel.cu',
         lineno=38,
         depth=1,
         type='documentation',
         name='',
         text='\nvoid Model::measure_mul_cost(Mul* m)\n{\n  assert(false);\n}\n')

Fragment(uuid='NORMALIZED-003461',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003462',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/ops_cudnn.cu\n')

Fragment(uuid='NORMALIZED-003463',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003464',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\nModel::Model()')

Fragment(uuid='NORMALIZED-003465',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n: isTraining(false), print_cost(false)')

Fragment(uuid='NORMALIZED-003466',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003467',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n  //int* a = (int*) malloc(sizeof(int) * 8);')

Fragment(uuid='NORMALIZED-003468',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaSetDevice(0));')

Fragment(uuid='NORMALIZED-003469',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreate(&dnn));')

Fragment(uuid='NORMALIZED-003470',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cublasCreate(&blas));')

Fragment(uuid='NORMALIZED-003471',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n  workSpaceSize = WORK_SPACE_SIZE;')

Fragment(uuid='NORMALIZED-003472',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n  global_unique_id = 100;')

Fragment(uuid='NORMALIZED-003473',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&workSpace, workSpaceSize));')

Fragment(uuid='NORMALIZED-003474',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n  // printf("handle.workSpace = 0x%x\\n", workSpace);')

Fragment(uuid='NORMALIZED-003475',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n  // create all descriptors')

Fragment(uuid='NORMALIZED-003476',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));')

Fragment(uuid='NORMALIZED-003477',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&biasTensor));')

Fragment(uuid='NORMALIZED-003478',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));')

Fragment(uuid='NORMALIZED-003479',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&scaleTensor));')

Fragment(uuid='NORMALIZED-003480',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateFilterDescriptor(&filterDesc));')

Fragment(uuid='NORMALIZED-003481',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateConvolutionDescriptor(&convDesc));')

Fragment(uuid='NORMALIZED-003482',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreatePoolingDescriptor(&poolDesc));')

Fragment(uuid='NORMALIZED-003483',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));')

Fragment(uuid='NORMALIZED-003484',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateOpTensorDescriptor(&opDesc));')

Fragment(uuid='NORMALIZED-003485',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n  // allocate tensors for measuring performance')

Fragment(uuid='NORMALIZED-003486',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&inputPtr, MAX_TENSOR_SIZE));')

Fragment(uuid='NORMALIZED-003487',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&biasPtr, MAX_TENSOR_SIZE));')

Fragment(uuid='NORMALIZED-003488',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&outputPtr, MAX_TENSOR_SIZE));')

Fragment(uuid='NORMALIZED-003489',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&filterPtr, MAX_TENSOR_SIZE));')

Fragment(uuid='NORMALIZED-003490',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n  // create tensors for batch norm')

Fragment(uuid='NORMALIZED-003491',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&scalePtr, MAX_TENSOR_SIZE));')

Fragment(uuid='NORMALIZED-003492',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&runningMean, MAX_TENSOR_SIZE));')

Fragment(uuid='NORMALIZED-003493',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&runningVar, MAX_TENSOR_SIZE));')

Fragment(uuid='NORMALIZED-003494',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&saveMean, MAX_TENSOR_SIZE));')

Fragment(uuid='NORMALIZED-003495',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&saveVar, MAX_TENSOR_SIZE));')

Fragment(uuid='NORMALIZED-003496',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  // create cuda events')

Fragment(uuid='NORMALIZED-003497',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventCreate(&startEvent));')

Fragment(uuid='NORMALIZED-003498',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventCreate(&endEvent));')

Fragment(uuid='NORMALIZED-003499',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003500',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003501',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'float Model::measure_oplist_runtime(const std::vector<OpBase*>& '
              'opBaseList)')

Fragment(uuid='NORMALIZED-003502',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003503',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n  const int num_runs = 100;')

Fragment(uuid='NORMALIZED-003504',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n  // warmup')

Fragment(uuid='NORMALIZED-003505',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int times = 0; times < num_runs; times++)')

Fragment(uuid='NORMALIZED-003506',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=61,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int i = 0; i < opBaseList.size(); i++)')

Fragment(uuid='NORMALIZED-003507',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=62,
         depth=2,
         type='documentation',
         name='',
         text='\n      opBaseList[i]->forward();')

Fragment(uuid='NORMALIZED-003508',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=63,
         depth=2,
         type='documentation',
         name='',
         text='\n  // measure runtime')

Fragment(uuid='NORMALIZED-003509',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=64,
         depth=2,
         type='documentation',
         name='',
         text='\n  // checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003510',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=65,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-003511',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=66,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int times = 0; times < num_runs; times++) {')

Fragment(uuid='NORMALIZED-003512',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=67,
         depth=2,
         type='documentation',
         name='',
         text='\n    for (int i = 0; i < opBaseList.size(); i++)')

Fragment(uuid='NORMALIZED-003513',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=68,
         depth=2,
         type='documentation',
         name='',
         text='\n      opBaseList[i]->forward();')

Fragment(uuid='NORMALIZED-003514',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=69,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003515',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=70,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-003516',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=71,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-003517',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=72,
         depth=2,
         type='documentation',
         name='',
         text='\n  float milliseconds;')

Fragment(uuid='NORMALIZED-003518',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-003519',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n  return milliseconds / num_runs;')

Fragment(uuid='NORMALIZED-003520',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003521',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003522',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=77,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void* Model::allocate_memory(size_t size, const DATATYPE* '
              'data_initial)\n'
              '{\n'
              '  void* ptr;\n'
              '  if (size == 0) {\n'
              '    // Note: Special value for zero-sized tensor\n'
              '    ptr = (void*) 0x1;\n'
              '  } else {\n'
              '    checkCUDA(cudaMalloc(&ptr, size));\n'
              '  }\n'
              '  if (data_initial != NULL) {\n'
              '    checkCUDA(cudaMemcpy(ptr, data_initial, size, '
              'cudaMemcpyDefault));\n'
              '  }\n'
              '  return ptr;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003523',
         path='/src/cudnn/ops_cudnn.cu',
         lineno=92,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'bool Model::copy_memory(DATATYPE* dst, const DATATYPE* src, '
              'size_t size)\n'
              '{\n'
              '  checkCUDA(cudaMemcpy(dst, src, size, cudaMemcpyDefault));\n'
              '  return true;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003524',
         path='/src/cudnn/pad_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003525',
         path='/src/cudnn/pad_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/pad_kernel.cu\n')

Fragment(uuid='NORMALIZED-003526',
         path='/src/cudnn/pad_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003527',
         path='/src/cudnn/pad_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Pad::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003528',
         path='/src/cudnn/pad_kernel.cu',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Pad::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003529',
         path='/src/cudnn/pad_kernel.cu',
         lineno=29,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Pad::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003530',
         path='/src/cudnn/pad_kernel.cu',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_pad_cost(Pad* pad)\n'
              '{\n'
              '  pad->runtime = 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003531',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2018 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003532',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/pool2d_kernel.cu\n')

Fragment(uuid='NORMALIZED-003533',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003534',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Pool2D::map(void)')

Fragment(uuid='NORMALIZED-003535',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=20,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003536',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=21,
         depth=2,
         type='documentation',
         name='',
         text='\n  // create descriptors')

Fragment(uuid='NORMALIZED-003537',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&inputTensor));')

Fragment(uuid='NORMALIZED-003538',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=23,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreateTensorDescriptor(&outputTensor));')

Fragment(uuid='NORMALIZED-003539',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=24,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnCreatePoolingDescriptor(&poolDesc));')

Fragment(uuid='NORMALIZED-003540',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputN = inputs[0].dim[0];')

Fragment(uuid='NORMALIZED-003541',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=26,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputC = inputs[0].dim[1];')

Fragment(uuid='NORMALIZED-003542',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=27,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputH = inputs[0].dim[2];')

Fragment(uuid='NORMALIZED-003543',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=28,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputW = inputs[0].dim[3];')

Fragment(uuid='NORMALIZED-003544',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=29,
         depth=2,
         type='documentation',
         name='',
         text='\n  int padH, padW;')

Fragment(uuid='NORMALIZED-003545',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=30,
         depth=2,
         type='documentation',
         name='',
         text='\n  get_padding(&padH, &padW);')

Fragment(uuid='NORMALIZED-003546',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=31,
         depth=2,
         type='documentation',
         name='',
         text='\n  // set descriptors')

Fragment(uuid='NORMALIZED-003547',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=32,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-003548',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=33,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));')

Fragment(uuid='NORMALIZED-003549',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=34,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudnnPoolingMode_t mode;')

Fragment(uuid='NORMALIZED-003550',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=35,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (type == OP_POOL2D_MAX)')

Fragment(uuid='NORMALIZED-003551',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=36,
         depth=2,
         type='documentation',
         name='',
         text='\n    mode = CUDNN_POOLING_MAX;')

Fragment(uuid='NORMALIZED-003552',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=37,
         depth=2,
         type='documentation',
         name='',
         text='\n  else if (type == OP_POOL2D_AVG)')

Fragment(uuid='NORMALIZED-003553',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=38,
         depth=2,
         type='documentation',
         name='',
         text='\n    mode = CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING;')

Fragment(uuid='NORMALIZED-003554',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=39,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetPooling2dDescriptor(poolDesc, mode, '
              'CUDNN_PROPAGATE_NAN,')

Fragment(uuid='NORMALIZED-003555',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=40,
         depth=2,
         type='documentation',
         name='',
         text='\n      kernelH, kernelW, padH, padW, strideH, strideW));')

Fragment(uuid='NORMALIZED-003556',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\n  int n, c, h, w;')

Fragment(uuid='NORMALIZED-003557',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnGetPooling2dForwardOutputDim(poolDesc, ')

Fragment(uuid='NORMALIZED-003558',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n      inputTensor, &n, &c, &h, &w));')

Fragment(uuid='NORMALIZED-003559',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(n == inputN);')

Fragment(uuid='NORMALIZED-003560',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(c == inputC);')

Fragment(uuid='NORMALIZED-003561',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputs[0].dim[2] == h);')

Fragment(uuid='NORMALIZED-003562',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputs[0].dim[3] == w);')

Fragment(uuid='NORMALIZED-003563',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-003564',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, n, c, h, w));')

Fragment(uuid='NORMALIZED-003565',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (activation != AC_MODE_NONE) {')

Fragment(uuid='NORMALIZED-003566',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnCreateActivationDescriptor(&actiDesc));')

Fragment(uuid='NORMALIZED-003567',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    cudnnActivationMode_t mode = '
              'get_activation_mode(activation);')

Fragment(uuid='NORMALIZED-003568',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnSetActivationDescriptor(actiDesc, mode,')

Fragment(uuid='NORMALIZED-003569',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n        CUDNN_PROPAGATE_NAN, 0.0));')

Fragment(uuid='NORMALIZED-003570',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003571',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n  // allocate tensors')

Fragment(uuid='NORMALIZED-003572',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n  size_t outputSize = sizeof(DATATYPE) * n * c * h * w;')

Fragment(uuid='NORMALIZED-003573',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));')

Fragment(uuid='NORMALIZED-003574',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=59,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003575',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=60,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003576',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=61,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Pool2D::unmap(void)\n'
              '{\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(inputTensor));\n'
              '  checkCUDNN(cudnnDestroyTensorDescriptor(outputTensor));\n'
              '  checkCUDNN(cudnnDestroyPoolingDescriptor(poolDesc));\n'
              '  if (activation != AC_MODE_NONE) {\n'
              '    checkCUDNN(cudnnDestroyActivationDescriptor(actiDesc));\n'
              '  }\n'
              '  // free tensors\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003577',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=73,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Pool2D::forward(bool block)')

Fragment(uuid='NORMALIZED-003578',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=74,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003579',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=75,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-003580',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=76,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-003581',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=77,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnPoolingForward(model->dnn, poolDesc,')

Fragment(uuid='NORMALIZED-003582',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=78,
         depth=2,
         type='documentation',
         name='',
         text='\n      &alpha, inputTensor, inputs[0].data_ptr,')

Fragment(uuid='NORMALIZED-003583',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=79,
         depth=2,
         type='documentation',
         name='',
         text='\n      &beta, outputTensor, outputs[0].data_ptr));')

Fragment(uuid='NORMALIZED-003584',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=80,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (activation != AC_MODE_NONE) {')

Fragment(uuid='NORMALIZED-003585',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=81,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnActivationForward(model->dnn, actiDesc,')

Fragment(uuid='NORMALIZED-003586',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=82,
         depth=2,
         type='documentation',
         name='',
         text='\n        &alpha, outputTensor, outputs[0].data_ptr,')

Fragment(uuid='NORMALIZED-003587',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=83,
         depth=2,
         type='documentation',
         name='',
         text='\n        &beta, outputTensor, outputs[0].data_ptr));')

Fragment(uuid='NORMALIZED-003588',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=84,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003589',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=85,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (block)')

Fragment(uuid='NORMALIZED-003590',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=86,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003591',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003592',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=88,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003593',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Model::measure_pool2d_cost(Pool2D* pool)')

Fragment(uuid='NORMALIZED-003594',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=90,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003595',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=91,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float alpha = 1.0f;')

Fragment(uuid='NORMALIZED-003596',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=92,
         depth=2,
         type='documentation',
         name='',
         text='\n  const float beta = 0.0f;')

Fragment(uuid='NORMALIZED-003597',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=93,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputN = pool->inputs[0].dim[0];')

Fragment(uuid='NORMALIZED-003598',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=94,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputC = pool->inputs[0].dim[1];')

Fragment(uuid='NORMALIZED-003599',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=95,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputH = pool->inputs[0].dim[2];')

Fragment(uuid='NORMALIZED-003600',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=96,
         depth=2,
         type='documentation',
         name='',
         text='\n  int inputW = pool->inputs[0].dim[3];')

Fragment(uuid='NORMALIZED-003601',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=97,
         depth=2,
         type='documentation',
         name='',
         text='\n  int outputH = pool->outputs[0].dim[2];')

Fragment(uuid='NORMALIZED-003602',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=98,
         depth=2,
         type='documentation',
         name='',
         text='\n  int outputW = pool->outputs[0].dim[3];')

Fragment(uuid='NORMALIZED-003603',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=99,
         depth=2,
         type='documentation',
         name='',
         text='\n  int padH, padW;')

Fragment(uuid='NORMALIZED-003604',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=100,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  // Reference: '
              'https://www.tensorflow.org/api_guides/python/nn#Convolution')

Fragment(uuid='NORMALIZED-003605',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=101,
         depth=2,
         type='documentation',
         name='',
         text='\n  switch (pool->padding) {')

Fragment(uuid='NORMALIZED-003606',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=102,
         depth=2,
         type='documentation',
         name='',
         text='\n    case PD_MODE_SAME:')

Fragment(uuid='NORMALIZED-003607',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=103,
         depth=2,
         type='documentation',
         name='',
         text='\n      int totalPadH, totalPadW;')

Fragment(uuid='NORMALIZED-003608',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=104,
         depth=2,
         type='documentation',
         name='',
         text='\n      if (inputH % pool->strideH == 0)')

Fragment(uuid='NORMALIZED-003609',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=105,
         depth=2,
         type='documentation',
         name='',
         text='\n        totalPadH = max(pool->kernelH - pool->strideH, 0);')

Fragment(uuid='NORMALIZED-003610',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=106,
         depth=2,
         type='documentation',
         name='',
         text='\n      else')

Fragment(uuid='NORMALIZED-003611',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=107,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        totalPadH = max(pool->kernelH - (inputH % '
              'pool->strideH), 0);')

Fragment(uuid='NORMALIZED-003612',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=108,
         depth=2,
         type='documentation',
         name='',
         text='\n      if (inputW % pool->strideW == 0)')

Fragment(uuid='NORMALIZED-003613',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=109,
         depth=2,
         type='documentation',
         name='',
         text='\n        totalPadW = max(pool->kernelW - pool->strideW, 0);')

Fragment(uuid='NORMALIZED-003614',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=110,
         depth=2,
         type='documentation',
         name='',
         text='\n      else')

Fragment(uuid='NORMALIZED-003615',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=111,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '        totalPadW = max(pool->kernelW - (inputW % '
              'pool->strideW), 0);')

Fragment(uuid='NORMALIZED-003616',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=112,
         depth=2,
         type='documentation',
         name='',
         text='\n      // assert same padding on both sides')

Fragment(uuid='NORMALIZED-003617',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=113,
         depth=2,
         type='documentation',
         name='',
         text='\n      padH = (totalPadH + 1) / 2;')

Fragment(uuid='NORMALIZED-003618',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='\n      padW = (totalPadW + 1)/ 2;')

Fragment(uuid='NORMALIZED-003619',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=115,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-003620',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=116,
         depth=2,
         type='documentation',
         name='',
         text='\n    case PD_MODE_VALID:')

Fragment(uuid='NORMALIZED-003621',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=117,
         depth=2,
         type='documentation',
         name='',
         text='\n      padH = 0;')

Fragment(uuid='NORMALIZED-003622',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=118,
         depth=2,
         type='documentation',
         name='',
         text='\n      padW = 0;')

Fragment(uuid='NORMALIZED-003623',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=119,
         depth=2,
         type='documentation',
         name='',
         text='\n      break;')

Fragment(uuid='NORMALIZED-003624',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=120,
         depth=2,
         type='documentation',
         name='',
         text='\n    default:')

Fragment(uuid='NORMALIZED-003625',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=121,
         depth=2,
         type='documentation',
         name='',
         text='\n      assert(false);')

Fragment(uuid='NORMALIZED-003626',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=122,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003627',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=123,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(inputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-003628',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=124,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, inputN, inputC, inputH, inputW));')

Fragment(uuid='NORMALIZED-003629',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=125,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudnnPoolingMode_t mode;')

Fragment(uuid='NORMALIZED-003630',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=126,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (pool->type == OP_POOL2D_MAX)')

Fragment(uuid='NORMALIZED-003631',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=127,
         depth=2,
         type='documentation',
         name='',
         text='\n    mode = CUDNN_POOLING_MAX;')

Fragment(uuid='NORMALIZED-003632',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=128,
         depth=2,
         type='documentation',
         name='',
         text='\n  else if (pool->type == OP_POOL2D_AVG)')

Fragment(uuid='NORMALIZED-003633',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=129,
         depth=2,
         type='documentation',
         name='',
         text='\n    mode = CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING;')

Fragment(uuid='NORMALIZED-003634',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=130,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnSetPooling2dDescriptor(poolDesc, mode,')

Fragment(uuid='NORMALIZED-003635',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=131,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      CUDNN_PROPAGATE_NAN, pool->kernelH, pool->kernelW, padH, '
              'padW,')

Fragment(uuid='NORMALIZED-003636',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=132,
         depth=2,
         type='documentation',
         name='',
         text='\n      pool->strideH, pool->strideW));')

Fragment(uuid='NORMALIZED-003637',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=133,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetActivationDescriptor(actiDesc, '
              'CUDNN_ACTIVATION_RELU,')

Fragment(uuid='NORMALIZED-003638',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=134,
         depth=2,
         type='documentation',
         name='',
         text='\n        CUDNN_NOT_PROPAGATE_NAN, 0.0));')

Fragment(uuid='NORMALIZED-003639',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=135,
         depth=2,
         type='documentation',
         name='',
         text='\n  int n, c, h, w;')

Fragment(uuid='NORMALIZED-003640',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=136,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDNN(cudnnGetPooling2dForwardOutputDim(poolDesc,')

Fragment(uuid='NORMALIZED-003641',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=137,
         depth=2,
         type='documentation',
         name='',
         text='\n      inputTensor, &n, &c, &h, &w));')

Fragment(uuid='NORMALIZED-003642',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=138,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(n == inputN);')

Fragment(uuid='NORMALIZED-003643',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=139,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(c == inputC);')

Fragment(uuid='NORMALIZED-003644',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=140,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputH == h);')

Fragment(uuid='NORMALIZED-003645',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=141,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputW == w);')

Fragment(uuid='NORMALIZED-003646',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=142,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  checkCUDNN(cudnnSetTensor4dDescriptor(outputTensor, '
              'CUDNN_TENSOR_NCHW,')

Fragment(uuid='NORMALIZED-003647',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=143,
         depth=2,
         type='documentation',
         name='',
         text='\n      CUDNN_DATA_FLOAT, n, c, h, w));')

Fragment(uuid='NORMALIZED-003648',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=144,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  size_t inputSize = sizeof(DATATYPE) * inputN * inputC * '
              'inputH * inputW;')

Fragment(uuid='NORMALIZED-003649',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=145,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  size_t outputSize = sizeof(DATATYPE) * inputN * inputC * '
              'outputH * outputW;')

Fragment(uuid='NORMALIZED-003650',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=146,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(inputSize < MAX_TENSOR_SIZE);')

Fragment(uuid='NORMALIZED-003651',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=147,
         depth=2,
         type='documentation',
         name='',
         text='\n  assert(outputSize < MAX_TENSOR_SIZE);')

Fragment(uuid='NORMALIZED-003652',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=148,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003653',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=149,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < WARMUP_TIMES + REPEAT_TIMES; i++) {')

Fragment(uuid='NORMALIZED-003654',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=150,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (i == WARMUP_TIMES) {')

Fragment(uuid='NORMALIZED-003655',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=151,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-003656',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=152,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003657',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='\n    checkCUDNN(cudnnPoolingForward(dnn, poolDesc,')

Fragment(uuid='NORMALIZED-003658',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=154,
         depth=2,
         type='documentation',
         name='',
         text='\n        &alpha, inputTensor, inputPtr,')

Fragment(uuid='NORMALIZED-003659',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=155,
         depth=2,
         type='documentation',
         name='',
         text='\n        &beta, outputTensor, outputPtr));')

Fragment(uuid='NORMALIZED-003660',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=156,
         depth=2,
         type='documentation',
         name='',
         text='\n    if (pool->activation != AC_MODE_NONE) {')

Fragment(uuid='NORMALIZED-003661',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=157,
         depth=2,
         type='documentation',
         name='',
         text='\n      checkCUDNN(cudnnActivationForward(dnn, actiDesc,')

Fragment(uuid='NORMALIZED-003662',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=158,
         depth=2,
         type='documentation',
         name='',
         text='\n          &alpha, outputTensor, outputPtr,')

Fragment(uuid='NORMALIZED-003663',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=159,
         depth=2,
         type='documentation',
         name='',
         text='\n          &beta, outputTensor, outputPtr));')

Fragment(uuid='NORMALIZED-003664',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=160,
         depth=2,
         type='documentation',
         name='',
         text='\n    }')

Fragment(uuid='NORMALIZED-003665',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=161,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003666',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=162,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-003667',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=163,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-003668',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=164,
         depth=2,
         type='documentation',
         name='',
         text='\n  float milliseconds;')

Fragment(uuid='NORMALIZED-003669',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=165,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-003670',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=166,
         depth=2,
         type='documentation',
         name='',
         text='\n  pool->runtime = milliseconds / REPEAT_TIMES;')

Fragment(uuid='NORMALIZED-003671',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=167,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (print_cost)')

Fragment(uuid='NORMALIZED-003672',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=168,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    printf("  measure[Pool2D]: i(%d %d %d %d) k(%d %d) s(%d %d) '
              'p(%d %d) cost(%.4lf)\\n",')

Fragment(uuid='NORMALIZED-003673',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=169,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '           inputN, inputC, inputH, inputW, pool->kernelH, '
              'pool->kernelW,')

Fragment(uuid='NORMALIZED-003674',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=170,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '           pool->strideH, pool->strideW, padH, padW, '
              'pool->runtime);')

Fragment(uuid='NORMALIZED-003675',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=171,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003676',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=172,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003677',
         path='/src/cudnn/pool2d_kernel.cu',
         lineno=173,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003678',
         path='/src/cudnn/reduce_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003679',
         path='/src/cudnn/reduce_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/reduce_kernel.cu\n')

Fragment(uuid='NORMALIZED-003680',
         path='/src/cudnn/reduce_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003681',
         path='/src/cudnn/reduce_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Reduce::map(void)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003682',
         path='/src/cudnn/reduce_kernel.cu',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Reduce::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003683',
         path='/src/cudnn/reduce_kernel.cu',
         lineno=30,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Reduce::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003684',
         path='/src/cudnn/reduce_kernel.cu',
         lineno=36,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_reduce_cost(Reduce* reduce)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  reduce->runtime = 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003685',
         path='/src/cudnn/reshape_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003686',
         path='/src/cudnn/reshape_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/reshape_kernel.cu\n')

Fragment(uuid='NORMALIZED-003687',
         path='/src/cudnn/reshape_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003688',
         path='/src/cudnn/reshape_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Reshape::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003689',
         path='/src/cudnn/reshape_kernel.cu',
         lineno=26,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Reshape::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003690',
         path='/src/cudnn/reshape_kernel.cu',
         lineno=31,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Reshape::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003691',
         path='/src/cudnn/reshape_kernel.cu',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_reshape_cost(Reshape* reshape)\n'
              '{\n'
              '  // FIXME: assume the cost is zero for now\n'
              '  reshape->runtime = 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003692',
         path='/src/cudnn/resize_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003693',
         path='/src/cudnn/resize_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/resize_kernel.cu\n')

Fragment(uuid='NORMALIZED-003694',
         path='/src/cudnn/resize_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003695',
         path='/src/cudnn/resize_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Resize::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003696',
         path='/src/cudnn/resize_kernel.cu',
         lineno=26,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Resize::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003697',
         path='/src/cudnn/resize_kernel.cu',
         lineno=31,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Resize::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003698',
         path='/src/cudnn/resize_kernel.cu',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_resize_cost(Resize* resize)\n'
              '{\n'
              '  // FIXME: assume the cost is zero for now\n'
              '  resize->runtime = 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003699',
         path='/src/cudnn/shape_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003700',
         path='/src/cudnn/shape_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/shape_kernel.cu\n')

Fragment(uuid='NORMALIZED-003701',
         path='/src/cudnn/shape_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003702',
         path='/src/cudnn/shape_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Shape::map(void)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003703',
         path='/src/cudnn/shape_kernel.cu',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Shape::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003704',
         path='/src/cudnn/shape_kernel.cu',
         lineno=30,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Shape::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003705',
         path='/src/cudnn/shape_kernel.cu',
         lineno=36,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_shape_cost(Shape* shape)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  shape->runtime = 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003706',
         path='/src/cudnn/slice_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003707',
         path='/src/cudnn/slice_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/slice_kernel.cu\n')

Fragment(uuid='NORMALIZED-003708',
         path='/src/cudnn/slice_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003709',
         path='/src/cudnn/slice_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Slice::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE) * outputs[0].volume();\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003710',
         path='/src/cudnn/slice_kernel.cu',
         lineno=26,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Slice::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003711',
         path='/src/cudnn/slice_kernel.cu',
         lineno=31,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Slice::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003712',
         path='/src/cudnn/slice_kernel.cu',
         lineno=37,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_slice_cost(Slice* slice)\n'
              '{\n'
              '  // FIXME: assume the cost is zero for now\n'
              '  slice->runtime = 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003713',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003714',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/squeeze_kernel.cu\n')

Fragment(uuid='NORMALIZED-003715',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003716',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Squeeze::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE);\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003717',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=28,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Squeeze::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003718',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Squeeze::forward(bool block)\n'
              '{\n'
              '  copy_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (float*)outputs[0].data_ptr, (float*)inputs[0].data_ptr, '
              'outputs[0].volume());\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003719',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Model::measure_squeeze_cost(Squeeze* sqz)')

Fragment(uuid='NORMALIZED-003720',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003721',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003722',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-003723',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < REPEAT_TIMES; i++) {')

Fragment(uuid='NORMALIZED-003724',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    copy_kernel<<<GET_BLOCKS(sqz->outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-003725',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n        outputPtr, inputPtr, sqz->outputs[0].volume());')

Fragment(uuid='NORMALIZED-003726',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003727',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-003728',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-003729',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  float milliseconds;')

Fragment(uuid='NORMALIZED-003730',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-003731',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n  sqz->runtime = milliseconds / REPEAT_TIMES;')

Fragment(uuid='NORMALIZED-003732',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (print_cost)')

Fragment(uuid='NORMALIZED-003733',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    printf("  measure[Squeeeze]: cost(%.4lf)\\n", sqz->runtime);')

Fragment(uuid='NORMALIZED-003734',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003735',
         path='/src/cudnn/squeeze_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003736',
         path='/src/cudnn/topk_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003737',
         path='/src/cudnn/topk_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/topk_kernel.cu\n')

Fragment(uuid='NORMALIZED-003738',
         path='/src/cudnn/topk_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003739',
         path='/src/cudnn/topk_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void TopK::map(void)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '  checkCUDA(cudaMalloc(&outputs[1].data_ptr, '
              'outputs[1].volume() * sizeof(DATATYPE)));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003740',
         path='/src/cudnn/topk_kernel.cu',
         lineno=26,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void TopK::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '  checkCUDA(cudaFree(outputs[1].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003741',
         path='/src/cudnn/topk_kernel.cu',
         lineno=32,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void TopK::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003742',
         path='/src/cudnn/topk_kernel.cu',
         lineno=38,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_topk_cost(TopK* topk)\n'
              '{\n'
              '  // TODO: use cudnn reduce tensor\n'
              '  topk->runtime = 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003743',
         path='/src/cudnn/transpose_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003744',
         path='/src/cudnn/transpose_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/transpose_kernel.cu\n')

Fragment(uuid='NORMALIZED-003745',
         path='/src/cudnn/transpose_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003746',
         path='/src/cudnn/transpose_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Transpose::map(void)\n'
              '{\n'
              '  //TODO: for now the output and input share the same instance\n'
              '  outputs[0].data_ptr = inputs[0].data_ptr;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003747',
         path='/src/cudnn/transpose_kernel.cu',
         lineno=25,
         depth=1,
         type='documentation',
         name='',
         text='\nvoid Transpose::unmap(void)\n{\n}\n')

Fragment(uuid='NORMALIZED-003748',
         path='/src/cudnn/transpose_kernel.cu',
         lineno=29,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Transpose::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003749',
         path='/src/cudnn/transpose_kernel.cu',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_transpose_cost(Transpose* transpose)\n'
              '{\n'
              '  // Transpose requires no kernel launch\n'
              '  transpose->runtime = 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003750',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003751',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/unsqueeze_kernel.cu\n')

Fragment(uuid='NORMALIZED-003752',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003753',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Unsqueeze::map(void)\n'
              '{\n'
              '  // allocate tensors\n'
              '  size_t outputSize = sizeof(DATATYPE);\n'
              '  for (int i = 0; i < outputs[0].numDim; i++)\n'
              '    outputSize *= outputs[0].dim[i];\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, outputSize));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003754',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=28,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Unsqueeze::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003755',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=33,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Unsqueeze::forward(bool block)\n'
              '{\n'
              '  copy_kernel<<<GET_BLOCKS(outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(\n'
              '      (float*)outputs[0].data_ptr, (float*)inputs[0].data_ptr, '
              'outputs[0].volume());\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003756',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=41,
         depth=2,
         type='documentation',
         name='',
         text='\nvoid Model::measure_unsqueeze_cost(Unsqueeze* unsqz)')

Fragment(uuid='NORMALIZED-003757',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=42,
         depth=2,
         type='documentation',
         name='',
         text='\n{')

Fragment(uuid='NORMALIZED-003758',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=43,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaDeviceSynchronize());')

Fragment(uuid='NORMALIZED-003759',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=44,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(startEvent));')

Fragment(uuid='NORMALIZED-003760',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=45,
         depth=2,
         type='documentation',
         name='',
         text='\n  for (int i = 0; i < REPEAT_TIMES; i++) {')

Fragment(uuid='NORMALIZED-003761',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=46,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    copy_kernel<<<GET_BLOCKS(unsqz->outputs[0].volume()), '
              'CUDA_NUM_THREADS>>>(')

Fragment(uuid='NORMALIZED-003762',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=47,
         depth=2,
         type='documentation',
         name='',
         text='\n        outputPtr, inputPtr, unsqz->outputs[0].volume());')

Fragment(uuid='NORMALIZED-003763',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=48,
         depth=2,
         type='documentation',
         name='',
         text='\n  }')

Fragment(uuid='NORMALIZED-003764',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=49,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventRecord(endEvent));')

Fragment(uuid='NORMALIZED-003765',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=50,
         depth=2,
         type='documentation',
         name='',
         text='\n  checkCUDA(cudaEventSynchronize(endEvent));')

Fragment(uuid='NORMALIZED-003766',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=51,
         depth=2,
         type='documentation',
         name='',
         text='\n  float milliseconds;')

Fragment(uuid='NORMALIZED-003767',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=52,
         depth=2,
         type='documentation',
         name='',
         text='\n  cudaEventElapsedTime(&milliseconds, startEvent, endEvent);')

Fragment(uuid='NORMALIZED-003768',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=53,
         depth=2,
         type='documentation',
         name='',
         text='\n  unsqz->runtime = milliseconds / REPEAT_TIMES;')

Fragment(uuid='NORMALIZED-003769',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=54,
         depth=2,
         type='documentation',
         name='',
         text='\n  if (print_cost)')

Fragment(uuid='NORMALIZED-003770',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=55,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    printf("  measure[Squeeeze]: cost(%.4lf)\\n", '
              'unsqz->runtime);')

Fragment(uuid='NORMALIZED-003771',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=56,
         depth=2,
         type='documentation',
         name='',
         text='\n}')

Fragment(uuid='NORMALIZED-003772',
         path='/src/cudnn/unsqueeze_kernel.cu',
         lineno=57,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='NORMALIZED-003773',
         path='/src/cudnn/where_kernel.cu',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='/* Copyright 2019 Stanford\n'
              ' *\n'
              ' * Licensed under the Apache License, Version 2.0 (the '
              '"License");\n'
              ' * you may not use this file except in compliance with the '
              'License.\n'
              ' * You may obtain a copy of the License at\n'
              ' *\n'
              ' *     http://www.apache.org/licenses/LICENSE-2.0\n'
              ' *\n'
              ' * Unless required by applicable law or agreed to in writing, '
              'software\n'
              ' * distributed under the License is distributed on an "AS IS" '
              'BASIS,\n'
              ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express '
              'or implied.\n'
              ' * See the License for the specific language governing '
              'permissions and\n'
              ' * limitations under the License.\n'
              ' */\n')

Fragment(uuid='NORMALIZED-003774',
         path='/src/cudnn/where_kernel.cu',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/cudnn/where_kernel.cu\n')

Fragment(uuid='NORMALIZED-003775',
         path='/src/cudnn/where_kernel.cu',
         lineno=15,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              '#include "taso/ops.h"\n'
              '#include "taso/cuda_helper.h"\n'
              'using namespace taso;\n')

Fragment(uuid='NORMALIZED-003776',
         path='/src/cudnn/where_kernel.cu',
         lineno=19,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Where::map(void)\n'
              '{\n'
              '  checkCUDA(cudaMalloc(&outputs[0].data_ptr, '
              'outputs[0].volume() * sizeof(DATATYPE)));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003777',
         path='/src/cudnn/where_kernel.cu',
         lineno=24,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Where::unmap(void)\n'
              '{\n'
              '  checkCUDA(cudaFree(outputs[0].data_ptr));\n'
              '}\n')

Fragment(uuid='NORMALIZED-003778',
         path='/src/cudnn/where_kernel.cu',
         lineno=29,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Where::forward(bool block)\n'
              '{\n'
              '  if (block)\n'
              '    checkCUDA(cudaDeviceSynchronize());\n'
              '}\n')

Fragment(uuid='NORMALIZED-003779',
         path='/src/cudnn/where_kernel.cu',
         lineno=35,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'void Model::measure_where_cost(Where* where)\n'
              '{\n'
              '  where->runtime = 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003780',
         path='/src/dnnl/activation_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/activation_mkl.cc\n')

Fragment(uuid='NORMALIZED-003781',
         path='/src/dnnl/activation_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='create_net',
         text='static void create_net(Activation* act, DNNLNet& net, engine& '
              'eng, stream& strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr) {\n'
              '  // dimensions.\n'
              '  assert(act->inputs[0].volume() == act->outputs[0].volume());\n'
              '  // dnnl::eltwise requires the same layout between input and '
              'output.\n'
              '  '
              'assert(act->outputs[0].has_same_shape_stride_split(act->inputs[0]));\n'
              '  // data descriptors.\n'
              '  auto memDesc = get_memory_desc(act->outputs[0]);\n'
              '  // data memories.\n'
              '  inputMem = memory(memDesc, eng, inputPtr);\n'
              '  outputMem = memory(memDesc, eng, outputPtr);\n'
              '  // operator primitives.\n'
              '  algorithm ops_algo = algorithm::eltwise_relu;  // relu as '
              'default\n'
              '  float ops_alpha = 0.0f;  // relu negative slope\n'
              '  float ops_beta = 0.0f;\n'
              '  switch (act->type) {\n'
              '    case OP_RELU:\n'
              '    case OP_LEAKYRELU:\n'
              '      break;\n'
              '    case OP_SIGMOID:\n'
              '      ops_algo = dnnl::algorithm::eltwise_logistic;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    case OP_TANH:\n'
              '      ops_algo = dnnl::algorithm::eltwise_tanh;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  auto actOpDesc = eltwise_forward::desc(\n'
              '      prop_kind::forward_inference, ops_algo, memDesc, '
              'ops_alpha, ops_beta);\n'
              '  auto actPrimDesc = eltwise_forward::primitive_desc(actOpDesc, '
              'eng);\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  net.push_back({eltwise_forward(actPrimDesc),\n'
              '      {{DNNL_ARG_SRC, inputMem},\n'
              '      {DNNL_ARG_DST, outputMem}}});\n'
              '}\n')

Fragment(uuid='NORMALIZED-003782',
         path='/src/dnnl/batchnorm_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/batchnorm_mkl.cc\n')

Fragment(uuid='NORMALIZED-003783',
         path='/src/dnnl/batchnorm_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='create_net',
         text='static void create_net(BatchNorm* bn, DNNLNet& net, engine& '
              'eng, stream& strm,\n'
              '    memory& inputMem, memory& outputMem, memory& meanMem, '
              'memory& varMem, memory& scaleShiftMem,\n'
              '    void* inputPtr, void* outputPtr, void* meanPtr, void* '
              'varPtr, void* biasPtr,\n'
              '    bool isTraining) {\n'
              '  const float eps = epsilon;\n'
              '  // dimensions.\n'
              '  int inputC = bn->inputs[0].dim[1];\n'
              '  // data sizes.\n'
              '  const memory::dims statSize = { inputC };\n'
              '  const memory::dims scaleShiftSize = { 2, inputC };\n'
              '  // data descriptors.\n'
              '  auto dataMemDesc = get_memory_desc(bn->inputs[0]);\n'
              '  auto statMemDesc = memory::desc(statSize, DNNL_DEF_DTYPE, '
              'memory::format_tag::x);\n'
              '  auto scaleShiftMemDesc = memory::desc(scaleShiftSize, '
              'DNNL_DEF_DTYPE, memory::format_tag::nc);\n'
              '  // data memories.\n'
              '  inputMem = memory(dataMemDesc, eng, inputPtr);\n'
              '  outputMem = memory(dataMemDesc, eng, outputPtr);\n'
              '  scaleShiftMem = memory(scaleShiftMemDesc, eng, biasPtr);\n'
              '  meanMem = memory(statMemDesc, eng, meanPtr);\n'
              '  varMem = memory(statMemDesc, eng, varPtr);\n'
              '  // operator primitives.\n'
              '  normalization_flags flags = '
              'normalization_flags::use_scale_shift | '
              'normalization_flags::use_global_stats;\n'
              '  prop_kind prop = prop_kind::forward_inference;\n'
              '#ifdef DO_TRAINING\n'
              '  if (isTraining) {\n'
              '    flags = normalization_flags::use_scale_shift;\n'
              '    prop = prop_kind::forward_training;\n'
              '    std::fill((DATATYPE*)biasPtr, (DATATYPE*)biasPtr + 2 * '
              'inputC, 0.5);\n'
              '    std::fill((DATATYPE*)meanPtr, (DATATYPE*)meanPtr + inputC, '
              '0.5);\n'
              '    std::fill((DATATYPE*)varPtr, (DATATYPE*)varPtr + inputC, '
              '0.5);\n'
              '  } else {\n'
              '    flags |= normalization_flags::use_global_stats;\n'
              '  }\n'
              '#endif\n'
              '  auto bnOpDesc = batch_normalization_forward::desc(\n'
              '      prop, dataMemDesc, eps, flags);\n'
              '  auto bnPrimDesc = '
              'batch_normalization_forward::primitive_desc(bnOpDesc, eng);\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  assert(bnPrimDesc.dst_desc() == outputMem.get_desc());\n'
              '  net.push_back({batch_normalization_forward(bnPrimDesc),\n'
              '      {{DNNL_ARG_SRC, inputMem},\n'
              '      {DNNL_ARG_MEAN, meanMem},\n'
              '      {DNNL_ARG_VARIANCE, varMem},\n'
              '      {DNNL_ARG_SCALE_SHIFT, scaleShiftMem},\n'
              '      {DNNL_ARG_DST, outputMem}}});\n'
              '}\n')

Fragment(uuid='NORMALIZED-003784',
         path='/src/dnnl/broadcast_add_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/broadcast_add_mkl.cc\n')

Fragment(uuid='NORMALIZED-003785',
         path='/src/dnnl/broadcast_add_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='broadcast_add_kernel',
         text='void broadcast_add_kernel(int batch, int channel, int '
              'h_w_size,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* _data, const DATATYPE* '
              '_bias) {\n'
              '  int volume = batch * channel * h_w_size;\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < volume; i++) {\n'
              '    int channel_idx = i % h_w_size;\n'
              '    dst_ptr[i] = _data[i] + _bias[channel_idx];\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003786',
         path='/src/dnnl/cast_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/cast_mkl.cc\n')

Fragment(uuid='NORMALIZED-003787',
         path='/src/dnnl/concat_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/concat_mkl.cc\n')

Fragment(uuid='NORMALIZED-003788',
         path='/src/dnnl/concat_mkl.cc',
         lineno=22,
         depth=2,
         type='function_decl',
         name='create_net',
         text='static void create_net(Concat* concat, DNNLNet& net, engine& '
              'eng, stream& strm,\n'
              '    std::vector<memory>& inputMems, memory& outputMem,\n'
              '    std::vector<void*> inputPtrs, void* outputPtr) {\n'
              '  // data descriptors.\n'
              '  auto outputMemDesc = get_memory_desc(concat->outputs[0]);\n'
              '  std::vector<memory::desc> inputMemDescs;\n'
              '  for (int i = 0; i < concat->numInputs; i++) {\n'
              '    '
              'inputMemDescs.push_back(get_memory_desc(concat->inputs[i]));\n'
              '  }\n'
              '  // data memories.\n'
              '  outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '  assert(inputMems.size() == (size_t)concat->numInputs);\n'
              '  assert(inputPtrs.size() == (size_t)concat->numInputs);\n'
              '  for (int i = 0; i < concat->numInputs; i++) {\n'
              '    inputMems[i] = memory(inputMemDescs[i], eng, '
              'inputPtrs[i]);\n'
              '  }\n'
              '  // operator primitives.\n'
              '  auto concatPrimDesc = concat::primitive_desc(concat->axis, '
              'inputMemDescs, eng);\n'
              '  assert(concatPrimDesc.dst_desc() == outputMemDesc);\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  DNNLNet::value_type::second_type args;\n'
              '  for (int i = 0; i < concat->numInputs; i++) {\n'
              '    args[DNNL_ARG_MULTIPLE_SRC + i] = inputMems[i];\n'
              '  }\n'
              '  args[DNNL_ARG_DST] = outputMem;\n'
              '  net.push_back({::dnnl::concat(concatPrimDesc), args});\n'
              '}\n')

Fragment(uuid='NORMALIZED-003789',
         path='/src/dnnl/constant_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/constant_mkl.cc\n')

Fragment(uuid='NORMALIZED-003790',
         path='/src/dnnl/conv2d_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/conv2d_mkl.cc\n')

Fragment(uuid='NORMALIZED-003791',
         path='/src/dnnl/conv2d_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='create_net',
         text='static void create_net(Conv2D* conv, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '    memory& inputMem, memory& outputMem, memory& filterMem, '
              'memory& biasMem,\n'
              '    void* inputPtr, void* outputPtr, void* filterPtr, void* '
              'biasPtr) {\n'
              '  // dimensions.\n'
              '  int inputC = conv->inputs[0].dim[1];\n'
              '  int outputC = conv->outputs[0].dim[1];\n'
              '  assert(outputC == conv->inputs[1].dim[0]);\n'
              '  int kernelH = conv->inputs[1].dim[2];\n'
              '  int kernelW = conv->inputs[1].dim[3];\n'
              '  int groups = inputC / conv->inputs[1].dim[1];\n'
              '  assert(conv->inputs[1].default_layout());\n'
              '  int padH, padW;\n'
              '  conv->get_padding(&padH, &padW);\n'
              '  // data sizes.\n'
              '  const memory::dims inputSize = '
              'memory::dims(conv->inputs[0].dim, conv->inputs[0].dim + '
              'conv->inputs[0].numDim);\n'
              '  const memory::dims outputSize = '
              'memory::dims(conv->outputs[0].dim, conv->outputs[0].dim + '
              'conv->outputs[0].numDim);\n'
              '  const memory::dims filterSize = { groups, outputC / groups, '
              'inputC / groups, kernelH, kernelW };\n'
              '  const memory::dims biasSize = { outputC };\n'
              '  const memory::dims strideSize = { conv->strideH, '
              'conv->strideW };\n'
              '  const memory::dims paddingSize = { padH, padW };\n'
              '  // data descriptors.\n'
              '  auto inputMemDesc = get_memory_desc(conv->inputs[0]);\n'
              '  auto outputMemDesc = get_memory_desc(conv->outputs[0]);\n'
              '  auto filterMemDesc = memory::desc(filterSize, DNNL_DEF_DTYPE, '
              'memory::format_tag::goihw);\n'
              '  auto biasMemDesc = memory::desc(biasSize, DNNL_DEF_DTYPE, '
              'memory::format_tag::x);\n'
              '  // data memories.\n'
              '  inputMem = memory(inputMemDesc, eng, inputPtr);\n'
              '  outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '  filterMem = memory(filterMemDesc, eng, filterPtr);\n'
              '  biasMem = memory(biasMemDesc, eng, biasPtr);\n'
              '  // operator primitives.\n'
              '  auto convInputMemDesc = memory::desc(inputSize, '
              'DNNL_DEF_DTYPE, DNNL_FMT_ANY);\n'
              '  auto convOutputMemDesc = memory::desc(outputSize, '
              'DNNL_DEF_DTYPE, DNNL_FMT_ANY);\n'
              '  auto convFilterMemDesc = memory::desc(filterSize, '
              'DNNL_DEF_DTYPE, DNNL_FMT_ANY);\n'
              '  auto convBiasMemDesc = memory::desc(biasSize, DNNL_DEF_DTYPE, '
              'DNNL_FMT_ANY);\n'
              '  auto convOpDesc = convolution_forward::desc(\n'
              '      prop_kind::forward_inference, '
              'algorithm::convolution_direct,\n'
              '      convInputMemDesc, convFilterMemDesc, convBiasMemDesc, '
              'convOutputMemDesc,\n'
              '      strideSize, paddingSize, paddingSize);\n'
              '  auto convPrimDesc = '
              'convolution_forward::primitive_desc(convOpDesc, eng);\n'
              '  if (conv->activation != AC_MODE_NONE) {\n'
              '    auto convAttr = get_activation_attr(conv->activation);\n'
              '    convPrimDesc = '
              'convolution_forward::primitive_desc(convOpDesc, convAttr, '
              'eng);\n'
              '  }\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  auto convInputMem = inputMem;\n'
              '  auto convOutputMem = outputMem;\n'
              '  auto convFilterMem = filterMem;\n'
              '  auto convBiasMem = biasMem;\n'
              '  if (convPrimDesc.src_desc() != inputMem.get_desc()) {\n'
              '    convInputMem = memory(convPrimDesc.src_desc(), eng);\n'
              '    net.push_back({reorder(inputMem, convInputMem),\n'
              '        {{DNNL_ARG_FROM, inputMem}, {DNNL_ARG_TO, '
              'convInputMem}}});\n'
              '  }\n'
              '  if (convPrimDesc.weights_desc() != filterMem.get_desc()) {\n'
              '    convFilterMem = memory(convPrimDesc.weights_desc(), eng);\n'
              '    reorder(filterMem, convFilterMem).execute(strm, filterMem, '
              'convFilterMem);\n'
              '    strm.wait();\n'
              '  }\n'
              '  assert(convPrimDesc.bias_desc() == biasMem.get_desc());\n'
              '  net.push_back({convolution_forward(convPrimDesc),\n'
              '      {{DNNL_ARG_SRC, convInputMem},\n'
              '      {DNNL_ARG_WEIGHTS, convFilterMem},\n'
              '      {DNNL_ARG_BIAS, convBiasMem},\n'
              '      {DNNL_ARG_DST, convOutputMem}}});\n'
              '  if (convPrimDesc.dst_desc() != outputMem.get_desc()) {\n'
              '    convOutputMem = memory(convPrimDesc.dst_desc(), eng);\n'
              '    net.push_back({reorder(convOutputMem, outputMem),\n'
              '        {{DNNL_ARG_FROM, convOutputMem}, {DNNL_ARG_TO, '
              'outputMem}}});\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003792',
         path='/src/dnnl/dnnl_helper.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/dnnl_helper.cc\n')

Fragment(uuid='NORMALIZED-003793',
         path='/src/dnnl/dnnl_helper.cc',
         lineno=19,
         depth=2,
         type='function_decl',
         name='assign_kernel',
         text='void assign_kernel(DATATYPE* ptr, int size, DATATYPE value) {\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < size; i++) ptr[i] = value;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003794',
         path='/src/dnnl/dnnl_helper.cc',
         lineno=24,
         depth=2,
         type='function_decl',
         name='copy_kernel',
         text='void copy_kernel(DATATYPE* dst, const DATATYPE* src, int size) '
              '{\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < size; i++) dst[i] = src[i];\n'
              '}\n')

Fragment(uuid='NORMALIZED-003795',
         path='/src/dnnl/dnnl_helper.cc',
         lineno=29,
         depth=2,
         type='function_decl',
         name='get_activation_attr',
         text='dnnl::primitive_attr get_activation_attr(ActiMode activation) '
              '{\n'
              '  dnnl::algorithm ops_algo = dnnl::algorithm::eltwise_relu;  // '
              'relu as default\n'
              '  const float ops_scale = 1.0f;\n'
              '  float ops_alpha = 0.0f;  // relu negative slope\n'
              '  float ops_beta = 0.0f;\n'
              '  switch (activation) {\n'
              '    case AC_MODE_SIGMOID:\n'
              '      ops_algo = dnnl::algorithm::eltwise_logistic;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    case AC_MODE_TANH:\n'
              '      ops_algo = dnnl::algorithm::eltwise_tanh;\n'
              '      // alpha and beta ignored.\n'
              '      break;\n'
              '    case AC_MODE_RELU:\n'
              '    default:\n'
              '      break;\n'
              '  }\n'
              '  dnnl::post_ops ops;\n'
              '  ops.append_eltwise(ops_scale, ops_algo, ops_alpha, '
              'ops_beta);\n'
              '  dnnl::primitive_attr attr;\n'
              '  attr.set_post_ops(ops);\n'
              '  return attr;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003796',
         path='/src/dnnl/dnnl_helper.cc',
         lineno=54,
         depth=2,
         type='function_decl',
         name='get_memory_desc',
         text='dnnl::memory::desc get_memory_desc(const Tensor& t, int numDim) '
              '{\n'
              '  if (numDim <= 0) numDim = t.numDim;\n'
              '  assert(numDim >= t.numDim);\n'
              '  dnnl::memory::dims size;\n'
              '  dnnl::memory::dims stride;\n'
              '  // right-align the dimensions\n'
              '  for (int i = 0; i < numDim - t.numDim; i++) {\n'
              '    size.push_back(1);\n'
              '    stride.push_back(t.stride[0]);\n'
              '  }\n'
              '  for (int i = 0; i < t.numDim; i++) {\n'
              '    size.push_back(t.dim[i]);\n'
              '    stride.push_back(t.stride[i]);\n'
              '  }\n'
              '  assert(size.size() == (size_t)numDim);\n'
              '  assert(stride.size() == (size_t)numDim);\n'
              '  return dnnl::memory::desc(size, DNNL_DEF_DTYPE, stride);\n'
              '}\n')

Fragment(uuid='NORMALIZED-003797',
         path='/src/dnnl/element_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/element_mkl.cc\n')

Fragment(uuid='NORMALIZED-003798',
         path='/src/dnnl/element_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='elementwise_kernel',
         text='void elementwise_kernel(int volume, OpType type,\n'
              '    const Tensor& tx, const Tensor& ty, const Tensor& tz,\n'
              '    const DATATYPE* x, const DATATYPE* y, DATATYPE* z) {\n'
              '  int numDim = tz.numDim;\n'
              '  assert(tx.numDim <= numDim);\n'
              '  assert(ty.numDim <= numDim);\n'
              '  assert(numDim <= 6);\n'
              '  int pos[6];\n'
              '#pragma omp parallel for\n'
              '  for (int zid = 0; zid < volume; zid++) {\n'
              '    for (int d = 0; d < numDim; d++) {\n'
              '      pos[d] = (zid / tz.stride[d]) % tz.dim[d];\n'
              '    }\n'
              '    int xid = 0;\n'
              '    int diff = numDim - tx.numDim;\n'
              '    for (int d = 0; d < tx.numDim; d++) {\n'
              '      xid += tx.stride[d] * pos[d + diff];\n'
              '    }\n'
              '    int yid = 0;\n'
              '    diff = numDim - ty.numDim;\n'
              '    for (int d = 0; d < ty.numDim; d++) {\n'
              '      yid += ty.stride[d] * pos[d + diff];\n'
              '    }\n'
              '\n'
              '    switch (type) {\n'
              '      case OP_EW_ADD:\n'
              '        z[zid] = x[xid] + y[yid];\n'
              '        break;\n'
              '      case OP_EW_MUL:\n'
              '        z[zid] = x[xid] * y[yid];\n'
              '        break;\n'
              '      case OP_EW_SUB:\n'
              '        z[zid] = x[xid] - y[yid];\n'
              '        break;\n'
              '      case OP_EW_DIV:\n'
              '        z[zid] = x[xid] / y[yid];\n'
              '        break;\n'
              '      case OP_EW_EQUAL:\n'
              '        z[zid] = (x[xid] == y[yid]);\n'
              '        break;\n'
              '      case OP_EW_GREATER:\n'
              '        z[zid] = (x[xid] > y[yid]);\n'
              '        break;\n'
              '      case OP_EW_LESS:\n'
              '        z[zid] = (x[xid] < y[yid]);\n'
              '        break;\n'
              '      case OP_EW_MAX:\n'
              '        z[zid] = (x[xid] > y[yid] ? x[xid] : y[yid]);\n'
              '        break;\n'
              '      case OP_EW_MIN:\n'
              '        z[zid] = (x[xid] < y[yid] ? x[xid] : y[yid]);\n'
              '        break;\n'
              '      case OP_PRELU:\n'
              '        z[zid] = (x[xid] >= 0 ? x[xid] : y[yid] * x[xid]);\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003799',
         path='/src/dnnl/element_mkl.cc',
         lineno=98,
         depth=2,
         type='function_decl',
         name='create_net',
         text='static void create_net(Element* ele, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '    memory& in0Mem, memory& in1Mem, memory& outputMem,\n'
              '    void* in0Ptr, void* in1Ptr, void* outputPtr\n'
              '    ) {\n'
              '  // dimensions.\n'
              '  assert(ele->inputs[0].volume() == ele->outputs[0].volume());\n'
              '  assert(ele->inputs[1].volume() == ele->outputs[0].volume());\n'
              '  int numDim = ele->outputs[0].numDim;\n'
              '  if (ele->use_kernel()) {\n'
              '    // data descriptors.\n'
              '    auto in0MemDesc = get_memory_desc(ele->inputs[0], numDim);\n'
              '    auto in1MemDesc = get_memory_desc(ele->inputs[1], numDim);\n'
              '    auto outputMemDesc = get_memory_desc(ele->outputs[0], '
              'numDim);\n'
              '    // data memories.\n'
              '    in0Mem = memory(in0MemDesc, eng, in0Ptr);\n'
              '    in1Mem = memory(in1MemDesc, eng, in1Ptr);\n'
              '    outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '    // operator primitives.\n'
              '    algorithm ops_algo = algorithm::binary_add;\n'
              '    if (ele->type == OP_EW_MUL) ops_algo = '
              'algorithm::binary_mul;\n'
              '    else assert(ele->type == OP_EW_ADD);\n'
              '    auto eleOpDesc = binary::desc(ops_algo, in0MemDesc, '
              'in1MemDesc, outputMemDesc);\n'
              '    auto elePrimDesc = binary::primitive_desc(eleOpDesc, eng);\n'
              '    // create primitives and connect.\n'
              '    net.clear();\n'
              '    net.push_back({binary(elePrimDesc),\n'
              '        {{DNNL_ARG_SRC_0, in0Mem},\n'
              '        {DNNL_ARG_SRC_1, in1Mem},\n'
              '        {DNNL_ARG_DST, outputMem}}});\n'
              '  } else {\n'
              '    // No preprocessing for our customized kernel\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003800',
         path='/src/dnnl/elementwise_unary_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/elementwise_unary_mkl.cc\n')

Fragment(uuid='NORMALIZED-003801',
         path='/src/dnnl/elementwise_unary_mkl.cc',
         lineno=22,
         depth=2,
         type='function_decl',
         name='unary_kernel',
         text='void unary_kernel(int volume, OpType type,\n'
              '    const Tensor& tx, const Tensor& ty,\n'
              '    const DATATYPE* x, DATATYPE* y) {\n'
              '  int numDim = ty.numDim;\n'
              '  assert(tx.numDim <= numDim);\n'
              '  assert(numDim <= 6);\n'
              '  int pos[6];\n'
              '#pragma omp parallel for\n'
              '  for (int yid = 0; yid < volume; yid++) {\n'
              '    for (int d = 0; d < numDim; d++) {\n'
              '      pos[d] = (yid / ty.stride[d]) % ty.dim[d];\n'
              '    }\n'
              '    int xid = 0;\n'
              '    int diff = numDim - tx.numDim;\n'
              '    for (int d = 0; d < tx.numDim; d++) {\n'
              '      xid += tx.stride[d] * pos[d + diff];\n'
              '    }\n'
              '\n'
              '    switch (type) {\n'
              '      case OP_CEIL:\n'
              '        y[yid] = std::ceil(x[xid]);\n'
              '        break;\n'
              '      case OP_ROUND:\n'
              '        y[yid] = std::round(x[xid]);\n'
              '        break;\n'
              '      case OP_LOGICAL_NOT:\n'
              '        y[yid] = !x[xid];\n'
              '        break;\n'
              '      case OP_LOG:\n'
              '        y[yid] = std::log(x[xid]);\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003802',
         path='/src/dnnl/elementwise_unary_mkl.cc',
         lineno=75,
         depth=2,
         type='function_decl',
         name='create_net',
         text='static void create_net(ElementWiseUnary* unary, DNNLNet& net, '
              'engine& eng, stream& strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr) {\n'
              '  // dimensions.\n'
              '  assert(unary->inputs[0].volume() == '
              'unary->outputs[0].volume());\n'
              '  if (unary->use_kernel()) {\n'
              '    // dnnl::eltwise requires the same layout between input and '
              'output.\n'
              '    '
              'assert(unary->outputs[0].has_same_shape_stride_split(unary->inputs[0]));\n'
              '    // data descriptors.\n'
              '    auto memDesc = get_memory_desc(unary->outputs[0]);\n'
              '    // data memories.\n'
              '    inputMem = memory(memDesc, eng, inputPtr);\n'
              '    outputMem = memory(memDesc, eng, outputPtr);\n'
              '    // operator primitives.\n'
              '    algorithm ops_algo;\n'
              '    float ops_alpha = 0.0f;\n'
              '    float ops_beta = 0.0f;\n'
              '    switch (unary->type) {\n'
              '      case OP_EXP:\n'
              '        ops_algo = algorithm::eltwise_exp;\n'
              '        break;\n'
              '      case OP_SQRT:\n'
              '        ops_algo = algorithm::eltwise_sqrt;\n'
              '        break;\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '    auto unaryOpDesc = eltwise_forward::desc(\n'
              '        prop_kind::forward_inference, ops_algo, memDesc, '
              'ops_alpha, ops_beta);\n'
              '    auto unaryPrimDesc = '
              'eltwise_forward::primitive_desc(unaryOpDesc, eng);\n'
              '    // create primitives and connect.\n'
              '    net.clear();\n'
              '    net.push_back({eltwise_forward(unaryPrimDesc),\n'
              '        {{DNNL_ARG_SRC, inputMem},\n'
              '        {DNNL_ARG_DST, outputMem}}});\n'
              '  } else {\n'
              '    // No preprocessing for our customized kernel\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003803',
         path='/src/dnnl/enlarge_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/enlarge_mkl.cc\n')

Fragment(uuid='NORMALIZED-003804',
         path='/src/dnnl/enlarge_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='enlarge_kernel',
         text='void enlarge_kernel(DATATYPE* dstPtr, const DATATYPE* srcPtr, '
              'int volume,\n'
              '    const int dstH, const int dstW, const int srcH, const int '
              'srcW) {\n'
              '  int offH = (dstH - srcH) / 2;\n'
              '  int offW = (dstW - srcW) / 2;\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < volume; i++) {\n'
              '    int h = (i % (dstH * dstW)) / dstW - offH;\n'
              '    int w = (i % (dstH * dstW)) % dstW - offW;\n'
              '    if (h < 0 || h >= srcH || w < 0 || w >= srcW)\n'
              '      dstPtr[i] = 0.0f;\n'
              '    else {\n'
              '      int offset = (i / (dstH * dstW)) * (srcH * srcW) + h * '
              'srcW + w;\n'
              '      dstPtr[i] = srcPtr[offset];\n'
              '    }\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003805',
         path='/src/dnnl/fuse_conv_batchnorm_alpha_var_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/fuse_conv_batchnorm_alpha_var_mkl.cc\n')

Fragment(uuid='NORMALIZED-003806',
         path='/src/dnnl/fuse_conv_batchnorm_alpha_var_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='fuse_conv_batchnorm_alpha_var_kernel',
         text='void fuse_conv_batchnorm_alpha_var_kernel(int c_out, int '
              'c_in_h_w,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* conv_w, const DATATYPE* '
              'scale, const DATATYPE* var) {\n'
              '  int volume = c_out * c_in_h_w;\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < volume; i++) {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'std::sqrt(std::abs(var[c_out_idx]) + BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003807',
         path='/src/dnnl/fuse_conv_batchnorm_bias_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/fuse_conv_batchnorm_bias_mkl.cc\n')

Fragment(uuid='NORMALIZED-003808',
         path='/src/dnnl/fuse_conv_batchnorm_bias_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='fuse_conv_batchnorm_bias_kernel',
         text='void fuse_conv_batchnorm_bias_kernel(int volume, DATATYPE* '
              'dst_ptr,\n'
              '    const DATATYPE* scale, const DATATYPE* beta,\n'
              '    const DATATYPE* mean, const DATATYPE* var) {\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < volume; i++) {\n'
              '    dst_ptr[i] = beta[i] - scale[i] * mean[i] / '
              'std::sqrt(var[i] + BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003809',
         path='/src/dnnl/fuse_conv_batchnorm_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/fuse_conv_batchnorm_mkl.cc\n')

Fragment(uuid='NORMALIZED-003810',
         path='/src/dnnl/fuse_conv_batchnorm_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='fuse_conv_batchnorm_kernel',
         text='void fuse_conv_batchnorm_kernel(int c_out, int c_in_h_w,\n'
              '    DATATYPE* dst_ptr, const DATATYPE* conv_w, const DATATYPE* '
              'scale, const DATATYPE* var) {\n'
              '  int volume = c_out * c_in_h_w;\n'
              '#pragma omp parallel for\n'
              '  for (int i = 0; i < volume; i++) {\n'
              '    int c_out_idx = i / c_in_h_w;\n'
              '    dst_ptr[i] = scale[c_out_idx] * conv_w[i] / '
              'std::sqrt(std::abs(var[c_out_idx]) + BN_MIN_EPSILON);\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003811',
         path='/src/dnnl/matmul_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/matmul_mkl.cc\n')

Fragment(uuid='NORMALIZED-003812',
         path='/src/dnnl/matmul_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='create_net',
         text='static void create_net(Matmul* mm, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '#ifdef DNNL_NO_MATMUL\n'
              '    Matmul::BLASGEMMParams& params,\n'
              '#endif\n'
              '    memory& aMem, memory& bMem, memory& cMem, void* aPtr, void* '
              'bPtr, void* cPtr) {\n'
              '  // dimensions.\n'
              '  int numDim = mm->outputs[0].numDim;\n'
              '  int m = mm->inputs[0].dim[numDim-2];\n'
              '  int n = mm->inputs[1].dim[numDim-1];\n'
              '  int k = mm->inputs[0].dim[numDim-1];\n'
              '  int b = 1;\n'
              '  if (numDim > 2) {\n'
              '    for (int i = 0; i < numDim - 2; i++) {\n'
              '      b *= mm->outputs[0].dim[i];\n'
              '      assert(mm->inputs[0].dim[i] == mm->outputs[0].dim[i]);\n'
              '      assert(mm->inputs[1].dim[i] == mm->outputs[0].dim[i]);\n'
              '    }\n'
              '  }\n'
              '  // data sizes.\n'
              '  const memory::dims aSize = { b, m, k };\n'
              '  const memory::dims bSize = { b, k, n };\n'
              '  const memory::dims cSize = { b, m, n };\n'
              '  const memory::dims aStride = { m * k, '
              'mm->inputs[0].stride[numDim-2], mm->inputs[0].stride[numDim-1] '
              '};\n'
              '  const memory::dims bStride = { k * n, '
              'mm->inputs[1].stride[numDim-2], mm->inputs[1].stride[numDim-1] '
              '};\n'
              '  const memory::dims cStride = { m * n, '
              'mm->outputs[0].stride[numDim-2], '
              'mm->outputs[0].stride[numDim-1] };\n'
              '  // data descriptors.\n'
              '  auto aMemDesc = memory::desc(aSize, DNNL_DEF_DTYPE, '
              'aStride);\n'
              '  auto bMemDesc = memory::desc(bSize, DNNL_DEF_DTYPE, '
              'bStride);\n'
              '  auto cMemDesc = memory::desc(cSize, DNNL_DEF_DTYPE, '
              'cStride);\n'
              '  // data memories.\n'
              '  aMem = memory(aMemDesc, eng, aPtr);\n'
              '  bMem = memory(bMemDesc, eng, bPtr);\n'
              '  cMem = memory(cMemDesc, eng, cPtr);\n'
              '#ifndef DNNL_NO_MATMUL\n'
              '  // operator primitives.\n'
              '  auto mmOpDesc = matmul::desc(aMemDesc, bMemDesc, cMemDesc);\n'
              '  auto mmPrimDesc = matmul::primitive_desc(mmOpDesc, eng);\n'
              '  if (mm->activation != AC_MODE_NONE) {\n'
              '    auto mmAttr = get_activation_attr(mm->activation);\n'
              '    mmPrimDesc = matmul::primitive_desc(mmOpDesc, mmAttr, '
              'eng);\n'
              '  }\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  net.push_back({matmul(mmPrimDesc),\n'
              '      {{DNNL_ARG_SRC, aMem}, {DNNL_ARG_WEIGHTS, bMem}, '
              '{DNNL_ARG_DST, cMem}}});\n'
              '#else  // DNNL_NO_MATMUL\n'
              '  // BLAS parameters.\n'
              '  params.batch = b;\n'
              '  params.m = m;\n'
              '  params.n = n;\n'
              '  params.k = k;\n'
              '  if (mm->inputs[0].stride[numDim-2] == 1) {\n'
              "    params.transA = 't';\n"
              '    params.lda = mm->inputs[0].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(mm->inputs[0].stride[numDim-1] == 1);\n'
              "    params.transA = 'n';\n"
              '    params.lda = mm->inputs[0].stride[numDim-2];\n'
              '  }\n'
              '  if (mm->inputs[1].stride[numDim-2] == 1) {\n'
              "    params.transB = 't';\n"
              '    params.ldb = mm->inputs[1].stride[numDim-1];\n'
              '  } else {\n'
              '    assert(mm->inputs[1].stride[numDim-1] == 1);\n'
              "    params.transB = 'n';\n"
              '    params.ldb = mm->inputs[1].stride[numDim-2];\n'
              '  }\n'
              '  assert(mm->outputs[0].stride[numDim-1] == 1);\n'
              '  params.ldc = mm->outputs[0].stride[numDim-2];\n'
              '  // activation primitive.\n'
              '  net.clear();\n'
              '  if (mm->activation != AC_MODE_NONE) {\n'
              '    algorithm ops_algo = algorithm::eltwise_relu;  // relu as '
              'default\n'
              '    float ops_alpha = 0.0f;  // relu negative slope\n'
              '    float ops_beta = 0.0f;\n'
              '    switch (mm->activation) {\n'
              '      case AC_MODE_SIGMOID:\n'
              '        ops_algo = algorithm::eltwise_logistic;\n'
              '        // alpha and beta ignored.\n'
              '        break;\n'
              '      case AC_MODE_TANH:\n'
              '        ops_algo = algorithm::eltwise_tanh;\n'
              '        // alpha and beta ignored.\n'
              '        break;\n'
              '      case AC_MODE_RELU:\n'
              '      default:\n'
              '        break;\n'
              '    }\n'
              '    auto actOpDesc = eltwise_forward::desc(\n'
              '        prop_kind::forward_inference, ops_algo, cMemDesc, '
              'ops_alpha, ops_beta);\n'
              '    auto actPrimDesc = '
              'eltwise_forward::primitive_desc(actOpDesc, eng);\n'
              '    net.push_back({eltwise_forward(actPrimDesc),\n'
              '      {{DNNL_ARG_SRC, cMem}, {DNNL_ARG_DST, cMem}}});\n'
              '  }\n'
              '#endif  // DNNL_NO_MATMUL\n'
              '}\n')

Fragment(uuid='NORMALIZED-003813',
         path='/src/dnnl/merge_gconv_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/merge_gconv_mkl.cc\n')

Fragment(uuid='NORMALIZED-003814',
         path='/src/dnnl/merge_gconv_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='merge_gconv_kernel',
         text='void merge_gconv_kernel(DATATYPE* dstPtr, const DATATYPE* '
              'srcPtr, int volume,\n'
              '    int cInHW, int cOut, int count) {\n'
              '  assert(cOut % count == 0);\n'
              '#pragma omp parallel for\n'
              '  for (int srcIdx = 0; srcIdx < volume; srcIdx++) {\n'
              '    int mod = srcIdx % cInHW;\n'
              '    int div = srcIdx / cInHW;\n'
              '    int dstIdx = (div * count + div / (cOut / count)) * cInHW + '
              'mod;\n'
              '    dstPtr[dstIdx] = srcPtr[srcIdx];\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003815',
         path='/src/dnnl/mul_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/mul_mkl.cc\n')

Fragment(uuid='NORMALIZED-003816',
         path='/src/dnnl/ops_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/ops_mkl.cc\n')

Fragment(uuid='NORMALIZED-003817',
         path='/src/dnnl/pad_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/pad_mkl.cc\n')

Fragment(uuid='NORMALIZED-003818',
         path='/src/dnnl/pool2d_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/pool2d_mkl.cc\n')

Fragment(uuid='NORMALIZED-003819',
         path='/src/dnnl/pool2d_mkl.cc',
         lineno=21,
         depth=2,
         type='function_decl',
         name='create_net',
         text='static void create_net(Pool2D* pool, DNNLNet& net, engine& eng, '
              'stream& strm,\n'
              '    memory& inputMem, memory& outputMem,\n'
              '    void* inputPtr, void* outputPtr) {\n'
              '  // dimensions.\n'
              '  int padH, padW;\n'
              '  pool->get_padding(&padH, &padW);\n'
              '  // data sizes.\n'
              '  const memory::dims kernelSize = { pool->kernelH, '
              'pool->kernelW };\n'
              '  const memory::dims strideSize = { pool->strideH, '
              'pool->strideW };\n'
              '  const memory::dims paddingSize = { padH, padW };\n'
              '  // data descriptors.\n'
              '  auto inputMemDesc = get_memory_desc(pool->inputs[0]);\n'
              '  auto outputMemDesc = get_memory_desc(pool->outputs[0]);\n'
              '  // data memories.\n'
              '  inputMem = memory(inputMemDesc, eng, inputPtr);\n'
              '  outputMem = memory(outputMemDesc, eng, outputPtr);\n'
              '  // operator primitives.\n'
              '  algorithm mode;\n'
              '  switch (pool->type) {\n'
              '    case OP_POOL2D_MAX:\n'
              '      mode = algorithm::pooling_max;\n'
              '      break;\n'
              '    case OP_POOL2D_AVG:\n'
              '      mode = algorithm::pooling_avg_exclude_padding;\n'
              '      break;\n'
              '    default:\n'
              '      assert(false);\n'
              '  }\n'
              '  auto poolOpDesc = pooling_forward::desc(\n'
              '      prop_kind::forward_inference, mode,\n'
              '      inputMemDesc, outputMemDesc,\n'
              '      strideSize, kernelSize, paddingSize, paddingSize);\n'
              '  auto poolPrimDesc = '
              'pooling_forward::primitive_desc(poolOpDesc, eng);\n'
              '  if (pool->activation != AC_MODE_NONE) {\n'
              '    auto poolAttr = get_activation_attr(pool->activation);\n'
              '    poolPrimDesc = pooling_forward::primitive_desc(poolOpDesc, '
              'poolAttr, eng);\n'
              '  }\n'
              '  // create primitives and connect.\n'
              '  net.clear();\n'
              '  assert(poolPrimDesc.dst_desc() == outputMem.get_desc());\n'
              '  net.push_back({pooling_forward(poolPrimDesc),\n'
              '      {{DNNL_ARG_SRC, inputMem},\n'
              '      {DNNL_ARG_DST, outputMem}}});\n'
              '}\n')

Fragment(uuid='NORMALIZED-003820',
         path='/src/dnnl/reduce_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/reduce_mkl.cc\n')

Fragment(uuid='NORMALIZED-003821',
         path='/src/dnnl/reshape_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/reshape_mkl.cc\n')

Fragment(uuid='NORMALIZED-003822',
         path='/src/dnnl/resize_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/resize_mkl.cc\n')

Fragment(uuid='NORMALIZED-003823',
         path='/src/dnnl/shape_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/shape_mkl.cc\n')

Fragment(uuid='NORMALIZED-003824',
         path='/src/dnnl/slice_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/slice_mkl.cc\n')

Fragment(uuid='NORMALIZED-003825',
         path='/src/dnnl/squeeze_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/squeeze_mkl.cc\n')

Fragment(uuid='NORMALIZED-003826',
         path='/src/dnnl/topk_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/topk_mkl.cc\n')

Fragment(uuid='NORMALIZED-003827',
         path='/src/dnnl/transpose_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/transpose_mkl.cc\n')

Fragment(uuid='NORMALIZED-003828',
         path='/src/dnnl/unsqueeze_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/unsqueeze_mkl.cc\n')

Fragment(uuid='NORMALIZED-003829',
         path='/src/dnnl/where_mkl.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/dnnl/where_mkl.cc\n')

Fragment(uuid='NORMALIZED-003830',
         path='/src/generator/compile.sh',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='#!/bin/bash\n'
              'g++ generator.cc rules.pb.cc -o generator -I/usr/local/include '
              '-L/usr/local/lib -lprotobuf -std=c++11 -pthread -O2\n')

Fragment(uuid='NORMALIZED-003831',
         path='/src/generator/compile.sh',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /src/generator/compile.sh\n')

Fragment(uuid='NORMALIZED-003832',
         path='/src/generator/generator.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/generator/generator.cc\n')

Fragment(uuid='NORMALIZED-003833',
         path='/src/generator/generator.cc',
         lineno=19,
         depth=2,
         type='typedef_decl',
         name='TYPE',
         text='typedef int TYPE;\n')

Fragment(uuid='NORMALIZED-003834',
         path='/src/generator/generator.cc',
         lineno=29,
         depth=2,
         type='function_decl',
         name='relu_function',
         text='TYPE relu_function(TYPE input)\n'
              '{\n'
              '  return input * (input + 1) + 1;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003835',
         path='/src/generator/generator.cc',
         lineno=34,
         depth=2,
         type='struct_decl',
         name='TensorTemp',
         text='struct TensorTemp {\n'
              '  int numDim, dim[MAX_DIM], stride[MAX_DIM];\n'
              '  SplitInfo split[MAX_DIM];\n'
              '  TYPE data[MAX_SIZE];\n'
              '  // Do not compare the following metadata for equation checks\n'
              '  int opIdx, tsIdx;\n'
              '  inline bool operator==(const TensorTemp& tt) const {\n'
              '    if (tt.numDim != numDim) return false;\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      if (dim[i] != tt.dim[i]) return false;\n'
              '      if (stride[i] != tt.stride[i]) return false;\n'
              '      if (split[i] != tt.split[i]) return false;\n'
              '      total *= dim[i];\n'
              '    }\n'
              '    for (int i = 0; i < total; i++)\n'
              '      if (data[i] != tt.data[i]) return false;\n'
              '    return true;\n'
              '  }\n'
              '  TensorTemp& operator=(const TensorTemp& tt)\n'
              '  {\n'
              '    numDim = tt.numDim;\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      dim[i] = tt.dim[i];\n'
              '      total *= dim[i];\n'
              '      stride[i] = tt.stride[i];\n'
              '      split[i] = tt.split[i];\n'
              '    }\n'
              '    assert(total <= MAX_SIZE);\n'
              '    for (int i = 0; i < total; i++)\n'
              '      data[i] = tt.data[i];\n'
              '    opIdx = tt.opIdx;\n'
              '    tsIdx = tt.tsIdx;\n'
              '    return *this;\n'
              '  }\n'
              '  int size(void)\n'
              '  {\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < numDim; i++)\n'
              '      total *= dim[i];\n'
              '    return total;\n'
              '  }\n'
              '  inline TYPE get_value(int n, int c, int h, int w) const\n'
              '  {\n'
              '    assert(numDim == 4);\n'
              '    int offset = n * stride[0] + c * stride[1] + h * stride[2] '
              '+ w * stride[3];\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    return data[offset];\n'
              '  }\n'
              '  inline TYPE get_value(int n, int c) const\n'
              '  {\n'
              '    assert(numDim == 2);\n'
              '    int offset = n * stride[0] + c * stride[1];\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    return data[offset];\n'
              '  }\n'
              '  inline void set_value(int n, int c, int h, int w, TYPE val)\n'
              '  {\n'
              '    assert(numDim == 4);\n'
              '    int offset = n * stride[0] + c * stride[1] + h * stride[2] '
              '+ w * stride[3];\n'
              '    if (offset >= MAX_SIZE) {\n'
              '      printf("dim = {%d %d %d %d}\\n", dim[0], dim[1], dim[2], '
              'dim[3]);\n'
              '      printf("n = %d c = %d h = %d w = %d\\n", n, c, h, w);\n'
              '    }\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    data[offset] = val;\n'
              '  }\n'
              '  inline void set_value(int n, int c, TYPE val)\n'
              '  {\n'
              '    assert(numDim == 2);\n'
              '    int offset = n * stride[0] + c * stride[1];\n'
              '    if (offset >= MAX_SIZE) {\n'
              '      printf("dim = {%d %d}\\n", dim[0], dim[1]);\n'
              '      printf("n = %d c = %d\\n", n, c);\n'
              '    }\n'
              '    assert(offset >= 0 && offset < MAX_SIZE);\n'
              '    data[offset] = val;\n'
              '  }\n'
              '  void print(std::string name)\n'
              '  {\n'
              '    printf("%s:\\n", name.c_str());\n'
              '    printf("dim[%d] = {%d, %d, %d, %d}\\n", numDim, dim[0], '
              'dim[1], dim[2], dim[3]);\n'
              '    printf("stride[%d] = {%d, %d, %d, %d}\\n", numDim, '
              'stride[0], stride[1], stride[2], stride[3]);\n'
              '    for (int i = 0; i < size(); i++)\n'
              '      printf("%d ", data[i]);\n'
              '    printf("\\n");\n'
              '  }\n'
              '};\n')

Fragment(uuid='NORMALIZED-003836',
         path='/src/generator/generator.cc',
         lineno=124,
         depth=2,
         type='struct_decl',
         name='TensorTempList',
         text='struct TensorTempList {\n'
              '  int numTensor;\n'
              '  TensorTemp tensors[MAX_NUM_TENSORS];\n'
              '  bool operator==(const TensorTempList& ttl) const\n'
              '  {\n'
              '    if (numTensor != ttl.numTensor) return false;\n'
              '    for (int i = 0; i < numTensor; i++)\n'
              '      if (!(tensors[i] == ttl.tensors[i])) return false;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(uuid='NORMALIZED-003837',
         path='/src/generator/generator.cc',
         lineno=136,
         depth=2,
         type='class_decl',
         name='OpTemp',
         text='class OpTemp {\n'
              'public:\n'
              '  OpTemp(int _inputs, int _outputs, OpType _type)\n'
              '  : numInputs(_inputs), numOutputs(_outputs), type(_type) {}\n'
              '  virtual bool compute(int n, TensorTemp* inputs, int opIdx) = '
              '0;\n'
              '  virtual bool compute(const TensorTemp& x, int opIdx) = 0;\n'
              '  virtual bool compute(const TensorTemp& x, const TensorTemp& '
              'y, int opIdx) = 0;\n'
              'public:\n'
              '  OpType type;\n'
              '  int numInputs, numOutputs;\n'
              '  TensorTemp outputs[MAX_NUM_OUTPUTS];\n'
              '};\n')

Fragment(uuid='NORMALIZED-003838',
         path='/src/generator/generator.cc',
         lineno=149,
         depth=2,
         type='var_decl',
         name='variable_names',
         text='std::map<int, std::string> variable_names;\n')

Fragment(uuid='NORMALIZED-003839',
         path='/src/generator/generator.cc',
         lineno=150,
         depth=2,
         type='var_decl',
         name='operator_names',
         text='std::map<const OpTemp*, std::string> operator_names;\n')

Fragment(uuid='NORMALIZED-003840',
         path='/src/generator/generator.cc',
         lineno=152,
         depth=2,
         type='struct_decl',
         name='GraphTemp',
         text='struct GraphTemp {\n'
              '  struct GraphOp {\n'
              '    const OpTemp* opTemp;\n'
              '    int opIdx[MAX_NUM_INPUTS], tsIdx[MAX_NUM_INPUTS];\n'
              '    bool operator==(const GraphOp& gop) const\n'
              '    {\n'
              '      if (opTemp != gop.opTemp) return false;\n'
              '      for (int i = 0; i < opTemp->numInputs; i++) {\n'
              '        if ((opIdx[i] != gop.opIdx[i]) || (tsIdx[i] != '
              'gop.tsIdx[i]))\n'
              '          return false;\n'
              '      }\n'
              '      return true;\n'
              '    }\n'
              '  };\n'
              '  int numOps;\n'
              '  GraphOp op[MAX_NUM_OPS];\n'
              '  int mapped_outputs(int* opIdxs, int* tsIdxs) const\n'
              '  {\n'
              '    int mappedOutputs = 0;\n'
              '    for (int op1 = 0; op1 < numOps; op1++)\n'
              '      for (int ts1 = 0; ts1 < op[op1].opTemp->numOutputs; '
              'ts1++) {\n'
              '        bool found = false;\n'
              '        for (int op2 = op1 + 1; op2 < numOps; op2++)\n'
              '          for (int ts2 = 0; ts2 < op[op2].opTemp->numInputs; '
              'ts2++)\n'
              '            if (op[op2].opIdx[ts2] == op1 && op[op2].tsIdx[ts2] '
              '== ts1)\n'
              '              found = true;\n'
              '        if (!found) {\n'
              '          opIdxs[mappedOutputs] = op1;\n'
              '          tsIdxs[mappedOutputs] = ts1;\n'
              '          mappedOutputs ++;\n'
              '        }\n'
              '      }\n'
              '    return mappedOutputs;\n'
              '  }\n'
              '  void push_op(const OpTemp* opTemp)\n'
              '  {\n'
              '    assert(opTemp->numInputs == 0);\n'
              '    op[numOps].opTemp = opTemp;\n'
              '    numOps ++;\n'
              '  }\n'
              '  void push_op(const OpTemp* opTemp, const TensorTemp& tt0)\n'
              '  {\n'
              '    assert(opTemp->numInputs == 1);\n'
              '    op[numOps].opTemp = opTemp;\n'
              '    op[numOps].opIdx[0] = tt0.opIdx; op[numOps].tsIdx[0] = '
              'tt0.tsIdx;\n'
              '    numOps ++;\n'
              '  }\n'
              '  void push_op(const OpTemp* opTemp, const TensorTemp& tt0, '
              'const TensorTemp& tt1)\n'
              '  {\n'
              '    assert(opTemp->numInputs == 2);\n'
              '    op[numOps].opTemp = opTemp;\n'
              '    op[numOps].opIdx[0] = tt0.opIdx; op[numOps].tsIdx[0] = '
              'tt0.tsIdx;\n'
              '    op[numOps].opIdx[1] = tt1.opIdx; op[numOps].tsIdx[1] = '
              'tt1.tsIdx;\n'
              '    numOps ++;\n'
              '  }\n'
              '  void pop_op(void)\n'
              '  {\n'
              '    numOps --;\n'
              '  }\n'
              '  std::string to_string(void)\n'
              '  {\n'
              '    //for (int i = 0; i < numOps; i++)\n'
              '      //printf("[%d] op(%d) input1(%d %d) input2(%d %d)\\n", i, '
              'op[i].opTemp->type, op[i].opIdx[0], op[i].tsIdx[0], '
              'op[i].opIdx[1], op[i].tsIdx[1]);\n'
              '    std::string name;\n'
              '    for (int i = numOps - 1; i >= 0; i--)\n'
              '      for (int j = op[i].opTemp->numOutputs - 1; j >= 0; j--) '
              '{\n'
              '        bool found = false;\n'
              '        for (int k = i + 1; k < numOps; k++)\n'
              '          for (int l = 0; l < op[k].opTemp->numInputs; l++)\n'
              '            if (op[k].opIdx[l] == i && op[k].tsIdx[l] == j)\n'
              '              found = true;\n'
              '        if (!found) {\n'
              '          name = name + to_string(i, j) + " | ";\n'
              '        }\n'
              '      }\n'
              '    return name;\n'
              '  }\n'
              '  std::string to_string(int opIdx, int tsIdx)\n'
              '  {\n'
              '    if (opIdx < 0) {\n'
              '      assert(tsIdx == 0);\n'
              '      assert(variable_names.find(opIdx) != '
              'variable_names.end());\n'
              '      return variable_names[opIdx];\n'
              '    } else {\n'
              '      const OpTemp* opTemp = op[opIdx].opTemp;\n'
              '      assert(operator_names.find(opTemp) != '
              'operator_names.end());\n'
              '      std::string name = operator_names[opTemp] + "["\n'
              '                       + std::to_string(tsIdx) + "]{";\n'
              '      for (int i = 0; i < opTemp->numInputs; i++) {\n'
              '        name = name + "input" + std::to_string(i) + "("\n'
              '             + to_string(op[opIdx].opIdx[i], '
              'op[opIdx].tsIdx[i]) + ")";\n'
              '      }\n'
              '      return name + "}";\n'
              '    }\n'
              '  }\n'
              '  int find(std::string name) const\n'
              '  {\n'
              '    int idx = 0;\n'
              '    for (int i = 0; i < numOps; i++) {\n'
              '      const OpTemp* opTemp = op[i].opTemp;\n'
              '      for (int j = 0; j < opTemp->numInputs; j++) {\n'
              '        if (op[i].opIdx[j] < 0) {\n'
              '          assert(variable_names.find(op[i].opIdx[j]) != '
              'variable_names.end());\n'
              '          if (variable_names[op[i].opIdx[j]] == name)\n'
              '            return idx;\n'
              '        }\n'
              '        idx ++;\n'
              '      }\n'
              '    }\n'
              '    return idx;\n'
              '  }\n'
              '  void print(std::string prefix)\n'
              '  {\n'
              '    printf("%s\\n", prefix.c_str());\n'
              '    for (int i = 0; i < numOps; i++) {\n'
              '      const OpTemp* opTemp = op[i].opTemp;\n'
              '      printf("[%d]  ", opTemp->type);\n'
              '      for (int j = 0; j < opTemp->numInputs; j++)\n'
              '        printf("(%d %d) ", op[i].opIdx[j], op[i].tsIdx[j]);\n'
              '      printf("\\n");\n'
              '    }\n'
              '  }\n'
              '};\n')

Fragment(uuid='NORMALIZED-003841',
         path='/src/generator/generator.cc',
         lineno=276,
         depth=2,
         type='class_decl',
         name='ScalarMulTemp',
         text='class ScalarMulTemp : public OpTemp {\n'
              'public:\n'
              '  ScalarMulTemp(void)\n'
              '  : OpTemp(2, 1, OP_MUL)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'scalar, int opIdx)\n'
              '  {\n'
              '    if (scalar.numDim != 0) return false;\n'
              '    outputs[0].numDim = input.numDim;\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < input.numDim; i++) {\n'
              '      outputs[0].dim[i] = input.dim[i];\n'
              '      outputs[0].stride[i] = input.stride[i];\n'
              '      outputs[0].split[i] = input.split[i];\n'
              '      total *= input.dim[i];\n'
              '    }\n'
              '    for (int i = 0; i < total; i++)\n'
              '      outputs[0].data[i] = input.data[i] * scalar.data[0];\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;   \n'
              '  }\n'
              '};\n')

Fragment(uuid='NORMALIZED-003842',
         path='/src/generator/generator.cc',
         lineno=310,
         depth=2,
         type='class_decl',
         name='EnlargeConvTemp',
         text='class EnlargeConvTemp: public OpTemp {\n'
              'public:\n'
              '  EnlargeConvTemp(int _kernelH, int _kernelW)\n'
              '  : OpTemp(1, 1, OP_ENLARGE), kernelH(_kernelH), '
              'kernelW(_kernelW)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, int opIdx)\n'
              '  {\n'
              '    //if (input.opIdx >= 0) return false;\n'
              '    if (input.numDim != 4) return false;\n'
              '    if ((input.dim[2] > kernelH) || (input.dim[3] > kernelW)) '
              'return false;\n'
              '    if ((input.dim[2] == kernelH) && (input.dim[3] == kernelW)) '
              'return false;\n'
              '    if (input.opIdx >= 0) return false;\n'
              '    int offH = (kernelH - input.dim[2]) / 2;\n'
              '    int offW = (kernelW - input.dim[3]) / 2;\n'
              '    outputs[0].numDim = 4;\n'
              '    outputs[0].dim[0] = input.dim[0];\n'
              '    outputs[0].dim[1] = input.dim[1];\n'
              '    outputs[0].dim[2] = kernelH;\n'
              '    outputs[0].dim[3] = kernelW;\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = input.split[1];\n'
              '    outputs[0].split[2] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].split[3] = SplitInfo::NO_SPLIT;\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int cout = 0; cout < outputs[0].dim[0]; cout++)\n'
              '      for (int cin = 0; cin < outputs[0].dim[1]; cin++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++)\n'
              '            if (h >= offH && w >= offW && h - offH < '
              'input.dim[2]\n'
              '            && w - offW < input.dim[3]) {\n'
              '              int weightVal = input.get_value(cout, cin, h - '
              'offH, w - offW);\n'
              '              outputs[0].set_value(cout, cin, h, w, '
              'weightVal);\n'
              '            } else {\n'
              '              outputs[0].set_value(cout, cin, h, w, 0);\n'
              '            }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;           \n'
              '  }\n'
              '  bool compute(const TensorTemp& input1, const TensorTemp& '
              'input2, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              'public:\n'
              '  int kernelH, kernelW;\n'
              '};\n')

Fragment(uuid='NORMALIZED-003843',
         path='/src/generator/generator.cc',
         lineno=367,
         depth=2,
         type='class_decl',
         name='ConstantTemp',
         text='class ConstantTemp : public OpTemp {\n'
              'public:\n'
              '  ConstantTemp(int _ndim, const int* _dims, OpType _type)\n'
              '  : OpTemp(0, 1, _type), ndim(_ndim)\n'
              '  {\n'
              '    for (int i = 0; i < ndim; i++)\n'
              '      dims[i] = _dims[i];\n'
              '  }\n'
              '  virtual bool compute(int opIdx) = 0;\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input1, const TensorTemp& '
              'input2, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              'public:\n'
              '  int ndim, dims[MAX_DIM];\n'
              '};\n')

Fragment(uuid='NORMALIZED-003844',
         path='/src/generator/generator.cc',
         lineno=395,
         depth=2,
         type='class_decl',
         name='ConstantPoolTemp',
         text='class ConstantPoolTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantPoolTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_POOL)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n'
              '    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int i = 0; i < outputs[0].size(); i++)\n'
              '      outputs[0].data[i] = 1; \n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(uuid='NORMALIZED-003845',
         path='/src/generator/generator.cc',
         lineno=422,
         depth=2,
         type='class_decl',
         name='ConstantIConvTemp',
         text='class ConstantIConvTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantIConvTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_ICONV)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '    assert(dims[0] == dims[1]);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n'
              '    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int cout = 0; cout < outputs[0].dim[0]; cout++)\n'
              '      for (int cin = 0; cin < outputs[0].dim[1]; cin++)\n'
              '        for (int kh = 0; kh < outputs[0].dim[2]; kh++)\n'
              '          for (int kw = 0; kw < outputs[0].dim[3]; kw++) {\n'
              '            if (cout == cin && kh == outputs[0].dim[2]/2 && kw '
              '== outputs[0].dim[3]/2)\n'
              '              outputs[0].set_value(cout, cin, kh, kw, 1);\n'
              '            else\n'
              '              outputs[0].set_value(cout, cin, kh, kw, 0);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(uuid='NORMALIZED-003846',
         path='/src/generator/generator.cc',
         lineno=457,
         depth=2,
         type='class_decl',
         name='ConstantIMMTemp',
         text='class ConstantIMMTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantIMMTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_IMM)\n'
              '  {\n'
              '    assert(_ndim == 2);\n'
              '    assert(dims[0] == dims[1]);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n'
              '    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int cout = 0; cout < outputs[0].dim[0]; cout++)\n'
              '      for (int cin = 0; cin < outputs[0].dim[1]; cin++)\n'
              '        outputs[0].data[cout * outputs[0].dim[1] + cin] = cout '
              '== cin ? 1 : 0;\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(uuid='NORMALIZED-003847',
         path='/src/generator/generator.cc',
         lineno=486,
         depth=2,
         type='class_decl',
         name='ConstantOneTemp',
         text='class ConstantOneTemp : public ConstantTemp {\n'
              'public:\n'
              '  ConstantOneTemp(int _ndim, const int* dims)\n'
              '  : ConstantTemp(_ndim, dims, OP_CONSTANT_ONE)\n'
              '  {\n'
              '    assert(_ndim == 4);\n'
              '  }\n'
              '  bool compute(int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = ndim;\n'
              '    for (int i = ndim-1; i >= 0; i--) {\n'
              '      outputs[0].dim[i] = dims[i];\n'
              '      if (i == ndim-1)\n'
              '        outputs[0].stride[i] = 1;\n'
              '      else\n'
              '        outputs[0].stride[i] = outputs[0].stride[i+1] * '
              'outputs[0].dim[i+1];\n'
              '      outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int i = 0; i < outputs[0].size(); i++)\n'
              '      outputs[0].data[i] = 1; \n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(uuid='NORMALIZED-003848',
         path='/src/generator/generator.cc',
         lineno=513,
         depth=2,
         type='class_decl',
         name='Conv2DTemp',
         text='class Conv2DTemp : public OpTemp {\n'
              'public:\n'
              '  Conv2DTemp(int _kernelH, int _kernelW,\n'
              '             int _strideH, int _strideW,\n'
              '             bool _samePad, bool _relu)\n'
              '  : OpTemp(2, 1, OP_CONV2D), kernelH(_kernelH), '
              'kernelW(_kernelW),\n'
              '    strideH(_strideH), strideW(_strideW), samePad(_samePad), '
              'relu(_relu)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'weight, int opIdx)\n'
              '  {\n'
              '    if (input.numDim != 4 || weight.numDim != 4) return false;\n'
              '    if ((weight.dim[2] != kernelH) || (weight.dim[3] != '
              'kernelW)) return false;\n'
              '    //if (input.dim[0] != BATCHSIZE && input.dim[0] != 2 * '
              'BATCHSIZE) return false;\n'
              '    //if (input.dim[1] != weight.dim[1]) return false;\n'
              '    if (input.dim[1] % weight.dim[1] != 0) return false;\n'
              '    int group = input.dim[1] / weight.dim[1];\n'
              '    if (weight.dim[0] % group != 0) return false;\n'
              '    //if (weight.dim[0] == BATCHSIZE) return false;\n'
              '    int padT, padL;\n'
              '    if (samePad) {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = weight.dim[0];\n'
              '      outputs[0].dim[2] = (input.dim[2] + strideH - 1) / '
              'strideH;\n'
              '      outputs[0].dim[3] = (input.dim[3] + strideW - 1) / '
              'strideW;\n'
              '      int padH = max((outputs[0].dim[2] - 1) * strideH + '
              'weight.dim[2]\n'
              '                     - input.dim[2], 0);\n'
              '      int padW = max((outputs[0].dim[3] - 1) * strideW + '
              'weight.dim[3]\n'
              '                     - input.dim[3], 0);\n'
              '      padT = padH / 2;\n'
              '      padL = padW / 2;\n'
              '    } else {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = weight.dim[0];\n'
              '      outputs[0].dim[2] = (input.dim[2] - weight.dim[2]) / '
              'strideH + 1;\n'
              '      outputs[0].dim[3] = (input.dim[3] - weight.dim[3]) / '
              'strideW + 1;\n'
              '      padT = 0;\n'
              '      padL = 0;\n'
              '    }\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = weight.split[0];\n'
              '    outputs[0].split[2] = input.split[2];\n'
              '    outputs[0].split[3] = input.split[3];\n'
              '\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int n = 0; n < outputs[0].dim[0]; n++)\n'
              '      for (int c = 0; c < outputs[0].dim[1]; c++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++) {\n'
              '            int group_idx = c / (weight.dim[0] / group);\n'
              '            TYPE val = 0;\n'
              '            for (int cin = 0; cin < weight.dim[1]; cin ++)\n'
              '              for (int kh = 0; kh < weight.dim[2]; kh ++)\n'
              '                for (int kw = 0; kw < weight.dim[3]; kw ++) {\n'
              '                  int posH = h * strideH + kh - padT;\n'
              '                  int posW = w * strideW + kw - padL;\n'
              '                  assert(posH >= -padT && posH <= input.dim[2] '
              '+ padT);\n'
              '                  assert(posW >= -padL && posW <= input.dim[3] '
              '+ padL);\n'
              '                  if ((posH >= 0) && (posH < input.dim[2])\n'
              '                  && (posW >= 0) && (posW < input.dim[3])) {\n'
              '                    int weightVal = weight.get_value(c, cin, '
              'kh, kw);\n'
              '                    int inputVal = input.get_value(n, cin + '
              'group_idx * weight.dim[1], posH, posW);\n'
              '                    val += weightVal * inputVal;\n'
              '                  }\n'
              '                }\n'
              '            if (relu) val = relu_function(val);\n'
              '            outputs[0].set_value(n, c, h, w, val);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              'public:\n'
              '  int kernelH, kernelW, strideH, strideW;\n'
              '  bool relu, samePad;\n'
              '};\n')

Fragment(uuid='NORMALIZED-003849',
         path='/src/generator/generator.cc',
         lineno=605,
         depth=2,
         type='class_decl',
         name='Pool2DTemp',
         text='class Pool2DTemp : public OpTemp {\n'
              'public:\n'
              '  Pool2DTemp(int _kernelH, int _kernelW,\n'
              '             int _strideH, int _strideW,\n'
              '             bool _samePad, OpType _type)\n'
              '  : OpTemp(1, 1, _type), kernelH(_kernelH), kernelW(_kernelW),\n'
              '    strideH(_strideH), strideW(_strideW), samePad(_samePad)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, int opIdx)\n'
              '  {\n'
              '    if (input.numDim != 4) return false;\n'
              '    int padT, padL;\n'
              '    if (samePad) {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] + strideH - 1) / '
              'strideH;\n'
              '      outputs[0].dim[3] = (input.dim[3] + strideW - 1) / '
              'strideW;\n'
              '      int padH = max((outputs[0].dim[2] - 1) * strideH + '
              'kernelH\n'
              '                     - input.dim[2], 0);\n'
              '      int padW = max((outputs[0].dim[3] - 1) * strideW + '
              'kernelW\n'
              '                     - input.dim[3], 0);\n'
              '      padT = padH / 2;\n'
              '      padL = padW / 2;\n'
              '    } else {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] - kernelH) / strideH + '
              '1;\n'
              '      outputs[0].dim[3] = (input.dim[3] - kernelW) / strideW + '
              '1;\n'
              '      padT = 0;\n'
              '      padL = 0;\n'
              '    }\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].split[2] = input.split[2];\n'
              '    outputs[0].split[3] = input.split[3];\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int n = 0; n < outputs[0].dim[0]; n++)\n'
              '      for (int c = 0; c < outputs[0].dim[1]; c++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++) {\n'
              '            TYPE val = 0;\n'
              '            for (int kh = 0; kh < kernelH; kh++)\n'
              '              for (int kw = 0; kw < kernelW; kw++) {\n'
              '                int posH = h * strideH + kh - padT;\n'
              '                int posW = w * strideW + kw - padL;\n'
              '                assert(posH >= -padT && posH <= input.dim[2] + '
              'padT);\n'
              '                assert(posW >= -padL && posW <= input.dim[3] + '
              'padL);\n'
              '                if ((posH >= 0) && (posH < input.dim[2])\n'
              '                && (posW >= 0) && (posW < input.dim[3])) {\n'
              '                  int inputVal = input.get_value(n, c, posH, '
              'posW);\n'
              '                  if (type == OP_POOL2D_MAX)\n'
              '                    val = max(inputVal, val);\n'
              '                  else if (type == OP_POOL2D_AVG)\n'
              '                    val += inputVal;\n'
              '                }\n'
              '              }\n'
              '            outputs[0].set_value(n, c, h, w, val);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'weight, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '    if (input.numDim != 4 || weight.numDim != 4) return false;\n'
              '    if ((weight.dim[2] != kernelH) || (weight.dim[3] != '
              'kernelW) || (weight.dim[1] != 1)) return false;\n'
              '    if (input.dim[1] != weight.dim[0]) return false;\n'
              '    int padT, padL;\n'
              '    if (samePad) {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] + strideH - 1) / '
              'strideH;\n'
              '      outputs[0].dim[3] = (input.dim[3] + strideW - 1) / '
              'strideW;\n'
              '      int padH = max((outputs[0].dim[2] - 1) * strideH + '
              'weight.dim[2]\n'
              '                     - input.dim[2], 0);\n'
              '      int padW = max((outputs[0].dim[3] - 1) * strideW + '
              'weight.dim[3]\n'
              '                     - input.dim[3], 0);\n'
              '      padT = padH / 2;\n'
              '      padL = padW / 2;\n'
              '    } else {\n'
              '      outputs[0].numDim = 4;\n'
              '      outputs[0].dim[0] = input.dim[0];\n'
              '      outputs[0].dim[1] = input.dim[1];\n'
              '      outputs[0].dim[2] = (input.dim[2] - weight.dim[2]) / '
              'strideH + 1;\n'
              '      outputs[0].dim[3] = (input.dim[3] - weight.dim[3]) / '
              'strideW + 1;\n'
              '      padT = 0;\n'
              '      padL = 0;\n'
              '    }\n'
              '    outputs[0].stride[3] = 1;\n'
              '    outputs[0].stride[2] = outputs[0].stride[3] * '
              'outputs[0].dim[3];\n'
              '    outputs[0].stride[1] = outputs[0].stride[2] * '
              'outputs[0].dim[2];\n'
              '    outputs[0].stride[0] = outputs[0].stride[1] * '
              'outputs[0].dim[1];\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = SplitInfo::NO_SPLIT;\n'
              '    outputs[0].split[2] = input.split[2];\n'
              '    outputs[0].split[3] = input.split[3];\n'
              '    if (outputs[0].size() > MAX_SIZE) return false;\n'
              '    for (int n = 0; n < outputs[0].dim[0]; n++)\n'
              '      for (int c = 0; c < outputs[0].dim[1]; c++)\n'
              '        for (int h = 0; h < outputs[0].dim[2]; h++)\n'
              '          for (int w = 0; w < outputs[0].dim[3]; w++) {\n'
              '            TYPE val = 0;\n'
              '            for (int kh = 0; kh < weight.dim[2]; kh++)\n'
              '              for (int kw = 0; kw < weight.dim[3]; kw++) {\n'
              '                int posH = h * strideH + kh - padT;\n'
              '                int posW = w * strideW + kw - padL;\n'
              '                assert(posH >= -padT && posH <= input.dim[2] + '
              'padT);\n'
              '                assert(posW >= -padL && posW <= input.dim[3] + '
              'padL);\n'
              '                if ((posH >= 0) && (posH < input.dim[2])\n'
              '                && (posW >= 0) && (posW < input.dim[3])) {\n'
              '                  int inputVal = input.get_value(n, c, posH, '
              'posW);\n'
              '                  if (type == OP_POOL2D_MAX)\n'
              '                    val = max(inputVal, val);\n'
              '                  else if (type == OP_POOL2D_AVG)\n'
              '                    val += inputVal;\n'
              '                }\n'
              '              }\n'
              '            outputs[0].set_value(n, c, h, w, val);\n'
              '          }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              'public:\n'
              '  int kernelH, kernelW, strideH, strideW;\n'
              '  bool samePad;\n'
              '};\n')

Fragment(uuid='NORMALIZED-003850',
         path='/src/generator/generator.cc',
         lineno=747,
         depth=2,
         type='class_decl',
         name='MatmulTemp',
         text='class MatmulTemp : public OpTemp {\n'
              'public:\n'
              '  MatmulTemp(ActiMode _mode)\n'
              '  : OpTemp(2, 1, OP_MATMUL), mode(_mode)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& input, const TensorTemp& '
              'weight, int opIdx)\n'
              '  {\n'
              '#ifdef NO_SAME_INPUTS\n'
              '    if (input == weight) return false;\n'
              '#endif\n'
              '    if (input.numDim != 2 || weight.numDim != 2) return false;\n'
              '    //if (input.dim[0] != BATCHSIZE) return false;\n'
              '    if (input.dim[1] != weight.dim[0]) return false;\n'
              '    if (weight.dim[0] == BATCHSIZE) return false;\n'
              '    outputs[0].numDim = 2;\n'
              '    outputs[0].dim[0] = input.dim[0];\n'
              '    outputs[0].dim[1] = weight.dim[1];\n'
              '    outputs[0].stride[0] = outputs[0].dim[1];\n'
              '    outputs[0].stride[1] = 1;\n'
              '    outputs[0].split[0] = input.split[0];\n'
              '    outputs[0].split[1] = weight.split[1];\n'
              '    int outputN = outputs[0].dim[0];\n'
              '    int outputC = outputs[0].dim[1];\n'
              '    int inputC = input.dim[1];\n'
              '    for (int i = 0; i < outputN; i++)\n'
              '      for (int j = 0; j < outputC; j++) {\n'
              '        TYPE val = 0;\n'
              '        for (int k = 0; k < inputC; k++)\n'
              '          val += input.get_value(i, k) * weight.get_value(k, '
              'j);\n'
              '        outputs[0].set_value(i, j, val);\n'
              '      }\n'
              '    if (mode == AC_MODE_RELU) {\n'
              '      for (int i = 0; i < outputN * outputC; i++)\n'
              '        outputs[0].data[i] = '
              'relu_function(outputs[0].data[i]);\n'
              '    } else if (mode == AC_MODE_SIGMOID) {\n'
              '      assert(false);\n'
              '    } else if (mode == AC_MODE_TANH) {\n'
              '      assert(false);\n'
              '    } else {\n'
              '      assert(mode == AC_MODE_NONE);\n'
              '    }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              'public:\n'
              '  ActiMode mode;\n'
              '};\n')

Fragment(uuid='NORMALIZED-003851',
         path='/src/generator/generator.cc',
         lineno=806,
         depth=2,
         type='class_decl',
         name='ElementTemp',
         text='class ElementTemp : public OpTemp {\n'
              'public:\n'
              '  ElementTemp(OpType _type)\n'
              '  : OpTemp(2, 1, _type) {\n'
              '    assert(_type == OP_EW_ADD || _type == OP_EW_MUL);\n'
              '  }\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    if (x1.numDim != x2.numDim) return false;\n'
              '    int numDim = x1.numDim;\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      if (x1.dim[i] != x2.dim[i])\n'
              '        return false;\n'
              '      if (x1.stride[i] != x2.stride[i])\n'
              '        return false;\n'
              '      total *= x1.dim[i];\n'
              '    }\n'
              '    outputs[0].numDim = numDim;\n'
              '    for (int i = 0; i < numDim; i++) {\n'
              '      outputs[0].dim[i] = x1.dim[i];\n'
              '      outputs[0].stride[i] = x1.stride[i];\n'
              '      if (x1.split[i] != x2.split[i])\n'
              '        outputs[0].split[i] = SplitInfo::NO_SPLIT;\n'
              '      else\n'
              '        outputs[0].split[i] = x1.split[i];\n'
              '    }\n'
              '    if (type == OP_EW_ADD) {\n'
              '      for (int i = 0; i < total; i++)\n'
              '        outputs[0].data[i] = x1.data[i] + x2.data[i];\n'
              '    } else {\n'
              '      assert(type == OP_EW_MUL);\n'
              '      for (int i = 0; i < total; i++)\n'
              '        outputs[0].data[i] = x1.data[i] * x2.data[i];\n'
              '    }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '};\n')

Fragment(uuid='NORMALIZED-003852',
         path='/src/generator/generator.cc',
         lineno=857,
         depth=2,
         type='class_decl',
         name='ActivationTemp',
         text='class ActivationTemp : public OpTemp {\n'
              'public:\n'
              '  ActivationTemp(OpType _type)\n'
              '  : OpTemp(1, 1, _type) {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    outputs[0].numDim = x1.numDim;\n'
              '    int total = 1;\n'
              '    for (int i = 0; i < x1.numDim; i++) {\n'
              '      outputs[0].dim[i] = x1.dim[i];\n'
              '      outputs[0].stride[i] = x1.stride[i];\n'
              '      outputs[0].split[i] = x1.split[i];\n'
              '      total *= x1.dim[i];\n'
              '    }\n'
              '    if (type == OP_RELU) {\n'
              '      for (int i = 0; i < total; i++)\n'
              '        outputs[0].data[i] = relu_function(x1.data[i]);\n'
              '    } else if (type == OP_SIGMOID) {\n'
              '      assert(false);\n'
              '    } else {\n'
              '      assert(false);\n'
              '    }\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '};\n')

Fragment(uuid='NORMALIZED-003853',
         path='/src/generator/generator.cc',
         lineno=895,
         depth=2,
         type='class_decl',
         name='TransposeTemp',
         text='class TransposeTemp : public OpTemp {\n'
              'public:\n'
              '  TransposeTemp(int _n, const int _perm[], bool _shuffle)\n'
              '  : OpTemp(1, 1, OP_TRANSPOSE), shuffle(_shuffle)\n'
              '  {\n'
              '    myNumDim = _n;\n'
              '    for (int i = 0; i < myNumDim; i++)\n'
              '      perm[i] = _perm[i];\n'
              '    for (int i = 0; i < myNumDim; i++) {\n'
              '      assert(perm[i] >= 0);\n'
              '      assert(perm[i] < myNumDim);\n'
              '      for (int j = i + 1; j < myNumDim; j++)\n'
              '        assert(perm[i] != perm[j]);\n'
              '    }\n'
              '  }\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  void dfs(TensorTemp& output, const TensorTemp& x,\n'
              '           int d, int myPos, int inPos)\n'
              '  {\n'
              '    if (d == myNumDim) {\n'
              '      output.data[myPos] = x.data[inPos];\n'
              '    } else {\n'
              '      for (int i = 0; i < output.dim[d]; i++) {\n'
              '        dfs(output, x, d+1, myPos + i * output.stride[d], inPos '
              '+ i * x.stride[perm[d]]);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  bool compute(const TensorTemp& x, int opIdx)\n'
              '  {\n'
              '    if (x.numDim != myNumDim) return false;\n'
              '    outputs[0].numDim = myNumDim;\n'
              '    for (int i = 0; i < myNumDim; i++) {\n'
              '      outputs[0].dim[i] = x.dim[perm[i]];\n'
              '      outputs[0].split[i] = x.split[perm[i]];\n'
              '    }\n'
              '    if (shuffle) {\n'
              '      int size = 1;\n'
              '      for (int i = myNumDim - 1; i >= 0; i--) {\n'
              '        outputs[0].stride[i] = size;\n'
              '        size *= outputs[0].dim[i];\n'
              '      }\n'
              '    } else {\n'
              '      for (int i = 0; i < myNumDim; i++)\n'
              '        outputs[0].stride[i] = x.stride[perm[i]];\n'
              '    }\n'
              '    dfs(outputs[0], x, 0, 0, 0);\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  int myNumDim, perm[MAX_DIM];\n'
              '  int idx;\n'
              '  bool shuffle;\n'
              '};\n')

Fragment(uuid='NORMALIZED-003854',
         path='/src/generator/generator.cc',
         lineno=959,
         depth=2,
         type='class_decl',
         name='ConcatTemp',
         text='class ConcatTemp : public OpTemp {\n'
              'public:\n'
              '  ConcatTemp(int n, int _numDim, int _axis)\n'
              '  : OpTemp(n, 1, OP_CONCAT), myNumDim(_numDim), axis(_axis)\n'
              '  {}\n'
              '  void dfs(TensorTemp& output, const TensorTemp& input,\n'
              '           int d, int myPos, int inPos) {\n'
              '    if (d == myNumDim) {\n'
              '      output.data[myPos] = input.data[inPos];\n'
              '    } else {\n'
              '      for (int i = 0; i < input.dim[d]; i++) {\n'
              '        if (d == axis)\n'
              '          dfs(output, input, d+1,\n'
              '              myPos + (i + accAxis) * output.stride[d],\n'
              '              inPos + i * input.stride[d]);\n'
              '        else\n'
              '          dfs(output, input, d+1,\n'
              '              myPos + i * output.stride[d],\n'
              '              inPos + i * input.stride[d]);\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    for (int i = 0; i < n; i++)\n'
              '      if (inputs[i].numDim != myNumDim) return false;\n'
              '    if (axis >= myNumDim) return false;\n'
              '    for (int i = 1; i < n; i++)\n'
              '      for (int j = 0; j < myNumDim; j++)\n'
              '        if ((j != axis) && (inputs[0].dim[j] != '
              'inputs[i].dim[j]))\n'
              '          return false;\n'
              '    outputs[0].numDim = myNumDim;\n'
              '    for (int i = 0; i < myNumDim; i++) {\n'
              '      outputs[0].dim[i] = inputs[0].dim[i];\n'
              '      outputs[0].split[i] = inputs[0].split[i];\n'
              '      if (i != axis) {\n'
              '        for (int j = 1; j < n; j++)\n'
              '          outputs[0].split[i].combine(inputs[j].split[i]);\n'
              '      } else {\n'
              '        for (int j = 1; j < n; j++) {\n'
              '          outputs[0].split[i].merge(outputs[0].dim[i], '
              'inputs[j].split[i]);\n'
              '          outputs[0].dim[i] += inputs[j].dim[i];\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '    if (outputs[0].size() > MAX_SIZE)\n'
              '      return false;\n'
              '    int size = 1;\n'
              '    for (int i = myNumDim - 1; i >= 0; i--) {\n'
              '      outputs[0].stride[i] = size;\n'
              '      size = size * outputs[0].dim[i];\n'
              '    }\n'
              '    accAxis = 0;\n'
              '    for (int i = 0; i < n; i++) {\n'
              '      dfs(outputs[0], inputs[i], 0, 0, 0);\n'
              '      accAxis += inputs[0].dim[axis];\n'
              '    }\n'
              '    /*\n'
              '    int outSize = 1, inSize = 1;\n'
              '    for (int i = 0; i < axis; i++)\n'
              '      outSize *= inputs[0].dim[i];\n'
              '    for (int i = axis + 1; i < myNumDim; i++)\n'
              '      inSize *= inputs[0].dim[i];\n'
              '    int outIdx = 0, inIdxs[MAX_NUM_INPUTS];\n'
              '    for (int i = 0; i < n; i++)\n'
              '      inIdxs[i] = 0;\n'
              '    for (int out = 0; out < outSize; out++)\n'
              '      for (int i = 0; i < n; i++)\n'
              '        for (int j = 0; j < inputs[i].dim[axis]; j++)\n'
              '          for (int in = 0; in < inSize; in++) {\n'
              '            outputs[0].data[outIdx++] = '
              'inputs[i].data[inIdxs[i]++];\n'
              '          }\n'
              '    assert(outIdx == outputs[0].size());\n'
              '    */\n'
              '    outputs[0].opIdx = opIdx;\n'
              '    outputs[0].tsIdx = 0;\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(numInputs == 2);\n'
              '    TensorTemp xs[2];\n'
              '    xs[0] = x1;\n'
              '    xs[1] = x2;\n'
              '    return compute(2, xs, opIdx);\n'
              '  }\n'
              'public:\n'
              '  int myNumDim, axis;\n'
              '  int accAxis;\n'
              '};\n')

Fragment(uuid='NORMALIZED-003855',
         path='/src/generator/generator.cc',
         lineno=1055,
         depth=2,
         type='class_decl',
         name='SplitTemp',
         text='class SplitTemp : public OpTemp {\n'
              'public:\n'
              '  SplitTemp(int n, int _axis)\n'
              '  : OpTemp(1, n, OP_SPLIT), axis(_axis)\n'
              '  {}\n'
              '  bool compute(int n, TensorTemp* inputs, int opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              '  void dfs(TensorTemp& output, const TensorTemp& input,\n'
              '           int d, int myPos, int inPos)\n'
              '  {\n'
              '    if (d == output.numDim) {\n'
              '      output.data[myPos] = input.data[inPos];\n'
              '    } else {\n'
              '      for (int i = 0; i < output.dim[d]; i++) {\n'
              '        if (d == axis) {\n'
              '          dfs(output, input, d + 1,\n'
              '              myPos + i * output.stride[d],\n'
              '              inPos + (i + accAxis) * input.stride[d]);\n'
              '        } else {\n'
              '          dfs(output, input, d + 1,\n'
              '              myPos + i * output.stride[d],\n'
              '              inPos + i * input.stride[d]);\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, int opIdx)\n'
              '  {\n'
              '    // TODO:Only consider 2-split for now\n'
              '    assert(numOutputs == 2);\n'
              '    if (x1.split[axis].num == 0) return false;\n'
              '    SplitInfo parent = x1.split[axis], left, right;\n'
              '    int oldPos = x1.dim[axis], curPos;\n'
              '    for (int i = numOutputs - 1; i >= 0; i--) {\n'
              '      outputs[i].numDim = x1.numDim;\n'
              '      int size = 1;\n'
              '      for (int j = x1.numDim - 1; j >= 0; j--) {\n'
              '        if (j != axis) {\n'
              '          outputs[i].dim[j] = x1.dim[j];\n'
              '          outputs[i].split[j] = x1.split[j];\n'
              '        } else {\n'
              '          if (i > 0)\n'
              '            parent.divide(left, right, curPos);\n'
              '          else {\n'
              '            curPos = 0;\n'
              '            right = parent;\n'
              '          }\n'
              '          outputs[i].dim[j] = oldPos - curPos;\n'
              '          oldPos = curPos;\n'
              '          parent = left;\n'
              '          outputs[i].split[j] = right;\n'
              '        }\n'
              '        outputs[i].stride[j] = size;\n'
              '        size = size * outputs[i].dim[j];\n'
              '      }\n'
              '      accAxis = oldPos;\n'
              '      dfs(outputs[i], x1, 0, 0, 0);\n'
              '      /*\n'
              '      int outSize = 1;\n'
              '      int inSize = 1;\n'
              '      for (int j = 0; j < axis; j++)\n'
              '        outSize = outSize * outputs[i].dim[j];\n'
              '      for (int j = axis; j < outputs[i].numDim; j++)\n'
              '        inSize = inSize * outputs[i].dim[j];\n'
              '      for (int out = 0; out < outSize; out++) {\n'
              '        int dstIdx = out * inSize, srcIdx = out * inSize * '
              'numOutputs + inSize * i;\n'
              '        for (int in = 0; in < inSize; in++)\n'
              '          outputs[i].data[dstIdx++] = x1.data[srcIdx++];\n'
              '      }\n'
              '      */\n'
              '      outputs[i].opIdx = opIdx;\n'
              '      outputs[i].tsIdx = i;\n'
              '    }\n'
              '    return true;\n'
              '  }\n'
              '  bool compute(const TensorTemp& x1, const TensorTemp& x2, int '
              'opIdx)\n'
              '  {\n'
              '    assert(false);\n'
              '    return false;\n'
              '  }\n'
              'public:\n'
              '  int axis, accAxis;\n'
              '};\n')

Fragment(uuid='NORMALIZED-003856',
         path='/src/generator/generator.cc',
         lineno=1142,
         depth=2,
         type='namespace',
         name='std',
         text='namespace std {\n'
              '  template <>\n'
              '  struct hash<SplitInfo>\n'
              '  {\n'
              '    size_t operator()(const SplitInfo& si) const\n'
              '    {\n'
              '      size_t res = 17;\n'
              '      res = res * 31 + hash<int>()(si.num);\n'
              '      for (int i = 0; i < si.num; i++)\n'
              '        res = res * 31 + hash<int>()(si.pos[i]);\n'
              '      return res;\n'
              '    }\n'
              '  };\n'
              '  template <>\n'
              '  struct hash<TensorTemp>\n'
              '  {\n'
              '    size_t operator()(const TensorTemp& tt) const\n'
              '    {\n'
              '      size_t res = 17;\n'
              '      int total = 1;\n'
              '      res = res * 31 + hash<int>()(tt.numDim);\n'
              '      for (int i = 0; i < tt.numDim; i++) {\n'
              '        res = res * 31 + hash<int>()(tt.dim[i]);\n'
              '        res = res * 31 + hash<int>()(tt.stride[i]);\n'
              '        res = res * 31 + hash<SplitInfo>()(tt.split[i]);\n'
              '        total *= tt.dim[i];\n'
              '      }\n'
              '      for (int i = 0; i < total; i++)\n'
              '        res = res * 31 + hash<TYPE>()(tt.data[i]);\n'
              '      return res;\n'
              '    }\n'
              '  };\n'
              '\n'
              '  template <>\n'
              '  struct hash<TensorTempList>\n'
              '  {\n'
              '    size_t operator()(const TensorTempList& ttl) const\n'
              '    {\n'
              '      size_t res = 17;\n'
              '      res = res * 31 + hash<int>()(ttl.numTensor);\n'
              '      for (int i = 0; i < ttl.numTensor; i++)\n'
              '        res = res * 31 + hash<TensorTemp>()(ttl.tensors[i]);\n'
              '      return res;\n'
              '    }\n'
              '  };\n'
              '}\n')

Fragment(uuid='NORMALIZED-003857',
         path='/src/generator/generator.cc',
         lineno=1189,
         depth=2,
         type='function_decl',
         name='find_same_subgraph',
         text='bool find_same_subgraph(const GraphTemp::GraphOp& o1,\n'
              '                        const GraphTemp::GraphOp& o2)\n'
              '{\n'
              '  if (o1.opTemp != o2.opTemp)\n'
              '    return false;\n'
              '  for (int i = 0; i < o1.opTemp->numInputs; i++) {\n'
              '    if ((o1.opIdx[i] != o2.opIdx[i]) || (o1.tsIdx[i] != '
              'o2.tsIdx[i])) return false;\n'
              '    if (o1.opIdx[i] >= 0) return false;\n'
              '  }\n'
              '  return true;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003858',
         path='/src/generator/generator.cc',
         lineno=1201,
         depth=2,
         type='function_decl',
         name='find_same_supergraph',
         text='bool find_same_supergraph(const GraphTemp::GraphOp& o1,\n'
              '                          const GraphTemp::GraphOp& o2)\n'
              '{\n'
              '  if (o1.opTemp != o2.opTemp)\n'
              '    return false;\n'
              '  // Only one input is different\n'
              '  int diff = 0;\n'
              '  for (int i = 0; i < o1.opTemp->numInputs; i++) {\n'
              '    if ((o1.opIdx[i] != o2.opIdx[i]) || (o1.opIdx[i] >= 0))\n'
              '      diff ++;\n'
              '  }\n'
              '  if (diff > 1) return false;\n'
              '  return true;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003859',
         path='/src/generator/generator.cc',
         lineno=1216,
         depth=2,
         type='function_decl',
         name='variable_ordering',
         text='bool variable_ordering(const GraphTemp& g)\n'
              '{\n'
              '  if (g.find("x1") > g.find("x2")) return false;\n'
              '  if (g.find("x2") > g.find("x3")) return false;\n'
              '  if (g.find("w1") > g.find("w2")) return false;\n'
              '  if (g.find("w2") > g.find("w3")) return false;\n'
              '  if (g.find("i1") > g.find("i2")) return false;\n'
              '  if (g.find("i2") > g.find("i3")) return false;\n'
              '  if (g.find("w4") > g.find("w5")) return false;\n'
              '  if (g.find("w5") > g.find("w6")) return false;\n'
              '  return true;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003860',
         path='/src/generator/generator.cc',
         lineno=1229,
         depth=2,
         type='function_decl',
         name='pass_checks',
         text='bool pass_checks(const GraphTemp& g1,\n'
              '                 const GraphTemp& g2)\n'
              '{\n'
              '  // Pruning: cannot have common subgraphs\n'
              '  for (int i = 0; i < g1.numOps; i++)\n'
              '    for (int j = 0; j < g2.numOps; j++)\n'
              '      if (find_same_subgraph(g1.op[i], g2.op[j]))\n'
              '        return false;\n'
              '  // Pruning: cannot have common supergraphs\n'
              '  if (find_same_supergraph(g1.op[g1.numOps-1], '
              'g2.op[g2.numOps-1]))\n'
              '    return false;\n'
              '  // Pruning: check variable ordering (x1 used before x2 before '
              'x3)\n'
              '  if ((!variable_ordering(g1)) && (!variable_ordering(g2)))\n'
              '    return false;\n'
              '  // Pruning: variable renaming (e.g., "x1" must appear before '
              '"x2")\n'
              '  return true;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003861',
         path='/src/generator/generator.cc',
         lineno=1247,
         depth=2,
         type='function_decl',
         name='same_via_subst',
         text='bool same_via_subst(const GraphTemp& g1,\n'
              '                    const GraphTemp& g2,\n'
              '                    std::map<int, int>& variable_subst)\n'
              '{\n'
              '  if (g1.numOps != g2.numOps) return false;\n'
              '  for (int i = 0; i < g1.numOps; i++) {\n'
              '    if (g1.op[i].opTemp != g2.op[i].opTemp) return false;\n'
              '    for (int j = 0; j < g1.op[i].opTemp->numInputs; j++) {\n'
              '      if (g1.op[i].tsIdx[j] != g2.op[i].tsIdx[j]) return '
              'false;\n'
              '      int op1 = g1.op[i].opIdx[j];\n'
              '      int op2 = g2.op[i].opIdx[j];\n'
              '      if ((op1 >= 0) || (op2 >= 0)) {\n'
              '        if (op1 != op2) return false;\n'
              '      } else {\n'
              '        if (variable_subst.find(op1) == variable_subst.end()) '
              '{\n'
              '          variable_subst[op1] = op2;\n'
              '        } else {\n'
              '          if (variable_subst[op1] != op2) return false;\n'
              '        }\n'
              '      }\n'
              '    }\n'
              '  }\n'
              '  return true;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003862',
         path='/src/generator/generator.cc',
         lineno=1272,
         depth=2,
         type='struct_decl',
         name='TransferTemp',
         text='struct TransferTemp {\n'
              '  GraphTemp fstGraph, sndGraph;\n'
              '  bool isDuplicate;\n'
              '};\n')

Fragment(uuid='NORMALIZED-003863',
         path='/src/generator/generator.cc',
         lineno=1277,
         depth=2,
         type='var_decl',
         name='graph_guid',
         text='size_t graph_guid = 0;\n')

Fragment(uuid='NORMALIZED-003864',
         path='/src/generator/generator.cc',
         lineno=1278,
         depth=2,
         type='function_decl',
         name='dfs',
         text='void dfs(int depth,\n'
              '         GraphTemp& graph,\n'
              '         std::vector<TensorTemp>& inputs,\n'
              '         const std::vector<OpTemp*>& ops,\n'
              '         std::unordered_map<size_t, GraphTemp>& hashmap,\n'
              '         std::vector<TransferTemp>& transfers)\n'
              '{\n'
              '  // Pruning should not have duplicated tensors\n'
              '  for (int i = 0; i < inputs.size(); i++)\n'
              '    for (int j = i + 1; j < inputs.size(); j++) {\n'
              '      if (inputs[i] == inputs[j])\n'
              '        return;\n'
              '    }\n'
              '  // Pruning should not have duplicated operators\n'
              '  for (int i = 0; i < graph.numOps; i++)\n'
              '    for (int j = i + 1; j < graph.numOps; j++) {\n'
              '      if (graph.op[i] == graph.op[j])\n'
              '        return;\n'
              '    }\n'
              '  // Add current subgraph to graphs\n'
              '  TensorTempList ttl;\n'
              '  ttl.numTensor = 0;\n'
              '  for (int i = inputs.size() - 1; inputs[i].opIdx >= 0; i--) {\n'
              '    bool found = false;\n'
              '    for (int j = 0; j < graph.numOps; j++)\n'
              '      for (int k = 0; k < graph.op[j].opTemp->numInputs; k++)\n'
              '        if (graph.op[j].opIdx[k] == inputs[i].opIdx\n'
              '        && graph.op[j].tsIdx[k] == inputs[i].tsIdx)\n'
              '          found = true;\n'
              '    if (!found) {\n'
              '      ttl.numTensor++;\n'
              '      assert(ttl.numTensor <= MAX_NUM_TENSORS);\n'
              '      ttl.tensors[ttl.numTensor-1] = inputs[i];\n'
              '    }\n'
              '  }\n'
              '  graph_guid ++;\n'
              '  if (graph_guid % 100000 == 0)\n'
              '    printf("Num of Graphs = %zu hashmap.size() = %zu\\n", '
              'graph_guid, hashmap.size()); \n'
              '  size_t hashKey = hash<TensorTempList>()(ttl);\n'
              '  if (hashmap.find(hashKey) != hashmap.end()) {\n'
              '    // Found a match\n'
              '    GraphTemp oldgraph = hashmap[hashKey];\n'
              '    if (pass_checks(oldgraph, graph)) {\n'
              '      // Pruning: cannot have redundant transfers via variable '
              'substitutions\n'
              '      bool found = false;\n'
              '      for (int i = 0; i < transfers.size(); i++)\n'
              '        if (!(transfers[i].isDuplicate)) {\n'
              '          // first->oldgraph, second->graph\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n'
              '            if (same_via_subst(transfers[i].fstGraph, oldgraph, '
              'variable_subst)\n'
              '            && same_via_subst(transfers[i].sndGraph, graph, '
              'variable_subst)) {\n'
              '              found = true;\n'
              '              break;\n'
              '            }\n'
              '          }\n'
              '          // first-> graph, second-> oldgraph\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n'
              '            if (same_via_subst(transfers[i].fstGraph, graph, '
              'variable_subst)\n'
              '            && same_via_subst(transfers[i].sndGraph, oldgraph, '
              'variable_subst)) {\n'
              '              found = true;\n'
              '              break;\n'
              '            }\n'
              '          }\n'
              '          // oldgraph->first, graph->second\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n'
              '            if (same_via_subst(oldgraph, transfers[i].fstGraph, '
              'variable_subst)\n'
              '            && same_via_subst(graph, transfers[i].sndGraph, '
              'variable_subst)) {\n'
              '              transfers[i].isDuplicate = true;\n'
              '              continue;\n'
              '            }\n'
              '          }\n'
              '          // graph->first, oldgraph->second\n'
              '          {\n'
              '            std::map<int, int> variable_subst;\n'
              '            if (same_via_subst(graph, transfers[i].fstGraph, '
              'variable_subst)\n'
              '            && same_via_subst(oldgraph, transfers[i].sndGraph, '
              'variable_subst)) {\n'
              '              transfers[i].isDuplicate = true;\n'
              '              continue;\n'
              '            }\n'
              '          }\n'
              '        } // if (it->second)\n'
              '      if (!found) {\n'
              '        TransferTemp tt;\n'
              '        tt.fstGraph = oldgraph;\n'
              '        tt.sndGraph = graph;\n'
              '        tt.isDuplicate = false;\n'
              '        transfers.push_back(tt);\n'
              '        printf("Source Graph: %s\\n", '
              'oldgraph.to_string().c_str());\n'
              '        printf("Target Graph: %s\\n", '
              'graph.to_string().c_str());\n'
              '      }\n'
              '    }\n'
              '  } else {\n'
              '    hashmap[hashKey] = graph;\n'
              '  }\n'
              '  if (depth >= 3) return; // MAX_NUM_OPS\n'
              '  for (int i = 0; i < ops.size(); i++)\n'
              '    switch (ops[i]->type) {\n'
              '      case OP_EW_ADD:\n'
              '      case OP_EW_MUL:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          for (int k = j + 1; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONV2D:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++) {\n'
              '          if (inputs[j].opIdx < 0 && '
              "variable_names[inputs[j].opIdx][0] == 'w')\n"
              '            continue;\n'
              '          for (int k = 0; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '      case OP_MATMUL:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          for (int k = 0; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_MUL:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          for (int k = 0; k < inputs.size(); k++)\n'
              '            if ((j != k) && (op->compute(inputs[j], inputs[k], '
              'depth))) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_RELU:\n'
              '      case OP_ENLARGE:\n'
              '      case OP_TRANSPOSE:\n'
              '      case OP_POOL2D_AVG:\n'
              '      case OP_POOL2D_MAX:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          if (op->compute(inputs[j], depth)) {\n'
              '            inputs.push_back(op->outputs[0]);\n'
              '            graph.push_op(op, inputs[j]);\n'
              '            dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '            graph.pop_op();\n'
              '            inputs.pop_back();\n'
              '          }\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONSTANT_IMM:\n'
              '      case OP_CONSTANT_ICONV:\n'
              '      case OP_CONSTANT_ONE:\n'
              '      case OP_CONSTANT_POOL:\n'
              '      {\n'
              '        ConstantTemp* op = (ConstantTemp*) ops[i];\n'
              '        if (op->compute(depth)) {\n'
              '          inputs.push_back(op->outputs[0]);\n'
              '          graph.push_op(op);\n'
              '          dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '          graph.pop_op();\n'
              '          inputs.pop_back();\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '      case OP_CONCAT:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        assert(op->numInputs == 2);\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          for (int k = j + 1; k < inputs.size(); k++)\n'
              '            if (op->compute(inputs[j], inputs[k], depth)) {\n'
              '              inputs.push_back(op->outputs[0]);\n'
              '              graph.push_op(op, inputs[j], inputs[k]);\n'
              '              dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '              graph.pop_op();\n'
              '              inputs.pop_back();\n'
              '            }\n'
              '        break;\n'
              '      }\n'
              '      case OP_SPLIT:\n'
              '      {\n'
              '        OpTemp* op = ops[i];\n'
              '        for (int j = 0; j < inputs.size(); j++)\n'
              '          if (op->compute(inputs[j], depth)) {\n'
              '            for (int k = 0; k < op->numOutputs; k++)\n'
              '              inputs.push_back(op->outputs[k]);\n'
              '            graph.push_op(op, inputs[j]);\n'
              '            dfs(depth + 1, graph, inputs, ops, hashmap, '
              'transfers);\n'
              '            graph.pop_op();\n'
              '            for (int k = 0; k < op->numOutputs; k++)\n'
              '              inputs.pop_back();\n'
              '          }\n'
              '        break;\n'
              '      }\n'
              '      default:\n'
              '        assert(false);\n'
              '    }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003865',
         path='/src/generator/generator.cc',
         lineno=1505,
         depth=2,
         type='function_decl',
         name='init_tensor_temp',
         text='void init_tensor_temp(TensorTemp& tt, std::string name, int '
              'opIdx, int tsIdx, int n = 0, int c = 0, int h = 0, int w = 0)\n'
              '{\n'
              '  variable_names[opIdx] = name;\n'
              '  tt.numDim = 0;\n'
              '  if (n > 0) { tt.numDim ++; tt.dim[0] = n; tt.split[0] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  if (c > 0) { tt.numDim ++; tt.dim[1] = c; tt.split[1] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  if (h > 0) { tt.numDim ++; tt.dim[2] = h; tt.split[2] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  if (w > 0) { tt.numDim ++; tt.dim[3] = w; tt.split[3] = '
              'SplitInfo::NO_SPLIT;}\n'
              '  int size = 1;\n'
              '  for (int i = tt.numDim - 1; i >= 0; i --) {\n'
              '    tt.stride[i] = size;\n'
              '    size *= tt.dim[i];\n'
              '  }\n'
              '  tt.opIdx = opIdx;\n'
              '  tt.tsIdx = tsIdx;\n'
              '  int total = tt.size();\n'
              '  assert(total <= MAX_SIZE);\n'
              '  for (int i = 0; i < total; i++)\n'
              '    //tt.data[i] = (std::rand() % 2000 - 1000);\n'
              '    tt.data[i] = std::rand() - RAND_MAX / 2;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003866',
         path='/src/generator/generator.cc',
         lineno=1527,
         depth=2,
         type='function_decl',
         name='init_graph_temp',
         text='void init_graph_temp(GraphTemp& graph)\n'
              '{\n'
              '  graph.numOps = 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003867',
         path='/src/generator/generator.cc',
         lineno=1532,
         depth=2,
         type='function_decl',
         name='pb_fill_parameter',
         text='void pb_fill_parameter(int key, int value,\n'
              '                       GraphSubst::Operator* pbOp)\n'
              '{\n'
              '  GraphSubst::Parameter* para = pbOp->add_para();\n'
              '  para->set_key(key);\n'
              '  para->set_value(value);\n'
              '}\n')

Fragment(uuid='NORMALIZED-003868',
         path='/src/generator/generator.cc',
         lineno=1540,
         depth=2,
         type='function_decl',
         name='pb_fill_op',
         text='void pb_fill_op(const GraphTemp::GraphOp& graphOp,\n'
              '                GraphSubst::Operator* pbOp)\n'
              '{\n'
              '  pbOp->set_type(graphOp.opTemp->type);\n'
              '  for (int j = 0; j < graphOp.opTemp->numInputs; j++) {\n'
              '    GraphSubst::Tensor* tensor = pbOp->add_input();\n'
              '    tensor->set_opid(graphOp.opIdx[j]);\n'
              '    tensor->set_tsid(graphOp.tsIdx[j]);   \n'
              '  }\n'
              '  switch (graphOp.opTemp->type) {\n'
              '    case OP_CONV2D:\n'
              '    {\n'
              '      Conv2DTemp* conv = (Conv2DTemp*) graphOp.opTemp;\n'
              '      PaddingMode padding = conv->samePad ?\n'
              '          PD_MODE_SAME : PD_MODE_VALID;\n'
              '      ActiMode activation = conv->relu ?\n'
              '          ActiMode(AC_MODE_RELU) : ActiMode(AC_MODE_NONE);\n'
              '      pb_fill_parameter(PM_KERNEL_H, conv->kernelH, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, conv->kernelW, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_H, conv->strideH, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_W, conv->strideW, pbOp);\n'
              '      pb_fill_parameter(PM_PAD, padding, pbOp);\n'
              '      pb_fill_parameter(PM_ACTI, activation, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_POOL2D_AVG:\n'
              '    case OP_POOL2D_MAX:\n'
              '    {\n'
              '      Pool2DTemp* pool = (Pool2DTemp*) graphOp.opTemp;\n'
              '      PaddingMode padding = pool->samePad ?\n'
              '          PD_MODE_SAME: PD_MODE_VALID;\n'
              '      pb_fill_parameter(PM_OP_TYPE, pool->type, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_H, pool->kernelH, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, pool->kernelW, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_H, pool->strideH, pbOp);\n'
              '      pb_fill_parameter(PM_STRIDE_W, pool->strideW, pbOp);\n'
              '      pb_fill_parameter(PM_PAD, padding, pbOp);\n'
              '      pb_fill_parameter(PM_ACTI, AC_MODE_NONE, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONCAT:\n'
              '    {\n'
              '      ConcatTemp* concat = (ConcatTemp*) graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_NUM_INPUTS, concat->numInputs, '
              'pbOp);\n'
              '      pb_fill_parameter(PM_AXIS, concat->axis, pbOp);\n'
              '      pb_fill_parameter(PM_NUMDIM, concat->myNumDim, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_SPLIT:\n'
              '    {\n'
              '      SplitTemp* split = (SplitTemp*) graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_NUM_OUTPUTS, split->numOutputs, '
              'pbOp);\n'
              '      pb_fill_parameter(PM_AXIS, split->axis, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_RELU:\n'
              '    case OP_SIGMOID:\n'
              '    case OP_MUL:\n'
              '    case OP_EW_ADD:\n'
              '    case OP_EW_MUL:\n'
              '    {\n'
              '      break;\n'
              '    }\n'
              '    case OP_ENLARGE:\n'
              '    {\n'
              '      EnlargeConvTemp* enlarge = (EnlargeConvTemp*) '
              'graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_KERNEL_H, enlarge->kernelH, pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, enlarge->kernelW, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONSTANT_ICONV:\n'
              '    case OP_CONSTANT_POOL:\n'
              '    {\n'
              '      ConstantTemp* constant = (ConstantTemp*) graphOp.opTemp;\n'
              '      assert(constant->ndim == 4);\n'
              '      pb_fill_parameter(PM_KERNEL_H, constant->dims[2], pbOp);\n'
              '      pb_fill_parameter(PM_KERNEL_W, constant->dims[3], pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_CONSTANT_ONE:\n'
              '    case OP_CONSTANT_IMM:\n'
              '    {\n'
              '      ConstantTemp* constant = (ConstantTemp*) graphOp.opTemp;\n'
              '      break;\n'
              '    }\n'
              '    case OP_MATMUL:\n'
              '    {\n'
              '      MatmulTemp* matmul = (MatmulTemp*) graphOp.opTemp;\n'
              '      pb_fill_parameter(PM_ACTI, matmul->mode, pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_TRANSPOSE:\n'
              '    {\n'
              '      TransposeTemp* transpose = (TransposeTemp*) '
              'graphOp.opTemp;\n'
              '      int ndim = transpose->myNumDim;\n'
              '      pb_fill_parameter(PM_NUMDIM, ndim, pbOp);\n'
              '      int perm = 0;\n'
              '      for (int i = 0; i < ndim; i++)\n'
              '        perm = perm * ndim + transpose->perm[i];\n'
              '      pb_fill_parameter(PM_PERM, perm, pbOp);\n'
              '      pb_fill_parameter(PM_OUTSHUFFLE, transpose->shuffle, '
              'pbOp);\n'
              '      break;\n'
              '    }\n'
              '    case OP_BATCHNORM:\n'
              '    default:\n'
              '      printf("unsupported type(%d)\\n", graphOp.opTemp->type);\n'
              '      assert(false);\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003869',
         path='/src/generator/generator.cc',
         lineno=1650,
         depth=2,
         type='function_decl',
         name='pb_fill_rule',
         text='void pb_fill_rule(const GraphTemp& fstGraph,\n'
              '                  const GraphTemp& sndGraph,\n'
              '                  GraphSubst::Rule* rule)\n'
              '{\n'
              '  int srcOpIdxs[MAX_NUM_TENSORS], srcTsIdxs[MAX_NUM_TENSORS];\n'
              '  int dstOpIdxs[MAX_NUM_TENSORS], dstTsIdxs[MAX_NUM_TENSORS];\n'
              '  int srcMappedOutputs = fstGraph.mapped_outputs(srcOpIdxs, '
              'srcTsIdxs);\n'
              '  int dstMappedOutputs = sndGraph.mapped_outputs(dstOpIdxs, '
              'dstTsIdxs);\n'
              '  assert(srcMappedOutputs == dstMappedOutputs);\n'
              '  for (int i = 0; i < fstGraph.numOps; i++) {\n'
              '    GraphSubst::Operator* srcOp = rule->add_srcop();\n'
              '    pb_fill_op(fstGraph.op[i], srcOp);\n'
              '  }\n'
              '  for (int i = 0; i < sndGraph.numOps; i++) {\n'
              '    GraphSubst::Operator* dstOp = rule->add_dstop();\n'
              '    pb_fill_op(sndGraph.op[i], dstOp);\n'
              '  }\n'
              '  for (int i = 0; i < srcMappedOutputs; i++) {\n'
              '    GraphSubst::MapOutput* mapOutput = '
              'rule->add_mappedoutput();\n'
              '    mapOutput->set_srcopid(srcOpIdxs[i]);\n'
              '    mapOutput->set_dstopid(dstOpIdxs[i]);\n'
              '    mapOutput->set_srctsid(srcTsIdxs[i]);\n'
              '    mapOutput->set_dsttsid(dstTsIdxs[i]);\n'
              '  }\n'
              '}\n')

Fragment(uuid='NORMALIZED-003870',
         path='/src/generator/generator.cc',
         lineno=1676,
         depth=2,
         type='function_decl',
         name='main',
         text='int main(int argc, char **argv)\n'
              '{\n'
              '  std::unordered_map<size_t, GraphTemp> hashmap;\n'
              '  std::vector<TransferTemp> transfers;\n'
              '  std::vector<TensorTemp> inputs;\n'
              '  GraphTemp graph;\n'
              '  init_graph_temp(graph);\n'
              '  // Create 2D tensors\n'
              '  TensorTemp x1, x2, x3, w1, w2, w3;\n'
              '  init_tensor_temp(x1, "x1", -1, 0, BATCHSIZE, 4);\n'
              '  inputs.push_back(x1);\n'
              '  init_tensor_temp(x2, "x2", -2, 0, BATCHSIZE, 4);\n'
              '  inputs.push_back(x2);\n'
              '  init_tensor_temp(x3, "x3", -3, 0, BATCHSIZE, 4);\n'
              '  inputs.push_back(x3);\n'
              '  init_tensor_temp(w1, "w1", -4, 0, 4, 4);\n'
              '  inputs.push_back(w1);\n'
              '  init_tensor_temp(w2, "w2", -5, 0, 4, 4);\n'
              '  inputs.push_back(w2);\n'
              '  init_tensor_temp(w3, "w3", -6, 0, 4, 4);\n'
              '  inputs.push_back(w3);\n'
              '  // Create 4D tensors\n'
              '  TensorTemp i1, i2, i3, w4, w5, w6, w7, w8, w9, w10, w11, w12, '
              'w13, w14;\n'
              '  init_tensor_temp(i1, "i1", -7, 0, BATCHSIZE, 4, 5, 5);\n'
              '  inputs.push_back(i1);\n'
              '  init_tensor_temp(i2, "i2", -8, 0, BATCHSIZE, 4, 5, 5);\n'
              '  inputs.push_back(i2);\n'
              '  init_tensor_temp(i3, "i3", -9, 0, BATCHSIZE, 4, 5, 5);\n'
              '  inputs.push_back(i3);\n'
              '  init_tensor_temp(w4, "w4", -10, 0, 4, 4, 3, 3);\n'
              '  inputs.push_back(w4);\n'
              '  init_tensor_temp(w5, "w5", -11, 0, 4, 4, 3, 3);\n'
              '  inputs.push_back(w5);\n'
              '  init_tensor_temp(w6, "w6", -12, 0, 4, 4, 3, 3);\n'
              '  inputs.push_back(w6);\n'
              '  init_tensor_temp(w7, "w7", -13, 0, 4, 4, 1, 3);\n'
              '  inputs.push_back(w7);\n'
              '  init_tensor_temp(w8, "w8", -14, 0, 4, 4, 1, 3);\n'
              '  inputs.push_back(w8);\n'
              '  init_tensor_temp(w9, "w9", -15, 0, 4, 4, 1, 3);\n'
              '  inputs.push_back(w9);\n'
              '  init_tensor_temp(w10, "w10", -16, 0, 4, 4, 3, 1);\n'
              '  inputs.push_back(w10);\n'
              '  init_tensor_temp(w11, "w12", -17, 0, 4, 4, 3, 1);\n'
              '  inputs.push_back(w11);\n'
              '  init_tensor_temp(w12, "w12", -18, 0, 4, 4, 3, 1);\n'
              '  inputs.push_back(w12);\n'
              '  init_tensor_temp(w13, "w13", -19, 0, 4, 1, 3, 3);\n'
              '  inputs.push_back(w13);\n'
              '\n'
              '  // Create 0D scalar tensors\n'
              '  TensorTemp s0;\n'
              '  init_tensor_temp(s0, "s0", -20, 0);\n'
              '  inputs.push_back(s0);\n'
              '  std::vector<OpTemp*> ops;\n'
              '  ops.push_back(new MatmulTemp(AC_MODE_NONE));\n'
              '  operator_names[ops.back()] = "MatMul";\n'
              '  ops.push_back(new ElementTemp(OP_EW_ADD));\n'
              '  operator_names[ops.back()] = "EWAdd";\n'
              '  ops.push_back(new ElementTemp(OP_EW_MUL));\n'
              '  operator_names[ops.back()] = "EWMul";\n'
              '  ops.push_back(new Conv2DTemp(3, 3, 1, 1, true, false));\n'
              '  operator_names[ops.back()] = "Conv3x3S";\n'
              '  ops.push_back(new Conv2DTemp(3, 3, 1, 1, true, true));\n'
              '  operator_names[ops.back()] = "Conv3x3SR";\n'
              '  ops.push_back(new Conv2DTemp(1, 1, 1, 1, true, false));\n'
              '  operator_names[ops.back()] = "Conv1x1S";\n'
              '  ops.push_back(new Conv2DTemp(1, 1, 1, 1, true, true));\n'
              '  operator_names[ops.back()] = "Conv1x1SR";\n'
              '  ops.push_back(new Conv2DTemp(1, 3, 1, 1, true, false));\n'
              '  operator_names[ops.back()] = "Conv1x3S";\n'
              '  ops.push_back(new Conv2DTemp(1, 3, 1, 1, true, true));\n'
              '  operator_names[ops.back()] = "Conv1x3SR";\n'
              '  //ops.push_back(new Conv2DTemp(3, 1, 1, 1, true, false));\n'
              '  //operator_names[ops.back()] = "Conv3x1S";\n'
              '  //ops.push_back(new Conv2DTemp(3, 1, 1, 1, true, true));\n'
              '  //operator_names[ops.back()] = "Conv3x1SR";\n'
              '  ops.push_back(new Pool2DTemp(3, 3, 1, 1, true, '
              'OP_POOL2D_AVG));\n'
              '  operator_names[ops.back()] = "Pool3x3SA";\n'
              '  ops.push_back(new Pool2DTemp(3, 3, 1, 1, true, '
              'OP_POOL2D_MAX));\n'
              '  operator_names[ops.back()] = "Pool3x3SM";\n'
              '\n'
              '  ops.push_back(new ConstantPoolTemp(w13.numDim, w13.dim));\n'
              '  operator_names[ops.back()] = "Constant_Pool";\n'
              '  ops.push_back(new ConstantIConvTemp(w4.numDim, w4.dim));\n'
              '  operator_names[ops.back()] = "Constant_IConv";\n'
              '  ops.push_back(new ConstantIMMTemp(w1.numDim, w1.dim));\n'
              '  operator_names[ops.back()] = "Constant_IMM";\n'
              '  ops.push_back(new ConstantOneTemp(i1.numDim, i1.dim));\n'
              '  operator_names[ops.back()] = "Constant_One";\n'
              '  ops.push_back(new EnlargeConvTemp(3, 3));\n'
              '  operator_names[ops.back()] = "Enlarge3x3";\n'
              '  ops.push_back(new ScalarMulTemp());\n'
              '  operator_names[ops.back()] = "ScalarMul";\n'
              '  ops.push_back(new ActivationTemp(OP_RELU));\n'
              '  operator_names[ops.back()] = "Relu";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 2/*numDim*/, '
              '1/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_1";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 2/*numDim*/, '
              '0/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_0";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 4/*numDim*/, '
              '1/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_1";\n'
              '  ops.push_back(new ConcatTemp(2/*n*/, 4/*numDim*/, '
              '0/*axis*/));\n'
              '  operator_names[ops.back()] = "Concat_0";\n'
              '  ops.push_back(new SplitTemp(2/*n*/, 1/*axis*/));\n'
              '  operator_names[ops.back()] = "Split_1";\n'
              '  ops.push_back(new SplitTemp(2/*n*/, 0/*axis*/));\n'
              '  operator_names[ops.back()] = "Split_0";\n'
              '  const int trans10[2] = {1, 0};\n'
              '  // Should enable shuffle = true one\n'
              '  ops.push_back(new TransposeTemp(2/*n*/, trans10, '
              'false/*shuffle*/));\n'
              '  operator_names[ops.back()] = "Transpose_10";\n'
              '  ops.push_back(new TransposeTemp(2/*n*/, trans10, '
              'true/*shuffle*/));\n'
              '  operator_names[ops.back()] = "TransposeShuffle_10";\n'
              '#ifdef DEADCODE\n'
              '  // <test1>\n'
              '  MatmulTemp* matmul = new MatmulTemp(AC_MODE_NONE);\n'
              '  TransposeTemp* transpose = new TransposeTemp(2, trans10, '
              'false);\n'
              '  TransposeTemp* transposeT = new TransposeTemp(2, trans10, '
              'true);\n'
              '  TensorTemp o1, o2, o3, o4, o5;\n'
              '  assert(matmul->compute(w1, w2, 0));\n'
              '  o1 = matmul->outputs[0];\n'
              '  assert(transpose->compute(w1, 0));\n'
              '  o2 = transpose->outputs[0];\n'
              '  assert(transpose->compute(w2, 1));\n'
              '  o3 = transpose->outputs[0];\n'
              '  assert(matmul->compute(o3, o2, 2));\n'
              '  o4 = matmul->outputs[0];\n'
              '  assert(transposeT->compute(o4, 3));\n'
              '  o5 = transposeT->outputs[0];\n'
              '  o1.print("o1");\n'
              '  w1.print("w1");\n'
              '  o2.print("o2");\n'
              '  w2.print("w2");\n'
              '  o3.print("o3");\n'
              '  o4.print("o4");\n'
              '  o5.print("o5");\n'
              '  assert(o1 == o5);\n'
              '#endif\n'
              '#ifdef DEADCODE\n'
              '  // <test2>\n'
              '  MatmulTemp* matmul = new MatmulTemp(AC_MODE_NONE);\n'
              '  SplitTemp* split = new SplitTemp(2/*n*/, 1/*axis*/);\n'
              '  ConcatTemp* concat = new ConcatTemp(2/*n*/, 2/*numDim*/, '
              '1/*axis*/);\n'
              '  TensorTemp o1, o2, o3, o4, o5, o6;\n'
              '  assert(matmul->compute(x1, w1, 0));\n'
              '  o1 = matmul->outputs[0];\n'
              '  assert(matmul->compute(x1, w2, 1));\n'
              '  o2 = matmul->outputs[0];\n'
              '  assert(concat->compute(w1, w2, 0));\n'
              '  o3 = concat->outputs[0];\n'
              '  assert(matmul->compute(x1, o3, 1));\n'
              '  o4 = matmul->outputs[0];\n'
              '  assert(split->compute(o4, 2));\n'
              '  o5 = split->outputs[0];\n'
              '  o6 = split->outputs[1];\n'
              '  o1.print("o1");\n'
              '  o4.print("o4");\n'
              '  o5.print("o5");\n'
              '  assert(o1 == o5);\n'
              '  assert(o2 == o6);\n'
              '#endif\n'
              '  // <test3>\n'
              '  ConstantPoolTemp* constant = new ConstantPoolTemp(w13.numDim, '
              'w13.dim);\n'
              '  Pool2DTemp* pool = new Pool2DTemp(3, 3, 1, 1, true, '
              'OP_POOL2D_AVG);\n'
              '  Conv2DTemp* conv = new Conv2DTemp(3, 3, 1, 1, true, false);\n'
              '  TensorTemp o1, o2, o3;\n'
              '  assert(pool->compute(i1, 0));\n'
              '  o1 = pool->outputs[0];\n'
              '  assert(constant->compute(0));\n'
              '  o2 = constant->outputs[0];\n'
              '  assert(conv->compute(i1, o2, 1));\n'
              '  o3 = conv->outputs[0];\n'
              '  o1.print("o1");\n'
              '  o3.print("o3");\n'
              '  assert(o1 == o3);\n'
              '  // <test4>\n'
              '  ConstantIConvTemp* constant2 = new '
              'ConstantIConvTemp(w4.numDim, w4.dim);\n'
              '  assert(constant2->compute(0));\n'
              '  o1 = constant2->outputs[0];\n'
              '  assert(conv->compute(i1, o1, 1));\n'
              '  o2 = conv->outputs[0];\n'
              '  o2.print("o2");\n'
              '  i1.print("i1");\n'
              '  assert(o2 == i1);\n'
              '  // <test5>\n'
              '  MatmulTemp* matmul = new MatmulTemp(AC_MODE_NONE);\n'
              '  ConstantIMMTemp* constant3 = new ConstantIMMTemp(w1.numDim, '
              'w1.dim);\n'
              '  assert(constant3->compute(0));\n'
              '  o1 = constant3->outputs[0];\n'
              '  assert(matmul->compute(x1, o1, 1));\n'
              '  o2 = matmul->outputs[0];\n'
              '  assert(o2 == x1);\n'
              '  // <test6>\n'
              '  ElementTemp* ew_mul = new ElementTemp(OP_EW_MUL);\n'
              '  ConstantOneTemp* constant4 = new ConstantOneTemp(i1.numDim, '
              'i1.dim);\n'
              '  assert(constant4->compute(0));\n'
              '  o1 = constant4->outputs[0];\n'
              '  assert(ew_mul->compute(i1, o1, 1));\n'
              '  o2 = ew_mul->outputs[0];\n'
              '  assert(o2 == i1);\n'
              '\n'
              '  dfs(0, graph, inputs, ops, hashmap, transfers);\n'
              '  printf("===================== Generated %zu Transfers '
              '=====================\\n", transfers.size());\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '  GraphSubst::RuleCollection collection;\n'
              '  size_t count = 0;\n'
              '  for (int i = 0; i < transfers.size(); i++)\n'
              '    if (!(transfers[i].isDuplicate)) {\n'
              '      count ++;\n'
              '      printf("Source Graph: %s\\n", '
              'transfers[i].fstGraph.to_string().c_str());\n'
              '      printf("Target Graph: %s\\n", '
              'transfers[i].sndGraph.to_string().c_str());\n'
              '      pb_fill_rule(transfers[i].fstGraph, '
              'transfers[i].sndGraph, collection.add_rule());\n'
              '    }\n'
              '  std::fstream outputFile("graph_subst.pb", ios::out | '
              'ios::trunc);\n'
              '  collection.SerializeToOstream(&outputFile);\n'
              '  google::protobuf::ShutdownProtobufLibrary();\n'
              '  printf("===================== Generated %zu Transfers '
              '=====================\\n", count);\n'
              '  return 0;\n'
              '}\n')

Fragment(uuid='NORMALIZED-003871',
         path='/src/generator/rules.pb.cc',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/generator/rules.pb.cc\n')

Fragment(uuid='NORMALIZED-003872',
         path='/src/generator/rules.pb.cc',
         lineno=22,
         depth=2,
         type='namespace',
         name='protobuf_rules_2eproto',
         text='namespace protobuf_rules_2eproto {\n'
              'extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<0> scc_info_MapOutput;\n'
              'extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<0> scc_info_Parameter;\n'
              'extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<0> scc_info_Tensor;\n'
              'extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<2> scc_info_Operator;\n'
              'extern PROTOBUF_INTERNAL_EXPORT_protobuf_rules_2eproto '
              '::google::protobuf::internal::SCCInfo<2> scc_info_Rule;\n'
              '}  // namespace protobuf_rules_2eproto\n')

Fragment(uuid='NORMALIZED-003873',
         path='/src/generator/rules.pb.cc',
         lineno=29,
         depth=2,
         type='namespace',
         name='GraphSubst',
         text='namespace GraphSubst {\n'
              'class ParameterDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<Parameter>\n'
              '      _instance;\n'
              '} _Parameter_default_instance_;\n'
              'class TensorDefaultTypeInternal {\n'
              ' public:\n'
              '  ::google::protobuf::internal::ExplicitlyConstructed<Tensor>\n'
              '      _instance;\n'
              '} _Tensor_default_instance_;\n'
              'class OperatorDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<Operator>\n'
              '      _instance;\n'
              '} _Operator_default_instance_;\n'
              'class MapOutputDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<MapOutput>\n'
              '      _instance;\n'
              '} _MapOutput_default_instance_;\n'
              'class RuleDefaultTypeInternal {\n'
              ' public:\n'
              '  ::google::protobuf::internal::ExplicitlyConstructed<Rule>\n'
              '      _instance;\n'
              '} _Rule_default_instance_;\n'
              'class RuleCollectionDefaultTypeInternal {\n'
              ' public:\n'
              '  '
              '::google::protobuf::internal::ExplicitlyConstructed<RuleCollection>\n'
              '      _instance;\n'
              '} _RuleCollection_default_instance_;\n'
              '}  // namespace GraphSubst\n')

Fragment(uuid='NORMALIZED-003874',
         path='/src/generator/rules.pb.cc',
         lineno=61,
         depth=2,
         type='namespace',
         name='protobuf_rules_2eproto',
         text='namespace protobuf_rules_2eproto {\n'
              'static void InitDefaultsParameter() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Parameter_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Parameter();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Parameter::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<0> scc_info_Parameter =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), '
              '0, InitDefaultsParameter}, {}};\n'
              '\n'
              'static void InitDefaultsTensor() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Tensor_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Tensor();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Tensor::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<0> scc_info_Tensor =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), '
              '0, InitDefaultsTensor}, {}};\n'
              '\n'
              'static void InitDefaultsOperator() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Operator_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Operator();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Operator::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<2> scc_info_Operator =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), '
              '2, InitDefaultsOperator}, {\n'
              '      &protobuf_rules_2eproto::scc_info_Tensor.base,\n'
              '      &protobuf_rules_2eproto::scc_info_Parameter.base,}};\n'
              '\n'
              'static void InitDefaultsMapOutput() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_MapOutput_default_instance_;\n'
              '    new (ptr) ::GraphSubst::MapOutput();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::MapOutput::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<0> scc_info_MapOutput =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), '
              '0, InitDefaultsMapOutput}, {}};\n'
              '\n'
              'static void InitDefaultsRule() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = &::GraphSubst::_Rule_default_instance_;\n'
              '    new (ptr) ::GraphSubst::Rule();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::Rule::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<2> scc_info_Rule =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), '
              '2, InitDefaultsRule}, {\n'
              '      &protobuf_rules_2eproto::scc_info_Operator.base,\n'
              '      &protobuf_rules_2eproto::scc_info_MapOutput.base,}};\n'
              '\n'
              'static void InitDefaultsRuleCollection() {\n'
              '  GOOGLE_PROTOBUF_VERIFY_VERSION;\n'
              '\n'
              '  {\n'
              '    void* ptr = '
              '&::GraphSubst::_RuleCollection_default_instance_;\n'
              '    new (ptr) ::GraphSubst::RuleCollection();\n'
              '    '
              '::google::protobuf::internal::OnShutdownDestroyMessage(ptr);\n'
              '  }\n'
              '  ::GraphSubst::RuleCollection::InitAsDefaultInstance();\n'
              '}\n'
              '\n'
              '::google::protobuf::internal::SCCInfo<1> '
              'scc_info_RuleCollection =\n'
              '    '
              '{{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), '
              '1, InitDefaultsRuleCollection}, {\n'
              '      &protobuf_rules_2eproto::scc_info_Rule.base,}};\n'
              '\n'
              'void InitDefaults() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_Parameter.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_Tensor.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_Operator.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_MapOutput.base);\n'
              '  ::google::protobuf::internal::InitSCC(&scc_info_Rule.base);\n'
              '  '
              '::google::protobuf::internal::InitSCC(&scc_info_RuleCollection.base);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata file_level_metadata[6];\n'
              '\n'
              'const ::google::protobuf::uint32 TableStruct::offsets[] '
              'GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, '
              '_internal_metadata_),\n'
              '  ~0u,  // no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, '
              'key_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Parameter, '
              'value_),\n'
              '  0,\n'
              '  1,\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, '
              '_internal_metadata_),\n'
              '  ~0u,  // no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, '
              'opid_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Tensor, '
              'tsid_),\n'
              '  0,\n'
              '  1,\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, '
              '_internal_metadata_),\n'
              '  ~0u,  // no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, '
              'type_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, '
              'input_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Operator, '
              'para_),\n'
              '  0,\n'
              '  ~0u,\n'
              '  ~0u,\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              '_internal_metadata_),\n'
              '  ~0u,  // no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              'srcopid_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              'dstopid_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              'srctsid_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::MapOutput, '
              'dsttsid_),\n'
              '  0,\n'
              '  1,\n'
              '  2,\n'
              '  3,\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, '
              '_internal_metadata_),\n'
              '  ~0u,  // no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, '
              'srcop_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, '
              'dstop_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::Rule, '
              'mappedoutput_),\n'
              '  ~0u,\n'
              '  ~0u,\n'
              '  ~0u,\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::RuleCollection, '
              '_has_bits_),\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::RuleCollection, '
              '_internal_metadata_),\n'
              '  ~0u,  // no _extensions_\n'
              '  ~0u,  // no _oneof_case_\n'
              '  ~0u,  // no _weak_field_map_\n'
              '  '
              'GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GraphSubst::RuleCollection, '
              'rule_),\n'
              '  ~0u,\n'
              '};\n'
              'static const ::google::protobuf::internal::MigrationSchema '
              'schemas[] '
              'GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {\n'
              '  { 0, 7, sizeof(::GraphSubst::Parameter)},\n'
              '  { 9, 16, sizeof(::GraphSubst::Tensor)},\n'
              '  { 18, 26, sizeof(::GraphSubst::Operator)},\n'
              '  { 29, 38, sizeof(::GraphSubst::MapOutput)},\n'
              '  { 42, 50, sizeof(::GraphSubst::Rule)},\n'
              '  { 53, 59, sizeof(::GraphSubst::RuleCollection)},\n'
              '};\n'
              '\n'
              'static ::google::protobuf::Message const * const '
              'file_default_instances[] = {\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_Parameter_default_instance_),\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_Tensor_default_instance_),\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_Operator_default_instance_),\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_MapOutput_default_instance_),\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_Rule_default_instance_),\n'
              '  reinterpret_cast<const '
              '::google::protobuf::Message*>(&::GraphSubst::_RuleCollection_default_instance_),\n'
              '};\n'
              '\n'
              'void protobuf_AssignDescriptors() {\n'
              '  AddDescriptors();\n'
              '  AssignDescriptors(\n'
              '      "rules.proto", schemas, file_default_instances, '
              'TableStruct::offsets,\n'
              '      file_level_metadata, NULL, NULL);\n'
              '}\n'
              '\n'
              'void protobuf_AssignDescriptorsOnce() {\n'
              '  static ::google::protobuf::internal::once_flag once;\n'
              '  ::google::protobuf::internal::call_once(once, '
              'protobuf_AssignDescriptors);\n'
              '}\n'
              '\n'
              'void protobuf_RegisterTypes(const ::std::string&) '
              'GOOGLE_PROTOBUF_ATTRIBUTE_COLD;\n'
              'void protobuf_RegisterTypes(const ::std::string&) {\n'
              '  protobuf_AssignDescriptorsOnce();\n'
              '  '
              '::google::protobuf::internal::RegisterAllTypes(file_level_metadata, '
              '6);\n'
              '}\n'
              '\n'
              'void AddDescriptorsImpl() {\n'
              '  InitDefaults();\n'
              '  static const char descriptor[] '
              'GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {\n'
              '      '
              '"\\n\\013rules.proto\\022\\nGraphSubst\\"\\\'\\n\\tParameter\\022\\013"\n'
              '      "\\n\\003key\\030\\001 '
              '\\002(\\005\\022\\r\\n\\005value\\030\\002 '
              '\\002(\\005\\"$\\n\\006Tensor\\022\\014\\n\\004"\n'
              '      "opId\\030\\001 '
              '\\002(\\005\\022\\014\\n\\004tsId\\030\\002 '
              '\\002(\\005\\"`\\n\\010Operator\\022\\014\\n\\004"\n'
              '      "type\\030\\001 \\002(\\005\\022!\\n\\005input\\030\\002 '
              '\\003(\\0132\\022.GraphSubst.T"\n'
              '      "ensor\\022#\\n\\004para\\030\\003 '
              '\\003(\\0132\\025.GraphSubst.Paramet"\n'
              '      "er\\"O\\n\\tMapOutput\\022\\017\\n\\007srcOpId\\030\\001 '
              '\\002(\\005\\022\\017\\n\\007dstO"\n'
              '      "pId\\030\\002 '
              '\\002(\\005\\022\\017\\n\\007srcTsId\\030\\003 '
              '\\002(\\005\\022\\017\\n\\007dstTsId\\030\\004 "\n'
              '      "\\002(\\005\\"}\\n\\004Rule\\022#\\n\\005srcOp\\030\\001 '
              '\\003(\\0132\\024.GraphSubst."\n'
              '      "Operator\\022#\\n\\005dstOp\\030\\002 '
              '\\003(\\0132\\024.GraphSubst.Ope"\n'
              '      "rator\\022+\\n\\014mappedOutput\\030\\003 '
              '\\003(\\0132\\025.GraphSubst"\n'
              '      '
              '".MapOutput\\"0\\n\\016RuleCollection\\022\\036\\n\\004rule\\030\\001 '
              '\\003"\n'
              '      "(\\0132\\020.GraphSubst.Rule"\n'
              '  };\n'
              '  '
              '::google::protobuf::DescriptorPool::InternalAddGeneratedFile(\n'
              '      descriptor, 460);\n'
              '  '
              '::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(\n'
              '    "rules.proto", &protobuf_RegisterTypes);\n'
              '}\n'
              '\n'
              'void AddDescriptors() {\n'
              '  static ::google::protobuf::internal::once_flag once;\n'
              '  ::google::protobuf::internal::call_once(once, '
              'AddDescriptorsImpl);\n'
              '}\n'
              '// Force AddDescriptors() to be called at dynamic '
              'initialization time.\n'
              'struct StaticDescriptorInitializer {\n'
              '  StaticDescriptorInitializer() {\n'
              '    AddDescriptors();\n'
              '  }\n'
              '} static_descriptor_initializer;\n'
              '}  // namespace protobuf_rules_2eproto\n')

Fragment(uuid='NORMALIZED-003875',
         path='/src/generator/rules.pb.cc',
         lineno=293,
         depth=2,
         type='namespace',
         name='GraphSubst',
         text='namespace GraphSubst {\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void Parameter::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int Parameter::kKeyFieldNumber;\n'
              'const int Parameter::kValueFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'Parameter::Parameter()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Parameter.base);\n'
              '  SharedCtor();\n'
              '  // '
              '@@protoc_insertion_point(constructor:GraphSubst.Parameter)\n'
              '}\n'
              'Parameter::Parameter(const Parameter& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::memcpy(&key_, &from.key_,\n'
              '    static_cast<size_t>(reinterpret_cast<char*>(&value_) -\n'
              '    reinterpret_cast<char*>(&key_)) + sizeof(value_));\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Parameter)\n'
              '}\n'
              '\n'
              'void Parameter::SharedCtor() {\n'
              '  ::memset(&key_, 0, static_cast<size_t>(\n'
              '      reinterpret_cast<char*>(&value_) -\n'
              '      reinterpret_cast<char*>(&key_)) + sizeof(value_));\n'
              '}\n'
              '\n'
              'Parameter::~Parameter() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Parameter)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void Parameter::SharedDtor() {\n'
              '}\n'
              '\n'
              'void Parameter::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::google::protobuf::Descriptor* Parameter::descriptor() '
              '{\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const Parameter& Parameter::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Parameter.base);\n'
              '  return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void Parameter::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Parameter)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  if (cached_has_bits & 3u) {\n'
              '    ::memset(&key_, 0, static_cast<size_t>(\n'
              '        reinterpret_cast<char*>(&value_) -\n'
              '        reinterpret_cast<char*>(&key_)) + sizeof(value_));\n'
              '  }\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool Parameter::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // '
              '@@protoc_insertion_point(parse_start:GraphSubst.Parameter)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 key = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_key();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &key_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 value = 2;\n'
              '      case 2: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(16u /* 16 & '
              '0xFF */)) {\n'
              '          set_has_value();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &value_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.Parameter)\n'
              '  return true;\n'
              'failure:\n'
              '  // '
              '@@protoc_insertion_point(parse_failure:GraphSubst.Parameter)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void Parameter::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.Parameter)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 key = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->key(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 value = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, '
              'this->value(), output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.Parameter)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* '
              'Parameter::InternalSerializeWithCachedSizesToArray(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.Parameter)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 key = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, '
              'this->key(), target);\n'
              '  }\n'
              '\n'
              '  // required int32 value = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, '
              'this->value(), target);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.Parameter)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t Parameter::RequiredFieldsByteSizeFallback() const {\n'
              '// '
              '@@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Parameter)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (has_key()) {\n'
              '    // required int32 key = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->key());\n'
              '  }\n'
              '\n'
              '  if (has_value()) {\n'
              '    // required int32 value = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->value());\n'
              '  }\n'
              '\n'
              '  return total_size;\n'
              '}\n'
              'size_t Parameter::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Parameter)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // '
              'All required fields are present.\n'
              '    // required int32 key = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->key());\n'
              '\n'
              '    // required int32 value = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->value());\n'
              '\n'
              '  } else {\n'
              '    total_size += RequiredFieldsByteSizeFallback();\n'
              '  }\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}\n'
              '\n'
              'void Parameter::MergeFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Parameter)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Parameter* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Parameter>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Parameter)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Parameter)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Parameter::MergeFrom(const Parameter& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Parameter)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = from._has_bits_[0];\n'
              '  if (cached_has_bits & 3u) {\n'
              '    if (cached_has_bits & 0x00000001u) {\n'
              '      key_ = from.key_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000002u) {\n'
              '      value_ = from.value_;\n'
              '    }\n'
              '    _has_bits_[0] |= cached_has_bits;\n'
              '  }\n'
              '}\n'
              '\n'
              'void Parameter::CopyFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Parameter)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void Parameter::CopyFrom(const Parameter& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Parameter)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool Parameter::IsInitialized() const {\n'
              '  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return '
              'false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void Parameter::Swap(Parameter* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void Parameter::InternalSwap(Parameter* other) {\n'
              '  using std::swap;\n'
              '  swap(key_, other->key_);\n'
              '  swap(value_, other->value_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata Parameter::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void Tensor::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int Tensor::kOpIdFieldNumber;\n'
              'const int Tensor::kTsIdFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'Tensor::Tensor()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Tensor.base);\n'
              '  SharedCtor();\n'
              '  // @@protoc_insertion_point(constructor:GraphSubst.Tensor)\n'
              '}\n'
              'Tensor::Tensor(const Tensor& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::memcpy(&opid_, &from.opid_,\n'
              '    static_cast<size_t>(reinterpret_cast<char*>(&tsid_) -\n'
              '    reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Tensor)\n'
              '}\n'
              '\n'
              'void Tensor::SharedCtor() {\n'
              '  ::memset(&opid_, 0, static_cast<size_t>(\n'
              '      reinterpret_cast<char*>(&tsid_) -\n'
              '      reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));\n'
              '}\n'
              '\n'
              'Tensor::~Tensor() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Tensor)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void Tensor::SharedDtor() {\n'
              '}\n'
              '\n'
              'void Tensor::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::google::protobuf::Descriptor* Tensor::descriptor() {\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const Tensor& Tensor::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Tensor.base);\n'
              '  return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void Tensor::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Tensor)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  if (cached_has_bits & 3u) {\n'
              '    ::memset(&opid_, 0, static_cast<size_t>(\n'
              '        reinterpret_cast<char*>(&tsid_) -\n'
              '        reinterpret_cast<char*>(&opid_)) + sizeof(tsid_));\n'
              '  }\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool Tensor::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // @@protoc_insertion_point(parse_start:GraphSubst.Tensor)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 opId = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_opid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &opid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 tsId = 2;\n'
              '      case 2: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(16u /* 16 & '
              '0xFF */)) {\n'
              '          set_has_tsid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &tsid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // @@protoc_insertion_point(parse_success:GraphSubst.Tensor)\n'
              '  return true;\n'
              'failure:\n'
              '  // @@protoc_insertion_point(parse_failure:GraphSubst.Tensor)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void Tensor::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.Tensor)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 opId = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->opid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 tsId = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, '
              'this->tsid(), output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // @@protoc_insertion_point(serialize_end:GraphSubst.Tensor)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* '
              'Tensor::InternalSerializeWithCachedSizesToArray(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.Tensor)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 opId = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, '
              'this->opid(), target);\n'
              '  }\n'
              '\n'
              '  // required int32 tsId = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, '
              'this->tsid(), target);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.Tensor)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t Tensor::RequiredFieldsByteSizeFallback() const {\n'
              '// '
              '@@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.Tensor)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (has_opid()) {\n'
              '    // required int32 opId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->opid());\n'
              '  }\n'
              '\n'
              '  if (has_tsid()) {\n'
              '    // required int32 tsId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->tsid());\n'
              '  }\n'
              '\n'
              '  return total_size;\n'
              '}\n'
              'size_t Tensor::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Tensor)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // '
              'All required fields are present.\n'
              '    // required int32 opId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->opid());\n'
              '\n'
              '    // required int32 tsId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->tsid());\n'
              '\n'
              '  } else {\n'
              '    total_size += RequiredFieldsByteSizeFallback();\n'
              '  }\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}\n'
              '\n'
              'void Tensor::MergeFrom(const ::google::protobuf::Message& from) '
              '{\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Tensor)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Tensor* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Tensor>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Tensor)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Tensor)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Tensor::MergeFrom(const Tensor& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Tensor)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = from._has_bits_[0];\n'
              '  if (cached_has_bits & 3u) {\n'
              '    if (cached_has_bits & 0x00000001u) {\n'
              '      opid_ = from.opid_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000002u) {\n'
              '      tsid_ = from.tsid_;\n'
              '    }\n'
              '    _has_bits_[0] |= cached_has_bits;\n'
              '  }\n'
              '}\n'
              '\n'
              'void Tensor::CopyFrom(const ::google::protobuf::Message& from) '
              '{\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Tensor)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void Tensor::CopyFrom(const Tensor& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Tensor)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool Tensor::IsInitialized() const {\n'
              '  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return '
              'false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void Tensor::Swap(Tensor* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void Tensor::InternalSwap(Tensor* other) {\n'
              '  using std::swap;\n'
              '  swap(opid_, other->opid_);\n'
              '  swap(tsid_, other->tsid_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata Tensor::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void Operator::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int Operator::kTypeFieldNumber;\n'
              'const int Operator::kInputFieldNumber;\n'
              'const int Operator::kParaFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'Operator::Operator()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Operator.base);\n'
              '  SharedCtor();\n'
              '  // @@protoc_insertion_point(constructor:GraphSubst.Operator)\n'
              '}\n'
              'Operator::Operator(const Operator& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_),\n'
              '      input_(from.input_),\n'
              '      para_(from.para_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  type_ = from.type_;\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Operator)\n'
              '}\n'
              '\n'
              'void Operator::SharedCtor() {\n'
              '  type_ = 0;\n'
              '}\n'
              '\n'
              'Operator::~Operator() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Operator)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void Operator::SharedDtor() {\n'
              '}\n'
              '\n'
              'void Operator::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::google::protobuf::Descriptor* Operator::descriptor() {\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const Operator& Operator::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Operator.base);\n'
              '  return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void Operator::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Operator)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  input_.Clear();\n'
              '  para_.Clear();\n'
              '  type_ = 0;\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool Operator::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // @@protoc_insertion_point(parse_start:GraphSubst.Operator)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 type = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_type();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &type_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.Tensor input = 2;\n'
              '      case 2: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(18u /* 18 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_input()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.Parameter para = 3;\n'
              '      case 3: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(26u /* 26 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_para()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.Operator)\n'
              '  return true;\n'
              'failure:\n'
              '  // '
              '@@protoc_insertion_point(parse_failure:GraphSubst.Operator)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void Operator::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.Operator)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 type = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->type(), output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Tensor input = 2;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->input_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      2,\n'
              '      this->input(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Parameter para = 3;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->para_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      3,\n'
              '      this->para(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.Operator)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* '
              'Operator::InternalSerializeWithCachedSizesToArray(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.Operator)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 type = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, '
              'this->type(), target);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Tensor input = 2;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->input_size()); i < n; '
              'i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        2, this->input(static_cast<int>(i)), deterministic, '
              'target);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Parameter para = 3;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->para_size()); i < n; '
              'i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        3, this->para(static_cast<int>(i)), deterministic, '
              'target);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.Operator)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t Operator::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Operator)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  // required int32 type = 1;\n'
              '  if (has_type()) {\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->type());\n'
              '  }\n'
              '  // repeated .GraphSubst.Tensor input = 2;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->input_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->input(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Parameter para = 3;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->para_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->para(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}\n'
              '\n'
              'void Operator::MergeFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Operator)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Operator* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Operator>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Operator)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Operator)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Operator::MergeFrom(const Operator& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Operator)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  input_.MergeFrom(from.input_);\n'
              '  para_.MergeFrom(from.para_);\n'
              '  if (from.has_type()) {\n'
              '    set_type(from.type());\n'
              '  }\n'
              '}\n'
              '\n'
              'void Operator::CopyFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Operator)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void Operator::CopyFrom(const Operator& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Operator)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool Operator::IsInitialized() const {\n'
              '  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return '
              'false;\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->input())) '
              'return false;\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->para())) '
              'return false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void Operator::Swap(Operator* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void Operator::InternalSwap(Operator* other) {\n'
              '  using std::swap;\n'
              '  '
              'CastToBase(&input_)->InternalSwap(CastToBase(&other->input_));\n'
              '  CastToBase(&para_)->InternalSwap(CastToBase(&other->para_));\n'
              '  swap(type_, other->type_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata Operator::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void MapOutput::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int MapOutput::kSrcOpIdFieldNumber;\n'
              'const int MapOutput::kDstOpIdFieldNumber;\n'
              'const int MapOutput::kSrcTsIdFieldNumber;\n'
              'const int MapOutput::kDstTsIdFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'MapOutput::MapOutput()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_MapOutput.base);\n'
              '  SharedCtor();\n'
              '  // '
              '@@protoc_insertion_point(constructor:GraphSubst.MapOutput)\n'
              '}\n'
              'MapOutput::MapOutput(const MapOutput& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::memcpy(&srcopid_, &from.srcopid_,\n'
              '    static_cast<size_t>(reinterpret_cast<char*>(&dsttsid_) -\n'
              '    reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.MapOutput)\n'
              '}\n'
              '\n'
              'void MapOutput::SharedCtor() {\n'
              '  ::memset(&srcopid_, 0, static_cast<size_t>(\n'
              '      reinterpret_cast<char*>(&dsttsid_) -\n'
              '      reinterpret_cast<char*>(&srcopid_)) + sizeof(dsttsid_));\n'
              '}\n'
              '\n'
              'MapOutput::~MapOutput() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.MapOutput)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void MapOutput::SharedDtor() {\n'
              '}\n'
              '\n'
              'void MapOutput::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::google::protobuf::Descriptor* MapOutput::descriptor() '
              '{\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const MapOutput& MapOutput::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_MapOutput.base);\n'
              '  return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void MapOutput::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.MapOutput)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  if (cached_has_bits & 15u) {\n'
              '    ::memset(&srcopid_, 0, static_cast<size_t>(\n'
              '        reinterpret_cast<char*>(&dsttsid_) -\n'
              '        reinterpret_cast<char*>(&srcopid_)) + '
              'sizeof(dsttsid_));\n'
              '  }\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool MapOutput::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // '
              '@@protoc_insertion_point(parse_start:GraphSubst.MapOutput)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // required int32 srcOpId = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(8u /* 8 & '
              '0xFF */)) {\n'
              '          set_has_srcopid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &srcopid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 dstOpId = 2;\n'
              '      case 2: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(16u /* 16 & '
              '0xFF */)) {\n'
              '          set_has_dstopid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &dstopid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 srcTsId = 3;\n'
              '      case 3: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(24u /* 24 & '
              '0xFF */)) {\n'
              '          set_has_srctsid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &srctsid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // required int32 dstTsId = 4;\n'
              '      case 4: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(32u /* 32 & '
              '0xFF */)) {\n'
              '          set_has_dsttsid();\n'
              '          '
              'DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<\n'
              '                   ::google::protobuf::int32, '
              '::google::protobuf::internal::WireFormatLite::TYPE_INT32>(\n'
              '                 input, &dsttsid_)));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.MapOutput)\n'
              '  return true;\n'
              'failure:\n'
              '  // '
              '@@protoc_insertion_point(parse_failure:GraphSubst.MapOutput)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void MapOutput::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.MapOutput)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 srcOpId = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, '
              'this->srcopid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 dstOpId = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, '
              'this->dstopid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 srcTsId = 3;\n'
              '  if (cached_has_bits & 0x00000004u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, '
              'this->srctsid(), output);\n'
              '  }\n'
              '\n'
              '  // required int32 dstTsId = 4;\n'
              '  if (cached_has_bits & 0x00000008u) {\n'
              '    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, '
              'this->dsttsid(), output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.MapOutput)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* '
              'MapOutput::InternalSerializeWithCachedSizesToArray(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.MapOutput)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = _has_bits_[0];\n'
              '  // required int32 srcOpId = 1;\n'
              '  if (cached_has_bits & 0x00000001u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, '
              'this->srcopid(), target);\n'
              '  }\n'
              '\n'
              '  // required int32 dstOpId = 2;\n'
              '  if (cached_has_bits & 0x00000002u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, '
              'this->dstopid(), target);\n'
              '  }\n'
              '\n'
              '  // required int32 srcTsId = 3;\n'
              '  if (cached_has_bits & 0x00000004u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, '
              'this->srctsid(), target);\n'
              '  }\n'
              '\n'
              '  // required int32 dstTsId = 4;\n'
              '  if (cached_has_bits & 0x00000008u) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, '
              'this->dsttsid(), target);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.MapOutput)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t MapOutput::RequiredFieldsByteSizeFallback() const {\n'
              '// '
              '@@protoc_insertion_point(required_fields_byte_size_fallback_start:GraphSubst.MapOutput)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (has_srcopid()) {\n'
              '    // required int32 srcOpId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srcopid());\n'
              '  }\n'
              '\n'
              '  if (has_dstopid()) {\n'
              '    // required int32 dstOpId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dstopid());\n'
              '  }\n'
              '\n'
              '  if (has_srctsid()) {\n'
              '    // required int32 srcTsId = 3;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srctsid());\n'
              '  }\n'
              '\n'
              '  if (has_dsttsid()) {\n'
              '    // required int32 dstTsId = 4;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dsttsid());\n'
              '  }\n'
              '\n'
              '  return total_size;\n'
              '}\n'
              'size_t MapOutput::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.MapOutput)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // '
              'All required fields are present.\n'
              '    // required int32 srcOpId = 1;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srcopid());\n'
              '\n'
              '    // required int32 dstOpId = 2;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dstopid());\n'
              '\n'
              '    // required int32 srcTsId = 3;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->srctsid());\n'
              '\n'
              '    // required int32 dstTsId = 4;\n'
              '    total_size += 1 +\n'
              '      ::google::protobuf::internal::WireFormatLite::Int32Size(\n'
              '        this->dsttsid());\n'
              '\n'
              '  } else {\n'
              '    total_size += RequiredFieldsByteSizeFallback();\n'
              '  }\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}\n'
              '\n'
              'void MapOutput::MergeFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.MapOutput)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const MapOutput* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'MapOutput>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.MapOutput)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.MapOutput)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void MapOutput::MergeFrom(const MapOutput& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.MapOutput)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  cached_has_bits = from._has_bits_[0];\n'
              '  if (cached_has_bits & 15u) {\n'
              '    if (cached_has_bits & 0x00000001u) {\n'
              '      srcopid_ = from.srcopid_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000002u) {\n'
              '      dstopid_ = from.dstopid_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000004u) {\n'
              '      srctsid_ = from.srctsid_;\n'
              '    }\n'
              '    if (cached_has_bits & 0x00000008u) {\n'
              '      dsttsid_ = from.dsttsid_;\n'
              '    }\n'
              '    _has_bits_[0] |= cached_has_bits;\n'
              '  }\n'
              '}\n'
              '\n'
              'void MapOutput::CopyFrom(const ::google::protobuf::Message& '
              'from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.MapOutput)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void MapOutput::CopyFrom(const MapOutput& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.MapOutput)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool MapOutput::IsInitialized() const {\n'
              '  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return '
              'false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void MapOutput::Swap(MapOutput* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void MapOutput::InternalSwap(MapOutput* other) {\n'
              '  using std::swap;\n'
              '  swap(srcopid_, other->srcopid_);\n'
              '  swap(dstopid_, other->dstopid_);\n'
              '  swap(srctsid_, other->srctsid_);\n'
              '  swap(dsttsid_, other->dsttsid_);\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata MapOutput::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void Rule::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int Rule::kSrcOpFieldNumber;\n'
              'const int Rule::kDstOpFieldNumber;\n'
              'const int Rule::kMappedOutputFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'Rule::Rule()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_Rule.base);\n'
              '  SharedCtor();\n'
              '  // @@protoc_insertion_point(constructor:GraphSubst.Rule)\n'
              '}\n'
              'Rule::Rule(const Rule& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_),\n'
              '      srcop_(from.srcop_),\n'
              '      dstop_(from.dstop_),\n'
              '      mappedoutput_(from.mappedoutput_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.Rule)\n'
              '}\n'
              '\n'
              'void Rule::SharedCtor() {\n'
              '}\n'
              '\n'
              'Rule::~Rule() {\n'
              '  // @@protoc_insertion_point(destructor:GraphSubst.Rule)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void Rule::SharedDtor() {\n'
              '}\n'
              '\n'
              'void Rule::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::google::protobuf::Descriptor* Rule::descriptor() {\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const Rule& Rule::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_Rule.base);\n'
              '  return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void Rule::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.Rule)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  srcop_.Clear();\n'
              '  dstop_.Clear();\n'
              '  mappedoutput_.Clear();\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool Rule::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // @@protoc_insertion_point(parse_start:GraphSubst.Rule)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // repeated .GraphSubst.Operator srcOp = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(10u /* 10 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_srcop()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.Operator dstOp = 2;\n'
              '      case 2: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(18u /* 18 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_dstop()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '      case 3: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(26u /* 26 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_mappedoutput()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // @@protoc_insertion_point(parse_success:GraphSubst.Rule)\n'
              '  return true;\n'
              'failure:\n'
              '  // @@protoc_insertion_point(parse_failure:GraphSubst.Rule)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void Rule::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // @@protoc_insertion_point(serialize_start:GraphSubst.Rule)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  // repeated .GraphSubst.Operator srcOp = 1;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->srcop_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      1,\n'
              '      this->srcop(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Operator dstOp = 2;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->dstop_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      2,\n'
              '      this->dstop(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->mappedoutput_size()); '
              'i < n; i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      3,\n'
              '      this->mappedoutput(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // @@protoc_insertion_point(serialize_end:GraphSubst.Rule)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* '
              'Rule::InternalSerializeWithCachedSizesToArray(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.Rule)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  // repeated .GraphSubst.Operator srcOp = 1;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->srcop_size()); i < n; '
              'i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        1, this->srcop(static_cast<int>(i)), deterministic, '
              'target);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Operator dstOp = 2;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->dstop_size()); i < n; '
              'i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        2, this->dstop(static_cast<int>(i)), deterministic, '
              'target);\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->mappedoutput_size()); '
              'i < n; i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        3, this->mappedoutput(static_cast<int>(i)), '
              'deterministic, target);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.Rule)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t Rule::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.Rule)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  // repeated .GraphSubst.Operator srcOp = 1;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->srcop_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->srcop(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.Operator dstOp = 2;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->dstop_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->dstop(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  // repeated .GraphSubst.MapOutput mappedOutput = 3;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->mappedoutput_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->mappedoutput(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}\n'
              '\n'
              'void Rule::MergeFrom(const ::google::protobuf::Message& from) '
              '{\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.Rule)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const Rule* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'Rule>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.Rule)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.Rule)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void Rule::MergeFrom(const Rule& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.Rule)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  srcop_.MergeFrom(from.srcop_);\n'
              '  dstop_.MergeFrom(from.dstop_);\n'
              '  mappedoutput_.MergeFrom(from.mappedoutput_);\n'
              '}\n'
              '\n'
              'void Rule::CopyFrom(const ::google::protobuf::Message& from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.Rule)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void Rule::CopyFrom(const Rule& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.Rule)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool Rule::IsInitialized() const {\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->srcop())) '
              'return false;\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->dstop())) '
              'return false;\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->mappedoutput())) '
              'return false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void Rule::Swap(Rule* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void Rule::InternalSwap(Rule* other) {\n'
              '  using std::swap;\n'
              '  '
              'CastToBase(&srcop_)->InternalSwap(CastToBase(&other->srcop_));\n'
              '  '
              'CastToBase(&dstop_)->InternalSwap(CastToBase(&other->dstop_));\n'
              '  '
              'CastToBase(&mappedoutput_)->InternalSwap(CastToBase(&other->mappedoutput_));\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata Rule::GetMetadata() const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// '
              '===================================================================\n'
              '\n'
              'void RuleCollection::InitAsDefaultInstance() {\n'
              '}\n'
              '#if !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              'const int RuleCollection::kRuleFieldNumber;\n'
              '#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900\n'
              '\n'
              'RuleCollection::RuleCollection()\n'
              '  : ::google::protobuf::Message(), _internal_metadata_(NULL) {\n'
              '  ::google::protobuf::internal::InitSCC(\n'
              '      &protobuf_rules_2eproto::scc_info_RuleCollection.base);\n'
              '  SharedCtor();\n'
              '  // '
              '@@protoc_insertion_point(constructor:GraphSubst.RuleCollection)\n'
              '}\n'
              'RuleCollection::RuleCollection(const RuleCollection& from)\n'
              '  : ::google::protobuf::Message(),\n'
              '      _internal_metadata_(NULL),\n'
              '      _has_bits_(from._has_bits_),\n'
              '      rule_(from.rule_) {\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  // '
              '@@protoc_insertion_point(copy_constructor:GraphSubst.RuleCollection)\n'
              '}\n'
              '\n'
              'void RuleCollection::SharedCtor() {\n'
              '}\n'
              '\n'
              'RuleCollection::~RuleCollection() {\n'
              '  // '
              '@@protoc_insertion_point(destructor:GraphSubst.RuleCollection)\n'
              '  SharedDtor();\n'
              '}\n'
              '\n'
              'void RuleCollection::SharedDtor() {\n'
              '}\n'
              '\n'
              'void RuleCollection::SetCachedSize(int size) const {\n'
              '  _cached_size_.Set(size);\n'
              '}\n'
              'const ::google::protobuf::Descriptor* '
              'RuleCollection::descriptor() {\n'
              '  ::protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;\n'
              '}\n'
              '\n'
              'const RuleCollection& RuleCollection::default_instance() {\n'
              '  '
              '::google::protobuf::internal::InitSCC(&protobuf_rules_2eproto::scc_info_RuleCollection.base);\n'
              '  return *internal_default_instance();\n'
              '}\n'
              '\n'
              '\n'
              'void RuleCollection::Clear() {\n'
              '// '
              '@@protoc_insertion_point(message_clear_start:GraphSubst.RuleCollection)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  // Prevent compiler warnings about cached_has_bits being '
              'unused\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  rule_.Clear();\n'
              '  _has_bits_.Clear();\n'
              '  _internal_metadata_.Clear();\n'
              '}\n'
              '\n'
              'bool RuleCollection::MergePartialFromCodedStream(\n'
              '    ::google::protobuf::io::CodedInputStream* input) {\n'
              '#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) '
              'goto failure\n'
              '  ::google::protobuf::uint32 tag;\n'
              '  // '
              '@@protoc_insertion_point(parse_start:GraphSubst.RuleCollection)\n'
              '  for (;;) {\n'
              '    ::std::pair<::google::protobuf::uint32, bool> p = '
              'input->ReadTagWithCutoffNoLastTag(127u);\n'
              '    tag = p.first;\n'
              '    if (!p.second) goto handle_unusual;\n'
              '    switch '
              '(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) '
              '{\n'
              '      // repeated .GraphSubst.Rule rule = 1;\n'
              '      case 1: {\n'
              '        if (static_cast< ::google::protobuf::uint8>(tag) ==\n'
              '            static_cast< ::google::protobuf::uint8>(10u /* 10 & '
              '0xFF */)) {\n'
              '          '
              'DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(\n'
              '                input, add_rule()));\n'
              '        } else {\n'
              '          goto handle_unusual;\n'
              '        }\n'
              '        break;\n'
              '      }\n'
              '\n'
              '      default: {\n'
              '      handle_unusual:\n'
              '        if (tag == 0) {\n'
              '          goto success;\n'
              '        }\n'
              '        '
              'DO_(::google::protobuf::internal::WireFormat::SkipField(\n'
              '              input, tag, '
              '_internal_metadata_.mutable_unknown_fields()));\n'
              '        break;\n'
              '      }\n'
              '    }\n'
              '  }\n'
              'success:\n'
              '  // '
              '@@protoc_insertion_point(parse_success:GraphSubst.RuleCollection)\n'
              '  return true;\n'
              'failure:\n'
              '  // '
              '@@protoc_insertion_point(parse_failure:GraphSubst.RuleCollection)\n'
              '  return false;\n'
              '#undef DO_\n'
              '}\n'
              '\n'
              'void RuleCollection::SerializeWithCachedSizes(\n'
              '    ::google::protobuf::io::CodedOutputStream* output) const {\n'
              '  // '
              '@@protoc_insertion_point(serialize_start:GraphSubst.RuleCollection)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  // repeated .GraphSubst.Rule rule = 1;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->rule_size()); i < n; '
              'i++) {\n'
              '    '
              '::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(\n'
              '      1,\n'
              '      this->rule(static_cast<int>(i)),\n'
              '      output);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFields(\n'
              '        _internal_metadata_.unknown_fields(), output);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_end:GraphSubst.RuleCollection)\n'
              '}\n'
              '\n'
              '::google::protobuf::uint8* '
              'RuleCollection::InternalSerializeWithCachedSizesToArray(\n'
              '    bool deterministic, ::google::protobuf::uint8* target) '
              'const {\n'
              '  (void)deterministic; // Unused\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_start:GraphSubst.RuleCollection)\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  // repeated .GraphSubst.Rule rule = 1;\n'
              '  for (unsigned int i = 0,\n'
              '      n = static_cast<unsigned int>(this->rule_size()); i < n; '
              'i++) {\n'
              '    target = ::google::protobuf::internal::WireFormatLite::\n'
              '      InternalWriteMessageToArray(\n'
              '        1, this->rule(static_cast<int>(i)), deterministic, '
              'target);\n'
              '  }\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    target = '
              '::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(\n'
              '        _internal_metadata_.unknown_fields(), target);\n'
              '  }\n'
              '  // '
              '@@protoc_insertion_point(serialize_to_array_end:GraphSubst.RuleCollection)\n'
              '  return target;\n'
              '}\n'
              '\n'
              'size_t RuleCollection::ByteSizeLong() const {\n'
              '// '
              '@@protoc_insertion_point(message_byte_size_start:GraphSubst.RuleCollection)\n'
              '  size_t total_size = 0;\n'
              '\n'
              '  if (_internal_metadata_.have_unknown_fields()) {\n'
              '    total_size +=\n'
              '      '
              '::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(\n'
              '        _internal_metadata_.unknown_fields());\n'
              '  }\n'
              '  // repeated .GraphSubst.Rule rule = 1;\n'
              '  {\n'
              '    unsigned int count = static_cast<unsigned '
              'int>(this->rule_size());\n'
              '    total_size += 1UL * count;\n'
              '    for (unsigned int i = 0; i < count; i++) {\n'
              '      total_size +=\n'
              '        '
              '::google::protobuf::internal::WireFormatLite::MessageSize(\n'
              '          this->rule(static_cast<int>(i)));\n'
              '    }\n'
              '  }\n'
              '\n'
              '  int cached_size = '
              '::google::protobuf::internal::ToCachedSize(total_size);\n'
              '  SetCachedSize(cached_size);\n'
              '  return total_size;\n'
              '}\n'
              '\n'
              'void RuleCollection::MergeFrom(const '
              '::google::protobuf::Message& from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_merge_from_start:GraphSubst.RuleCollection)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  const RuleCollection* source =\n'
              '      '
              '::google::protobuf::internal::DynamicCastToGenerated<const '
              'RuleCollection>(\n'
              '          &from);\n'
              '  if (source == NULL) {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_fail:GraphSubst.RuleCollection)\n'
              '    ::google::protobuf::internal::ReflectionOps::Merge(from, '
              'this);\n'
              '  } else {\n'
              '  // '
              '@@protoc_insertion_point(generalized_merge_from_cast_success:GraphSubst.RuleCollection)\n'
              '    MergeFrom(*source);\n'
              '  }\n'
              '}\n'
              '\n'
              'void RuleCollection::MergeFrom(const RuleCollection& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_merge_from_start:GraphSubst.RuleCollection)\n'
              '  GOOGLE_DCHECK_NE(&from, this);\n'
              '  _internal_metadata_.MergeFrom(from._internal_metadata_);\n'
              '  ::google::protobuf::uint32 cached_has_bits = 0;\n'
              '  (void) cached_has_bits;\n'
              '\n'
              '  rule_.MergeFrom(from.rule_);\n'
              '}\n'
              '\n'
              'void RuleCollection::CopyFrom(const '
              '::google::protobuf::Message& from) {\n'
              '// '
              '@@protoc_insertion_point(generalized_copy_from_start:GraphSubst.RuleCollection)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'void RuleCollection::CopyFrom(const RuleCollection& from) {\n'
              '// '
              '@@protoc_insertion_point(class_specific_copy_from_start:GraphSubst.RuleCollection)\n'
              '  if (&from == this) return;\n'
              '  Clear();\n'
              '  MergeFrom(from);\n'
              '}\n'
              '\n'
              'bool RuleCollection::IsInitialized() const {\n'
              '  if '
              '(!::google::protobuf::internal::AllAreInitialized(this->rule())) '
              'return false;\n'
              '  return true;\n'
              '}\n'
              '\n'
              'void RuleCollection::Swap(RuleCollection* other) {\n'
              '  if (other == this) return;\n'
              '  InternalSwap(other);\n'
              '}\n'
              'void RuleCollection::InternalSwap(RuleCollection* other) {\n'
              '  using std::swap;\n'
              '  CastToBase(&rule_)->InternalSwap(CastToBase(&other->rule_));\n'
              '  swap(_has_bits_[0], other->_has_bits_[0]);\n'
              '  _internal_metadata_.Swap(&other->_internal_metadata_);\n'
              '}\n'
              '\n'
              '::google::protobuf::Metadata RuleCollection::GetMetadata() '
              'const {\n'
              '  protobuf_rules_2eproto::protobuf_AssignDescriptorsOnce();\n'
              '  return '
              '::protobuf_rules_2eproto::file_level_metadata[kIndexInFileMessages];\n'
              '}\n'
              '\n'
              '\n'
              '// @@protoc_insertion_point(namespace_scope)\n'
              '}  // namespace GraphSubst\n')

Fragment(uuid='NORMALIZED-003876',
         path='/src/generator/rules.pb.cc',
         lineno=2151,
         depth=2,
         type='namespace',
         name='google',
         text='namespace google {\n'
              'namespace protobuf {\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::Parameter* Arena::CreateMaybeMessage< '
              '::GraphSubst::Parameter >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::Parameter '
              '>(arena);\n'
              '}\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::Tensor* Arena::CreateMaybeMessage< '
              '::GraphSubst::Tensor >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::Tensor >(arena);\n'
              '}\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::Operator* Arena::CreateMaybeMessage< '
              '::GraphSubst::Operator >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::Operator '
              '>(arena);\n'
              '}\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::MapOutput* Arena::CreateMaybeMessage< '
              '::GraphSubst::MapOutput >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::MapOutput '
              '>(arena);\n'
              '}\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::Rule* Arena::CreateMaybeMessage< '
              '::GraphSubst::Rule >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::Rule >(arena);\n'
              '}\n'
              'template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE '
              '::GraphSubst::RuleCollection* Arena::CreateMaybeMessage< '
              '::GraphSubst::RuleCollection >(Arena* arena) {\n'
              '  return Arena::CreateInternal< ::GraphSubst::RuleCollection '
              '>(arena);\n'
              '}\n'
              '}  // namespace protobuf\n'
              '}  // namespace google\n')

Fragment(uuid='NORMALIZED-003877',
         path='/src/generator/rules.pb.h',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='C: /src/generator/rules.pb.h\n')

Fragment(uuid='NORMALIZED-003878',
         path='/tensorflow_py/bert.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import argparse\n'
              'import tensorflow as tf\n'
              'import numpy as np\n'
              'import time\n'
              'from shared_functions import make_matmul\n')

Fragment(uuid='NORMALIZED-003879',
         path='/tensorflow_py/bert.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003880',
         path='/tensorflow_py/bert.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tensorflow_py/bert.py\n'
              '  Functions: attention\n'
              '  Variables and usages: ArgumentParser ConfigProto FileWriter '
              'ON_1 OptimizerOptions Session action add_argument append '
              'argparse args config d_model default discard_iter float32 '
              'global_jit_level graph graph_options heads help input '
              'input_dictionary iterations logits make_matmul matmul numpy '
              'optimizer_options output output_nodes parse_args parser perm '
              'placeholder print print_tensorboard random random_sample range '
              'relu reshape sess shape shared_functions summary tensorflow '
              'time times total transpose type value writer\n')

Fragment(uuid='NORMALIZED-003881',
         path='/tensorflow_py/bert.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003882',
         path='/tensorflow_py/bert.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003883',
         path='/tensorflow_py/bert.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003884',
         path='/tensorflow_py/bert.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-003885',
         path='/tensorflow_py/bert.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003886',
         path='/tensorflow_py/bert.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def attention(input, heads):\n'
              '    d_model = input.shape[1].value\n'
              '    q = make_matmul(input, d_model)\n'
              '    k = make_matmul(input, d_model)\n'
              '    v = make_matmul(input, d_model)\n'
              '    # reshape query, key, value\n'
              '    q = tf.reshape(q, shap')

Fragment(uuid='NORMALIZED-003887',
         path='/tensorflow_py/bert.py',
         lineno=7,
         depth=1,
         type='function',
         name='attention',
         text='def attention(input, heads):\n'
              '    d_model = input.shape[1].value\n'
              '    q = make_matmul(input, d_model)\n'
              '    k = make_matmul(input, d_model)\n'
              '    v = make_matmul(input, d_model)\n'
              '    # reshape query, key, value\n'
              '    q = tf.reshape(q, shape=(64,16,64))\n'
              '    k = tf.reshape(k, shape=(64,16,64))\n'
              '    v = tf.reshape(v, shape=(64,16,64))\n'
              '    # transpose q, k, v for batched matmul\n'
              '    q = tf.transpose(q, perm=(')

Fragment(uuid='NORMALIZED-003888',
         path='/tensorflow_py/bert.py',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='# reshape query, key, value')

Fragment(uuid='NORMALIZED-003889',
         path='/tensorflow_py/bert.py',
         lineno=13,
         depth=0,
         type='module',
         name='',
         text='e=(64,16,64))\n'
              '    k = tf.reshape(k, shape=(64,16,64))\n'
              '    v = tf.reshape(v, shape=(64,16,64))\n'
              '    # transpose q, k, v for batched matmul\n'
              '    q = tf.transpose(q, perm=(1,0,2))\n'
              '    k = tf.transpose(k, perm=(1,0,2))\n'
              '    v = tf.transpos')

Fragment(uuid='NORMALIZED-003890',
         path='/tensorflow_py/bert.py',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='# transpose q, k, v for batched matmul')

Fragment(uuid='NORMALIZED-003891',
         path='/tensorflow_py/bert.py',
         lineno=17,
         depth=1,
         type='function',
         name='attention',
         text='1,0,2))\n'
              '    k = tf.transpose(k, perm=(1,0,2))\n'
              '    v = tf.transpose(v, perm=(1,0,2))\n'
              '    logits = tf.matmul(q, k)\n'
              '    output = tf.matmul(logits, v)\n'
              '    # transpose the output back\n'
              '    output = tf.transpose(output, perm=(1,0,2))\n'
              '    output = tf.reshape(output, shape=(64, 1024))\n'
              '    # a final linear layer\n'
              '    output = make_matmul(tf.nn.relu(make_matmul(input, '
              '4*d_model)), d_model)\n'
              '    return output')

Fragment(uuid='NORMALIZED-003892',
         path='/tensorflow_py/bert.py',
         lineno=19,
         depth=0,
         type='module',
         name='',
         text='e(v, perm=(1,0,2))\n'
              '    logits = tf.matmul(q, k)\n'
              '    output = tf.matmul(logits, v)\n'
              '    # transpose the output back\n'
              '    output = tf.transpose(output, perm=(1,0,2))\n'
              '    output = tf.reshape(output, shape=(64, 1024))\n'
              '    # a final linear layer\n'
              '    output = make_matmul(tf.nn.relu(make_matmul(input, '
              '4*d_model)), d_model)\n'
              '    return output\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("--xla", help="Whether to run with '
              'TensorFlowXLA optimizations", action="')

Fragment(uuid='NORMALIZED-003893',
         path='/tensorflow_py/bert.py',
         lineno=22,
         depth=2,
         type='documentation',
         name='',
         text='# transpose the output back')

Fragment(uuid='NORMALIZED-003894',
         path='/tensorflow_py/bert.py',
         lineno=25,
         depth=2,
         type='documentation',
         name='',
         text='# a final linear layer')

Fragment(uuid='NORMALIZED-003895',
         path='/tensorflow_py/bert.py',
         lineno=30,
         depth=0,
         type='module',
         name='',
         text='store_true")\n'
              'parser.add_argument("--print_tensorboard", help="Name of folder '
              'to output the tensorboard information")\n'
              'parser.add_argument("--iterations", help="How many iterations '
              'to average for timing (default 5000)", type=int, default=1000)\n'
              'parser.add_argument("--discard_iter", help="How many iterations '
              'to not time during warm up (default 1000)", type=int, '
              'default=1000)\n'
              'args = parser.parse_args()\n'
              '\n'
              'input = tf.placeholder(tf.float32, shape=(64,1024))\n'
              'input_dic')

Fragment(uuid='NORMALIZED-003896',
         path='/tensorflow_py/bert.py',
         lineno=30,
         depth=5,
         type='documentation',
         name='',
         text='Whether to run with TensorFlowXLA optimizations')

Fragment(uuid='NORMALIZED-003897',
         path='/tensorflow_py/bert.py',
         lineno=31,
         depth=5,
         type='documentation',
         name='',
         text='Name of folder to output the tensorboard information')

Fragment(uuid='NORMALIZED-003898',
         path='/tensorflow_py/bert.py',
         lineno=32,
         depth=5,
         type='documentation',
         name='',
         text='How many iterations to average for timing (default 5000)')

Fragment(uuid='NORMALIZED-003899',
         path='/tensorflow_py/bert.py',
         lineno=33,
         depth=5,
         type='documentation',
         name='',
         text='How many iterations to not time during warm up (default 1000)')

Fragment(uuid='NORMALIZED-003900',
         path='/tensorflow_py/bert.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='tionary = {}\n'
              'input_dictionary[input] = np.random.random_sample((64, 1024))\n'
              't = input\n'
              'for i in range(12):\n'
              '    t = attention(t, 16)\n'
              '\n'
              'output_nodes = [t]\n'
              '\n'
              'config = tf.ConfigProto()\n'
              'if (args.xla):\n'
              '    print("Measuring inference performance with XLA ON")\n'
              '    config.graph_options.optimizer_options.global_jit_level = '
              'tf.OptimizerOptions.ON_1\n'
              'else:\n'
              '    print("Measuring inference performance with XLA OFF")\n'
              'print(config.graph_options.optimizer_options.global_jit_level)\n')

Fragment(uuid='NORMALIZED-003901',
         path='/tensorflow_py/bert.py',
         lineno=47,
         depth=6,
         type='documentation',
         name='',
         text='Measuring inference performance with XLA ON')

Fragment(uuid='NORMALIZED-003902',
         path='/tensorflow_py/bert.py',
         lineno=50,
         depth=7,
         type='documentation',
         name='',
         text='Measuring inference performance with XLA OFF')

Fragment(uuid='NORMALIZED-003903',
         path='/tensorflow_py/bert.py',
         lineno=52,
         depth=0,
         type='module',
         name='',
         text='\n'
              'with tf.Session(config=config) as sess:\n'
              '    if (args.print_tensorboard):\n'
              '        writer = tf.summary.FileWriter(args.print_tensorboard, '
              'sess.graph)\n'
              '    times = []\n')

Fragment(uuid='NORMALIZED-003904',
         path='/tensorflow_py/bert.py',
         lineno=57,
         depth=0,
         type='module',
         name='',
         text='    for i in range(args.discard_iter + args.iterations):\n'
              '        t0 = time.time()\n'
              '        sess.run(output_nodes, input_dictionary)\n'
              '        t1 = time.time()\n'
              '        times.append(t1 - t0)\n'
              '    total = 0\n')

Fragment(uuid='NORMALIZED-003905',
         path='/tensorflow_py/bert.py',
         lineno=63,
         depth=0,
         type='module',
         name='',
         text='    for i in range(args.discard_iter, len(times)):\n'
              '        total += times[i]\n'
              '    avg = total / (args.iterations) * 1000.0\n'
              '    print("Average inference time of the last " + '
              'str(args.iterations) + " iterations: " + str(avg) + " ms")\n')

Fragment(uuid='NORMALIZED-003906',
         path='/tensorflow_py/bert.py',
         lineno=66,
         depth=10,
         type='documentation',
         name='',
         text='Average inference time of the last ')

Fragment(uuid='NORMALIZED-003907',
         path='/tensorflow_py/nasnet_a.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import argparse\n'
              'import tensorflow as tf\n'
              'import numpy as np\n'
              'import time\n'
              'from shared_functions import make_activation, make_conv2d, '
              'make_seperable_conv2d, make_avgpool2d, make_maxpool2d\n')

Fragment(uuid='NORMALIZED-003908',
         path='/tensorflow_py/nasnet_a.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003909',
         path='/tensorflow_py/nasnet_a.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tensorflow_py/nasnet_a.py\n'
              '  Functions: fit normal_cell reduction_cell squeeze\n'
              '  Variables and usages: ArgumentParser ConfigProto FileWriter '
              'ON_1 OptimizerOptions Session actimode action add_argument '
              'append argparse args axis concat config current default '
              'discard_iter filter_shape float32 global_jit_level graph '
              'graph_options help input input0 input_dictionary input_tensor '
              'iterations kernels make_activation make_avgpool2d make_conv2d '
              'make_maxpool2d make_seperable_conv2d name numpy '
              'optimizer_options out_channels output_nodes outputs padding '
              'parse_args parser placeholder prev print print_tensorboard '
              'random random_sample range sess shape shared_functions strides '
              'summary tensorflow time times total type value writer\n')

Fragment(uuid='NORMALIZED-003910',
         path='/tensorflow_py/nasnet_a.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003911',
         path='/tensorflow_py/nasnet_a.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003912',
         path='/tensorflow_py/nasnet_a.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003913',
         path='/tensorflow_py/nasnet_a.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-003914',
         path='/tensorflow_py/nasnet_a.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003915',
         path='/tensorflow_py/nasnet_a.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def squeeze(out_channels, input):\n'
              '    return make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name="squeeze")\n')

Fragment(uuid='NORMALIZED-003916',
         path='/tensorflow_py/nasnet_a.py',
         lineno=7,
         depth=1,
         type='function',
         name='squeeze',
         text='def squeeze(out_channels, input):\n'
              '    return make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name="squeeze")')

Fragment(uuid='NORMALIZED-003917',
         path='/tensorflow_py/nasnet_a.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def fit(current, input):\n'
              '    if (input.shape[2].value == current.shape[2].value):\n'
              '        return squeeze(current.shape[1].value, input)\n'
              '    else:\n'
              '        return make_conv2d(input_tensor=input, '
              'filter_shape=(3,3,input.shape[1].value,current.shape[1].value), '
              'strides=(1,1,2,2), padding="SAME", actimode="RELU", '
              'name="fit")\n')

Fragment(uuid='NORMALIZED-003918',
         path='/tensorflow_py/nasnet_a.py',
         lineno=10,
         depth=1,
         type='function',
         name='fit',
         text='def fit(current, input):\n'
              '    if (input.shape[2].value == current.shape[2].value):\n'
              '        return squeeze(current.shape[1].value, input)\n'
              '    else:\n'
              '        return make_conv2d(input_tensor=input, '
              'filter_shape=(3,3,input.shape[1].value,current.shape[1].value), '
              'strides=(1,1,2,2), padding="SAME", actimode="RELU", name="fit")')

Fragment(uuid='NORMALIZED-003919',
         path='/tensorflow_py/nasnet_a.py',
         lineno=15,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def normal_cell(prev, cur, out_channels):\n'
              '    cur = squeeze(out_channels, cur)\n'
              '    prev = fit(cur, prev)\n'
              '    ts = list()\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(cur)\n'
              '    ts.append(make_se')

Fragment(uuid='NORMALIZED-003920',
         path='/tensorflow_py/nasnet_a.py',
         lineno=16,
         depth=1,
         type='function',
         name='normal_cell',
         text='def normal_cell(prev, cur, out_channels):\n'
              '    cur = squeeze(out_channels, cur)\n'
              '    prev = fit(cur, prev)\n'
              '    ts = list()\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(cur)\n'
              '    ts.append(make_se')

Fragment(uuid='NORMALIZED-003921',
         path='/tensorflow_py/nasnet_a.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='perable_conv2d(input_tensor=prev, out_channels=out_channels, '
              'kernels=(3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(make_avgpool2d(input_tensor=cur, ker')

Fragment(uuid='NORMALIZED-003922',
         path='/tensorflow_py/nasnet_a.py',
         lineno=22,
         depth=1,
         type='function',
         name='normal_cell',
         text='perable_conv2d(input_tensor=prev, out_channels=out_channels, '
              'kernels=(3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(make_avgpool2d(input_tensor=cur, ker')

Fragment(uuid='NORMALIZED-003923',
         path='/tensorflow_py/nasnet_a.py',
         lineno=24,
         depth=0,
         type='module',
         name='',
         text='nels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(prev)\n'
              '    ts.append(make_avgpool2d(input_tensor=prev, '
              'kernels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(make_avgpool2d(input_tensor=prev, '
              'kernels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(ma')

Fragment(uuid='NORMALIZED-003924',
         path='/tensorflow_py/nasnet_a.py',
         lineno=24,
         depth=1,
         type='function',
         name='normal_cell',
         text='nels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(prev)\n'
              '    ts.append(make_avgpool2d(input_tensor=prev, '
              'kernels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(make_avgpool2d(input_tensor=prev, '
              'kernels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(ma')

Fragment(uuid='NORMALIZED-003925',
         path='/tensorflow_py/nasnet_a.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='ke_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    assert len(ts) == 10\n'
              '    outputs=list()\n')

Fragment(uuid='NORMALIZED-003926',
         path='/tensorflow_py/nasnet_a.py',
         lineno=28,
         depth=1,
         type='function',
         name='normal_cell',
         text='ke_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    assert len(ts) == 10\n'
              '    outputs=list()\n')

Fragment(uuid='NORMALIZED-003927',
         path='/tensorflow_py/nasnet_a.py',
         lineno=32,
         depth=0,
         type='module',
         name='',
         text='    for i in range(5):\n'
              '        outputs.append(tf.add(ts[2*i], ts[2*i+1]))\n'
              '    return tf.concat(outputs, axis=1, name="concat1")\n')

Fragment(uuid='NORMALIZED-003928',
         path='/tensorflow_py/nasnet_a.py',
         lineno=32,
         depth=1,
         type='function',
         name='normal_cell',
         text='    for i in range(5):\n'
              '        outputs.append(tf.add(ts[2*i], ts[2*i+1]))\n'
              '    return tf.concat(outputs, axis=1, name="concat1")')

Fragment(uuid='NORMALIZED-003929',
         path='/tensorflow_py/nasnet_a.py',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def reduction_cell(prev, cur, out_channels):\n'
              '    cur = squeeze(out_channels, cur)\n'
              '    prev = fit(cur, prev)\n'
              '    ts = list()\n'
              '    outputs = list()\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(7,7), strides=(1,1,2,2), '
              'padding')

Fragment(uuid='NORMALIZED-003930',
         path='/tensorflow_py/nasnet_a.py',
         lineno=36,
         depth=1,
         type='function',
         name='reduction_cell',
         text='def reduction_cell(prev, cur, out_channels):\n'
              '    cur = squeeze(out_channels, cur)\n'
              '    prev = fit(cur, prev)\n'
              '    ts = list()\n'
              '    outputs = list()\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(7,7), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(5,5), stri')

Fragment(uuid='NORMALIZED-003931',
         path='/tensorflow_py/nasnet_a.py',
         lineno=41,
         depth=0,
         type='module',
         name='',
         text='="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=cur, '
              'out_channels=out_channels, kernels=(5,5), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[0], ts[1]))\n'
              '    ts.append(make_maxpool2d(input_tensor=cur, '
              'kernels=(1,1,3,3), strides=(1,1,2,2), pa')

Fragment(uuid='NORMALIZED-003932',
         path='/tensorflow_py/nasnet_a.py',
         lineno=42,
         depth=1,
         type='function',
         name='reduction_cell',
         text='des=(1,1,2,2), padding="SAME"))\n'
              '    outputs.append(tf.add(ts[0], ts[1]))\n'
              '    ts.append(make_maxpool2d(input_tensor=cur, '
              'kernels=(1,1,3,3), strides=(1,1,2,2), padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(7,7), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[2], ts[3]))\n'
              '    ts.append(make_avgpool2d(i')

Fragment(uuid='NORMALIZED-003933',
         path='/tensorflow_py/nasnet_a.py',
         lineno=44,
         depth=0,
         type='module',
         name='',
         text='dding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(7,7), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[2], ts[3]))\n'
              '    ts.append(make_avgpool2d(input_tensor=cur, '
              'kernels=(1,1,3,3), strides=(1,1,2')

Fragment(uuid='NORMALIZED-003934',
         path='/tensorflow_py/nasnet_a.py',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text=',2), padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(5,5), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[4], ts[5]))\n'
              '    ts.append(make_maxpool2d(input_tensor=cur, '
              'kernels=(1,1,3,3), strides=')

Fragment(uuid='NORMALIZED-003935',
         path='/tensorflow_py/nasnet_a.py',
         lineno=47,
         depth=1,
         type='function',
         name='reduction_cell',
         text='nput_tensor=cur, kernels=(1,1,3,3), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=prev, '
              'out_channels=out_channels, kernels=(5,5), strides=(1,1,2,2), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[4], ts[5]))\n'
              '    ts.append(make_maxpool2d(input_tensor=cur, '
              'kernels=(1,1,3,3), strides=(1,1,2,2), padding="SAME"))\n'
              '    ts.append(make_seperable_c')

Fragment(uuid='NORMALIZED-003936',
         path='/tensorflow_py/nasnet_a.py',
         lineno=50,
         depth=0,
         type='module',
         name='',
         text='(1,1,2,2), padding="SAME"))\n'
              '    ts.append(make_seperable_conv2d(input_tensor=outputs[0], '
              'out_channels=out_channels, kernels=(3,3), strides=(1,1,1,1), '
              'padding="SAME"))\n'
              '    outputs.append(tf.add(ts[6], ts[7]))\n'
              '    ts.append(make_avgpool2d(input_tensor=outputs[0], kernels')

Fragment(uuid='NORMALIZED-003937',
         path='/tensorflow_py/nasnet_a.py',
         lineno=51,
         depth=1,
         type='function',
         name='reduction_cell',
         text='onv2d(input_tensor=outputs[0], out_channels=out_channels, '
              'kernels=(3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    outputs.append(tf.add(ts[6], ts[7]))\n'
              '    ts.append(make_avgpool2d(input_tensor=outputs[0], '
              'kernels=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(outputs[1])\n'
              '    outputs.append(tf.add(ts[8], ts[9]))\n'
              '    return tf.concat(outputs, axis=1, name="concat2")')

Fragment(uuid='NORMALIZED-003938',
         path='/tensorflow_py/nasnet_a.py',
         lineno=53,
         depth=0,
         type='module',
         name='',
         text='=(1,1,3,3), strides=(1,1,1,1), padding="SAME"))\n'
              '    ts.append(outputs[1])\n'
              '    outputs.append(tf.add(ts[8], ts[9]))\n'
              '    return tf.concat(outputs, axis=1, name="concat2")\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("--xla", help="Whether to run with '
              'TensorFlow')

Fragment(uuid='NORMALIZED-003939',
         path='/tensorflow_py/nasnet_a.py',
         lineno=59,
         depth=0,
         type='module',
         name='',
         text='XLA optimizations", action="store_true")\n'
              'parser.add_argument("--print_tensorboard", help="Name of folder '
              'to output the tensorboard information")\n'
              'parser.add_argument("--iterations", help="How many iterations '
              'to average for timing (default 5000)", type=int, default=1000)\n'
              'parser.add_argument("--discard_iter", help="How many iterations '
              'to not time during warm up (default 1000)", type=int, '
              'default=1000)\n'
              'args = parser.parse_args()\n'
              '\n'
              'input0 = tf.placeholder(tf.float32, shape=(1,128,56,56))\n'
              'input = input0\n'
              'out_channels = 128\n'
              'for i in range(3):\n')

Fragment(uuid='NORMALIZED-003940',
         path='/tensorflow_py/nasnet_a.py',
         lineno=59,
         depth=5,
         type='documentation',
         name='',
         text='Whether to run with TensorFlowXLA optimizations')

Fragment(uuid='NORMALIZED-003941',
         path='/tensorflow_py/nasnet_a.py',
         lineno=60,
         depth=5,
         type='documentation',
         name='',
         text='Name of folder to output the tensorboard information')

Fragment(uuid='NORMALIZED-003942',
         path='/tensorflow_py/nasnet_a.py',
         lineno=61,
         depth=5,
         type='documentation',
         name='',
         text='How many iterations to average for timing (default 5000)')

Fragment(uuid='NORMALIZED-003943',
         path='/tensorflow_py/nasnet_a.py',
         lineno=62,
         depth=5,
         type='documentation',
         name='',
         text='How many iterations to not time during warm up (default 1000)')

Fragment(uuid='NORMALIZED-003944',
         path='/tensorflow_py/nasnet_a.py',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='    if i > 0:\n'
              '        input = reduction_cell(prev, cur, out_channels)\n'
              '    prev = input\n'
              '    cur = input\n')

Fragment(uuid='NORMALIZED-003945',
         path='/tensorflow_py/nasnet_a.py',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text='    for j in range(10):\n'
              '        t = normal_cell(prev, cur, out_channels)\n'
              '        prev = cur\n'
              '        cur = t\n'
              '    out_channels *= 2\n'
              '\n'
              'config = tf.ConfigProto()\n'
              'if (args.xla):\n'
              '    print("Measuring inference performance with XLA ON")\n'
              '    config.graph_options.optimizer_options.global_jit_level = '
              'tf.OptimizerOptions.ON_1\n'
              'else:\n'
              '    print("Measuring inference performance with XLA OFF")\n'
              'print(config.graph_options.optimizer_options.global_jit_level)\n'
              '\n'
              'output_nodes = [t]\n'
              'input_dictionary = {}\n'
              'input_dictionary[input0] = '
              'np.random.random_sample((1,128,56,56))\n')

Fragment(uuid='NORMALIZED-003946',
         path='/tensorflow_py/nasnet_a.py',
         lineno=81,
         depth=6,
         type='documentation',
         name='',
         text='Measuring inference performance with XLA ON')

Fragment(uuid='NORMALIZED-003947',
         path='/tensorflow_py/nasnet_a.py',
         lineno=84,
         depth=7,
         type='documentation',
         name='',
         text='Measuring inference performance with XLA OFF')

Fragment(uuid='NORMALIZED-003948',
         path='/tensorflow_py/nasnet_a.py',
         lineno=90,
         depth=0,
         type='module',
         name='',
         text='\n'
              'with tf.Session(config=config) as sess:\n'
              '    if (args.print_tensorboard):\n'
              '        writer = tf.summary.FileWriter(args.print_tensorboard, '
              'sess.graph)\n'
              '    times = []\n')

Fragment(uuid='NORMALIZED-003949',
         path='/tensorflow_py/nasnet_a.py',
         lineno=95,
         depth=0,
         type='module',
         name='',
         text='    for i in range(args.discard_iter + args.iterations):\n'
              '        t0 = time.time()\n'
              '        sess.run(output_nodes, input_dictionary)\n'
              '        t1 = time.time()\n'
              '        times.append(t1 - t0)\n'
              '    total = 0\n')

Fragment(uuid='NORMALIZED-003950',
         path='/tensorflow_py/nasnet_a.py',
         lineno=101,
         depth=0,
         type='module',
         name='',
         text='    for i in range(args.discard_iter, len(times)):\n'
              '        total += times[i]\n'
              '    avg = total / (args.iterations) * 1000.0\n'
              '    print("Average inference time of the last " + '
              'str(args.iterations) + " iterations: " + str(avg) + " ms")\n')

Fragment(uuid='NORMALIZED-003951',
         path='/tensorflow_py/nasnet_a.py',
         lineno=104,
         depth=10,
         type='documentation',
         name='',
         text='Average inference time of the last ')

Fragment(uuid='NORMALIZED-003952',
         path='/tensorflow_py/nasrnn.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import argparse\n'
              'import tensorflow as tf\n'
              'import numpy as np\n'
              'import time\n'
              'from shared_functions import make_matmul\n'
              '\n'
              'hidden_size = 512\n'
              'length = 5\n')

Fragment(uuid='NORMALIZED-003953',
         path='/tensorflow_py/nasrnn.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003954',
         path='/tensorflow_py/nasrnn.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tensorflow_py/nasrnn.py\n'
              '  Functions: combine nas_node\n'
              '  Variables and usages: ArgumentParser ConfigProto FileWriter '
              'ON_1 OptimizerOptions Session action add_argument append '
              'argparse args config constant default discard_iter dtype '
              'float32 global_jit_level graph graph_options help hidden_size '
              'input input_dictionary iterations length make_matmul midt '
              'multiply numpy optimizer_options output_nodes parse_args parser '
              'placeholder print print_tensorboard random random_sample range '
              'relu sess shape shared_functions sigmoid state summary tanh '
              'tensorflow time times total type writer\n')

Fragment(uuid='NORMALIZED-003955',
         path='/tensorflow_py/nasrnn.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003956',
         path='/tensorflow_py/nasrnn.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003957',
         path='/tensorflow_py/nasrnn.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003958',
         path='/tensorflow_py/nasrnn.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-003959',
         path='/tensorflow_py/nasrnn.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003960',
         path='/tensorflow_py/nasrnn.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def combine(x, h):\n'
              '    w1 = make_matmul(x, hidden_size)\n'
              '    w2 = make_matmul(h, hidden_size)\n'
              '    return tf.add(tf.nn.relu(w1), tf.nn.relu(w2))\n')

Fragment(uuid='NORMALIZED-003961',
         path='/tensorflow_py/nasrnn.py',
         lineno=10,
         depth=1,
         type='function',
         name='combine',
         text='def combine(x, h):\n'
              '    w1 = make_matmul(x, hidden_size)\n'
              '    w2 = make_matmul(h, hidden_size)\n'
              '    return tf.add(tf.nn.relu(w1), tf.nn.relu(w2))')

Fragment(uuid='NORMALIZED-003962',
         path='/tensorflow_py/nasrnn.py',
         lineno=14,
         depth=0,
         type='module',
         name='',
         text='\ndef nas_node(input, x):\n    t = list()\n')

Fragment(uuid='NORMALIZED-003963',
         path='/tensorflow_py/nasrnn.py',
         lineno=15,
         depth=1,
         type='function',
         name='nas_node',
         text='def nas_node(input, x):\n    t = list()\n')

Fragment(uuid='NORMALIZED-003964',
         path='/tensorflow_py/nasrnn.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='    for i in range(8):\n'
              '        t.append(combine(x, input))\n'
              '    midt = list()\n'
              '    midt.append(tf.add(tf.nn.relu(t[0]), tf.nn.sigmoid(t[3])))\n'
              '    midt.append(tf.add(tf.nn.sigmoid(t[1]), tf.nn.tanh(t[2])))\n'
              '    midt.append(tf.multiply(tf.nn.sigmoid(t[4]), '
              'tf.nn.tanh(t[5])))\n'
              '    midt.append(tf.multiply(tf.nn.sigmoid(t[6]), '
              'tf.nn.relu(t[7])))\n'
              '    midt.append(tf.add(tf.nn.sigmoid(midt[1]), '
              'tf.nn.tanh(midt[2])))\n'
              '    midt.append(tf.multiply(tf.nn.tanh(midt[')

Fragment(uuid='NORMALIZED-003965',
         path='/tensorflow_py/nasrnn.py',
         lineno=17,
         depth=1,
         type='function',
         name='nas_node',
         text='    for i in range(8):\n'
              '        t.append(combine(x, input))\n'
              '    midt = list()\n'
              '    midt.append(tf.add(tf.nn.relu(t[0]), tf.nn.sigmoid(t[3])))\n'
              '    midt.append(tf.add(tf.nn.sigmoid(t[1]), tf.nn.tanh(t[2])))\n'
              '    midt.append(tf.multiply(tf.nn.sigmoid(t[4]), '
              'tf.nn.tanh(t[5])))\n'
              '    midt.append(tf.')

Fragment(uuid='NORMALIZED-003966',
         path='/tensorflow_py/nasrnn.py',
         lineno=23,
         depth=1,
         type='function',
         name='nas_node',
         text='multiply(tf.nn.sigmoid(t[6]), tf.nn.relu(t[7])))\n'
              '    midt.append(tf.add(tf.nn.sigmoid(midt[1]), '
              'tf.nn.tanh(midt[2])))\n'
              '    midt.append(tf.multiply(tf.nn.tanh(midt[0]), '
              'tf.nn.tanh(midt[3])))\n'
              '    midt.append(tf.multiply(tf.nn.tanh(midt[4]), '
              'tf.nn.tanh(midt[5])))\n'
              '    return tf.nn.tanh(midt[6])')

Fragment(uuid='NORMALIZED-003967',
         path='/tensorflow_py/nasrnn.py',
         lineno=25,
         depth=0,
         type='module',
         name='',
         text='0]), tf.nn.tanh(midt[3])))\n'
              '    midt.append(tf.multiply(tf.nn.tanh(midt[4]), '
              'tf.nn.tanh(midt[5])))\n'
              '    return tf.nn.tanh(midt[6])\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("--xla", help="Whether to run with '
              'TensorFlowXLA optimizations", action="store_true")\n'
              'parser.add_argument("--print_tensorboard", help="Name of folder '
              'to output the tensorboard information")\n'
              'parser.add_argument("--iterations", help="How many iterations '
              'to average for t')

Fragment(uuid='NORMALIZED-003968',
         path='/tensorflow_py/nasrnn.py',
         lineno=30,
         depth=5,
         type='documentation',
         name='',
         text='Whether to run with TensorFlowXLA optimizations')

Fragment(uuid='NORMALIZED-003969',
         path='/tensorflow_py/nasrnn.py',
         lineno=31,
         depth=5,
         type='documentation',
         name='',
         text='Name of folder to output the tensorboard information')

Fragment(uuid='NORMALIZED-003970',
         path='/tensorflow_py/nasrnn.py',
         lineno=32,
         depth=0,
         type='module',
         name='',
         text='iming (default 5000)", type=int, default=1000)\n'
              'parser.add_argument("--discard_iter", help="How many iterations '
              'to not time during warm up (default 1000)", type=int, '
              'default=1000)\n'
              'args = parser.parse_args()\n'
              '\n'
              'input_dictionary = {}\n'
              'xs = list()\n'
              'output_nodes = []\n'
              'for i in range(length):\n'
              '    xs.append(tf.placeholder(tf.float32, shape=(1, '
              'hidden_size)))\n'
              '    input_dictionary[xs[i]] = np.random.random_sample((1, '
              'hidden_size))\n'
              'state = tf.constant(np.random.r')

Fragment(uuid='NORMALIZED-003971',
         path='/tensorflow_py/nasrnn.py',
         lineno=32,
         depth=5,
         type='documentation',
         name='',
         text='How many iterations to average for timing (default 5000)')

Fragment(uuid='NORMALIZED-003972',
         path='/tensorflow_py/nasrnn.py',
         lineno=33,
         depth=5,
         type='documentation',
         name='',
         text='How many iterations to not time during warm up (default 1000)')

Fragment(uuid='NORMALIZED-003973',
         path='/tensorflow_py/nasrnn.py',
         lineno=42,
         depth=0,
         type='module',
         name='',
         text='andom_sample((1, hidden_size)), dtype=tf.float32)\n'
              'for i in range(length):\n'
              '    state = nas_node(state, xs[i])\n'
              '    output_nodes.append(state)\n'
              '\n'
              'config = tf.ConfigProto()\n'
              'if (args.xla):\n'
              '    print("Measuring inference performance with XLA ON")\n'
              '    config.graph_options.optimizer_options.global_jit_level = '
              'tf.OptimizerOptions.ON_1\n'
              'else:\n'
              '    print("Measuring inference performance with XLA OFF")\n'
              'print(config.graph_options.optimizer_options.global_jit_level)\n')

Fragment(uuid='NORMALIZED-003974',
         path='/tensorflow_py/nasrnn.py',
         lineno=49,
         depth=6,
         type='documentation',
         name='',
         text='Measuring inference performance with XLA ON')

Fragment(uuid='NORMALIZED-003975',
         path='/tensorflow_py/nasrnn.py',
         lineno=52,
         depth=7,
         type='documentation',
         name='',
         text='Measuring inference performance with XLA OFF')

Fragment(uuid='NORMALIZED-003976',
         path='/tensorflow_py/nasrnn.py',
         lineno=54,
         depth=0,
         type='module',
         name='',
         text='\n'
              'with tf.Session(config=config) as sess:\n'
              '    if (args.print_tensorboard):\n'
              '        writer = tf.summary.FileWriter(args.print_tensorboard, '
              'sess.graph)\n'
              '    times = []\n')

Fragment(uuid='NORMALIZED-003977',
         path='/tensorflow_py/nasrnn.py',
         lineno=59,
         depth=0,
         type='module',
         name='',
         text='    for i in range(args.discard_iter + args.iterations):\n'
              '        t0 = time.time()\n'
              '        sess.run(output_nodes, input_dictionary)\n'
              '        t1 = time.time()\n'
              '        times.append(t1 - t0)\n'
              '    total = 0\n')

Fragment(uuid='NORMALIZED-003978',
         path='/tensorflow_py/nasrnn.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text='    for i in range(args.discard_iter, len(times)):\n'
              '        total += times[i]\n'
              '    avg = total / (args.iterations) * 1000.0\n'
              '    print("Average inference time of the last " + '
              'str(args.iterations) + " iterations: " + str(avg) + " ms")\n')

Fragment(uuid='NORMALIZED-003979',
         path='/tensorflow_py/nasrnn.py',
         lineno=68,
         depth=10,
         type='documentation',
         name='',
         text='Average inference time of the last ')

Fragment(uuid='NORMALIZED-003980',
         path='/tensorflow_py/resnet50.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import argparse\n'
              'import tensorflow as tf\n'
              'import numpy as np\n'
              'import time\n'
              'from shared_functions import make_activation, make_conv2d\n')

Fragment(uuid='NORMALIZED-003981',
         path='/tensorflow_py/resnet50.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003982',
         path='/tensorflow_py/resnet50.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tensorflow_py/resnet50.py\n'
              '  Functions: resnet_block\n'
              '  Variables and usages: ArgumentParser ConfigProto FileWriter '
              'ON_1 OptimizerOptions Session actimode action add_argument '
              'append argparse args config default discard_iter filter_shape '
              'float32 format global_jit_level graph graph_options help input '
              'input_dictionary input_tensor iterations make_activation '
              'make_conv2d name numpy optimizer_options out_channels '
              'output_nodes padding parse_args parser placeholder print '
              'print_tensorboard random random_sample range relu sess shape '
              'shared_functions strides summary tensorflow time times total '
              'type value writer\n')

Fragment(uuid='NORMALIZED-003983',
         path='/tensorflow_py/resnet50.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003984',
         path='/tensorflow_py/resnet50.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003985',
         path='/tensorflow_py/resnet50.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003986',
         path='/tensorflow_py/resnet50.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-003987',
         path='/tensorflow_py/resnet50.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-003988',
         path='/tensorflow_py/resnet50.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def resnet_block(input, strides, out_channels, name):\n'
              '    t = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name=name+"_conv1")\n'
              '    t = make_conv2d(input_tensor=t, filter_')

Fragment(uuid='NORMALIZED-003989',
         path='/tensorflow_py/resnet50.py',
         lineno=7,
         depth=1,
         type='function',
         name='resnet_block',
         text='def resnet_block(input, strides, out_channels, name):\n'
              '    t = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name=name+"_conv1")\n'
              '    t = make_conv2d(input_tensor=t, filter_s')

Fragment(uuid='NORMALIZED-003990',
         path='/tensorflow_py/resnet50.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='shape=(3,3,out_channels,out_channels), strides=strides, '
              'padding="SAME", actimode="RELU", name=name+"_conv2")\n'
              '    t = make_conv2d(input_tensor=t, '
              'filter_shape=(1,1,out_channels,out_channels*4), '
              'strides=(1,1,1,1), padding="SAME", actimode="NONE", '
              'name=name+"_conv3")\n')

Fragment(uuid='NORMALIZED-003991',
         path='/tensorflow_py/resnet50.py',
         lineno=9,
         depth=1,
         type='function',
         name='resnet_block',
         text='hape=(3,3,out_channels,out_channels), strides=strides, '
              'padding="SAME", actimode="RELU", name=name+"_conv2")\n'
              '    t = make_conv2d(input_tensor=t, '
              'filter_shape=(1,1,out_channels,out_channels*4), '
              'strides=(1,1,1,1), padding="SAME", actimode="NONE", '
              'name=name+"_conv3")\n')

Fragment(uuid='NORMALIZED-003992',
         path='/tensorflow_py/resnet50.py',
         lineno=11,
         depth=0,
         type='module',
         name='',
         text='    if (strides[2]>1) or (input.shape[1].value != out_channels '
              '* 4):\n'
              '        input = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels*4), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv4")\n'
              '    return tf.nn.relu(tf.add(input, t))\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("--xla", help="Whether to run with '
              'TensorFlowXLA optimizations", action="store_true")\n'
              'parser.add_argume')

Fragment(uuid='NORMALIZED-003993',
         path='/tensorflow_py/resnet50.py',
         lineno=11,
         depth=1,
         type='function',
         name='resnet_block',
         text='    if (strides[2]>1) or (input.shape[1].value != out_channels '
              '* 4):\n'
              '        input = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels*4), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv4")\n'
              '    return tf.nn.relu(tf.add(input, t))')

Fragment(uuid='NORMALIZED-003994',
         path='/tensorflow_py/resnet50.py',
         lineno=16,
         depth=5,
         type='documentation',
         name='',
         text='Whether to run with TensorFlowXLA optimizations')

Fragment(uuid='NORMALIZED-003995',
         path='/tensorflow_py/resnet50.py',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='nt("--print_tensorboard", help="Name of folder to output the '
              'tensorboard information")\n'
              'parser.add_argument("--iterations", help="How many iterations '
              'to average for timing (default 5000)", type=int, default=1000)\n'
              'parser.add_argument("--discard_iter", help="How many iterations '
              'to not time during warm up (default 1000)", type=int, '
              'default=1000)\n'
              'args = parser.parse_args()\n'
              '\n'
              'input = tf.placeholder(tf.float32, shape=(1,64,56,56))\n'
              't = input\n'
              'for i ')

Fragment(uuid='NORMALIZED-003996',
         path='/tensorflow_py/resnet50.py',
         lineno=17,
         depth=5,
         type='documentation',
         name='',
         text='Name of folder to output the tensorboard information')

Fragment(uuid='NORMALIZED-003997',
         path='/tensorflow_py/resnet50.py',
         lineno=18,
         depth=5,
         type='documentation',
         name='',
         text='How many iterations to average for timing (default 5000)')

Fragment(uuid='NORMALIZED-003998',
         path='/tensorflow_py/resnet50.py',
         lineno=19,
         depth=5,
         type='documentation',
         name='',
         text='How many iterations to not time during warm up (default 1000)')

Fragment(uuid='NORMALIZED-003999',
         path='/tensorflow_py/resnet50.py',
         lineno=24,
         depth=0,
         type='module',
         name='',
         text='in range(3):\n'
              '    t = resnet_block(t, (1,1,1,1), 64, '
              '"resnet_block_1_{}".format(i))\n'
              'strides=(1,1,2,2)\n'
              'for i in range(4):\n'
              '    t = resnet_block(t, strides, 128, '
              '"resnet_block_2_{}".format(i))\n'
              '    strides=(1,1,1,1)\n'
              'strides=(1')

Fragment(uuid='NORMALIZED-004000',
         path='/tensorflow_py/resnet50.py',
         lineno=30,
         depth=0,
         type='module',
         name='',
         text=',1,2,2)\n'
              'for i in range(6):\n'
              '    t = resnet_block(t, strides, 256, '
              '"resnet_block_3_{}".format(i))\n'
              '    strides=(1,1,1,1)\n'
              'strides=(1,1,2,2)\n'
              'for i in range(3):\n'
              '    t = resnet_block(t, strides, 512, '
              '"resnet_block_4_{}".format(i)')

Fragment(uuid='NORMALIZED-004001',
         path='/tensorflow_py/resnet50.py',
         lineno=36,
         depth=0,
         type='module',
         name='',
         text=')\n'
              '    strides=(1,1,1,1)\n'
              '\n'
              'config = tf.ConfigProto()\n'
              'if (args.xla):\n'
              '    print("Measuring inference performance with XLA ON")\n'
              '    config.graph_options.optimizer_options.global_jit_level = '
              'tf.OptimizerOptions.ON_1\n'
              'else:\n'
              '    print("Measuring inference performance with XLA OFF")\n'
              'print(config.graph_options.optimizer_options.global_jit_level)\n'
              '\n'
              'output_nodes = [t]\n'
              'input_dictionary = {}\n'
              'input_dictionary[input] = '
              'np.random.random_sample((1,64,56,56))\n')

Fragment(uuid='NORMALIZED-004002',
         path='/tensorflow_py/resnet50.py',
         lineno=41,
         depth=6,
         type='documentation',
         name='',
         text='Measuring inference performance with XLA ON')

Fragment(uuid='NORMALIZED-004003',
         path='/tensorflow_py/resnet50.py',
         lineno=44,
         depth=7,
         type='documentation',
         name='',
         text='Measuring inference performance with XLA OFF')

Fragment(uuid='NORMALIZED-004004',
         path='/tensorflow_py/resnet50.py',
         lineno=50,
         depth=0,
         type='module',
         name='',
         text='\n'
              'with tf.Session(config=config) as sess:\n'
              '    if (args.print_tensorboard):\n'
              '        writer = tf.summary.FileWriter(args.print_tensorboard, '
              'sess.graph)\n'
              '    times = []\n')

Fragment(uuid='NORMALIZED-004005',
         path='/tensorflow_py/resnet50.py',
         lineno=55,
         depth=0,
         type='module',
         name='',
         text='    for i in range(args.discard_iter + args.iterations):\n'
              '        t0 = time.time()\n'
              '        sess.run(output_nodes, input_dictionary)\n'
              '        t1 = time.time()\n'
              '        times.append(t1 - t0)\n'
              '    total = 0\n')

Fragment(uuid='NORMALIZED-004006',
         path='/tensorflow_py/resnet50.py',
         lineno=61,
         depth=0,
         type='module',
         name='',
         text='    for i in range(args.discard_iter, len(times)):\n'
              '        total += times[i]\n'
              '    avg = total / (args.iterations) * 1000.0\n'
              '    print("Average inference time of the last " + '
              'str(args.iterations) + " iterations: " + str(avg) + " ms")\n')

Fragment(uuid='NORMALIZED-004007',
         path='/tensorflow_py/resnet50.py',
         lineno=64,
         depth=10,
         type='documentation',
         name='',
         text='Average inference time of the last ')

Fragment(uuid='NORMALIZED-004008',
         path='/tensorflow_py/resnext50.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import argparse\n'
              'import tensorflow as tf\n'
              'import numpy as np\n'
              'import time\n'
              'from shared_functions import make_activation, make_conv2d\n')

Fragment(uuid='NORMALIZED-004009',
         path='/tensorflow_py/resnext50.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004010',
         path='/tensorflow_py/resnext50.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tensorflow_py/resnext50.py\n'
              '  Functions: resnext_block\n'
              '  Variables and usages: ArgumentParser ConfigProto FileWriter '
              'ON_1 OptimizerOptions Session actimode action add_argument '
              'append argparse args axis concat config default discard_iter '
              'filter_shape float32 format global_jit_level graph '
              'graph_options groups help input input_dictionary input_tensor '
              'iterations make_activation make_conv2d name numpy '
              'optimizer_options out_channels output output_nodes padding '
              'parse_args parser placeholder print print_tensorboard random '
              'random_sample range relu sess shape shared_functions split '
              'strides summary tensorflow time times total type value writer\n')

Fragment(uuid='NORMALIZED-004011',
         path='/tensorflow_py/resnext50.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004012',
         path='/tensorflow_py/resnext50.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004013',
         path='/tensorflow_py/resnext50.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004014',
         path='/tensorflow_py/resnext50.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004015',
         path='/tensorflow_py/resnext50.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004016',
         path='/tensorflow_py/resnext50.py',
         lineno=6,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def resnext_block(input, strides, out_channels, groups, name):\n'
              '    t = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name=name+"_conv1")\n'
              '    t = tf.split(t, groups, axis=1, name=name+"_split")\n'
              '    assert(len(t) == groups)\n')

Fragment(uuid='NORMALIZED-004017',
         path='/tensorflow_py/resnext50.py',
         lineno=7,
         depth=1,
         type='function',
         name='resnext_block',
         text='def resnext_block(input, strides, out_channels, groups, name):\n'
              '    t = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="RELU", '
              'name=name+"_conv1")\n'
              '    t = tf.split(t, groups, axis=1, name=name+"_split")\n'
              '    assert(len(t) == groups)\n')

Fragment(uuid='NORMALIZED-004018',
         path='/tensorflow_py/resnext50.py',
         lineno=11,
         depth=0,
         type='module',
         name='',
         text='    for i in range(groups):\n'
              '        t[i] = make_conv2d(input_tensor=t[i], '
              'filter_shape=(3,3,t[i].shape[1].value,out_channels//groups), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv2_".format(i))\n'
              '    output = tf.concat(t, axis=1, name=name+"_concat")\n'
              '    t = make_conv2d(input_tensor=output, '
              'filter_shape=(1,1,output.shape[1].value,2*out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="NONE", '
              'name=name+"_conv3")\n')

Fragment(uuid='NORMALIZED-004019',
         path='/tensorflow_py/resnext50.py',
         lineno=11,
         depth=1,
         type='function',
         name='resnext_block',
         text='    for i in range(groups):\n'
              '        t[i] = make_conv2d(input_tensor=t[i], '
              'filter_shape=(3,3,t[i].shape[1].value,out_channels//groups), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv2_".format(i))\n'
              '    output = tf.concat(t, axis=1, name=name+"_concat")\n'
              '    t = make_conv2d(input_tensor=output, '
              'filter_shape=(1,1,output.shape[1].value,2*out_channels), '
              'strides=(1,1,1,1), padding="SAME", actimode="NONE", '
              'name=name+"_conv3")\n')

Fragment(uuid='NORMALIZED-004020',
         path='/tensorflow_py/resnext50.py',
         lineno=15,
         depth=0,
         type='module',
         name='',
         text='    if (strides[2]>1) or (input.shape[1].value != '
              'out_channels*2):\n'
              '        input = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels*2), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv4")\n'
              '    return tf.nn.relu(tf.add(input, t))\n'
              '\n'
              'parser = argparse.ArgumentParser()\n'
              'parser.add_argument("--xla", help="Whether to run with '
              'TensorFlowXLA optimizations", action="store_true")\n'
              'parser.add_argument("--p')

Fragment(uuid='NORMALIZED-004021',
         path='/tensorflow_py/resnext50.py',
         lineno=15,
         depth=1,
         type='function',
         name='resnext_block',
         text='    if (strides[2]>1) or (input.shape[1].value != '
              'out_channels*2):\n'
              '        input = make_conv2d(input_tensor=input, '
              'filter_shape=(1,1,input.shape[1].value,out_channels*2), '
              'strides=strides, padding="SAME", actimode="RELU", '
              'name=name+"_conv4")\n'
              '    return tf.nn.relu(tf.add(input, t))')

Fragment(uuid='NORMALIZED-004022',
         path='/tensorflow_py/resnext50.py',
         lineno=20,
         depth=5,
         type='documentation',
         name='',
         text='Whether to run with TensorFlowXLA optimizations')

Fragment(uuid='NORMALIZED-004023',
         path='/tensorflow_py/resnext50.py',
         lineno=21,
         depth=0,
         type='module',
         name='',
         text='rint_tensorboard", help="Name of folder to output the '
              'tensorboard information")\n'
              'parser.add_argument("--iterations", help="How many iterations '
              'to average for timing (default 5000)", type=int, default=1000)\n'
              'parser.add_argument("--discard_iter", help="How many iterations '
              'to not time during warm up (default 1000)", type=int, '
              'default=1000)\n'
              'args = parser.parse_args()\n'
              '\n'
              'input = tf.placeholder(tf.float32, shape=(1,64,56,56))\n'
              't = input\n'
              'for i in range(3):')

Fragment(uuid='NORMALIZED-004024',
         path='/tensorflow_py/resnext50.py',
         lineno=21,
         depth=5,
         type='documentation',
         name='',
         text='Name of folder to output the tensorboard information')

Fragment(uuid='NORMALIZED-004025',
         path='/tensorflow_py/resnext50.py',
         lineno=22,
         depth=5,
         type='documentation',
         name='',
         text='How many iterations to average for timing (default 5000)')

Fragment(uuid='NORMALIZED-004026',
         path='/tensorflow_py/resnext50.py',
         lineno=23,
         depth=5,
         type='documentation',
         name='',
         text='How many iterations to not time during warm up (default 1000)')

Fragment(uuid='NORMALIZED-004027',
         path='/tensorflow_py/resnext50.py',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    t = resnext_block(t, (1,1,1,1), 128, 32, '
              '"resnet_block_1_{}".format(i))\n'
              'strides=(1,1,2,2)\n'
              'for i in range(4):\n'
              '    t = resnext_block(t, strides, 256, 32, '
              '"resnet_block_2_{}".format(i))\n'
              '    strides=(1,1,1,1)\n'
              'strides=(1,1,2')

Fragment(uuid='NORMALIZED-004028',
         path='/tensorflow_py/resnext50.py',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text=',2)\n'
              'for i in range(6):\n'
              '    t = resnext_block(t, strides, 512, 32, '
              '"resnet_block_3_{}".format(i))\n'
              '    strides=(1,1,1,1)\n'
              'strides=(1,1,2,2)\n'
              'for i in range(3):\n'
              '    t = resnext_block(t, strides, 1024, 32, '
              '"resnet_block_4_{}".form')

Fragment(uuid='NORMALIZED-004029',
         path='/tensorflow_py/resnext50.py',
         lineno=40,
         depth=0,
         type='module',
         name='',
         text='at(i))\n'
              '    strides=(1,1,1,1)\n'
              '\n'
              'config = tf.ConfigProto()\n'
              'if (args.xla):\n'
              '    print("Measuring inference performance with XLA ON")\n'
              '    config.graph_options.optimizer_options.global_jit_level = '
              'tf.OptimizerOptions.ON_1\n'
              'else:\n'
              '    print("Measuring inference performance with XLA OFF")\n'
              'print(config.graph_options.optimizer_options.global_jit_level)\n'
              '\n'
              'output_nodes = [t]\n'
              'input_dictionary = {}\n'
              'input_dictionary[input] = '
              'np.random.random_sample((1,64,56,56))\n')

Fragment(uuid='NORMALIZED-004030',
         path='/tensorflow_py/resnext50.py',
         lineno=45,
         depth=6,
         type='documentation',
         name='',
         text='Measuring inference performance with XLA ON')

Fragment(uuid='NORMALIZED-004031',
         path='/tensorflow_py/resnext50.py',
         lineno=48,
         depth=7,
         type='documentation',
         name='',
         text='Measuring inference performance with XLA OFF')

Fragment(uuid='NORMALIZED-004032',
         path='/tensorflow_py/resnext50.py',
         lineno=54,
         depth=0,
         type='module',
         name='',
         text='\n'
              'with tf.Session(config=config) as sess:\n'
              '    if (args.print_tensorboard):\n'
              '        writer = tf.summary.FileWriter(args.print_tensorboard, '
              'sess.graph)\n'
              '    times = []\n')

Fragment(uuid='NORMALIZED-004033',
         path='/tensorflow_py/resnext50.py',
         lineno=59,
         depth=0,
         type='module',
         name='',
         text='    for i in range(args.discard_iter + args.iterations):\n'
              '        t0 = time.time()\n'
              '        sess.run(output_nodes, input_dictionary)\n'
              '        t1 = time.time()\n'
              '        times.append(t1 - t0)\n'
              '    total = 0\n')

Fragment(uuid='NORMALIZED-004034',
         path='/tensorflow_py/resnext50.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text='    for i in range(args.discard_iter, len(times)):\n'
              '        total += times[i]\n'
              '    avg = total / (args.iterations) * 1000.0\n'
              '    print("Average inference time of the last " + '
              'str(args.iterations) + " iterations: " + str(avg) + " ms")\n')

Fragment(uuid='NORMALIZED-004035',
         path='/tensorflow_py/resnext50.py',
         lineno=68,
         depth=10,
         type='documentation',
         name='',
         text='Average inference time of the last ')

Fragment(uuid='NORMALIZED-004036',
         path='/tensorflow_py/shared_functions.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='import tensorflow as tf\nimport numpy as np\n')

Fragment(uuid='NORMALIZED-004037',
         path='/tensorflow_py/shared_functions.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004038',
         path='/tensorflow_py/shared_functions.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /tensorflow_py/shared_functions.py\n'
              '  Functions: make_activation make_avgpool2d make_conv2d '
              'make_matmul make_maxpool2d make_seperable_conv2d\n'
              '  Variables and usages: actimode avg_pool constant conv2d '
              'conv_name data_format depthwise_filter_shape dp_filter dtype '
              'filter_shape float32 input input_tensor kernels matmul max_pool '
              'name numpy out_channels padding pointwise_filter_shape print '
              'pw_filter random random_sample relu relu_name separable_conv2d '
              'shape sigmoid sigmoid_name strides tanh tanh_name tensorflow '
              'value weight weight_shape weights weights_name\n')

Fragment(uuid='NORMALIZED-004039',
         path='/tensorflow_py/shared_functions.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004040',
         path='/tensorflow_py/shared_functions.py',
         lineno=3,
         depth=0,
         type='module',
         name='',
         text='\ndef make_activation(input, actimode, name):\n')

Fragment(uuid='NORMALIZED-004041',
         path='/tensorflow_py/shared_functions.py',
         lineno=4,
         depth=1,
         type='function',
         name='make_activation',
         text='def make_activation(input, actimode, name):\n')

Fragment(uuid='NORMALIZED-004042',
         path='/tensorflow_py/shared_functions.py',
         lineno=5,
         depth=0,
         type='module',
         name='',
         text='    if actimode == "NONE":\n'
              '        return input\n'
              '    elif actimode == "RELU":\n'
              '        relu_name = name + "_relu"\n'
              '        relu = tf.nn.relu(input, name=relu_name)\n'
              '        return relu\n'
              '    elif actimode == "SIGMOID":\n'
              '        sigmoid_name = name + "_sigmoid"\n'
              '        sigmoid = tf.nn.sigmoid(input, name=sigmoid_name)\n'
              '        return sigmoid\n'
              '    elif actimode == "TANH":\n'
              '        tanh_name = name + "_tanh"\n'
              '        tanh = tf.nn.tanh(input, name=tanh_name)\n'
              '        return tanh\n'
              '    else:\n'
              '        print("Unknown Actimode")\n'
              '        assert(0)\n')

Fragment(uuid='NORMALIZED-004043',
         path='/tensorflow_py/shared_functions.py',
         lineno=5,
         depth=1,
         type='function',
         name='make_activation',
         text='    if actimode == "NONE":\n'
              '        return input\n'
              '    elif actimode == "RELU":\n'
              '        relu_name = name + "_relu"\n'
              '        relu = tf.nn.relu(input, name=relu_name)\n'
              '        return relu\n'
              '    elif actimode == "SIGMOID":\n'
              '        sigmoid_name = name + "_sigmoid"\n'
              '        sigmoid = tf.nn.sigmoid(input, name=sigmoid_name)\n'
              '        return sigmoid\n'
              '    elif actimode == "TANH":\n'
              '        tanh_name = name + "_tanh"\n'
              '        tanh = tf.nn.tanh(input, name=tanh_name)\n'
              '        return tanh\n'
              '    else:\n'
              '        print("Unknown Actimode")\n'
              '        assert(0)')

Fragment(uuid='NORMALIZED-004044',
         path='/tensorflow_py/shared_functions.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def make_conv2d(input_tensor, filter_shape, strides, padding, '
              'actimode, name):\n'
              '    weights_name = name + "_weights"\n'
              '    conv_name = name + "_conv2d"\n'
              '    weights = '
              'tf.constant(np.random.random_sample(filter_shape), '
              'name=weights_name, dtype=tf.float32)\n'
              '    conv2d = tf.nn.conv2d(input_tensor, weights, strides, '
              'padding, data_format="NCHW", name=conv_name)\n'
              '    return make_activation(conv2d, actimode, name)\n')

Fragment(uuid='NORMALIZED-004045',
         path='/tensorflow_py/shared_functions.py',
         lineno=23,
         depth=1,
         type='function',
         name='make_conv2d',
         text='def make_conv2d(input_tensor, filter_shape, strides, padding, '
              'actimode, name):\n'
              '    weights_name = name + "_weights"\n'
              '    conv_name = name + "_conv2d"\n'
              '    weights = '
              'tf.constant(np.random.random_sample(filter_shape), '
              'name=weights_name, dtype=tf.float32)\n'
              '    conv2d = tf.nn.conv2d(input_tensor, weights, strides, '
              'padding, data_format="NCHW", name=conv_name)\n'
              '    return make_activation(conv2d, actimode, name)')

Fragment(uuid='NORMALIZED-004046',
         path='/tensorflow_py/shared_functions.py',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def make_seperable_conv2d(input_tensor, out_channels, kernels, '
              'strides, padding, actimode="NONE", name="seperable_conv2d"):\n'
              '    '
              'depthwise_filter_shape=(kernels[0],kernels[1],input_tensor.shape[1].value,1)\n'
              '    '
              'pointwise_filter_shape=(1,1,input_tensor.shape[1].value,out_channels)\n'
              '    dp_filter = '
              'tf.constant(np.random.random_sample(depthwise_fil')

Fragment(uuid='NORMALIZED-004047',
         path='/tensorflow_py/shared_functions.py',
         lineno=30,
         depth=1,
         type='function',
         name='make_seperable_conv2d',
         text='def make_seperable_conv2d(input_tensor, out_channels, kernels, '
              'strides, padding, actimode="NONE", name="seperable_conv2d"):\n'
              '    '
              'depthwise_filter_shape=(kernels[0],kernels[1],input_tensor.shape[1].value,1)\n'
              '    '
              'pointwise_filter_shape=(1,1,input_tensor.shape[1].value,out_channels)\n'
              '    dp_filter = '
              'tf.constant(np.random.random_sample(depthwise_fil')

Fragment(uuid='NORMALIZED-004048',
         path='/tensorflow_py/shared_functions.py',
         lineno=33,
         depth=0,
         type='module',
         name='',
         text='ter_shape), name=name+"_dp_filter", dtype=tf.float32)\n'
              '    pw_filter = '
              'tf.constant(np.random.random_sample(pointwise_filter_shape), '
              'name=name+"_pw_filter", dtype=tf.float32)\n'
              '    conv2d = tf.nn.separable_conv2d(input_tensor, dp_filter, '
              'pw_filter, strides, padding, data_format="NCHW", name=name)\n'
              '    return make_activation(conv2d, actimode, name)\n')

Fragment(uuid='NORMALIZED-004049',
         path='/tensorflow_py/shared_functions.py',
         lineno=33,
         depth=1,
         type='function',
         name='make_seperable_conv2d',
         text='ter_shape), name=name+"_dp_filter", dtype=tf.float32)\n'
              '    pw_filter = '
              'tf.constant(np.random.random_sample(pointwise_filter_shape), '
              'name=name+"_pw_filter", dtype=tf.float32)\n'
              '    conv2d = tf.nn.separable_conv2d(input_tensor, dp_filter, '
              'pw_filter, strides, padding, data_format="NCHW", name=name)\n'
              '    return make_activation(conv2d, actimode, name)')

Fragment(uuid='NORMALIZED-004050',
         path='/tensorflow_py/shared_functions.py',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def make_avgpool2d(input_tensor, kernels, strides, padding):\n'
              '    return tf.nn.avg_pool(input_tensor, kernels, strides, '
              'padding, data_format="NCHW")\n')

Fragment(uuid='NORMALIZED-004051',
         path='/tensorflow_py/shared_functions.py',
         lineno=38,
         depth=1,
         type='function',
         name='make_avgpool2d',
         text='def make_avgpool2d(input_tensor, kernels, strides, padding):\n'
              '    return tf.nn.avg_pool(input_tensor, kernels, strides, '
              'padding, data_format="NCHW")')

Fragment(uuid='NORMALIZED-004052',
         path='/tensorflow_py/shared_functions.py',
         lineno=40,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def make_maxpool2d(input_tensor, kernels, strides, padding):\n'
              '    return tf.nn.max_pool(input_tensor, kernels, strides, '
              'padding, data_format="NCHW")\n')

Fragment(uuid='NORMALIZED-004053',
         path='/tensorflow_py/shared_functions.py',
         lineno=41,
         depth=1,
         type='function',
         name='make_maxpool2d',
         text='def make_maxpool2d(input_tensor, kernels, strides, padding):\n'
              '    return tf.nn.max_pool(input_tensor, kernels, strides, '
              'padding, data_format="NCHW")')

Fragment(uuid='NORMALIZED-004054',
         path='/tensorflow_py/shared_functions.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def make_matmul(input_tensor, out_channels):\n'
              '    weight_shape = (input_tensor.shape[1].value, out_channels)\n'
              '    weight = tf.constant(np.random.random_sample(weight_shape), '
              'dtype=tf.float32)\n'
              '    return tf.matmul(input_tensor, weight)\n')

Fragment(uuid='NORMALIZED-004055',
         path='/tensorflow_py/shared_functions.py',
         lineno=44,
         depth=1,
         type='function',
         name='make_matmul',
         text='def make_matmul(input_tensor, out_channels):\n'
              '    weight_shape = (input_tensor.shape[1].value, out_channels)\n'
              '    weight = tf.constant(np.random.random_sample(weight_shape), '
              'dtype=tf.float32)\n'
              '    return tf.matmul(input_tensor, weight)')

Fragment(uuid='NORMALIZED-004056',
         path='/verify/rules_pb2.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='# Generated by the protocol buffer compiler.  DO NOT EDIT!\n'
              '# source: rules.proto\n'
              '\n'
              'import sys\n'
              '_b=sys.version_info[0]<3 and (lambda x:x) or (lambda '
              "x:x.encode('latin1'))\n"
              'from google.protobuf import descriptor as _descriptor\n'
              'from google.protobuf import message as _message\n'
              'from google.protobuf import reflection as _reflection\n'
              'from google.proto')

Fragment(uuid='NORMALIZED-004057',
         path='/verify/rules_pb2.py',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='# Generated by the protocol buffer compiler.  DO NOT EDIT!')

Fragment(uuid='NORMALIZED-004058',
         path='/verify/rules_pb2.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /verify/rules_pb2.py\n'
              '  Variables and usages: DESCRIPTOR Default Descriptor '
              'FieldDescriptor FileDescriptor GeneratedProtocolMessageType '
              'MapOutput Message Operator Parameter RegisterFileDescriptor '
              'RegisterMessage Rule RuleCollection Tensor _MAPOUTPUT _OPERATOR '
              '_PARAMETER _RULE _RULECOLLECTION _TENSOR _descriptor _message '
              '_reflection _sym_db _symbol_database containing_type cpp_type '
              'default_value descriptor descriptor_pb2 encode enum_type '
              'enum_types extension_ranges extension_scope extensions fields '
              'fields_by_name file filename full_name google has_default_value '
              'index is_extendable is_extension label message message_type '
              'message_types_by_name name nested_types number oneofs options '
              'package protobuf reflection serialized_end serialized_pb '
              'serialized_start symbol_database syntax type version_info\n')

Fragment(uuid='NORMALIZED-004059',
         path='/verify/rules_pb2.py',
         lineno=2,
         depth=0,
         type='documentation',
         name='',
         text='# source: rules.proto')

Fragment(uuid='NORMALIZED-004060',
         path='/verify/rules_pb2.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004061',
         path='/verify/rules_pb2.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004062',
         path='/verify/rules_pb2.py',
         lineno=6,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004063',
         path='/verify/rules_pb2.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004064',
         path='/verify/rules_pb2.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004065',
         path='/verify/rules_pb2.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004066',
         path='/verify/rules_pb2.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004067',
         path='/verify/rules_pb2.py',
         lineno=9,
         depth=0,
         type='module',
         name='',
         text='buf import symbol_database as _symbol_database\n'
              'from google.protobuf import descriptor_pb2\n'
              '# @@protoc_insertion_point(imports)\n'
              '\n'
              '_sym_db = _symbol_database.Default()\n'
              '\n'
              '\n'
              '\n'
              '\n'
              'DESCRIPTOR = _descriptor.FileDescriptor(\n'
              "  name='rules.proto',\n"
              "  package='GraphSubst',\n"
              "  syntax='proto2',\n"
              '  '
              'serialized_pb=_b(\'\\n\\x0brules.proto\\x12\\nGraphSubst\\"\\\'\\n\\tParame')

Fragment(uuid='NORMALIZED-004068',
         path='/verify/rules_pb2.py',
         lineno=9,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004069',
         path='/verify/rules_pb2.py',
         lineno=9,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004070',
         path='/verify/rules_pb2.py',
         lineno=10,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004071',
         path='/verify/rules_pb2.py',
         lineno=10,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004072',
         path='/verify/rules_pb2.py',
         lineno=11,
         depth=0,
         type='documentation',
         name='',
         text='# @@protoc_insertion_point(imports)')

Fragment(uuid='NORMALIZED-004073',
         path='/verify/rules_pb2.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='ter\\x12\\x0b\\n\\x03key\\x18\\x01 '
              '\\x02(\\x05\\x12\\r\\n\\x05value\\x18\\x02 '
              '\\x02(\\x05\\"$\\n\\x06Tensor\\x12\\x0c\\n\\x04opId\\x18\\x01 '
              '\\x02(\\x05\\x12\\x0c\\n\\x04tsId\\x18\\x02 '
              '\\x02(\\x05\\"`\\n\\x08O')

Fragment(uuid='NORMALIZED-004074',
         path='/verify/rules_pb2.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='perator\\x12\\x0c\\n\\x04type\\x18\\x01 '
              '\\x02(\\x05\\x12!\\n\\x05input\\x18\\x02 '
              '\\x03(\\x0b\\x32\\x12.GraphSubst.Tensor\\x12#\\n\\x04para\\x18\\x03 '
              '\\x03(\\x0b\\x32\\x15.GraphSubst.Parameter\\"O\\n\\')

Fragment(uuid='NORMALIZED-004075',
         path='/verify/rules_pb2.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='tMapOutput\\x12\\x0f\\n\\x07srcOpId\\x18\\x01 '
              '\\x02(\\x05\\x12\\x0f\\n\\x07\\x64stOpId\\x18\\x02 '
              '\\x02(\\x05\\x12\\x0f\\n\\x07srcTsId\\x18\\x03 '
              '\\x02(\\x05\\x12\\x0f\\n\\x07\\x64stTsId\\x18\\x04 \\x02(\\x')

Fragment(uuid='NORMALIZED-004076',
         path='/verify/rules_pb2.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='05\\"}\\n\\x04Rule\\x12#\\n\\x05srcOp\\x18\\x01 '
              '\\x03(\\x0b\\x32\\x14.GraphSubst.Operator\\x12#\\n\\x05\\x64stOp\\x18\\x02 '
              '\\x03(\\x0b\\x32\\x14.GraphSubst.Operator\\x12+\\n\\x0cmappedOutput\\x18\\x')

Fragment(uuid='NORMALIZED-004077',
         path='/verify/rules_pb2.py',
         lineno=22,
         depth=0,
         type='module',
         name='',
         text='03 '
              '\\x03(\\x0b\\x32\\x15.GraphSubst.MapOutput\\"0\\n\\x0eRuleCollection\\x12\\x1e\\n\\x04rule\\x18\\x01 '
              "\\x03(\\x0b\\x32\\x10.GraphSubst.Rule')\n"
              ')\n'
              '\n'
              '\n'
              '\n'
              '\n'
              '_PARAMETER = _descriptor.Descriptor(\n'
              "  name='Parameter',\n"
              "  full_name='GraphSubst.Parameter',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              '      name=')

Fragment(uuid='NORMALIZED-004078',
         path='/verify/rules_pb2.py',
         lineno=22,
         depth=8,
         type='documentation',
         name='',
         text='\\n\\x0brules.proto\\x12\\nGraphSubst\\"\\\'\\n\\tParameter\\x12\\x0b\\n\\x03key\\x18\\x01 '
              '\\x02(\\x05\\x12\\r\\n\\x05value\\x18\\x02 '
              '\\x02(\\x05\\"$\\n\\x06Tensor\\x12\\x0c\\n\\x04opId\\x18\\x01 '
              '\\x02(\\x05\\x12\\x0c\\n\\x04tsId\\x18\\x02 \\x02(\\x05\\"`\\n\\')

Fragment(uuid='NORMALIZED-004079',
         path='/verify/rules_pb2.py',
         lineno=22,
         depth=8,
         type='documentation',
         name='',
         text='x08Operator\\x12\\x0c\\n\\x04type\\x18\\x01 '
              '\\x02(\\x05\\x12!\\n\\x05input\\x18\\x02 '
              '\\x03(\\x0b\\x32\\x12.GraphSubst.Tensor\\x12#\\n\\x04para\\x18\\x03 '
              '\\x03(\\x0b\\x32\\x15.GraphSubst.Parameter\\"O\\n\\tMapOutput\\x12\\x0f\\n\\x07srcOpId\\x18\\x0')

Fragment(uuid='NORMALIZED-004080',
         path='/verify/rules_pb2.py',
         lineno=22,
         depth=8,
         type='documentation',
         name='',
         text='1 \\x02(\\x05\\x12\\x0f\\n\\x07\\x64stOpId\\x18\\x02 '
              '\\x02(\\x05\\x12\\x0f\\n\\x07srcTsId\\x18\\x03 '
              '\\x02(\\x05\\x12\\x0f\\n\\x07\\x64stTsId\\x18\\x04 '
              '\\x02(\\x05\\"}\\n\\x04Rule\\x12#\\n\\x05srcOp\\x18\\x01 '
              '\\x03(\\x0b\\x32\\x14.GraphSubst.Operator\\x12')

Fragment(uuid='NORMALIZED-004081',
         path='/verify/rules_pb2.py',
         lineno=22,
         depth=8,
         type='documentation',
         name='',
         text='#\\n\\x05\\x64stOp\\x18\\x02 '
              '\\x03(\\x0b\\x32\\x14.GraphSubst.Operator\\x12+\\n\\x0cmappedOutput\\x18\\x03 '
              '\\x03(\\x0b\\x32\\x15.GraphSubst.MapOutput\\"0\\n\\x0eRuleCollection\\x12\\x1e\\n\\x04rule\\x18\\x01 '
              '\\x03(\\x0b\\x32\\x10.GraphSubst.Rule')

Fragment(uuid='NORMALIZED-004082',
         path='/verify/rules_pb2.py',
         lineno=30,
         depth=6,
         type='documentation',
         name='',
         text='GraphSubst.Parameter')

Fragment(uuid='NORMALIZED-004083',
         path='/verify/rules_pb2.py',
         lineno=36,
         depth=0,
         type='module',
         name='',
         text="'key', full_name='GraphSubst.Parameter.key', index=0,\n"
              '      number=1, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='value', full_name")

Fragment(uuid='NORMALIZED-004084',
         path='/verify/rules_pb2.py',
         lineno=36,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.Parameter.key')

Fragment(uuid='NORMALIZED-004085',
         path='/verify/rules_pb2.py',
         lineno=43,
         depth=0,
         type='module',
         name='',
         text="='GraphSubst.Parameter.value', index=1,\n"
              '      number=2, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=No')

Fragment(uuid='NORMALIZED-004086',
         path='/verify/rules_pb2.py',
         lineno=43,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.Parameter.value')

Fragment(uuid='NORMALIZED-004087',
         path='/verify/rules_pb2.py',
         lineno=55,
         depth=0,
         type='module',
         name='',
         text='ne,\n'
              '  is_extendable=False,\n'
              "  syntax='proto2',\n"
              '  extension_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=27,\n'
              '  serialized_end=66,\n'
              ')\n'
              '\n'
              '\n'
              '_TENSOR = _descriptor.Descriptor(\n'
              "  name='Tensor',\n"
              "  full_name='GraphSubst.Tensor',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='opId', fu")

Fragment(uuid='NORMALIZED-004088',
         path='/verify/rules_pb2.py',
         lineno=74,
         depth=0,
         type='module',
         name='',
         text="ll_name='GraphSubst.Tensor.opId', index=0,\n"
              '      number=1, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='tsId', full_name='GraphSubst")

Fragment(uuid='NORMALIZED-004089',
         path='/verify/rules_pb2.py',
         lineno=74,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.Tensor.opId')

Fragment(uuid='NORMALIZED-004090',
         path='/verify/rules_pb2.py',
         lineno=81,
         depth=0,
         type='module',
         name='',
         text=".Tensor.tsId', index=1,\n"
              '      number=2, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=None,\n'
              '  is_extenda')

Fragment(uuid='NORMALIZED-004091',
         path='/verify/rules_pb2.py',
         lineno=81,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.Tensor.tsId')

Fragment(uuid='NORMALIZED-004092',
         path='/verify/rules_pb2.py',
         lineno=94,
         depth=0,
         type='module',
         name='',
         text='ble=False,\n'
              "  syntax='proto2',\n"
              '  extension_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=68,\n'
              '  serialized_end=104,\n'
              ')\n'
              '\n'
              '\n'
              '_OPERATOR = _descriptor.Descriptor(\n'
              "  name='Operator',\n"
              "  full_name='GraphSubst.Operator',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='type', full_name=")

Fragment(uuid='NORMALIZED-004093',
         path='/verify/rules_pb2.py',
         lineno=112,
         depth=0,
         type='module',
         name='',
         text="'GraphSubst.Operator.type', index=0,\n"
              '      number=1, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='input', full_name='GraphSubst.Opera")

Fragment(uuid='NORMALIZED-004094',
         path='/verify/rules_pb2.py',
         lineno=112,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.Operator.type')

Fragment(uuid='NORMALIZED-004095',
         path='/verify/rules_pb2.py',
         lineno=119,
         depth=0,
         type='module',
         name='',
         text="tor.input', index=1,\n"
              '      number=2, type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='para', full_name='GraphSubst.Operator.para', in")

Fragment(uuid='NORMALIZED-004096',
         path='/verify/rules_pb2.py',
         lineno=119,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.Operator.input')

Fragment(uuid='NORMALIZED-004097',
         path='/verify/rules_pb2.py',
         lineno=126,
         depth=0,
         type='module',
         name='',
         text='dex=2,\n'
              '      number=3, type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=None,\n'
              '  is_extendable=False,\n'
              '  s')

Fragment(uuid='NORMALIZED-004098',
         path='/verify/rules_pb2.py',
         lineno=126,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.Operator.para')

Fragment(uuid='NORMALIZED-004099',
         path='/verify/rules_pb2.py',
         lineno=140,
         depth=0,
         type='module',
         name='',
         text="yntax='proto2',\n"
              '  extension_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=106,\n'
              '  serialized_end=202,\n'
              ')\n'
              '\n'
              '\n'
              '_MAPOUTPUT = _descriptor.Descriptor(\n'
              "  name='MapOutput',\n"
              "  full_name='GraphSubst.MapOutput',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='srcOpId', full_name='GraphS")

Fragment(uuid='NORMALIZED-004100',
         path='/verify/rules_pb2.py',
         lineno=151,
         depth=6,
         type='documentation',
         name='',
         text='GraphSubst.MapOutput')

Fragment(uuid='NORMALIZED-004101',
         path='/verify/rules_pb2.py',
         lineno=157,
         depth=0,
         type='module',
         name='',
         text="ubst.MapOutput.srcOpId', index=0,\n"
              '      number=1, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='dstOpId', full_name='GraphSubst.MapOut")

Fragment(uuid='NORMALIZED-004102',
         path='/verify/rules_pb2.py',
         lineno=157,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.MapOutput.srcOpId')

Fragment(uuid='NORMALIZED-004103',
         path='/verify/rules_pb2.py',
         lineno=164,
         depth=0,
         type='module',
         name='',
         text="put.dstOpId', index=1,\n"
              '      number=2, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='srcTsId', full_name='GraphSubst.MapOutput.srcTsI")

Fragment(uuid='NORMALIZED-004104',
         path='/verify/rules_pb2.py',
         lineno=164,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.MapOutput.dstOpId')

Fragment(uuid='NORMALIZED-004105',
         path='/verify/rules_pb2.py',
         lineno=171,
         depth=0,
         type='module',
         name='',
         text="d', index=2,\n"
              '      number=3, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='dstTsId', full_name='GraphSubst.MapOutput.dstTsId', "
              'index=')

Fragment(uuid='NORMALIZED-004106',
         path='/verify/rules_pb2.py',
         lineno=171,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.MapOutput.srcTsId')

Fragment(uuid='NORMALIZED-004107',
         path='/verify/rules_pb2.py',
         lineno=178,
         depth=0,
         type='module',
         name='',
         text='3,\n'
              '      number=4, type=5, cpp_type=1, label=2,\n'
              '      has_default_value=False, default_value=0,\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=None,\n'
              '  is_extendable=False,\n'
              "  syntax='")

Fragment(uuid='NORMALIZED-004108',
         path='/verify/rules_pb2.py',
         lineno=178,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.MapOutput.dstTsId')

Fragment(uuid='NORMALIZED-004109',
         path='/verify/rules_pb2.py',
         lineno=192,
         depth=0,
         type='module',
         name='',
         text="proto2',\n"
              '  extension_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=204,\n'
              '  serialized_end=283,\n'
              ')\n'
              '\n'
              '\n'
              '_RULE = _descriptor.Descriptor(\n'
              "  name='Rule',\n"
              "  full_name='GraphSubst.Rule',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='srcOp', full_name='GraphSubst.Rule.srcOp', index=")

Fragment(uuid='NORMALIZED-004110',
         path='/verify/rules_pb2.py',
         lineno=209,
         depth=0,
         type='module',
         name='',
         text='0,\n'
              '      number=1, type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='dstOp', full_name='GraphSubst.Rule.dstOp', "
              'index=1,\n'
              '      number=')

Fragment(uuid='NORMALIZED-004111',
         path='/verify/rules_pb2.py',
         lineno=209,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.Rule.srcOp')

Fragment(uuid='NORMALIZED-004112',
         path='/verify/rules_pb2.py',
         lineno=216,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.Rule.dstOp')

Fragment(uuid='NORMALIZED-004113',
         path='/verify/rules_pb2.py',
         lineno=217,
         depth=0,
         type='module',
         name='',
         text='2, type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='mappedOutput', "
              "full_name='GraphSubst.Rule.mappedOutput', index=2,\n"
              '      number=3,')

Fragment(uuid='NORMALIZED-004114',
         path='/verify/rules_pb2.py',
         lineno=223,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.Rule.mappedOutput')

Fragment(uuid='NORMALIZED-004115',
         path='/verify/rules_pb2.py',
         lineno=224,
         depth=0,
         type='module',
         name='',
         text=' type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=None,\n'
              '  is_extendable=False,\n'
              "  syntax='proto2',\n"
              '  exte')

Fragment(uuid='NORMALIZED-004116',
         path='/verify/rules_pb2.py',
         lineno=238,
         depth=0,
         type='module',
         name='',
         text='nsion_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=285,\n'
              '  serialized_end=410,\n'
              ')\n'
              '\n'
              '\n'
              '_RULECOLLECTION = _descriptor.Descriptor(\n'
              "  name='RuleCollection',\n"
              "  full_name='GraphSubst.RuleCollection',\n"
              '  filename=None,\n'
              '  file=DESCRIPTOR,\n'
              '  containing_type=None,\n'
              '  fields=[\n'
              '    _descriptor.FieldDescriptor(\n'
              "      name='rule', full_name='GraphSubst.RuleCo")

Fragment(uuid='NORMALIZED-004117',
         path='/verify/rules_pb2.py',
         lineno=248,
         depth=6,
         type='documentation',
         name='',
         text='GraphSubst.RuleCollection')

Fragment(uuid='NORMALIZED-004118',
         path='/verify/rules_pb2.py',
         lineno=254,
         depth=0,
         type='module',
         name='',
         text="llection.rule', index=0,\n"
              '      number=1, type=11, cpp_type=10, label=3,\n'
              '      has_default_value=False, default_value=[],\n'
              '      message_type=None, enum_type=None, containing_type=None,\n'
              '      is_extension=False, extension_scope=None,\n'
              '      options=None),\n'
              '  ],\n'
              '  extensions=[\n'
              '  ],\n'
              '  nested_types=[],\n'
              '  enum_types=[\n'
              '  ],\n'
              '  options=None,\n'
              '  is_ext')

Fragment(uuid='NORMALIZED-004119',
         path='/verify/rules_pb2.py',
         lineno=254,
         depth=10,
         type='documentation',
         name='',
         text='GraphSubst.RuleCollection.rule')

Fragment(uuid='NORMALIZED-004120',
         path='/verify/rules_pb2.py',
         lineno=267,
         depth=0,
         type='module',
         name='',
         text='endable=False,\n'
              "  syntax='proto2',\n"
              '  extension_ranges=[],\n'
              '  oneofs=[\n'
              '  ],\n'
              '  serialized_start=412,\n'
              '  serialized_end=460,\n'
              ')\n'
              '\n'
              "_OPERATOR.fields_by_name['input'].message_type = _TENSOR\n"
              "_OPERATOR.fields_by_name['para'].message_type = _PARAMETER\n"
              "_RULE.fields_by_name['srcOp'].message_type = _OPERATOR\n"
              "_RULE.fields_by_name['dstOp'].message_type = _OP")

Fragment(uuid='NORMALIZED-004121',
         path='/verify/rules_pb2.py',
         lineno=279,
         depth=0,
         type='module',
         name='',
         text='ERATOR\n'
              "_RULE.fields_by_name['mappedOutput'].message_type = _MAPOUTPUT\n"
              "_RULECOLLECTION.fields_by_name['rule'].message_type = _RULE\n"
              "DESCRIPTOR.message_types_by_name['Parameter'] = _PARAMETER\n"
              "DESCRIPTOR.message_types_by_name['Tensor'] = _TENSOR\n"
              "DESCRIPTOR.message_types_by_name['Operator'] = _OPERATOR\n"
              "DESCRIPTOR.message_types_by_name['MapOutpu")

Fragment(uuid='NORMALIZED-004122',
         path='/verify/rules_pb2.py',
         lineno=285,
         depth=0,
         type='module',
         name='',
         text="t'] = _MAPOUTPUT\n"
              "DESCRIPTOR.message_types_by_name['Rule'] = _RULE\n"
              "DESCRIPTOR.message_types_by_name['RuleCollection'] = "
              '_RULECOLLECTION\n'
              '_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n'
              '\n'
              'Parameter = '
              "_reflection.GeneratedProtocolMessageType('Parameter', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _PARAMETER,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # @@protoc_ins')

Fragment(uuid='NORMALIZED-004123',
         path='/verify/rules_pb2.py',
         lineno=293,
         depth=0,
         type='module',
         name='',
         text='ertion_point(class_scope:GraphSubst.Parameter)\n'
              '  ))\n'
              '_sym_db.RegisterMessage(Parameter)\n'
              '\n'
              "Tensor = _reflection.GeneratedProtocolMessageType('Tensor', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _TENSOR,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # @@protoc_insertion_point(class_scope:GraphSubst.Tensor)\n'
              '  ))\n'
              '_sym_db.RegisterMessage(Tensor)\n'
              '\n'
              'Operator = _refle')

Fragment(uuid='NORMALIZED-004124',
         path='/verify/rules_pb2.py',
         lineno=293,
         depth=6,
         type='documentation',
         name='',
         text='# @@protoc_insertion_point(class_scope:GraphSubst.Parameter)')

Fragment(uuid='NORMALIZED-004125',
         path='/verify/rules_pb2.py',
         lineno=300,
         depth=6,
         type='documentation',
         name='',
         text='# @@protoc_insertion_point(class_scope:GraphSubst.Tensor)')

Fragment(uuid='NORMALIZED-004126',
         path='/verify/rules_pb2.py',
         lineno=304,
         depth=0,
         type='module',
         name='',
         text="ction.GeneratedProtocolMessageType('Operator', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _OPERATOR,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # @@protoc_insertion_point(class_scope:GraphSubst.Operator)\n'
              '  ))\n'
              '_sym_db.RegisterMessage(Operator)\n'
              '\n'
              'MapOutput = '
              "_reflection.GeneratedProtocolMessageType('MapOutput', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _MAP')

Fragment(uuid='NORMALIZED-004127',
         path='/verify/rules_pb2.py',
         lineno=307,
         depth=6,
         type='documentation',
         name='',
         text='# @@protoc_insertion_point(class_scope:GraphSubst.Operator)')

Fragment(uuid='NORMALIZED-004128',
         path='/verify/rules_pb2.py',
         lineno=312,
         depth=0,
         type='module',
         name='',
         text='OUTPUT,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # @@protoc_insertion_point(class_scope:GraphSubst.MapOutput)\n'
              '  ))\n'
              '_sym_db.RegisterMessage(MapOutput)\n'
              '\n'
              "Rule = _reflection.GeneratedProtocolMessageType('Rule', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _RULE,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # @@protoc_insertion_point(class_scope:GraphSubst.Rule)\n'
              '  ))\n'
              '_sym_db')

Fragment(uuid='NORMALIZED-004129',
         path='/verify/rules_pb2.py',
         lineno=314,
         depth=6,
         type='documentation',
         name='',
         text='# @@protoc_insertion_point(class_scope:GraphSubst.MapOutput)')

Fragment(uuid='NORMALIZED-004130',
         path='/verify/rules_pb2.py',
         lineno=321,
         depth=6,
         type='documentation',
         name='',
         text='# @@protoc_insertion_point(class_scope:GraphSubst.Rule)')

Fragment(uuid='NORMALIZED-004131',
         path='/verify/rules_pb2.py',
         lineno=323,
         depth=0,
         type='module',
         name='',
         text='.RegisterMessage(Rule)\n'
              '\n'
              'RuleCollection = '
              "_reflection.GeneratedProtocolMessageType('RuleCollection', "
              '(_message.Message,), dict(\n'
              '  DESCRIPTOR = _RULECOLLECTION,\n'
              "  __module__ = 'rules_pb2'\n"
              '  # '
              '@@protoc_insertion_point(class_scope:GraphSubst.RuleCollection)\n'
              '  ))\n'
              '_sym_db.RegisterMessage(RuleCollection)\n'
              '\n'
              '\n'
              '# @@protoc_insertion_point(module_scope)\n')

Fragment(uuid='NORMALIZED-004132',
         path='/verify/rules_pb2.py',
         lineno=328,
         depth=6,
         type='documentation',
         name='',
         text='# '
              '@@protoc_insertion_point(class_scope:GraphSubst.RuleCollection)')

Fragment(uuid='NORMALIZED-004133',
         path='/verify/rules_pb2.py',
         lineno=333,
         depth=0,
         type='documentation',
         name='',
         text='# @@protoc_insertion_point(module_scope)')

Fragment(uuid='NORMALIZED-004134',
         path='/verify/validate_axioms.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='from itertools import chain, product\n'
              'import datetime\n'
              'from multiprocessing.pool import Pool, cpu_count\n'
              '\n'
              'import z3\n'
              '\n'
              'import verify\n'
              'from verify import P, T\n'
              'from verify import (\n'
              '    AC_MODE_NONE,\n'
              '    AC_MODE_SIGMOID,\n'
              '    AC_MODE_RELU,\n'
              '    AC_MODE_TANH,\n'
              '    PD_MODE_SAME,\n'
              '    PD_MODE_VALID\n'
              ')\n'
              '\n'
              '\n'
              'now = datetime.datetime.now\n')

Fragment(uuid='NORMALIZED-004135',
         path='/verify/validate_axioms.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004136',
         path='/verify/validate_axioms.py',
         lineno=1,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004137',
         path='/verify/validate_axioms.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /verify/validate_axioms.py\n'
              '  Functions: _shape body_to_function check_axiom concat_0 '
              'const_iconv_0 const_imm_0 const_one_0 const_pool_0 conv2d_0 '
              'enlarge_0 eq ewadd_0 ewmul_0 get_id matmul_0 minimize_core '
              'minimize_core_aux2 pool2d_avg_0 pool2d_max_0 print_function '
              'relu_0 require scalar_mul_0 split_0 split_1 transpose_0 z3max\n'
              '  Classes: BadShapeError MagicConst Tensor\n'
              '  Methods: __getitem__ __init__ __setitem__ _ones _tensor '
              '_zeros convert function tensor to_tensor zeros\n'
              '  Variables and usages: A AC_MODE_NONE AC_MODE_RELU '
              'AC_MODE_SIGMOID AC_MODE_TANH And B Bool BoolVal C Const '
              'Exception Function I If Implies Not P PD_MODE_SAME '
              'PD_MODE_VALID Pool Real RealSort RealVal S Solver T '
              'Z3_get_ast_id _relu _to_tensor acti append apply_async as_ast '
              'as_long axioms body callback chain check claim classmethod '
              'close core cpu_count ctx_ref data datetime decl enumerate flags '
              'format func get_var_index globals group group_idx is_app '
              'is_forall is_int_value is_sat is_var itertools join lemmas '
              'middle model multiprocessing n_proved n_skipped name new_core '
              'num_args num_vars object pool posH posW prefix print product '
              'range results reversed shape sort space spaces splits to_assume '
              'totalPadH totalPadW total_combinations tuple type unknown unsat '
              'unsat_core value values var_name var_sort variables verify\n')

Fragment(uuid='NORMALIZED-004138',
         path='/verify/validate_axioms.py',
         lineno=2,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004139',
         path='/verify/validate_axioms.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004140',
         path='/verify/validate_axioms.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004141',
         path='/verify/validate_axioms.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004142',
         path='/verify/validate_axioms.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004143',
         path='/verify/validate_axioms.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004144',
         path='/verify/validate_axioms.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004145',
         path='/verify/validate_axioms.py',
         lineno=9,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004146',
         path='/verify/validate_axioms.py',
         lineno=9,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004147',
         path='/verify/validate_axioms.py',
         lineno=20,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def get_id(x):\n'
              '    return z3.Z3_get_ast_id(x.ctx_ref(), x.as_ast())\n')

Fragment(uuid='NORMALIZED-004148',
         path='/verify/validate_axioms.py',
         lineno=22,
         depth=1,
         type='function',
         name='get_id',
         text='def get_id(x):\n'
              '    return z3.Z3_get_ast_id(x.ctx_ref(), x.as_ast())')

Fragment(uuid='NORMALIZED-004149',
         path='/verify/validate_axioms.py',
         lineno=24,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def minimize_core_aux2(s, core):\n'
              '    mus = []\n'
              '    ids = set()\n'
              '    while core != []:\n'
              '        c = core[0]\n'
              '        new_core = mus + core[1:]\n'
              '        is_sat = s.check(new_core)\n'
              '        if is_sat != z3.unsat:\n'
              '            mus = mus + [c]\n'
              '            ids.add(get_id(c))\n'
              '            core = core[1:]\n'
              '        else:\n'
              '            core = s.unsat_core()\n'
              '            core = [c for c in core if get_id(c) not in ids]\n'
              '    return mus\n')

Fragment(uuid='NORMALIZED-004150',
         path='/verify/validate_axioms.py',
         lineno=25,
         depth=1,
         type='function',
         name='minimize_core_aux2',
         text='def minimize_core_aux2(s, core):\n'
              '    mus = []\n'
              '    ids = set()\n'
              '    while core != []:\n'
              '        c = core[0]\n'
              '        new_core = mus + core[1:]\n'
              '        is_sat = s.check(new_core)\n'
              '        if is_sat != z3.unsat:\n'
              '            mus = mus + [c]\n'
              '            ids.add(get_id(c))\n'
              '            core = core[1:]\n'
              '        else:\n'
              '            core = s.unsat_core()\n'
              '            core = [c for c in core if get_id(c) not in ids]\n'
              '    return mus')

Fragment(uuid='NORMALIZED-004151',
         path='/verify/validate_axioms.py',
         lineno=40,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def minimize_core(s):\n'
              '    core = list(s.unsat_core())\n'
              '    core = minimize_core_aux2(s, core)\n'
              '    return core\n')

Fragment(uuid='NORMALIZED-004152',
         path='/verify/validate_axioms.py',
         lineno=41,
         depth=1,
         type='function',
         name='minimize_core',
         text='def minimize_core(s):\n'
              '    core = list(s.unsat_core())\n'
              '    core = minimize_core_aux2(s, core)\n'
              '    return core')

Fragment(uuid='NORMALIZED-004153',
         path='/verify/validate_axioms.py',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def _shape(T):\n'
              '    s = ()\n'
              '    while type(T) is list:\n'
              '        s = s + (len(T),)\n'
              '        T = T[0]\n'
              '    return tuple(s)\n')

Fragment(uuid='NORMALIZED-004154',
         path='/verify/validate_axioms.py',
         lineno=47,
         depth=1,
         type='function',
         name='_shape',
         text='def _shape(T):\n'
              '    s = ()\n'
              '    while type(T) is list:\n'
              '        s = s + (len(T),)\n'
              '        T = T[0]\n'
              '    return tuple(s)')

Fragment(uuid='NORMALIZED-004155',
         path='/verify/validate_axioms.py',
         lineno=53,
         depth=0,
         type='module',
         name='',
         text='\n\nclass Tensor(object):\n')

Fragment(uuid='NORMALIZED-004156',
         path='/verify/validate_axioms.py',
         lineno=55,
         depth=1,
         type='class',
         name='Tensor',
         text='class Tensor(object):\n')

Fragment(uuid='NORMALIZED-004157',
         path='/verify/validate_axioms.py',
         lineno=56,
         depth=0,
         type='module',
         name='',
         text='    def __init__(self, data, splits=None):\n'
              '        self.data = data\n'
              '        self.shape = _shape(data)\n'
              '        assert all(x > 0 for x in self.shape)\n'
              '        self.dim = len(self.shape)\n'
              '        if splits is None:\n'
              '            self.splits = ((),) * self.dim\n'
              '        else:\n'
              '            self.splits = splits\n')

Fragment(uuid='NORMALIZED-004158',
         path='/verify/validate_axioms.py',
         lineno=56,
         depth=1,
         type='class',
         name='Tensor',
         text='    def __init__(self, data, splits=None):\n'
              '        self.data = data\n'
              '        self.shape = _shape(data)\n'
              '        assert all(x > 0 for x in self.shape)\n'
              '        self.dim = len(self.shape)\n'
              '        if splits is None:\n'
              '            self.splits = ((),) * self.dim\n'
              '        else:\n'
              '            self.splits = splits\n')

Fragment(uuid='NORMALIZED-004159',
         path='/verify/validate_axioms.py',
         lineno=56,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, data, splits=None):\n'
              '        self.data = data\n'
              '        self.shape = _shape(data)\n'
              '        assert all(x > 0 for x in self.shape)\n'
              '        self.dim = len(self.shape)\n'
              '        if splits is None:\n'
              '            self.splits = ((),) * self.dim\n'
              '        else:\n'
              '            self.splits = splits')

Fragment(uuid='NORMALIZED-004160',
         path='/verify/validate_axioms.py',
         lineno=65,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __getitem__(self, tup):\n'
              '        assert len(tup) == self.dim\n'
              '        x = self.data\n'
              '        while len(tup) > 0:\n'
              '            x = x[tup[0]]\n'
              '            tup = tup[1:]\n'
              '        return x\n')

Fragment(uuid='NORMALIZED-004161',
         path='/verify/validate_axioms.py',
         lineno=65,
         depth=1,
         type='class',
         name='Tensor',
         text='\n'
              '    def __getitem__(self, tup):\n'
              '        assert len(tup) == self.dim\n'
              '        x = self.data\n'
              '        while len(tup) > 0:\n'
              '            x = x[tup[0]]\n'
              '            tup = tup[1:]\n'
              '        return x\n')

Fragment(uuid='NORMALIZED-004162',
         path='/verify/validate_axioms.py',
         lineno=66,
         depth=3,
         type='function',
         name='__getitem__',
         text='def __getitem__(self, tup):\n'
              '        assert len(tup) == self.dim\n'
              '        x = self.data\n'
              '        while len(tup) > 0:\n'
              '            x = x[tup[0]]\n'
              '            tup = tup[1:]\n'
              '        return x')

Fragment(uuid='NORMALIZED-004163',
         path='/verify/validate_axioms.py',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def __setitem__(self, tup, value):\n'
              '        assert len(tup) == self.dim\n'
              '        if len(tup) == 0:\n'
              '            self.data = value\n'
              '        else:\n'
              '            x = self.data\n'
              '            while len(tup) > 1:\n'
              '                x = x[tup[0]]\n'
              '                tup = tup[1:]\n'
              '            x[tup[0]] = value\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='NORMALIZED-004164',
         path='/verify/validate_axioms.py',
         lineno=73,
         depth=1,
         type='class',
         name='Tensor',
         text='\n'
              '    def __setitem__(self, tup, value):\n'
              '        assert len(tup) == self.dim\n'
              '        if len(tup) == 0:\n'
              '            self.data = value\n'
              '        else:\n'
              '            x = self.data\n'
              '            while len(tup) > 1:\n'
              '                x = x[tup[0]]\n'
              '                tup = tup[1:]\n'
              '            x[tup[0]] = value\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='NORMALIZED-004165',
         path='/verify/validate_axioms.py',
         lineno=74,
         depth=3,
         type='function',
         name='__setitem__',
         text='def __setitem__(self, tup, value):\n'
              '        assert len(tup) == self.dim\n'
              '        if len(tup) == 0:\n'
              '            self.data = value\n'
              '        else:\n'
              '            x = self.data\n'
              '            while len(tup) > 1:\n'
              '                x = x[tup[0]]\n'
              '                tup = tup[1:]\n'
              '            x[tup[0]] = value')

Fragment(uuid='NORMALIZED-004166',
         path='/verify/validate_axioms.py',
         lineno=86,
         depth=0,
         type='module',
         name='',
         text='    def zeros(cls, s):\n        assert all(x > 0 for x in s)\n')

Fragment(uuid='NORMALIZED-004167',
         path='/verify/validate_axioms.py',
         lineno=86,
         depth=1,
         type='class',
         name='Tensor',
         text='    def zeros(cls, s):\n        assert all(x > 0 for x in s)\n')

Fragment(uuid='NORMALIZED-004168',
         path='/verify/validate_axioms.py',
         lineno=86,
         depth=4,
         type='function',
         name='zeros',
         text='def zeros(cls, s):\n'
              '        assert all(x > 0 for x in s)\n'
              '        def _zeros(s):\n'
              '            return 0 if s == () else [_zeros(s[1:]) for i in '
              'range(s[0])]\n'
              '        return cls(_zeros(s))')

Fragment(uuid='NORMALIZED-004169',
         path='/verify/validate_axioms.py',
         lineno=88,
         depth=0,
         type='module',
         name='',
         text='        def _zeros(s):\n'
              '            return 0 if s == () else [_zeros(s[1:]) for i in '
              'range(s[0])]\n'
              '        return cls(_zeros(s))\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='NORMALIZED-004170',
         path='/verify/validate_axioms.py',
         lineno=88,
         depth=1,
         type='class',
         name='Tensor',
         text='        def _zeros(s):\n'
              '            return 0 if s == () else [_zeros(s[1:]) for i in '
              'range(s[0])]\n'
              '        return cls(_zeros(s))\n'
              '\n'
              '    @classmethod\n')

Fragment(uuid='NORMALIZED-004171',
         path='/verify/validate_axioms.py',
         lineno=88,
         depth=6,
         type='function',
         name='_zeros',
         text='def _zeros(s):\n'
              '            return 0 if s == () else [_zeros(s[1:]) for i in '
              'range(s[0])]')

Fragment(uuid='NORMALIZED-004172',
         path='/verify/validate_axioms.py',
         lineno=93,
         depth=0,
         type='module',
         name='',
         text="    def tensor(cls, s, prefix='x'):\n"
              '        assert all(x > 0 for x in s)\n')

Fragment(uuid='NORMALIZED-004173',
         path='/verify/validate_axioms.py',
         lineno=93,
         depth=1,
         type='class',
         name='Tensor',
         text="    def tensor(cls, s, prefix='x'):\n"
              '        assert all(x > 0 for x in s)\n')

Fragment(uuid='NORMALIZED-004174',
         path='/verify/validate_axioms.py',
         lineno=93,
         depth=4,
         type='function',
         name='tensor',
         text="def tensor(cls, s, prefix='x'):\n"
              '        assert all(x > 0 for x in s)\n'
              '        def _tensor(s, prefix):\n'
              '            return z3.Real(prefix) if s == () else '
              "[_tensor(s[1:], '{}_{}'.format(prefix,i)) for i in "
              'range(s[0])]\n'
              '        return cls(_tensor(s,prefix))')

Fragment(uuid='NORMALIZED-004175',
         path='/verify/validate_axioms.py',
         lineno=95,
         depth=0,
         type='module',
         name='',
         text='        def _tensor(s, prefix):\n'
              '            return z3.Real(prefix) if s == () else '
              "[_tensor(s[1:], '{}_{}'.format(prefix,i)) for i in "
              'range(s[0])]\n'
              '        return cls(_tensor(s,prefix))\n')

Fragment(uuid='NORMALIZED-004176',
         path='/verify/validate_axioms.py',
         lineno=95,
         depth=1,
         type='class',
         name='Tensor',
         text='        def _tensor(s, prefix):\n'
              '            return z3.Real(prefix) if s == () else '
              "[_tensor(s[1:], '{}_{}'.format(prefix,i)) for i in "
              'range(s[0])]\n'
              '        return cls(_tensor(s,prefix))')

Fragment(uuid='NORMALIZED-004177',
         path='/verify/validate_axioms.py',
         lineno=95,
         depth=6,
         type='function',
         name='_tensor',
         text='def _tensor(s, prefix):\n'
              '            return z3.Real(prefix) if s == () else '
              "[_tensor(s[1:], '{}_{}'.format(prefix,i)) for i in range(s[0])]")

Fragment(uuid='NORMALIZED-004178',
         path='/verify/validate_axioms.py',
         lineno=98,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'class MagicConst(object):\n'
              '    def __init__(self, _to_tensor):\n'
              '        self._to_tensor = _to_tensor\n'
              '\n'
              '    def to_tensor(self, s):\n'
              '        return self._to_tensor(s)\n')

Fragment(uuid='NORMALIZED-004179',
         path='/verify/validate_axioms.py',
         lineno=100,
         depth=1,
         type='class',
         name='MagicConst',
         text='class MagicConst(object):\n'
              '    def __init__(self, _to_tensor):\n'
              '        self._to_tensor = _to_tensor\n'
              '\n'
              '    def to_tensor(self, s):\n'
              '        return self._to_tensor(s)')

Fragment(uuid='NORMALIZED-004180',
         path='/verify/validate_axioms.py',
         lineno=101,
         depth=3,
         type='function',
         name='__init__',
         text='def __init__(self, _to_tensor):\n'
              '        self._to_tensor = _to_tensor')

Fragment(uuid='NORMALIZED-004181',
         path='/verify/validate_axioms.py',
         lineno=104,
         depth=3,
         type='function',
         name='to_tensor',
         text='def to_tensor(self, s):\n        return self._to_tensor(s)')

Fragment(uuid='NORMALIZED-004182',
         path='/verify/validate_axioms.py',
         lineno=106,
         depth=0,
         type='module',
         name='',
         text='\n\nclass BadShapeError(Exception):\n    pass\n')

Fragment(uuid='NORMALIZED-004183',
         path='/verify/validate_axioms.py',
         lineno=108,
         depth=1,
         type='class',
         name='BadShapeError',
         text='class BadShapeError(Exception):\n    pass')

Fragment(uuid='NORMALIZED-004184',
         path='/verify/validate_axioms.py',
         lineno=110,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def require(b):\n'
              '    if not b:\n'
              '        raise BadShapeError()\n'
              '\n'
              '\n'
              '_relu = z3.Function("relu", z3.RealSort(), z3.RealSort())\n')

Fragment(uuid='NORMALIZED-004185',
         path='/verify/validate_axioms.py',
         lineno=112,
         depth=1,
         type='function',
         name='require',
         text='def require(b):\n    if not b:\n        raise BadShapeError()')

Fragment(uuid='NORMALIZED-004186',
         path='/verify/validate_axioms.py',
         lineno=118,
         depth=0,
         type='module',
         name='',
         text='\n\ndef matmul_0(A,B):\n')

Fragment(uuid='NORMALIZED-004187',
         path='/verify/validate_axioms.py',
         lineno=120,
         depth=1,
         type='function',
         name='matmul_0',
         text='def matmul_0(A,B):\n')

Fragment(uuid='NORMALIZED-004188',
         path='/verify/validate_axioms.py',
         lineno=121,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(A, MagicConst):\n'
              '        assert isinstance(B, Tensor)\n'
              '        A = A.to_tensor((None, B.shape[0]))\n')

Fragment(uuid='NORMALIZED-004189',
         path='/verify/validate_axioms.py',
         lineno=121,
         depth=1,
         type='function',
         name='matmul_0',
         text='    if isinstance(A, MagicConst):\n'
              '        assert isinstance(B, Tensor)\n'
              '        A = A.to_tensor((None, B.shape[0]))\n')

Fragment(uuid='NORMALIZED-004190',
         path='/verify/validate_axioms.py',
         lineno=124,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(B, MagicConst):\n'
              '        assert isinstance(A, Tensor)\n'
              '        B = B.to_tensor((A.shape[1], None))\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n')

Fragment(uuid='NORMALIZED-004191',
         path='/verify/validate_axioms.py',
         lineno=124,
         depth=1,
         type='function',
         name='matmul_0',
         text='    if isinstance(B, MagicConst):\n'
              '        assert isinstance(A, Tensor)\n'
              '        B = B.to_tensor((A.shape[1], None))\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n')

Fragment(uuid='NORMALIZED-004192',
         path='/verify/validate_axioms.py',
         lineno=129,
         depth=0,
         type='module',
         name='',
         text='    if len(sa) == len(sb) == 2:\n'
              '        require(sa[1] == sb[0])\n'
              '        C = Tensor([[sum(A[i,k] * B[k,j] for k in range(sa[1])) '
              'for j in range(sb[1])] for i in range(sa[0])])\n'
              '        C.splits = (A.splits[0], B.splits[1])\n')

Fragment(uuid='NORMALIZED-004193',
         path='/verify/validate_axioms.py',
         lineno=129,
         depth=1,
         type='function',
         name='matmul_0',
         text='    if len(sa) == len(sb) == 2:\n'
              '        require(sa[1] == sb[0])\n'
              '        C = Tensor([[sum(A[i,k] * B[k,j] for k in range(sa[1])) '
              'for j in range(sb[1])] for i in range(sa[0])])\n'
              '        C.splits = (A.splits[0], B.splits[1])\n')

Fragment(uuid='NORMALIZED-004194',
         path='/verify/validate_axioms.py',
         lineno=133,
         depth=0,
         type='module',
         name='',
         text='    elif len(sa) == len(sb) == 3:\n'
              '        require(False) # TODO: split matmul into 2D and 3D '
              'operators\n'
              '        require(sa[2] == sb[1])\n'
              '        require(sa[0] == sb[0])\n'
              '        C = Tensor([[[sum(A[n,i,k] * B[n,k,j] for k in '
              'range(sa[2])) for j in range(sb[2])] for i in range(sa[1])] for '
              'n in range(sa[0])])\n'
              '        C.splits = ((), A.splits[1], B.splits[2])\n'
              '    else:\n'
              '        assert False\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004195',
         path='/verify/validate_axioms.py',
         lineno=133,
         depth=1,
         type='function',
         name='matmul_0',
         text='    elif len(sa) == len(sb) == 3:\n'
              '        require(False) # TODO: split matmul into 2D and 3D '
              'operators\n'
              '        require(sa[2] == sb[1])\n'
              '        require(sa[0] == sb[0])\n'
              '        C = Tensor([[[sum(A[n,i,k] * B[n,k,j] for k in '
              'range(sa[2])) for j in range(sb[2])] for i in range(sa[1])] for '
              'n in range(sa[0])])\n'
              '        C.splits = ((), A.splits[1], B.splits[2])\n'
              '    else:\n'
              '        assert False\n'
              '    return C')

Fragment(uuid='NORMALIZED-004196',
         path='/verify/validate_axioms.py',
         lineno=134,
         depth=5,
         type='documentation',
         name='',
         text='# TODO: split matmul into 2D and 3D operators')

Fragment(uuid='NORMALIZED-004197',
         path='/verify/validate_axioms.py',
         lineno=142,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def transpose_0(A):\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 2)\n'
              '    C = Tensor([[A[i,j] for i in range(sa[0])] for j in '
              'range(sa[1])])\n'
              '    C.splits = (A.splits[1], A.splits[0])\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004198',
         path='/verify/validate_axioms.py',
         lineno=144,
         depth=1,
         type='function',
         name='transpose_0',
         text='def transpose_0(A):\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 2)\n'
              '    C = Tensor([[A[i,j] for i in range(sa[0])] for j in '
              'range(sa[1])])\n'
              '    C.splits = (A.splits[1], A.splits[0])\n'
              '    return C')

Fragment(uuid='NORMALIZED-004199',
         path='/verify/validate_axioms.py',
         lineno=150,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def conv2d_0(sx, sy, pad, acti, A, B):\n'
              '    assert acti in [AC_MODE_NONE, AC_MODE_RELU] # TODO: handle '
              'other modes\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n')

Fragment(uuid='NORMALIZED-004200',
         path='/verify/validate_axioms.py',
         lineno=152,
         depth=1,
         type='function',
         name='conv2d_0',
         text='def conv2d_0(sx, sy, pad, acti, A, B):\n'
              '    assert acti in [AC_MODE_NONE, AC_MODE_RELU] # TODO: handle '
              'other modes\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n')

Fragment(uuid='NORMALIZED-004201',
         path='/verify/validate_axioms.py',
         lineno=153,
         depth=2,
         type='documentation',
         name='',
         text='# TODO: handle other modes')

Fragment(uuid='NORMALIZED-004202',
         path='/verify/validate_axioms.py',
         lineno=156,
         depth=0,
         type='module',
         name='',
         text='    if isinstance(B, MagicConst):\n'
              '        B = B.to_tensor((sa[1], 1, None, None))\n'
              '    sb = B.shape\n'
              '    require(len(sa) == len(sb) == 4)\n'
              '    # require(sa[1] == sb[1]) # non-grouped convolution\n'
              '    require(sa[1] % sb[1] == 0) # grouped convolution\n'
              '    group = sa[1] / sb[1]\n'
              '    require(sb[0] % group == 0) # grouped convolution\n'
              '    require(sx > 0 and sy > 0)\n')

Fragment(uuid='NORMALIZED-004203',
         path='/verify/validate_axioms.py',
         lineno=156,
         depth=1,
         type='function',
         name='conv2d_0',
         text='    if isinstance(B, MagicConst):\n'
              '        B = B.to_tensor((sa[1], 1, None, None))\n'
              '    sb = B.shape\n'
              '    require(len(sa) == len(sb) == 4)\n'
              '    # require(sa[1] == sb[1]) # non-grouped convolution\n'
              '    require(sa[1] % sb[1] == 0) # grouped convolution\n'
              '    group = sa[1] / sb[1]\n'
              '    require(sb[0] % group == 0) # grouped convolution\n'
              '    require(sx > 0 and sy > 0)\n')

Fragment(uuid='NORMALIZED-004204',
         path='/verify/validate_axioms.py',
         lineno=160,
         depth=2,
         type='documentation',
         name='',
         text='# require(sa[1] == sb[1]) # non-grouped convolution')

Fragment(uuid='NORMALIZED-004205',
         path='/verify/validate_axioms.py',
         lineno=161,
         depth=2,
         type='documentation',
         name='',
         text='# grouped convolution')

Fragment(uuid='NORMALIZED-004206',
         path='/verify/validate_axioms.py',
         lineno=163,
         depth=2,
         type='documentation',
         name='',
         text='# grouped convolution')

Fragment(uuid='NORMALIZED-004207',
         path='/verify/validate_axioms.py',
         lineno=165,
         depth=0,
         type='module',
         name='',
         text='    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n')

Fragment(uuid='NORMALIZED-004208',
         path='/verify/validate_axioms.py',
         lineno=165,
         depth=1,
         type='function',
         name='conv2d_0',
         text='    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n')

Fragment(uuid='NORMALIZED-004209',
         path='/verify/validate_axioms.py',
         lineno=168,
         depth=0,
         type='module',
         name='',
         text='        if sa[2] % sx == 0:\n'
              '            totalPadH = max(sb[2] - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(sb[2] - (sa[2] % sx), 0)\n')

Fragment(uuid='NORMALIZED-004210',
         path='/verify/validate_axioms.py',
         lineno=168,
         depth=1,
         type='function',
         name='conv2d_0',
         text='        if sa[2] % sx == 0:\n'
              '            totalPadH = max(sb[2] - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(sb[2] - (sa[2] % sx), 0)\n')

Fragment(uuid='NORMALIZED-004211',
         path='/verify/validate_axioms.py',
         lineno=172,
         depth=0,
         type='module',
         name='',
         text='        if sa[3] % sy == 0:\n'
              '            totalPadW = max(sb[3] - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(sb[3] - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(uuid='NORMALIZED-004212',
         path='/verify/validate_axioms.py',
         lineno=172,
         depth=1,
         type='function',
         name='conv2d_0',
         text='        if sa[3] % sy == 0:\n'
              '            totalPadW = max(sb[3] - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(sb[3] - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(uuid='NORMALIZED-004213',
         path='/verify/validate_axioms.py',
         lineno=178,
         depth=0,
         type='module',
         name='',
         text='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - sb[2]) / sx + 1\n'
              '        oy = (sa[3] - sb[3]) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sb[0], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(uuid='NORMALIZED-004214',
         path='/verify/validate_axioms.py',
         lineno=178,
         depth=1,
         type='function',
         name='conv2d_0',
         text='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - sb[2]) / sx + 1\n'
              '        oy = (sa[3] - sb[3]) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sb[0], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(uuid='NORMALIZED-004215',
         path='/verify/validate_axioms.py',
         lineno=189,
         depth=0,
         type='module',
         name='',
         text='    for n in range(so[0]):\n')

Fragment(uuid='NORMALIZED-004216',
         path='/verify/validate_axioms.py',
         lineno=189,
         depth=1,
         type='function',
         name='conv2d_0',
         text='    for n in range(so[0]):\n')

Fragment(uuid='NORMALIZED-004217',
         path='/verify/validate_axioms.py',
         lineno=190,
         depth=0,
         type='module',
         name='',
         text='        for c in range(so[1]):\n')

Fragment(uuid='NORMALIZED-004218',
         path='/verify/validate_axioms.py',
         lineno=190,
         depth=1,
         type='function',
         name='conv2d_0',
         text='        for c in range(so[1]):\n')

Fragment(uuid='NORMALIZED-004219',
         path='/verify/validate_axioms.py',
         lineno=191,
         depth=0,
         type='module',
         name='',
         text='            for h in range(so[2]):\n')

Fragment(uuid='NORMALIZED-004220',
         path='/verify/validate_axioms.py',
         lineno=191,
         depth=1,
         type='function',
         name='conv2d_0',
         text='            for h in range(so[2]):\n')

Fragment(uuid='NORMALIZED-004221',
         path='/verify/validate_axioms.py',
         lineno=192,
         depth=0,
         type='module',
         name='',
         text='                for w in range(so[3]):\n'
              '                    group_idx = c / (sb[0] / group)\n'
              '                    value = 0\n')

Fragment(uuid='NORMALIZED-004222',
         path='/verify/validate_axioms.py',
         lineno=192,
         depth=1,
         type='function',
         name='conv2d_0',
         text='                for w in range(so[3]):\n'
              '                    group_idx = c / (sb[0] / group)\n'
              '                    value = 0\n')

Fragment(uuid='NORMALIZED-004223',
         path='/verify/validate_axioms.py',
         lineno=195,
         depth=0,
         type='module',
         name='',
         text='                    for cin in range(sb[1]):\n')

Fragment(uuid='NORMALIZED-004224',
         path='/verify/validate_axioms.py',
         lineno=195,
         depth=1,
         type='function',
         name='conv2d_0',
         text='                    for cin in range(sb[1]):\n')

Fragment(uuid='NORMALIZED-004225',
         path='/verify/validate_axioms.py',
         lineno=196,
         depth=0,
         type='module',
         name='',
         text='                        for kh in range(sb[2]):\n')

Fragment(uuid='NORMALIZED-004226',
         path='/verify/validate_axioms.py',
         lineno=196,
         depth=1,
         type='function',
         name='conv2d_0',
         text='                        for kh in range(sb[2]):\n')

Fragment(uuid='NORMALIZED-004227',
         path='/verify/validate_axioms.py',
         lineno=197,
         depth=0,
         type='module',
         name='',
         text='                            for kw in range(sb[3]):\n'
              '                                posH = h * sx + kh - px\n'
              '                                posW = w * sy + kw - py\n'
              '                                assert -px <= posH <= sa[2] + '
              'px, posH\n'
              '                                assert -py <= posW <= sa[3] + '
              'py, (posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(uuid='NORMALIZED-004228',
         path='/verify/validate_axioms.py',
         lineno=197,
         depth=1,
         type='function',
         name='conv2d_0',
         text='                            for kw in range(sb[3]):\n'
              '                                posH = h * sx + kh - px\n'
              '                                posW = w * sy + kw - py\n'
              '                                assert -px <= posH <= sa[2] + '
              'px, posH\n'
              '                                assert -py <= posW <= sa[3] + '
              'py, (posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(uuid='NORMALIZED-004229',
         path='/verify/validate_axioms.py',
         lineno=202,
         depth=0,
         type='module',
         name='',
         text='                                if posH >= 0 and posH < sa[2] '
              'and posW >= 0 and posW < sa[3]:\n'
              '                                    value += '
              'A[n,cin+group_idx*sb[1],posH,posW] * B[c,cin,kh,kw]\n'
              '                    C[n,c,h,w] = value if acti == AC_MODE_NONE '
              'else _relu(value)\n'
              '    C.splits = (A.splits[0], B.splits[0], (), ())\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004230',
         path='/verify/validate_axioms.py',
         lineno=202,
         depth=1,
         type='function',
         name='conv2d_0',
         text='                                if posH >= 0 and posH < sa[2] '
              'and posW >= 0 and posW < sa[3]:\n'
              '                                    value += '
              'A[n,cin+group_idx*sb[1],posH,posW] * B[c,cin,kh,kw]\n'
              '                    C[n,c,h,w] = value if acti == AC_MODE_NONE '
              'else _relu(value)\n'
              '    C.splits = (A.splits[0], B.splits[0], (), ())\n'
              '    return C')

Fragment(uuid='NORMALIZED-004231',
         path='/verify/validate_axioms.py',
         lineno=207,
         depth=0,
         type='module',
         name='',
         text='\n\ndef const_pool_0(kx, ky):\n')

Fragment(uuid='NORMALIZED-004232',
         path='/verify/validate_axioms.py',
         lineno=209,
         depth=1,
         type='function',
         name='const_pool_0',
         text='def const_pool_0(kx, ky):\n'
              '    def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[z3.RealVal(1) / z3.RealVal(kx * ky)\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )\n'
              '    return MagicConst(to_tensor)')

Fragment(uuid='NORMALIZED-004233',
         path='/verify/validate_axioms.py',
         lineno=210,
         depth=0,
         type='module',
         name='',
         text='    def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[z3.RealVal(1) / z3.RealVal(kx * ky)\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )\n'
              '    return MagicConst(to_tensor)\n')

Fragment(uuid='NORMALIZED-004234',
         path='/verify/validate_axioms.py',
         lineno=210,
         depth=3,
         type='function',
         name='to_tensor',
         text='def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[z3.RealVal(1) / z3.RealVal(kx * ky)\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )')

Fragment(uuid='NORMALIZED-004235',
         path='/verify/validate_axioms.py',
         lineno=221,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def const_iconv_0(kx, ky):\n'
              '    assert kx % 2 == 1\n'
              '    assert ky % 2 == 1\n'
              '    middle = (kx // 2, ky // 2)\n')

Fragment(uuid='NORMALIZED-004236',
         path='/verify/validate_axioms.py',
         lineno=223,
         depth=1,
         type='function',
         name='const_iconv_0',
         text='def const_iconv_0(kx, ky):\n'
              '    assert kx % 2 == 1\n'
              '    assert ky % 2 == 1\n'
              '    middle = (kx // 2, ky // 2)\n'
              '    def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[1 if (i3,i4) == middle else 0\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )\n'
              '    return MagicConst(to_tensor)')

Fragment(uuid='NORMALIZED-004237',
         path='/verify/validate_axioms.py',
         lineno=227,
         depth=0,
         type='module',
         name='',
         text='    def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[1 if (i3,i4) == middle else 0\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )\n'
              '    return MagicConst(to_tensor)\n')

Fragment(uuid='NORMALIZED-004238',
         path='/verify/validate_axioms.py',
         lineno=227,
         depth=3,
         type='function',
         name='to_tensor',
         text='def to_tensor(s):\n'
              '        assert len(s) == 4\n'
              '        assert s[-2:] == (None, None)\n'
              '        return Tensor(\n'
              '            [[[[1 if (i3,i4) == middle else 0\n'
              '                for i4 in range(ky)]\n'
              '               for i3 in range(kx)]\n'
              '              for i2 in range(s[1])]\n'
              '             for i1 in range(s[0])]\n'
              '        )')

Fragment(uuid='NORMALIZED-004239',
         path='/verify/validate_axioms.py',
         lineno=238,
         depth=0,
         type='module',
         name='',
         text='\n\ndef const_imm_0():\n')

Fragment(uuid='NORMALIZED-004240',
         path='/verify/validate_axioms.py',
         lineno=240,
         depth=1,
         type='function',
         name='const_imm_0',
         text='def const_imm_0():\n'
              '    def to_tensor(s):\n'
              '        s = list(s)\n'
              '        assert len(s) == 2\n'
              '        if s[0] is None:\n'
              '            s[0] = s[1]\n'
              '        if s[1] is None:\n'
              '            s[1] = s[0]\n'
              '        assert s[0] == s[1]\n'
              '        assert s[0] is not None\n'
              '        s = tuple(s)\n'
              '        I = Tensor.zeros(s)\n'
              '        for i in range(s[0]):\n'
              '            I[i,i] = 1\n'
              '        return I\n'
              '    return MagicConst(to_tensor)')

Fragment(uuid='NORMALIZED-004241',
         path='/verify/validate_axioms.py',
         lineno=241,
         depth=0,
         type='module',
         name='',
         text='    def to_tensor(s):\n'
              '        s = list(s)\n'
              '        assert len(s) == 2\n'
              '        if s[0] is None:\n'
              '            s[0] = s[1]\n'
              '        if s[1] is None:\n'
              '            s[1] = s[0]\n'
              '        assert s[0] == s[1]\n'
              '        assert s[0] is not None\n'
              '        s = tuple(s)\n'
              '        I = Tensor.zeros(s)\n'
              '        for i in range(s[0]):\n'
              '            I[i,i] = 1\n'
              '        return I\n'
              '    return MagicConst(to_tensor)\n')

Fragment(uuid='NORMALIZED-004242',
         path='/verify/validate_axioms.py',
         lineno=241,
         depth=3,
         type='function',
         name='to_tensor',
         text='def to_tensor(s):\n'
              '        s = list(s)\n'
              '        assert len(s) == 2\n'
              '        if s[0] is None:\n'
              '            s[0] = s[1]\n'
              '        if s[1] is None:\n'
              '            s[1] = s[0]\n'
              '        assert s[0] == s[1]\n'
              '        assert s[0] is not None\n'
              '        s = tuple(s)\n'
              '        I = Tensor.zeros(s)\n'
              '        for i in range(s[0]):\n'
              '            I[i,i] = 1\n'
              '        return I')

Fragment(uuid='NORMALIZED-004243',
         path='/verify/validate_axioms.py',
         lineno=256,
         depth=0,
         type='module',
         name='',
         text='\n\ndef const_one_0():\n')

Fragment(uuid='NORMALIZED-004244',
         path='/verify/validate_axioms.py',
         lineno=258,
         depth=1,
         type='function',
         name='const_one_0',
         text='def const_one_0():\n'
              '    def to_tensor(s):\n'
              '        assert all(x > 0 for x in s)\n'
              '        def _ones(s):\n'
              '            return 1 if s == () else [_ones(s[1:]) for i in '
              'range(s[0])]\n'
              '        return Tensor(_ones(s))\n'
              '    return MagicConst(to_tensor)')

Fragment(uuid='NORMALIZED-004245',
         path='/verify/validate_axioms.py',
         lineno=259,
         depth=0,
         type='module',
         name='',
         text='    def to_tensor(s):\n        assert all(x > 0 for x in s)\n')

Fragment(uuid='NORMALIZED-004246',
         path='/verify/validate_axioms.py',
         lineno=259,
         depth=3,
         type='function',
         name='to_tensor',
         text='def to_tensor(s):\n'
              '        assert all(x > 0 for x in s)\n'
              '        def _ones(s):\n'
              '            return 1 if s == () else [_ones(s[1:]) for i in '
              'range(s[0])]\n'
              '        return Tensor(_ones(s))')

Fragment(uuid='NORMALIZED-004247',
         path='/verify/validate_axioms.py',
         lineno=261,
         depth=0,
         type='module',
         name='',
         text='        def _ones(s):\n'
              '            return 1 if s == () else [_ones(s[1:]) for i in '
              'range(s[0])]\n'
              '        return Tensor(_ones(s))\n'
              '    return MagicConst(to_tensor)\n')

Fragment(uuid='NORMALIZED-004248',
         path='/verify/validate_axioms.py',
         lineno=261,
         depth=5,
         type='function',
         name='_ones',
         text='def _ones(s):\n'
              '            return 1 if s == () else [_ones(s[1:]) for i in '
              'range(s[0])]')

Fragment(uuid='NORMALIZED-004249',
         path='/verify/validate_axioms.py',
         lineno=265,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def pool2d_avg_0(kx, ky, sx, sy, pad, A):\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    require(sx > 0 and sy > 0)\n')

Fragment(uuid='NORMALIZED-004250',
         path='/verify/validate_axioms.py',
         lineno=267,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='def pool2d_avg_0(kx, ky, sx, sy, pad, A):\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    require(sx > 0 and sy > 0)\n')

Fragment(uuid='NORMALIZED-004251',
         path='/verify/validate_axioms.py',
         lineno=272,
         depth=0,
         type='module',
         name='',
         text='    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n')

Fragment(uuid='NORMALIZED-004252',
         path='/verify/validate_axioms.py',
         lineno=272,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n')

Fragment(uuid='NORMALIZED-004253',
         path='/verify/validate_axioms.py',
         lineno=275,
         depth=0,
         type='module',
         name='',
         text='        if sa[2] % sx == 0:\n'
              '            totalPadH = max(kx - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(kx - (sa[2] % sx), 0)\n')

Fragment(uuid='NORMALIZED-004254',
         path='/verify/validate_axioms.py',
         lineno=275,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='        if sa[2] % sx == 0:\n'
              '            totalPadH = max(kx - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(kx - (sa[2] % sx), 0)\n')

Fragment(uuid='NORMALIZED-004255',
         path='/verify/validate_axioms.py',
         lineno=279,
         depth=0,
         type='module',
         name='',
         text='        if sa[3] % sy == 0:\n'
              '            totalPadW = max(ky - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(ky - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(uuid='NORMALIZED-004256',
         path='/verify/validate_axioms.py',
         lineno=279,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='        if sa[3] % sy == 0:\n'
              '            totalPadW = max(ky - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(ky - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(uuid='NORMALIZED-004257',
         path='/verify/validate_axioms.py',
         lineno=285,
         depth=0,
         type='module',
         name='',
         text='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - kx) / sx + 1\n'
              '        oy = (sa[3] - ky) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sa[1], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(uuid='NORMALIZED-004258',
         path='/verify/validate_axioms.py',
         lineno=285,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - kx) / sx + 1\n'
              '        oy = (sa[3] - ky) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sa[1], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(uuid='NORMALIZED-004259',
         path='/verify/validate_axioms.py',
         lineno=296,
         depth=0,
         type='module',
         name='',
         text='    for n in range(so[0]):\n')

Fragment(uuid='NORMALIZED-004260',
         path='/verify/validate_axioms.py',
         lineno=296,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='    for n in range(so[0]):\n')

Fragment(uuid='NORMALIZED-004261',
         path='/verify/validate_axioms.py',
         lineno=297,
         depth=0,
         type='module',
         name='',
         text='        for c in range(so[1]):\n')

Fragment(uuid='NORMALIZED-004262',
         path='/verify/validate_axioms.py',
         lineno=297,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='        for c in range(so[1]):\n')

Fragment(uuid='NORMALIZED-004263',
         path='/verify/validate_axioms.py',
         lineno=298,
         depth=0,
         type='module',
         name='',
         text='            for h in range(so[2]):\n')

Fragment(uuid='NORMALIZED-004264',
         path='/verify/validate_axioms.py',
         lineno=298,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='            for h in range(so[2]):\n')

Fragment(uuid='NORMALIZED-004265',
         path='/verify/validate_axioms.py',
         lineno=299,
         depth=0,
         type='module',
         name='',
         text='                for w in range(so[3]):\n'
              '                    value = 0\n')

Fragment(uuid='NORMALIZED-004266',
         path='/verify/validate_axioms.py',
         lineno=299,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='                for w in range(so[3]):\n'
              '                    value = 0\n')

Fragment(uuid='NORMALIZED-004267',
         path='/verify/validate_axioms.py',
         lineno=301,
         depth=0,
         type='module',
         name='',
         text='                    for kh in range(kx):\n')

Fragment(uuid='NORMALIZED-004268',
         path='/verify/validate_axioms.py',
         lineno=301,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='                    for kh in range(kx):\n')

Fragment(uuid='NORMALIZED-004269',
         path='/verify/validate_axioms.py',
         lineno=302,
         depth=0,
         type='module',
         name='',
         text='                        for kw in range(ky):\n'
              '                            posH = h * sx + kh - px\n'
              '                            posW = w * sy + kw - py\n'
              '                            assert -px <= posH <= sa[2] + px, '
              'posH\n'
              '                            assert -py <= posW <= sa[3] + py, '
              '(posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(uuid='NORMALIZED-004270',
         path='/verify/validate_axioms.py',
         lineno=302,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='                        for kw in range(ky):\n'
              '                            posH = h * sx + kh - px\n'
              '                            posW = w * sy + kw - py\n'
              '                            assert -px <= posH <= sa[2] + px, '
              'posH\n'
              '                            assert -py <= posW <= sa[3] + py, '
              '(posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(uuid='NORMALIZED-004271',
         path='/verify/validate_axioms.py',
         lineno=307,
         depth=0,
         type='module',
         name='',
         text='                            if posH >= 0 and posH < sa[2] and '
              'posW >= 0 and posW < sa[3]:\n'
              '                                value += A[n,c,posH,posW]\n'
              '                    C[n,c,h,w] = value / z3.RealVal(kx * ky)\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ())\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004272',
         path='/verify/validate_axioms.py',
         lineno=307,
         depth=1,
         type='function',
         name='pool2d_avg_0',
         text='                            if posH >= 0 and posH < sa[2] and '
              'posW >= 0 and posW < sa[3]:\n'
              '                                value += A[n,c,posH,posW]\n'
              '                    C[n,c,h,w] = value / z3.RealVal(kx * ky)\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ())\n'
              '    return C')

Fragment(uuid='NORMALIZED-004273',
         path='/verify/validate_axioms.py',
         lineno=312,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def z3max(x, y):\n'
              '    if x is None:\n'
              '        assert y is not None\n'
              '        return y\n'
              '    elif y is None:\n'
              '        return x\n'
              '    else:\n'
              '        return z3.If(x > y, x, y)\n')

Fragment(uuid='NORMALIZED-004274',
         path='/verify/validate_axioms.py',
         lineno=314,
         depth=1,
         type='function',
         name='z3max',
         text='def z3max(x, y):\n'
              '    if x is None:\n'
              '        assert y is not None\n'
              '        return y\n'
              '    elif y is None:\n'
              '        return x\n'
              '    else:\n'
              '        return z3.If(x > y, x, y)')

Fragment(uuid='NORMALIZED-004275',
         path='/verify/validate_axioms.py',
         lineno=322,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def pool2d_max_0(kx, ky, sx, sy, pad, A):\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    require(sx > 0 and sy > 0)\n')

Fragment(uuid='NORMALIZED-004276',
         path='/verify/validate_axioms.py',
         lineno=324,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='def pool2d_max_0(kx, ky, sx, sy, pad, A):\n'
              '    assert pad in [PD_MODE_SAME, PD_MODE_VALID]\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    require(sx > 0 and sy > 0)\n')

Fragment(uuid='NORMALIZED-004277',
         path='/verify/validate_axioms.py',
         lineno=329,
         depth=0,
         type='module',
         name='',
         text='    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n')

Fragment(uuid='NORMALIZED-004278',
         path='/verify/validate_axioms.py',
         lineno=329,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='    if pad == PD_MODE_SAME: # same padding\n'
              '        ox = (sa[2] + sx - 1) / sx\n'
              '        oy = (sa[3] + sy - 1) / sy\n')

Fragment(uuid='NORMALIZED-004279',
         path='/verify/validate_axioms.py',
         lineno=332,
         depth=0,
         type='module',
         name='',
         text='        if sa[2] % sx == 0:\n'
              '            totalPadH = max(kx - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(kx - (sa[2] % sx), 0)\n')

Fragment(uuid='NORMALIZED-004280',
         path='/verify/validate_axioms.py',
         lineno=332,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='        if sa[2] % sx == 0:\n'
              '            totalPadH = max(kx - sx, 0);\n'
              '        else:\n'
              '            totalPadH = max(kx - (sa[2] % sx), 0)\n')

Fragment(uuid='NORMALIZED-004281',
         path='/verify/validate_axioms.py',
         lineno=336,
         depth=0,
         type='module',
         name='',
         text='        if sa[3] % sy == 0:\n'
              '            totalPadW = max(ky - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(ky - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(uuid='NORMALIZED-004282',
         path='/verify/validate_axioms.py',
         lineno=336,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='        if sa[3] % sy == 0:\n'
              '            totalPadW = max(ky - sy, 0);\n'
              '        else:\n'
              '            totalPadW = max(ky - (sa[3] % sy), 0)\n'
              '        px = (totalPadH + 1) / 2\n'
              '        py = (totalPadW + 1) / 2\n')

Fragment(uuid='NORMALIZED-004283',
         path='/verify/validate_axioms.py',
         lineno=342,
         depth=0,
         type='module',
         name='',
         text='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - kx) / sx + 1\n'
              '        oy = (sa[3] - ky) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sa[1], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(uuid='NORMALIZED-004284',
         path='/verify/validate_axioms.py',
         lineno=342,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='    elif pad == PD_MODE_VALID: # valid padding\n'
              '        ox = (sa[2] - kx) / sx + 1\n'
              '        oy = (sa[3] - ky) / sy + 1\n'
              '        px = 0\n'
              '        py = 0\n'
              '    else:\n'
              '        assert False\n'
              '\n'
              '    so = (sa[0], sa[1], ox, oy)\n'
              '    require(ox > 0 and oy > 0)\n'
              '    C = Tensor.zeros(so)\n')

Fragment(uuid='NORMALIZED-004285',
         path='/verify/validate_axioms.py',
         lineno=353,
         depth=0,
         type='module',
         name='',
         text='    for n in range(so[0]):\n')

Fragment(uuid='NORMALIZED-004286',
         path='/verify/validate_axioms.py',
         lineno=353,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='    for n in range(so[0]):\n')

Fragment(uuid='NORMALIZED-004287',
         path='/verify/validate_axioms.py',
         lineno=354,
         depth=0,
         type='module',
         name='',
         text='        for c in range(so[1]):\n')

Fragment(uuid='NORMALIZED-004288',
         path='/verify/validate_axioms.py',
         lineno=354,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='        for c in range(so[1]):\n')

Fragment(uuid='NORMALIZED-004289',
         path='/verify/validate_axioms.py',
         lineno=355,
         depth=0,
         type='module',
         name='',
         text='            for h in range(so[2]):\n')

Fragment(uuid='NORMALIZED-004290',
         path='/verify/validate_axioms.py',
         lineno=355,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='            for h in range(so[2]):\n')

Fragment(uuid='NORMALIZED-004291',
         path='/verify/validate_axioms.py',
         lineno=356,
         depth=0,
         type='module',
         name='',
         text='                for w in range(so[3]):\n'
              '                    value = None\n')

Fragment(uuid='NORMALIZED-004292',
         path='/verify/validate_axioms.py',
         lineno=356,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='                for w in range(so[3]):\n'
              '                    value = None\n')

Fragment(uuid='NORMALIZED-004293',
         path='/verify/validate_axioms.py',
         lineno=358,
         depth=0,
         type='module',
         name='',
         text='                    for kh in range(kx):\n')

Fragment(uuid='NORMALIZED-004294',
         path='/verify/validate_axioms.py',
         lineno=358,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='                    for kh in range(kx):\n')

Fragment(uuid='NORMALIZED-004295',
         path='/verify/validate_axioms.py',
         lineno=359,
         depth=0,
         type='module',
         name='',
         text='                        for kw in range(ky):\n'
              '                            posH = h * sx + kh - px\n'
              '                            posW = w * sy + kw - py\n'
              '                            assert -px <= posH <= sa[2] + px, '
              'posH\n'
              '                            assert -py <= posW <= sa[3] + py, '
              '(posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(uuid='NORMALIZED-004296',
         path='/verify/validate_axioms.py',
         lineno=359,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='                        for kw in range(ky):\n'
              '                            posH = h * sx + kh - px\n'
              '                            posW = w * sy + kw - py\n'
              '                            assert -px <= posH <= sa[2] + px, '
              'posH\n'
              '                            assert -py <= posW <= sa[3] + py, '
              '(posW, h, w, sx, sy, kh, kw, py, so)\n')

Fragment(uuid='NORMALIZED-004297',
         path='/verify/validate_axioms.py',
         lineno=364,
         depth=0,
         type='module',
         name='',
         text='                            if posH >= 0 and posH < sa[2] and '
              'posW >= 0 and posW < sa[3]:\n'
              '                                value = z3max(value, '
              'A[n,c,posH,posW])\n'
              '                    C[n,c,h,w] = value\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ())\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004298',
         path='/verify/validate_axioms.py',
         lineno=364,
         depth=1,
         type='function',
         name='pool2d_max_0',
         text='                            if posH >= 0 and posH < sa[2] and '
              'posW >= 0 and posW < sa[3]:\n'
              '                                value = z3max(value, '
              'A[n,c,posH,posW])\n'
              '                    C[n,c,h,w] = value\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ())\n'
              '    return C')

Fragment(uuid='NORMALIZED-004299',
         path='/verify/validate_axioms.py',
         lineno=369,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def ewadd_0(A,B):\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sa == sb)\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] + B[ii]\n'
              '    if A.splits == B.splits:\n'
              '        C.splits = A.splits\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004300',
         path='/verify/validate_axioms.py',
         lineno=371,
         depth=1,
         type='function',
         name='ewadd_0',
         text='def ewadd_0(A,B):\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sa == sb)\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] + B[ii]\n'
              '    if A.splits == B.splits:\n'
              '        C.splits = A.splits\n'
              '    return C')

Fragment(uuid='NORMALIZED-004301',
         path='/verify/validate_axioms.py',
         lineno=381,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def ewmul_0(A,B):\n'
              '    if isinstance(A, MagicConst):\n'
              '        assert isinstance(B, Tensor)\n'
              '        A = A.to_tensor(B.shape)\n'
              '    if isinstance(B, MagicConst):\n'
              '        assert isinstance(A, Tensor)\n'
              '        B = B.to_tensor(A.shape)\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sa == sb)\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] * B[ii]\n'
              '    if A.splits == B.splits:\n'
              '        C.splits = A.splits\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004302',
         path='/verify/validate_axioms.py',
         lineno=383,
         depth=1,
         type='function',
         name='ewmul_0',
         text='def ewmul_0(A,B):\n'
              '    if isinstance(A, MagicConst):\n'
              '        assert isinstance(B, Tensor)\n'
              '        A = A.to_tensor(B.shape)\n'
              '    if isinstance(B, MagicConst):\n'
              '        assert isinstance(A, Tensor)\n'
              '        B = B.to_tensor(A.shape)\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sa == sb)\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] * B[ii]\n'
              '    if A.splits == B.splits:\n'
              '        C.splits = A.splits\n'
              '    return C')

Fragment(uuid='NORMALIZED-004303',
         path='/verify/validate_axioms.py',
         lineno=399,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def scalar_mul_0(A,B):\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sb == ())\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] * B[()]\n'
              '    C.splits = A.splits\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004304',
         path='/verify/validate_axioms.py',
         lineno=401,
         depth=1,
         type='function',
         name='scalar_mul_0',
         text='def scalar_mul_0(A,B):\n'
              '    sa = A.shape\n'
              '    sb = B.shape\n'
              '    require(sb == ())\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = A[ii] * B[()]\n'
              '    C.splits = A.splits\n'
              '    return C')

Fragment(uuid='NORMALIZED-004305',
         path='/verify/validate_axioms.py',
         lineno=410,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def relu_0(A):\n'
              '    sa = A.shape\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = _relu(A[ii])\n'
              '    C.splits = A.splits\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004306',
         path='/verify/validate_axioms.py',
         lineno=412,
         depth=1,
         type='function',
         name='relu_0',
         text='def relu_0(A):\n'
              '    sa = A.shape\n'
              '    C = Tensor.zeros(sa)\n'
              '    for ii in product(*[range(n) for n in sa]):\n'
              '        C[ii] = _relu(A[ii])\n'
              '    C.splits = A.splits\n'
              '    return C')

Fragment(uuid='NORMALIZED-004307',
         path='/verify/validate_axioms.py',
         lineno=419,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def concat_0(d, A,B):\n'
              '    require(A.dim == B.dim and d < A.dim)\n'
              '    require(all(i == d or A.shape[i] == B.shape[i] for i in '
              'range(A.dim)))\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else A.shape[i] '
              '+ B.shape[i] for i in range(A.dim)))\n')

Fragment(uuid='NORMALIZED-004308',
         path='/verify/validate_axioms.py',
         lineno=421,
         depth=1,
         type='function',
         name='concat_0',
         text='def concat_0(d, A,B):\n'
              '    require(A.dim == B.dim and d < A.dim)\n'
              '    require(all(i == d or A.shape[i] == B.shape[i] for i in '
              'range(A.dim)))\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else A.shape[i] '
              '+ B.shape[i] for i in range(A.dim)))\n')

Fragment(uuid='NORMALIZED-004309',
         path='/verify/validate_axioms.py',
         lineno=425,
         depth=0,
         type='module',
         name='',
         text='    for ii in product(*[range(n) for n in C.shape]):\n'
              '        if ii[d] < A.shape[d]:\n'
              '            C[ii] = A[ii]\n'
              '        else:\n'
              '            jj = list(ii)\n'
              '            jj[d] -= A.shape[d]\n'
              '            C[ii] = B[tuple(jj)]\n'
              '    C.splits = tuple(\n'
              '        (A.shape[d], A.splits[d], B.splits[d]) if i == d else\n'
              '        A.splits[i] if A.splits[i]==B.splits[i] else\n'
              '        ()\n')

Fragment(uuid='NORMALIZED-004310',
         path='/verify/validate_axioms.py',
         lineno=425,
         depth=1,
         type='function',
         name='concat_0',
         text='    for ii in product(*[range(n) for n in C.shape]):\n'
              '        if ii[d] < A.shape[d]:\n'
              '            C[ii] = A[ii]\n'
              '        else:\n'
              '            jj = list(ii)\n'
              '            jj[d] -= A.shape[d]\n'
              '            C[ii] = B[tuple(jj)]\n'
              '    C.splits = tuple(\n'
              '        (A.shape[d], A.splits[d], B.splits[d]) if i == d else\n'
              '        A.splits[i] if A.splits[i]==B.splits[i] else\n'
              '        ()\n')

Fragment(uuid='NORMALIZED-004311',
         path='/verify/validate_axioms.py',
         lineno=436,
         depth=0,
         type='module',
         name='',
         text='        for i in range(C.dim)\n    )\n    return C\n')

Fragment(uuid='NORMALIZED-004312',
         path='/verify/validate_axioms.py',
         lineno=436,
         depth=1,
         type='function',
         name='concat_0',
         text='        for i in range(C.dim)\n    )\n    return C')

Fragment(uuid='NORMALIZED-004313',
         path='/verify/validate_axioms.py',
         lineno=439,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def split_0(d, A):\n'
              '    require(d < A.dim)\n'
              '    assert A.splits[d] != ()\n'
              '    s, l, r = A.splits[d]\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else s for i in '
              'range(A.dim)))\n'
              '    for ii in product(*[range(n) for n in C.shape]):\n'
              '        C[ii] = A[ii]\n'
              '    C.splits = tuple(A.splits[i] if i != d else l for  i in '
              'range(A.dim))\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004314',
         path='/verify/validate_axioms.py',
         lineno=441,
         depth=1,
         type='function',
         name='split_0',
         text='def split_0(d, A):\n'
              '    require(d < A.dim)\n'
              '    assert A.splits[d] != ()\n'
              '    s, l, r = A.splits[d]\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else s for i in '
              'range(A.dim)))\n'
              '    for ii in product(*[range(n) for n in C.shape]):\n'
              '        C[ii] = A[ii]\n'
              '    C.splits = tuple(A.splits[i] if i != d else l for  i in '
              'range(A.dim))\n'
              '    return C')

Fragment(uuid='NORMALIZED-004315',
         path='/verify/validate_axioms.py',
         lineno=450,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def split_1(d, A):\n'
              '    require(d < A.dim)\n'
              '    assert A.splits[d] != ()\n'
              '    s, l, r = A.splits[d]\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else A.shape[i] '
              '- s for i in range(A.dim)))\n'
              '    for ii in product(*[range(n) for n in C.shape]):\n'
              '        jj = list(ii)\n'
              '        jj[d] += s\n'
              '        C[ii] = A[tuple(jj)]\n'
              '    C.splits = tuple(A.splits[i] if i != d else r for  i in '
              'range(A.dim))\n'
              '    return C\n')

Fragment(uuid='NORMALIZED-004316',
         path='/verify/validate_axioms.py',
         lineno=452,
         depth=1,
         type='function',
         name='split_1',
         text='def split_1(d, A):\n'
              '    require(d < A.dim)\n'
              '    assert A.splits[d] != ()\n'
              '    s, l, r = A.splits[d]\n'
              '    C = Tensor.zeros(tuple(A.shape[i] if i != d else A.shape[i] '
              '- s for i in range(A.dim)))\n'
              '    for ii in product(*[range(n) for n in C.shape]):\n'
              '        jj = list(ii)\n'
              '        jj[d] += s\n'
              '        C[ii] = A[tuple(jj)]\n'
              '    C.splits = tuple(A.splits[i] if i != d else r for  i in '
              'range(A.dim))\n'
              '    return C')

Fragment(uuid='NORMALIZED-004317',
         path='/verify/validate_axioms.py',
         lineno=463,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def enlarge_0(kx, ky, A):\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    sc = (sa[0], sa[1], max(sa[2], kx), max(sa[3], ky))\n'
              '    C = Tensor.zeros(sc)\n'
              '    dx = (sc[2] - sa[2]) // 2\n'
              '    dy = (sc[3] - sa[3]) // 2\n')

Fragment(uuid='NORMALIZED-004318',
         path='/verify/validate_axioms.py',
         lineno=465,
         depth=1,
         type='function',
         name='enlarge_0',
         text='def enlarge_0(kx, ky, A):\n'
              '    sa = A.shape\n'
              '    require(len(sa) == 4)\n'
              '    sc = (sa[0], sa[1], max(sa[2], kx), max(sa[3], ky))\n'
              '    C = Tensor.zeros(sc)\n'
              '    dx = (sc[2] - sa[2]) // 2\n'
              '    dy = (sc[3] - sa[3]) // 2\n')

Fragment(uuid='NORMALIZED-004319',
         path='/verify/validate_axioms.py',
         lineno=472,
         depth=0,
         type='module',
         name='',
         text='    for n in range(sa[0]):\n')

Fragment(uuid='NORMALIZED-004320',
         path='/verify/validate_axioms.py',
         lineno=472,
         depth=1,
         type='function',
         name='enlarge_0',
         text='    for n in range(sa[0]):\n')

Fragment(uuid='NORMALIZED-004321',
         path='/verify/validate_axioms.py',
         lineno=473,
         depth=0,
         type='module',
         name='',
         text='        for c in range(sa[1]):\n')

Fragment(uuid='NORMALIZED-004322',
         path='/verify/validate_axioms.py',
         lineno=473,
         depth=1,
         type='function',
         name='enlarge_0',
         text='        for c in range(sa[1]):\n')

Fragment(uuid='NORMALIZED-004323',
         path='/verify/validate_axioms.py',
         lineno=474,
         depth=0,
         type='module',
         name='',
         text='            for h in range(sa[2]):\n')

Fragment(uuid='NORMALIZED-004324',
         path='/verify/validate_axioms.py',
         lineno=474,
         depth=1,
         type='function',
         name='enlarge_0',
         text='            for h in range(sa[2]):\n')

Fragment(uuid='NORMALIZED-004325',
         path='/verify/validate_axioms.py',
         lineno=475,
         depth=0,
         type='module',
         name='',
         text='                for w in range(sa[3]):\n'
              '                    C[n, c, h + dx, w + dy] = A[n, c, h, w]\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ()) # TODO: '
              'compute split tree for other dimensions?\n'
              '    return C\n'
              '\n'
              '\n'
              '# def one():\n'
              '#     C = Tensor.zeros(())\n'
              '#     C[()] = 1\n'
              '#     return C\n')

Fragment(uuid='NORMALIZED-004326',
         path='/verify/validate_axioms.py',
         lineno=475,
         depth=1,
         type='function',
         name='enlarge_0',
         text='                for w in range(sa[3]):\n'
              '                    C[n, c, h + dx, w + dy] = A[n, c, h, w]\n'
              '    C.splits = (A.splits[0], A.splits[1], (), ()) # TODO: '
              'compute split tree for other dimensions?\n'
              '    return C')

Fragment(uuid='NORMALIZED-004327',
         path='/verify/validate_axioms.py',
         lineno=477,
         depth=2,
         type='documentation',
         name='',
         text='# TODO: compute split tree for other dimensions?')

Fragment(uuid='NORMALIZED-004328',
         path='/verify/validate_axioms.py',
         lineno=482,
         depth=0,
         type='documentation',
         name='',
         text='#     C = Tensor.zeros(())')

Fragment(uuid='NORMALIZED-004329',
         path='/verify/validate_axioms.py',
         lineno=485,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def eq(S,T):\n'
              '    assert S.shape == T.shape, (S.shape, T.shape)\n'
              '    assert S.splits == T.splits, "{} != {}".format(S.splits, '
              'T.splits)\n'
              '    if S == T:\n'
              '        print "syntactic equality detected"\n'
              '        return z3.BoolVal(True)\n'
              '    else:\n'
              '        return z3.And(*[S[ii] == T[ii] for ii in '
              'product(*[range(n) for n in S.shape])])\n')

Fragment(uuid='NORMALIZED-004330',
         path='/verify/validate_axioms.py',
         lineno=487,
         depth=1,
         type='function',
         name='eq',
         text='def eq(S,T):\n'
              '    assert S.shape == T.shape, (S.shape, T.shape)\n'
              '    assert S.splits == T.splits, "{} != {}".format(S.splits, '
              'T.splits)\n'
              '    if S == T:\n'
              '        print "syntactic equality detected"\n'
              '        return z3.BoolVal(True)\n'
              '    else:\n'
              '        return z3.And(*[S[ii] == T[ii] for ii in '
              'product(*[range(n) for n in S.shape])])')

Fragment(uuid='NORMALIZED-004331',
         path='/verify/validate_axioms.py',
         lineno=491,
         depth=6,
         type='documentation',
         name='',
         text='syntactic equality detected')

Fragment(uuid='NORMALIZED-004332',
         path='/verify/validate_axioms.py',
         lineno=495,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def body_to_function(variables, body):\n'
              "    assert body.decl().name() == '='\n"
              '    assert body.num_args() == 2\n'
              '    t1, t2 = body.arg(0), body.arg(1)\n')

Fragment(uuid='NORMALIZED-004333',
         path='/verify/validate_axioms.py',
         lineno=497,
         depth=1,
         type='function',
         name='body_to_function',
         text='def body_to_function(variables, body):\n'
              "    assert body.decl().name() == '='\n"
              '    assert body.num_args() == 2\n'
              '    t1, t2 = body.arg(0), body.arg(1)\n')

Fragment(uuid='NORMALIZED-004334',
         path='/verify/validate_axioms.py',
         lineno=501,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def convert(t, values):\n'
              '        if z3.is_int_value(t):\n'
              '            return t.as_long()\n'
              '        if z3.is_app(t):\n'
              '            func = globals()[t.decl().name()]\n'
              '            return func(*[convert(t.arg(i), values) for i in '
              'range(t.num_args())])\n'
              '        elif z3.is_var(t):\n'
              '            return values[z3.get_var_index(t)]\n')

Fragment(uuid='NORMALIZED-004335',
         path='/verify/validate_axioms.py',
         lineno=501,
         depth=1,
         type='function',
         name='body_to_function',
         text='\n'
              '    def convert(t, values):\n'
              '        if z3.is_int_value(t):\n'
              '            return t.as_long()\n'
              '        if z3.is_app(t):\n'
              '            func = globals()[t.decl().name()]\n'
              '            return func(*[convert(t.arg(i), values) for i in '
              'range(t.num_args())])\n'
              '        elif z3.is_var(t):\n'
              '            return values[z3.get_var_index(t)]\n')

Fragment(uuid='NORMALIZED-004336',
         path='/verify/validate_axioms.py',
         lineno=502,
         depth=3,
         type='function',
         name='convert',
         text='def convert(t, values):\n'
              '        if z3.is_int_value(t):\n'
              '            return t.as_long()\n'
              '        if z3.is_app(t):\n'
              '            func = globals()[t.decl().name()]\n'
              '            return func(*[convert(t.arg(i), values) for i in '
              'range(t.num_args())])\n'
              '        elif z3.is_var(t):\n'
              '            return values[z3.get_var_index(t)]')

Fragment(uuid='NORMALIZED-004337',
         path='/verify/validate_axioms.py',
         lineno=510,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    def function(*vs):\n'
              '        assert len(vs) == len(variables)\n'
              '        # TODO: check value types\n'
              '        return eq(convert(t1, vs[::-1]), convert(t2, '
              'vs[::-1]))\n'
              '\n'
              '    return function\n')

Fragment(uuid='NORMALIZED-004338',
         path='/verify/validate_axioms.py',
         lineno=510,
         depth=1,
         type='function',
         name='body_to_function',
         text='\n'
              '    def function(*vs):\n'
              '        assert len(vs) == len(variables)\n'
              '        # TODO: check value types\n'
              '        return eq(convert(t1, vs[::-1]), convert(t2, '
              'vs[::-1]))\n'
              '\n'
              '    return function')

Fragment(uuid='NORMALIZED-004339',
         path='/verify/validate_axioms.py',
         lineno=511,
         depth=3,
         type='function',
         name='function',
         text='def function(*vs):\n'
              '        assert len(vs) == len(variables)\n'
              '        # TODO: check value types\n'
              '        return eq(convert(t1, vs[::-1]), convert(t2, vs[::-1]))')

Fragment(uuid='NORMALIZED-004340',
         path='/verify/validate_axioms.py',
         lineno=513,
         depth=4,
         type='documentation',
         name='',
         text='# TODO: check value types')

Fragment(uuid='NORMALIZED-004341',
         path='/verify/validate_axioms.py',
         lineno=517,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def check_axiom(s):\n'
              '    """Based on z3.prove, adapted for multiprocessing by '
              'forking at the right place"""\n'
              '    global func\n'
              '    msg = str(list(s))\n'
              '    try:\n'
              '        vs = tuple(\n'
              '            s[i] if v.sort() == P else\n'
              "            Tensor.tensor(s[i], 't{}'.format(i))\n")

Fragment(uuid='NORMALIZED-004342',
         path='/verify/validate_axioms.py',
         lineno=519,
         depth=1,
         type='function',
         name='check_axiom',
         text='def check_axiom(s):\n'
              '    """Based on z3.prove, adapted for multiprocessing by '
              'forking at the right place"""\n'
              '    global func\n'
              '    msg = str(list(s))\n'
              '    try:\n'
              '        vs = tuple(\n'
              '            s[i] if v.sort() == P else\n'
              "            Tensor.tensor(s[i], 't{}'.format(i))\n")

Fragment(uuid='NORMALIZED-004343',
         path='/verify/validate_axioms.py',
         lineno=520,
         depth=4,
         type='documentation',
         name='',
         text='Based on z3.prove, adapted for multiprocessing by forking at '
              'the right place')

Fragment(uuid='NORMALIZED-004344',
         path='/verify/validate_axioms.py',
         lineno=527,
         depth=0,
         type='module',
         name='',
         text='            for i, v in enumerate(variables)\n'
              '        )\n'
              '        assert tuple(x if type(x) is int else x.shape for x in '
              'vs) == s\n'
              '        claim = func(*vs)\n'
              '        s = z3.Solver()\n'
              '        s.add(_relu(0) == 0) # assume relu(0) = 0\n'
              '        s.add(z3.Not(claim))\n'
              '        r = s.check()\n')

Fragment(uuid='NORMALIZED-004345',
         path='/verify/validate_axioms.py',
         lineno=527,
         depth=1,
         type='function',
         name='check_axiom',
         text='            for i, v in enumerate(variables)\n'
              '        )\n'
              '        assert tuple(x if type(x) is int else x.shape for x in '
              'vs) == s\n'
              '        claim = func(*vs)\n'
              '        s = z3.Solver()\n'
              '        s.add(_relu(0) == 0) # assume relu(0) = 0\n'
              '        s.add(z3.Not(claim))\n'
              '        r = s.check()\n')

Fragment(uuid='NORMALIZED-004346',
         path='/verify/validate_axioms.py',
         lineno=532,
         depth=4,
         type='documentation',
         name='',
         text='# assume relu(0) = 0')

Fragment(uuid='NORMALIZED-004347',
         path='/verify/validate_axioms.py',
         lineno=535,
         depth=0,
         type='module',
         name='',
         text='        if r == z3.unsat:\n'
              '            return "{} proved".format(msg)\n'
              '        elif r == z3.unknown:\n'
              '            return "{} failed to prove\\n".format(msg)\n'
              '        elif r == z3.sat:\n'
              '            return "{} counterexample\\n{}".format(msg, '
              's.model())\n'
              '        else:\n'
              '            assert False, r\n'
              '    except BadShapeError:\n'
              '        return "{} skipped".format(msg)\n')

Fragment(uuid='NORMALIZED-004348',
         path='/verify/validate_axioms.py',
         lineno=535,
         depth=1,
         type='function',
         name='check_axiom',
         text='        if r == z3.unsat:\n'
              '            return "{} proved".format(msg)\n'
              '        elif r == z3.unknown:\n'
              '            return "{} failed to prove\\n".format(msg)\n'
              '        elif r == z3.sat:\n'
              '            return "{} counterexample\\n{}".format(msg, '
              's.model())\n'
              '        else:\n'
              '            assert False, r\n'
              '    except BadShapeError:\n'
              '        return "{} skipped".format(msg)')

Fragment(uuid='NORMALIZED-004349',
         path='/verify/validate_axioms.py',
         lineno=538,
         depth=11,
         type='documentation',
         name='',
         text='{} failed to prove\\n')

Fragment(uuid='NORMALIZED-004350',
         path='/verify/validate_axioms.py',
         lineno=540,
         depth=11,
         type='documentation',
         name='',
         text='{} counterexample\\n{}')

Fragment(uuid='NORMALIZED-004351',
         path='/verify/validate_axioms.py',
         lineno=545,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              'def print_function(x):\n'
              '    print x\n'
              '\n'
              '\n'
              "if __name__ == '__main__':\n"
              '\n'
              '    if False:\n'
              '        print "Checking that axioms imply lemmas"\n'
              '        axioms = verify.axioms\n'
              '        lemmas = verify.lemmas\n'
              '        to_assume = [a for a, b in axioms]\n')

Fragment(uuid='NORMALIZED-004352',
         path='/verify/validate_axioms.py',
         lineno=547,
         depth=1,
         type='function',
         name='print_function',
         text='def print_function(x):\n    print x')

Fragment(uuid='NORMALIZED-004353',
         path='/verify/validate_axioms.py',
         lineno=554,
         depth=6,
         type='documentation',
         name='',
         text='Checking that axioms imply lemmas')

Fragment(uuid='NORMALIZED-004354',
         path='/verify/validate_axioms.py',
         lineno=558,
         depth=0,
         type='module',
         name='',
         text='        for i, lem in enumerate(lemmas):\n'
              '            s = z3.Solver()\n')

Fragment(uuid='NORMALIZED-004355',
         path='/verify/validate_axioms.py',
         lineno=560,
         depth=0,
         type='module',
         name='',
         text='            for a in to_assume:\n'
              '                s.add(a)\n'
              '            s.add(z3.Not(lem))\n'
              '            print("Checking lemmas[{}]: {}".format(i, lem))\n'
              '            # print(s)\n'
              '            if s.check() == z3.unsat:\n'
              '                print("Proved!")\n'
              '                to_assume.append(lem)\n'
              '            else:\n'
              '                assert False\n'
              "        print 'Done' + '\\n'*2\n"
              '\n'
              '\n'
              '    if False:\n'
              '        print "Checking axiom redundancies"\n'
              '        axioms = verify.axioms\n'
              "        flags = [z3.Bool('f{}'.format(i)) for i in "
              'range(len(axioms))]\n')

Fragment(uuid='NORMALIZED-004356',
         path='/verify/validate_axioms.py',
         lineno=563,
         depth=12,
         type='documentation',
         name='',
         text='Checking lemmas[{}]: {}')

Fragment(uuid='NORMALIZED-004357',
         path='/verify/validate_axioms.py',
         lineno=574,
         depth=6,
         type='documentation',
         name='',
         text='Checking axiom redundancies')

Fragment(uuid='NORMALIZED-004358',
         path='/verify/validate_axioms.py',
         lineno=577,
         depth=0,
         type='module',
         name='',
         text='        for i, (a,b) in reversed(list(enumerate(axioms))):\n'
              '            s = z3.Solver()\n'
              '            s.set("timeout", 10000)\n')

Fragment(uuid='NORMALIZED-004359',
         path='/verify/validate_axioms.py',
         lineno=580,
         depth=0,
         type='module',
         name='',
         text='            for j, (aa, bb) in enumerate(axioms):\n'
              '                if i == j:\n'
              '                    continue\n'
              '                s.add(z3.Implies(flags[j], aa))\n'
              '            s.add(z3.Not(a))\n'
              '            print("Checking axiom {}".format(i))\n'
              '            if s.check(flags) == z3.unsat:\n'
              '                print "Redundant!"\n'
              '                print axioms[i][0]\n'
              '                core = minimize_core(s)\n'
              '                print "core: {}".format(core)\n'
              '                print s.check(core)\n')

Fragment(uuid='NORMALIZED-004360',
         path='/verify/validate_axioms.py',
         lineno=592,
         depth=0,
         type='module',
         name='',
         text='                for x in core:\n'
              '                    j = int(str(x)[1:])\n'
              '                    print j, axioms[j][0]\n'
              '                assert False\n'
              '            else:\n'
              '                pass\n'
              "        print 'Done' + '\\n'*2\n")

Fragment(uuid='NORMALIZED-004361',
         path='/verify/validate_axioms.py',
         lineno=599,
         depth=0,
         type='module',
         name='',
         text='\n'
              '\n'
              '    if True:\n'
              '        print "Symbolically checking axioms for small tensors"\n'
              '        axioms = verify.axioms[-7:] #[35:]\n'
              '        total_combinations = 0\n'
              '        print now(), "Checking {} '
              'axioms...".format(len(axioms))\n'
              '        spaces = [b() if b is not None else None for a,b in '
              'axioms]\n'
              '        print now(), "Checking a total of {} '
              'combinations...\\n".format(sum(len(x) if x is not None else 0 '
              'for x in spaces))\n')

Fragment(uuid='NORMALIZED-004362',
         path='/verify/validate_axioms.py',
         lineno=602,
         depth=6,
         type='documentation',
         name='',
         text='Symbolically checking axioms for small tensors')

Fragment(uuid='NORMALIZED-004363',
         path='/verify/validate_axioms.py',
         lineno=605,
         depth=8,
         type='documentation',
         name='',
         text='Checking {} axioms...')

Fragment(uuid='NORMALIZED-004364',
         path='/verify/validate_axioms.py',
         lineno=607,
         depth=8,
         type='documentation',
         name='',
         text='Checking a total of {} combinations...\\n')

Fragment(uuid='NORMALIZED-004365',
         path='/verify/validate_axioms.py',
         lineno=608,
         depth=0,
         type='module',
         name='',
         text='        for (a,b), space in zip(axioms, spaces):\n'
              '            if space is None:\n'
              '                continue\n'
              '            print now(), "Checking:\\n{}".format(a)\n'
              '            assert a.is_forall()\n'
              '            variables = [z3.Const(a.var_name(i), a.var_sort(i)) '
              'for i in range(a.num_vars())]\n'
              '            assert all(len(x) == len(variables) for x in '
              'space)\n'
              '            func = body_to_function(variables, a.body())\n'
              '            n_proved = 0\n'
              '            n_skipped = 0\n'
              '            print "checking {} '
              'combinations...".format(len(space))\n'
              '            total_combinations += len(space)\n'
              '            pool = Pool(cpu_count()) # fork after computing '
              'func\n'
              '            results = []\n')

Fragment(uuid='NORMALIZED-004366',
         path='/verify/validate_axioms.py',
         lineno=618,
         depth=10,
         type='documentation',
         name='',
         text='checking {} combinations...')

Fragment(uuid='NORMALIZED-004367',
         path='/verify/validate_axioms.py',
         lineno=620,
         depth=6,
         type='documentation',
         name='',
         text='# fork after computing func')

Fragment(uuid='NORMALIZED-004368',
         path='/verify/validate_axioms.py',
         lineno=622,
         depth=0,
         type='module',
         name='',
         text='            for s in space:\n'
              '                if False:\n'
              '                    # this is useful for better error '
              'reporting\n'
              '                    st = check_axiom(s)\n'
              '                    print st\n'
              "                    if 'skipped' in st:\n"
              '                        n_skipped += 1\n'
              '                    else:\n'
              '                        n_proved += 1\n'
              '                else:\n'
              '                    '
              'results.append(pool.apply_async(check_axiom, [s], '
              'callback=print_function))\n'
              '            # get all results, in order to raise exceptions if '
              'they occurred\n')

Fragment(uuid='NORMALIZED-004369',
         path='/verify/validate_axioms.py',
         lineno=624,
         depth=9,
         type='documentation',
         name='',
         text='# this is useful for better error reporting')

Fragment(uuid='NORMALIZED-004370',
         path='/verify/validate_axioms.py',
         lineno=633,
         depth=6,
         type='documentation',
         name='',
         text='# get all results, in order to raise exceptions if they occurred')

Fragment(uuid='NORMALIZED-004371',
         path='/verify/validate_axioms.py',
         lineno=634,
         depth=0,
         type='module',
         name='',
         text='            for r in results:\n'
              '                st = r.get(10**10)\n'
              "                if 'skipped' in st:\n"
              '                    n_skipped += 1\n'
              '                else:\n'
              '                    n_proved += 1\n'
              '            pool.close()\n'
              '            pool.join()\n'
              '            print now(), "checked {}, skipped '
              '{}\\n".format(n_proved, n_skipped)\n'
              '        print now(), "Done (total of {} '
              'combinations)".format(total_combinations)\n')

Fragment(uuid='NORMALIZED-004372',
         path='/verify/validate_axioms.py',
         lineno=642,
         depth=10,
         type='documentation',
         name='',
         text='checked {}, skipped {}\\n')

Fragment(uuid='NORMALIZED-004373',
         path='/verify/validate_axioms.py',
         lineno=643,
         depth=8,
         type='documentation',
         name='',
         text='Done (total of {} combinations)')

Fragment(uuid='NORMALIZED-004374',
         path='/verify/verify.py',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='#! /usr/bin/python\n'
              '\n'
              'import sys\n'
              'import os\n'
              'from itertools import product\n'
              '\n'
              'import z3\n'
              'from z3 import ForAll\n'
              '\n'
              "T = z3.DeclareSort('T')\n"
              'P = z3.IntSort()\n'
              '\n'
              'OP_INPUT, \\\n'
              'OP_WEIGHT, \\\n'
              'OP_ANY, \\\n'
              'OP_CONV2D, \\\n'
              'OP_DROPOUT, \\\n'
              'OP_LINEAR, \\\n'
              'OP_POOL2D_MAX, \\\n'
              'OP_POOL2D_AVG, \\\n'
              'OP_RELU, \\\n'
              'OP_SIGMOID, \\\n'
              'OP')

Fragment(uuid='NORMALIZED-004375',
         path='/verify/verify.py',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='Python: /verify/verify.py\n'
              '  Functions: to_z3\n'
              '  Variables and usages: AC_MODE_NONE AC_MODE_RELU '
              'AC_MODE_SIGMOID AC_MODE_TANH Const Consts D DeclareSort ForAll '
              'Function IntSort N OP_ANY OP_BATCHNORM OP_CONCAT '
              'OP_CONSTANT_ICONV OP_CONSTANT_IMM OP_CONSTANT_ONE '
              'OP_CONSTANT_POOL OP_CONV2D OP_DROPOUT OP_ENLARGE OP_EW_ADD '
              'OP_EW_MUL OP_INPUT OP_LINEAR OP_MATMUL OP_MERGE_GCONV OP_MUL '
              'OP_POOL2D_AVG OP_POOL2D_MAX OP_RELU OP_RESHAPE OP_SIGMOID '
              'OP_SPLIT OP_TANH OP_TRANSPOSE OP_WEIGHT P PD_MODE_SAME '
              'PD_MODE_VALID PM_ACTI PM_AXIS PM_GROUP PM_KERNEL_H PM_KERNEL_W '
              'PM_MERGE_GCONV_COUNT PM_NUMDIM PM_NUM_INPUTS PM_NUM_OUTPUTS '
              'PM_OP_TYPE PM_OUTSHUFFLE PM_PAD PM_PERM PM_STRIDE_H PM_STRIDE_W '
              'ParseFromString RuleCollection Solver T Tensor acti append args '
              'argv axioms basename blacklist check concat_0 const_iconv_0 '
              'const_imm_0 const_one_0 const_pool_0 conv2d_0 dstOp dstOpId '
              'dstTsId dst_tensor enlarge_0 enumerate ewadd_0 ewmul_0 exit '
              'format globals input itertools lemmas mappedOutput matmul_0 '
              'name opId open operator_data output para params path '
              'pool2d_avg_0 pool2d_max_0 print product range read relu_0 '
              'repeat rule rules rules_pb2 scalar_mul_0 split_0 split_1 srcOp '
              'srcOpId srcTsId src_tensor tensor transpose_0 tsId tuple type '
              'unsat value values\n')

Fragment(uuid='NORMALIZED-004376',
         path='/verify/verify.py',
         lineno=3,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004377',
         path='/verify/verify.py',
         lineno=4,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004378',
         path='/verify/verify.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004379',
         path='/verify/verify.py',
         lineno=5,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004380',
         path='/verify/verify.py',
         lineno=7,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004381',
         path='/verify/verify.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='from')

Fragment(uuid='NORMALIZED-004382',
         path='/verify/verify.py',
         lineno=8,
         depth=1,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004383',
         path='/verify/verify.py',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='_TANH, \\\n'
              'OP_BATCHNORM, \\\n'
              'OP_CONCAT, \\\n'
              'OP_SPLIT, \\\n'
              'OP_RESHAPE, \\\n'
              'OP_TRANSPOSE, \\\n'
              'OP_EW_ADD, \\\n'
              'OP_EW_MUL, \\\n'
              'OP_MATMUL, \\\n'
              'OP_MUL, \\\n'
              'OP_ENLARGE, \\\n'
              'OP_MERGE_GCONV, \\\n'
              'OP_CONSTANT_IMM, \\\n'
              'OP_CONSTANT_ICONV, \\\n'
              'OP_CONSTANT_ONE, \\\n'
              'OP_CONSTANT_POOL = range(26)\n'
              '\n'
              'PM_OP_TYPE, \\\n'
              'PM_NUM_INPUTS, \\\n'
              'PM')

Fragment(uuid='NORMALIZED-004384',
         path='/verify/verify.py',
         lineno=42,
         depth=0,
         type='module',
         name='',
         text='_NUM_OUTPUTS, \\\n'
              'PM_GROUP, \\\n'
              'PM_KERNEL_H, \\\n'
              'PM_KERNEL_W, \\\n'
              'PM_STRIDE_H, \\\n'
              'PM_STRIDE_W, \\\n'
              'PM_PAD, \\\n'
              'PM_ACTI, \\\n'
              'PM_NUMDIM, \\\n'
              'PM_AXIS, \\\n'
              'PM_PERM, \\\n'
              'PM_OUTSHUFFLE, \\\n'
              'PM_MERGE_GCONV_COUNT = range(15)\n'
              '\n'
              'AC_MODE_NONE, \\\n'
              'AC_MODE_SIGMOID, \\\n'
              'AC_MODE_RELU, \\\n'
              'AC_MODE_TANH = range(4)\n'
              '\n'
              'PD_MODE_SAME')

Fragment(uuid='NORMALIZED-004385',
         path='/verify/verify.py',
         lineno=61,
         depth=0,
         type='module',
         name='',
         text=', \\\n'
              'PD_MODE_VALID = range(2)\n'
              '\n'
              '# map opId to (name, (key,rng)*, input arity, outputa arity, '
              'possible input dimensions)\n'
              'operator_data = {\n'
              "    OP_CONSTANT_POOL: ('const_pool', ((PM_KERNEL_H, {3}), "
              '(PM_KERNEL_W, {3})), 0, 1, {}),\n'
              "    OP_CONSTANT_ICONV: ('const_iconv', ((PM_KERNEL_H, {3})")

Fragment(uuid='NORMALIZED-004386',
         path='/verify/verify.py',
         lineno=64,
         depth=0,
         type='documentation',
         name='',
         text='# map opId to (name, (key,rng)*, input arity, outputa arity, '
              'possible input dimensions)')

Fragment(uuid='NORMALIZED-004387',
         path='/verify/verify.py',
         lineno=67,
         depth=0,
         type='module',
         name='',
         text=', (PM_KERNEL_W, {3})), 0, 1, {}),\n'
              "    OP_CONSTANT_IMM: ('const_imm', (), 0, 1, {}),\n"
              "    OP_CONSTANT_ONE: ('const_one', (), 0, 1, {}),\n"
              "    OP_CONV2D: ('conv2d', ((PM_STRIDE_H, {1,2}), (PM_STRIDE_W, "
              '{1,2}), (PM_PAD, {0,1}), (PM_ACTI, {AC_MODE_NONE, '
              'AC_MODE_RELU})), 2, 1, {4}),\n'
              '    OP_')

Fragment(uuid='NORMALIZED-004388',
         path='/verify/verify.py',
         lineno=71,
         depth=0,
         type='module',
         name='',
         text="POOL2D_MAX: ('pool2d_max', ((PM_KERNEL_H, {3}), (PM_KERNEL_W, "
              '{3}), (PM_STRIDE_H, {1, 2}), (PM_STRIDE_W, {1,2}), (PM_PAD, '
              '{0,1})), 1, 1, {4}),\n'
              "    OP_POOL2D_AVG: ('pool2d_avg', ((PM_KERNEL_H, {3}), "
              '(PM_KERNEL_W, {3}), (PM_STRIDE_H, {1, 2}), (PM_STRIDE_W, '
              '{1,2}), (PM_PAD, {0,1})), 1, ')

Fragment(uuid='NORMALIZED-004389',
         path='/verify/verify.py',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='1, {4}),\n'
              "    OP_RELU: ('relu', (), 1, 1, {2, 3, 4}),\n"
              "    OP_CONCAT: ('concat', ((PM_AXIS, {0, 1, 2, 3}),), 2, 1, "
              '{2,3,4}),\n'
              "    OP_SPLIT: ('split', ((PM_AXIS, {0, 1, 2, 3}),), 1, 2, "
              '{2,3,4}),\n'
              "    OP_TRANSPOSE: ('transpose', (), 1, 1, {2}),\n"
              "    OP_ENLARGE: ('enlarge', ((PM_KERNEL_H, {")

Fragment(uuid='NORMALIZED-004390',
         path='/verify/verify.py',
         lineno=77,
         depth=0,
         type='module',
         name='',
         text='3}), (PM_KERNEL_W, {3})), 1, 1, {4}),\n'
              "    OP_EW_ADD: ('ewadd', (), 2, 1, {2,3,4}),\n"
              "    OP_EW_MUL: ('ewmul', (), 2, 1, {2,3,4}),\n"
              "    OP_MATMUL: ('matmul', (), 2, 1, {2}),\n"
              "    OP_MUL: ('scalar_mul', (), 2, 1, {2, 3, 4}) # multiply a "
              'tensor (first argument) with a scalar (0-D tensor)\n'
              '}\n')

Fragment(uuid='NORMALIZED-004391',
         path='/verify/verify.py',
         lineno=81,
         depth=3,
         type='documentation',
         name='',
         text='# multiply a tensor (first argument) with a scalar (0-D tensor)')

Fragment(uuid='NORMALIZED-004392',
         path='/verify/verify.py',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='\nfor d in operator_data.values():\n')

Fragment(uuid='NORMALIZED-004393',
         path='/verify/verify.py',
         lineno=85,
         depth=0,
         type='module',
         name='',
         text='    for i in range(d[3]):\n'
              "        name = '{}_{}'.format(d[0], i)\n"
              '        globals()[name] = z3.Function(name, *( len(d[1]) * [P] '
              '+ d[2] * [T] + [T]))\n'
              '\n'
              "x,y,z,w, one = z3.Consts('x y z w one', T)\n"
              "sx, sy, kx, ky, pad, acti, ax = z3.Consts('sx sy kx ky pad acti "
              "ax', P)\n"
              '\n'
              'N = [1,2,3,4] # change this to control number of combinations '
              'for symbolic validation, e.')

Fragment(uuid='NORMALIZED-004394',
         path='/verify/verify.py',
         lineno=90,
         depth=5,
         type='documentation',
         name='',
         text='sx sy kx ky pad acti ax')

Fragment(uuid='NORMALIZED-004395',
         path='/verify/verify.py',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text='g., [1,2], [1,3] or [3,4] each provide a reasonable experiment '
              'to run and go for coffee (assuming 8 cores)\n'
              'D = [1,3]\n'
              '\n'
              '# list of axioms with list of possible values for '
              'verify_axioms.py. possible values are actual values for '
              'parameters, and shapes for tensors\n'
              'axioms = [\n'
              '\n'
              '    # ewadd and ewmul are associative, commutative and '
              'distributive\n'
              '\n'
              '    # ewadd is ')

Fragment(uuid='NORMALIZED-004396',
         path='/verify/verify.py',
         lineno=92,
         depth=0,
         type='documentation',
         name='',
         text='# change this to control number of combinations for symbolic '
              'validation, e.g., [1,2], [1,3] or [3,4] each provide a '
              'reasonable experiment to run and go for coffee (assuming 8 '
              'cores)')

Fragment(uuid='NORMALIZED-004397',
         path='/verify/verify.py',
         lineno=95,
         depth=0,
         type='documentation',
         name='',
         text='# list of axioms with list of possible values for '
              'verify_axioms.py. possible values are actual values for '
              'parameters, and shapes for tensors')

Fragment(uuid='NORMALIZED-004398',
         path='/verify/verify.py',
         lineno=98,
         depth=3,
         type='documentation',
         name='',
         text='# ewadd and ewmul are associative, commutative and distributive')

Fragment(uuid='NORMALIZED-004399',
         path='/verify/verify.py',
         lineno=100,
         depth=0,
         type='module',
         name='',
         text='associative\n'
              '    (ForAll([x,y,z], ewadd_0(x,ewadd_0(y, z)) == '
              'ewadd_0(ewadd_0(x,y),z)),\n'
              '     lambda : [(s,s,s) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # ewadd is commutative\n'
              '    (ForAll([x,y], ewadd_0(x,y) == ewadd_0(y, x)),\n'
              '     lambda : [(s,s) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # ewmul is associative\n'
              '    (Fo')

Fragment(uuid='NORMALIZED-004400',
         path='/verify/verify.py',
         lineno=100,
         depth=3,
         type='documentation',
         name='',
         text='# ewadd is associative')

Fragment(uuid='NORMALIZED-004401',
         path='/verify/verify.py',
         lineno=104,
         depth=3,
         type='documentation',
         name='',
         text='# ewadd is commutative')

Fragment(uuid='NORMALIZED-004402',
         path='/verify/verify.py',
         lineno=108,
         depth=3,
         type='documentation',
         name='',
         text='# ewmul is associative')

Fragment(uuid='NORMALIZED-004403',
         path='/verify/verify.py',
         lineno=109,
         depth=0,
         type='module',
         name='',
         text='rAll([x,y,z], ewmul_0(x,ewmul_0(y, z)) == '
              'ewmul_0(ewmul_0(x,y),z)),\n'
              '     lambda :[(s,s,s) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # ewmul is commutative\n'
              '    (ForAll([x,y], ewmul_0(x,y) == ewmul_0(y, x)),\n'
              '     lambda : [(s,s) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # ewadd and ewmul are distributive\n'
              '    (ForAll([x,')

Fragment(uuid='NORMALIZED-004404',
         path='/verify/verify.py',
         lineno=112,
         depth=3,
         type='documentation',
         name='',
         text='# ewmul is commutative')

Fragment(uuid='NORMALIZED-004405',
         path='/verify/verify.py',
         lineno=116,
         depth=3,
         type='documentation',
         name='',
         text='# ewadd and ewmul are distributive')

Fragment(uuid='NORMALIZED-004406',
         path='/verify/verify.py',
         lineno=117,
         depth=0,
         type='module',
         name='',
         text='y,z], ewmul_0(ewadd_0(x,y), z) == ewadd_0(ewmul_0(x, z), '
              'ewmul_0(y, z))),\n'
              '     lambda : [(s,s,s) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # scalar_mul axioms\n'
              '\n'
              '    # scalar_mul is associative\n'
              '    (ForAll([x,y,w], scalar_mul_0(scalar_mul_0(x,y),w) == '
              'scalar_mul_0(x,scalar_mul_0(y,w))),\n'
              '     lambda : [(s,(),()) for dim in [2,3,4] for s i')

Fragment(uuid='NORMALIZED-004407',
         path='/verify/verify.py',
         lineno=122,
         depth=3,
         type='documentation',
         name='',
         text='# scalar_mul is associative')

Fragment(uuid='NORMALIZED-004408',
         path='/verify/verify.py',
         lineno=124,
         depth=0,
         type='module',
         name='',
         text='n product(N, repeat=dim)] ),\n'
              '\n'
              '    # scalar_mul distributes over ewadd\n'
              '    (ForAll([x,y,w], scalar_mul_0(ewadd_0(x,y),w) == '
              'ewadd_0(scalar_mul_0(x,w), scalar_mul_0(y,w))),\n'
              '     lambda : [(s,s,()) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # scalar_mul commutes with ewmul\n'
              '    (ForAll([x,y,w], scalar_mul_0(ewmul_0(x,y),w) == '
              'ewmul_0(x,scal')

Fragment(uuid='NORMALIZED-004409',
         path='/verify/verify.py',
         lineno=126,
         depth=3,
         type='documentation',
         name='',
         text='# scalar_mul distributes over ewadd')

Fragment(uuid='NORMALIZED-004410',
         path='/verify/verify.py',
         lineno=130,
         depth=3,
         type='documentation',
         name='',
         text='# scalar_mul commutes with ewmul')

Fragment(uuid='NORMALIZED-004411',
         path='/verify/verify.py',
         lineno=131,
         depth=0,
         type='module',
         name='',
         text='ar_mul_0(y,w))),\n'
              '     lambda : [(s,s,()) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # scalar_mul commutes with transpose\n'
              '    (ForAll([x, w], scalar_mul_0(transpose_0(x), w) == '
              'transpose_0(scalar_mul_0(x, w))),\n'
              '     lambda : [(s,()) for s in product(N, repeat=2)] ),\n'
              '\n'
              '    # scalar_mul commutes with matmul (note that the other is '
              'obtained ')

Fragment(uuid='NORMALIZED-004412',
         path='/verify/verify.py',
         lineno=134,
         depth=3,
         type='documentation',
         name='',
         text='# scalar_mul commutes with transpose')

Fragment(uuid='NORMALIZED-004413',
         path='/verify/verify.py',
         lineno=138,
         depth=0,
         type='module',
         name='',
         text='using transpose)\n'
              '    (ForAll([x,y,w], scalar_mul_0(matmul_0(x,y),w) == '
              'matmul_0(x,scalar_mul_0(y,w))),\n'
              '     lambda : [((n1,n2),(n2, n3),()) for n1,n2,n3 in '
              'product(N,repeat=3) ]),\n'
              '\n'
              '    # scalar_mul and concat\n'
              '    (ForAll([ax,x,y,w], scalar_mul_0(concat_0(ax, x, y), w) == '
              'concat_0(ax, scalar_mul_0(x, w), scalar_mul_0(y, w))),\n'
              '     lambda : [(ax,s1,s2,())\n')

Fragment(uuid='NORMALIZED-004414',
         path='/verify/verify.py',
         lineno=138,
         depth=3,
         type='documentation',
         name='',
         text='# scalar_mul commutes with matmul (note that the other is '
              'obtained using transpose)')

Fragment(uuid='NORMALIZED-004415',
         path='/verify/verify.py',
         lineno=142,
         depth=3,
         type='documentation',
         name='',
         text='# scalar_mul and concat')

Fragment(uuid='NORMALIZED-004416',
         path='/verify/verify.py',
         lineno=145,
         depth=0,
         type='module',
         name='',
         text='               for dim in [2,3,4]\n')

Fragment(uuid='NORMALIZED-004417',
         path='/verify/verify.py',
         lineno=146,
         depth=0,
         type='module',
         name='',
         text='               for s1 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004418',
         path='/verify/verify.py',
         lineno=147,
         depth=0,
         type='module',
         name='',
         text='               for s2 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004419',
         path='/verify/verify.py',
         lineno=148,
         depth=0,
         type='module',
         name='',
         text='               for ax in range(dim)\n'
              '               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    # scalar_mul and conv2d\n'
              '\n'
              '    (ForAll([sx,sy,pad,acti,x,y,w], '
              'conv2d_0(sx,sy,pad,acti,scalar_mul_0(x,w),y) == '
              'conv2d_0(sx,sy,pad,acti,x,scalar_mul_0(y,w))),\n'
              '     lambda : [(sx, sy, pad, acti, (n,c,h,w), (c1,c,d1,d2), '
              '())\n')

Fragment(uuid='NORMALIZED-004420',
         path='/verify/verify.py',
         lineno=152,
         depth=3,
         type='documentation',
         name='',
         text='# scalar_mul and conv2d')

Fragment(uuid='NORMALIZED-004421',
         path='/verify/verify.py',
         lineno=156,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004422',
         path='/verify/verify.py',
         lineno=157,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004423',
         path='/verify/verify.py',
         lineno=158,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004424',
         path='/verify/verify.py',
         lineno=159,
         depth=0,
         type='module',
         name='',
         text='               for acti in [AC_MODE_NONE, AC_MODE_RELU]\n')

Fragment(uuid='NORMALIZED-004425',
         path='/verify/verify.py',
         lineno=160,
         depth=0,
         type='module',
         name='',
         text='               for n,c,h,w,c1 in product(N,repeat=5)\n')

Fragment(uuid='NORMALIZED-004426',
         path='/verify/verify.py',
         lineno=161,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004427',
         path='/verify/verify.py',
         lineno=162,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n'
              '               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    (ForAll([sx,sy,pad,x,y,w], '
              'scalar_mul_0(conv2d_0(sx,sy,pad,AC_MODE_NONE,x,y),w) == '
              'conv2d_0(sx,sy,pad,AC_MODE_NONE,scalar_mul_0(x,w),y)),\n'
              '     lambda : [(sx, sy, pad, (n,c,h,w), (c1,c,d1,d2), ())\n')

Fragment(uuid='NORMALIZED-004428',
         path='/verify/verify.py',
         lineno=168,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004429',
         path='/verify/verify.py',
         lineno=169,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004430',
         path='/verify/verify.py',
         lineno=170,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004431',
         path='/verify/verify.py',
         lineno=171,
         depth=0,
         type='module',
         name='',
         text='               for n,c,h,w,c1 in product(N,repeat=5)\n')

Fragment(uuid='NORMALIZED-004432',
         path='/verify/verify.py',
         lineno=172,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004433',
         path='/verify/verify.py',
         lineno=173,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n')

Fragment(uuid='NORMALIZED-004434',
         path='/verify/verify.py',
         lineno=174,
         depth=0,
         type='module',
         name='',
         text='               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # relu axioms\n'
              '\n'
              "    # doesn't seem like this is needed\n"
              '    # relu is idempotent\n'
              '    #(ForAll([x], relu_0(x) == relu_0(relu_0(x))),\n'
              '    # lambda : [(s,) for dim in [2,3,4')

Fragment(uuid='NORMALIZED-004435',
         path='/verify/verify.py',
         lineno=179,
         depth=3,
         type='documentation',
         name='',
         text="# doesn't seem like this is needed")

Fragment(uuid='NORMALIZED-004436',
         path='/verify/verify.py',
         lineno=180,
         depth=3,
         type='documentation',
         name='',
         text='# relu is idempotent')

Fragment(uuid='NORMALIZED-004437',
         path='/verify/verify.py',
         lineno=181,
         depth=3,
         type='documentation',
         name='',
         text='#(ForAll([x], relu_0(x) == relu_0(relu_0(x))),')

Fragment(uuid='NORMALIZED-004438',
         path='/verify/verify.py',
         lineno=182,
         depth=0,
         type='module',
         name='',
         text='] for s in product(N, repeat=dim)] ),\n'
              '\n'
              '    # relu and conv2d\n'
              '    (ForAll([sx, sy, pad, x, y], relu_0(conv2d_0(sx, sy, pad, '
              'AC_MODE_NONE, x, y)) == conv2d_0(sx, sy, pad, AC_MODE_RELU, x, '
              'y)),\n'
              '     lambda : [(sx, sy, pad, (n,c,h,w), (c1,c,d1,d2))\n')

Fragment(uuid='NORMALIZED-004439',
         path='/verify/verify.py',
         lineno=182,
         depth=3,
         type='documentation',
         name='',
         text='# lambda : [(s,) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),')

Fragment(uuid='NORMALIZED-004440',
         path='/verify/verify.py',
         lineno=187,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004441',
         path='/verify/verify.py',
         lineno=188,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004442',
         path='/verify/verify.py',
         lineno=189,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004443',
         path='/verify/verify.py',
         lineno=190,
         depth=0,
         type='module',
         name='',
         text='               for n,c,h,w,c1 in product(N,repeat=5)\n')

Fragment(uuid='NORMALIZED-004444',
         path='/verify/verify.py',
         lineno=191,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004445',
         path='/verify/verify.py',
         lineno=192,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n'
              '               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # relu and concat\n'
              '    (ForAll([ax, x, y], relu_0(concat_0(ax, x, y)) == '
              'concat_0(ax, relu_0(x), relu_0(y))),\n'
              '     lambda : [(ax,s1,s2)\n')

Fragment(uuid='NORMALIZED-004446',
         path='/verify/verify.py',
         lineno=199,
         depth=0,
         type='module',
         name='',
         text='               for dim in [2,3,4]\n')

Fragment(uuid='NORMALIZED-004447',
         path='/verify/verify.py',
         lineno=200,
         depth=0,
         type='module',
         name='',
         text='               for s1 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004448',
         path='/verify/verify.py',
         lineno=201,
         depth=0,
         type='module',
         name='',
         text='               for s2 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004449',
         path='/verify/verify.py',
         lineno=202,
         depth=0,
         type='module',
         name='',
         text='               for ax in range(dim)\n')

Fragment(uuid='NORMALIZED-004450',
         path='/verify/verify.py',
         lineno=203,
         depth=0,
         type='module',
         name='',
         text='               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    # relu and transpose commute\n'
              '    (ForAll([x], relu_0(transpose_0(x)) == '
              'transpose_0(relu_0(x))),\n'
              '     lambda : [(s,) for s in product(N, repeat=2)] ),\n'
              '\n'
              '   # conv2d axioms\n'
              ' ')

Fragment(uuid='NORMALIZED-004451',
         path='/verify/verify.py',
         lineno=206,
         depth=3,
         type='documentation',
         name='',
         text='# relu and transpose commute')

Fragment(uuid='NORMALIZED-004452',
         path='/verify/verify.py',
         lineno=211,
         depth=0,
         type='module',
         name='',
         text='   (ForAll([sx, sy, pad, x, y, z], conv2d_0(sx, sy, pad, '
              'AC_MODE_NONE, x, ewadd_0(y, z)) == ewadd_0(conv2d_0(sx, sy, '
              'pad, AC_MODE_NONE, x, y), conv2d_0(sx, sy, pad, AC_MODE_NONE, '
              'x, z))),\n'
              '     lambda : [(sx, sy, pad, (n,c,h,w), (c1,c,d1,d2), '
              '(c1,c,d1,d2))\n')

Fragment(uuid='NORMALIZED-004453',
         path='/verify/verify.py',
         lineno=213,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004454',
         path='/verify/verify.py',
         lineno=214,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004455',
         path='/verify/verify.py',
         lineno=215,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004456',
         path='/verify/verify.py',
         lineno=216,
         depth=0,
         type='module',
         name='',
         text='               for n,c,h,w,c1 in product(N,repeat=5)\n')

Fragment(uuid='NORMALIZED-004457',
         path='/verify/verify.py',
         lineno=217,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004458',
         path='/verify/verify.py',
         lineno=218,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n')

Fragment(uuid='NORMALIZED-004459',
         path='/verify/verify.py',
         lineno=219,
         depth=0,
         type='module',
         name='',
         text='               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '               # if (\n'
              '               #     1 + (h + 2 * vpx - d1) / sx > 0 and\n'
              '               #     1 + (w + 2 * vpy - d2) / sy > 0 and\n'
              '               #     (vpx != 1 or d1 != 1) and\n'
              '               #     (vpy != 1 or d2 != ')

Fragment(uuid='NORMALIZED-004460',
         path='/verify/verify.py',
         lineno=221,
         depth=6,
         type='documentation',
         name='',
         text='#     1 + (h + 2 * vpx - d1) / sx > 0 and')

Fragment(uuid='NORMALIZED-004461',
         path='/verify/verify.py',
         lineno=222,
         depth=6,
         type='documentation',
         name='',
         text='#     1 + (w + 2 * vpy - d2) / sy > 0 and')

Fragment(uuid='NORMALIZED-004462',
         path='/verify/verify.py',
         lineno=223,
         depth=6,
         type='documentation',
         name='',
         text='#     (vpx != 1 or d1 != 1) and')

Fragment(uuid='NORMALIZED-004463',
         path='/verify/verify.py',
         lineno=224,
         depth=0,
         type='module',
         name='',
         text='1)\n'
              '               # )\n'
              '     ]),\n'
              '\n'
              '    (ForAll([sx, sy, pad, x, y, z], conv2d_0(sx, sy, pad, '
              'AC_MODE_NONE, ewadd_0(x, y), z) == ewadd_0(conv2d_0(sx, sy, '
              'pad, AC_MODE_NONE, x, z), conv2d_0(sx, sy, pad, AC_MODE_NONE, '
              'y, z))),\n'
              '     lambda : [(sx, sy, pad, (n,c,h,w), (n,c,h,w), '
              '(c1,c,d1,d2))\n')

Fragment(uuid='NORMALIZED-004464',
         path='/verify/verify.py',
         lineno=224,
         depth=6,
         type='documentation',
         name='',
         text='#     (vpy != 1 or d2 != 1)')

Fragment(uuid='NORMALIZED-004465',
         path='/verify/verify.py',
         lineno=230,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004466',
         path='/verify/verify.py',
         lineno=231,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004467',
         path='/verify/verify.py',
         lineno=232,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004468',
         path='/verify/verify.py',
         lineno=233,
         depth=0,
         type='module',
         name='',
         text='               for n,c,h,w,c1 in product(N,repeat=5)\n')

Fragment(uuid='NORMALIZED-004469',
         path='/verify/verify.py',
         lineno=234,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004470',
         path='/verify/verify.py',
         lineno=235,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n')

Fragment(uuid='NORMALIZED-004471',
         path='/verify/verify.py',
         lineno=236,
         depth=0,
         type='module',
         name='',
         text='               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # a special axiom for conv and matmul\n'
              '\n'
              '    (ForAll([sx, sy, pad, x, y, z, w], ewadd_0(conv2d_0(sx, sy, '
              'pad, AC_MODE_NONE, x, y),')

Fragment(uuid='NORMALIZED-004472',
         path='/verify/verify.py',
         lineno=239,
         depth=3,
         type='documentation',
         name='',
         text='# a special axiom for conv and matmul')

Fragment(uuid='NORMALIZED-004473',
         path='/verify/verify.py',
         lineno=241,
         depth=0,
         type='module',
         name='',
         text=' conv2d_0(sx, sy, pad, AC_MODE_NONE, z, w)) == conv2d_0(sx, sy, '
              'pad, AC_MODE_NONE, concat_0(1, x, z), concat_0(1, y, w))),\n'
              '     lambda : [(sx, sy, pad, (n,c1,h,w), (co,c1,d1,d2), '
              '(n,c2,h,w), (co,c2,d1,d2))\n')

Fragment(uuid='NORMALIZED-004474',
         path='/verify/verify.py',
         lineno=243,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004475',
         path='/verify/verify.py',
         lineno=244,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004476',
         path='/verify/verify.py',
         lineno=245,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004477',
         path='/verify/verify.py',
         lineno=246,
         depth=0,
         type='module',
         name='',
         text='               for n,c1,c2,co,h,w in product(N,repeat=6)\n')

Fragment(uuid='NORMALIZED-004478',
         path='/verify/verify.py',
         lineno=247,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004479',
         path='/verify/verify.py',
         lineno=248,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n')

Fragment(uuid='NORMALIZED-004480',
         path='/verify/verify.py',
         lineno=249,
         depth=0,
         type='module',
         name='',
         text='               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # concat axioms\n'
              '\n'
              '    # matmul and concat\n'
              '    (ForAll([x, y, z, w], ewadd_0(matmul_0(x, y), matmul_0(z, '
              'w)) == matmul_0(concat_0(1, x, z), concat_0(0, y, w))),\n'
              '     la')

Fragment(uuid='NORMALIZED-004481',
         path='/verify/verify.py',
         lineno=256,
         depth=0,
         type='module',
         name='',
         text='mbda :[((n1,n2),(n2, n3),(n1,n4),(n4,n3)) for n1,n2,n3,n4 in '
              'product(N,repeat=4)]),\n'
              '\n'
              '\n'
              '    (ForAll([ax, x, y, z, w], concat_0(ax, ewadd_0(x, y), '
              'ewadd_0(z, w)) == ewadd_0(concat_0(ax, x, z), concat_0(ax, y, '
              'w))),\n'
              '     lambda : [(ax,s1,s1,s2,s2)\n')

Fragment(uuid='NORMALIZED-004482',
         path='/verify/verify.py',
         lineno=261,
         depth=0,
         type='module',
         name='',
         text='               for dim in [2,3,4]\n')

Fragment(uuid='NORMALIZED-004483',
         path='/verify/verify.py',
         lineno=262,
         depth=0,
         type='module',
         name='',
         text='               for s1 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004484',
         path='/verify/verify.py',
         lineno=263,
         depth=0,
         type='module',
         name='',
         text='               for s2 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004485',
         path='/verify/verify.py',
         lineno=264,
         depth=0,
         type='module',
         name='',
         text='               for ax in range(dim)\n'
              '               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    (ForAll([ax, x, y, z, w], concat_0(ax, ewmul_0(x, y), '
              'ewmul_0(z, w)) == ewmul_0(concat_0(ax, x, z), concat_0(ax, y, '
              'w))),\n'
              '     lambda : [(ax,s1,s1,s2,s2)\n')

Fragment(uuid='NORMALIZED-004486',
         path='/verify/verify.py',
         lineno=270,
         depth=0,
         type='module',
         name='',
         text='               for dim in [2,3,4]\n')

Fragment(uuid='NORMALIZED-004487',
         path='/verify/verify.py',
         lineno=271,
         depth=0,
         type='module',
         name='',
         text='               for s1 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004488',
         path='/verify/verify.py',
         lineno=272,
         depth=0,
         type='module',
         name='',
         text='               for s2 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004489',
         path='/verify/verify.py',
         lineno=273,
         depth=0,
         type='module',
         name='',
         text='               for ax in range(dim)\n')

Fragment(uuid='NORMALIZED-004490',
         path='/verify/verify.py',
         lineno=274,
         depth=0,
         type='module',
         name='',
         text='               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    (ForAll([sx, sy, pad, acti, x, y, z], concat_0(0, '
              'conv2d_0(sx, sy, pad, acti, x, z')

Fragment(uuid='NORMALIZED-004491',
         path='/verify/verify.py',
         lineno=277,
         depth=0,
         type='module',
         name='',
         text='), conv2d_0(sx, sy, pad, acti, y, z)) == conv2d_0(sx, sy, pad, '
              'acti, concat_0(0, x, y), z)),\n'
              '     lambda : [(sx, sy, pad, acti, (n1,c,h,w), (n2,c,h,w), '
              '(c1,c,d1,d2))\n')

Fragment(uuid='NORMALIZED-004492',
         path='/verify/verify.py',
         lineno=279,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004493',
         path='/verify/verify.py',
         lineno=280,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004494',
         path='/verify/verify.py',
         lineno=281,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004495',
         path='/verify/verify.py',
         lineno=282,
         depth=0,
         type='module',
         name='',
         text='               for acti in [AC_MODE_NONE, AC_MODE_RELU]\n')

Fragment(uuid='NORMALIZED-004496',
         path='/verify/verify.py',
         lineno=283,
         depth=0,
         type='module',
         name='',
         text='               for n1,n2,c,h,w,c1 in product(N,repeat=6)\n')

Fragment(uuid='NORMALIZED-004497',
         path='/verify/verify.py',
         lineno=284,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004498',
         path='/verify/verify.py',
         lineno=285,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n')

Fragment(uuid='NORMALIZED-004499',
         path='/verify/verify.py',
         lineno=286,
         depth=0,
         type='module',
         name='',
         text='               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    (ForAll([sx, sy, pad, acti, x, y, z], concat_0(1, '
              'conv2d_0(sx, sy, pad, acti, x, y), ')

Fragment(uuid='NORMALIZED-004500',
         path='/verify/verify.py',
         lineno=289,
         depth=0,
         type='module',
         name='',
         text='conv2d_0(sx, sy, pad, acti, x, z)) == conv2d_0(sx, sy, pad, '
              'acti, x, concat_0(0, y, z))),\n'
              '     lambda :[(sx, sy, pad, acti, (n,c,h,w), (c1,c,d1,d2), '
              '(c2,c,d1,d2))\n')

Fragment(uuid='NORMALIZED-004501',
         path='/verify/verify.py',
         lineno=291,
         depth=0,
         type='module',
         name='',
         text='              for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004502',
         path='/verify/verify.py',
         lineno=292,
         depth=0,
         type='module',
         name='',
         text='              for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004503',
         path='/verify/verify.py',
         lineno=293,
         depth=0,
         type='module',
         name='',
         text='              for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004504',
         path='/verify/verify.py',
         lineno=294,
         depth=0,
         type='module',
         name='',
         text='              for acti in [AC_MODE_NONE, AC_MODE_RELU]\n')

Fragment(uuid='NORMALIZED-004505',
         path='/verify/verify.py',
         lineno=295,
         depth=0,
         type='module',
         name='',
         text='              for n,c,h,w,c1,c2 in product(N,repeat=6)\n')

Fragment(uuid='NORMALIZED-004506',
         path='/verify/verify.py',
         lineno=296,
         depth=0,
         type='module',
         name='',
         text='              for d1 in D\n')

Fragment(uuid='NORMALIZED-004507',
         path='/verify/verify.py',
         lineno=297,
         depth=0,
         type='module',
         name='',
         text='              for d2 in D\n')

Fragment(uuid='NORMALIZED-004508',
         path='/verify/verify.py',
         lineno=298,
         depth=0,
         type='module',
         name='',
         text='              if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # matmul\n'
              '    (ForAll([x, y, z], matmul_0(x, matmul_0(y, z)) == '
              'matmul_0(matmul_0(x, y), z)),\n'
              '     lambda :\n'
              '     # TODO: 3D matmul: [((n1, n2, n3), (n1, n3, n4), (n1, n4, '
              'n5))')

Fragment(uuid='NORMALIZED-004509',
         path='/verify/verify.py',
         lineno=304,
         depth=0,
         type='module',
         name='',
         text=' for n1,n2,n3,n4,n5 in product(N,repeat=5) ] +\n'
              '     [((n1, n2), (n2, n3), (n3, n4)) for n1, n2, n3, n4 in '
              'product(N, repeat=4)]\n'
              '    ),\n'
              '\n'
              '    # split and concat\n'
              '    (ForAll([ax, x, y], split_0(ax, concat_0(ax, x, y)) == x),\n'
              '     lambda : [(ax, s1, s2)\n')

Fragment(uuid='NORMALIZED-004510',
         path='/verify/verify.py',
         lineno=304,
         depth=5,
         type='documentation',
         name='',
         text='# TODO: 3D matmul: [((n1, n2, n3), (n1, n3, n4), (n1, n4, n5)) '
              'for n1,n2,n3,n4,n5 in product(N,repeat=5) ] +')

Fragment(uuid='NORMALIZED-004511',
         path='/verify/verify.py',
         lineno=311,
         depth=0,
         type='module',
         name='',
         text='               for dim in [2,3,4]\n')

Fragment(uuid='NORMALIZED-004512',
         path='/verify/verify.py',
         lineno=312,
         depth=0,
         type='module',
         name='',
         text='               for s1 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004513',
         path='/verify/verify.py',
         lineno=313,
         depth=0,
         type='module',
         name='',
         text='               for s2 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004514',
         path='/verify/verify.py',
         lineno=314,
         depth=0,
         type='module',
         name='',
         text='               for ax in range(dim)\n'
              '               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    (ForAll([ax, x, y], split_1(ax, concat_0(ax, x, y)) == y),\n'
              '     lambda : [(ax, s1, s2)\n')

Fragment(uuid='NORMALIZED-004515',
         path='/verify/verify.py',
         lineno=320,
         depth=0,
         type='module',
         name='',
         text='               for dim in [2,3,4]\n')

Fragment(uuid='NORMALIZED-004516',
         path='/verify/verify.py',
         lineno=321,
         depth=0,
         type='module',
         name='',
         text='               for s1 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004517',
         path='/verify/verify.py',
         lineno=322,
         depth=0,
         type='module',
         name='',
         text='               for s2 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004518',
         path='/verify/verify.py',
         lineno=323,
         depth=0,
         type='module',
         name='',
         text='               for ax in range(dim)\n')

Fragment(uuid='NORMALIZED-004519',
         path='/verify/verify.py',
         lineno=324,
         depth=0,
         type='module',
         name='',
         text='               if all(s1[i] == s2[i] or i == ax for i in '
              'range(dim))\n'
              '     ]),\n'
              '\n'
              '    # split, concat, and matmul\n'
              '\n'
              '    (ForAll([x, y, z], matmul_0(x, concat_0(1, y, z)) == '
              'concat_0(1, matmul_0(x, y), matmul_0(x, z))),\n'
              '     lambda : [((n1, n2), (n2, n3), (n2, n4)) for n1,n2,n3,n4 '
              'in product(N,r')

Fragment(uuid='NORMALIZED-004520',
         path='/verify/verify.py',
         lineno=327,
         depth=3,
         type='documentation',
         name='',
         text='# split, concat, and matmul')

Fragment(uuid='NORMALIZED-004521',
         path='/verify/verify.py',
         lineno=330,
         depth=0,
         type='module',
         name='',
         text='epeat=4) ]),\n'
              '\n'
              '    # matmul and ewadd\n'
              '\n'
              '    (ForAll([x, y, z], matmul_0(x, ewadd_0(y, z)) == '
              'ewadd_0(matmul_0(x, y), matmul_0(x, z))),\n'
              '     lambda : [((n1,n2), (n2,n3), (n2,n3)) for n1,n2,n3 in '
              'product(N,repeat=3) ]),\n'
              '\n'
              '    # transpose\n'
              '\n'
              '    (ForAll([x], transpose_0(transpose_0(x)) == x),\n'
              '     l')

Fragment(uuid='NORMALIZED-004522',
         path='/verify/verify.py',
         lineno=340,
         depth=0,
         type='module',
         name='',
         text='ambda : [((n1, n2),) for n1,n2 in product(N,repeat=2)]),\n'
              '\n'
              '    (ForAll([x,y], transpose_0(matmul_0(x,y)) == '
              'matmul_0(transpose_0(y), transpose_0(x))  ),\n'
              '     lambda : [((n1, n2),(n2,n3)) for n1,n2,n3 in '
              'product(N,repeat=3)]),\n'
              '\n'
              '    (ForAll([x,y], transpose_0(concat_0(0, x, y)) == '
              'concat_0(1, ')

Fragment(uuid='NORMALIZED-004523',
         path='/verify/verify.py',
         lineno=345,
         depth=0,
         type='module',
         name='',
         text='transpose_0(x), transpose_0(y))),\n'
              '     lambda : [((n1, n2), (n3,n2)) for n1,n2,n3 in '
              'product(N,repeat=3)]),\n'
              '\n'
              '    # concat geometry\n'
              '\n'
              '    (ForAll([x,y,z,w], concat_0(0, concat_0(1, x, y), '
              'concat_0(1, z, w)) == concat_0(1, concat_0(0, x, z), '
              'concat_0(0, y, w))),\n'
              '     lambda : [(s1, s2, s3, s4)\n')

Fragment(uuid='NORMALIZED-004524',
         path='/verify/verify.py',
         lineno=352,
         depth=0,
         type='module',
         name='',
         text='               for dim in [2,3,4]\n')

Fragment(uuid='NORMALIZED-004525',
         path='/verify/verify.py',
         lineno=353,
         depth=0,
         type='module',
         name='',
         text='               for s1 in product(N, repeat=dim)\n')

Fragment(uuid='NORMALIZED-004526',
         path='/verify/verify.py',
         lineno=354,
         depth=0,
         type='module',
         name='',
         text='               for s2 in (tuple(s1[i] if i != 1 else n2 for i '
              'in range(dim)) for n2 in N)\n')

Fragment(uuid='NORMALIZED-004527',
         path='/verify/verify.py',
         lineno=355,
         depth=0,
         type='module',
         name='',
         text='               for s3 in (tuple(s1[i] if i != 0 else n3 for i '
              'in range(dim)) for n3 in N)\n')

Fragment(uuid='NORMALIZED-004528',
         path='/verify/verify.py',
         lineno=356,
         depth=0,
         type='module',
         name='',
         text='               for s4 in [tuple(s2[i] if i != 0 else s3[i] for '
              'i in range(dim))]\n')

Fragment(uuid='NORMALIZED-004529',
         path='/verify/verify.py',
         lineno=357,
         depth=0,
         type='module',
         name='',
         text='               if (\n'
              '                       s1[1] + s2[1] == s3[1] + s4[1] and\n'
              '                       s1[0] + s3[0] == s2[0] + s4[0]\n'
              '               )\n'
              '     ]),\n'
              '\n'
              '    # transpose and elementwise opertions\n'
              '\n'
              '    (ForAll([x,y], transpose_0(ewadd_0(x,y)) == '
              'ewadd_0(transpose_0(x), transpose_0(y))),\n'
              '     lambda : [((n1, n2), (n1,n2)) for n1,n2 in '
              'product(N,repeat=2)]),\n'
              '\n'
              '    (ForAll([x,y], transpos')

Fragment(uuid='NORMALIZED-004530',
         path='/verify/verify.py',
         lineno=363,
         depth=3,
         type='documentation',
         name='',
         text='# transpose and elementwise opertions')

Fragment(uuid='NORMALIZED-004531',
         path='/verify/verify.py',
         lineno=368,
         depth=0,
         type='module',
         name='',
         text='e_0(ewmul_0(x,y)) == ewmul_0(transpose_0(x), transpose_0(y))),\n'
              '     lambda :[((n1, n2), (n1,n2)) for n1,n2 in '
              'product(N,repeat=2)]),\n'
              '\n'
              '    # pooling and concat\n'
              '\n'
              '    (ForAll([kx, ky, sx, sy, pad, x,')

Fragment(uuid='NORMALIZED-004532',
         path='/verify/verify.py',
         lineno=371,
         depth=3,
         type='documentation',
         name='',
         text='# pooling and concat')

Fragment(uuid='NORMALIZED-004533',
         path='/verify/verify.py',
         lineno=373,
         depth=0,
         type='module',
         name='',
         text=' y], concat_0(1, pool2d_avg_0(kx, ky, sx, sy, pad, x), '
              'pool2d_avg_0(kx, ky, sx, sy, pad, y)) == pool2d_avg_0(kx, ky, '
              'sx, sy, pad, concat_0(1, x, y))),\n'
              '     lambda : [(d1, d2, sx, sy, pad, s1, s2)\n')

Fragment(uuid='NORMALIZED-004534',
         path='/verify/verify.py',
         lineno=375,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004535',
         path='/verify/verify.py',
         lineno=376,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n')

Fragment(uuid='NORMALIZED-004536',
         path='/verify/verify.py',
         lineno=377,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004537',
         path='/verify/verify.py',
         lineno=378,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004538',
         path='/verify/verify.py',
         lineno=379,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004539',
         path='/verify/verify.py',
         lineno=380,
         depth=0,
         type='module',
         name='',
         text='               for s1 in product(N, repeat=4)\n')

Fragment(uuid='NORMALIZED-004540',
         path='/verify/verify.py',
         lineno=381,
         depth=0,
         type='module',
         name='',
         text='               for s2 in product(N, repeat=4)\n')

Fragment(uuid='NORMALIZED-004541',
         path='/verify/verify.py',
         lineno=382,
         depth=0,
         type='module',
         name='',
         text='               if (all(s1[i] == s2[i] or i == 1 for i in '
              'range(4)) and\n'
              '                   ((s1[2] >= d1 and s1[3] >= d2) or pad == '
              'PD_MODE_SAME) and\n'
              '                   ((s2[2] >= d1 and s2[3] >= d2) or pad == '
              'PD_MODE_SAME))\n'
              '     ]),\n')

Fragment(uuid='NORMALIZED-004542',
         path='/verify/verify.py',
         lineno=386,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    (ForAll([kx, ky, sx, sy, pad, x, y], concat_0(0, '
              'pool2d_max_0(kx, ky, sx, sy, pad, x), pool2d_max_0(kx, ky, sx, '
              'sy, pad, y)) == pool2d_max_0(kx, ky, sx, sy, pad, concat_0(0, '
              'x, y))),\n'
              '     lambda : [(d1, d2, sx, sy, pad, s1, s2)\n')

Fragment(uuid='NORMALIZED-004543',
         path='/verify/verify.py',
         lineno=389,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004544',
         path='/verify/verify.py',
         lineno=390,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n')

Fragment(uuid='NORMALIZED-004545',
         path='/verify/verify.py',
         lineno=391,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004546',
         path='/verify/verify.py',
         lineno=392,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004547',
         path='/verify/verify.py',
         lineno=393,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004548',
         path='/verify/verify.py',
         lineno=394,
         depth=0,
         type='module',
         name='',
         text='               for s1 in product(N, repeat=4)\n')

Fragment(uuid='NORMALIZED-004549',
         path='/verify/verify.py',
         lineno=395,
         depth=0,
         type='module',
         name='',
         text='               for s2 in product(N, repeat=4)\n')

Fragment(uuid='NORMALIZED-004550',
         path='/verify/verify.py',
         lineno=396,
         depth=0,
         type='module',
         name='',
         text='               if (all(s1[i] == s2[i] or i == 0 for i in '
              'range(4)) and\n'
              '                   ((s1[2] >= d1 and s1[3] >= d2) or pad == '
              'PD_MODE_SAME) and\n'
              '                   ((s2[2] >= d1 and s2[3] >= d2) or pad == '
              'PD_MODE_SAME))\n'
              '     ]),\n')

Fragment(uuid='NORMALIZED-004551',
         path='/verify/verify.py',
         lineno=400,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    (ForAll([kx, ky, sx, sy, pad, x, y], concat_0(1, '
              'pool2d_max_0(kx, ky, sx, sy, pad, x), pool2d_max_0(kx, ky, sx, '
              'sy, pad, y)) == pool2d_max_0(kx, ky, sx, sy, pad, concat_0(1, '
              'x, y))),\n'
              '     lambda : [(d1, d2, sx, sy, pad, s1, s2)\n')

Fragment(uuid='NORMALIZED-004552',
         path='/verify/verify.py',
         lineno=403,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004553',
         path='/verify/verify.py',
         lineno=404,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n')

Fragment(uuid='NORMALIZED-004554',
         path='/verify/verify.py',
         lineno=405,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004555',
         path='/verify/verify.py',
         lineno=406,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004556',
         path='/verify/verify.py',
         lineno=407,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004557',
         path='/verify/verify.py',
         lineno=408,
         depth=0,
         type='module',
         name='',
         text='               for s1 in product(N, repeat=4)\n')

Fragment(uuid='NORMALIZED-004558',
         path='/verify/verify.py',
         lineno=409,
         depth=0,
         type='module',
         name='',
         text='               for s2 in product(N, repeat=4)\n')

Fragment(uuid='NORMALIZED-004559',
         path='/verify/verify.py',
         lineno=410,
         depth=0,
         type='module',
         name='',
         text='               if (all(s1[i] == s2[i] or i == 1 for i in '
              'range(4)) and\n'
              '                   ((s1[2] >= d1 and s1[3] >= d2) or pad == '
              'PD_MODE_SAME) and\n'
              '                   ((s2[2] >= d1 and s2[3] >= d2) or pad == '
              'PD_MODE_SAME))\n'
              '  ')

Fragment(uuid='NORMALIZED-004560',
         path='/verify/verify.py',
         lineno=413,
         depth=0,
         type='module',
         name='',
         text='   ]),\n'
              '\n'
              '    # property of const_pool\n'
              '    (ForAll([sx, sy, pad, x, kx, ky], conv2d_0(sx, sy, pad, '
              'AC_MODE_NONE, x, const_pool_0(kx, ky)) == pool2d_avg_0(kx, ky, '
              'sx, sy, pad, x)),\n'
              '     lambda : [(sx, sy, pad, (n,c,h,w), d1, d2)\n')

Fragment(uuid='NORMALIZED-004561',
         path='/verify/verify.py',
         lineno=415,
         depth=3,
         type='documentation',
         name='',
         text='# property of const_pool')

Fragment(uuid='NORMALIZED-004562',
         path='/verify/verify.py',
         lineno=418,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004563',
         path='/verify/verify.py',
         lineno=419,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004564',
         path='/verify/verify.py',
         lineno=420,
         depth=0,
         type='module',
         name='',
         text='               for pad in [PD_MODE_SAME, PD_MODE_VALID]\n')

Fragment(uuid='NORMALIZED-004565',
         path='/verify/verify.py',
         lineno=421,
         depth=0,
         type='module',
         name='',
         text='               for n,c,h,w in product(N,repeat=4)\n')

Fragment(uuid='NORMALIZED-004566',
         path='/verify/verify.py',
         lineno=422,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004567',
         path='/verify/verify.py',
         lineno=423,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n'
              '               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # conv2d and const_iconv\n'
              '    (ForAll([kx, ky, x], conv2d_0(1, 1, PD_MODE_SAME, '
              'AC_MODE_NONE, x, const_iconv_0(kx, ky)) == x),\n'
              '     lambda : [(d1, d2, (n,c,h,w))\n')

Fragment(uuid='NORMALIZED-004568',
         path='/verify/verify.py',
         lineno=427,
         depth=3,
         type='documentation',
         name='',
         text='# conv2d and const_iconv')

Fragment(uuid='NORMALIZED-004569',
         path='/verify/verify.py',
         lineno=430,
         depth=0,
         type='module',
         name='',
         text='               for d1 in D\n')

Fragment(uuid='NORMALIZED-004570',
         path='/verify/verify.py',
         lineno=431,
         depth=0,
         type='module',
         name='',
         text='               for d2 in D\n')

Fragment(uuid='NORMALIZED-004571',
         path='/verify/verify.py',
         lineno=432,
         depth=0,
         type='module',
         name='',
         text='               for n,c,h,w in product(N,repeat=4)\n')

Fragment(uuid='NORMALIZED-004572',
         path='/verify/verify.py',
         lineno=433,
         depth=0,
         type='module',
         name='',
         text='               if (h >= d1 and w >= d2) or pad == PD_MODE_SAME\n'
              '     ]),\n'
              '\n'
              '    # matmul and const_imm\n'
              '    (ForAll([x], matmul_0(x, const_imm_0()) == x),\n'
              '     lambda : [((n1,n2),) for n1,n2 in product(N, repeat=2) '
              ']),\n'
              '\n'
              '    # ewmul and const_one\n'
              '    (ForAll([x], ewmul_0(x, const_one_0()) == x),\n'
              '     lambda :[(s,) for dim in [2,3,4] for s in product(N, '
              'repeat=dim)] ),\n'
              '\n'
              '    # const_i')

Fragment(uuid='NORMALIZED-004573',
         path='/verify/verify.py',
         lineno=436,
         depth=3,
         type='documentation',
         name='',
         text='# matmul and const_imm')

Fragment(uuid='NORMALIZED-004574',
         path='/verify/verify.py',
         lineno=440,
         depth=3,
         type='documentation',
         name='',
         text='# ewmul and const_one')

Fragment(uuid='NORMALIZED-004575',
         path='/verify/verify.py',
         lineno=444,
         depth=0,
         type='module',
         name='',
         text='conv and const_pool\n'
              '    (ForAll([kx, ky], pool2d_avg_0(kx, ky, 1, 1, PD_MODE_SAME, '
              'const_iconv_0(kx, ky)) == const_pool_0(kx, ky)),\n'
              '     None),\n'
              '\n'
              '    # enlarge axioms\n'
              '    (ForAll([sx, sy, act')

Fragment(uuid='NORMALIZED-004576',
         path='/verify/verify.py',
         lineno=444,
         depth=3,
         type='documentation',
         name='',
         text='# const_iconv and const_pool')

Fragment(uuid='NORMALIZED-004577',
         path='/verify/verify.py',
         lineno=449,
         depth=0,
         type='module',
         name='',
         text='i, kx, ky, x, y], conv2d_0(sx, sy, PD_MODE_SAME, acti, x, y) == '
              'conv2d_0(sx, sy, PD_MODE_SAME, acti, x, enlarge_0(kx, ky, '
              'y))),\n'
              '     lambda : [(sx, sy, acti, kx, ky, (n,c,h,w), (c1,c,d1,d2))\n')

Fragment(uuid='NORMALIZED-004578',
         path='/verify/verify.py',
         lineno=451,
         depth=0,
         type='module',
         name='',
         text='               for sx in [1,2]\n')

Fragment(uuid='NORMALIZED-004579',
         path='/verify/verify.py',
         lineno=452,
         depth=0,
         type='module',
         name='',
         text='               for sy in [1,2]\n')

Fragment(uuid='NORMALIZED-004580',
         path='/verify/verify.py',
         lineno=453,
         depth=0,
         type='module',
         name='',
         text='               for acti in [AC_MODE_NONE, AC_MODE_RELU]\n')

Fragment(uuid='NORMALIZED-004581',
         path='/verify/verify.py',
         lineno=454,
         depth=0,
         type='module',
         name='',
         text='               for kx, ky, d1, d2 in product(D, repeat=4)\n')

Fragment(uuid='NORMALIZED-004582',
         path='/verify/verify.py',
         lineno=455,
         depth=0,
         type='module',
         name='',
         text='               for n,c,h,w,c1 in product(N,repeat=5)\n'
              '     ]),\n'
              '\n'
              '    #(ForAll([kx, ky, x], conv2d_0(1, 1, PD_MODE_SAME, '
              'AC_MODE_NONE, const_iconv_0(kx, ky), conv2d_0(1, 1, '
              'PD_MODE_SAME, AC_MODE_NONE, const_iconv_0(kx, ky), x)) == '
              'enlarge_0(kx, ky, x)),\n'
              '    # None),\n'
              '\n'
              '    #(ForAll([kx, ky, x], enl')

Fragment(uuid='NORMALIZED-004583',
         path='/verify/verify.py',
         lineno=458,
         depth=3,
         type='documentation',
         name='',
         text='#(ForAll([kx, ky, x], conv2d_0(1, 1, PD_MODE_SAME, '
              'AC_MODE_NONE, const_iconv_0(kx, ky), conv2d_0(1, 1, '
              'PD_MODE_SAME, AC_MODE_NONE, const_iconv_0(kx, ky), x)) == '
              'enlarge_0(kx, ky, x)),')

Fragment(uuid='NORMALIZED-004584',
         path='/verify/verify.py',
         lineno=461,
         depth=0,
         type='module',
         name='',
         text='arge_0(kx, ky, ewmul_0(x, pool2d_max_0(kx, ky, 1, 1, '
              'PD_MODE_SAME, x))) == ewmul_0(enlarge_0(kx, ky, x), '
              'pool2d_max_0(kx, ky, 1, 1, PD_MODE_SAME, enlarge_0(kx, ky, '
              'x)))),\n'
              '    # None),\n'
              '\n'
              '#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, ewadd_0(x, y)) '
              '== ewadd_0(enlarge_0(kx, ky, x), enlarge_0(kx, k')

Fragment(uuid='NORMALIZED-004585',
         path='/verify/verify.py',
         lineno=461,
         depth=3,
         type='documentation',
         name='',
         text='#(ForAll([kx, ky, x], enlarge_0(kx, ky, ewmul_0(x, '
              'pool2d_max_0(kx, ky, 1, 1, PD_MODE_SAME, x))) == '
              'ewmul_0(enlarge_0(kx, ky, x), pool2d_max_0(kx, ky, 1, 1, '
              'PD_MODE_SAME, enlarge_0(kx, ky, x)))),')

Fragment(uuid='NORMALIZED-004586',
         path='/verify/verify.py',
         lineno=464,
         depth=0,
         type='module',
         name='',
         text='y, y))),\n'
              '#     lambda : [(kx, ky, s, s)\n'
              '#               for kx, ky in product(D, repeat=2)\n'
              '#               for s in product(N, repeat=4)\n'
              '#     ]),\n'
              '#\n'
              '#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, ewmul_0(x, y)) '
              '== ewmul_0(enlarge_0(kx, ky, x), enlarge_0(kx, ky, y))),\n'
              '#     lambda : [(kx, ky, s,')

Fragment(uuid='NORMALIZED-004587',
         path='/verify/verify.py',
         lineno=464,
         depth=3,
         type='documentation',
         name='',
         text='#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, ewadd_0(x, y)) '
              '== ewadd_0(enlarge_0(kx, ky, x), enlarge_0(kx, ky, y))),')

Fragment(uuid='NORMALIZED-004588',
         path='/verify/verify.py',
         lineno=465,
         depth=3,
         type='documentation',
         name='',
         text='#     lambda : [(kx, ky, s, s)')

Fragment(uuid='NORMALIZED-004589',
         path='/verify/verify.py',
         lineno=466,
         depth=3,
         type='documentation',
         name='',
         text='#               for kx, ky in product(D, repeat=2)')

Fragment(uuid='NORMALIZED-004590',
         path='/verify/verify.py',
         lineno=467,
         depth=3,
         type='documentation',
         name='',
         text='#               for s in product(N, repeat=4)')

Fragment(uuid='NORMALIZED-004591',
         path='/verify/verify.py',
         lineno=470,
         depth=3,
         type='documentation',
         name='',
         text='#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, ewmul_0(x, y)) '
              '== ewmul_0(enlarge_0(kx, ky, x), enlarge_0(kx, ky, y))),')

Fragment(uuid='NORMALIZED-004592',
         path='/verify/verify.py',
         lineno=471,
         depth=0,
         type='module',
         name='',
         text=' s)\n'
              '#               for kx, ky in product(D, repeat=2)\n'
              '#               for s in product(N, repeat=4)\n'
              '#     ]),\n'
              '#\n'
              '#    (ForAll([kx, ky, x, w], enlarge_0(kx, ky, scalar_mul_0(x, '
              'w)) == scalar_mul_0(enlarge_0(kx, ky, x), w)),\n'
              '#     lambda : [(kx, ky, s, ())\n'
              '#               for kx, ky in product(D,')

Fragment(uuid='NORMALIZED-004593',
         path='/verify/verify.py',
         lineno=471,
         depth=3,
         type='documentation',
         name='',
         text='#     lambda : [(kx, ky, s, s)')

Fragment(uuid='NORMALIZED-004594',
         path='/verify/verify.py',
         lineno=472,
         depth=3,
         type='documentation',
         name='',
         text='#               for kx, ky in product(D, repeat=2)')

Fragment(uuid='NORMALIZED-004595',
         path='/verify/verify.py',
         lineno=473,
         depth=3,
         type='documentation',
         name='',
         text='#               for s in product(N, repeat=4)')

Fragment(uuid='NORMALIZED-004596',
         path='/verify/verify.py',
         lineno=476,
         depth=3,
         type='documentation',
         name='',
         text='#    (ForAll([kx, ky, x, w], enlarge_0(kx, ky, scalar_mul_0(x, '
              'w)) == scalar_mul_0(enlarge_0(kx, ky, x), w)),')

Fragment(uuid='NORMALIZED-004597',
         path='/verify/verify.py',
         lineno=477,
         depth=3,
         type='documentation',
         name='',
         text='#     lambda : [(kx, ky, s, ())')

Fragment(uuid='NORMALIZED-004598',
         path='/verify/verify.py',
         lineno=478,
         depth=0,
         type='module',
         name='',
         text=' repeat=2)\n'
              '#               for s in product(N, repeat=4)\n'
              '#     ]),\n'
              '#\n'
              '#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, concat_0(0, x, '
              'y)) == concat_0(0, enlarge_0(kx, ky, x), enlarge_0(kx, ky, '
              'y))),\n'
              '#     lambda : [(kx, ky, s1, s2)\n'
              '#               for kx, ky in product(D, repeat=2)\n'
              '#             ')

Fragment(uuid='NORMALIZED-004599',
         path='/verify/verify.py',
         lineno=478,
         depth=3,
         type='documentation',
         name='',
         text='#               for kx, ky in product(D, repeat=2)')

Fragment(uuid='NORMALIZED-004600',
         path='/verify/verify.py',
         lineno=479,
         depth=3,
         type='documentation',
         name='',
         text='#               for s in product(N, repeat=4)')

Fragment(uuid='NORMALIZED-004601',
         path='/verify/verify.py',
         lineno=482,
         depth=3,
         type='documentation',
         name='',
         text='#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, concat_0(0, x, '
              'y)) == concat_0(0, enlarge_0(kx, ky, x), enlarge_0(kx, ky, y))),')

Fragment(uuid='NORMALIZED-004602',
         path='/verify/verify.py',
         lineno=483,
         depth=3,
         type='documentation',
         name='',
         text='#     lambda : [(kx, ky, s1, s2)')

Fragment(uuid='NORMALIZED-004603',
         path='/verify/verify.py',
         lineno=484,
         depth=3,
         type='documentation',
         name='',
         text='#               for kx, ky in product(D, repeat=2)')

Fragment(uuid='NORMALIZED-004604',
         path='/verify/verify.py',
         lineno=485,
         depth=0,
         type='module',
         name='',
         text='  for s1 in product(N, repeat=4)\n'
              '#               for s2 in product(N, repeat=4)\n'
              '#               if all(s1[i] == s2[i] or i == 0 for i in '
              'range(4))\n'
              '#     ]),\n'
              '#\n'
              '#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, concat_0(1, x, '
              'y)) == concat_0(1, enlarge_0(kx, ky, x), enlarge_0(kx, ky, '
              'y))),\n'
              '#     lam')

Fragment(uuid='NORMALIZED-004605',
         path='/verify/verify.py',
         lineno=485,
         depth=3,
         type='documentation',
         name='',
         text='#               for s1 in product(N, repeat=4)')

Fragment(uuid='NORMALIZED-004606',
         path='/verify/verify.py',
         lineno=486,
         depth=3,
         type='documentation',
         name='',
         text='#               for s2 in product(N, repeat=4)')

Fragment(uuid='NORMALIZED-004607',
         path='/verify/verify.py',
         lineno=487,
         depth=3,
         type='documentation',
         name='',
         text='#               if all(s1[i] == s2[i] or i == 0 for i in '
              'range(4))')

Fragment(uuid='NORMALIZED-004608',
         path='/verify/verify.py',
         lineno=490,
         depth=3,
         type='documentation',
         name='',
         text='#    (ForAll([kx, ky, x, y], enlarge_0(kx, ky, concat_0(1, x, '
              'y)) == concat_0(1, enlarge_0(kx, ky, x), enlarge_0(kx, ky, y))),')

Fragment(uuid='NORMALIZED-004609',
         path='/verify/verify.py',
         lineno=491,
         depth=0,
         type='module',
         name='',
         text='bda : [(kx, ky, s1, s2)\n'
              '#               for kx, ky in product(D, repeat=2)\n'
              '#               for s1 in product(N, repeat=4)\n'
              '#               for s2 in product(N, repeat=4)\n'
              '#               if all(s1[i] == s2[i] or i == 1 for i in '
              'range(4))\n'
              '#     ]),\n'
              '#\n'
              '#    (ForAll([kx, ky, x], enlarge_0(kx, ky, rel')

Fragment(uuid='NORMALIZED-004610',
         path='/verify/verify.py',
         lineno=491,
         depth=3,
         type='documentation',
         name='',
         text='#     lambda : [(kx, ky, s1, s2)')

Fragment(uuid='NORMALIZED-004611',
         path='/verify/verify.py',
         lineno=492,
         depth=3,
         type='documentation',
         name='',
         text='#               for kx, ky in product(D, repeat=2)')

Fragment(uuid='NORMALIZED-004612',
         path='/verify/verify.py',
         lineno=493,
         depth=3,
         type='documentation',
         name='',
         text='#               for s1 in product(N, repeat=4)')

Fragment(uuid='NORMALIZED-004613',
         path='/verify/verify.py',
         lineno=494,
         depth=3,
         type='documentation',
         name='',
         text='#               for s2 in product(N, repeat=4)')

Fragment(uuid='NORMALIZED-004614',
         path='/verify/verify.py',
         lineno=495,
         depth=3,
         type='documentation',
         name='',
         text='#               if all(s1[i] == s2[i] or i == 1 for i in '
              'range(4))')

Fragment(uuid='NORMALIZED-004615',
         path='/verify/verify.py',
         lineno=498,
         depth=0,
         type='module',
         name='',
         text='u_0(x)) == relu_0(enlarge_0(kx, ky, x))),\n'
              '#     lambda : [(kx, ky, s)\n'
              '#               for kx, ky in product(D, repeat=2)\n'
              '#               for s in product(N, repeat=4)\n'
              '#     ]),\n'
              '#\n'
              '    # concat is associative (wrong axiom - makes many others '
              'redundant)\n'
              '    # (ForAll([ax, x, y, z], concat_0(ax, x,')

Fragment(uuid='NORMALIZED-004616',
         path='/verify/verify.py',
         lineno=498,
         depth=3,
         type='documentation',
         name='',
         text='#    (ForAll([kx, ky, x], enlarge_0(kx, ky, relu_0(x)) == '
              'relu_0(enlarge_0(kx, ky, x))),')

Fragment(uuid='NORMALIZED-004617',
         path='/verify/verify.py',
         lineno=499,
         depth=3,
         type='documentation',
         name='',
         text='#     lambda : [(kx, ky, s)')

Fragment(uuid='NORMALIZED-004618',
         path='/verify/verify.py',
         lineno=500,
         depth=3,
         type='documentation',
         name='',
         text='#               for kx, ky in product(D, repeat=2)')

Fragment(uuid='NORMALIZED-004619',
         path='/verify/verify.py',
         lineno=501,
         depth=3,
         type='documentation',
         name='',
         text='#               for s in product(N, repeat=4)')

Fragment(uuid='NORMALIZED-004620',
         path='/verify/verify.py',
         lineno=504,
         depth=3,
         type='documentation',
         name='',
         text='# concat is associative (wrong axiom - makes many others '
              'redundant)')

Fragment(uuid='NORMALIZED-004621',
         path='/verify/verify.py',
         lineno=505,
         depth=0,
         type='module',
         name='',
         text=' concat_0(ax, y,z)) == concat_0(ax, concat_0(ax, x, y), z)),\n'
              '    #  lambda : [(ax, s1, s2, s3)\n'
              '    #            for dim in [2,3,4]\n'
              '    #            for s1 in product(N, repeat=dim)\n'
              '    #            for s2 in product(N, repeat=dim)\n'
              '    #            for s3 in product(N, repeat=dim)\n'
              '    #        ')

Fragment(uuid='NORMALIZED-004622',
         path='/verify/verify.py',
         lineno=505,
         depth=3,
         type='documentation',
         name='',
         text='# (ForAll([ax, x, y, z], concat_0(ax, x, concat_0(ax, y,z)) == '
              'concat_0(ax, concat_0(ax, x, y), z)),')

Fragment(uuid='NORMALIZED-004623',
         path='/verify/verify.py',
         lineno=506,
         depth=3,
         type='documentation',
         name='',
         text='#  lambda : [(ax, s1, s2, s3)')

Fragment(uuid='NORMALIZED-004624',
         path='/verify/verify.py',
         lineno=507,
         depth=3,
         type='documentation',
         name='',
         text='#            for dim in [2,3,4]')

Fragment(uuid='NORMALIZED-004625',
         path='/verify/verify.py',
         lineno=508,
         depth=3,
         type='documentation',
         name='',
         text='#            for s1 in product(N, repeat=dim)')

Fragment(uuid='NORMALIZED-004626',
         path='/verify/verify.py',
         lineno=509,
         depth=3,
         type='documentation',
         name='',
         text='#            for s2 in product(N, repeat=dim)')

Fragment(uuid='NORMALIZED-004627',
         path='/verify/verify.py',
         lineno=510,
         depth=3,
         type='documentation',
         name='',
         text='#            for s3 in product(N, repeat=dim)')

Fragment(uuid='NORMALIZED-004628',
         path='/verify/verify.py',
         lineno=511,
         depth=0,
         type='module',
         name='',
         text='    for ax in range(dim)\n'
              '    #            if all(s1[i] == s2[i] == s3[i] or i == ax for '
              'i in range(dim))\n'
              '    #  ]),\n'
              '\n'
              '    # grouped convolution (wrong axiom - caught with N=[1,3])\n'
              '    # (ForAll([sx, sy, pad, acti, x, y, z, w], concat_0(1, '
              'conv2d_0(sx, sy, pad, acti, x, y), conv2d_0(sx, sy, pad, ')

Fragment(uuid='NORMALIZED-004629',
         path='/verify/verify.py',
         lineno=511,
         depth=3,
         type='documentation',
         name='',
         text='#            for ax in range(dim)')

Fragment(uuid='NORMALIZED-004630',
         path='/verify/verify.py',
         lineno=512,
         depth=3,
         type='documentation',
         name='',
         text='#            if all(s1[i] == s2[i] == s3[i] or i == ax for i in '
              'range(dim))')

Fragment(uuid='NORMALIZED-004631',
         path='/verify/verify.py',
         lineno=515,
         depth=3,
         type='documentation',
         name='',
         text='# grouped convolution (wrong axiom - caught with N=[1,3])')

Fragment(uuid='NORMALIZED-004632',
         path='/verify/verify.py',
         lineno=516,
         depth=0,
         type='module',
         name='',
         text='acti, z, w)) == conv2d_0(sx, sy, pad, acti, concat_0(1, x, z), '
              'concat_0(0, y, w))),\n'
              '    #  lambda :[(sx, sy, pad, acti, (n,cx,h,w), (c1y,c2,d1,d2), '
              '(n,cz,h,w), (c1w,c2,d1,d2))\n'
              '    #           for sx in [1,2]\n'
              '    #           for sy in [1,2]\n'
              '    #           for pad in [PD_MODE_SAME, PD_MODE_VALID')

Fragment(uuid='NORMALIZED-004633',
         path='/verify/verify.py',
         lineno=516,
         depth=3,
         type='documentation',
         name='',
         text='# (ForAll([sx, sy, pad, acti, x, y, z, w], concat_0(1, '
              'conv2d_0(sx, sy, pad, acti, x, y), conv2d_0(sx, sy, pad, acti, '
              'z, w)) == conv2d_0(sx, sy, pad, acti, concat_0(1, x, z), '
              'concat_0(0, y, w))),')

Fragment(uuid='NORMALIZED-004634',
         path='/verify/verify.py',
         lineno=517,
         depth=3,
         type='documentation',
         name='',
         text='#  lambda :[(sx, sy, pad, acti, (n,cx,h,w), (c1y,c2,d1,d2), '
              '(n,cz,h,w), (c1w,c2,d1,d2))')

Fragment(uuid='NORMALIZED-004635',
         path='/verify/verify.py',
         lineno=518,
         depth=3,
         type='documentation',
         name='',
         text='#           for sx in [1,2]')

Fragment(uuid='NORMALIZED-004636',
         path='/verify/verify.py',
         lineno=519,
         depth=3,
         type='documentation',
         name='',
         text='#           for sy in [1,2]')

Fragment(uuid='NORMALIZED-004637',
         path='/verify/verify.py',
         lineno=520,
         depth=0,
         type='module',
         name='',
         text=']\n'
              '    #           for acti in [AC_MODE_NONE, AC_MODE_RELU]\n'
              '    #           for n,cx,h,w,c1y,c2,cz,c1w in '
              'product(N,repeat=8)\n'
              '    #           for d1 in D\n'
              '    #           for d2 in D\n'
              '    #           if all([\n'
              '    #                   h >= d1,\n'
              '    #                   w >= d2,\n'
              '    #                  ')

Fragment(uuid='NORMALIZED-004638',
         path='/verify/verify.py',
         lineno=520,
         depth=3,
         type='documentation',
         name='',
         text='#           for pad in [PD_MODE_SAME, PD_MODE_VALID]')

Fragment(uuid='NORMALIZED-004639',
         path='/verify/verify.py',
         lineno=521,
         depth=3,
         type='documentation',
         name='',
         text='#           for acti in [AC_MODE_NONE, AC_MODE_RELU]')

Fragment(uuid='NORMALIZED-004640',
         path='/verify/verify.py',
         lineno=522,
         depth=3,
         type='documentation',
         name='',
         text='#           for n,cx,h,w,c1y,c2,cz,c1w in product(N,repeat=8)')

Fragment(uuid='NORMALIZED-004641',
         path='/verify/verify.py',
         lineno=523,
         depth=3,
         type='documentation',
         name='',
         text='#           for d1 in D')

Fragment(uuid='NORMALIZED-004642',
         path='/verify/verify.py',
         lineno=524,
         depth=3,
         type='documentation',
         name='',
         text='#           for d2 in D')

Fragment(uuid='NORMALIZED-004643',
         path='/verify/verify.py',
         lineno=525,
         depth=3,
         type='documentation',
         name='',
         text='#           if all([')

Fragment(uuid='NORMALIZED-004644',
         path='/verify/verify.py',
         lineno=526,
         depth=3,
         type='documentation',
         name='',
         text='#                   h >= d1,')

Fragment(uuid='NORMALIZED-004645',
         path='/verify/verify.py',
         lineno=527,
         depth=3,
         type='documentation',
         name='',
         text='#                   w >= d2,')

Fragment(uuid='NORMALIZED-004646',
         path='/verify/verify.py',
         lineno=528,
         depth=0,
         type='module',
         name='',
         text=' cx % c2 == 0,\n'
              '    #                   cz % c2 == 0,\n'
              '    #                   (cx // c2) > 0 and c1y % (cx // c2) == '
              '0,\n'
              '    #                   (cz // c2) > 0 and c1w % (cz // c2) == '
              '0,\n'
              '    #                   ((cx + cz) // c2) > 0 and (c1w + c1y) % '
              '((cx + cz) // c2) == 0,\n'
              '    #           ])\n'
              '   ')

Fragment(uuid='NORMALIZED-004647',
         path='/verify/verify.py',
         lineno=528,
         depth=3,
         type='documentation',
         name='',
         text='#                   cx % c2 == 0,')

Fragment(uuid='NORMALIZED-004648',
         path='/verify/verify.py',
         lineno=529,
         depth=3,
         type='documentation',
         name='',
         text='#                   cz % c2 == 0,')

Fragment(uuid='NORMALIZED-004649',
         path='/verify/verify.py',
         lineno=530,
         depth=3,
         type='documentation',
         name='',
         text='#                   (cx // c2) > 0 and c1y % (cx // c2) == 0,')

Fragment(uuid='NORMALIZED-004650',
         path='/verify/verify.py',
         lineno=531,
         depth=3,
         type='documentation',
         name='',
         text='#                   (cz // c2) > 0 and c1w % (cz // c2) == 0,')

Fragment(uuid='NORMALIZED-004651',
         path='/verify/verify.py',
         lineno=532,
         depth=3,
         type='documentation',
         name='',
         text='#                   ((cx + cz) // c2) > 0 and (c1w + c1y) % '
              '((cx + cz) // c2) == 0,')

Fragment(uuid='NORMALIZED-004652',
         path='/verify/verify.py',
         lineno=534,
         depth=0,
         type='module',
         name='',
         text=' #  ]),\n'
              '\n'
              ']\n'
              '\n'
              '# lemmas are implied by the axioms (which is checked using Z3), '
              'and\n'
              '# then also assumed to help with verification of '
              'transformations\n'
              'lemmas = [\n'
              '    # lemmas about const_imm\n'
              '    transpose_0(const_imm_0()) == const_imm_0(),\n'
              '    ForAll([x], matmul_0(const_imm_0(), x) == x),\n'
              '\n'
              '    # lemm')

Fragment(uuid='NORMALIZED-004653',
         path='/verify/verify.py',
         lineno=538,
         depth=0,
         type='documentation',
         name='',
         text='# lemmas are implied by the axioms (which is checked using Z3), '
              'and')

Fragment(uuid='NORMALIZED-004654',
         path='/verify/verify.py',
         lineno=539,
         depth=0,
         type='documentation',
         name='',
         text='# then also assumed to help with verification of transformations')

Fragment(uuid='NORMALIZED-004655',
         path='/verify/verify.py',
         lineno=541,
         depth=3,
         type='documentation',
         name='',
         text='# lemmas about const_imm')

Fragment(uuid='NORMALIZED-004656',
         path='/verify/verify.py',
         lineno=545,
         depth=0,
         type='module',
         name='',
         text='a about pool2d_avg and concat along axis 0\n'
              '    ForAll([kx, ky, sx, sy, pad, x, y], concat_0(0, '
              'pool2d_avg_0(kx, ky, sx, sy, pad, x), pool2d_avg_0(kx, ky, sx, '
              'sy, pad, y)) == pool2d_avg_0(kx, ky, sx, sy, pad, concat_0(0, '
              'x, y))),\n'
              '\n'
              '    # other implied properties not used as lemmas for now\n'
              '    # F')

Fragment(uuid='NORMALIZED-004657',
         path='/verify/verify.py',
         lineno=545,
         depth=3,
         type='documentation',
         name='',
         text='# lemma about pool2d_avg and concat along axis 0')

Fragment(uuid='NORMALIZED-004658',
         path='/verify/verify.py',
         lineno=548,
         depth=3,
         type='documentation',
         name='',
         text='# other implied properties not used as lemmas for now')

Fragment(uuid='NORMALIZED-004659',
         path='/verify/verify.py',
         lineno=549,
         depth=0,
         type='module',
         name='',
         text='orAll([x, y, z], matmul_0(ewadd_0(x, y), z) == '
              'ewadd_0(matmul_0(x, z), matmul_0(y, z))),\n'
              '    # ForAll([x,y], transpose_0(concat_0(1, x, y)) == '
              'concat_0(0, transpose_0(x), transpose_0(y))),\n'
              '    # ForAll([x, y, z], matmul_0(concat_0(0, x, y), z) == '
              'concat_0(0, matmul_0(x, z), matmul_0(y, z))),\n'
              ']\n')

Fragment(uuid='NORMALIZED-004660',
         path='/verify/verify.py',
         lineno=549,
         depth=3,
         type='documentation',
         name='',
         text='# ForAll([x, y, z], matmul_0(ewadd_0(x, y), z) == '
              'ewadd_0(matmul_0(x, z), matmul_0(y, z))),')

Fragment(uuid='NORMALIZED-004661',
         path='/verify/verify.py',
         lineno=550,
         depth=3,
         type='documentation',
         name='',
         text='# ForAll([x,y], transpose_0(concat_0(1, x, y)) == concat_0(0, '
              'transpose_0(x), transpose_0(y))),')

Fragment(uuid='NORMALIZED-004662',
         path='/verify/verify.py',
         lineno=551,
         depth=3,
         type='documentation',
         name='',
         text='# ForAll([x, y, z], matmul_0(concat_0(0, x, y), z) == '
              'concat_0(0, matmul_0(x, z), matmul_0(y, z))),')

Fragment(uuid='NORMALIZED-004663',
         path='/verify/verify.py',
         lineno=553,
         depth=0,
         type='module',
         name='',
         text='\n'
              'def to_z3(tensor, ops):\n'
              '    if tensor.opId < 0:\n'
              '        # an input tensor\n'
              "        return z3.Const('input_{}'.format(-tensor.opId), T)\n"
              '    else:\n'
              '        op = ops[tensor.opId]\n'
              '        d = operator_data[op.type]\n'
              '        #print(op.type, d)\n'
              '        assert tensor.tsId <= d[3]\n'
              "        f = globals()['{}_{}'.format(d[0], tensor.tsId)]\n"
              '        params = {}\n')

Fragment(uuid='NORMALIZED-004664',
         path='/verify/verify.py',
         lineno=554,
         depth=1,
         type='function',
         name='to_z3',
         text='def to_z3(tensor, ops):\n'
              '    if tensor.opId < 0:\n'
              '        # an input tensor\n'
              "        return z3.Const('input_{}'.format(-tensor.opId), T)\n"
              '    else:\n'
              '        op = ops[tensor.opId]\n'
              '        d = operator_data[op.type]\n'
              '        #print(op.type, d)\n'
              '        assert tensor.tsId <= d[3]\n'
              "        f = globals()['{}_{}'.format(d[0], tensor.tsId)]\n"
              '        params = {}\n')

Fragment(uuid='NORMALIZED-004665',
         path='/verify/verify.py',
         lineno=565,
         depth=0,
         type='module',
         name='',
         text='        for p in op.para:\n'
              '            params[p.key] = p.value\n'
              '        args = []\n')

Fragment(uuid='NORMALIZED-004666',
         path='/verify/verify.py',
         lineno=565,
         depth=1,
         type='function',
         name='to_z3',
         text='        for p in op.para:\n'
              '            params[p.key] = p.value\n'
              '        args = []\n')

Fragment(uuid='NORMALIZED-004667',
         path='/verify/verify.py',
         lineno=568,
         depth=0,
         type='module',
         name='',
         text='        for k, rng in d[1]:\n            v = params[k]\n')

Fragment(uuid='NORMALIZED-004668',
         path='/verify/verify.py',
         lineno=568,
         depth=1,
         type='function',
         name='to_z3',
         text='        for k, rng in d[1]:\n'
              '            v = params[k]\n'
              '            if (v not in rng):\n'
              '                print(k, v, rng)\n'
              '                assert False\n'
              '            assert v in rng\n'
              '            assert type(v) is int\n'
              '            args.append(v)\n'
              '        args += [to_z3(x, ops) for x in op.input]\n'
              '        return f(*args)')

Fragment(uuid='NORMALIZED-004669',
         path='/verify/verify.py',
         lineno=570,
         depth=0,
         type='module',
         name='',
         text='            if (v not in rng):\n'
              '                print(k, v, rng)\n'
              '                assert False\n'
              '            assert v in rng\n'
              '            assert type(v) is int\n'
              '            args.append(v)\n'
              '        args += [to_z3(x, ops) for x in op.input]\n'
              '        return f(*args)\n')

Fragment(uuid='NORMALIZED-004670',
         path='/verify/verify.py',
         lineno=578,
         depth=0,
         type='module',
         name='',
         text="\nif __name__ == '__main__':\n")

Fragment(uuid='NORMALIZED-004671',
         path='/verify/verify.py',
         lineno=580,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    if len(sys.argv) != 2:\n'
              '        print("Usage:", sys.argv[0], "<graph substitutions '
              'file>")\n'
              '        sys.exit(-1)\n'
              '\n'
              '    import rules_pb2\n'
              '    rules = rules_pb2.RuleCollection()\n'
              '    rules.ParseFromString(open(sys.argv[1], "rb").read())\n'
              '\n'
              '    # print("Axioms:\\n{')

Fragment(uuid='NORMALIZED-004672',
         path='/verify/verify.py',
         lineno=582,
         depth=8,
         type='documentation',
         name='',
         text='<graph substitutions file>')

Fragment(uuid='NORMALIZED-004673',
         path='/verify/verify.py',
         lineno=585,
         depth=3,
         type='dependency',
         name='',
         text='import')

Fragment(uuid='NORMALIZED-004674',
         path='/verify/verify.py',
         lineno=589,
         depth=0,
         type='module',
         name='',
         text='}".format([a for a, b in axioms]))\n'
              '\n'
              '    blacklist = {\n'
              '        # some substitutions that are known to be incorrect and '
              'should be skipped\n'
              "        #'nasnet_subst.pb': [166, 167, 186, 187, 222, 223, 224, "
              '225, 226, 227, 283, 284, 290, 291, 298, 299],\n'
              "        #'gra")

Fragment(uuid='NORMALIZED-004675',
         path='/verify/verify.py',
         lineno=589,
         depth=2,
         type='documentation',
         name='',
         text='# print("Axioms:\\n{}".format([a for a, b in axioms]))')

Fragment(uuid='NORMALIZED-004676',
         path='/verify/verify.py',
         lineno=592,
         depth=6,
         type='documentation',
         name='',
         text='# some substitutions that are known to be incorrect and should '
              'be skipped')

Fragment(uuid='NORMALIZED-004677',
         path='/verify/verify.py',
         lineno=593,
         depth=6,
         type='documentation',
         name='',
         text="#'nasnet_subst.pb': [166, 167, 186, 187, 222, 223, 224, 225, "
              '226, 227, 283, 284, 290, 291, 298, 299],')

Fragment(uuid='NORMALIZED-004678',
         path='/verify/verify.py',
         lineno=594,
         depth=0,
         type='module',
         name='',
         text="ph_subst.pb': [178, 179, 387, 405, 429, 443, 444, 485, 486, "
              '487, 488, 489, 490, 548, 549, 555, 556, 563, 564],\n'
              "        #'graph_subst.pb': [201, 202, 209, 247, 259, 264, 265, "
              '316, 527, 528, 529, 532, 573, 584, 585, 586, 607, 627, 628, '
              '670, 671, 672, 673, 674, ')

Fragment(uuid='NORMALIZED-004679',
         path='/verify/verify.py',
         lineno=594,
         depth=6,
         type='documentation',
         name='',
         text="#'graph_subst.pb': [178, 179, 387, 405, 429, 443, 444, 485, "
              '486, 487, 488, 489, 490, 548, 549, 555, 556, 563, 564],')

Fragment(uuid='NORMALIZED-004680',
         path='/verify/verify.py',
         lineno=595,
         depth=0,
         type='module',
         name='',
         text='675, 740, 741, 751, 752, 761, 762],\n'
              "        'graph_subst.pb': [202, 209, 254, 255, 260, 307, 308, "
              '518, 536, 560, 580, 581, 620, 621, 622, 623, 624, 625, 681, '
              '682, 688, 689, 695, 696, 697],\n'
              "        'new_graph_subst.pb': [],\n"
              '    }[os.path.basename(sys.argv[1])]\n')

Fragment(uuid='NORMALIZED-004681',
         path='/verify/verify.py',
         lineno=595,
         depth=6,
         type='documentation',
         name='',
         text="#'graph_subst.pb': [201, 202, 209, 247, 259, 264, 265, 316, "
              '527, 528, 529, 532, 573, 584, 585, 586, 607, 627, 628, 670, '
              '671, 672, 673, 674, 675, 740, 741, 751, 752, 761, 762],')

Fragment(uuid='NORMALIZED-004682',
         path='/verify/verify.py',
         lineno=599,
         depth=0,
         type='module',
         name='',
         text='\n'
              '    for i, rule in enumerate(rules.rule):\n'
              '        if i in blacklist:\n'
              '            continue\n'
              '        # print("Verifying rule: {} with {} '
              'outputs\\n".format(rule, len(rule.mappedOutput)))\n')

Fragment(uuid='NORMALIZED-004683',
         path='/verify/verify.py',
         lineno=603,
         depth=4,
         type='documentation',
         name='',
         text='# print("Verifying rule: {} with {} outputs\\n".format(rule, '
              'len(rule.mappedOutput)))')

Fragment(uuid='NORMALIZED-004684',
         path='/verify/verify.py',
         lineno=604,
         depth=0,
         type='module',
         name='',
         text='        for output in rule.mappedOutput:\n'
              '            # print("Verifing output: {}".format(output))\n'
              '            src_tensor = rules_pb2.Tensor(opId=output.srcOpId, '
              'tsId=output.srcTsId)\n'
              '            dst_tensor = rules_pb2.Tensor(opId=output.dstOpId, '
              'tsId=output.dstTsId)\n'
              '            src = to_z3(src_tensor, rule.srcOp)\n'
              '            dst = to_z3(dst_tensor, rule.dstOp)\n'
              '            print("Z3 expression:\\n{}\\n".format(src == dst))\n'
              '            s = z3.Solver()\n')

Fragment(uuid='NORMALIZED-004685',
         path='/verify/verify.py',
         lineno=605,
         depth=5,
         type='documentation',
         name='',
         text='# print("Verifing output: {}".format(output))')

Fragment(uuid='NORMALIZED-004686',
         path='/verify/verify.py',
         lineno=610,
         depth=12,
         type='documentation',
         name='',
         text='Z3 expression:\\n{}\\n')

Fragment(uuid='NORMALIZED-004687',
         path='/verify/verify.py',
         lineno=612,
         depth=0,
         type='module',
         name='',
         text='            for a, b in axioms:\n                s.add(a)\n')

Fragment(uuid='NORMALIZED-004688',
         path='/verify/verify.py',
         lineno=614,
         depth=0,
         type='module',
         name='',
         text='            for lem in lemmas:\n'
              '                s.add(lem)\n'
              '            s.add(src != dst)\n'
              '            print("Checking... ({})".format(i))\n'
              '            if s.check() == z3.unsat:\n'
              '                print("Proved!")\n'
              '            else:\n'
              '                assert False\n'
              "        print('\\n' + '='*80)\n"
              '    print "Done"\n')