Fragment(uuid='348ba426-7e99-4f77-9938-0250d0db2839',
         path='/.github/FUNDING.yml',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# These are supported funding model platforms\n')

Fragment(uuid='b49b4dd6-969d-4d24-8bc8-4af7cc6316e0',
         path='/.github/FUNDING.yml',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /.github/FUNDING.yml\n')

Fragment(uuid='208bdec9-dce6-40bb-a4f6-fc8d9919862f',
         path='/.github/FUNDING.yml',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\ngithub: viktor-ferenczi')

Fragment(uuid='74c43ec0-e4ae-47b0-ac95-1bb818ba7ab8',
         path='/.github/FUNDING.yml',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\npatreon: semods')

Fragment(uuid='0b3efabf-9793-400c-b2b1-3d278ef1a5f0',
         path='/.github/FUNDING.yml',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '#open_collective: # Replace with a single Open Collective '
              'username')

Fragment(uuid='a3d3e31a-61a3-4e1d-b377-cb59f5b2de24',
         path='/.github/FUNDING.yml',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n#ko_fi: # Replace with a single Ko-fi username')

Fragment(uuid='73ffd42f-f570-476c-8007-f7c5f234b03e',
         path='/.github/FUNDING.yml',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '#tidelift: # Replace with a single Tidelift '
              'platform-name/package-name e.g., npm/babel')

Fragment(uuid='3e4c250d-fe59-444d-8cce-c49d042c9c62',
         path='/.github/FUNDING.yml',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '#community_bridge: # Replace with a single Community Bridge '
              'project-name e.g., cloud-foundry')

Fragment(uuid='13864716-32ed-4973-a3df-376fe0e8a214',
         path='/.github/FUNDING.yml',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n#liberapay: # Replace with a single Liberapay username')

Fragment(uuid='d1bcd15a-6a9e-4145-b67d-d9292a2ef4d6',
         path='/.github/FUNDING.yml',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n#issuehunt: # Replace with a single IssueHunt username')

Fragment(uuid='125e7a9b-48f0-45ca-958d-ab241f25a194',
         path='/.github/FUNDING.yml',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n#otechie: # Replace with a single Otechie username')

Fragment(uuid='35b963fb-6999-40de-bd9b-b31ca6940c94',
         path='/.github/FUNDING.yml',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '#lfx_crowdfunding: # Replace with a single LFX Crowdfunding '
              'project-name e.g., cloud-foundry')

Fragment(uuid='595b852b-0bcb-459c-b591-4ecb0a505442',
         path='/.github/FUNDING.yml',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '#custom: # Replace with up to 4 custom sponsorship URLs e.g., '
              "['link1', 'link2']")

Fragment(uuid='051ab2e0-0f59-4270-8b8b-5c11c887e046',
         path='/.github/FUNDING.yml',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='4e88fbc7-292d-4eda-84e5-42d5d2e82dbe',
         path='/.gitignore',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='.idea\n'
              'Bin64\n'
              'ToolbarManager.sln.DotSettings.user\n'
              '/packages\n'
              '**/bin\n'
              '**/obj')

Fragment(uuid='4fa1bc3f-5ed8-4b1e-af1a-4fa5e6e6b473',
         path='/.gitignore',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /.gitignore\n')

Fragment(uuid='3b959de1-fd7a-4a49-8a24-2479ad062353',
         path='/.run/Space Engineers.run.xml',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='<component name="ProjectRunConfigurationManager">')

Fragment(uuid='aa36a9c6-12c1-4d62-861f-4608d4e4c77c',
         path='/.run/Space Engineers.run.xml',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '  <configuration default="false" name="Space Engineers" '
              'type="RunExe" factoryName=".NET Executable">')

Fragment(uuid='2d492860-18fe-429b-a31e-22c3f0614f3a',
         path='/.run/Space Engineers.run.xml',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /.run/Space Engineers.run.xml\n')

Fragment(uuid='c6faa787-81c5-43be-88ee-cbdf05911eb1',
         path='/.run/Space Engineers.run.xml',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    <option name="EXE_PATH" value="$PROJECT_DIR$/../../Program '
              'Files '
              '(x86)/Steam/steamapps/common/SpaceEngineers/Bin64/SpaceEngineers.exe" '
              '/>')

Fragment(uuid='ff2c0bab-077e-4964-b6b8-ca22856364cc',
         path='/.run/Space Engineers.run.xml',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    <option name="PROGRAM_PARAMETERS" value="-skipintro -plugin '
              '&quot;C:\\Users\\fviktor\\AppData\\Roaming\\SpaceEngineers\\Mods\\Plugin '
              'Loader\\RunPluginLoader&quot;" />')

Fragment(uuid='ad18658a-37f2-4a1f-b99e-9fbd51929ee9',
         path='/.run/Space Engineers.run.xml',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '    <option name="WORKING_DIRECTORY" '
              'value="$PROJECT_DIR$/../../Program Files '
              '(x86)/Steam/steamapps/common/SpaceEngineers/Bin64" />')

Fragment(uuid='25ec35cf-bee9-4146-92f3-b2cd8837a878',
         path='/.run/Space Engineers.run.xml',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n    <option name="PASS_PARENT_ENVS" value="1" />')

Fragment(uuid='83ee2248-eb17-497c-894d-3c00d3afeaeb',
         path='/.run/Space Engineers.run.xml',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n    <option name="USE_EXTERNAL_CONSOLE" value="0" />')

Fragment(uuid='c0feb255-bd73-43a0-a4eb-5450b7a446da',
         path='/.run/Space Engineers.run.xml',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n    <option name="USE_MONO" value="0" />')

Fragment(uuid='7a6cbfca-b0c3-40e4-bc8b-314a444e6abc',
         path='/.run/Space Engineers.run.xml',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n    <option name="RUNTIME_ARGUMENTS" value="" />')

Fragment(uuid='8a18cf5e-2bf3-4e79-b43a-759f951eef08',
         path='/.run/Space Engineers.run.xml',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n    <option name="RUNTIME_TYPE" value="netfw" />')

Fragment(uuid='6c5de032-5278-4ccc-85ed-97fffb394a19',
         path='/.run/Space Engineers.run.xml',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n    <method v="2">')

Fragment(uuid='6fe7d064-a527-4e78-ac91-46498390925f',
         path='/.run/Space Engineers.run.xml',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '      <option name="Build" default="false" '
              'projectName="ToolbarManager" '
              'projectPath="file://$PROJECT_DIR$/ToolbarManager/ToolbarManager.csproj" '
              '/>')

Fragment(uuid='1ad8e9c2-4bd6-4636-b2d9-ad0dba90fa28',
         path='/.run/Space Engineers.run.xml',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n    </method>')

Fragment(uuid='24606823-d264-4207-9d09-c8a1f8ce69bd',
         path='/.run/Space Engineers.run.xml',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n  </configuration>')

Fragment(uuid='6b019649-975a-4c7e-ba73-82be571335c8',
         path='/.run/Space Engineers.run.xml',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n</component>')

Fragment(uuid='6e5aeb6a-2416-4065-a25f-c19786c1e6b2',
         path='/Edit-and-run-before-opening-solution.bat',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='@echo off\n'
              '\n'
              'REM Location of your SpaceEngineers.exe\n'
              'mklink /J Bin64 "C:\\Program Files '
              '(x86)\\Steam\\steamapps\\common\\SpaceEngineers\\Bin64"\n'
              '\n'
              'pause\n')

Fragment(uuid='93b60289-bb74-48b8-94f6-197cd769b63d',
         path='/Edit-and-run-before-opening-solution.bat',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /Edit-and-run-before-opening-solution.bat\n')

Fragment(uuid='6bbb490d-97d0-4cd0-a78a-262f7e813c1d',
         path='/LICENSE',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='MIT License\n')

Fragment(uuid='ebb95a72-4564-4cdb-8de5-0d2933a71fff',
         path='/LICENSE',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /LICENSE\n')

Fragment(uuid='f186a47a-537a-4cdc-b3fa-01aebd3d7517',
         path='/LICENSE',
         lineno=2,
         depth=1,
         type='documentation',
         name='',
         text='\nCopyright (c) 2021 Viktor Ferenczi\n')

Fragment(uuid='15c646a6-797f-4845-976f-37f171245418',
         path='/LICENSE',
         lineno=4,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'Permission is hereby granted, free of charge, to any person '
              'obtaining a copy\n'
              'of this software and associated documentation files (the '
              '"Software"), to deal\n'
              'in the Software without restriction, including without '
              'limitation the rights\n'
              'to use, copy, modify, merge, publish, distribute, sublicense, '
              'and/or sell\n'
              'copies of the Software, and to permit persons to whom the '
              'Software is\n'
              'furnished to do so, subject to the following conditions:\n')

Fragment(uuid='615569ef-118f-4e96-9a36-25030411388a',
         path='/LICENSE',
         lineno=11,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'The above copyright notice and this permission notice shall be '
              'included in all\n'
              'copies or substantial portions of the Software.\n')

Fragment(uuid='71e255b2-839d-4438-bc3f-10ca061b2d9c',
         path='/LICENSE',
         lineno=14,
         depth=1,
         type='documentation',
         name='',
         text='\n'
              'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, '
              'EXPRESS OR\n'
              'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF '
              'MERCHANTABILITY,\n'
              'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO '
              'EVENT SHALL THE\n'
              'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES '
              'OR OTHER\n'
              'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, '
              'ARISING FROM,\n'
              'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER '
              'DEALINGS IN THE\n'
              'SOFTWARE.\n')

Fragment(uuid='82c0f986-6733-44f9-b2ea-d36d7dccfb48',
         path='/README.md',
         lineno=1,
         depth=1,
         type='documentation',
         name='',
         text='# Toolbar Manager\n'
              '\n'
              'Toolbar Manager for the Space Engineers game.\n'
              '\n'
              'For support please [join the SE Mods '
              'Discord](https://discord.gg/PYPFPGf3Ca).\n'
              '\n'
              'Please consider [supporting my work on '
              'Patreon](https://www.patreon.com/semods).\n'
              '\n')

Fragment(uuid='d89a9e2e-1f1f-4101-8914-1daafbaf1f36',
         path='/README.md',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='# Toolbar Manager\n'
              '## Features\n'
              '### Toolbars\n'
              '### Quick block selection\n'
              '### Planned features\n'
              '## Installation\n'
              '## Want to know more?\n'
              '## Credits\n'
              '### Patreon Supporters\n'
              '#### Admiral level\n'
              '#### Captain level\n'
              '#### Testers\n'
              '### Creators\n')

Fragment(uuid='d0ba0f5b-95aa-4dff-979e-6d1860749ac6',
         path='/README.md',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='## Features\n'
              '\n'
              'This plugin allows for saving and loading toolbars. For example '
              'you can \n'
              'quickly load a "standard" toolbar into any game, which can '
              'greatly speed\n'
              'up your builds by using toolbar slots you have already '
              'memorized.\n'
              '\n'
              'This plugin works for both offline and online multiplayer games '
              'without\n'
              'the need for any server side support. All your save files are '
              'local, \n'
              'nothing is stored on a server.\n'
              '\n')

Fragment(uuid='62a43032-88c0-40d8-b0d4-95bdb3a4815f',
         path='/README.md',
         lineno=19,
         depth=2,
         type='documentation',
         name='',
         text='### Toolbars\n'
              '\n'
              'The **G menu** has two new buttons to manage saved toolbars:\n'
              '- Save\n'
              '- Load\n'
              '\n'
              '**Merge** is the same as **Load**, but does not clear slots not '
              'used by the toolbar loaded.\n'
              '\n'
              'Saved toolbars are stored as XML files under: '
              '`%AppData%\\Roaming\\SpaceEngineers\\ToolbarManager`\n'
              '\n'
              'There are subdirectories for each toolbar type. Toolbars within '
              'the same type are compatible,\n'
              'altough they may not have the same amount of slots available.\n'
              '\n'
              'It is possible to save the toolbar from a cockpit and load into '
              'a remote control, for example.\n'
              '\n')

Fragment(uuid='8f122b36-1c92-4f79-9b52-ada8a69a8b04',
         path='/README.md',
         lineno=34,
         depth=10,
         type='documentation',
         name='',
         text='### Quick block selection\n')

Fragment(uuid='1652a7fd-cb03-4e0d-961d-02c548998b8d',
         path='/README.md',
         lineno=35,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Press the `BACKSLASH` or `PIPE` key (on English keyboard) to '
              'open the quick \n'
              'block search menu. It works the same way as the original menu, '
              'but the search \n'
              'rules are optimized to find blocks primarily by capital letters '
              'and digits:\n')

Fragment(uuid='f56b000d-0b9a-4b49-9e01-bef4635be091',
         path='/README.md',
         lineno=39,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '- `AB` **Armor Blocks**\n'
              '- `PB` **Programmable Block**\n'
              '- `SK` **Survival Kit**\n'
              '- `AT` **Atmospheric Thrusters**\n'
              '- `LHT` **Large Hydrogen Thrusters**\n'
              '- `211` **All 2x1x1 armor blocks**\n')

Fragment(uuid='84c7673c-a82d-42c2-bd0b-012372f7dd4a',
         path='/README.md',
         lineno=46,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Adding the subsequent lower case letters after an upper case '
              'one allows \n'
              'for narrowing down in case of ambiguity:\n')

Fragment(uuid='48e5e4a4-e6b2-4f2f-b1f2-f29dc037511c',
         path='/README.md',
         lineno=49,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              '- `PH` **Parachute Hatch** and **Point Hand**\n'
              '- `PHat` **Parachute Hatch** only\n')

Fragment(uuid='6475df65-37fb-4c71-b229-99552ec714b6',
         path='/README.md',
         lineno=52,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'The order of characters must match exactly. Lower case '
              'characters and\n'
              'space are skipped after a matching upper chase character or '
              'digit. \n')

Fragment(uuid='5ab8540c-7a22-43c8-abdc-6fc5bb81c529',
         path='/README.md',
         lineno=55,
         depth=10,
         type='documentation',
         name='',
         text='\n'
              'Separating multiple search patterns by space is not supported, '
              'currently.\n'
              '\n')

Fragment(uuid='64ef8dff-3377-4151-ae69-c39948bb69e1',
         path='/README.md',
         lineno=58,
         depth=2,
         type='documentation',
         name='',
         text='### Planned features\n'
              '- Restricting the load/merge operations to certain toolbar '
              'pages\n'
              '- Multiplying the available toolbar pages using new hotkeys and '
              'saved toolbars\n'
              '- Moving and swapping toolbar items using mouse drag&drop\n'
              '- Moving toolbar items between toolbar pages\n'
              '- Swapping toolbar pages\n'
              '\n'
              'Please join the Discord (see below) and tell me which one you '
              'would use, \n'
              'so they can be fast-tracked.  \n'
              '\n')

Fragment(uuid='30f4ce71-4f60-426e-ae61-cb4f225b029f',
         path='/README.md',
         lineno=68,
         depth=1,
         type='documentation',
         name='',
         text='## Installation\n'
              '1. Exit from Space Engineers\n'
              '2. Install the [Plugin '
              'Loader](https://steamcommunity.com/sharedfiles/filedetails/?id=2407984968)\n'
              '3. Start Space Engineers\n'
              '4. Open the Plugins menu (should be in the Main Menu)\n'
              '5. Enable the Toolbar Manager plugin\n'
              '6. Save and let the game restart\n'
              '\n'
              'After enabling the plugin it will be active for all single- and '
              'multiplayer worlds.\n'
              '\n'
              '*Enjoy!*\n'
              '\n')

Fragment(uuid='c04bdadf-1ce8-451f-9de7-aeeadaf791c5',
         path='/README.md',
         lineno=80,
         depth=1,
         type='documentation',
         name='',
         text='## Want to know more?\n'
              '- [SE Mods Discord](https://discord.gg/PYPFPGf3Ca)\n'
              '- [Plugin Loader Discord](https://discord.gg/6ETGRU3CzR)\n'
              '- [YouTube '
              'Channel](https://www.youtube.com/channel/UCc5ar3cW9qoOgdBb1FM_rxQ)\n'
              '- [Source '
              'code](https://github.com/viktor-ferenczi/toolbar-manager)\n'
              '- [Bug reports](https://discord.gg/x3Z8Ug5YkQ)\n'
              '\n')

Fragment(uuid='a1bc8437-22cc-4c74-b567-927fb96e7c84',
         path='/README.md',
         lineno=87,
         depth=2,
         type='documentation',
         name='',
         text='## Credits\n\n')

Fragment(uuid='627c2751-ffe5-4165-80a4-badb843c1d28',
         path='/README.md',
         lineno=89,
         depth=2,
         type='documentation',
         name='',
         text='### Patreon Supporters\n'
              '\n'
              '#### Admiral level\n'
              '- BetaMark\n'
              '- Mordith - Guardians SE\n'
              '- Robot10\n'
              '- Casinost\n'
              '- wafoxxx\n'
              '\n'
              '#### Captain level\n'
              '- Diggz\n'
              '- lazul\n'
              '- jiringgot\n'
              '- Kam Solastor\n'
              '- NeonDrip\n'
              '- NeVaR\n'
              '- opesoorry\n'
              '- NeVaR\n'
              '- Jimbo\n'
              '- Lotan\n'
              '\n'
              '#### Testers\n'
              '- Avaness\n'
              '- ...\n'
              '\n')

Fragment(uuid='0781fc8f-9924-4742-ba3d-3b49c0be0b4d',
         path='/README.md',
         lineno=114,
         depth=2,
         type='documentation',
         name='',
         text='### Creators\n'
              '- avaness - Plugin Loader, Racing Display\n'
              '- Mordith - Guardians SE\n'
              '- Mike Dude - Guardians SE\n'
              '- SwiftyTech - Stargate Dimensions\n'
              '- Fred XVI - Racing maps\n'
              '- Kamikaze - M&M mod\n'
              '- LTP\n'
              '\n'
              '**Thank you very much for all your support and hard work on '
              'testing!**')

Fragment(uuid='89278c0a-dfd9-4ef0-953f-463664ce96fe',
         path='/ToolbarManager.sln',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\ufeff')

Fragment(uuid='cd707420-3213-4440-a511-285804963e18',
         path='/ToolbarManager.sln',
         lineno=1,
         depth=2,
         type='documentation',
         name='',
         text='\nMicrosoft Visual Studio Solution File, Format Version 12.00')

Fragment(uuid='5e1157a5-8a39-4639-a63d-9274b933ccee',
         path='/ToolbarManager.sln',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /ToolbarManager.sln\n')

Fragment(uuid='596a87ad-d595-44f2-94c4-a491add6616d',
         path='/ToolbarManager.sln',
         lineno=2,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              'Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = '
              '"ToolbarManager", "ToolbarManager\\ToolbarManager.csproj", '
              '"{E79C2AFE-FC1F-4A5A-AB40-0AFED1E30570}"')

Fragment(uuid='a5390a82-7a32-42fc-8666-63a1cc985438',
         path='/ToolbarManager.sln',
         lineno=3,
         depth=2,
         type='documentation',
         name='',
         text='\nEndProject')

Fragment(uuid='24968fed-de43-4eee-ba9a-aa2a00f4d540',
         path='/ToolbarManager.sln',
         lineno=4,
         depth=2,
         type='documentation',
         name='',
         text='\nGlobal')

Fragment(uuid='033f343d-ee59-4123-acb9-8b4e855ccb57',
         path='/ToolbarManager.sln',
         lineno=5,
         depth=2,
         type='documentation',
         name='',
         text='\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution')

Fragment(uuid='3493e4e3-832b-4a1f-b499-096e537f1bc6',
         path='/ToolbarManager.sln',
         lineno=6,
         depth=2,
         type='documentation',
         name='',
         text='\n\t\tDebug|Any CPU = Debug|Any CPU')

Fragment(uuid='b4bdc123-0b92-4a7d-ac92-e199f314c479',
         path='/ToolbarManager.sln',
         lineno=7,
         depth=2,
         type='documentation',
         name='',
         text='\n\t\tRelease|Any CPU = Release|Any CPU')

Fragment(uuid='5ca72ad1-b9d0-4654-9690-de5922adbbe6',
         path='/ToolbarManager.sln',
         lineno=8,
         depth=2,
         type='documentation',
         name='',
         text='\n\tEndGlobalSection')

Fragment(uuid='973ac5f1-1179-4207-9f9c-e6d5c27d54b6',
         path='/ToolbarManager.sln',
         lineno=9,
         depth=2,
         type='documentation',
         name='',
         text='\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution')

Fragment(uuid='ca06e70f-9d13-4018-9391-59c646834ce6',
         path='/ToolbarManager.sln',
         lineno=10,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '\t\t{E79C2AFE-FC1F-4A5A-AB40-0AFED1E30570}.Debug|Any '
              'CPU.ActiveCfg = Debug|Any CPU')

Fragment(uuid='7ac44bb9-1f23-451b-a72d-f308ce8f0226',
         path='/ToolbarManager.sln',
         lineno=11,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '\t\t{E79C2AFE-FC1F-4A5A-AB40-0AFED1E30570}.Debug|Any '
              'CPU.Build.0 = Debug|Any CPU')

Fragment(uuid='d6642d04-42ef-4308-958a-c0112a7a85fa',
         path='/ToolbarManager.sln',
         lineno=12,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '\t\t{E79C2AFE-FC1F-4A5A-AB40-0AFED1E30570}.Release|Any '
              'CPU.ActiveCfg = Release|Any CPU')

Fragment(uuid='77b8518d-6df1-497e-aa20-b2cbe8d2a19d',
         path='/ToolbarManager.sln',
         lineno=13,
         depth=2,
         type='documentation',
         name='',
         text='\n'
              '\t\t{E79C2AFE-FC1F-4A5A-AB40-0AFED1E30570}.Release|Any '
              'CPU.Build.0 = Release|Any CPU')

Fragment(uuid='1c7e2055-7fcd-43b0-9cd4-3f6d76d0b4b4',
         path='/ToolbarManager.sln',
         lineno=14,
         depth=2,
         type='documentation',
         name='',
         text='\n\tEndGlobalSection')

Fragment(uuid='69607624-7803-4e82-95a9-7f0e281be82e',
         path='/ToolbarManager.sln',
         lineno=15,
         depth=2,
         type='documentation',
         name='',
         text='\nEndGlobal')

Fragment(uuid='1cf8472a-22cd-48ec-8e0a-133d726b6047',
         path='/ToolbarManager.sln',
         lineno=16,
         depth=2,
         type='documentation',
         name='',
         text='\n')

Fragment(uuid='3696ab46-5670-4171-bbb1-28b34157f20d',
         path='/ToolbarManager/Extensions/MyGuiSandboxExt.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='using System.Text;\n'
              'using Sandbox.Graphics.GUI;\n'
              '\n'
              'namespace ToolbarManager.Extensions\n'
              '{\n'
              '    public static class MyGuiSandboxExt\n'
              '    {\n'
              '        public static void Show(StringBuilder text, '
              'StringBuilder caption, MyMessageBoxStyleEnum type = '
              'MyMessageBoxStyleEnum.Error)\n'
              '            => '
              'MyGuiSandbox.AddScreen(MyGuiSandbox.CreateMessageBox(type, '
              'messageText: text, messageCaption: caption));\n'
              '\n'
              '        public static void Show(string text, string caption, '
              'MyMessageBoxStyleEnum type = MyMessageBoxStyleEnum.Error)\n'
              '            => Show(new StringBuilder(text), new '
              'StringBuilder(caption), type);\n'
              '    }\n'
              '}')

Fragment(uuid='7d634ba2-c2f2-4ccf-9ba0-7a0e7d34c49c',
         path='/ToolbarManager/Extensions/MyGuiSandboxExt.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Extensions/MyGuiSandboxExt.cs\n'
              '  Classes: MyGuiSandboxExt\n'
              '  Methods: Show Show\n'
              '  Usages: AddScreen CreateMessageBox Error Error Extensions GUI '
              'Graphics MyGuiSandbox MyGuiSandbox MyMessageBoxStyleEnum '
              'MyMessageBoxStyleEnum MyMessageBoxStyleEnum '
              'MyMessageBoxStyleEnum Sandbox Show StringBuilder StringBuilder '
              'System Text ToolbarManager caption caption caption caption '
              'messageCaption messageText text text text text type type type '
              'type\n')

Fragment(uuid='7889619c-4391-4f9f-bbae-abe6d15742aa',
         path='/ToolbarManager/Extensions/MyGuiSandboxExt.cs',
         lineno=6,
         depth=2,
         type='class',
         name='MyGuiSandboxExt',
         text='public static class MyGuiSandboxExt\n'
              '    {\n'
              '        public static void Show(StringBuilder text, '
              'StringBuilder caption, MyMessageBoxStyleEnum type = '
              'MyMessageBoxStyleEnum.Error)\n'
              '            => '
              'MyGuiSandbox.AddScreen(MyGuiSandbox.CreateMessageBox(type, '
              'messageText: text, messageCaption: caption));\n'
              '\n'
              '        public static void Show(string text, string caption, '
              'MyMessageBoxStyleEnum type = MyMessageBoxStyleEnum.Error)\n'
              '            => Show(new StringBuilder(text), new '
              'StringBuilder(caption), type);\n'
              '    }')

Fragment(uuid='cc600167-aff7-44f5-b4f6-5d06f00d5305',
         path='/ToolbarManager/Extensions/MyGuiSandboxExt.cs',
         lineno=8,
         depth=4,
         type='method',
         name='Show',
         text='public static void Show(StringBuilder text, StringBuilder '
              'caption, MyMessageBoxStyleEnum type = '
              'MyMessageBoxStyleEnum.Error)\n'
              '            => '
              'MyGuiSandbox.AddScreen(MyGuiSandbox.CreateMessageBox(type, '
              'messageText: text, messageCaption: caption));')

Fragment(uuid='6ebcb6fb-7400-41b7-8a2c-2a4f0349be5b',
         path='/ToolbarManager/Extensions/MyGuiSandboxExt.cs',
         lineno=11,
         depth=4,
         type='method',
         name='Show',
         text='public static void Show(string text, string caption, '
              'MyMessageBoxStyleEnum type = MyMessageBoxStyleEnum.Error)\n'
              '            => Show(new StringBuilder(text), new '
              'StringBuilder(caption), type);')

Fragment(uuid='ecc3fbb8-c48f-4344-9b45-dceb8d5c8ca9',
         path='/ToolbarManager/Extensions/MyGuiScreenToolbarConfigBaseExt.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='using System.Reflection;\n'
              'using HarmonyLib;\n'
              'using Sandbox.Game.Gui;\n'
              'using VRage.Game;\n'
              '\n'
              'namespace ToolbarManager.Extensions\n'
              '{\n'
              '    public static class MyGuiScreenToolbarConfigBaseExt\n'
              '    {\n'
              '        private static readonly MethodInfo '
              'AddGridItemToToolbarMethodInfo = '
              'AccessTools.DeclaredMethod(typeof(MyGuiScreenToolbarConfigBase), '
              '"AddGridItemToToolbar");\n'
              '        public static void AddGridItemToToolbar(this '
              'MyGuiScreenToolbarConfigBase obj, MyObjectBuilder_ToolbarItem '
              'toolbarItemBuilder) => '
              'AddGridItemToToolbarMethodInfo.Invoke(obj, new object[] { '
              'toolbarItemBuilder });\n'
              '    }\n'
              '}')

Fragment(uuid='a844d376-b087-4de8-a3c0-e5fd7be39c77',
         path='/ToolbarManager/Extensions/MyGuiScreenToolbarConfigBaseExt.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: '
              '/ToolbarManager/Extensions/MyGuiScreenToolbarConfigBaseExt.cs\n'
              '  Classes: MyGuiScreenToolbarConfigBaseExt\n'
              '  Methods: AddGridItemToToolbar\n'
              '  Variables: MethodInfo\n'
              '  Usages: AccessTools AddGridItemToToolbarMethodInfo '
              'AddGridItemToToolbarMethodInfo DeclaredMethod Extensions Game '
              'Game Gui HarmonyLib Invoke MyGuiScreenToolbarConfigBase '
              'MyGuiScreenToolbarConfigBase MyObjectBuilder_ToolbarItem '
              'Reflection Sandbox System ToolbarManager VRage obj obj '
              'toolbarItemBuilder toolbarItemBuilder\n')

Fragment(uuid='bdaebaa5-2352-409e-a7ad-b7642c82c88e',
         path='/ToolbarManager/Extensions/MyGuiScreenToolbarConfigBaseExt.cs',
         lineno=8,
         depth=2,
         type='class',
         name='MyGuiScreenToolbarConfigBaseExt',
         text='public static class MyGuiScreenToolbarConfigBaseExt\n'
              '    {\n'
              '        private static readonly MethodInfo '
              'AddGridItemToToolbarMethodInfo = '
              'AccessTools.DeclaredMethod(typeof(MyGuiScreenToolbarConfigBase), '
              '"AddGridItemToToolbar");\n'
              '        public static void AddGridItemToToolbar(this '
              'MyGuiScreenToolbarConfigBase obj, MyObjectBuilder_ToolbarItem '
              'toolbarItemBuilder) => '
              'AddGridItemToToolbarMethodInfo.Invoke(obj, new object[] { '
              'toolbarItemBuilder });\n'
              '    }')

Fragment(uuid='b47764b1-e2a7-4ee7-aa15-a30558afda80',
         path='/ToolbarManager/Extensions/MyGuiScreenToolbarConfigBaseExt.cs',
         lineno=10,
         depth=5,
         type='variable',
         name='MethodInfo',
         text='MethodInfo AddGridItemToToolbarMethodInfo = '
              'AccessTools.DeclaredMethod(typeof(MyGuiScreenToolbarConfigBase), '
              '"AddGridItemToToolbar")')

Fragment(uuid='446800a8-4eb4-497f-b881-1f6a585f838a',
         path='/ToolbarManager/Extensions/MyGuiScreenToolbarConfigBaseExt.cs',
         lineno=11,
         depth=4,
         type='method',
         name='AddGridItemToToolbar',
         text='public static void AddGridItemToToolbar(this '
              'MyGuiScreenToolbarConfigBase obj, MyObjectBuilder_ToolbarItem '
              'toolbarItemBuilder) => '
              'AddGridItemToToolbarMethodInfo.Invoke(obj, new object[] { '
              'toolbarItemBuilder });')

Fragment(uuid='757de1ff-d1c2-4fc9-b51b-94b605de410d',
         path='/ToolbarManager/Extensions/PathExt.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='namespace ToolbarManager.Extensions\n'
              '{\n'
              '    public static class PathExt\n'
              '    {\n'
              '        public static string SanitizeFileName(string name)\n'
              '        {\n'
              '            return name\n'
              '                .Trim()\n'
              "                .Replace(':', '.')\n"
              "                .Replace('?', '.')\n"
              "                .Replace('*', '-')\n"
              "                .Replace('/', '-')\n"
              "                .Replace('\\\\', '_');\n"
              '        }\n'
              '    }\n'
              '}')

Fragment(uuid='cb5fd8b5-8e9e-4556-8748-618877156752',
         path='/ToolbarManager/Extensions/PathExt.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Extensions/PathExt.cs\n'
              '  Classes: PathExt\n'
              '  Methods: SanitizeFileName\n'
              '  Usages: Extensions Replace Replace Replace Replace Replace '
              'ToolbarManager Trim name name\n')

Fragment(uuid='3a9e3b56-57dd-4310-97a1-f7e189eb9db4',
         path='/ToolbarManager/Extensions/PathExt.cs',
         lineno=3,
         depth=2,
         type='class',
         name='PathExt',
         text='public static class PathExt\n'
              '    {\n'
              '        public static string SanitizeFileName(string name)\n'
              '        {\n'
              '            return name\n'
              '                .Trim()\n'
              "                .Replace(':', '.')\n"
              "                .Replace('?', '.')\n"
              "                .Replace('*', '-')\n"
              "                .Replace('/', '-')\n"
              "                .Replace('\\\\', '_');\n"
              '        }\n'
              '    }')

Fragment(uuid='ebf5d98c-509e-436f-b9ea-3f5ea4891b91',
         path='/ToolbarManager/Extensions/PathExt.cs',
         lineno=5,
         depth=4,
         type='method',
         name='SanitizeFileName',
         text='public static string SanitizeFileName(string name)\n'
              '        {\n'
              '            return name\n'
              '                .Trim()\n'
              "                .Replace(':', '.')\n"
              "                .Replace('?', '.')\n"
              "                .Replace('*', '-')\n"
              "                .Replace('/', '-')\n"
              "                .Replace('\\\\', '_');\n"
              '        }')

Fragment(uuid='d59487c6-6bd8-442a-b2b9-4257e585cf9f',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='using System.Collections.Generic;\n'
              'using System.Diagnostics.CodeAnalysis;\n'
              'using System.Runtime.CompilerServices;\n'
              'using Sandbox.Definitions;\n'
              'using Sandbox.Game.Gui;\n'
              'using VRage.Game;\n')

Fragment(uuid='8c87c2e5-c6a1-4f56-ace2-98a1fec2d5e9',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Gui/CustomSearchCondition.cs\n'
              '  Classes: CustomSearchCondition\n'
              '  Methods: AddDefinitionGroup Clean CleanDefinitionGroups '
              'GetSortedBlocks MatchesCondition MatchesCondition\n'
              '  Usages: Add AggressiveInlining AggressiveInlining '
              'AggressiveInlining AggressiveInlining AggressiveInlining '
              'AggressiveInlining CleanDefinitionGroups Clear CodeAnalysis '
              'Collections CompilerServices Definitions Diagnostics '
              'DisplayNameText Game Game Generic Gui Gui HashSet HashSet '
              'HashSet IMySearchCondition IsValid Length Length '
              'MatchesCondition MethodImpl MethodImpl MethodImpl MethodImpl '
              'MethodImpl MethodImpl MethodImplOptions MethodImplOptions '
              'MethodImplOptions MethodImplOptions MethodImplOptions '
              'MethodImplOptions MyCubeBlockDefinitionGroup '
              'MyCubeBlockDefinitionGroup MyCubeBlockDefinitionGroup '
              'MyCubeBlockDefinitionGroup MyDefinitionBase Runtime Sandbox '
              'Sandbox SearchName SuppressMessage System System System '
              'ToolbarManager VRage definition definition definitionGroup '
              'definitionGroup name name name name searchText searchText '
              'searchText searchText searchText sortedBlocks sortedBlocks '
              'sortedBlocks sortedBlocks value\n')

Fragment(uuid='8052c80a-f5b9-4c81-aca5-8d66b3e69e3f',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=7,
         depth=0,
         type='module',
         name='',
         text='\n'
              'namespace ToolbarManager.Gui\n'
              '{\n'
              '    [SuppressMessage("ReSharper", "UnusedMember.Global")]\n'
              '    public class CustomSearchCondition : IMySearchCondition\n'
              '    {\n'
              '        private string searchText = "";\n'
              '        private readonly HashSet<MyCubeBlockDefinitionGroup> '
              'sortedBlocks = new HashSet<MyCubeBlockDefinitionGroup>();\n'
              '\n'
              '        public string SearchName\n'
              '        {\n'
              '            set => searchText = value;\n'
              '        }\n'
              '\n'
              '        public bool IsValid => searchText != null;\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public void Clean()\n'
              '        {\n'
              '            searchText = "";\n'
              '            CleanDefinitionGroups();\n'
              '        }\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]')

Fragment(uuid='d610f9c1-3377-4cf2-8b38-2ab74387d85b',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=10,
         depth=2,
         type='class',
         name='CustomSearchCondition',
         text='[SuppressMessage("ReSharper", "UnusedMember.Global")]\n'
              '    public class CustomSearchCondition : IMySearchCondition\n'
              '    {\n'
              '        private string searchText = "";\n'
              '        private readonly HashSet<MyCubeBlockDefinitionGroup> '
              'sortedBlocks = new HashSet<MyCubeBlockDefinitionGroup>();\n'
              '\n'
              '        public string SearchName\n'
              '        {\n'
              '            set => searchText = value;\n'
              '        }\n'
              '\n'
              '        public bool IsValid => searchText != null;\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public void Clean()\n'
              '        {\n'
              '            searchText = "";\n'
              '            CleanDefinitionGroups();\n'
              '        }\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public void CleanDefinitionGroups() => '
              'sortedBlocks.Clear();\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public HashSet<MyCubeBlockDefinitionGroup> '
              'GetSortedBlocks() => sortedBlocks;\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public bool MatchesCondition(MyDefinitionBase '
              'definition) => MatchesCondition(definition?.DisplayNameText);\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public void '
              'AddDefinitionGroup(MyCubeBlockDefinitionGroup definitionGroup) '
              '=> sortedBlocks.Add(definitionGroup);\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public bool MatchesCondition(string name)\n'
              '        {\n'
              '            if (name == null)\n'
              '                return false;\n'
              '\n'
              '            var ss = searchText;\n'
              '            var sl = ss.Length;\n'
              '            if (sl == 0)\n'
              '                return false;\n'
              '\n'
              '            // Prepare the first character of the search '
              'string\n'
              '            var si = 0;\n'
              '            var sc = ss[0];\n'
              "            var su = sc >= '0' && sc <= '9' || sc >= 'A' && sc "
              "<= 'Z';\n"
              '\n'
              '            // Walk on each character of the name\n'
              '            // Index based algorithm for speed (it does not '
              'allocate)\n'
              '            var nl = name.Length;\n'
              '            for (var ii = 0; ii < nl; ii++)\n'
              '            {\n'
              '                // Mismatching character?\n'
              '                if (name[ii] != sc)\n'
              '                {\n'
              '                    // Digits and upper case characters allow '
              'skipping characters\n'
              '                    if (su)\n'
              '                        continue;\n'
              '                    \n'
              '                    // Anything else matched exactly\n'
              '                    break;\n'
              '                }\n'
              '\n'
              '                // Skip the matching character in the search '
              'string\n'
              '                si += 1;\n'
              '                if (si == sl)\n'
              '                    return true;\n'
              '\n'
              '                // Recall the next character from the search '
              'string\n'
              '                sc = ss[si];\n'
              "                su = sc >= '0' && sc <= '9' || sc >= 'A' && sc "
              "<= 'Z';\n"
              '            }\n'
              '\n'
              '            return false;\n'
              '        }\n'
              '    }')

Fragment(uuid='4cd8901c-1a2b-46d6-a585-f52dc73f46f5',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=23,
         depth=4,
         type='method',
         name='Clean',
         text='[MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public void Clean()\n'
              '        {\n'
              '            searchText = "";\n'
              '            CleanDefinitionGroups();\n'
              '        }')

Fragment(uuid='e12d0da2-31fb-4980-a31b-73b99517ac30',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=30,
         depth=0,
         type='module',
         name='',
         text='\n'
              '        public void CleanDefinitionGroups() => '
              'sortedBlocks.Clear();\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public HashSet<MyCubeBlockDefinitionGroup> '
              'GetSortedBlocks() => sortedBlocks;\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public bool MatchesCondition(MyDefinitionBase '
              'definition) => MatchesCondition(definition?.DisplayNameText);\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public void '
              'AddDefinitionGroup(MyCubeBlockDefinitionGroup definitionGroup) '
              '=> sortedBlocks.Add(definitionGroup);\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public bool MatchesCondition(string name)\n'
              '        {\n')

Fragment(uuid='c88ab6f6-643f-4a8a-922d-9d7588a6c91a',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=30,
         depth=4,
         type='method',
         name='CleanDefinitionGroups',
         text='[MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public void CleanDefinitionGroups() => '
              'sortedBlocks.Clear();')

Fragment(uuid='08e5e7f1-a6e5-4e0e-9628-d6d94f5abf0f',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=33,
         depth=4,
         type='method',
         name='GetSortedBlocks',
         text='[MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public HashSet<MyCubeBlockDefinitionGroup> '
              'GetSortedBlocks() => sortedBlocks;')

Fragment(uuid='a84866b7-d8b8-4484-8073-0fdd45fba7b0',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=36,
         depth=4,
         type='method',
         name='MatchesCondition',
         text='[MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public bool MatchesCondition(MyDefinitionBase '
              'definition) => MatchesCondition(definition?.DisplayNameText);')

Fragment(uuid='ef8bc273-0409-4b01-b3c3-52df2abb2b15',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=39,
         depth=4,
         type='method',
         name='AddDefinitionGroup',
         text='[MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public void '
              'AddDefinitionGroup(MyCubeBlockDefinitionGroup definitionGroup) '
              '=> sortedBlocks.Add(definitionGroup);')

Fragment(uuid='7c54d730-e971-4b6c-83e4-9396d28f3c2d',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=42,
         depth=4,
         type='method',
         name='MatchesCondition',
         text='[MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        public bool MatchesCondition(string name)\n'
              '        {\n'
              '            if (name == null)\n'
              '                return false;\n'
              '\n'
              '            var ss = searchText;\n'
              '            var sl = ss.Length;\n'
              '            if (sl == 0)\n'
              '                return false;\n'
              '\n'
              '            // Prepare the first character of the search '
              'string\n'
              '            var si = 0;\n'
              '            var sc = ss[0];\n'
              "            var su = sc >= '0' && sc <= '9' || sc >= 'A' && sc "
              "<= 'Z';\n"
              '\n'
              '            // Walk on each character of the name\n'
              '            // Index based algorithm for speed (it does not '
              'allocate)\n'
              '            var nl = name.Length;\n'
              '            for (var ii = 0; ii < nl; ii++)\n'
              '            {\n'
              '                // Mismatching character?\n'
              '                if (name[ii] != sc)\n'
              '                {\n'
              '                    // Digits and upper case characters allow '
              'skipping characters\n'
              '                    if (su)\n'
              '                        continue;\n'
              '                    \n'
              '                    // Anything else matched exactly\n'
              '                    break;\n'
              '                }\n'
              '\n'
              '                // Skip the matching character in the search '
              'string\n'
              '                si += 1;\n'
              '                if (si == sl)\n'
              '                    return true;\n'
              '\n'
              '                // Recall the next character from the search '
              'string\n'
              '                sc = ss[si];\n'
              "                su = sc >= '0' && sc <= '9' || sc >= 'A' && sc "
              "<= 'Z';\n"
              '            }\n'
              '\n'
              '            return false;\n'
              '        }')

Fragment(uuid='8f24e445-3d7d-4ccd-bb58-9e16a83246bb',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=45,
         depth=0,
         type='module',
         name='',
         text='            if (name == null)\n'
              '                return false;\n'
              '\n'
              '            var ss = searchText;\n'
              '            var sl = ss.Length;\n')

Fragment(uuid='6747242c-d44d-4c6f-8b72-6147603d1744',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=50,
         depth=0,
         type='module',
         name='',
         text='            if (sl == 0)\n'
              '                return false;\n'
              '\n'
              '            // Prepare the first character of the search '
              'string\n'
              '            var si = 0;\n'
              '            var sc = ss[0];\n'
              "            var su = sc >= '0' && sc <= '9' || sc >= 'A' && sc "
              "<= 'Z';\n"
              '\n'
              '            // Walk on each character of the name\n'
              '            // Index based algorithm for speed (it does not '
              'allocate)\n'
              '            var nl = name.Length;\n')

Fragment(uuid='aaad107a-f18a-4347-8996-44cbded5e5ea',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=61,
         depth=0,
         type='module',
         name='',
         text='            for (var ii = 0; ii < nl; ii++)\n'
              '            {\n'
              '                // Mismatching character?\n')

Fragment(uuid='daf4b1fa-15b5-42c9-866c-30718470c507',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=64,
         depth=0,
         type='module',
         name='',
         text='                if (name[ii] != sc)\n'
              '                {\n'
              '                    // Digits and upper case characters allow '
              'skipping characters\n')

Fragment(uuid='37e7211f-104b-4e96-ab10-4f9f6f2efe4a',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=67,
         depth=0,
         type='module',
         name='',
         text='                    if (su)\n'
              '                        continue;\n'
              '                    \n'
              '                    // Anything else matched exactly\n'
              '                    break;\n'
              '                }\n'
              '\n'
              '                // Skip the matching character in the search '
              'string\n'
              '                si += 1;\n')

Fragment(uuid='357fb261-c5a2-42a9-8ac1-da9530f7428a',
         path='/ToolbarManager/Gui/CustomSearchCondition.cs',
         lineno=76,
         depth=0,
         type='module',
         name='',
         text='                if (si == sl)\n'
              '                    return true;\n'
              '\n'
              '                // Recall the next character from the search '
              'string\n'
              '                sc = ss[si];\n'
              "                su = sc >= '0' && sc <= '9' || sc >= 'A' && sc "
              "<= 'Z';\n"
              '            }\n'
              '\n'
              '            return false;\n'
              '        }\n'
              '    }\n'
              '}')

Fragment(uuid='a53b411c-a487-4505-87c0-91e7838a1c25',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='using System.Diagnostics.CodeAnalysis;\n'
              'using Sandbox.Game.Entities;\n'
              'using Sandbox.Game.Gui;\n'
              'using Sandbox.Game.Screens.Helpers;\n'
              'using Sandbox.Graphics.GUI;\n'
              'using ToolbarManager.Extensions;\n'
              'using VRage.Game;\n'
              'using VRage.Input;\n'
              'using VRageMath;\n')

Fragment(uuid='11e9a9db-03c0-49cd-abba-38c3b989bf91',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Gui/CustomToolbarConfigScreen.cs\n'
              '  Classes: CustomToolbarConfigScreen\n'
              '  Methods: AddToolsAndAnimations CustomToolbarConfigScreen '
              'CustomToolbarConfigScreen HandleInput LoadSelectedItem '
              'RecreateControls SetSearchText '
              'UpdateGridBlocksBySearchCondition\n'
              '  Variables: CustomSearchCondition MyGuiControlLabel\n'
              '  Usages: Add AddGridItemToToolbar AddToolsAndAnimations '
              'AddToolsAndAnimations CloseScreen CodeAnalysis Controls '
              'CreateToolbarItem CustomSearchCondition Diagnostics Enter '
              'Entities Extensions Font GUI Game Game Game Game GetItemAt '
              'Graphics GridItemUserData Gui Gui HandleInput Helpers '
              'IMySearchCondition IMySearchCondition Input IsJoystickLastUsed '
              'IsNewKeyPressed ItemData ItemData LoadSelectedItem '
              'MoveCarriageToEnd MyCubeBlock MyCubeBlock MyGuiControlLabel '
              'MyGuiScreenCubeBuilder MyInput MyInput MyKeys '
              'MyObjectBuilder_ToolbarItemEmpty MyToolbarItemActions '
              'MyToolbarItemFactory PositionX PositionY RecreateControls '
              'Sandbox Sandbox Sandbox Sandbox Screens SearchName SearchName '
              'SearchText SelectedIndex SelectedIndex Size Size Static Static '
              'SuppressMessage System Text Text Text TextBox TextBox TextBox '
              'TextBox TextFont ToolbarManager ToolbarManager '
              'UpdateGridBlocksBySearchCondition '
              'UpdateGridBlocksBySearchCondition UserData VRage VRage '
              'VRageMath Vector2 Vector2 X Y contructor contructor '
              'customSearchCondition customSearchCondition '
              'customSearchCondition customSearchCondition '
              'customSearchCondition gamepadSlot gamepadSlot gamepadSlot '
              'gamepadSlot hideOtherPages hideOtherPages m_gridBlocks '
              'm_gridBlocks m_gridBlocks m_nameSearchCondition '
              'm_nameSearchCondition m_searchBox m_searchBox m_searchBox '
              'm_searchBox m_searchBox m_searchBox m_searchBox m_searchBox '
              'm_searchBox owner owner owner owner receivedFocusInThisUpdate '
              'receivedFocusInThisUpdate scrollOffset scrollOffset '
              'scrollOffset scrollOffset searchCondition searchCondition '
              'searchCondition searchCondition searchCondition searchCondition '
              'searchInfoLabel searchInfoLabel searchInfoLabel selectedItem '
              'selectedItem selectedPage selectedPage text text toolbarItem '
              'toolbarItem toolbarItemBuilder toolbarItemBuilder '
              'toolbarItemBuilder userData userData userData\n')

Fragment(uuid='d9134cfb-b379-4917-a4f5-acb9fc4862b5',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=10,
         depth=0,
         type='module',
         name='',
         text='\n'
              'namespace ToolbarManager.Gui\n'
              '{\n'
              '    [SuppressMessage("ReSharper", "UnusedMember.Global")]\n'
              '    public class CustomToolbarConfigScreen : '
              'MyGuiScreenCubeBuilder\n'
              '    {\n'
              '        private readonly CustomSearchCondition '
              'customSearchCondition = new CustomSearchCondition();\n'
              '        private MyGuiControlLabel searchInfoLabel;\n'
              '\n'
              '        public CustomToolbarConfigScreen(int scrollOffset = 0, '
              'MyCubeBlock owner = null, int? gamepadSlot = null) : '
              'base(scrollOffset, owner, gamepadSlot)\n'
              '        {\n'
              '        }\n'
              '\n'
              '    ')

Fragment(uuid='9ff65d54-2173-4ebb-a901-0abdb7dc69dd',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=13,
         depth=2,
         type='class',
         name='CustomToolbarConfigScreen',
         text='[SuppressMessage("ReSharper", "UnusedMember.Global")]\n'
              '    public class CustomToolbarConfigScreen : '
              'MyGuiScreenCubeBuilder\n'
              '    {\n'
              '        private readonly CustomSearchCondition '
              'customSearchCondition = new CustomSearchCondition();\n'
              '        private MyGuiControlLabel searchInfoLabel;\n'
              '\n'
              '        public CustomToolbarConfigScreen(int scrollOffset = 0, '
              'MyCubeBlock owner = null, int? gamepadSlot = null) : '
              'base(scrollOffset, owner, gamepadSlot)\n'
              '        {\n'
              '        }\n'
              '\n'
              '        public CustomToolbarConfigScreen(int scrollOffset, '
              'MyCubeBlock owner, string selectedPage, bool hideOtherPages, '
              'int? gamepadSlot = null) : base(scrollOffset, owner, '
              'selectedPage, hideOtherPages, gamepadSlot)\n'
              '        {\n'
              '        }\n'
              '\n'
              '        public void SetSearchText(string text)\n'
              '        {\n'
              '            m_searchBox.SearchText = text;\n'
              '            m_searchBox.TextBox.MoveCarriageToEnd();\n'
              '        }\n'
              '\n'
              '        protected override void '
              'AddToolsAndAnimations(IMySearchCondition searchCondition)\n'
              '        {\n'
              '            if (searchCondition == m_nameSearchCondition)\n'
              '            {\n'
              '                customSearchCondition.SearchName = '
              'm_searchBox.TextBox.Text;\n'
              '                '
              'base.AddToolsAndAnimations(customSearchCondition);\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            base.AddToolsAndAnimations(searchCondition);\n'
              '        }\n'
              '\n'
              '        protected override void '
              'UpdateGridBlocksBySearchCondition(IMySearchCondition '
              'searchCondition)\n'
              '        {\n'
              '            if (searchCondition == m_nameSearchCondition)\n'
              '            {\n'
              '                customSearchCondition.SearchName = '
              'm_searchBox.TextBox.Text;\n'
              '                '
              'base.UpdateGridBlocksBySearchCondition(customSearchCondition);\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            '
              'base.UpdateGridBlocksBySearchCondition(searchCondition);\n'
              '        }\n'
              '\n'
              '        public override void HandleInput(bool '
              'receivedFocusInThisUpdate)\n'
              '        {\n'
              '            if (MyInput.Static.IsNewKeyPressed(MyKeys.Enter))\n'
              '            {\n'
              '                LoadSelectedItem();\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            base.HandleInput(receivedFocusInThisUpdate);\n'
              '        }\n'
              '\n'
              '        private void LoadSelectedItem()\n'
              '        {\n'
              '            if (m_gridBlocks.SelectedIndex == null)\n'
              '                return;\n'
              '\n'
              '            var selectedItem = '
              'm_gridBlocks.GetItemAt(m_gridBlocks.SelectedIndex ?? 0);\n'
              '            if (!(selectedItem?.UserData is GridItemUserData '
              'userData))\n'
              '                return;\n'
              '\n'
              '            var toolbarItemBuilder = userData.ItemData();\n'
              '            if (toolbarItemBuilder is '
              'MyObjectBuilder_ToolbarItemEmpty)\n'
              '                return;\n'
              '\n'
              '            var toolbarItem = '
              'MyToolbarItemFactory.CreateToolbarItem(userData.ItemData());\n'
              '            if (toolbarItem is MyToolbarItemActions && '
              'MyInput.Static.IsJoystickLastUsed)\n'
              '                return;\n'
              '\n'
              '            this.AddGridItemToToolbar(toolbarItemBuilder);\n'
              '\n'
              '            CloseScreen();\n'
              '        }\n'
              '\n'
              '        public override void RecreateControls(bool contructor)\n'
              '        {\n'
              '            base.RecreateControls(contructor);\n'
              '\n'
              '            searchInfoLabel = new MyGuiControlLabel(\n'
              '                new Vector2(m_searchBox.PositionX + '
              'm_searchBox.Size.X * 0.5f + 0.02f, m_searchBox.PositionY + '
              '0.005f),\n'
              '                new Vector2(0.2f, m_searchBox.Size.Y))\n'
              '            {\n'
              '                Font = m_searchBox.TextBox.TextFont,\n'
              '                Text = "Quick Search Mode"\n'
              '            };\n'
              '\n'
              '            Controls.Add(searchInfoLabel);\n'
              '        }\n'
              '    }')

Fragment(uuid='44519391-fc83-40f3-a183-c97ff1d854b4',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=16,
         depth=5,
         type='variable',
         name='CustomSearchCondition',
         text='CustomSearchCondition customSearchCondition = new '
              'CustomSearchCondition()')

Fragment(uuid='632ceb2d-f53a-4b16-9dbf-7e439383cbd9',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=17,
         depth=5,
         type='variable',
         name='MyGuiControlLabel',
         text='MyGuiControlLabel searchInfoLabel')

Fragment(uuid='5d838baf-2dcd-45e6-b36d-5bd335ed1af4',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=19,
         depth=4,
         type='method',
         name='CustomToolbarConfigScreen',
         text='public CustomToolbarConfigScreen(int scrollOffset = 0, '
              'MyCubeBlock owner = null, int? gamepadSlot = null) : '
              'base(scrollOffset, owner, gamepadSlot)\n'
              '        {\n'
              '        }')

Fragment(uuid='6137600d-5727-4aac-85cd-7670cf6ed6b2',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=23,
         depth=0,
         type='module',
         name='',
         text='    public CustomToolbarConfigScreen(int scrollOffset, '
              'MyCubeBlock owner, string selectedPage, bool hideOtherPages, '
              'int? gamepadSlot = null) : base(scrollOffset, owner, '
              'selectedPage, hideOtherPages, gamepadSlot)\n'
              '        {\n'
              '        }\n'
              '\n'
              '        public void SetSearchText(string text)\n'
              '        {\n'
              '            m_searchBox.SearchText = text;\n'
              '            m_searchBox.TextBox.MoveCarriageToEnd();\n'
              '        }\n'
              '\n'
              '        protected override void '
              'AddToolsAndAnimations(IMySearchCondition searchCondition)\n'
              '        {\n')

Fragment(uuid='d9677680-5d73-4b86-832f-9a795fd35ba9',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=23,
         depth=4,
         type='method',
         name='CustomToolbarConfigScreen',
         text='public CustomToolbarConfigScreen(int scrollOffset, MyCubeBlock '
              'owner, string selectedPage, bool hideOtherPages, int? '
              'gamepadSlot = null) : base(scrollOffset, owner, selectedPage, '
              'hideOtherPages, gamepadSlot)\n'
              '        {\n'
              '        }')

Fragment(uuid='4b4225a9-8dbb-4571-a615-811f81f18b0a',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=27,
         depth=4,
         type='method',
         name='SetSearchText',
         text='public void SetSearchText(string text)\n'
              '        {\n'
              '            m_searchBox.SearchText = text;\n'
              '            m_searchBox.TextBox.MoveCarriageToEnd();\n'
              '        }')

Fragment(uuid='107ff51d-5b84-4a2f-a64f-e5a9ee1ac25a',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=33,
         depth=4,
         type='method',
         name='AddToolsAndAnimations',
         text='protected override void '
              'AddToolsAndAnimations(IMySearchCondition searchCondition)\n'
              '        {\n'
              '            if (searchCondition == m_nameSearchCondition)\n'
              '            {\n'
              '                customSearchCondition.SearchName = '
              'm_searchBox.TextBox.Text;\n'
              '                '
              'base.AddToolsAndAnimations(customSearchCondition);\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            base.AddToolsAndAnimations(searchCondition);\n'
              '        }')

Fragment(uuid='44542e39-b50d-4cdc-a9ca-53136bd45721',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='            if (searchCondition == m_nameSearchCondition)\n'
              '            {\n'
              '                customSearchCondition.SearchName = '
              'm_searchBox.TextBox.Text;\n'
              '                '
              'base.AddToolsAndAnimations(customSearchCondition);\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            base.AddToolsAndAnimations(searchCondition);\n'
              '        }\n'
              '\n'
              '        protected override void '
              'UpdateGridBlocksBySearchCondition(IMySearchCondition '
              'searchCondition)\n'
              '        {\n')

Fragment(uuid='a1b772f9-1b59-401a-801a-0af2059c7574',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=45,
         depth=4,
         type='method',
         name='UpdateGridBlocksBySearchCondition',
         text='protected override void '
              'UpdateGridBlocksBySearchCondition(IMySearchCondition '
              'searchCondition)\n'
              '        {\n'
              '            if (searchCondition == m_nameSearchCondition)\n'
              '            {\n'
              '                customSearchCondition.SearchName = '
              'm_searchBox.TextBox.Text;\n'
              '                '
              'base.UpdateGridBlocksBySearchCondition(customSearchCondition);\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            '
              'base.UpdateGridBlocksBySearchCondition(searchCondition);\n'
              '        }')

Fragment(uuid='58b4bfc4-d011-4c87-ae18-cde9573872cf',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='            if (searchCondition == m_nameSearchCondition)\n'
              '            {\n'
              '                customSearchCondition.SearchName = '
              'm_searchBox.TextBox.Text;\n'
              '                '
              'base.UpdateGridBlocksBySearchCondition(customSearchCondition);\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            '
              'base.UpdateGridBlocksBySearchCondition(searchCondition);\n'
              '        }\n'
              '\n'
              '        public override void HandleInput(bool '
              'receivedFocusInThisUpdate)\n'
              '        {\n')

Fragment(uuid='c94d959c-c825-498c-8a7c-cef2a220a04a',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=57,
         depth=4,
         type='method',
         name='HandleInput',
         text='public override void HandleInput(bool '
              'receivedFocusInThisUpdate)\n'
              '        {\n'
              '            if (MyInput.Static.IsNewKeyPressed(MyKeys.Enter))\n'
              '            {\n'
              '                LoadSelectedItem();\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            base.HandleInput(receivedFocusInThisUpdate);\n'
              '        }')

Fragment(uuid='bccc6a70-3579-4321-83e1-ab60667f8460',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=59,
         depth=0,
         type='module',
         name='',
         text='            if (MyInput.Static.IsNewKeyPressed(MyKeys.Enter))\n'
              '            {\n'
              '                LoadSelectedItem();\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            base.HandleInput(receivedFocusInThisUpdate);\n'
              '        }\n'
              '\n'
              '        private void LoadSelectedItem()\n'
              '        {\n')

Fragment(uuid='7f8563f1-e8c5-4a33-8e5f-2d34553208ea',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=68,
         depth=4,
         type='method',
         name='LoadSelectedItem',
         text='private void LoadSelectedItem()\n'
              '        {\n'
              '            if (m_gridBlocks.SelectedIndex == null)\n'
              '                return;\n'
              '\n'
              '            var selectedItem = '
              'm_gridBlocks.GetItemAt(m_gridBlocks.SelectedIndex ?? 0);\n'
              '            if (!(selectedItem?.UserData is GridItemUserData '
              'userData))\n'
              '                return;\n'
              '\n'
              '            var toolbarItemBuilder = userData.ItemData();\n'
              '            if (toolbarItemBuilder is '
              'MyObjectBuilder_ToolbarItemEmpty)\n'
              '                return;\n'
              '\n'
              '            var toolbarItem = '
              'MyToolbarItemFactory.CreateToolbarItem(userData.ItemData());\n'
              '            if (toolbarItem is MyToolbarItemActions && '
              'MyInput.Static.IsJoystickLastUsed)\n'
              '                return;\n'
              '\n'
              '            this.AddGridItemToToolbar(toolbarItemBuilder);\n'
              '\n'
              '            CloseScreen();\n'
              '        }')

Fragment(uuid='b30a9e76-72cf-47bd-9384-951aae91e75a',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=70,
         depth=0,
         type='module',
         name='',
         text='            if (m_gridBlocks.SelectedIndex == null)\n'
              '                return;\n'
              '\n'
              '            var selectedItem = '
              'm_gridBlocks.GetItemAt(m_gridBlocks.SelectedIndex ?? 0);\n')

Fragment(uuid='a822e546-1036-461d-90ab-b810383e556f',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=74,
         depth=0,
         type='module',
         name='',
         text='            if (!(selectedItem?.UserData is GridItemUserData '
              'userData))\n'
              '                return;\n'
              '\n'
              '            var toolbarItemBuilder = userData.ItemData();\n')

Fragment(uuid='ccbf53bb-5b43-4f23-ab6d-41f5ff0c74fa',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=78,
         depth=0,
         type='module',
         name='',
         text='            if (toolbarItemBuilder is '
              'MyObjectBuilder_ToolbarItemEmpty)\n'
              '                return;\n'
              '\n'
              '            var toolbarItem = '
              'MyToolbarItemFactory.CreateToolbarItem(userData.ItemData());\n')

Fragment(uuid='43a80852-ee37-4a03-bc35-5ecaa50e41de',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=82,
         depth=0,
         type='module',
         name='',
         text='            if (toolbarItem is MyToolbarItemActions && '
              'MyInput.Static.IsJoystickLastUsed)\n'
              '                return;\n'
              '\n'
              '            this.AddGridItemToToolbar(toolbarItemBuilder);\n'
              '\n'
              '            CloseScreen();\n'
              '        }\n'
              '\n'
              '        public override void RecreateControls(bool contructor)\n'
              '        {\n'
              '            base.RecreateControls(contructor);\n'
              '\n'
              '            searchInfoLabel = new MyGuiC')

Fragment(uuid='7ed3a03d-e208-42b8-a482-4bba3626ed26',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=90,
         depth=4,
         type='method',
         name='RecreateControls',
         text='public override void RecreateControls(bool contructor)\n'
              '        {\n'
              '            base.RecreateControls(contructor);\n'
              '\n'
              '            searchInfoLabel = new MyGuiControlLabel(\n'
              '                new Vector2(m_searchBox.PositionX + '
              'm_searchBox.Size.X * 0.5f + 0.02f, m_searchBox.PositionY + '
              '0.005f),\n'
              '                new Vector2(0.2f, m_searchBox.Size.Y))\n'
              '            {\n'
              '                Font = m_searchBox.TextBox.TextFont,\n'
              '                Text = "Quick Search Mode"\n'
              '            };\n'
              '\n'
              '            Controls.Add(searchInfoLabel);\n'
              '        }')

Fragment(uuid='6561fce1-6d72-40dc-999b-953b4f63487a',
         path='/ToolbarManager/Gui/CustomToolbarConfigScreen.cs',
         lineno=94,
         depth=0,
         type='module',
         name='',
         text='ontrolLabel(\n'
              '                new Vector2(m_searchBox.PositionX + '
              'm_searchBox.Size.X * 0.5f + 0.02f, m_searchBox.PositionY + '
              '0.005f),\n'
              '                new Vector2(0.2f, m_searchBox.Size.Y))\n'
              '            {\n'
              '                Font = m_searchBox.TextBox.TextFont,\n'
              '                Text = "Quick Search Mode"\n'
              '            };\n'
              '\n'
              '            Controls.Add(searchInfoLabel);\n'
              '        }\n'
              '    }\n'
              '}')

Fragment(uuid='941871fc-9fb4-4f65-a0d0-68e88d81c7ad',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='using System;\n'
              'using System.IO;\n'
              'using System.Text;\n'
              'using LitJson;\n'
              'using Sandbox;\n'
              'using Sandbox.Game.Gui;\n'
              'using Sandbox.Game.Localization;\n'
              'using Sandbox.Graphics.GUI;\n'
              'using ToolbarManager.Extensions;\n'
              'using VRage;\n'
              'using VRage.Game;\n'
              'using VRage.Utils;\n'
              'using VRageMath;\n'
              '\n'
              '// ReSharper disable VirtualMemberCallInConstructor\n')

Fragment(uuid='15a712b1-9d09-4f93-952b-e92822e51145',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Gui/ListDialog.cs\n'
              '  Classes: ListDialog\n'
              '  Methods: AddRowForFile CallResultCallback CellTextComparison '
              'CountUsedSlots CreateButtons CreateListBox GetFriendlyName '
              'JsonData ListDialog ListFiles OnCancel OnDelete OnDeleteForSure '
              'OnItemDoubleClicked OnLoad OnMerge OnNewNameSpecified '
              'OnOverwriteForSure OnRename ReadJson RecreateControls '
              'ReturnLoad ReturnMerge TextComparison TryFindListItem '
              'XmlToJsonPath\n'
              '  Variables: MyGuiControlButton MyGuiControlButton '
              'MyGuiControlButton MyGuiControlButton MyGuiControlButton '
              'MyGuiControlTable\n'
              '  Usages: Action Action Add Add Add Add Add Add Add AddCaption '
              'AddCell AddCell AddRowForFile AddScreen AddScreen AddScreen '
              'Append CallResultCallback CallResultCallback CanBeHidden '
              'CanHideOthers Cancel Cell Cell Cell CellTextComparison Clear '
              'CloseButtonEnabled CloseScreen CloseScreen CloseScreen Color '
              'ColumnsCount Combine Combine Combine Combine CompareTo Config '
              'Controls Controls Controls Controls Controls Controls Count '
              'CountUsedSlots CreateButtons CreateListBox CreateMessageBox '
              'CreateMessageBox Default Default Default Default Delete Delete '
              'Delete Delete DialogSize DialogSize DialogSize DialogSize '
              'DialogSize Directory EndsWith EnumerateFiles EventArgs Exists '
              'Exists Exists Exists Exists Exists Exists Exists Extensions '
              'File File File File File File File File File File File File '
              'File File File GUI Game Game Game Get GetCell GetCell GetCell '
              'GetFileName GetRow GetRow GetRow GetRow GetString Graphics Gui '
              'Gui HORISONTAL_CENTER_AND_VERTICAL_CENTER '
              'HORISONTAL_CENTER_AND_VERTICAL_CENTER '
              'HORISONTAL_CENTER_AND_VERTICAL_CENTER '
              'HORISONTAL_CENTER_AND_VERTICAL_CENTER '
              'HORISONTAL_CENTER_AND_VERTICAL_CENTER '
              'HORISONTAL_CENTER_AND_VERTICAL_TOP IO ItemDoubleClicked '
              'JsonData JsonException JsonMapper Length Length ListFiles '
              'LitJson Localization Move Move MyCommonTexts MyGuiConstants '
              'MyGuiControlButton MyGuiControlButton MyGuiControlButton '
              'MyGuiControlButton MyGuiControlButton MyGuiControlButton '
              'MyGuiControlButton MyGuiControlButton MyGuiControlButton '
              'MyGuiControlButton MyGuiControlButtonStyleEnum '
              'MyGuiControlButtonStyleEnum MyGuiControlButtonStyleEnum '
              'MyGuiControlButtonStyleEnum MyGuiControlButtonStyleEnum '
              'MyGuiControlTable MyGuiControlTable MyGuiControlTable '
              'MyGuiControlTable MyGuiControlTable MyGuiControlTable '
              'MyGuiControlTable MyGuiDrawAlignEnum MyGuiDrawAlignEnum '
              'MyGuiDrawAlignEnum MyGuiDrawAlignEnum MyGuiDrawAlignEnum '
              'MyGuiDrawAlignEnum MyGuiSandbox MyGuiSandbox MyGuiSandbox '
              'MyGuiSandbox MyGuiSandbox MyGuiScreenDebugBase '
              'MyGuiScreenMessageBox MyGuiScreenMessageBox '
              'MyGuiScreenMessageBox MyGuiScreenMessageBox '
              'MyGuiScreenMessageBox MyLog MyLog MyMessageBoxButtonsType '
              'MyMessageBoxButtonsType MySandboxGame MySpaceTexts MyTexts '
              'MyTexts NameDialog OnCancel OnDelete OnDeleteForSure '
              'OnItemDoubleClicked OnLoad OnMerge OnNewNameSpecified '
              'OnOverwriteForSure OnOverwriteForSure OnRename One OriginAlign '
              'Path Path Path Path Path PathExt Position Position Position '
              'Position Position Position ReadAllText ReadJson '
              'RecreateControls RecreateControls Remove Remove ResultEnum '
              'ResultEnum ResultEnum ResultEnum ResultEnum ReturnLoad '
              'ReturnLoad ReturnLoad ReturnMerge Row RowsCount '
              'SCREEN_BACKGROUND_COLOR Sandbox Sandbox Sandbox Sandbox '
              'SanitizeFileName SelectedName SelectedName SelectedName '
              'SelectedName SelectedName SelectedRow SelectedRowIndex '
              'SetColumnComparison SetColumnName SetColumnName '
              'SetCustomColumnWidths SetToolTip SetToolTip SetToolTip '
              'SetToolTip SetToolTip Size Small Small Small SortByColumn '
              'StringBuilder StringBuilder StringBuilder StringBuilder '
              'StringBuilder StringBuilder StringBuilder StringBuilder '
              'StringBuilder StringBuilder StringBuilder Substring Substring '
              'System System System SystemException Text Text Text Text Text '
              'TextComparison ToObject ToString ToString ToVector4 '
              'ToolTipOptionsSpace_Cancel ToolbarManager ToolbarManager '
              'TryFindListItem TryFindListItem TryFindListItem TryFindListItem '
              'UIBkOpacity Utils VRage VRage VRage VRageMath Vector2 Vector2 '
              'Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 '
              'Vector2 VisibleRowsCount Warning Warning White X X '
              'XmlToJsonPath XmlToJsonPath XmlToJsonPath XmlToJsonPath Y Y Y '
              'YES YES YES YES_NO YES_NO args button button button buttonType '
              'buttonType callBack callBack callBack callBack callBack '
              'callback callback cancelButton cancelButton cancelButton '
              'cancelButton cancelButton caption caption caption caption '
              'caption constructor constructor count count defaultName '
              'defaultName defaultName defaultName defaultName deleteButton '
              'deleteButton deleteButton deleteButton deleteButton dirPath '
              'dirPath dirPath dirPath dirPath dirPath dirPath dirPath dirPath '
              'fileName fileName fileName index index index index index index '
              'index index json json json json jsonPath jsonPath jsonPath '
              'jsonPath jsonPath jsonPath jsonPath jsonText jsonText '
              'loadButton loadButton loadButton loadButton loadButton '
              'm_onEnterCallback m_size merge merge mergeButton mergeButton '
              'mergeButton mergeButton mergeButton messageCaption '
              'messageCaption messageText messageText name name name name name '
              'name name name name name name newJsonPath newJsonPath '
              'newJsonPath newJsonPath newName newName newName newName newName '
              'newName newName newName newName newName newName newName newName '
              'newPath newPath newPath newPath newPath newPath newPath '
              'oldJsonPath oldJsonPath oldJsonPath oldName oldName oldName '
              'oldName oldName oldName oldName oldName oldName oldName oldPath '
              'oldPath oldPath oldPath onButtonClick onButtonClick '
              'onButtonClick onButtonClick onButtonClick originAlign '
              'originAlign originAlign originAlign originAlign '
              'overwrittenItemIndex overwrittenItemIndex page page page path '
              'path path path path path path path path path path renameButton '
              'renameButton renameButton renameButton renameButton '
              'renamedItemIndex renamedItemIndex result result result result '
              'result result result result row row row row slotCount slotCount '
              'slots slots slots slots table text text text text text text '
              'text text toolbarTable toolbarTable toolbarTable toolbarTable '
              'toolbarTable toolbarTable toolbarTable toolbarTable '
              'toolbarTable toolbarTable toolbarTable toolbarTable '
              'toolbarTable toolbarTable toolbarTable toolbarTable '
              'toolbarTable toolbarTable toolbarTable usedSlotCounts '
              'usedSlotCounts usedSlotCounts usedSlotCounts usedSlotCounts '
              'visualStyle visualStyle visualStyle visualStyle visualStyle '
              'xmlPath xmlPath xmlPath xmlPath xmlPath\n')

Fragment(uuid='99c1c52c-708c-4b27-b452-6ee4845d56dc',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=16,
         depth=0,
         type='module',
         name='',
         text='\n'
              'namespace ToolbarManager.Gui\n'
              '{\n'
              '    public class ListDialog : MyGuiScreenDebugBase\n'
              '    {\n'
              '        private MyGuiControlTable toolbarTable;\n'
              '        private MyGuiControlButton loadButton;\n'
              '        private MyGuiControlButton mergeButton;\n'
              '        private MyGuiControlButton renameButton;\n'
              '        private MyGuiControlButton deleteButton;\n'
              '        private MyGuiControlButton cancelButton;\n'
              '\n'
              '        private readonly Action<string, bool> callBack;\n'
              '        private readonly string caption;\n'
              '        private readonly string defaultName;\n'
              '        private readonly string dirPath;\n'
              '        private readonly in')

Fragment(uuid='d269f331-f29b-49ea-8baf-36a73452810f',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=19,
         depth=2,
         type='class',
         name='ListDialog',
         text='public class ListDialog : MyGuiScreenDebugBase\n'
              '    {\n'
              '        private MyGuiControlTable toolbarTable;\n'
              '        private MyGuiControlButton loadButton;\n'
              '        private MyGuiControlButton mergeButton;\n'
              '        private MyGuiControlButton renameButton;\n'
              '        private MyGuiControlButton deleteButton;\n'
              '        private MyGuiControlButton cancelButton;\n'
              '\n'
              '        private readonly Action<string, bool> callBack;\n'
              '        private readonly string caption;\n'
              '        private readonly string defaultName;\n'
              '        private readonly string dirPath;\n'
              '        private readonly int[] usedSlotCounts = new int[9];\n'
              '\n'
              '        public ListDialog(\n'
              '            Action<string, bool> callBack,\n'
              '            string caption,\n'
              '            string defaultName,\n'
              '            string dirPath)\n'
              '            : base(new Vector2(0.5f, 0.5f), new Vector2(1f, '
              '0.8f), MyGuiConstants.SCREEN_BACKGROUND_COLOR * '
              'MySandboxGame.Config.UIBkOpacity, true)\n'
              '        {\n'
              '            this.callBack = callBack;\n'
              '            this.caption = caption;\n'
              '            this.defaultName = defaultName;\n'
              '            this.dirPath = dirPath;\n'
              '\n'
              '            RecreateControls(true);\n'
              '\n'
              '            CanBeHidden = true;\n'
              '            CanHideOthers = true;\n'
              '            CloseButtonEnabled = true;\n'
              '\n'
              '            m_onEnterCallback = ReturnLoad;\n'
              '        }\n'
              '\n'
              '        public override void RecreateControls(bool '
              'constructor)\n'
              '        {\n'
              '            base.RecreateControls(constructor);\n'
              '\n'
              '            AddCaption(caption, Color.White.ToVector4(), new '
              'Vector2(0.0f, 0.003f));\n'
              '\n'
              '            CreateListBox();\n'
              '            CreateButtons();\n'
              '        }\n'
              '\n'
              '        private Vector2 DialogSize => m_size ?? Vector2.One;\n'
              '\n'
              '        private void CreateListBox()\n'
              '        {\n'
              '            toolbarTable = new MyGuiControlTable\n'
              '            {\n'
              '                Position = new Vector2(0.001f, -0.5f * '
              'DialogSize.Y + 0.1f),\n'
              '                Size = new Vector2(0.85f * DialogSize.X, '
              'DialogSize.Y - 0.25f),\n'
              '                OriginAlign = '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_TOP,\n'
              '                ColumnsCount = 10,\n'
              '                VisibleRowsCount = 15,\n'
              '            };\n'
              '\n'
              '            var q = 0.76f;\n'
              '            var w = 0.22f / 9f;\n'
              '            toolbarTable.SetCustomColumnWidths(new[] { q, w, w, '
              'w, w, w, w, w, w, w });\n'
              '            toolbarTable.SetColumnName(0, new '
              'StringBuilder("Name"));\n'
              '            toolbarTable.SetColumnComparison(0, '
              'CellTextComparison);\n'
              '            for (var i = 1; i < 10; i++)\n'
              '                toolbarTable.SetColumnName(i, new '
              'StringBuilder($"{i}"));\n'
              '            toolbarTable.SortByColumn(0);\n'
              '            ListFiles();\n'
              '            toolbarTable.ItemDoubleClicked += '
              'OnItemDoubleClicked;\n'
              '            Controls.Add(toolbarTable);\n'
              '        }\n'
              '\n'
              '        private int CellTextComparison(MyGuiControlTable.Cell '
              'x, MyGuiControlTable.Cell y)\n'
              '        {\n'
              '            return TextComparison(x.Text, y.Text);\n'
              '        }\n'
              '\n'
              '        private int TextComparison(StringBuilder x, '
              'StringBuilder y)\n'
              '        {\n'
              '            if (x == null)\n'
              '                return y == null ? 0 : 1;\n'
              '\n'
              '            return y == null ? -1 : x.CompareTo(y);\n'
              '        }\n'
              '\n'
              '        private void CreateButtons()\n'
              '        {\n'
              '            loadButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Default,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Load"), onButtonClick: '
              'OnLoad);\n'
              '\n'
              '            mergeButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Default,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Merge"), '
              'onButtonClick: OnMerge);\n'
              '\n'
              '            renameButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Rename"), '
              'onButtonClick: OnRename);\n'
              '\n'
              '            deleteButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Delete"), '
              'onButtonClick: OnDelete);\n'
              '\n'
              '            cancelButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: MyTexts.Get(MyCommonTexts.Cancel), '
              'onButtonClick: OnCancel);\n'
              '\n'
              '            var xs = 0.85f * DialogSize.X;\n'
              '            var y = 0.5f * (DialogSize.Y - 0.15f);\n'
              '            loadButton.Position = new Vector2(-0.39f * xs, y);\n'
              '            mergeButton.Position = new Vector2(-0.16f * xs, '
              'y);\n'
              '            renameButton.Position = new Vector2(0.06f * xs, '
              'y);\n'
              '            deleteButton.Position = new Vector2(0.24f * xs, '
              'y);\n'
              '            cancelButton.Position = new Vector2(0.42f * xs, '
              'y);\n'
              '\n'
              '            loadButton.SetToolTip("Loads the selected toolbar '
              'replacing the current one");\n'
              '            mergeButton.SetToolTip("Merges the selected toolbar '
              'into the current one");\n'
              '            renameButton.SetToolTip("Renames the selected '
              'toolbar save file");\n'
              '            deleteButton.SetToolTip("Deletes the selected '
              'toolbar save file");\n'
              '            '
              'cancelButton.SetToolTip(MyTexts.GetString(MySpaceTexts.ToolTipOptionsSpace_Cancel));\n'
              '\n'
              '            Controls.Add(loadButton);\n'
              '            Controls.Add(mergeButton);\n'
              '            Controls.Add(renameButton);\n'
              '            Controls.Add(deleteButton);\n'
              '            Controls.Add(cancelButton);\n'
              '        }\n'
              '\n'
              '        private void ListFiles()\n'
              '        {\n'
              '            foreach (var path in '
              'Directory.EnumerateFiles(dirPath))\n'
              '            {\n'
              '                if (!path.EndsWith(".xml"))\n'
              '                    continue;\n'
              '\n'
              '                AddRowForFile(path);\n'
              '            }\n'
              '\n'
              '            if (TryFindListItem(defaultName, out var index))\n'
              '                toolbarTable.SelectedRowIndex = index;\n'
              '        }\n'
              '\n'
              '        private void AddRowForFile(string path)\n'
              '        {\n'
              '            var json = ReadJson(path);\n'
              '            CountUsedSlots(json);\n'
              '\n'
              '            var fileName = Path.GetFileName(path);\n'
              '            var name = fileName.Substring(0, fileName.Length - '
              '4);\n'
              '\n'
              '            var row = new MyGuiControlTable.Row(path);\n'
              '            row.AddCell(new MyGuiControlTable.Cell(name));\n'
              '            for (var i = 0; i < 9; i++)\n'
              '                row.AddCell(new '
              'MyGuiControlTable.Cell(usedSlotCounts[i] > 0 ? '
              '$"{usedSlotCounts[i]}" : "-"));\n'
              '            toolbarTable.Add(row);\n'
              '        }\n'
              '\n'
              '        private static JsonData ReadJson(string xmlPath)\n'
              '        {\n'
              '            var jsonPath = XmlToJsonPath(xmlPath);\n'
              '\n'
              '            if (!File.Exists(jsonPath))\n'
              '                return null;\n'
              '\n'
              '            try\n'
              '            {\n'
              '                var jsonText = File.ReadAllText(jsonPath);\n'
              '                return JsonMapper.ToObject(jsonText);\n'
              '            }\n'
              '            catch (JsonException e)\n'
              '            {\n'
              '                MyLog.Default.Warning($"ToolbarManager: Failed '
              'to load JSON toolbar file \\"{jsonPath}\\" ({e})");\n'
              '                return null;\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private static string XmlToJsonPath(string xmlPath)\n'
              '        {\n'
              '            return xmlPath.Substring(0, xmlPath.Length - 4) + '
              '".json";\n'
              '        }\n'
              '\n'
              '        private void CountUsedSlots(JsonData json)\n'
              '        {\n'
              '            for (var i = 0; i < 9; i++)\n'
              '                usedSlotCounts[i] = 0;\n'
              '\n'
              '            try\n'
              '            {\n'
              '                var slots = json["Slots"];\n'
              '                if (slots == null)\n'
              '                    return;\n'
              '\n'
              '                var slotCount = slots.Count;\n'
              '                for (var i = 0; i < slotCount; i++)\n'
              '                {\n'
              '                    var page = i / 9;\n'
              '                    if (page > 8)\n'
              '                        break;\n'
              '                    if (!(bool)slots[i]["IsEmpty"])\n'
              '                        usedSlotCounts[page]++;\n'
              '                }\n'
              '            }\n'
              '            catch (SystemException e)\n'
              '            {\n'
              '                MyLog.Default.Warning($"ToolbarManager: Failed '
              'to count free slots ({e})");\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private void OnItemDoubleClicked(MyGuiControlTable '
              'table, MyGuiControlTable.EventArgs args)\n'
              '        {\n'
              '            ReturnLoad();\n'
              '        }\n'
              '\n'
              '        private void CallResultCallback(string text, bool '
              'merge)\n'
              '        {\n'
              '            if (text == null)\n'
              '                return;\n'
              '\n'
              '            callBack(text, merge);\n'
              '        }\n'
              '\n'
              '        private void ReturnLoad()\n'
              '        {\n'
              '            CallResultCallback(SelectedName, false);\n'
              '            CloseScreen();\n'
              '        }\n'
              '\n'
              '        private void ReturnMerge()\n'
              '        {\n'
              '            CallResultCallback(SelectedName, true);\n'
              '            CloseScreen();\n'
              '        }\n'
              '\n'
              '        private string SelectedName => '
              'toolbarTable.SelectedRow?.GetCell(0)?.Text?.ToString() ?? "";\n'
              '\n'
              '        private void OnLoad(MyGuiControlButton button) => '
              'ReturnLoad();\n'
              '        private void OnMerge(MyGuiControlButton button) => '
              'ReturnMerge();\n'
              '        private void OnCancel(MyGuiControlButton button) => '
              'CloseScreen();\n'
              '\n'
              '        private void OnRename(MyGuiControlButton _)\n'
              '        {\n'
              '            var oldName = SelectedName;\n'
              '            if (oldName == "")\n'
              '                return;\n'
              '\n'
              '            MyGuiSandbox.AddScreen(new NameDialog(newName => '
              'OnNewNameSpecified(oldName, newName), "Rename saved toolbar", '
              'oldName));\n'
              '        }\n'
              '\n'
              '        private void OnNewNameSpecified(string oldName, string '
              'newName)\n'
              '        {\n'
              '            newName = PathExt.SanitizeFileName(newName);\n'
              '\n'
              '            var newPath = Path.Combine(dirPath, '
              '$"{newName}.xml");\n'
              '            if (File.Exists(newPath))\n'
              '            {\n'
              '                MyGuiSandbox.AddScreen(\n'
              '                    MyGuiSandbox.CreateMessageBox(buttonType: '
              'MyMessageBoxButtonsType.YES_NO,\n'
              '                        messageText: new StringBuilder($"Are '
              'you sure to overwrite this saved '
              'toolbar?\\r\\n\\r\\n{newName}"),\n'
              '                        messageCaption: new '
              'StringBuilder("Confirmation"),\n'
              '                        callback: result => '
              'OnOverwriteForSure(result, oldName, newName)));\n'
              '            }\n'
              '            else\n'
              '            {\n'
              '                '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum.YES, '
              'oldName, newName);\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private void '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum result, '
              'string oldName, string newName)\n'
              '        {\n'
              '            if (result != '
              'MyGuiScreenMessageBox.ResultEnum.YES)\n'
              '                return;\n'
              '\n'
              '            var oldPath = Path.Combine(dirPath, '
              '$"{oldName}.xml");\n'
              '            var newPath = Path.Combine(dirPath, '
              '$"{newName}.xml");\n'
              '\n'
              '            var oldJsonPath = XmlToJsonPath(oldPath);\n'
              '            var newJsonPath = XmlToJsonPath(newPath);\n'
              '\n'
              '            if (File.Exists(newPath))\n'
              '                File.Delete(newPath);\n'
              '\n'
              '            if (File.Exists(newJsonPath))\n'
              '                File.Delete(newJsonPath);\n'
              '\n'
              '            if (File.Exists(oldPath))\n'
              '                File.Move(oldPath, newPath);\n'
              '\n'
              '            if (File.Exists(oldJsonPath))\n'
              '                File.Move(oldJsonPath, newJsonPath);\n'
              '\n'
              '            if (TryFindListItem(newName, out var '
              'overwrittenItemIndex))\n'
              '                '
              'toolbarTable.Remove(toolbarTable.GetRow(overwrittenItemIndex));\n'
              '\n'
              '            if (TryFindListItem(oldName, out var '
              'renamedItemIndex))\n'
              '            {\n'
              '                var sb = '
              'toolbarTable.GetRow(renamedItemIndex).GetCell(0).Text;\n'
              '                sb.Clear();\n'
              '                sb.Append(newName);\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private void OnDelete(MyGuiControlButton _)\n'
              '        {\n'
              '            var name = SelectedName;\n'
              '            if (name == "")\n'
              '                return;\n'
              '\n'
              '            MyGuiSandbox.AddScreen(\n'
              '                MyGuiSandbox.CreateMessageBox(buttonType: '
              'MyMessageBoxButtonsType.YES_NO,\n'
              '                    messageText: new StringBuilder($"Are you '
              'sure to delete this saved toolbar?\\r\\n\\r\\n{name}"),\n'
              '                    messageCaption: new '
              'StringBuilder("Confirmation"),\n'
              '                    callback: result => OnDeleteForSure(result, '
              'name)));\n'
              '        }\n'
              '\n'
              '        private void '
              'OnDeleteForSure(MyGuiScreenMessageBox.ResultEnum result, string '
              'name)\n'
              '        {\n'
              '            if (result != '
              'MyGuiScreenMessageBox.ResultEnum.YES)\n'
              '                return;\n'
              '\n'
              '            var path = Path.Combine(dirPath, $"{name}.xml");\n'
              '            var jsonPath = XmlToJsonPath(path);\n'
              '\n'
              '            if (File.Exists(path))\n'
              '                File.Delete(path);\n'
              '\n'
              '            if (File.Exists(jsonPath))\n'
              '                File.Delete(jsonPath);\n'
              '\n'
              '            if (TryFindListItem(name, out var index))\n'
              '                '
              'toolbarTable.Remove(toolbarTable.GetRow(index));\n'
              '        }\n'
              '\n'
              '        private bool TryFindListItem(string name, out int '
              'index)\n'
              '        {\n'
              '            var count = toolbarTable.RowsCount;\n'
              '            for (index = 0; index < count; index++)\n'
              '            {\n'
              '                if '
              '(toolbarTable.GetRow(index).GetCell(0).Text.ToString() == '
              'name)\n'
              '                    return true;\n'
              '            }\n'
              '\n'
              '            index = -1;\n'
              '            return false;\n'
              '        }\n'
              '\n'
              '        public override string GetFriendlyName() => '
              '"ListDialog";\n'
              '    }')

Fragment(uuid='0cc2c2e6-b49b-4260-9b39-ed4d73dfbf8e',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=21,
         depth=5,
         type='variable',
         name='MyGuiControlTable',
         text='MyGuiControlTable toolbarTable')

Fragment(uuid='07f733b5-0789-409a-95b2-39f50528bc56',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=22,
         depth=5,
         type='variable',
         name='MyGuiControlButton',
         text='MyGuiControlButton loadButton')

Fragment(uuid='fde25dd8-c035-4bdc-a0fd-7844cf5237ba',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=23,
         depth=5,
         type='variable',
         name='MyGuiControlButton',
         text='MyGuiControlButton mergeButton')

Fragment(uuid='4198576f-58f4-4ec3-8ede-f9b8e193c882',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=24,
         depth=5,
         type='variable',
         name='MyGuiControlButton',
         text='MyGuiControlButton renameButton')

Fragment(uuid='a2572c4a-3533-4163-8d2c-118e57de9b7b',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=25,
         depth=5,
         type='variable',
         name='MyGuiControlButton',
         text='MyGuiControlButton deleteButton')

Fragment(uuid='4e47a885-11a5-4d4c-b6d9-56c6e17ab9a3',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=26,
         depth=5,
         type='variable',
         name='MyGuiControlButton',
         text='MyGuiControlButton cancelButton')

Fragment(uuid='02847982-82b6-4b00-9b19-21809fe17bc2',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=32,
         depth=0,
         type='module',
         name='',
         text='t[] usedSlotCounts = new int[9];\n'
              '\n'
              '        public ListDialog(\n'
              '            Action<string, bool> callBack,\n'
              '            string caption,\n'
              '            string defaultName,\n'
              '            string dirPath)\n'
              '            : base(new Vector2(0.5f, 0.5f), new Vector2(1f, '
              '0.8f), MyGuiConstants.SCREEN_BACKGROUND_COLOR * '
              'MySandboxGame.Config.UIBkOpacity, true)\n'
              '        {\n'
              '            this.callBack = callBack;\n'
              '            this.caption = caption;\n'
              '            this.defaultName = defaultName;\n'
              '            this.dirPath = dirPath;\n'
              '\n'
              '            RecreateControls(true);\n'
              '\n'
              '            CanBeHidden = true;\n'
              '            CanH')

Fragment(uuid='0ca95b0b-5928-4f07-8393-d2f4962312a7',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=34,
         depth=4,
         type='method',
         name='ListDialog',
         text='public ListDialog(\n'
              '            Action<string, bool> callBack,\n'
              '            string caption,\n'
              '            string defaultName,\n'
              '            string dirPath)\n'
              '            : base(new Vector2(0.5f, 0.5f), new Vector2(1f, '
              '0.8f), MyGuiConstants.SCREEN_BACKGROUND_COLOR * '
              'MySandboxGame.Config.UIBkOpacity, true)\n'
              '        {\n'
              '            this.callBack = callBack;\n'
              '            this.caption = caption;\n'
              '            this.defaultName = defaultName;\n'
              '            this.dirPath = dirPath;\n'
              '\n'
              '            RecreateControls(true);\n'
              '\n'
              '            CanBeHidden = true;\n'
              '            CanHideOthers = true;\n'
              '            CloseButtonEnabled = true;\n'
              '\n'
              '            m_onEnterCallback = ReturnLoad;\n'
              '        }')

Fragment(uuid='a402c280-5287-47ec-a93f-e91fcf016c33',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=49,
         depth=0,
         type='module',
         name='',
         text='ideOthers = true;\n'
              '            CloseButtonEnabled = true;\n'
              '\n'
              '            m_onEnterCallback = ReturnLoad;\n'
              '        }\n'
              '\n'
              '        public override void RecreateControls(bool '
              'constructor)\n'
              '        {\n'
              '            base.RecreateControls(constructor);\n'
              '\n'
              '            AddCaption(caption, Color.White.ToVector4(), new '
              'Vector2(0.0f, 0.003f));\n'
              '\n'
              '            CreateListBox();\n'
              '            CreateButtons();\n'
              '        }\n'
              '\n'
              '        private Vector2 DialogSize => m_size ?? Vector2.One;\n'
              '\n'
              '        private void CreateListBox()\n'
              '        {\n'
              '            toolbarTable = new MyGuiControlTable\n'
              '            {\n'
              '                Position = ')

Fragment(uuid='f94912d1-9742-4f91-8ccb-dd06dfb57848',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=55,
         depth=4,
         type='method',
         name='RecreateControls',
         text='public override void RecreateControls(bool constructor)\n'
              '        {\n'
              '            base.RecreateControls(constructor);\n'
              '\n'
              '            AddCaption(caption, Color.White.ToVector4(), new '
              'Vector2(0.0f, 0.003f));\n'
              '\n'
              '            CreateListBox();\n'
              '            CreateButtons();\n'
              '        }')

Fragment(uuid='6c634367-e651-49e3-a424-2db56357cc41',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=67,
         depth=4,
         type='method',
         name='CreateListBox',
         text='private void CreateListBox()\n'
              '        {\n'
              '            toolbarTable = new MyGuiControlTable\n'
              '            {\n'
              '                Position = new Vector2(0.001f, -0.5f * '
              'DialogSize.Y + 0.1f),\n'
              '                Size = new Vector2(0.85f * DialogSize.X, '
              'DialogSize.Y - 0.25f),\n'
              '                OriginAlign = '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_TOP,\n'
              '                ColumnsCount = 10,\n'
              '                VisibleRowsCount = 15,\n'
              '            };\n'
              '\n'
              '            var q = 0.76f;\n'
              '            var w = 0.22f / 9f;\n'
              '            toolbarTable.SetCustomColumnWidths(new[] { q, w, w, '
              'w, w, w, w, w, w, w });\n'
              '            toolbarTable.SetColumnName(0, new '
              'StringBuilder("Name"));\n'
              '            toolbarTable.SetColumnComparison(0, '
              'CellTextComparison);\n'
              '            for (var i = 1; i < 10; i++)\n'
              '                toolbarTable.SetColumnName(i, new '
              'StringBuilder($"{i}"));\n'
              '            toolbarTable.SortByColumn(0);\n'
              '            ListFiles();\n'
              '            toolbarTable.ItemDoubleClicked += '
              'OnItemDoubleClicked;\n'
              '            Controls.Add(toolbarTable);\n'
              '        }')

Fragment(uuid='7f21e5c2-6486-45ed-b3a0-b9b198dca2e8',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=71,
         depth=0,
         type='module',
         name='',
         text='new Vector2(0.001f, -0.5f * DialogSize.Y + 0.1f),\n'
              '                Size = new Vector2(0.85f * DialogSize.X, '
              'DialogSize.Y - 0.25f),\n'
              '                OriginAlign = '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_TOP,\n'
              '                ColumnsCount = 10,\n'
              '                VisibleRowsCount = 15,\n'
              '      ')

Fragment(uuid='0d49f9ea-629b-4ccc-9847-53efe891afc0',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=76,
         depth=0,
         type='module',
         name='',
         text='      };\n'
              '\n'
              '            var q = 0.76f;\n'
              '            var w = 0.22f / 9f;\n'
              '            toolbarTable.SetCustomColumnWidths(new[] { q, w, w, '
              'w, w, w, w, w, w, w });\n'
              '            toolbarTable.SetColumnName(0, new '
              'StringBuilder("Name"));\n'
              '            toolbarTable.SetColumnComparison(0, '
              'CellTextComparison);\n')

Fragment(uuid='6811098f-442b-4953-b517-ea2f938dd243',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='            for (var i = 1; i < 10; i++)\n'
              '                toolbarTable.SetColumnName(i, new '
              'StringBuilder($"{i}"));\n'
              '            toolbarTable.SortByColumn(0);\n'
              '            ListFiles();\n'
              '            toolbarTable.ItemDoubleClicked += '
              'OnItemDoubleClicked;\n'
              '            Controls.Add(toolbarTable);\n'
              '        }\n'
              '\n'
              '        private int CellTextComparison(MyGuiControlTable.Cell '
              'x, MyGuiControlTable.Cell y)\n'
              '        {\n'
              '            return TextComparison(x.Text, y.Text);\n'
              '        }\n'
              '\n'
              '        private int TextComparison(StringBuilder x, '
              'StringBuilder y)\n'
              '        {\n')

Fragment(uuid='f6a2984f-4466-4261-a618-dd82ec3976a2',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=91,
         depth=4,
         type='method',
         name='CellTextComparison',
         text='private int CellTextComparison(MyGuiControlTable.Cell x, '
              'MyGuiControlTable.Cell y)\n'
              '        {\n'
              '            return TextComparison(x.Text, y.Text);\n'
              '        }')

Fragment(uuid='50354282-7e83-4a6d-ac85-b0ff885670d1',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=96,
         depth=4,
         type='method',
         name='TextComparison',
         text='private int TextComparison(StringBuilder x, StringBuilder y)\n'
              '        {\n'
              '            if (x == null)\n'
              '                return y == null ? 0 : 1;\n'
              '\n'
              '            return y == null ? -1 : x.CompareTo(y);\n'
              '        }')

Fragment(uuid='063bcdd5-42ee-4df0-808e-4ddccff5d6bd',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=98,
         depth=0,
         type='module',
         name='',
         text='            if (x == null)\n'
              '                return y == null ? 0 : 1;\n'
              '\n'
              '            return y == null ? -1 : x.CompareTo(y);\n'
              '        }\n'
              '\n'
              '        private void CreateButtons()\n'
              '        {\n'
              '            loadButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Default,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Load"), onButtonClick: '
              'OnLoad);\n'
              '\n'
              '            mergeButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Default,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new Strin')

Fragment(uuid='d92251b3-5226-4021-a7cf-120f3d11267e',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=104,
         depth=4,
         type='method',
         name='CreateButtons',
         text='private void CreateButtons()\n'
              '        {\n'
              '            loadButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Default,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Load"), onButtonClick: '
              'OnLoad);\n'
              '\n'
              '            mergeButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Default,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Merge"), '
              'onButtonClick: OnMerge);\n'
              '\n'
              '            renameButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Rename"), '
              'onButtonClick: OnRename);\n'
              '\n'
              '            deleteButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Delete"), '
              'onButtonClick: OnDelete);\n'
              '\n'
              '            cancelButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: MyTexts.Get(MyCommonTexts.Cancel), '
              'onButtonClick: OnCancel);\n'
              '\n'
              '            var xs = 0.85f * DialogSize.X;\n'
              '            var y = 0.5f * (DialogSize.Y - 0.15f);\n'
              '            loadButton.Position = new Vector2(-0.39f * xs, y);\n'
              '            mergeButton.Position = new Vector2(-0.16f * xs, '
              'y);\n'
              '            renameButton.Position = new Vector2(0.06f * xs, '
              'y);\n'
              '            deleteButton.Position = new Vector2(0.24f * xs, '
              'y);\n'
              '            cancelButton.Position = new Vector2(0.42f * xs, '
              'y);\n'
              '\n'
              '            loadButton.SetToolTip("Loads the selected toolbar '
              'replacing the current one");\n'
              '            mergeButton.SetToolTip("Merges the selected toolbar '
              'into the current one");\n'
              '            renameButton.SetToolTip("Renames the selected '
              'toolbar save file");\n'
              '            deleteButton.SetToolTip("Deletes the selected '
              'toolbar save file");\n'
              '            '
              'cancelButton.SetToolTip(MyTexts.GetString(MySpaceTexts.ToolTipOptionsSpace_Cancel));\n'
              '\n'
              '            Controls.Add(loadButton);\n'
              '            Controls.Add(mergeButton);\n'
              '            Controls.Add(renameButton);\n'
              '            Controls.Add(deleteButton);\n'
              '            Controls.Add(cancelButton);\n'
              '        }')

Fragment(uuid='0f289462-a79e-4288-b80f-e88efea1879a',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=114,
         depth=0,
         type='module',
         name='',
         text='gBuilder("Merge"), onButtonClick: OnMerge);\n'
              '\n'
              '            renameButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Rename"), '
              'onButtonClick: OnRename);\n'
              '\n'
              '            deleteButton = new MyGuiControlButton(\n'
              '                visualStyle: '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: new StringBuilder("Delete"), '
              'onButtonClick: OnDelete);\n'
              '\n'
              '            cancelButton = new MyGuiControlButton(\n'
              '                visualStyle: MyGuiC')

Fragment(uuid='94c26e7f-8c5d-4e06-99ef-63a888b0932a',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=127,
         depth=0,
         type='module',
         name='',
         text='ontrolButtonStyleEnum.Small,\n'
              '                originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_CENTER_AND_VERTICAL_CENTER,\n'
              '                text: MyTexts.Get(MyCommonTexts.Cancel), '
              'onButtonClick: OnCancel);\n'
              '\n'
              '            var xs = 0.85f * DialogSize.X;\n'
              '            var y = 0.5f * (DialogSize.Y - 0.15f);\n'
              '            loadButton.Position = new Vector2(-0.39')

Fragment(uuid='02af8659-45e6-4c81-862b-6161a921b8c7',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=133,
         depth=0,
         type='module',
         name='',
         text='f * xs, y);\n'
              '            mergeButton.Position = new Vector2(-0.16f * xs, '
              'y);\n'
              '            renameButton.Position = new Vector2(0.06f * xs, '
              'y);\n'
              '            deleteButton.Position = new Vector2(0.24f * xs, '
              'y);\n'
              '            cancelButton.Position = new Vector2(0.42f * xs, '
              'y);\n'
              '\n'
              '            loadButton.SetToolTip("Loads the selected toolbar '
              'replacing the c')

Fragment(uuid='b29b8a67-6ad0-4c70-91bf-d978000f8796',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=139,
         depth=0,
         type='module',
         name='',
         text='urrent one");\n'
              '            mergeButton.SetToolTip("Merges the selected toolbar '
              'into the current one");\n'
              '            renameButton.SetToolTip("Renames the selected '
              'toolbar save file");\n'
              '            deleteButton.SetToolTip("Deletes the selected '
              'toolbar save file");\n'
              '            '
              'cancelButton.SetToolTip(MyTexts.GetString(MySpaceTexts.ToolTipOptionsSpace_Cancel));\n'
              '\n'
              '            Controls.Add(loadButton);\n'
              '            Controls.Add(mergeButton);\n'
              '            Controls.Add(renameButton);\n'
              '            Controls.Add(deleteButton);\n'
              '            Controls.Add(cancelButton);\n'
              '        }\n'
              '\n'
              '        private void ListFiles()\n'
              '        {\n'
              '            foreach (var path in '
              'Directory.EnumerateFiles(dirPath))\n'
              '            {\n')

Fragment(uuid='9f1a1b5a-f5d8-43a8-a0fe-842ed9757c04',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=152,
         depth=4,
         type='method',
         name='ListFiles',
         text='private void ListFiles()\n'
              '        {\n'
              '            foreach (var path in '
              'Directory.EnumerateFiles(dirPath))\n'
              '            {\n'
              '                if (!path.EndsWith(".xml"))\n'
              '                    continue;\n'
              '\n'
              '                AddRowForFile(path);\n'
              '            }\n'
              '\n'
              '            if (TryFindListItem(defaultName, out var index))\n'
              '                toolbarTable.SelectedRowIndex = index;\n'
              '        }')

Fragment(uuid='cba2e162-aa04-4bb6-8c7b-77a1a8b80f3f',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=156,
         depth=0,
         type='module',
         name='',
         text='                if (!path.EndsWith(".xml"))\n'
              '                    continue;\n'
              '\n'
              '                AddRowForFile(path);\n'
              '            }\n')

Fragment(uuid='992571ec-e277-4e7c-b9e9-6e51cc634d19',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=161,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (TryFindListItem(defaultName, out var index))\n'
              '                toolbarTable.SelectedRowIndex = index;\n'
              '        }\n'
              '\n'
              '        private void AddRowForFile(string path)\n'
              '        {\n'
              '            var json = ReadJson(path);\n'
              '            CountUsedSlots(json);\n'
              '\n'
              '            var fileName = Path.GetFileName(path);\n'
              '            var name = fileName.Substring(0, fileName.Length - '
              '4);\n'
              '\n'
              '            var row = new MyGuiControlTable.Row(path);\n'
              '            row.AddCell(new MyGuiControlTable.Cell(name));\n')

Fragment(uuid='ccc25508-3a2e-40d3-8f59-f09d0ae0f253',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=166,
         depth=4,
         type='method',
         name='AddRowForFile',
         text='private void AddRowForFile(string path)\n'
              '        {\n'
              '            var json = ReadJson(path);\n'
              '            CountUsedSlots(json);\n'
              '\n'
              '            var fileName = Path.GetFileName(path);\n'
              '            var name = fileName.Substring(0, fileName.Length - '
              '4);\n'
              '\n'
              '            var row = new MyGuiControlTable.Row(path);\n'
              '            row.AddCell(new MyGuiControlTable.Cell(name));\n'
              '            for (var i = 0; i < 9; i++)\n'
              '                row.AddCell(new '
              'MyGuiControlTable.Cell(usedSlotCounts[i] > 0 ? '
              '$"{usedSlotCounts[i]}" : "-"));\n'
              '            toolbarTable.Add(row);\n'
              '        }')

Fragment(uuid='9b4042d1-0033-4c54-95ff-665a73745c4a',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=176,
         depth=0,
         type='module',
         name='',
         text='            for (var i = 0; i < 9; i++)\n'
              '                row.AddCell(new '
              'MyGuiControlTable.Cell(usedSlotCounts[i] > 0 ? '
              '$"{usedSlotCounts[i]}" : "-"));\n'
              '            toolbarTable.Add(row);\n'
              '        }\n'
              '\n'
              '        private static JsonData ReadJson(string xmlPath)\n'
              '        {\n'
              '            var jsonPath = XmlToJsonPath(xmlPath);\n')

Fragment(uuid='dcb1ffbd-88f2-42ca-a65a-0f54ec0e1b5b',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=181,
         depth=4,
         type='method',
         name='JsonData',
         text='private static JsonData ReadJson(string xmlPath)\n'
              '        {\n'
              '            var jsonPath = XmlToJsonPath(xmlPath);\n'
              '\n'
              '            if (!File.Exists(jsonPath))\n'
              '                return null;\n'
              '\n'
              '            try\n'
              '            {\n'
              '                var jsonText = File.ReadAllText(jsonPath);\n'
              '                return JsonMapper.ToObject(jsonText);\n'
              '            }\n'
              '            catch (JsonException e)\n'
              '            {\n'
              '                MyLog.Default.Warning($"ToolbarManager: Failed '
              'to load JSON toolbar file \\"{jsonPath}\\" ({e})");\n'
              '                return null;\n'
              '            }\n'
              '        }')

Fragment(uuid='8a19266d-30c1-4544-a710-65f412d7b17b',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=181,
         depth=4,
         type='method',
         name='ReadJson',
         text='private static JsonData ReadJson(string xmlPath)\n'
              '        {\n'
              '            var jsonPath = XmlToJsonPath(xmlPath);\n'
              '\n'
              '            if (!File.Exists(jsonPath))\n'
              '                return null;\n'
              '\n'
              '            try\n'
              '            {\n'
              '                var jsonText = File.ReadAllText(jsonPath);\n'
              '                return JsonMapper.ToObject(jsonText);\n'
              '            }\n'
              '            catch (JsonException e)\n'
              '            {\n'
              '                MyLog.Default.Warning($"ToolbarManager: Failed '
              'to load JSON toolbar file \\"{jsonPath}\\" ({e})");\n'
              '                return null;\n'
              '            }\n'
              '        }')

Fragment(uuid='dee8e365-072e-4790-8bd4-edd24b8ad00b',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=184,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (!File.Exists(jsonPath))\n'
              '                return null;\n'
              '\n'
              '            try\n'
              '            {\n'
              '                var jsonText = File.ReadAllText(jsonPath);\n'
              '                return JsonMapper.ToObject(jsonText);\n'
              '            }\n'
              '            catch (JsonException e)\n'
              '            {\n'
              '                MyLog.Default.Warning($"ToolbarManager: Failed '
              'to load JSON toolbar file \\"{jsonPath}\\" ({e})");\n'
              '                return null;\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private static string XmlToJsonPath(string xmlPath)\n'
              '        {\n'
              '            return xmlPath.Substring(0, xmlPath.Length - 4) + '
              '".json";\n'
              '        }\n'
              '\n'
              '        private void CountUsedSlots(JsonData json)\n'
              '        {\n')

Fragment(uuid='00c29aa8-e02c-45bd-9e68-b29b14829ffb',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=200,
         depth=4,
         type='method',
         name='XmlToJsonPath',
         text='private static string XmlToJsonPath(string xmlPath)\n'
              '        {\n'
              '            return xmlPath.Substring(0, xmlPath.Length - 4) + '
              '".json";\n'
              '        }')

Fragment(uuid='c5789330-551e-4c9f-b1bb-dd77d1d409e5',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=205,
         depth=4,
         type='method',
         name='CountUsedSlots',
         text='private void CountUsedSlots(JsonData json)\n'
              '        {\n'
              '            for (var i = 0; i < 9; i++)\n'
              '                usedSlotCounts[i] = 0;\n'
              '\n'
              '            try\n'
              '            {\n'
              '                var slots = json["Slots"];\n'
              '                if (slots == null)\n'
              '                    return;\n'
              '\n'
              '                var slotCount = slots.Count;\n'
              '                for (var i = 0; i < slotCount; i++)\n'
              '                {\n'
              '                    var page = i / 9;\n'
              '                    if (page > 8)\n'
              '                        break;\n'
              '                    if (!(bool)slots[i]["IsEmpty"])\n'
              '                        usedSlotCounts[page]++;\n'
              '                }\n'
              '            }\n'
              '            catch (SystemException e)\n'
              '            {\n'
              '                MyLog.Default.Warning($"ToolbarManager: Failed '
              'to count free slots ({e})");\n'
              '            }\n'
              '        }')

Fragment(uuid='95789a56-fdd8-4a55-8aad-b31ac800c271',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=207,
         depth=0,
         type='module',
         name='',
         text='            for (var i = 0; i < 9; i++)\n'
              '                usedSlotCounts[i] = 0;\n'
              '\n'
              '            try\n'
              '            {\n'
              '                var slots = json["Slots"];\n'
              '                if (slots == null)\n'
              '                    return;\n'
              '\n'
              '                var slotCount = slots.Count;\n')

Fragment(uuid='e80d60ab-f9cc-4cfb-a990-f19b899980e6',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=217,
         depth=0,
         type='module',
         name='',
         text='                for (var i = 0; i < slotCount; i++)\n'
              '                {\n'
              '                    var page = i / 9;\n')

Fragment(uuid='03873cf3-d739-4726-b35b-c77d17367863',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=220,
         depth=0,
         type='module',
         name='',
         text='                    if (page > 8)\n'
              '                        break;\n')

Fragment(uuid='51698863-85f0-4332-a702-afb445dd2d63',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=222,
         depth=0,
         type='module',
         name='',
         text='                    if (!(bool)slots[i]["IsEmpty"])\n'
              '                        usedSlotCounts[page]++;\n'
              '                }\n'
              '            }\n'
              '            catch (SystemException e)\n'
              '            {\n'
              '                MyLog.Default.Warning($"ToolbarManager: Failed '
              'to count free slots ({e})");\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private void OnItemDoubleClicked(MyGuiControlTable '
              'table, MyGuiControlTable.EventArgs args)\n'
              '        {\n'
              '            ReturnLoad();\n'
              '        }\n'
              '\n'
              '        private void CallResultCallback(string text, bool '
              'merge)\n'
              '        {\n')

Fragment(uuid='f25520ef-99f5-44b0-886c-feecb4283b74',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=232,
         depth=4,
         type='method',
         name='OnItemDoubleClicked',
         text='private void OnItemDoubleClicked(MyGuiControlTable table, '
              'MyGuiControlTable.EventArgs args)\n'
              '        {\n'
              '            ReturnLoad();\n'
              '        }')

Fragment(uuid='69563f13-756f-4567-a85a-1c47fb6d0629',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=237,
         depth=4,
         type='method',
         name='CallResultCallback',
         text='private void CallResultCallback(string text, bool merge)\n'
              '        {\n'
              '            if (text == null)\n'
              '                return;\n'
              '\n'
              '            callBack(text, merge);\n'
              '        }')

Fragment(uuid='c5404836-d7d4-4b63-a510-95bc3b2cdd7e',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=239,
         depth=0,
         type='module',
         name='',
         text='            if (text == null)\n'
              '                return;\n'
              '\n'
              '            callBack(text, merge);\n'
              '        }\n'
              '\n'
              '        private void ReturnLoad()\n'
              '        {\n'
              '            CallResultCallback(SelectedName, false);\n'
              '            CloseScreen();\n'
              '        }\n'
              '\n'
              '        private void ReturnMerge()\n'
              '        {\n'
              '            CallResultCallback(SelectedName, true);\n'
              '            CloseScreen();\n'
              '        }\n'
              '\n'
              '        private string Sele')

Fragment(uuid='3cdc9760-b6b7-48a0-ac40-0973bc7d1b7b',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=245,
         depth=4,
         type='method',
         name='ReturnLoad',
         text='private void ReturnLoad()\n'
              '        {\n'
              '            CallResultCallback(SelectedName, false);\n'
              '            CloseScreen();\n'
              '        }')

Fragment(uuid='3bddee92-e7be-43a0-aca4-add499e27efb',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=251,
         depth=4,
         type='method',
         name='ReturnMerge',
         text='private void ReturnMerge()\n'
              '        {\n'
              '            CallResultCallback(SelectedName, true);\n'
              '            CloseScreen();\n'
              '        }')

Fragment(uuid='70780a0b-b60d-4856-8d93-1835a504db26',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=257,
         depth=0,
         type='module',
         name='',
         text='ctedName => '
              'toolbarTable.SelectedRow?.GetCell(0)?.Text?.ToString() ?? "";\n'
              '\n'
              '        private void OnLoad(MyGuiControlButton button) => '
              'ReturnLoad();\n'
              '        private void OnMerge(MyGuiControlButton button) => '
              'ReturnMerge();\n'
              '        private void OnCancel(MyGuiControlButton button) => '
              'CloseScreen();\n'
              '\n'
              '        private void OnRename(MyGuiControlButton _)\n'
              '        {\n'
              '            var oldName = SelectedName;\n')

Fragment(uuid='6d01cb73-ec25-46d7-a022-d2bc3cdc8064',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=259,
         depth=4,
         type='method',
         name='OnLoad',
         text='private void OnLoad(MyGuiControlButton button) => ReturnLoad();')

Fragment(uuid='39afad69-f99a-416a-8d90-aa3d155c2511',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=260,
         depth=4,
         type='method',
         name='OnMerge',
         text='private void OnMerge(MyGuiControlButton button) => '
              'ReturnMerge();')

Fragment(uuid='a2d257ef-15dd-4f30-ad0b-234fe3ab4570',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=261,
         depth=4,
         type='method',
         name='OnCancel',
         text='private void OnCancel(MyGuiControlButton button) => '
              'CloseScreen();')

Fragment(uuid='87b98c14-f3dc-47a3-9d93-34d9465ca1db',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=263,
         depth=4,
         type='method',
         name='OnRename',
         text='private void OnRename(MyGuiControlButton _)\n'
              '        {\n'
              '            var oldName = SelectedName;\n'
              '            if (oldName == "")\n'
              '                return;\n'
              '\n'
              '            MyGuiSandbox.AddScreen(new NameDialog(newName => '
              'OnNewNameSpecified(oldName, newName), "Rename saved toolbar", '
              'oldName));\n'
              '        }')

Fragment(uuid='82290434-54b7-415c-8fd9-1ca0c72ee25e',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=266,
         depth=0,
         type='module',
         name='',
         text='            if (oldName == "")\n'
              '                return;\n'
              '\n'
              '            MyGuiSandbox.AddScreen(new NameDialog(newName => '
              'OnNewNameSpecified(oldName, newName), "Rename saved toolbar", '
              'oldName));\n'
              '        }\n'
              '\n'
              '        private void OnNewNameSpecified(string oldName, string '
              'newName)\n'
              '        {\n'
              '            newName = PathExt.SanitizeFileName(newName);\n'
              '\n'
              '            var newPath = Path.Combine(dirPath, '
              '$"{newName}.xml");\n')

Fragment(uuid='3dd6de16-a624-466f-9f95-6d3171b42218',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=272,
         depth=4,
         type='method',
         name='OnNewNameSpecified',
         text='private void OnNewNameSpecified(string oldName, string '
              'newName)\n'
              '        {\n'
              '            newName = PathExt.SanitizeFileName(newName);\n'
              '\n'
              '            var newPath = Path.Combine(dirPath, '
              '$"{newName}.xml");\n'
              '            if (File.Exists(newPath))\n'
              '            {\n'
              '                MyGuiSandbox.AddScreen(\n'
              '                    MyGuiSandbox.CreateMessageBox(buttonType: '
              'MyMessageBoxButtonsType.YES_NO,\n'
              '                        messageText: new StringBuilder($"Are '
              'you sure to overwrite this saved '
              'toolbar?\\r\\n\\r\\n{newName}"),\n'
              '                        messageCaption: new '
              'StringBuilder("Confirmation"),\n'
              '                        callback: result => '
              'OnOverwriteForSure(result, oldName, newName)));\n'
              '            }\n'
              '            else\n'
              '            {\n'
              '                '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum.YES, '
              'oldName, newName);\n'
              '            }\n'
              '        }')

Fragment(uuid='2b6cca81-6561-45bf-ba8d-96becad338da',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=277,
         depth=0,
         type='module',
         name='',
         text='            if (File.Exists(newPath))\n'
              '            {\n'
              '                MyGuiSandbox.AddScreen(\n'
              '                    MyGuiSandbox.CreateMessageBox(buttonType: '
              'MyMessageBoxButtonsType.YES_NO,\n'
              '                        messageText: new StringBuilder($"Are '
              'you sure to overwrite this saved '
              'toolbar?\\r\\n\\r\\n{newName}"),\n'
              '                        messageCaption: new '
              'StringBuilder("Confirmation"),\n'
              '                        callback: result => '
              'OnOverwriteForSure(result, oldName, newName)));\n'
              '            }\n'
              '            else\n'
              '            {\n'
              '                '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum.YES, '
              'oldName, newName);\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private void '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum result, '
              'string oldName, string newName)\n'
              '        {\n')

Fragment(uuid='9504ad44-470b-4500-bb83-a981cec1c7d2',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=291,
         depth=4,
         type='method',
         name='OnOverwriteForSure',
         text='private void '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum result, '
              'string oldName, string newName)\n'
              '        {\n'
              '            if (result != '
              'MyGuiScreenMessageBox.ResultEnum.YES)\n'
              '                return;\n'
              '\n'
              '            var oldPath = Path.Combine(dirPath, '
              '$"{oldName}.xml");\n'
              '            var newPath = Path.Combine(dirPath, '
              '$"{newName}.xml");\n'
              '\n'
              '            var oldJsonPath = XmlToJsonPath(oldPath);\n'
              '            var newJsonPath = XmlToJsonPath(newPath);\n'
              '\n'
              '            if (File.Exists(newPath))\n'
              '                File.Delete(newPath);\n'
              '\n'
              '            if (File.Exists(newJsonPath))\n'
              '                File.Delete(newJsonPath);\n'
              '\n'
              '            if (File.Exists(oldPath))\n'
              '                File.Move(oldPath, newPath);\n'
              '\n'
              '            if (File.Exists(oldJsonPath))\n'
              '                File.Move(oldJsonPath, newJsonPath);\n'
              '\n'
              '            if (TryFindListItem(newName, out var '
              'overwrittenItemIndex))\n'
              '                '
              'toolbarTable.Remove(toolbarTable.GetRow(overwrittenItemIndex));\n'
              '\n'
              '            if (TryFindListItem(oldName, out var '
              'renamedItemIndex))\n'
              '            {\n'
              '                var sb = '
              'toolbarTable.GetRow(renamedItemIndex).GetCell(0).Text;\n'
              '                sb.Clear();\n'
              '                sb.Append(newName);\n'
              '            }\n'
              '        }')

Fragment(uuid='d250a15c-fccd-48aa-ac2c-f8416e6b4532',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=293,
         depth=0,
         type='module',
         name='',
         text='            if (result != '
              'MyGuiScreenMessageBox.ResultEnum.YES)\n'
              '                return;\n'
              '\n'
              '            var oldPath = Path.Combine(dirPath, '
              '$"{oldName}.xml");\n'
              '            var newPath = Path.Combine(dirPath, '
              '$"{newName}.xml");\n'
              '\n'
              '            var oldJsonPath = XmlToJsonPath(oldPath);\n'
              '            var newJsonPath = XmlToJsonPath(newPath);\n')

Fragment(uuid='7b0c0edd-9e7a-4868-863f-c3b6f90072af',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=301,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (File.Exists(newPath))\n'
              '                File.Delete(newPath);\n')

Fragment(uuid='a02a08ce-7801-43db-832e-a07464399d94',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=304,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (File.Exists(newJsonPath))\n'
              '                File.Delete(newJsonPath);\n')

Fragment(uuid='c145a393-6e14-421d-b979-16a7e5f005c6',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=307,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (File.Exists(oldPath))\n'
              '                File.Move(oldPath, newPath);\n')

Fragment(uuid='64ebea08-4335-4664-9b96-dfb4fc206521',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=310,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (File.Exists(oldJsonPath))\n'
              '                File.Move(oldJsonPath, newJsonPath);\n')

Fragment(uuid='fc043236-7b09-4055-8a01-777ab6469b56',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=313,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (TryFindListItem(newName, out var '
              'overwrittenItemIndex))\n'
              '                '
              'toolbarTable.Remove(toolbarTable.GetRow(overwrittenItemIndex));\n')

Fragment(uuid='52ee0305-f2fc-4dac-9414-e6ffc65e7f80',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=316,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (TryFindListItem(oldName, out var '
              'renamedItemIndex))\n'
              '            {\n'
              '                var sb = '
              'toolbarTable.GetRow(renamedItemIndex).GetCell(0).Text;\n'
              '                sb.Clear();\n'
              '                sb.Append(newName);\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private void OnDelete(MyGuiControlButton _)\n'
              '        {\n'
              '            var name = SelectedName;\n')

Fragment(uuid='a9cc0a9d-c65a-4882-a4f6-ea7c9597eccf',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=325,
         depth=4,
         type='method',
         name='OnDelete',
         text='private void OnDelete(MyGuiControlButton _)\n'
              '        {\n'
              '            var name = SelectedName;\n'
              '            if (name == "")\n'
              '                return;\n'
              '\n'
              '            MyGuiSandbox.AddScreen(\n'
              '                MyGuiSandbox.CreateMessageBox(buttonType: '
              'MyMessageBoxButtonsType.YES_NO,\n'
              '                    messageText: new StringBuilder($"Are you '
              'sure to delete this saved toolbar?\\r\\n\\r\\n{name}"),\n'
              '                    messageCaption: new '
              'StringBuilder("Confirmation"),\n'
              '                    callback: result => OnDeleteForSure(result, '
              'name)));\n'
              '        }')

Fragment(uuid='95fbbddf-afd2-476f-9473-d52f61eb4544',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=328,
         depth=0,
         type='module',
         name='',
         text='            if (name == "")\n'
              '                return;\n'
              '\n'
              '            MyGuiSandbox.AddScreen(\n'
              '                MyGuiSandbox.CreateMessageBox(buttonType: '
              'MyMessageBoxButtonsType.YES_NO,\n'
              '                    messageText: new StringBuilder($"Are you '
              'sure to delete this saved toolbar?\\r\\n\\r\\n{name}"),\n'
              '                    messageCaption: new '
              'StringBuilder("Confirmation"),\n'
              '                    callback: result => OnDeleteForSure(result, '
              'name)));\n'
              '        }\n'
              '\n'
              '        private void '
              'OnDeleteForSure(MyGuiScreenMessageBox.ResultEnum result, string '
              'name)\n'
              '        {\n')

Fragment(uuid='3917ab7c-2a24-4dca-bb14-53ea9a1ba119',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=338,
         depth=4,
         type='method',
         name='OnDeleteForSure',
         text='private void OnDeleteForSure(MyGuiScreenMessageBox.ResultEnum '
              'result, string name)\n'
              '        {\n'
              '            if (result != '
              'MyGuiScreenMessageBox.ResultEnum.YES)\n'
              '                return;\n'
              '\n'
              '            var path = Path.Combine(dirPath, $"{name}.xml");\n'
              '            var jsonPath = XmlToJsonPath(path);\n'
              '\n'
              '            if (File.Exists(path))\n'
              '                File.Delete(path);\n'
              '\n'
              '            if (File.Exists(jsonPath))\n'
              '                File.Delete(jsonPath);\n'
              '\n'
              '            if (TryFindListItem(name, out var index))\n'
              '                '
              'toolbarTable.Remove(toolbarTable.GetRow(index));\n'
              '        }')

Fragment(uuid='89d6ae35-6c49-4334-b02a-17f7caa8c126',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=340,
         depth=0,
         type='module',
         name='',
         text='            if (result != '
              'MyGuiScreenMessageBox.ResultEnum.YES)\n'
              '                return;\n'
              '\n'
              '            var path = Path.Combine(dirPath, $"{name}.xml");\n'
              '            var jsonPath = XmlToJsonPath(path);\n')

Fragment(uuid='26f1a6a4-39e6-49ac-8184-3cb468f0f7c9',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=345,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (File.Exists(path))\n'
              '                File.Delete(path);\n')

Fragment(uuid='46c25899-f4cc-4822-9d0b-0cba709e04f8',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=348,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (File.Exists(jsonPath))\n'
              '                File.Delete(jsonPath);\n')

Fragment(uuid='f400ccb5-aca5-4128-b626-bacc0f198a77',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=351,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (TryFindListItem(name, out var index))\n'
              '                '
              'toolbarTable.Remove(toolbarTable.GetRow(index));\n'
              '        }\n'
              '\n'
              '        private bool TryFindListItem(string name, out int '
              'index)\n'
              '        {\n'
              '            var count = toolbarTable.RowsCount;\n')

Fragment(uuid='69998d8d-08ca-4aa7-b57d-60934feafc25',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=356,
         depth=4,
         type='method',
         name='TryFindListItem',
         text='private bool TryFindListItem(string name, out int index)\n'
              '        {\n'
              '            var count = toolbarTable.RowsCount;\n'
              '            for (index = 0; index < count; index++)\n'
              '            {\n'
              '                if '
              '(toolbarTable.GetRow(index).GetCell(0).Text.ToString() == '
              'name)\n'
              '                    return true;\n'
              '            }\n'
              '\n'
              '            index = -1;\n'
              '            return false;\n'
              '        }')

Fragment(uuid='5d57a73e-90eb-4e14-b203-29227760b9e2',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=359,
         depth=0,
         type='module',
         name='',
         text='            for (index = 0; index < count; index++)\n'
              '            {\n'
              '                if '
              '(toolbarTable.GetRow(index).GetCell(0).Text.ToString() == '
              'name)\n'
              '                    return true;\n'
              '            }\n'
              '\n'
              '            index = -1;\n'
              '            return false;\n'
              '        }\n'
              '\n'
              '        public override string GetFriendlyName() => '
              '"ListDialog";\n'
              '    }\n'
              '}')

Fragment(uuid='a2a90864-f356-455d-a901-94d3b1434d5e',
         path='/ToolbarManager/Gui/ListDialog.cs',
         lineno=369,
         depth=4,
         type='method',
         name='GetFriendlyName',
         text='public override string GetFriendlyName() => "ListDialog";')

Fragment(uuid='38cefa4e-572f-49e3-84a3-69eba5660055',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='using System;\n'
              'using Sandbox;\n'
              'using Sandbox.Game.Gui;\n'
              'using Sandbox.Game.Localization;\n'
              'using Sandbox.Graphics.GUI;\n'
              'using VRage;\n'
              'using VRage.Utils;\n'
              'using VRageMath;\n'
              '\n'
              '// ReSharper disable VirtualMemberCallInConstructor\n'
              '#pragma warning disable 618\n')

Fragment(uuid='ce3664b1-be33-42f3-8442-520e6783fe9b',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Gui/NameDialog.cs\n'
              '  Classes: NameDialog\n'
              '  Methods: CallResultCallback GetFriendlyName NameDialog '
              'OnCancel OnOk RecreateControls ReturnOk\n'
              '  Variables: MyGuiControlButton MyGuiControlButton '
              'MyGuiControlTextbox\n'
              '  Usages: Action Action Add Add Add Add Add AddCaption '
              'AddHorizontal AddHorizontal CallResultCallback CanBeHidden '
              'CanHideOthers Cancel CloseButtonEnabled CloseScreen CloseScreen '
              'Color Config Controls Controls Controls Controls Controls '
              'DialogSize DialogSize DialogSize DialogSize DialogSize '
              'DialogSize DialogSize DialogSize GUI Game Game Get Get '
              'GetString GetString GetTextLength Graphics Gui Gui '
              'HORISONTAL_LEFT_AND_VERTICAL_CENTER '
              'HORISONTAL_RIGHT_AND_VERTICAL_CENTER Localization MyCommonTexts '
              'MyCommonTexts MyGuiConstants MyGuiControlButton '
              'MyGuiControlButton MyGuiControlButton MyGuiControlButton '
              'MyGuiControlSeparatorList MyGuiControlSeparatorList '
              'MyGuiControlTextbox MyGuiDrawAlignEnum MyGuiDrawAlignEnum '
              'MyGuiScreenDebugBase MySandboxGame MySpaceTexts MySpaceTexts '
              'MyTexts MyTexts MyTexts MyTexts Ok OnCancel OnOk One Position '
              'Position RecreateControls RecreateControls ReturnOk ReturnOk '
              'SCREEN_BACKGROUND_COLOR Sandbox Sandbox Sandbox Sandbox '
              'SelectAll SetToolTip SetToolTip Size System Text Text ToVector4 '
              'ToolTipNewsletter_Ok ToolTipOptionsSpace_Cancel ToolbarManager '
              'UIBkOpacity Utils VRage VRage VRageMath Vector2 Vector2 Vector2 '
              'Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 Vector2 White X '
              'X X X Y Y Y button button callBack callBack callBack callBack '
              'callBack cancelButton cancelButton cancelButton cancelButton '
              'cancelButton caption caption caption caption caption '
              'constructor constructor controlSeparatorList1 '
              'controlSeparatorList1 controlSeparatorList1 '
              'controlSeparatorList2 controlSeparatorList2 '
              'controlSeparatorList2 defaultName defaultName defaultName '
              'defaultName defaultName halfDistance halfDistance halfDistance '
              'm_onEnterCallback m_size maxLength maxLength maxLength '
              'maxLength maxLength maxLength nameBox nameBox nameBox nameBox '
              'nameBox nameBox okButton okButton okButton okButton okButton '
              'okPosition okPosition okPosition onButtonClick onButtonClick '
              'originAlign originAlign text text text text text\n')

Fragment(uuid='55067506-4154-44b1-8085-bad568c289da',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=12,
         depth=0,
         type='module',
         name='',
         text='\n'
              'namespace ToolbarManager.Gui\n'
              '{\n'
              '    public class NameDialog : MyGuiScreenDebugBase\n'
              '    {\n'
              '        private MyGuiControlTextbox nameBox;\n'
              '        private MyGuiControlButton okButton;\n'
              '        private MyGuiControlButton cancelButton;\n'
              '\n'
              '        private readonly Action<string> callBack;\n'
              '        private readonly string caption;\n'
              '        private readonly string defaultName;\n'
              '        private readonl')

Fragment(uuid='3d803251-fc40-4630-8682-befb4b9cdf4a',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=15,
         depth=2,
         type='class',
         name='NameDialog',
         text='public class NameDialog : MyGuiScreenDebugBase\n'
              '    {\n'
              '        private MyGuiControlTextbox nameBox;\n'
              '        private MyGuiControlButton okButton;\n'
              '        private MyGuiControlButton cancelButton;\n'
              '\n'
              '        private readonly Action<string> callBack;\n'
              '        private readonly string caption;\n'
              '        private readonly string defaultName;\n'
              '        private readonly int maxLength;\n'
              '\n'
              '        public NameDialog(\n'
              '            Action<string> callBack,\n'
              '            string caption,\n'
              '            string defaultName,\n'
              '            int maxLength = 40)\n'
              '            : base(new Vector2(0.5f, 0.5f), new Vector2(0.5f, '
              '0.28f), MyGuiConstants.SCREEN_BACKGROUND_COLOR * '
              'MySandboxGame.Config.UIBkOpacity, true)\n'
              '        {\n'
              '            this.callBack = callBack;\n'
              '            this.caption = caption;\n'
              '            this.defaultName = defaultName;\n'
              '            this.maxLength = maxLength;\n'
              '\n'
              '            RecreateControls(true);\n'
              '\n'
              '            CanBeHidden = true;\n'
              '            CanHideOthers = true;\n'
              '            CloseButtonEnabled = true;\n'
              '\n'
              '            m_onEnterCallback = ReturnOk;\n'
              '        }\n'
              '\n'
              '        private Vector2 DialogSize => m_size ?? Vector2.One;\n'
              '\n'
              '        public override void RecreateControls(bool '
              'constructor)\n'
              '        {\n'
              '            base.RecreateControls(constructor);\n'
              '\n'
              '            AddCaption(caption, Color.White.ToVector4(), new '
              'Vector2(0.0f, 0.003f));\n'
              '\n'
              '            var controlSeparatorList1 = new '
              'MyGuiControlSeparatorList();\n'
              '            controlSeparatorList1.AddHorizontal(new '
              'Vector2(-0.39f * DialogSize.X, -0.5f * DialogSize.Y + 0.075f), '
              'DialogSize.X * 0.78f);\n'
              '            Controls.Add(controlSeparatorList1);\n'
              '\n'
              '            var controlSeparatorList2 = new '
              'MyGuiControlSeparatorList();\n'
              '            controlSeparatorList2.AddHorizontal(new '
              'Vector2(-0.39f * DialogSize.X, +0.5f * DialogSize.Y - 0.123f), '
              'DialogSize.X * 0.78f);\n'
              '            Controls.Add(controlSeparatorList2);\n'
              '\n'
              '            nameBox = new MyGuiControlTextbox(new Vector2(0.0f, '
              '-0.027f), maxLength: maxLength)\n'
              '            {\n'
              '                Text = defaultName,\n'
              '                Size = new Vector2(0.385f, 1f)\n'
              '            };\n'
              '            nameBox.SelectAll();\n'
              '            Controls.Add(nameBox);\n'
              '\n'
              '            okButton = new MyGuiControlButton(originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_RIGHT_AND_VERTICAL_CENTER, text: '
              'MyTexts.Get(MyCommonTexts.Ok), onButtonClick: OnOk);\n'
              '            cancelButton = new MyGuiControlButton(originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_LEFT_AND_VERTICAL_CENTER, text: '
              'MyTexts.Get(MyCommonTexts.Cancel), onButtonClick: OnCancel);\n'
              '\n'
              '            var okPosition = new Vector2(0.001f, 0.5f * '
              'DialogSize.Y - 0.071f);\n'
              '            var halfDistance = new Vector2(0.018f, 0.0f);\n'
              '\n'
              '            okButton.Position = okPosition - halfDistance;\n'
              '            cancelButton.Position = okPosition + halfDistance;\n'
              '\n'
              '            '
              'okButton.SetToolTip(MyTexts.GetString(MySpaceTexts.ToolTipNewsletter_Ok));\n'
              '            '
              'cancelButton.SetToolTip(MyTexts.GetString(MySpaceTexts.ToolTipOptionsSpace_Cancel));\n'
              '\n'
              '            Controls.Add(okButton);\n'
              '            Controls.Add(cancelButton);\n'
              '        }\n'
              '\n'
              '        private void CallResultCallback(string text)\n'
              '        {\n'
              '            if (text == null)\n'
              '                return;\n'
              '\n'
              '            callBack(text);\n'
              '        }\n'
              '\n'
              '        private void ReturnOk()\n'
              '        {\n'
              '            if (nameBox.GetTextLength() <= 0)\n'
              '                return;\n'
              '\n'
              '            CallResultCallback(nameBox.Text);\n'
              '            CloseScreen();\n'
              '        }\n'
              '\n'
              '        private void OnOk(MyGuiControlButton button) => '
              'ReturnOk();\n'
              '        private void OnCancel(MyGuiControlButton button) => '
              'CloseScreen();\n'
              '\n'
              '        public override string GetFriendlyName() => '
              '"NameDialog";\n'
              '    }')

Fragment(uuid='a41e1093-3d84-4d64-97df-bd01d6fd5352',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=17,
         depth=5,
         type='variable',
         name='MyGuiControlTextbox',
         text='MyGuiControlTextbox nameBox')

Fragment(uuid='aee23173-1aad-402d-859d-84871016760f',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=18,
         depth=5,
         type='variable',
         name='MyGuiControlButton',
         text='MyGuiControlButton okButton')

Fragment(uuid='52e3165e-3c9e-4bea-a13e-d42b6def00b8',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=19,
         depth=5,
         type='variable',
         name='MyGuiControlButton',
         text='MyGuiControlButton cancelButton')

Fragment(uuid='861921b0-a5ba-47dd-8ec1-b93b8d5cee4f',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=24,
         depth=0,
         type='module',
         name='',
         text='y int maxLength;\n'
              '\n'
              '        public NameDialog(\n'
              '            Action<string> callBack,\n'
              '            string caption,\n'
              '            string defaultName,\n'
              '            int maxLength = 40)\n'
              '            : base(new Vector2(0.5f, 0.5f), new Vector2(0.5f, '
              '0.28f), MyGuiConstants.SCREEN_BACKGROUND_COLOR * '
              'MySandboxGame.Config.UIBkOpacity, true)\n'
              '        {\n'
              '            this.callBack = callBack;\n'
              '            thi')

Fragment(uuid='15ab6e43-d012-435c-891d-4c283320e943',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=26,
         depth=4,
         type='method',
         name='NameDialog',
         text='public NameDialog(\n'
              '            Action<string> callBack,\n'
              '            string caption,\n'
              '            string defaultName,\n'
              '            int maxLength = 40)\n'
              '            : base(new Vector2(0.5f, 0.5f), new Vector2(0.5f, '
              '0.28f), MyGuiConstants.SCREEN_BACKGROUND_COLOR * '
              'MySandboxGame.Config.UIBkOpacity, true)\n'
              '        {\n'
              '            this.callBack = callBack;\n'
              '            this.caption = caption;\n'
              '            this.defaultName = defaultName;\n'
              '            this.maxLength = maxLength;\n'
              '\n'
              '            RecreateControls(true);\n'
              '\n'
              '            CanBeHidden = true;\n'
              '            CanHideOthers = true;\n'
              '            CloseButtonEnabled = true;\n'
              '\n'
              '            m_onEnterCallback = ReturnOk;\n'
              '        }')

Fragment(uuid='cb4966ff-fadf-474d-9839-368a49e88f50',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='s.caption = caption;\n'
              '            this.defaultName = defaultName;\n'
              '            this.maxLength = maxLength;\n'
              '\n'
              '            RecreateControls(true);\n'
              '\n'
              '            CanBeHidden = true;\n'
              '            CanHideOthers = true;\n'
              '            CloseButtonEnabled = true;\n'
              '\n'
              '            m_onEnterCallback = ReturnOk;\n'
              '        }\n'
              '\n'
              '        private Vector2 DialogSize => m_size ?? Vector2.One;\n'
              '\n'
              '        public override ')

Fragment(uuid='0d11f4ab-135f-461d-b610-8d6061261b00',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=49,
         depth=0,
         type='module',
         name='',
         text='void RecreateControls(bool constructor)\n'
              '        {\n'
              '            base.RecreateControls(constructor);\n'
              '\n'
              '            AddCaption(caption, Color.White.ToVector4(), new '
              'Vector2(0.0f, 0.003f));\n'
              '\n'
              '            var controlSeparatorList1 = new '
              'MyGuiControlSeparatorList();\n'
              '            controlSeparatorList1.AddHorizontal(new '
              'Vector2(-0.39f * DialogSize.X, -0.5f * DialogSize.Y + 0.075f), '
              'DialogSize.X * 0')

Fragment(uuid='cccbdbf8-eed7-437a-a5ff-eae71f412194',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=49,
         depth=4,
         type='method',
         name='RecreateControls',
         text='public override void RecreateControls(bool constructor)\n'
              '        {\n'
              '            base.RecreateControls(constructor);\n'
              '\n'
              '            AddCaption(caption, Color.White.ToVector4(), new '
              'Vector2(0.0f, 0.003f));\n'
              '\n'
              '            var controlSeparatorList1 = new '
              'MyGuiControlSeparatorList();\n'
              '            controlSeparatorList1.AddHorizontal(new '
              'Vector2(-0.39f * DialogSize.X, -0.5f * DialogSize.Y + 0.075f), '
              'DialogSize.X * 0.78f);\n'
              '            Controls.Add(controlSeparatorList1);\n'
              '\n'
              '            var controlSeparatorList2 = new '
              'MyGuiControlSeparatorList();\n'
              '            controlSeparatorList2.AddHorizontal(new '
              'Vector2(-0.39f * DialogSize.X, +0.5f * DialogSize.Y - 0.123f), '
              'DialogSize.X * 0.78f);\n'
              '            Controls.Add(controlSeparatorList2);\n'
              '\n'
              '            nameBox = new MyGuiControlTextbox(new Vector2(0.0f, '
              '-0.027f), maxLength: maxLength)\n'
              '            {\n'
              '                Text = defaultName,\n'
              '                Size = new Vector2(0.385f, 1f)\n'
              '            };\n'
              '            nameBox.SelectAll();\n'
              '            Controls.Add(nameBox);\n'
              '\n'
              '            okButton = new MyGuiControlButton(originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_RIGHT_AND_VERTICAL_CENTER, text: '
              'MyTexts.Get(MyCommonTexts.Ok), onButtonClick: OnOk);\n'
              '            cancelButton = new MyGuiControlButton(originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_LEFT_AND_VERTICAL_CENTER, text: '
              'MyTexts.Get(MyCommonTexts.Cancel), onButtonClick: OnCancel);\n'
              '\n'
              '            var okPosition = new Vector2(0.001f, 0.5f * '
              'DialogSize.Y - 0.071f);\n'
              '            var halfDistance = new Vector2(0.018f, 0.0f);\n'
              '\n'
              '            okButton.Position = okPosition - halfDistance;\n'
              '            cancelButton.Position = okPosition + halfDistance;\n'
              '\n'
              '            '
              'okButton.SetToolTip(MyTexts.GetString(MySpaceTexts.ToolTipNewsletter_Ok));\n'
              '            '
              'cancelButton.SetToolTip(MyTexts.GetString(MySpaceTexts.ToolTipOptionsSpace_Cancel));\n'
              '\n'
              '            Controls.Add(okButton);\n'
              '            Controls.Add(cancelButton);\n'
              '        }')

Fragment(uuid='691c6697-1739-4edb-9823-c4ddcef22d07',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=56,
         depth=0,
         type='module',
         name='',
         text='.78f);\n'
              '            Controls.Add(controlSeparatorList1);\n'
              '\n'
              '            var controlSeparatorList2 = new '
              'MyGuiControlSeparatorList();\n'
              '            controlSeparatorList2.AddHorizontal(new '
              'Vector2(-0.39f * DialogSize.X, +0.5f * DialogSize.Y - 0.123f), '
              'DialogSize.X * 0.78f);\n'
              '            Controls.Add(controlSeparatorList2);\n'
              '\n'
              '            nameBox = new MyGuiControlTextbox(new Vector2(0.0f, '
              '-0.027')

Fragment(uuid='27ff0092-108f-45f7-bf48-c9b876d8d3af',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=63,
         depth=0,
         type='module',
         name='',
         text='f), maxLength: maxLength)\n'
              '            {\n'
              '                Text = defaultName,\n'
              '                Size = new Vector2(0.385f, 1f)\n'
              '            };\n'
              '            nameBox.SelectAll();\n'
              '            Controls.Add(nameBox);\n'
              '\n'
              '            okButton = new MyGuiControlButton(originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_RIGHT_AND_VERTICAL_CENTER, text: '
              'MyTexts.Get(MyCommonTexts.Ok), onButtonClick: OnOk);\n'
              '       ')

Fragment(uuid='944990e4-98b3-4bc0-8a05-13f3c982396b',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=72,
         depth=0,
         type='module',
         name='',
         text='     cancelButton = new MyGuiControlButton(originAlign: '
              'MyGuiDrawAlignEnum.HORISONTAL_LEFT_AND_VERTICAL_CENTER, text: '
              'MyTexts.Get(MyCommonTexts.Cancel), onButtonClick: OnCancel);\n'
              '\n'
              '            var okPosition = new Vector2(0.001f, 0.5f * '
              'DialogSize.Y - 0.071f);\n'
              '            var halfDistance = new Vector2(0.018f, 0.0f);\n'
              '\n'
              '            okButton.Position = okPosition - halfDistance;\n'
              '          ')

Fragment(uuid='7c47b792-5cc4-42ec-bd5c-065799ee03b1',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=78,
         depth=0,
         type='module',
         name='',
         text='  cancelButton.Position = okPosition + halfDistance;\n'
              '\n'
              '            '
              'okButton.SetToolTip(MyTexts.GetString(MySpaceTexts.ToolTipNewsletter_Ok));\n'
              '            '
              'cancelButton.SetToolTip(MyTexts.GetString(MySpaceTexts.ToolTipOptionsSpace_Cancel));\n'
              '\n'
              '            Controls.Add(okButton);\n'
              '            Controls.Add(cancelButton);\n'
              '        }\n'
              '\n'
              '        private void CallResultCallback(string text)\n'
              '        {\n')

Fragment(uuid='4187c04f-ece9-4a74-98eb-900c4ae93ec7',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=87,
         depth=4,
         type='method',
         name='CallResultCallback',
         text='private void CallResultCallback(string text)\n'
              '        {\n'
              '            if (text == null)\n'
              '                return;\n'
              '\n'
              '            callBack(text);\n'
              '        }')

Fragment(uuid='6fa64915-db74-43a7-9e6c-367336c56cc7',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=89,
         depth=0,
         type='module',
         name='',
         text='            if (text == null)\n'
              '                return;\n'
              '\n'
              '            callBack(text);\n'
              '        }\n'
              '\n'
              '        private void ReturnOk()\n'
              '        {\n')

Fragment(uuid='8b4a6cfd-d1f2-4aac-94a1-9a50a4b411d3',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=95,
         depth=4,
         type='method',
         name='ReturnOk',
         text='private void ReturnOk()\n'
              '        {\n'
              '            if (nameBox.GetTextLength() <= 0)\n'
              '                return;\n'
              '\n'
              '            CallResultCallback(nameBox.Text);\n'
              '            CloseScreen();\n'
              '        }')

Fragment(uuid='e489da6a-dcc5-46fa-aad8-dfb4a3e9ed92',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=97,
         depth=0,
         type='module',
         name='',
         text='            if (nameBox.GetTextLength() <= 0)\n'
              '                return;\n'
              '\n'
              '            CallResultCallback(nameBox.Text);\n'
              '            CloseScreen();\n'
              '        }\n'
              '\n'
              '        private void OnOk(MyGuiControlButton button) => '
              'ReturnOk();\n'
              '        private void OnCancel(MyGuiControlButton button) => '
              'CloseScreen();\n'
              '\n'
              '        public override string GetFriendlyName() => '
              '"NameDialog";\n'
              '    }\n'
              '}')

Fragment(uuid='0ce95f41-e43c-4f20-8c51-5eb8fe56cf17',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=104,
         depth=4,
         type='method',
         name='OnOk',
         text='private void OnOk(MyGuiControlButton button) => ReturnOk();')

Fragment(uuid='c0c85db1-10ca-4597-80ef-303061f46108',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=105,
         depth=4,
         type='method',
         name='OnCancel',
         text='private void OnCancel(MyGuiControlButton button) => '
              'CloseScreen();')

Fragment(uuid='42dada71-a986-4996-b12f-b28d31a29ccc',
         path='/ToolbarManager/Gui/NameDialog.cs',
         lineno=107,
         depth=4,
         type='method',
         name='GetFriendlyName',
         text='public override string GetFriendlyName() => "NameDialog";')

Fragment(uuid='7c6db10b-07b8-4cc3-b9b4-36ff0f941173',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='\ufeffusing Sandbox.Definitions;\n'
              'using Sandbox.Game.Screens.Helpers;\n'
              'using VRage.Game;\n')

Fragment(uuid='b9b11f7d-056f-4496-ae9f-08dfc5bd41ef',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Logic/Slot.cs\n'
              '  Classes: Slot\n'
              '  Methods: Activate Clear Get Merge Set Slot Slot Slot Slot '
              'Slot\n'
              '  Usages: ActivateItemAtIndex Builder Builder Builder Builder '
              'Builder Builder Builder Builder Builder Builder Clear '
              'CreateToolbarItem CurrentPage Definitions Game Game GetId '
              'GetItemAtIndex GetObjectBuilder GetObjectBuilder '
              'GetObjectBuilder Helpers Id Index Index Index Index Index Index '
              'Index Index Index Index Index Index IsEmpty IsEmpty IsEmpty '
              'Logic MyDefinitionBase MyDefinitionId MyDefinitionId '
              'MyDefinitionId MyDefinitionManager MyObjectBuilder_ToolbarItem '
              'MyObjectBuilder_ToolbarItem MyToolbar MyToolbar MyToolbar '
              'MyToolbar MyToolbarItem MyToolbarItemDefinition '
              'MyToolbarItemFactory MyToolbarItemFactory Number '
              'ObjectBuilderFromDefinition Page Page Page Sandbox Sandbox '
              'Screens Set SetItemAtIndex SetItemAtIndex Static SwitchToPage '
              'ToolbarManager TryGetDefinition VRage definitionBase '
              'definitionBase index index index index index index index index '
              'index index item item item itemBuilder itemBuilder itemBuilder '
              'itemDefinition itemDefinition itemDefinition toolbar toolbar '
              'toolbar toolbar toolbar toolbar toolbar toolbar toolbar toolbar '
              'toolbar toolbarItem toolbarItem toolbarItem toolbarItem '
              'toolbarItem\n')

Fragment(uuid='5cfca6ac-be88-40e2-8bd6-96d6b77d2444',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=4,
         depth=0,
         type='module',
         name='',
         text='\n'
              'namespace ToolbarManager.Logic\n'
              '{\n'
              '    public class Slot\n'
              '    {\n'
              '        public readonly int Index;\n'
              '        public MyObjectBuilder_ToolbarItem Builder { get; '
              'private set; }\n'
              '        public MyDefinitionId Id => Builder?.GetId() ?? '
              'default(MyDefinitionId);\n'
              '        public int Page => Index / 9;\n'
              '        public int Number => Index % 9;\n'
              '        public bool IsEmpty => Builder == null;\n'
              '\n'
              '        public Slot(int index)\n'
              '        {\n'
              '            Index = index;\n'
              '        }\n'
              '\n'
              '        public Slot(int index, MyDefinitionId id)\n'
              '        {\n'
              '            Index = index;\n')

Fragment(uuid='3b1d3c38-ac31-4bd5-8936-8c66ac6148b4',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=7,
         depth=2,
         type='class',
         name='Slot',
         text='public class Slot\n'
              '    {\n'
              '        public readonly int Index;\n'
              '        public MyObjectBuilder_ToolbarItem Builder { get; '
              'private set; }\n'
              '        public MyDefinitionId Id => Builder?.GetId() ?? '
              'default(MyDefinitionId);\n'
              '        public int Page => Index / 9;\n'
              '        public int Number => Index % 9;\n'
              '        public bool IsEmpty => Builder == null;\n'
              '\n'
              '        public Slot(int index)\n'
              '        {\n'
              '            Index = index;\n'
              '        }\n'
              '\n'
              '        public Slot(int index, MyDefinitionId id)\n'
              '        {\n'
              '            Index = index;\n'
              '\n'
              '            if '
              '(!MyDefinitionManager.Static.TryGetDefinition(id, out '
              'MyDefinitionBase definitionBase))\n'
              '                return;\n'
              '\n'
              '            Builder = '
              'MyToolbarItemFactory.ObjectBuilderFromDefinition(definitionBase);\n'
              '        }\n'
              '\n'
              '        public Slot(int index, MyToolbarItem item)\n'
              '        {\n'
              '            Index = index;\n'
              '\n'
              '            if (item == null)\n'
              '                return;\n'
              '\n'
              '            Builder = item.GetObjectBuilder();\n'
              '        }\n'
              '\n'
              '        public Slot(int index, MyObjectBuilder_ToolbarItem '
              'itemBuilder)\n'
              '        {\n'
              '            Index = index;\n'
              '\n'
              '            if (itemBuilder == null)\n'
              '                return;\n'
              '\n'
              '            Builder = itemBuilder;\n'
              '        }\n'
              '\n'
              '        public Slot(int index, MyToolbarItemDefinition '
              'itemDefinition)\n'
              '        {\n'
              '            Index = index;\n'
              '\n'
              '            if (itemDefinition == null)\n'
              '                return;\n'
              '\n'
              '            Builder = itemDefinition.GetObjectBuilder();\n'
              '        }\n'
              '\n'
              '        public void Clear()\n'
              '        {\n'
              '            Builder = null;\n'
              '        }\n'
              '\n'
              '        public void Get(MyToolbar toolbar)\n'
              '        {\n'
              '            var toolbarItem = toolbar.GetItemAtIndex(Index);\n'
              '            if (toolbarItem == null)\n'
              '            {\n'
              '                Clear();\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            Builder = toolbarItem.GetObjectBuilder();\n'
              '        }\n'
              '\n'
              '        public void Set(MyToolbar toolbar)\n'
              '        {\n'
              '            if (IsEmpty)\n'
              '            {\n'
              '                toolbar.SetItemAtIndex(Index, null);\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            var toolbarItem = '
              'MyToolbarItemFactory.CreateToolbarItem(Builder);\n'
              '            toolbar.SetItemAtIndex(Index, toolbarItem);\n'
              '        }\n'
              '\n'
              '        public void Merge(MyToolbar toolbar)\n'
              '        {\n'
              '            if (IsEmpty)\n'
              '                return;\n'
              '\n'
              '            Set(toolbar);\n'
              '        }\n'
              '\n'
              '        public void Activate(MyToolbar toolbar)\n'
              '        {\n'
              '            if (toolbar.CurrentPage != Page)\n'
              '                toolbar.SwitchToPage(Page);\n'
              '\n'
              '            toolbar.ActivateItemAtIndex(Index);\n'
              '        }\n'
              '    }')

Fragment(uuid='42fecf29-7b2e-46b9-adee-7982b324271e',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=16,
         depth=4,
         type='method',
         name='Slot',
         text='public Slot(int index)\n'
              '        {\n'
              '            Index = index;\n'
              '        }')

Fragment(uuid='62dec5af-45b3-45d7-826e-52695902576c',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=21,
         depth=4,
         type='method',
         name='Slot',
         text='public Slot(int index, MyDefinitionId id)\n'
              '        {\n'
              '            Index = index;\n'
              '\n'
              '            if '
              '(!MyDefinitionManager.Static.TryGetDefinition(id, out '
              'MyDefinitionBase definitionBase))\n'
              '                return;\n'
              '\n'
              '            Builder = '
              'MyToolbarItemFactory.ObjectBuilderFromDefinition(definitionBase);\n'
              '        }')

Fragment(uuid='4c7ee822-232d-4caa-89cd-9db35fed54fe',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=24,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if '
              '(!MyDefinitionManager.Static.TryGetDefinition(id, out '
              'MyDefinitionBase definitionBase))\n'
              '                return;\n'
              '\n'
              '            Builder = '
              'MyToolbarItemFactory.ObjectBuilderFromDefinition(definitionBase);\n'
              '        }\n'
              '\n'
              '        public Slot(int index, MyToolbarItem item)\n'
              '        {\n'
              '            Index = index;\n')

Fragment(uuid='ad9dc91f-ac93-44a8-a07d-952e1cb4f4ea',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=31,
         depth=4,
         type='method',
         name='Slot',
         text='public Slot(int index, MyToolbarItem item)\n'
              '        {\n'
              '            Index = index;\n'
              '\n'
              '            if (item == null)\n'
              '                return;\n'
              '\n'
              '            Builder = item.GetObjectBuilder();\n'
              '        }')

Fragment(uuid='905e525a-ae72-4f08-a714-5a18fdb0d371',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=34,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (item == null)\n'
              '                return;\n'
              '\n'
              '            Builder = item.GetObjectBuilder();\n'
              '        }\n'
              '\n'
              '        public Slot(int index, MyObjectBuilder_ToolbarItem '
              'itemBuilder)\n'
              '        {\n'
              '            Index = index;\n')

Fragment(uuid='db22145b-db1b-4ed2-ac43-22ccf6eed47e',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=41,
         depth=4,
         type='method',
         name='Slot',
         text='public Slot(int index, MyObjectBuilder_ToolbarItem '
              'itemBuilder)\n'
              '        {\n'
              '            Index = index;\n'
              '\n'
              '            if (itemBuilder == null)\n'
              '                return;\n'
              '\n'
              '            Builder = itemBuilder;\n'
              '        }')

Fragment(uuid='80fdb4e9-d579-4661-b447-50b7b1c65c1e',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=44,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (itemBuilder == null)\n'
              '                return;\n'
              '\n'
              '            Builder = itemBuilder;\n'
              '        }\n'
              '\n'
              '        public Slot(int index, MyToolbarItemDefinition '
              'itemDefinition)\n'
              '        {\n'
              '            Index = index;\n')

Fragment(uuid='0cd3cdc7-9c1f-4b89-a7a9-1fc375bf9dcf',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=51,
         depth=4,
         type='method',
         name='Slot',
         text='public Slot(int index, MyToolbarItemDefinition itemDefinition)\n'
              '        {\n'
              '            Index = index;\n'
              '\n'
              '            if (itemDefinition == null)\n'
              '                return;\n'
              '\n'
              '            Builder = itemDefinition.GetObjectBuilder();\n'
              '        }')

Fragment(uuid='281d2123-2f16-4762-82b9-4cfb0d629c72',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=54,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (itemDefinition == null)\n'
              '                return;\n'
              '\n'
              '            Builder = itemDefinition.GetObjectBuilder();\n'
              '        }\n'
              '\n'
              '        public void Clear()\n'
              '        {\n'
              '            Builder = null;\n'
              '        }\n'
              '\n'
              '        public void Get(MyToolbar toolbar)\n'
              '        {\n'
              '            var toolbarItem = toolbar.GetItemAtIndex(Index);\n')

Fragment(uuid='54111b60-b855-4e78-9387-ca075947cd67',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=61,
         depth=4,
         type='method',
         name='Clear',
         text='public void Clear()\n'
              '        {\n'
              '            Builder = null;\n'
              '        }')

Fragment(uuid='a8863a05-16ef-47bb-9063-5d5704858006',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=66,
         depth=4,
         type='method',
         name='Get',
         text='public void Get(MyToolbar toolbar)\n'
              '        {\n'
              '            var toolbarItem = toolbar.GetItemAtIndex(Index);\n'
              '            if (toolbarItem == null)\n'
              '            {\n'
              '                Clear();\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            Builder = toolbarItem.GetObjectBuilder();\n'
              '        }')

Fragment(uuid='f2c08a61-8f13-485f-9183-9044b10c9f20',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=69,
         depth=0,
         type='module',
         name='',
         text='            if (toolbarItem == null)\n'
              '            {\n'
              '                Clear();\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            Builder = toolbarItem.GetObjectBuilder();\n'
              '        }\n'
              '\n'
              '        public void Set(MyToolbar toolbar)\n'
              '        {\n')

Fragment(uuid='301402d8-2019-4ffa-a470-76e11779646f',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=78,
         depth=4,
         type='method',
         name='Set',
         text='public void Set(MyToolbar toolbar)\n'
              '        {\n'
              '            if (IsEmpty)\n'
              '            {\n'
              '                toolbar.SetItemAtIndex(Index, null);\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            var toolbarItem = '
              'MyToolbarItemFactory.CreateToolbarItem(Builder);\n'
              '            toolbar.SetItemAtIndex(Index, toolbarItem);\n'
              '        }')

Fragment(uuid='9317106b-9f29-4fb6-a12b-0446bd9c93ed',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=80,
         depth=0,
         type='module',
         name='',
         text='            if (IsEmpty)\n'
              '            {\n'
              '                toolbar.SetItemAtIndex(Index, null);\n'
              '                return;\n'
              '            }\n'
              '\n'
              '            var toolbarItem = '
              'MyToolbarItemFactory.CreateToolbarItem(Builder);\n'
              '            toolbar.SetItemAtIndex(Index, toolbarItem);\n'
              '        }\n'
              '\n'
              '        public void Merge(MyToolbar toolbar)\n'
              '        {\n')

Fragment(uuid='20ab95e0-6aca-46db-8aa2-f8ed6693743c',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=90,
         depth=4,
         type='method',
         name='Merge',
         text='public void Merge(MyToolbar toolbar)\n'
              '        {\n'
              '            if (IsEmpty)\n'
              '                return;\n'
              '\n'
              '            Set(toolbar);\n'
              '        }')

Fragment(uuid='99b9f05a-8ec6-4a37-99fa-e6470d55e0fb',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=92,
         depth=0,
         type='module',
         name='',
         text='            if (IsEmpty)\n'
              '                return;\n'
              '\n'
              '            Set(toolbar);\n'
              '        }\n'
              '\n'
              '        public void Activate(MyToolbar toolbar)\n'
              '        {\n')

Fragment(uuid='76bd2732-7e9b-4214-9174-7f42046b64d4',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=98,
         depth=4,
         type='method',
         name='Activate',
         text='public void Activate(MyToolbar toolbar)\n'
              '        {\n'
              '            if (toolbar.CurrentPage != Page)\n'
              '                toolbar.SwitchToPage(Page);\n'
              '\n'
              '            toolbar.ActivateItemAtIndex(Index);\n'
              '        }')

Fragment(uuid='214db322-df7f-4a47-a2de-dba7eeff31e2',
         path='/ToolbarManager/Logic/Slot.cs',
         lineno=100,
         depth=0,
         type='module',
         name='',
         text='            if (toolbar.CurrentPage != Page)\n'
              '                toolbar.SwitchToPage(Page);\n'
              '\n'
              '            toolbar.ActivateItemAtIndex(Index);\n'
              '        }\n'
              '    }\n'
              '}')

Fragment(uuid='b3a95bb6-fac8-4714-855e-af1a7ab724f6',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='using System;\n'
              'using System.Collections.Generic;\n'
              'using System.IO;\n'
              'using System.Text;\n'
              'using Sandbox.Game.Screens.Helpers;\n'
              'using Sandbox.Graphics.GUI;\n'
              'using ToolbarManager.Extensions;\n'
              'using ToolbarManager.Gui;\n'
              'using ToolbarManager.Patches;\n'
              'using VRage.FileSystem;\n'
              'using VRage.Utils;\n')

Fragment(uuid='b9286e33-4277-42a7-b5f5-86b5d7386f8d',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Logic/Storage.cs\n'
              '  Classes: Storage\n'
              '  Methods: FormatDir FormatPath OnItemSelected OnLoadToolbar '
              'OnNameSpecified OnOverwriteForSure OnSaveToolbar Storage\n'
              '  Usages: AddScreen AddScreen AddScreen Associate Collections '
              'Combine Combine Combine CreateDirectory CreateMessageBox '
              'CurrentToolbar CurrentToolbar CurrentToolbar CurrentToolbar '
              'CurrentToolbar Default Default Dictionary Dictionary Directory '
              'Dissociate Error Exception Exists Extensions File FileSystem '
              'FormatDir FormatDir FormatPath FormatPath GUI Game Generic '
              'GetValueOrDefault GetValueOrDefault Graphics Gui Helpers IO '
              'Info Length ListDialog Logic Merge MyFileSystem MyGuiSandbox '
              'MyGuiSandbox MyGuiSandbox MyGuiSandbox MyGuiSandboxExt '
              'MyGuiScreenMessageBox MyGuiScreenMessageBox '
              'MyGuiScreenMessageBox MyGuiScreenToolbarConfigBasePatch '
              'MyGuiScreenToolbarConfigBasePatch MyLog MyLog '
              'MyMessageBoxButtonsType MyToolbar MyToolbar MyToolbarComponent '
              'MyToolbarComponent MyToolbarComponent MyToolbarComponent '
              'MyToolbarComponent NameDialog OnItemSelected OnLoadToolbar '
              'OnLoadToolbar OnNameSpecified OnOverwriteForSure '
              'OnOverwriteForSure OnSaveToolbar OnSaveToolbar Patches Path '
              'Path Path PathExt Read ResultEnum ResultEnum ResultEnum Sandbox '
              'Sandbox SanitizeFileName Screens Set Show StringBuilder '
              'StringBuilder Substring System System System System Text '
              'ToString ToString ToString ToString Toolbar Toolbar '
              'ToolbarManager ToolbarManager ToolbarManager ToolbarManager '
              'ToolbarType ToolbarType ToolbarType ToolbarType UserDataDir '
              'UserDataDir UserDataDir UserDataPath Utils VRage VRage Write '
              'WriteJson YES YES YES_NO buttonType callback currentToolbar '
              'currentToolbar currentToolbar currentToolbar currentToolbar '
              'currentToolbar currentToolbar currentToolbar currentToolbar '
              'currentToolbar currentToolbar currentToolbar currentToolbar '
              'currentToolbar currentToolbar currentToolbar currentToolbar '
              'currentToolbar currentToolbar currentToolbar currentToolbar '
              'currentToolbar currentToolbar currentToolbar currentToolbar dir '
              'dir dir dir dir latestName latestName latestName latestName '
              'latestNames latestNames latestNames latestNames merge merge '
              'messageCaption messageText name name name name name name name '
              'name path path path path path path path path path path '
              'pathWithoutExtension pathWithoutExtension result result result '
              'result sanitizedName sanitizedName toolbar toolbar toolbar '
              'toolbar toolbar toolbar toolbar toolbar\n')

Fragment(uuid='ff61a1fd-6924-4630-aa18-62e5485601f3',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=12,
         depth=0,
         type='module',
         name='',
         text='\n'
              'namespace ToolbarManager.Logic\n'
              '{\n'
              '    public class Storage\n'
              '    {\n'
              '        // MyFileSystem.UserDataPath ~= '
              'C:\\Users\\%USERNAME%\\AppData\\Roaming\\SpaceEngineers\n'
              '        private static string UserDataDir => '
              'Path.Combine(MyFileSystem.UserDataPath, "ToolbarManager");\n'
              '\n'
              '        private readonly Dictionary<string, string> latestNames '
              '= new Dictionary<string, string>();\n'
              '\n'
              '        public Storage()\n'
              '        {\n'
              '            MyGuiScreenToolbarConfigBasePatch.OnLoadToolbar += '
              'OnLoadToolbar;\n'
              '            MyGuiScreenToolbarConfigBasePatch.OnSaveToolbar += '
              'OnSaveToolbar;\n'
              '\n'
              '            MyLog.Default.Info($"ToolbarManager: UserDataDir = '
              '\\"{UserDataDir}\\"");\n'
              '   ')

Fragment(uuid='f557a238-63b6-4375-a028-a7985402a548',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=15,
         depth=2,
         type='class',
         name='Storage',
         text='public class Storage\n'
              '    {\n'
              '        // MyFileSystem.UserDataPath ~= '
              'C:\\Users\\%USERNAME%\\AppData\\Roaming\\SpaceEngineers\n'
              '        private static string UserDataDir => '
              'Path.Combine(MyFileSystem.UserDataPath, "ToolbarManager");\n'
              '\n'
              '        private readonly Dictionary<string, string> latestNames '
              '= new Dictionary<string, string>();\n'
              '\n'
              '        public Storage()\n'
              '        {\n'
              '            MyGuiScreenToolbarConfigBasePatch.OnLoadToolbar += '
              'OnLoadToolbar;\n'
              '            MyGuiScreenToolbarConfigBasePatch.OnSaveToolbar += '
              'OnSaveToolbar;\n'
              '\n'
              '            MyLog.Default.Info($"ToolbarManager: UserDataDir = '
              '\\"{UserDataDir}\\"");\n'
              '        }\n'
              '\n'
              '        private static string FormatPath(MyToolbar '
              'currentToolbar, string name)\n'
              '        {\n'
              '            var dir = FormatDir(currentToolbar);\n'
              '            var sanitizedName = '
              'PathExt.SanitizeFileName(name);\n'
              '            return Path.Combine(dir, $"{sanitizedName}.xml");\n'
              '        }\n'
              '\n'
              '        private static string FormatDir(MyToolbar '
              'currentToolbar)\n'
              '        {\n'
              '            var dir = Path.Combine(UserDataDir, '
              'currentToolbar.ToolbarType.ToString());\n'
              '            Directory.CreateDirectory(dir);\n'
              '            return dir;\n'
              '        }\n'
              '\n'
              '        private void OnSaveToolbar()\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n'
              '            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var latestName = '
              'latestNames.GetValueOrDefault(currentToolbar.ToolbarType.ToString()) '
              '?? "";\n'
              '\n'
              '            MyGuiSandbox.AddScreen(new '
              'NameDialog(OnNameSpecified, "Save character toolbar", '
              'latestName));\n'
              '        }\n'
              '\n'
              '        private void OnNameSpecified(string name)\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n'
              '            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var path = FormatPath(currentToolbar, name);\n'
              '\n'
              '            if (File.Exists(path))\n'
              '            {\n'
              '                MyGuiSandbox.AddScreen(\n'
              '                    MyGuiSandbox.CreateMessageBox(buttonType: '
              'MyMessageBoxButtonsType.YES_NO,\n'
              '                        messageText: new StringBuilder($"Are '
              'you sure to overwrite this saved toolbar?\\r\\n\\r\\n{name}"),\n'
              '                        messageCaption: new '
              'StringBuilder("Confirmation"),\n'
              '                        callback: result => '
              'OnOverwriteForSure(result, path)));\n'
              '            }\n'
              '            else\n'
              '            {\n'
              '                '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum.YES, '
              'path);\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private void '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum result, '
              'string path)\n'
              '        {\n'
              '            if (result != '
              'MyGuiScreenMessageBox.ResultEnum.YES)\n'
              '                return;\n'
              '\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n'
              '            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var pathWithoutExtension = path.Substring(0, '
              'path.Length - 4);\n'
              '\n'
              '            var toolbar = new Toolbar(currentToolbar);\n'
              '\n'
              '            try\n'
              '            {\n'
              '                toolbar.WriteJson( '
              '$"{pathWithoutExtension}.json");\n'
              '                toolbar.Dissociate(currentToolbar);\n'
              '                toolbar.Write(path);\n'
              '            }\n'
              '            catch (Exception e)\n'
              '            {\n'
              '                MyLog.Default.Error($"ToolbarManager: Failed to '
              'save character toolbar \\"{{name}}\\" to file \\"{{path}}\\": '
              '{e}");\n'
              '                MyGuiSandboxExt.Show("Failed to save character '
              'toolbar", "Error");\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private void OnLoadToolbar()\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n'
              '            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var latestName = '
              'latestNames.GetValueOrDefault(currentToolbar.ToolbarType.ToString()) '
              '?? "";\n'
              '\n'
              '            MyGuiSandbox.AddScreen(new '
              'ListDialog(OnItemSelected, "Load character toolbar", '
              'latestName, FormatDir(currentToolbar)));\n'
              '        }\n'
              '\n'
              '        private void OnItemSelected(string name, bool merge)\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n'
              '            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            latestNames[currentToolbar.ToolbarType.ToString()] '
              '= name;\n'
              '\n'
              '            var path = FormatPath(currentToolbar, name);\n'
              '\n'
              '            var toolbar = Toolbar.Read(path);\n'
              '\n'
              '            toolbar.Associate(currentToolbar);\n'
              '\n'
              '            if (merge)\n'
              '                toolbar.Merge(currentToolbar);\n'
              '            else\n'
              '                toolbar.Set(currentToolbar);\n'
              '        }\n'
              '    }')

Fragment(uuid='d957c0bc-717e-46bb-ba12-f54408b7c345',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=22,
         depth=4,
         type='method',
         name='Storage',
         text='public Storage()\n'
              '        {\n'
              '            MyGuiScreenToolbarConfigBasePatch.OnLoadToolbar += '
              'OnLoadToolbar;\n'
              '            MyGuiScreenToolbarConfigBasePatch.OnSaveToolbar += '
              'OnSaveToolbar;\n'
              '\n'
              '            MyLog.Default.Info($"ToolbarManager: UserDataDir = '
              '\\"{UserDataDir}\\"");\n'
              '        }')

Fragment(uuid='6ff7b749-9a45-4e03-aab1-528b098b7b23',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='     }\n'
              '\n'
              '        private static string FormatPath(MyToolbar '
              'currentToolbar, string name)\n'
              '        {\n'
              '            var dir = FormatDir(currentToolbar);\n'
              '            var sanitizedName = '
              'PathExt.SanitizeFileName(name);\n'
              '            return Path.Combine(dir, $"{sanitizedName}.xml");\n'
              '        }\n'
              '\n'
              '        private static string FormatDir(MyToolbar '
              'currentToolbar)\n'
              '        {\n'
              '            var dir = Path.Combine(UserDataDir, '
              'currentToolbar.ToolbarType.ToString());\n'
              '            Directory.CreateDirectory(dir);\n'
              '            return dir;\n'
              '        }\n'
              '\n'
              '        private void OnSaveToolbar()\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n')

Fragment(uuid='16d7ea82-4212-477c-9cd3-b515aa005eeb',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=30,
         depth=4,
         type='method',
         name='FormatPath',
         text='private static string FormatPath(MyToolbar currentToolbar, '
              'string name)\n'
              '        {\n'
              '            var dir = FormatDir(currentToolbar);\n'
              '            var sanitizedName = '
              'PathExt.SanitizeFileName(name);\n'
              '            return Path.Combine(dir, $"{sanitizedName}.xml");\n'
              '        }')

Fragment(uuid='e3c99ad0-f77a-42fa-a7a0-827f1e8d2a70',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=37,
         depth=4,
         type='method',
         name='FormatDir',
         text='private static string FormatDir(MyToolbar currentToolbar)\n'
              '        {\n'
              '            var dir = Path.Combine(UserDataDir, '
              'currentToolbar.ToolbarType.ToString());\n'
              '            Directory.CreateDirectory(dir);\n'
              '            return dir;\n'
              '        }')

Fragment(uuid='661d6213-5fb0-4ee1-a637-a5eff1e7a5d8',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=44,
         depth=4,
         type='method',
         name='OnSaveToolbar',
         text='private void OnSaveToolbar()\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n'
              '            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var latestName = '
              'latestNames.GetValueOrDefault(currentToolbar.ToolbarType.ToString()) '
              '?? "";\n'
              '\n'
              '            MyGuiSandbox.AddScreen(new '
              'NameDialog(OnNameSpecified, "Save character toolbar", '
              'latestName));\n'
              '        }')

Fragment(uuid='d7e5e20c-0f9e-4021-8ac0-abed5e1b3ac7',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=47,
         depth=0,
         type='module',
         name='',
         text='            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var latestName = '
              'latestNames.GetValueOrDefault(currentToolbar.ToolbarType.ToString()) '
              '?? "";\n'
              '\n'
              '            MyGuiSandbox.AddScreen(new '
              'NameDialog(OnNameSpecified, "Save character toolbar", '
              'latestName));\n'
              '        }\n'
              '\n'
              '        private void OnNameSpecified(string name)\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n')

Fragment(uuid='8d6e8d96-91f6-4ecc-af6b-d6224aeacaa1',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=55,
         depth=4,
         type='method',
         name='OnNameSpecified',
         text='private void OnNameSpecified(string name)\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n'
              '            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var path = FormatPath(currentToolbar, name);\n'
              '\n'
              '            if (File.Exists(path))\n'
              '            {\n'
              '                MyGuiSandbox.AddScreen(\n'
              '                    MyGuiSandbox.CreateMessageBox(buttonType: '
              'MyMessageBoxButtonsType.YES_NO,\n'
              '                        messageText: new StringBuilder($"Are '
              'you sure to overwrite this saved toolbar?\\r\\n\\r\\n{name}"),\n'
              '                        messageCaption: new '
              'StringBuilder("Confirmation"),\n'
              '                        callback: result => '
              'OnOverwriteForSure(result, path)));\n'
              '            }\n'
              '            else\n'
              '            {\n'
              '                '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum.YES, '
              'path);\n'
              '            }\n'
              '        }')

Fragment(uuid='cc8079a3-4467-4f47-bfbc-ca8e81364d8a',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=58,
         depth=0,
         type='module',
         name='',
         text='            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var path = FormatPath(currentToolbar, name);\n')

Fragment(uuid='c24cd0c9-abc0-4354-a6e8-cc17a0f59322',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=62,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (File.Exists(path))\n'
              '            {\n'
              '                MyGuiSandbox.AddScreen(\n'
              '                    MyGuiSandbox.CreateMessageBox(buttonType: '
              'MyMessageBoxButtonsType.YES_NO,\n'
              '                        messageText: new StringBuilder($"Are '
              'you sure to overwrite this saved toolbar?\\r\\n\\r\\n{name}"),\n'
              '                        messageCaption: new '
              'StringBuilder("Confirmation"),\n'
              '                        callback: result => '
              'OnOverwriteForSure(result, path)));\n'
              '            }\n'
              '            else\n'
              '            {\n'
              '                '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum.YES, '
              'path);\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private void '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum result, '
              'string path)\n'
              '        {\n')

Fragment(uuid='6b864c5b-f85d-4ec7-a092-79bd164f8aa8',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=77,
         depth=4,
         type='method',
         name='OnOverwriteForSure',
         text='private void '
              'OnOverwriteForSure(MyGuiScreenMessageBox.ResultEnum result, '
              'string path)\n'
              '        {\n'
              '            if (result != '
              'MyGuiScreenMessageBox.ResultEnum.YES)\n'
              '                return;\n'
              '\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n'
              '            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var pathWithoutExtension = path.Substring(0, '
              'path.Length - 4);\n'
              '\n'
              '            var toolbar = new Toolbar(currentToolbar);\n'
              '\n'
              '            try\n'
              '            {\n'
              '                toolbar.WriteJson( '
              '$"{pathWithoutExtension}.json");\n'
              '                toolbar.Dissociate(currentToolbar);\n'
              '                toolbar.Write(path);\n'
              '            }\n'
              '            catch (Exception e)\n'
              '            {\n'
              '                MyLog.Default.Error($"ToolbarManager: Failed to '
              'save character toolbar \\"{{name}}\\" to file \\"{{path}}\\": '
              '{e}");\n'
              '                MyGuiSandboxExt.Show("Failed to save character '
              'toolbar", "Error");\n'
              '            }\n'
              '        }')

Fragment(uuid='b53f010a-b59b-419a-ad5e-bc8fad7aca6a',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=79,
         depth=0,
         type='module',
         name='',
         text='            if (result != '
              'MyGuiScreenMessageBox.ResultEnum.YES)\n'
              '                return;\n'
              '\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n')

Fragment(uuid='28e00a70-6a3c-477d-a219-6b8938fd9eaf',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=83,
         depth=0,
         type='module',
         name='',
         text='            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var pathWithoutExtension = path.Substring(0, '
              'path.Length - 4);\n'
              '\n'
              '            var toolbar = new Toolbar(currentToolbar);\n'
              '\n'
              '            try\n'
              '            {\n'
              '                toolbar.WriteJson( '
              '$"{pathWithoutExtension}.json");\n'
              '                toolbar.Dissociate(currentToolbar);\n'
              '                toolbar.Write(path);\n'
              '            }\n'
              '            catch (Exception e)\n'
              '            {\n'
              '                MyLog.Default.Error($"ToolbarManager: Failed to '
              'save character toolbar \\"{{name}}\\" to file \\"{{path}}\\": '
              '{e}");\n'
              '                MyGuiSandboxExt.Show("Failed to save character '
              'toolbar", "Error");\n'
              '            }\n'
              '        }\n'
              '\n'
              '        private void OnLoadToolbar()\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n')

Fragment(uuid='1cdc7cf3-0b02-454a-a756-e91f2c47a0f8',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=103,
         depth=4,
         type='method',
         name='OnLoadToolbar',
         text='private void OnLoadToolbar()\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n'
              '            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var latestName = '
              'latestNames.GetValueOrDefault(currentToolbar.ToolbarType.ToString()) '
              '?? "";\n'
              '\n'
              '            MyGuiSandbox.AddScreen(new '
              'ListDialog(OnItemSelected, "Load character toolbar", '
              'latestName, FormatDir(currentToolbar)));\n'
              '        }')

Fragment(uuid='6b000bf9-f2fc-4a36-8ed9-26d398cff354',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=106,
         depth=0,
         type='module',
         name='',
         text='            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            var latestName = '
              'latestNames.GetValueOrDefault(currentToolbar.ToolbarType.ToString()) '
              '?? "";\n'
              '\n'
              '            MyGuiSandbox.AddScreen(new '
              'ListDialog(OnItemSelected, "Load character toolbar", '
              'latestName, FormatDir(currentToolbar)));\n'
              '        }\n'
              '\n'
              '        private void OnItemSelected(string name, bool merge)\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n')

Fragment(uuid='6f67bef3-db55-463c-9fd7-5bd016728884',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=114,
         depth=4,
         type='method',
         name='OnItemSelected',
         text='private void OnItemSelected(string name, bool merge)\n'
              '        {\n'
              '            var currentToolbar = '
              'MyToolbarComponent.CurrentToolbar;\n'
              '            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            latestNames[currentToolbar.ToolbarType.ToString()] '
              '= name;\n'
              '\n'
              '            var path = FormatPath(currentToolbar, name);\n'
              '\n'
              '            var toolbar = Toolbar.Read(path);\n'
              '\n'
              '            toolbar.Associate(currentToolbar);\n'
              '\n'
              '            if (merge)\n'
              '                toolbar.Merge(currentToolbar);\n'
              '            else\n'
              '                toolbar.Set(currentToolbar);\n'
              '        }')

Fragment(uuid='ce7148ff-0083-4956-b6b6-701c16eb08f5',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=117,
         depth=0,
         type='module',
         name='',
         text='            if (currentToolbar == null)\n'
              '                return;\n'
              '\n'
              '            latestNames[currentToolbar.ToolbarType.ToString()] '
              '= name;\n'
              '\n'
              '            var path = FormatPath(currentToolbar, name);\n'
              '\n'
              '            var toolbar = Toolbar.Read(path);\n'
              '\n'
              '            toolbar.Associate(currentToolbar);\n')

Fragment(uuid='9a611ea6-cde3-4302-b076-3c4fb60384b2',
         path='/ToolbarManager/Logic/Storage.cs',
         lineno=127,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            if (merge)\n'
              '                toolbar.Merge(currentToolbar);\n'
              '            else\n'
              '                toolbar.Set(currentToolbar);\n'
              '        }\n'
              '    }\n'
              '}')

Fragment(uuid='72b12041-4496-4361-a823-0ebc7cd89514',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='using System;\n'
              'using System.Collections.Generic;\n'
              'using System.IO;\n'
              'using System.Runtime.CompilerServices;\n'
              'using System.Security.Cryptography;\n'
              'using System.Text;\n'
              'using LitJson;\n'
              'using Sandbox.Common.ObjectBuilders;\n'
              'using Sandbox.Game.Entities;\n'
              'using Sandbox.Game.Entities.Cube;\n'
              'using Sandbox.Game.Screens.Helpers;\n'
              'using VRage.Game;\n'
              'using VRage.Game.Entity;\n'
              'using VRage.ObjectBuilders;\n')

Fragment(uuid='1ab57e46-acb4-4699-9225-6e130139888c',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Logic/Toolbar.cs\n'
              '  Classes: Toolbar\n'
              '  Methods: Associate CalculateDisplayNameTextChecksum Clear '
              'Dissociate Merge Read Read Set Toolbar Toolbar Toolbar Toolbar '
              'Write Write WriteJson WriteJson\n'
              '  Variables: MyToolbarType\n'
              '  Usages: Abs Add Add Add Add Add AggressiveInlining Array '
              'BaseStream BaseStream BitConverter BlockEntityId BlockEntityId '
              'BlockEntityId BlockEntityId BlockEntityId BlockEntityId '
              'BlockEntityId BlockEntityId Builder Builder Builder Builder '
              'Builder Builder Builder Builder '
              'CalculateDisplayNameTextChecksum '
              'CalculateDisplayNameTextChecksum Clear Collections Common '
              'CompilerServices ComputeHash Count Count Count Create Create '
              'Cryptography Cube CubeGrid Data Data DefinitionId '
              'DeserializeXML Dictionary DisplayNameText DisplayNameText '
              'Encoding Encoding Encoding Entities Entities Entity EntityId '
              'EntityId Game Game Game Game Game Generic GetBytes GetFatBlocks '
              'GetGroup GetItemAtIndex GetType GroupName HashAlgorithm Helpers '
              'IO Index Index Index IsEmpty ItemCount ItemCount ItemCount '
              'JsonData JsonData JsonData JsonType JsonWriter List List List '
              'List LitJson Logic Math Math Math Merge MethodImpl '
              'MethodImplOptions Min Min MyCubeGridGroups MyEntities '
              'MyEntities MyEntity MyObjectBuilderSerializer '
              'MyObjectBuilderSerializer MyObjectBuilder_Toolbar '
              'MyObjectBuilder_Toolbar MyObjectBuilder_Toolbar '
              'MyObjectBuilder_Toolbar MyObjectBuilder_ToolbarItemDefinition '
              'MyObjectBuilder_ToolbarItemTerminalBlock '
              'MyObjectBuilder_ToolbarItemTerminalBlock '
              'MyObjectBuilder_ToolbarItemTerminalBlock '
              'MyObjectBuilder_ToolbarItemTerminalBlock '
              'MyObjectBuilder_ToolbarItemTerminalGroup '
              'MyObjectBuilder_ToolbarItemTerminalGroup '
              'MyObjectBuilder_ToolbarItemTerminalGroup MyTerminalBlock '
              'MyTerminalBlock MyTerminalBlock MyToolbar MyToolbar MyToolbar '
              'MyToolbar MyToolbar Name NodeData Nodes Number ObjectBuilders '
              'ObjectBuilders Owner Owner Page Physical PrettyPrint Read '
              'Runtime SHA1 SHA1 Sandbox Sandbox Sandbox Sandbox Screens '
              'Security SerializeXML Set SetJsonType Slot Slot Slot Slot Slot '
              'Slot Slot Slots Slots Slots Static StreamReader StreamReader '
              'StreamWriter StreamWriter StreamWriter StreamWriter System '
              'System System System System System Text ToInt64 ToJson ToString '
              'ToString ToString Toolbar ToolbarManager ToolbarType '
              'ToolbarType ToolbarType TryGetEntityById TryGetEntityById '
              'TryGetValue TryGetValue UTF8 UTF8 VRage VRage VRage Write Write '
              'WriteJson block block block block block block block block block '
              'blockBuilder blockBuilder blockBuilder blockBuilder '
              'blockBuilder blockBuilder blockBuilder blockBuilder '
              'blockBuilder blockBuilder blockSlotList blockSlotList '
              'blockSlotList blockSlotList blockSlots blockSlots blockSlots '
              'blockSlots builder builder builder checksum checksum checksum '
              'checksum count count count count currentToolbar currentToolbar '
              'currentToolbar currentToolbar encoding encoding grid grid '
              'groupBuilder groupBuilder groupBuilder groupBuilder '
              'groupBuilder groupBuilder hashAlgorithm hashAlgorithm index '
              'index index index index index index index index index index '
              'index index index itemBuilder itemBuilder path path path path '
              'path path physicalGroup physicalGroup physicalGroup '
              'physicalNode physicalNode sha1 sha1 sha1 sha1 sha1Hash sha1Hash '
              'slot slot slot slot slot slot slot slot slot slot slot slot '
              'slot slot slot slot slot slot slot slot slot slots slots slots '
              'slots slots slots slots slots slots slots slots slots slots '
              'stream stream stream stream stream stream stream stream stream '
              'stream stream stream terminalBlock terminalBlock terminalBlock '
              'toolbar toolbar toolbar toolbar toolbar toolbar toolbar toolbar '
              'toolbar toolbar toolbar toolbarBuilder toolbarBuilder '
              'toolbarBuilder toolbarBuilder toolbarBuilder toolbarBuilder '
              'toolbarBuilder type type type type type utf8 utf8 utf8 utf8 '
              'writer writer writer\n')

Fragment(uuid='589846f8-1b77-401a-8783-01d1817bb445',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=15,
         depth=0,
         type='module',
         name='',
         text='\n'
              'namespace ToolbarManager.Logic\n'
              '{\n'
              '    public class Toolbar\n'
              '    {\n'
              '        private readonly MyToolbarType type;\n'
              '        private readonly List<Slot> slots = new List<Slot>();\n'
              '\n'
              '        public Toolbar(MyToolbar toolbar)\n'
              '        {\n'
              '            if (toolbar == null)\n'
              '                return;\n'
              '\n'
              '            type = toolbar.ToolbarType;\n')

Fragment(uuid='e638c9dc-9416-4e27-8e15-10cfad6ced76',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=18,
         depth=2,
         type='class',
         name='Toolbar',
         text='public class Toolbar\n'
              '    {\n'
              '        private readonly MyToolbarType type;\n'
              '        private readonly List<Slot> slots = new List<Slot>();\n'
              '\n'
              '        public Toolbar(MyToolbar toolbar)\n'
              '        {\n'
              '            if (toolbar == null)\n'
              '                return;\n'
              '\n'
              '            type = toolbar.ToolbarType;\n'
              '\n'
              '            for (var index = 0; index < toolbar.ItemCount; '
              'index++)\n'
              '                slots.Add(new Slot(index, '
              'toolbar.GetItemAtIndex(index)));\n'
              '        }\n'
              '\n'
              '        private Toolbar(MyObjectBuilder_Toolbar '
              'toolbarBuilder)\n'
              '        {\n'
              '            if (toolbarBuilder == null)\n'
              '                return;\n'
              '\n'
              '            type = toolbarBuilder.ToolbarType;\n'
              '\n'
              '            for (var index = 0; index < '
              'toolbarBuilder.Slots.Count; index++)\n'
              '            {\n'
              '                slots.Add(new Slot(index, '
              'toolbarBuilder.Slots[index].Data));\n'
              '            }\n'
              '        }\n'
              '\n'
              '        public void Clear()\n'
              '        {\n'
              '            slots.Clear();\n'
              '        }\n'
              '\n'
              '        public static Toolbar Read(string path)\n'
              '        {\n'
              '            using (var stream = new StreamReader(path))\n'
              '                return Read(stream);\n'
              '        }\n'
              '\n'
              '        private static Toolbar Read(StreamReader stream)\n'
              '        {\n'
              '            '
              'MyObjectBuilderSerializer.DeserializeXML<MyObjectBuilder_Toolbar>(stream.BaseStream, '
              'out var toolbarBuilder);\n'
              '            return new Toolbar(toolbarBuilder);\n'
              '        }\n'
              '\n'
              '        public void Write(string path)\n'
              '        {\n'
              '            using (var stream = new StreamWriter(path))\n'
              '                Write(stream);\n'
              '        }\n'
              '\n'
              '        private void Write(StreamWriter stream)\n'
              '        {\n'
              '            var builder = new MyObjectBuilder_Toolbar\n'
              '            {\n'
              '                ToolbarType = type\n'
              '            };\n'
              '\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                builder.Slots.Add(new '
              'MyObjectBuilder_Toolbar.Slot\n'
              '                {\n'
              '                    Index = slot.Index,\n'
              '                    Data = slot.Builder\n'
              '                });\n'
              '            }\n'
              '\n'
              '            '
              'MyObjectBuilderSerializer.SerializeXML(stream.BaseStream, '
              'builder);\n'
              '        }\n'
              '\n'
              '        public void WriteJson(string path)\n'
              '        {\n'
              '            using (var stream = new StreamWriter(path))\n'
              '                WriteJson(stream);\n'
              '        }\n'
              '\n'
              '        private void WriteJson(StreamWriter stream)\n'
              '        {\n'
              '            var d = new JsonData();\n'
              '            d["ToolbarType"] = type.ToString();\n'
              '\n'
              '            var ss = new JsonData();\n'
              '            ss.SetJsonType(JsonType.Array);\n'
              '            d["Slots"] = ss;\n'
              '\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                var s = new JsonData();\n'
              '                s["Index"] = slot.Index;\n'
              '                s["Page"] = slot.Page;\n'
              '                s["Number"] = slot.Number;\n'
              '                s["IsEmpty"] = slot.IsEmpty;\n'
              '\n'
              '                if (slot.Builder == null)\n'
              '                {\n'
              '                    s["Type"] = "";\n'
              '                    s["Name"] = "";\n'
              '                }\n'
              '                else\n'
              '                {\n'
              '                    s["Type"] = slot.Builder.GetType().Name;\n'
              '                    switch (slot.Builder)\n'
              '                    {\n'
              '                        case '
              'MyObjectBuilder_ToolbarItemDefinition itemBuilder:\n'
              '                            s["Name"] = '
              'itemBuilder.DefinitionId.ToString();\n'
              '                            break;\n'
              '\n'
              '                        case '
              'MyObjectBuilder_ToolbarItemTerminalGroup groupBuilder:\n'
              '                            s["Name"] = '
              'groupBuilder.GroupName;\n'
              '                            break;\n'
              '\n'
              '                        case '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder:\n'
              '                            if '
              '(MyEntities.TryGetEntityById(blockBuilder.BlockEntityId, out '
              'var block))\n'
              '                                s["Name"] = '
              'block.DisplayNameText;\n'
              '                            else\n'
              '                                s["Name"] = "?";\n'
              '                            break;\n'
              '\n'
              '                        default:\n'
              '                            s["Name"] = "??";\n'
              '                            break;\n'
              '                    }\n'
              '                }\n'
              '\n'
              '                ss.Add(s);\n'
              '            }\n'
              '\n'
              '            var writer = new JsonWriter\n'
              '            {\n'
              '                PrettyPrint = true,\n'
              '            };\n'
              '            d.ToJson(writer);\n'
              '            stream.Write(writer.ToString());\n'
              '        }\n'
              '\n'
              '        public void Set(MyToolbar toolbar)\n'
              '        {\n'
              '            var count = Math.Min(slots.Count, '
              'toolbar.ItemCount);\n'
              '            for (var index = 0; index < count; index++)\n'
              '                slots[index].Set(toolbar);\n'
              '        }\n'
              '\n'
              '        public void Merge(MyToolbar toolbar)\n'
              '        {\n'
              '            var count = Math.Min(slots.Count, '
              'toolbar.ItemCount);\n'
              '            for (var index = 0; index < count; index++)\n'
              '                slots[index].Merge(toolbar);\n'
              '        }\n'
              '\n'
              '        public void Dissociate(MyToolbar currentToolbar)\n'
              '        {\n'
              '            if (!(currentToolbar.Owner is MyTerminalBlock))\n'
              '                return;\n'
              '\n'
              '            var utf8 = Encoding.UTF8;\n'
              '            var sha1 = SHA1.Create();\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                switch (slot.Builder)\n'
              '                {\n'
              '                    case '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder:\n'
              '                        if '
              '(MyEntities.TryGetEntityById(blockBuilder.BlockEntityId, out '
              'var block))\n'
              '                            blockBuilder.BlockEntityId = '
              'CalculateDisplayNameTextChecksum(utf8, sha1, block);\n'
              '                        break;\n'
              '\n'
              '                    case '
              'MyObjectBuilder_ToolbarItemTerminalGroup groupBuilder:\n'
              '                        groupBuilder.BlockEntityId = 0;\n'
              '                        break;\n'
              '                }\n'
              '            }\n'
              '        }\n'
              '\n'
              '        public void Associate(MyToolbar currentToolbar)\n'
              '        {\n'
              '            if (!(currentToolbar.Owner is MyTerminalBlock '
              'terminalBlock))\n'
              '                return;\n'
              '\n'
              '            var physicalGroup = '
              'MyCubeGridGroups.Static.Physical.GetGroup(terminalBlock.CubeGrid);\n'
              '            if (physicalGroup == null)\n'
              '                return;\n'
              '\n'
              '            var blockSlots = new Dictionary<long, '
              'List<Slot>>();\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                switch (slot.Builder)\n'
              '                {\n'
              '                    case '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder:\n'
              '                        if '
              '(blockSlots.TryGetValue(blockBuilder.BlockEntityId, out var '
              'blockSlotList))\n'
              '                            blockSlotList.Add(slot);\n'
              '                        else\n'
              '                            '
              'blockSlots[blockBuilder.BlockEntityId] = new List<Slot> { slot '
              '};\n'
              '                        break;\n'
              '                }\n'
              '            }\n'
              '\n'
              '            var utf8 = Encoding.UTF8;\n'
              '            var sha1 = SHA1.Create();\n'
              '            foreach (var physicalNode in physicalGroup.Nodes)\n'
              '            {\n'
              '                var grid = physicalNode.NodeData;\n'
              '                foreach (var block in '
              'grid.GetFatBlocks<MyTerminalBlock>())\n'
              '                {\n'
              '                    var checksum = '
              'CalculateDisplayNameTextChecksum(utf8, sha1, block);\n'
              '                    if (blockSlots.TryGetValue(checksum, out '
              'var blockSlotList))\n'
              '                    {\n'
              '                        foreach (var slot in blockSlotList)\n'
              '                        {\n'
              '                            if (slot.Builder is '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder)\n'
              '                                blockBuilder.BlockEntityId = '
              'block.EntityId;\n'
              '                        }\n'
              '                    }\n'
              '                }\n'
              '            }\n'
              '\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                if (slot.Builder is '
              'MyObjectBuilder_ToolbarItemTerminalGroup groupBuilder)\n'
              '                    groupBuilder.BlockEntityId = '
              'terminalBlock.EntityId;\n'
              '            }\n'
              '        }\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        private static long '
              'CalculateDisplayNameTextChecksum(Encoding encoding, '
              'HashAlgorithm hashAlgorithm, MyEntity block)\n'
              '        {\n'
              '            var sha1Hash = '
              'hashAlgorithm.ComputeHash(encoding.GetBytes(block.DisplayNameText));\n'
              '            var checksum = '
              '-Math.Abs(BitConverter.ToInt64(sha1Hash, 0));\n'
              '            return checksum;\n'
              '        }\n'
              '    }')

Fragment(uuid='dd9006c8-9cf9-4b12-9861-6dd577b320ea',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=20,
         depth=5,
         type='variable',
         name='MyToolbarType',
         text='MyToolbarType type')

Fragment(uuid='49c7b2a7-4017-441a-bbba-a57f83cad63d',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=23,
         depth=4,
         type='method',
         name='Toolbar',
         text='public Toolbar(MyToolbar toolbar)\n'
              '        {\n'
              '            if (toolbar == null)\n'
              '                return;\n'
              '\n'
              '            type = toolbar.ToolbarType;\n'
              '\n'
              '            for (var index = 0; index < toolbar.ItemCount; '
              'index++)\n'
              '                slots.Add(new Slot(index, '
              'toolbar.GetItemAtIndex(index)));\n'
              '        }')

Fragment(uuid='2e4e9029-ecee-478a-8c5b-8fcae6ebf212',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=29,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            for (var index = 0; index < toolbar.ItemCount; '
              'index++)\n'
              '                slots.Add(new Slot(index, '
              'toolbar.GetItemAtIndex(index)));\n'
              '        }\n'
              '\n'
              '        private Toolbar(MyObjectBuilder_Toolbar '
              'toolbarBuilder)\n'
              '        {\n'
              '            if (toolbarBuilder == null)\n'
              '                return;\n'
              '\n'
              '            type = toolbarBuilder.ToolbarType;\n')

Fragment(uuid='ccb5b31c-5b48-4a7a-84b4-750e5ec5044f',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=34,
         depth=4,
         type='method',
         name='Toolbar',
         text='private Toolbar(MyObjectBuilder_Toolbar toolbarBuilder)\n'
              '        {\n'
              '            if (toolbarBuilder == null)\n'
              '                return;\n'
              '\n'
              '            type = toolbarBuilder.ToolbarType;\n'
              '\n'
              '            for (var index = 0; index < '
              'toolbarBuilder.Slots.Count; index++)\n'
              '            {\n'
              '                slots.Add(new Slot(index, '
              'toolbarBuilder.Slots[index].Data));\n'
              '            }\n'
              '        }')

Fragment(uuid='ef1cb7ba-70f9-4475-90c2-f0e1c074dcf3',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=40,
         depth=0,
         type='module',
         name='',
         text='\n'
              '            for (var index = 0; index < '
              'toolbarBuilder.Slots.Count; index++)\n'
              '            {\n'
              '                slots.Add(new Slot(index, '
              'toolbarBuilder.Slots[index].Data));\n'
              '            }\n'
              '        }\n'
              '\n'
              '        public void Clear()\n'
              '        {\n'
              '            slots.Clear();\n'
              '        }\n'
              '\n'
              '        public static Toolbar Read(string path)\n'
              '        {\n')

Fragment(uuid='740c2899-4851-416d-a422-1e31d566aadc',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=47,
         depth=4,
         type='method',
         name='Clear',
         text='public void Clear()\n'
              '        {\n'
              '            slots.Clear();\n'
              '        }')

Fragment(uuid='93620550-d64c-4770-958b-9ac31a40d8b3',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=52,
         depth=4,
         type='method',
         name='Read',
         text='public static Toolbar Read(string path)\n'
              '        {\n'
              '            using (var stream = new StreamReader(path))\n'
              '                return Read(stream);\n'
              '        }')

Fragment(uuid='cff90824-2741-44d3-9dcf-382b77987940',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=52,
         depth=4,
         type='method',
         name='Toolbar',
         text='public static Toolbar Read(string path)\n'
              '        {\n'
              '            using (var stream = new StreamReader(path))\n'
              '                return Read(stream);\n'
              '        }')

Fragment(uuid='4e1674ce-8344-463a-8a38-ca615344af54',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=54,
         depth=0,
         type='module',
         name='',
         text='            using (var stream = new StreamReader(path))\n'
              '                return Read(stream);\n'
              '        }\n'
              '\n'
              '        private static Toolbar Read(StreamReader stream)\n'
              '        {\n'
              '            '
              'MyObjectBuilderSerializer.DeserializeXML<MyObjectBuilder_Toolbar>(stream.BaseStream, '
              'out var toolbarBuilder);\n'
              '            return new Toolbar(toolbarBuilder);\n'
              '        }\n'
              '\n'
              '        public void Write(string path)\n'
              '        {\n')

Fragment(uuid='31b59695-b905-4e4c-94db-2e669fdf6d1f',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=58,
         depth=4,
         type='method',
         name='Read',
         text='private static Toolbar Read(StreamReader stream)\n'
              '        {\n'
              '            '
              'MyObjectBuilderSerializer.DeserializeXML<MyObjectBuilder_Toolbar>(stream.BaseStream, '
              'out var toolbarBuilder);\n'
              '            return new Toolbar(toolbarBuilder);\n'
              '        }')

Fragment(uuid='a6bd957e-eddd-4172-a952-6bbba6301da8',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=58,
         depth=4,
         type='method',
         name='Toolbar',
         text='private static Toolbar Read(StreamReader stream)\n'
              '        {\n'
              '            '
              'MyObjectBuilderSerializer.DeserializeXML<MyObjectBuilder_Toolbar>(stream.BaseStream, '
              'out var toolbarBuilder);\n'
              '            return new Toolbar(toolbarBuilder);\n'
              '        }')

Fragment(uuid='e77a567c-e98d-4d5f-9c5d-841cdfda8df2',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=64,
         depth=4,
         type='method',
         name='Write',
         text='public void Write(string path)\n'
              '        {\n'
              '            using (var stream = new StreamWriter(path))\n'
              '                Write(stream);\n'
              '        }')

Fragment(uuid='781b8548-4ef4-4aae-9cfb-666f081b793f',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=66,
         depth=0,
         type='module',
         name='',
         text='            using (var stream = new StreamWriter(path))\n'
              '                Write(stream);\n'
              '        }\n'
              '\n'
              '        private void Write(StreamWriter stream)\n'
              '        {\n'
              '            var builder = new MyObjectBuilder_Toolbar\n'
              '            {\n'
              '                ToolbarType = type\n'
              '            };\n'
              '\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                builder.Slots.Add(new '
              'MyObjectBuilder_Toolbar.Slot\n'
              '                {\n'
              '                    Index = slot.Index,\n'
              '                    Data = slot.Builder\n'
              '                });\n'
              '            }\n'
              '\n'
              '            '
              'MyObjectBuilderSerializer.SerializeXML(stream.BaseStream, '
              'builder);\n'
              '        }\n'
              '\n'
              '        public void WriteJson(string path)\n'
              '        {\n')

Fragment(uuid='bf6cae19-ce5a-4cab-9b5d-ffe04d170bc5',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=70,
         depth=4,
         type='method',
         name='Write',
         text='private void Write(StreamWriter stream)\n'
              '        {\n'
              '            var builder = new MyObjectBuilder_Toolbar\n'
              '            {\n'
              '                ToolbarType = type\n'
              '            };\n'
              '\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                builder.Slots.Add(new '
              'MyObjectBuilder_Toolbar.Slot\n'
              '                {\n'
              '                    Index = slot.Index,\n'
              '                    Data = slot.Builder\n'
              '                });\n'
              '            }\n'
              '\n'
              '            '
              'MyObjectBuilderSerializer.SerializeXML(stream.BaseStream, '
              'builder);\n'
              '        }')

Fragment(uuid='49ab00c8-1d2d-41c2-ad11-33b60c7db8ea',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=89,
         depth=4,
         type='method',
         name='WriteJson',
         text='public void WriteJson(string path)\n'
              '        {\n'
              '            using (var stream = new StreamWriter(path))\n'
              '                WriteJson(stream);\n'
              '        }')

Fragment(uuid='ae2c754e-f27f-4f8b-a8b5-2a9f54646c5a',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=91,
         depth=0,
         type='module',
         name='',
         text='            using (var stream = new StreamWriter(path))\n'
              '                WriteJson(stream);\n'
              '        }\n'
              '\n'
              '        private void WriteJson(StreamWriter stream)\n'
              '        {\n'
              '            var d = new JsonData();\n'
              '            d["ToolbarType"] = type.ToString();\n'
              '\n'
              '            var ss = new JsonData();\n'
              '            ss.SetJsonType(JsonType.Array);\n'
              '            d["Slots"] = ss;\n'
              '\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                var s = new JsonData();\n'
              '                s["Index"] = slot.Index;\n'
              '                s["Page"] = slot.Page;\n'
              '                s["Number"] = slot.Number;\n'
              '                s["IsEmpty"] = slot.IsEmpty;\n')

Fragment(uuid='ac305c19-7a0e-4977-afe9-848b259eb88f',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=95,
         depth=4,
         type='method',
         name='WriteJson',
         text='private void WriteJson(StreamWriter stream)\n'
              '        {\n'
              '            var d = new JsonData();\n'
              '            d["ToolbarType"] = type.ToString();\n'
              '\n'
              '            var ss = new JsonData();\n'
              '            ss.SetJsonType(JsonType.Array);\n'
              '            d["Slots"] = ss;\n'
              '\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                var s = new JsonData();\n'
              '                s["Index"] = slot.Index;\n'
              '                s["Page"] = slot.Page;\n'
              '                s["Number"] = slot.Number;\n'
              '                s["IsEmpty"] = slot.IsEmpty;\n'
              '\n'
              '                if (slot.Builder == null)\n'
              '                {\n'
              '                    s["Type"] = "";\n'
              '                    s["Name"] = "";\n'
              '                }\n'
              '                else\n'
              '                {\n'
              '                    s["Type"] = slot.Builder.GetType().Name;\n'
              '                    switch (slot.Builder)\n'
              '                    {\n'
              '                        case '
              'MyObjectBuilder_ToolbarItemDefinition itemBuilder:\n'
              '                            s["Name"] = '
              'itemBuilder.DefinitionId.ToString();\n'
              '                            break;\n'
              '\n'
              '                        case '
              'MyObjectBuilder_ToolbarItemTerminalGroup groupBuilder:\n'
              '                            s["Name"] = '
              'groupBuilder.GroupName;\n'
              '                            break;\n'
              '\n'
              '                        case '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder:\n'
              '                            if '
              '(MyEntities.TryGetEntityById(blockBuilder.BlockEntityId, out '
              'var block))\n'
              '                                s["Name"] = '
              'block.DisplayNameText;\n'
              '                            else\n'
              '                                s["Name"] = "?";\n'
              '                            break;\n'
              '\n'
              '                        default:\n'
              '                            s["Name"] = "??";\n'
              '                            break;\n'
              '                    }\n'
              '                }\n'
              '\n'
              '                ss.Add(s);\n'
              '            }\n'
              '\n'
              '            var writer = new JsonWriter\n'
              '            {\n'
              '                PrettyPrint = true,\n'
              '            };\n'
              '            d.ToJson(writer);\n'
              '            stream.Write(writer.ToString());\n'
              '        }')

Fragment(uuid='925cfa5d-7288-451b-9a3c-5a321d16bc85',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=111,
         depth=0,
         type='module',
         name='',
         text='\n'
              '                if (slot.Builder == null)\n'
              '                {\n'
              '                    s["Type"] = "";\n'
              '                    s["Name"] = "";\n'
              '                }\n'
              '                else\n'
              '                {\n'
              '                    s["Type"] = slot.Builder.GetType().Name;\n'
              '                    switch (slot.Builder)\n'
              '                    {\n'
              '                        case '
              'MyObjectBuilder_ToolbarItemDefinition itemBuilder:\n'
              '                            s["Name"] = '
              'itemBuilder.DefinitionId.ToString();\n'
              '                            break;\n'
              '\n'
              '                        case '
              'MyObjectBuilder_ToolbarItemTerminalGroup groupBuilder:\n'
              '                            s["Name"] = '
              'groupBuilder.GroupName;\n'
              '                            break;\n'
              '\n'
              '                        case '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder:\n')

Fragment(uuid='ffdca7e2-0933-4e6e-b2e5-a0994a72cbae',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=131,
         depth=0,
         type='module',
         name='',
         text='                            if '
              '(MyEntities.TryGetEntityById(blockBuilder.BlockEntityId, out '
              'var block))\n'
              '                                s["Name"] = '
              'block.DisplayNameText;\n'
              '                            else\n'
              '                                s["Name"] = "?";\n'
              '                            break;\n'
              '\n'
              '                        default:\n'
              '                            s["Name"] = "??";\n'
              '                            break;\n'
              '                    }\n'
              '                }\n'
              '\n'
              '                ss.Add(s);\n'
              '            }\n'
              '\n'
              '            var writer = new JsonWriter\n'
              '            {\n'
              '                PrettyPrint = true,\n'
              '            };\n'
              '            d.ToJson(writer);\n'
              '            stream.Write(writer.ToString());\n'
              '        }\n'
              '\n'
              '        public void Set(MyToolbar toolbar)\n'
              '        {\n'
              '            var count = Math.Min(slots.Count, '
              'toolbar.ItemCount);\n')

Fragment(uuid='4a3882fd-d7d5-4595-b192-9f5daf3d64b4',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=154,
         depth=4,
         type='method',
         name='Set',
         text='public void Set(MyToolbar toolbar)\n'
              '        {\n'
              '            var count = Math.Min(slots.Count, '
              'toolbar.ItemCount);\n'
              '            for (var index = 0; index < count; index++)\n'
              '                slots[index].Set(toolbar);\n'
              '        }')

Fragment(uuid='2d97707c-7434-4bae-b50c-37d03eef600b',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=157,
         depth=0,
         type='module',
         name='',
         text='            for (var index = 0; index < count; index++)\n'
              '                slots[index].Set(toolbar);\n'
              '        }\n'
              '\n'
              '        public void Merge(MyToolbar toolbar)\n'
              '        {\n'
              '            var count = Math.Min(slots.Count, '
              'toolbar.ItemCount);\n')

Fragment(uuid='4d5cad04-513a-4c0d-aa76-924163f6746a',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=161,
         depth=4,
         type='method',
         name='Merge',
         text='public void Merge(MyToolbar toolbar)\n'
              '        {\n'
              '            var count = Math.Min(slots.Count, '
              'toolbar.ItemCount);\n'
              '            for (var index = 0; index < count; index++)\n'
              '                slots[index].Merge(toolbar);\n'
              '        }')

Fragment(uuid='444be8a4-d992-44ba-9c8f-34e38e4e8fcc',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=164,
         depth=0,
         type='module',
         name='',
         text='            for (var index = 0; index < count; index++)\n'
              '                slots[index].Merge(toolbar);\n'
              '        }\n'
              '\n'
              '        public void Dissociate(MyToolbar currentToolbar)\n'
              '        {\n')

Fragment(uuid='f9dc5985-3799-4d30-8dfd-1ab0329d1a96',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=168,
         depth=4,
         type='method',
         name='Dissociate',
         text='public void Dissociate(MyToolbar currentToolbar)\n'
              '        {\n'
              '            if (!(currentToolbar.Owner is MyTerminalBlock))\n'
              '                return;\n'
              '\n'
              '            var utf8 = Encoding.UTF8;\n'
              '            var sha1 = SHA1.Create();\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                switch (slot.Builder)\n'
              '                {\n'
              '                    case '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder:\n'
              '                        if '
              '(MyEntities.TryGetEntityById(blockBuilder.BlockEntityId, out '
              'var block))\n'
              '                            blockBuilder.BlockEntityId = '
              'CalculateDisplayNameTextChecksum(utf8, sha1, block);\n'
              '                        break;\n'
              '\n'
              '                    case '
              'MyObjectBuilder_ToolbarItemTerminalGroup groupBuilder:\n'
              '                        groupBuilder.BlockEntityId = 0;\n'
              '                        break;\n'
              '                }\n'
              '            }\n'
              '        }')

Fragment(uuid='accc57a7-0d42-4435-a0ea-e72a2779d431',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=170,
         depth=0,
         type='module',
         name='',
         text='            if (!(currentToolbar.Owner is MyTerminalBlock))\n'
              '                return;\n'
              '\n'
              '            var utf8 = Encoding.UTF8;\n'
              '            var sha1 = SHA1.Create();\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                switch (slot.Builder)\n'
              '                {\n'
              '                    case '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder:\n')

Fragment(uuid='7e0c9507-4886-414d-9f5e-a54292191396',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=180,
         depth=0,
         type='module',
         name='',
         text='                        if '
              '(MyEntities.TryGetEntityById(blockBuilder.BlockEntityId, out '
              'var block))\n'
              '                            blockBuilder.BlockEntityId = '
              'CalculateDisplayNameTextChecksum(utf8, sha1, block);\n'
              '                        break;\n'
              '\n'
              '                    case '
              'MyObjectBuilder_ToolbarItemTerminalGroup groupBuilder:\n'
              '                        groupBuilder.BlockEntityId = 0;\n'
              '                        break;\n'
              '                }\n'
              '            }\n'
              '        }\n'
              '\n'
              '        public void Associate(MyToolbar currentToolbar)\n'
              '        {\n')

Fragment(uuid='dedc677f-64f0-4179-8ed3-7318983988d1',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=191,
         depth=4,
         type='method',
         name='Associate',
         text='public void Associate(MyToolbar currentToolbar)\n'
              '        {\n'
              '            if (!(currentToolbar.Owner is MyTerminalBlock '
              'terminalBlock))\n'
              '                return;\n'
              '\n'
              '            var physicalGroup = '
              'MyCubeGridGroups.Static.Physical.GetGroup(terminalBlock.CubeGrid);\n'
              '            if (physicalGroup == null)\n'
              '                return;\n'
              '\n'
              '            var blockSlots = new Dictionary<long, '
              'List<Slot>>();\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                switch (slot.Builder)\n'
              '                {\n'
              '                    case '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder:\n'
              '                        if '
              '(blockSlots.TryGetValue(blockBuilder.BlockEntityId, out var '
              'blockSlotList))\n'
              '                            blockSlotList.Add(slot);\n'
              '                        else\n'
              '                            '
              'blockSlots[blockBuilder.BlockEntityId] = new List<Slot> { slot '
              '};\n'
              '                        break;\n'
              '                }\n'
              '            }\n'
              '\n'
              '            var utf8 = Encoding.UTF8;\n'
              '            var sha1 = SHA1.Create();\n'
              '            foreach (var physicalNode in physicalGroup.Nodes)\n'
              '            {\n'
              '                var grid = physicalNode.NodeData;\n'
              '                foreach (var block in '
              'grid.GetFatBlocks<MyTerminalBlock>())\n'
              '                {\n'
              '                    var checksum = '
              'CalculateDisplayNameTextChecksum(utf8, sha1, block);\n'
              '                    if (blockSlots.TryGetValue(checksum, out '
              'var blockSlotList))\n'
              '                    {\n'
              '                        foreach (var slot in blockSlotList)\n'
              '                        {\n'
              '                            if (slot.Builder is '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder)\n'
              '                                blockBuilder.BlockEntityId = '
              'block.EntityId;\n'
              '                        }\n'
              '                    }\n'
              '                }\n'
              '            }\n'
              '\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                if (slot.Builder is '
              'MyObjectBuilder_ToolbarItemTerminalGroup groupBuilder)\n'
              '                    groupBuilder.BlockEntityId = '
              'terminalBlock.EntityId;\n'
              '            }\n'
              '        }')

Fragment(uuid='20e5315a-0977-4174-a8f1-6725730aaa8e',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=193,
         depth=0,
         type='module',
         name='',
         text='            if (!(currentToolbar.Owner is MyTerminalBlock '
              'terminalBlock))\n'
              '                return;\n'
              '\n'
              '            var physicalGroup = '
              'MyCubeGridGroups.Static.Physical.GetGroup(terminalBlock.CubeGrid);\n')

Fragment(uuid='0292a355-b8eb-4f4f-8240-3852e0e199bc',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=197,
         depth=0,
         type='module',
         name='',
         text='            if (physicalGroup == null)\n'
              '                return;\n'
              '\n'
              '            var blockSlots = new Dictionary<long, '
              'List<Slot>>();\n'
              '            foreach (var slot in slots)\n'
              '            {\n'
              '                switch (slot.Builder)\n'
              '                {\n'
              '                    case '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder:\n')

Fragment(uuid='42e85018-3bb2-41ce-8af8-26c8cdce66f6',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=206,
         depth=0,
         type='module',
         name='',
         text='                        if '
              '(blockSlots.TryGetValue(blockBuilder.BlockEntityId, out var '
              'blockSlotList))\n'
              '                            blockSlotList.Add(slot);\n'
              '                        else\n'
              '                            '
              'blockSlots[blockBuilder.BlockEntityId] = new List<Slot> { slot '
              '};\n'
              '                        break;\n'
              '                }\n'
              '            }\n'
              '\n'
              '            var utf8 = Encoding.UTF8;\n'
              '            var sha1 = SHA1.Create();\n'
              '            foreach (var physicalNode in physicalGroup.Nodes)\n'
              '            {\n'
              '                var grid = physicalNode.NodeData;\n'
              '                foreach (var block in '
              'grid.GetFatBlocks<MyTerminalBlock>())\n'
              '                {\n'
              '                    var checksum = '
              'CalculateDisplayNameTextChecksum(utf8, sha1, block);\n')

Fragment(uuid='d467a8c0-7807-45b3-a9cc-6ec137de334e',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=222,
         depth=0,
         type='module',
         name='',
         text='                    if (blockSlots.TryGetValue(checksum, out '
              'var blockSlotList))\n'
              '                    {\n'
              '                        foreach (var slot in blockSlotList)\n'
              '                        {\n')

Fragment(uuid='ebfb781a-bec0-4fd6-bc95-04cb12663c06',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=226,
         depth=0,
         type='module',
         name='',
         text='                            if (slot.Builder is '
              'MyObjectBuilder_ToolbarItemTerminalBlock blockBuilder)\n'
              '                                blockBuilder.BlockEntityId = '
              'block.EntityId;\n'
              '                        }\n'
              '                    }\n'
              '                }\n'
              '            }\n'
              '\n'
              '            foreach (var slot in slots)\n'
              '            {\n')

Fragment(uuid='9ed8a99e-3eaf-45bd-b828-7f676e14a008',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=235,
         depth=0,
         type='module',
         name='',
         text='                if (slot.Builder is '
              'MyObjectBuilder_ToolbarItemTerminalGroup groupBuilder)\n'
              '                    groupBuilder.BlockEntityId = '
              'terminalBlock.EntityId;\n'
              '            }\n'
              '        }\n'
              '\n'
              '        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        private static long '
              'CalculateDisplayNameTextChecksum(Encoding encoding, '
              'HashAlgorithm hashAlgorithm, MyEntity block)\n'
              '        {\n'
              '            var sha1Hash = '
              'hashAlgorithm.ComputeHash(encoding.GetBytes(block.DisplayNameText));\n'
              '            var checksum = '
              '-Math.Abs(BitConverter.ToInt64(sha1Hash, 0));\n'
              '            return checksum;\n'
              '        }\n'
              '    }\n'
              '}')

Fragment(uuid='01542c81-ce10-4e3f-93c7-a98872be6a37',
         path='/ToolbarManager/Logic/Toolbar.cs',
         lineno=240,
         depth=4,
         type='method',
         name='CalculateDisplayNameTextChecksum',
         text='[MethodImpl(MethodImplOptions.AggressiveInlining)]\n'
              '        private static long '
              'CalculateDisplayNameTextChecksum(Encoding encoding, '
              'HashAlgorithm hashAlgorithm, MyEntity block)\n'
              '        {\n'
              '            var sha1Hash = '
              'hashAlgorithm.ComputeHash(encoding.GetBytes(block.DisplayNameText));\n'
              '            var checksum = '
              '-Math.Abs(BitConverter.ToInt64(sha1Hash, 0));\n'
              '            return checksum;\n'
              '        }')

Fragment(uuid='02b9493d-1c2f-4d83-9a9e-c936f0f8e921',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='using System.Collections.Generic;\n'
              'using System.Diagnostics.CodeAnalysis;\n'
              'using System.Text;\n'
              'using HarmonyLib;\n'
              'using Sandbox.Game.Entities.Character;\n'
              'using Sandbox.Game.Gui;\n'
              'using Sandbox.Game.World;\n'
              'using Sandbox.Graphics.GUI;\n'
              'using ToolbarManager.Gui;\n'
              'using VRage.Input;\n')

Fragment(uuid='a590cf09-06d9-4896-a912-6c452b5a0799',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs\n'
              '  Classes: MyGuiScreenGamePlayPatch\n'
              '  Methods: GetPressedKeys HandleUnhandledInputPrefix '
              'OpenCubeBuilder\n'
              '  Variables: StringBuilder\n'
              '  Usages: ActiveGameplayScreen ActiveGameplayScreen AddScreen '
              'Append Character Clear CodeAnalysis Collections '
              'ControlledEntity CreateScreen CustomToolbarConfigScreen '
              'CustomToolbarConfigScreen Diagnostics Entities GUI Game Game '
              'Game Generic GetKeyName GetPressedKeys Graphics Gui Gui '
              'HandleUnhandledInput HarmonyLib HarmonyPatch HarmonyPatch '
              'HarmonyPrefix Input IsNewKeyPressed Length List List '
              'MatchingKeys MatchingKeys MatchingKeys MyCharacter MyGuiSandbox '
              'MyGuiSandbox MyGuiScreenGamePlay MyGuiScreenGamePlay '
              'MyGuiScreenGamePlay MyGuiScreenGamePlay MyInput MyInput MyKeys '
              'MyKeys MyKeys MySession OemPipe OpenCubeBuilder Patches '
              'PressedKeys PressedKeys PressedKeys Sandbox Sandbox Sandbox '
              'Sandbox SetSearchText Static Static Static StringBuilder '
              'SuppressMessage System System System Text ToolbarManager '
              'ToolbarManager VRage World dialog dialog dialog dialog key key '
              'myInput myInput myInput myInput myInput name name name nameof '
              'searchText searchText\n')

Fragment(uuid='fd938633-824a-4dca-bb68-1b3e083f7438',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=11,
         depth=0,
         type='module',
         name='',
         text='\n'
              'namespace ToolbarManager.Patches\n'
              '{\n'
              '    [HarmonyPatch(typeof(MyGuiScreenGamePlay))]\n'
              '    [SuppressMessage("ReSharper", "UnusedMember.Global")]\n'
              '    // ReSharper disable once UnusedType.Global\n'
              '    public static class MyGuiScreenGamePlayPatch\n'
              '    {\n'
              '        private static readonly List<MyKeys> PressedKeys = new '
              'List<MyKeys>();\n'
              '\n'
              '        private static readonly StringBuilder MatchingKeys = '
              'new StringBuilder();\n'
              '        // private static readonly ListDialog ListDialog = new '
              'ListDialog();\n'
              '\n'
              '        [HarmonyPrefix]\n'
              '        '
              '[HarmonyPatch(nameof(MyGuiScreenGamePlay.HandleUnhandledInput))]\n'
              '        public static bool HandleUnhandledInputPrefix()\n'
              '        {\n')

Fragment(uuid='f286f4e5-05d0-4290-94a7-42202aa4e246',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=14,
         depth=2,
         type='class',
         name='MyGuiScreenGamePlayPatch',
         text='[HarmonyPatch(typeof(MyGuiScreenGamePlay))]\n'
              '    [SuppressMessage("ReSharper", "UnusedMember.Global")]\n'
              '    // ReSharper disable once UnusedType.Global\n'
              '    public static class MyGuiScreenGamePlayPatch\n'
              '    {\n'
              '        private static readonly List<MyKeys> PressedKeys = new '
              'List<MyKeys>();\n'
              '\n'
              '        private static readonly StringBuilder MatchingKeys = '
              'new StringBuilder();\n'
              '        // private static readonly ListDialog ListDialog = new '
              'ListDialog();\n'
              '\n'
              '        [HarmonyPrefix]\n'
              '        '
              '[HarmonyPatch(nameof(MyGuiScreenGamePlay.HandleUnhandledInput))]\n'
              '        public static bool HandleUnhandledInputPrefix()\n'
              '        {\n'
              '            if (MyGuiScreenGamePlay.ActiveGameplayScreen != '
              'null || !(MySession.Static.ControlledEntity is MyCharacter))\n'
              '                return true;\n'
              '\n'
              '            /* Disabled due to Issue #12: Conflicting keys '
              'Ctrl+Shift+C, Ctrl+Shift+X and Ctrl+Shift+B\n'
              '            if (myInput.IsAnyShiftKeyPressed() && '
              'myInput.IsAnyCtrlKeyPressed())\n'
              '            {\n'
              '                GetPressedKeys();\n'
              '                if (MatchingKeys.Length != 0)\n'
              '                {\n'
              '                    OpenCubeBuilder(MatchingKeys.ToString());\n'
              '                    return false;\n'
              '                }\n'
              '            }\n'
              '            */\n'
              '            \n'
              '            var myInput = MyInput.Static;\n'
              '            if (myInput.IsNewKeyPressed(MyKeys.OemPipe))\n'
              '            {\n'
              '                OpenCubeBuilder("");\n'
              '                return false;\n'
              '            }\n'
              '\n'
              '            return true;\n'
              '        }\n'
              '\n'
              '        private static void OpenCubeBuilder(string searchText)\n'
              '        {\n'
              '            if '
              '(!(MyGuiSandbox.CreateScreen(typeof(CustomToolbarConfigScreen), '
              '0, null, null) is CustomToolbarConfigScreen dialog))\n'
              '                return;\n'
              '\n'
              '            MyGuiScreenGamePlay.ActiveGameplayScreen = dialog;\n'
              '            MyGuiSandbox.AddScreen(dialog);\n'
              '\n'
              '            dialog.SetSearchText(searchText);\n'
              '        }\n'
              '\n'
              '        private static void GetPressedKeys()\n'
              '        {\n'
              '            MatchingKeys.Clear();\n'
              '\n'
              '            var myInput = MyInput.Static;\n'
              '            myInput.GetPressedKeys(PressedKeys);\n'
              '            foreach (var key in PressedKeys)\n'
              '            {\n'
              '                var name = myInput.GetKeyName(key);\n'
              '                if (name.Length != 1)\n'
              '                    continue;\n'
              '\n'
              '                var c = name[0];\n'
              "                if (c >= 'A' && c <= 'Z')\n"
              '                    MatchingKeys.Append(c);\n'
              '            }\n'
              '        }\n'
              '    }')

Fragment(uuid='998ae34e-ca09-4c80-b93a-20dd1e85a210',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=21,
         depth=5,
         type='variable',
         name='StringBuilder',
         text='StringBuilder MatchingKeys = new StringBuilder()')

Fragment(uuid='61d24124-3382-46e8-a1b1-28f28c6667c4',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=24,
         depth=4,
         type='method',
         name='HandleUnhandledInputPrefix',
         text='[HarmonyPrefix]\n'
              '        '
              '[HarmonyPatch(nameof(MyGuiScreenGamePlay.HandleUnhandledInput))]\n'
              '        public static bool HandleUnhandledInputPrefix()\n'
              '        {\n'
              '            if (MyGuiScreenGamePlay.ActiveGameplayScreen != '
              'null || !(MySession.Static.ControlledEntity is MyCharacter))\n'
              '                return true;\n'
              '\n'
              '            /* Disabled due to Issue #12: Conflicting keys '
              'Ctrl+Shift+C, Ctrl+Shift+X and Ctrl+Shift+B\n'
              '            if (myInput.IsAnyShiftKeyPressed() && '
              'myInput.IsAnyCtrlKeyPressed())\n'
              '            {\n'
              '                GetPressedKeys();\n'
              '                if (MatchingKeys.Length != 0)\n'
              '                {\n'
              '                    OpenCubeBuilder(MatchingKeys.ToString());\n'
              '                    return false;\n'
              '                }\n'
              '            }\n'
              '            */\n'
              '            \n'
              '            var myInput = MyInput.Static;\n'
              '            if (myInput.IsNewKeyPressed(MyKeys.OemPipe))\n'
              '            {\n'
              '                OpenCubeBuilder("");\n'
              '                return false;\n'
              '            }\n'
              '\n'
              '            return true;\n'
              '        }')

Fragment(uuid='d566df8c-5db5-4fc5-b0d5-d5c22cfd7f9b',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=28,
         depth=0,
         type='module',
         name='',
         text='            if (MyGuiScreenGamePlay.ActiveGameplayScreen != '
              'null || !(MySession.Static.ControlledEntity is MyCharacter))\n'
              '                return true;\n'
              '\n'
              '            /* Disabled due to Issue #12: Conflicting keys '
              'Ctrl+Shift+C, Ctrl+Shift+X and Ctrl+Shift+B\n')

Fragment(uuid='8191c33b-9e95-407e-9639-3e52061af898',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=32,
         depth=0,
         type='module',
         name='',
         text='            if (myInput.IsAnyShiftKeyPressed() && '
              'myInput.IsAnyCtrlKeyPressed())\n'
              '            {\n'
              '                GetPressedKeys();\n')

Fragment(uuid='b4a25641-5c51-4ef9-a5ad-9e0ff18819a8',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=35,
         depth=0,
         type='module',
         name='',
         text='                if (MatchingKeys.Length != 0)\n'
              '                {\n'
              '                    OpenCubeBuilder(MatchingKeys.ToString());\n'
              '                    return false;\n'
              '                }\n'
              '            }\n'
              '            */\n'
              '            \n'
              '            var myInput = MyInput.Static;\n')

Fragment(uuid='809ac0a6-9ca4-4914-8ab8-206f9db12e44',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=44,
         depth=0,
         type='module',
         name='',
         text='            if (myInput.IsNewKeyPressed(MyKeys.OemPipe))\n'
              '            {\n'
              '                OpenCubeBuilder("");\n'
              '                return false;\n'
              '            }\n'
              '\n'
              '            return true;\n'
              '        }\n'
              '\n'
              '        private static void OpenCubeBuilder(string searchText)\n'
              '        {\n')

Fragment(uuid='86a4baca-5dca-4c81-9558-e4ca48c238ab',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=53,
         depth=4,
         type='method',
         name='OpenCubeBuilder',
         text='private static void OpenCubeBuilder(string searchText)\n'
              '        {\n'
              '            if '
              '(!(MyGuiSandbox.CreateScreen(typeof(CustomToolbarConfigScreen), '
              '0, null, null) is CustomToolbarConfigScreen dialog))\n'
              '                return;\n'
              '\n'
              '            MyGuiScreenGamePlay.ActiveGameplayScreen = dialog;\n'
              '            MyGuiSandbox.AddScreen(dialog);\n'
              '\n'
              '            dialog.SetSearchText(searchText);\n'
              '        }')

Fragment(uuid='2f7cc93d-f5c7-40d6-bb4c-75cbc1772ad5',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=55,
         depth=0,
         type='module',
         name='',
         text='            if '
              '(!(MyGuiSandbox.CreateScreen(typeof(CustomToolbarConfigScreen), '
              '0, null, null) is CustomToolbarConfigScreen dialog))\n'
              '                return;\n'
              '\n'
              '            MyGuiScreenGamePlay.ActiveGameplayScreen = dialog;\n'
              '            MyGuiSandbox.AddScreen(dialog);\n'
              '\n'
              '            dialog.SetSearchText(searchText);\n'
              '        }\n'
              '\n'
              '        private static void GetPressedKeys()\n'
              '        {\n'
              '            MatchingKeys.Clear();\n'
              '\n'
              '            var myInput = MyInput.Static;\n'
              '            myInput.GetPressedKeys(PressedKeys);\n'
              '            foreach (var key in PressedKeys)\n'
              '            {\n'
              '                var name = myInput.GetKeyName(key);\n')

Fragment(uuid='161d56eb-4b0b-40f8-ad15-076b4558602f',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=64,
         depth=4,
         type='method',
         name='GetPressedKeys',
         text='private static void GetPressedKeys()\n'
              '        {\n'
              '            MatchingKeys.Clear();\n'
              '\n'
              '            var myInput = MyInput.Static;\n'
              '            myInput.GetPressedKeys(PressedKeys);\n'
              '            foreach (var key in PressedKeys)\n'
              '            {\n'
              '                var name = myInput.GetKeyName(key);\n'
              '                if (name.Length != 1)\n'
              '                    continue;\n'
              '\n'
              '                var c = name[0];\n'
              "                if (c >= 'A' && c <= 'Z')\n"
              '                    MatchingKeys.Append(c);\n'
              '            }\n'
              '        }')

Fragment(uuid='0429530c-17bd-40b5-b09e-c161d2696ce8',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=73,
         depth=0,
         type='module',
         name='',
         text='                if (name.Length != 1)\n'
              '                    continue;\n'
              '\n'
              '                var c = name[0];\n')

Fragment(uuid='97869f9f-2994-43bd-9a39-9515a9e1dc64',
         path='/ToolbarManager/Patches/MyGuiScreenGamePlayPatch.cs',
         lineno=77,
         depth=0,
         type='module',
         name='',
         text="                if (c >= 'A' && c <= 'Z')\n"
              '                    MatchingKeys.Append(c);\n'
              '            }\n'
              '        }\n'
              '    }\n'
              '}')

Fragment(uuid='77e9ed73-e3f9-41f8-9106-7ac8fc41d2a3',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='using System;\n'
              'using HarmonyLib;\n'
              'using Sandbox.Game.Gui;\n'
              'using Sandbox.Game.Screens.Helpers;\n'
              'using Sandbox.Graphics.GUI;\n'
              'using VRage.Game;\n'
              'using VRageMath;\n'
              '\n'
              '// ReSharper disable UnusedMember.Local\n'
              '\n'
              '// ReSharper disable UnusedType.Global\n'
              '\n'
              '// ReSharper disable InconsistentNaming\n')

Fragment(uuid='cca2f102-3f59-4714-abbe-61b82406fd0f',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: '
              '/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs\n'
              '  Classes: MyGuiScreenToolbarConfigBasePatch\n'
              '  Methods: RecreateControlsPostfix createLoadButton '
              'createSaveButton\n'
              '  Variables: Action Action\n'
              '  Usages: Add Add ButtonClicked ButtonClicked CurrentToolbar '
              'Elements Elements Enabled Enabled GUI Game Game Game Graphics '
              'Gui HarmonyLib HarmonyPatch HarmonyPatch HarmonyPostfix Helpers '
              'Invoke Invoke MyGuiControlButton MyGuiControlButton '
              'MyGuiControlButtonStyleEnum MyGuiControlButtonStyleEnum '
              'MyGuiScreenToolbarConfigBase MyGuiScreenToolbarConfigBase '
              'MyGuiScreenToolbarConfigBase MyGuiScreenToolbarConfigBase '
              'MyGuiScreenToolbarConfigBase MyToolbarComponent MyToolbarType '
              'Name Name None OnLoadToolbar OnLoadToolbar OnSaveToolbar '
              'OnSaveToolbar Patches Position Position RecreateControls '
              'Sandbox Sandbox Sandbox Screens Small Small System Text Text '
              'ToolbarManager ToolbarType VRage VRageMath Vector2 Vector2 '
              'VisualStyle VisualStyle __instance __instance __instance button '
              'button button button button button button button '
              'createLoadButton createSaveButton enabled enabled enabled '
              'enabled enabled enabled enabled nameof screen screen screen '
              'screen toolbarType toolbarType\n')

Fragment(uuid='f59e3fb1-3334-42db-8e5c-48c66bf5cfce',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=14,
         depth=0,
         type='module',
         name='',
         text='\n'
              'namespace ToolbarManager.Patches\n'
              '{\n'
              '    [HarmonyPatch(typeof(MyGuiScreenToolbarConfigBase))]\n'
              '    public static class MyGuiScreenToolbarConfigBasePatch\n'
              '    {\n'
              '        public static event Action OnSaveToolbar;\n'
              '        public static event Action OnLoadToolbar;\n'
              '\n'
              '        [HarmonyPostfix]\n'
              '        '
              '[HarmonyPatch(nameof(MyGuiScreenToolbarConfigBase.RecreateControls))]\n'
              '        private static void '
              'RecreateControlsPostfix(MyGuiScreenToolbarConfigBase '
              '__instance)\n'
              ' ')

Fragment(uuid='4a0e22fb-e71c-48c0-90fe-bcec0311d032',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=17,
         depth=2,
         type='class',
         name='MyGuiScreenToolbarConfigBasePatch',
         text='[HarmonyPatch(typeof(MyGuiScreenToolbarConfigBase))]\n'
              '    public static class MyGuiScreenToolbarConfigBasePatch\n'
              '    {\n'
              '        public static event Action OnSaveToolbar;\n'
              '        public static event Action OnLoadToolbar;\n'
              '\n'
              '        [HarmonyPostfix]\n'
              '        '
              '[HarmonyPatch(nameof(MyGuiScreenToolbarConfigBase.RecreateControls))]\n'
              '        private static void '
              'RecreateControlsPostfix(MyGuiScreenToolbarConfigBase '
              '__instance)\n'
              '        {\n'
              '            var toolbarType = '
              'MyToolbarComponent.CurrentToolbar?.ToolbarType;\n'
              '            var enabled = toolbarType != null && toolbarType != '
              'MyToolbarType.None;\n'
              '        \n'
              '            createSaveButton(__instance, enabled);\n'
              '            createLoadButton(__instance, enabled);\n'
              '        }\n'
              '\n'
              '        private static void '
              'createSaveButton(MyGuiScreenToolbarConfigBase screen, bool '
              'enabled)\n'
              '        {\n'
              '            var button = new MyGuiControlButton\n'
              '            {\n'
              '                Text = "Save",\n'
              '                Name = "SaveToolbarButton",\n'
              '                VisualStyle = '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                Position = new Vector2(-0.425f, 0.41f)\n'
              '            };\n'
              '            button.ButtonClicked += _ => '
              'OnSaveToolbar?.Invoke();\n'
              '            button.Enabled = enabled;\n'
              '            screen.Elements.Add(button);\n'
              '        }\n'
              '\n'
              '        private static void '
              'createLoadButton(MyGuiScreenToolbarConfigBase screen, bool '
              'enabled)\n'
              '        {\n'
              '            var button = new MyGuiControlButton\n'
              '            {\n'
              '                Text = "Load",\n'
              '                Name = "LoadToolbarButton",\n'
              '                VisualStyle = '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                Position = new Vector2(-0.425f, 0.46f)\n'
              '            };\n'
              '            button.ButtonClicked += _ => '
              'OnLoadToolbar?.Invoke();\n'
              '            button.Enabled = enabled;\n'
              '            screen.Elements.Add(button);\n'
              '        }\n'
              '    }')

Fragment(uuid='e2283109-d5e8-4899-8a0a-34c24ec660b0',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=20,
         depth=5,
         type='variable',
         name='Action',
         text='Action OnSaveToolbar')

Fragment(uuid='9eac7acb-266f-47c7-87ce-bb49a66f7c45',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=21,
         depth=5,
         type='variable',
         name='Action',
         text='Action OnLoadToolbar')

Fragment(uuid='a52037d3-cc3f-4be9-a634-a5298107ac5c',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=23,
         depth=4,
         type='method',
         name='RecreateControlsPostfix',
         text='[HarmonyPostfix]\n'
              '        '
              '[HarmonyPatch(nameof(MyGuiScreenToolbarConfigBase.RecreateControls))]\n'
              '        private static void '
              'RecreateControlsPostfix(MyGuiScreenToolbarConfigBase '
              '__instance)\n'
              '        {\n'
              '            var toolbarType = '
              'MyToolbarComponent.CurrentToolbar?.ToolbarType;\n'
              '            var enabled = toolbarType != null && toolbarType != '
              'MyToolbarType.None;\n'
              '        \n'
              '            createSaveButton(__instance, enabled);\n'
              '            createLoadButton(__instance, enabled);\n'
              '        }')

Fragment(uuid='c59ab1ec-a70f-40ce-aabb-ba1d8b46e49f',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=26,
         depth=0,
         type='module',
         name='',
         text='       {\n'
              '            var toolbarType = '
              'MyToolbarComponent.CurrentToolbar?.ToolbarType;\n'
              '            var enabled = toolbarType != null && toolbarType != '
              'MyToolbarType.None;\n'
              '        \n'
              '            createSaveButton(__instance, enabled);\n'
              '            createLoadButton(__instance, enabled);\n'
              '        }\n'
              '\n'
              '        private static void '
              'createSaveButton(MyGuiScreenToolbarConfigBase screen, bool '
              'enabled)\n'
              '        {\n'
              '            var button = new MyGuiControlButton\n'
              '         ')

Fragment(uuid='2b558ee6-fab8-44cf-8f72-708c2849a64c',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=34,
         depth=4,
         type='method',
         name='createSaveButton',
         text='private static void '
              'createSaveButton(MyGuiScreenToolbarConfigBase screen, bool '
              'enabled)\n'
              '        {\n'
              '            var button = new MyGuiControlButton\n'
              '            {\n'
              '                Text = "Save",\n'
              '                Name = "SaveToolbarButton",\n'
              '                VisualStyle = '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                Position = new Vector2(-0.425f, 0.41f)\n'
              '            };\n'
              '            button.ButtonClicked += _ => '
              'OnSaveToolbar?.Invoke();\n'
              '            button.Enabled = enabled;\n'
              '            screen.Elements.Add(button);\n'
              '        }')

Fragment(uuid='62dbbb3b-655f-4fa8-a7ea-cfb8385fc267',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=37,
         depth=0,
         type='module',
         name='',
         text='   {\n'
              '                Text = "Save",\n'
              '                Name = "SaveToolbarButton",\n'
              '                VisualStyle = '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                Position = new Vector2(-0.425f, 0.41f)\n'
              '            };\n'
              '            button.ButtonClicked += _ => '
              'OnSaveToolbar?.Invoke();\n'
              '            button.Enabled = enabled;\n'
              '            screen.Elements.Add(button);\n'
              '        }\n'
              '\n'
              '        private static void '
              'createLoadButton(MyGuiScreenToolbarConfigBase screen, bo')

Fragment(uuid='dbdca8a2-39ec-4043-baa8-0d2141d61f9d',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=48,
         depth=0,
         type='module',
         name='',
         text='ol enabled)\n'
              '        {\n'
              '            var button = new MyGuiControlButton\n'
              '            {\n'
              '                Text = "Load",\n'
              '                Name = "LoadToolbarButton",\n'
              '                VisualStyle = '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                Position = new Vector2(-0.425f, 0.46f)\n'
              '            };\n'
              '            button.ButtonClicked += _ => '
              'OnLoadToolbar?.Invoke();\n'
              '            button.Enabled = enabled;\n'
              '            screen.Elements.Add(button);\n'
              '        }\n'
              '    }\n'
              '}')

Fragment(uuid='b932f941-50ad-40cd-aa6b-ca91c34cc44d',
         path='/ToolbarManager/Patches/MyGuiScreenToolbarConfigBasePatch.cs',
         lineno=48,
         depth=4,
         type='method',
         name='createLoadButton',
         text='private static void '
              'createLoadButton(MyGuiScreenToolbarConfigBase screen, bool '
              'enabled)\n'
              '        {\n'
              '            var button = new MyGuiControlButton\n'
              '            {\n'
              '                Text = "Load",\n'
              '                Name = "LoadToolbarButton",\n'
              '                VisualStyle = '
              'MyGuiControlButtonStyleEnum.Small,\n'
              '                Position = new Vector2(-0.425f, 0.46f)\n'
              '            };\n'
              '            button.ButtonClicked += _ => '
              'OnLoadToolbar?.Invoke();\n'
              '            button.Enabled = enabled;\n'
              '            screen.Elements.Add(button);\n'
              '        }')

Fragment(uuid='5b6411b1-5831-4f74-ada5-f9b92bd7c92a',
         path='/ToolbarManager/Plugin.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='\ufeffusing System.Reflection;\n'
              'using HarmonyLib;\n'
              'using ToolbarManager.Logic;\n'
              'using VRage.Plugins;\n'
              '\n'
              'namespace ToolbarManager\n'
              '{\n'
              '    // ReSharper disable NotAccessedField.Local\n'
              '    // ReSharper disable once UnusedType.Global\n'
              '    public class Plugin : IPlugin\n'
              '    {\n'
              '        private static bool initialized;\n'
              '        private static Storage storage;\n'
              '\n'
              '        public void Dispose()\n'
              '        {\n'
              '        }\n'
              '\n'
              '        public void Init(object gameInstance)\n'
              '        {\n'
              '            var harmony = new Harmony("ToolbarManager");\n'
              '            harmony.PatchAll(Assembly.GetExecutingAssembly());\n'
              '        }\n'
              '\n'
              '        public void Update()\n'
              '        {\n'
              '            if (initialized)\n'
              '                return;\n'
              '\n'
              '            storage = new Storage();\n'
              '\n'
              '            initialized = true;\n'
              '        }\n'
              '    }\n'
              '}')

Fragment(uuid='9b14691a-c56c-44c9-804e-e810e56d1b48',
         path='/ToolbarManager/Plugin.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Plugin.cs\n'
              '  Namespaces: ToolbarManager\n'
              '  Classes: Plugin\n'
              '  Methods: Dispose Init Update\n'
              '  Variables: Storage\n'
              '  Usages: Assembly GetExecutingAssembly Harmony HarmonyLib '
              'IPlugin Logic PatchAll Plugins Reflection Storage System '
              'ToolbarManager VRage gameInstance harmony harmony initialized '
              'initialized initialized storage storage\n')

Fragment(uuid='11c5cd79-0a7b-439c-81f5-ab5679d0a2f4',
         path='/ToolbarManager/Plugin.cs',
         lineno=6,
         depth=0,
         type='namespace',
         name='ToolbarManager',
         text='namespace ToolbarManager\n'
              '{\n'
              '    // ReSharper disable NotAccessedField.Local\n'
              '    // ReSharper disable once UnusedType.Global\n'
              '    public class Plugin : IPlugin\n'
              '    {\n'
              '        private static bool initialized;\n'
              '        private static Storage storage;\n'
              '\n'
              '        public void Dispose()\n'
              '        {\n'
              '        }\n'
              '\n'
              '        public void Init(object gameInstance)\n'
              '        {\n'
              '            var harmony = new Harmony("ToolbarManager");\n'
              '            harmony.PatchAll(Assembly.GetExecutingAssembly());\n'
              '        }\n'
              '\n'
              '        public void Update()\n'
              '        {\n'
              '            if (initialized)\n'
              '                return;\n'
              '\n'
              '            storage = new Storage();\n'
              '\n'
              '            initialized = true;\n'
              '        }\n'
              '    }\n'
              '}')

Fragment(uuid='bed091f4-b267-402b-ac43-39678ba11a64',
         path='/ToolbarManager/Plugin.cs',
         lineno=10,
         depth=2,
         type='class',
         name='Plugin',
         text='public class Plugin : IPlugin\n'
              '    {\n'
              '        private static bool initialized;\n'
              '        private static Storage storage;\n'
              '\n'
              '        public void Dispose()\n'
              '        {\n'
              '        }\n'
              '\n'
              '        public void Init(object gameInstance)\n'
              '        {\n'
              '            var harmony = new Harmony("ToolbarManager");\n'
              '            harmony.PatchAll(Assembly.GetExecutingAssembly());\n'
              '        }\n'
              '\n'
              '        public void Update()\n'
              '        {\n'
              '            if (initialized)\n'
              '                return;\n'
              '\n'
              '            storage = new Storage();\n'
              '\n'
              '            initialized = true;\n'
              '        }\n'
              '    }')

Fragment(uuid='5c1163bf-8ef2-4675-a540-2dbfc6ceda73',
         path='/ToolbarManager/Plugin.cs',
         lineno=13,
         depth=5,
         type='variable',
         name='Storage',
         text='Storage storage')

Fragment(uuid='10856fad-72e7-4fa8-af6c-27d001bc8423',
         path='/ToolbarManager/Plugin.cs',
         lineno=15,
         depth=4,
         type='method',
         name='Dispose',
         text='public void Dispose()\n        {\n        }')

Fragment(uuid='a96e9532-f3a9-4909-a869-1060c25b102f',
         path='/ToolbarManager/Plugin.cs',
         lineno=19,
         depth=4,
         type='method',
         name='Init',
         text='public void Init(object gameInstance)\n'
              '        {\n'
              '            var harmony = new Harmony("ToolbarManager");\n'
              '            harmony.PatchAll(Assembly.GetExecutingAssembly());\n'
              '        }')

Fragment(uuid='5479123e-cd05-4c9c-83ab-d7440ce59f61',
         path='/ToolbarManager/Plugin.cs',
         lineno=25,
         depth=4,
         type='method',
         name='Update',
         text='public void Update()\n'
              '        {\n'
              '            if (initialized)\n'
              '                return;\n'
              '\n'
              '            storage = new Storage();\n'
              '\n'
              '            initialized = true;\n'
              '        }')

Fragment(uuid='1181bc37-d081-48e6-9940-2cb105a4f91b',
         path='/ToolbarManager/Properties/AssemblyInfo.cs',
         lineno=1,
         depth=0,
         type='module',
         name='',
         text='\ufeffusing System.Reflection;\n'
              'using System.Runtime.InteropServices;\n'
              '\n'
              '// General Information about an assembly is controlled through '
              'the following \n'
              '// set of attributes. Change these attribute values to modify '
              'the information\n'
              '// associated with an assembly.\n'
              '[assembly: AssemblyTitle("ToolbarManager")]\n'
              '[assembly: AssemblyDescription("")]\n'
              '[assembly: AssemblyConfiguration("")]\n'
              '[assembly: AssemblyCompany("")]\n'
              '[assembly: AssemblyProduct("ToolbarManager")]\n'
              '[assembly: AssemblyCopyright("Copyright ©  2021")]\n'
              '[assembly: AssemblyTrademark("")]\n'
              '[assembly: AssemblyCulture("")]\n'
              '\n'
              '// Setting ComVisible to false makes the types in this assembly '
              'not visible \n'
              '// to COM components.  If you need t')

Fragment(uuid='5fe25156-0e4f-458b-9ed7-3e13a8c3863f',
         path='/ToolbarManager/Properties/AssemblyInfo.cs',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='CSharp: /ToolbarManager/Properties/AssemblyInfo.cs\n'
              '  Usages: AssemblyCompany AssemblyConfiguration '
              'AssemblyCopyright AssemblyCulture AssemblyDescription '
              'AssemblyFileVersion AssemblyProduct AssemblyTitle '
              'AssemblyTrademark AssemblyVersion ComVisible Guid '
              'InteropServices Reflection Runtime System System\n')

Fragment(uuid='4d57d79c-0371-4417-80d3-5270bcc42b9c',
         path='/ToolbarManager/Properties/AssemblyInfo.cs',
         lineno=17,
         depth=0,
         type='module',
         name='',
         text='o access a type in this assembly from \n'
              '// COM, set the ComVisible attribute to true on that type.\n'
              '[assembly: ComVisible(false)]\n'
              '\n'
              '// The following GUID is for the ID of the typelib if this '
              'project is exposed to COM\n'
              '[assembly: Guid("E79C2AFE-FC1F-4A5A-AB40-0AFED1E30570")]\n'
              '\n'
              '// Version information for an assembly consists of the '
              'following fou')

Fragment(uuid='f93671a8-b90d-4395-98d8-1c90935eb228',
         path='/ToolbarManager/Properties/AssemblyInfo.cs',
         lineno=24,
         depth=0,
         type='module',
         name='',
         text='r values:\n'
              '//\n'
              '//      Major Version\n'
              '//      Minor Version \n'
              '//      Build Number\n'
              '//      Revision\n'
              '//\n'
              '// You can specify all the values or you can default the Build '
              'and Revision Numbers \n'
              "// by using the '*' as shown below:\n"
              '// [assembly: AssemblyVersion("1.0.*")]\n'
              '[assembly: AssemblyVersion("1.3.3.0")]\n'
              '[assembly: AssemblyFileVersion("1.3.3.0")]')

Fragment(uuid='b2401e7f-3b9f-49c2-a984-e073e680390b',
         path='/ToolbarManager/deploy.bat',
         lineno=1,
         depth=0,
         type='documentation',
         name='',
         text='@echo off\n'
              'if [%2] == [] goto EOF\n'
              '\n'
              'echo Parameters: %*\n'
              '\n'
              'set SRC=%~p1\n'
              'set NAME=%~2\n'
              '\n'
              'set TARGET=..\\..\\..\\Bin64\\Plugins\\Local\n'
              'mkdir %TARGET% >NUL 2>&1\n'
              '\n'
              'echo.\n'
              'echo Deploying CLIENT plugin binary:\n'
              'echo.\n'
              ':RETRY\n'
              'ping -n 2 127.0.0.1 >NUL 2>&1\n'
              'echo From %1 to "%TARGET%\\"\n'
              'copy /y %1 "%TARGET%\\"\n'
              'IF %ERRORLEVEL% NEQ 0 GOTO :RETRY\n'
              'echo Done\n'
              'echo.\n'
              'exit 0\n'
              '\n'
              ':EOF')

Fragment(uuid='6c35f195-d6a9-497a-846e-1372ff043555',
         path='/ToolbarManager/deploy.bat',
         lineno=1,
         depth=0,
         type='summary',
         name='',
         text='File: /ToolbarManager/deploy.bat\n')