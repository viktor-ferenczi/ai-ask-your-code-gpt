[Hit(uuid='29',
     path='/MusicPlayer/SearchResultsViewController.swift',
     lineno=11,
     depth=0,
     type='class',
     name='SearchResultsViewController',
     text='class SearchResultsViewController: UIViewController, '
          'UITableViewDataSource, UITableViewDelegate, APIControllerProtocol '
          '{\n'
          '    \n'
          '    @IBOutlet var appsTableView : UITableView?\n'
          '    var albums = [Album]()\n'
          '    var api : APIController?\n'
          '    var imageCache = [String : UIImage]()\n'
          '    let kCellIdentifier: String = "SearchResultCell"\n'
          '    \n'
          '    override func viewDidLoad() {\n'
          '        super.viewDidLoad()\n'
          '        api = APIController(delegate: self)\n'
          '        '
          'UIApplication.sharedApplication().networkActivityIndicatorVisible = '
          'true\n'
          '        api!.searchItunesFor("Beatles")\n'
          '    }\n'
          '\n'
          '    override func didReceiveMemoryWarning() {\n'
          '        super.didReceiveMemoryWarning()\n'
          '        // Dispose of any resources that can be recreated.\n'
          '    }\n'
          '    \n'
          '\n'
          '    // MARK: UITableViewDataSource\n'
          '    \n'
          '    func tableView(tableView: UITableView, numberOfRowsInSection '
          'section: Int) -> Int {\n'
          '        return albums.count\n'
          '    }\n'
          '    \n'
          '    func tableView(tableView: UITableView, cellForRowAtIndexPath '
          'indexPath: NSIndexPath) -> UITableViewCell {\n'
          '        \n'
          '        let cell: UITableViewCell = '
          'tableView.dequeueReusableCellWithIdentifier(kCellIdentifier) as '
          'UITableViewCell\n'
          '        \n'
          '        let album = self.albums[indexPath.row]\n'
          '        cell.textLabel?.text = album.title\n'
          '        cell.imageView?.image = UIImage(named: "Blank52")\n'
          '        \n'
          '        // Get the formatted price string for display in the '
          'subtitle\n'
          '        let formattedPrice = album.price\n'
          '        \n'
          '        // Grab the artworkUrl60 key to get an image URL for the '
          "app's thumbnail\n"
          '        let urlString = album.thumbnailImageURL\n'
          '        \n'
          '        // Check our image cache for the existing key. This is just '
          'a dictionary of UIImages\n'
          '        //var image: UIImage? = '
          'self.imageCache.valueForKey(urlString) as? UIImage\n'
          '        var image = self.imageCache[urlString]\n'
          '        \n'
          '        \n'
          '        if( image == nil ) {\n'
          '            // If the image does not exist, we need to download it\n'
          '            var imgURL: NSURL = NSURL(string: urlString)\n'
          '            \n'
          '            // Download an NSData representation of the image at '
          'the URL\n'
          '            let request: NSURLRequest = NSURLRequest(URL: imgURL)\n'
          '            NSURLConnection.sendAsynchronousRequest(request, queue: '
          'NSOperationQueue.mainQueue(), completionHandler: {(response: '
          'NSURLResponse!,data: NSData!,error: NSError!) -> Void in\n'
          '                if error == nil {\n'
          '                    image = UIImage(data: data)\n'
          '                    \n'
          '                    // Store the image in to our cache\n'
          '                    self.imageCache[urlString] = image\n'
          '                    dispatch_async(dispatch_get_main_queue(), {\n'
          '                        if let cellToUpdate = '
          'tableView.cellForRowAtIndexPath(indexPath) {\n'
          '                            cellToUpdate.imageView?.image = image\n'
          '                        }\n'
          '                    })\n'
          '                }\n'
          '                else {\n'
          '                    println("Error: '
          '\\(error.localizedDescription)")\n'
          '                }\n'
          '            })\n'
          '            \n'
          '        }\n'
          '        else {\n'
          '            dispatch_async(dispatch_get_main_queue(), {\n'
          '                if let cellToUpdate = '
          'tableView.cellForRowAtIndexPath(indexPath) {\n'
          '                    cellToUpdate.imageView?.image = image\n'
          '                }\n'
          '            })\n'
          '        }\n'
          '        \n'
          '        cell.detailTextLabel?.text = formattedPrice\n'
          '        \n'
          '        return cell\n'
          '    }\n'
          '    \n'
          '    func tableView(tableView: UITableView, willDisplayCell cell: '
          'UITableViewCell, forRowAtIndexPath indexPath: NSIndexPath) {\n'
          '        cell.layer.transform = CATransform3DMakeScale(0.1,0.1,1)\n'
          '        UIView.animateWithDuration(0.25, animations: {\n'
          '            cell.layer.transform = CATransform3DMakeScale(1,1,1)\n'
          '        })\n'
          '    }\n'
          '    \n'
          '    \n'
          '    override func prepareForSegue(segue: UIStoryboardSegue, sender: '
          'AnyObject?) {\n'
          '        var detailsViewController: DetailsViewController = '
          'segue.destinationViewController as DetailsViewController\n'
          '        var albumIndex = '
          'appsTableView!.indexPathForSelectedRow()!.row\n'
          '        var selectedAlbum = self.albums[albumIndex]\n'
          '        detailsViewController.album = selectedAlbum\n'
          '    }\n'
          '    \n'
          '    func didReceiveAPIResults(results: NSDictionary) {\n'
          '        var resultsArr: NSArray = results["results"] as NSArray\n'
          '        dispatch_async(dispatch_get_main_queue(), {\n'
          '            self.albums = Album.albumsWithJSON(resultsArr)\n'
          '            self.appsTableView!.reloadData()\n'
          '            '
          'UIApplication.sharedApplication().networkActivityIndicatorVisible = '
          'false\n'
          '        })\n'
          '    }\n'
          '\n'
          '}',
     tokens=793,
     score=1.0)]