[Hit(uuid='0',
     path='/README.md',
     lineno=1,
     depth=1,
     type='documentation',
     name='',
     text='# Database Abstraction Layer Generator\n'
          '\n'
          'Database server support: PostgreSQL\n'
          '\n'
          '# Installation\n'
          '\n'
          '* Using pip: ```pip install dblayer```\n'
          '* From source: ```python setup.py install```\n'
          '\n'
          '# How it works\n'
          '\n'
          '## Abstraction layer\n'
          '\n'
          'Generates source code of a module implementing row classes with '
          'slots and a \n'
          'single database abstraction layer class. These classes can be used '
          'as is or \n'
          'extended by inheritance to fit your specific needs. It is also '
          'possible to \n'
          'extend the row classes to provide properties or helper methods. The '
          'generated \n'
          'code provides Python IDEs as much information as possible to make '
          'code \n'
          'completion useful. \n'
          '\n'
          '## Lightweight usage\n'
          '\n'
          'The generated abstraction layer works like an ORM (Object '
          'Relational Mapper), \n'
          'but without a direct mapping of row instances to the corresponding '
          'database \n'
          'rows. It makes this approach more lightweight than a full-blown '
          'ORM. Database \n'
          'sessions and transactions must be initiated explicitly, but there '
          'are context \n'
          'managers defined to simplify your code.\n'
          '\n'
          '## Features\n'
          '\n'
          'Tables, indexes and constraints are defined in a very clean way by '
          'just \n'
          'writing Python classes. Everything is defined explicitly, no '
          'automatic \n'
          'discovery of classes. Queries on multiple tables (joins) can also '
          'be defined \n'
          'in a clean way. Table aliasing is automatic and natural, since all '
          'the \n'
          'participating tables must be given an unique name in order to build '
          'the query \n'
          'definition. Highly complex queries can be build up gradually by '
          'simple Python \n'
          'class inheritance, which helps reducing code redundancy in real '
          'world use \n'
          'cases.\n'
          '\n'
          'Constraints are enforced on the database server, not by Python '
          'code. It is \n'
          'also possible to add record finalization and validation code in '
          'Python if \n'
          'needed. There is support for defining efficient full text search '
          'indexes in a \n'
          'very simple way, so searching rows based on their textual contents '
          'is easy to \n'
          'implement.\n'
          '\n'
          '# Remarks\n'
          '\n'
          '## Performance\n'
          '\n'
          'Most of the SQL is generated at compile time to reduce the runtime '
          'overhead as \n'
          'much as possible. Despite this it is possible to add runtime '
          'conditions, even \n'
          'building up complex conditions at runtime, but it will not slow '
          'down the \n'
          'simple use cases. Literal values are escaped automatically. The '
          'abstraction \n'
          'layer always returns unicode objects. You can pass str objects as '
          'literal \n'
          'values, the default encoding is UTF-8 in this case.\n'
          '\n'
          '## Limitations\n'
          '\n'
          'The only supported database server is PostgreSQL via the psycopg2 \n'
          'extension. The generated code works with gevent-psycopg2 as well. \n'
          '\n'
          'No support for defining database views, tablespaces and other \n'
          'database servers yet. \n'
          '\n'
          'No support for inspecting databases (generating the classes '
          'defining and \n'
          'existing database) yet. \n'
          '\n'
          'The unit test coverage is still not 100%.\n',
     tokens=542,
     score=1.0)]