Fragment(document_cs='041be01578f08b929dd107a33f440780ced712d0e25f73d65d5fc7ef95feedc7',
         id=-1,
         lineno=1,
         tokens=28,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: '
              '/logs/crosswords/gpt-4_0.7_naive_cot_sample_10_start0_end20.json\n')

Fragment(document_cs='06483292848c14370571a8dd55fc0cdecc2ed7ec60c002c8ae881d6873222e31',
         id=-1,
         lineno=1,
         tokens=116,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='python run.py \\\n'
              '    --task text \\\n'
              '    --task_file_path data_100_random_text.txt \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 1 \\\n'
              '    --method_generate sample \\\n'
              '    --method_evaluate vote \\\n'
              '    --method_select greedy \\\n'
              '    --n_generate_sample 5 \\\n'
              '    --n_evaluate_sample 5 \\\n'
              '    --n_select_sample 1 \\\n'
              '    --prompt_sample cot \\\n'
              '    --temperature 1.0 \\\n'
              '    ${@}\n'
              '\n'
              '\n'
              '# 0.3 dollars per line ->  30 dollars for 100 lines')

Fragment(document_cs='06483292848c14370571a8dd55fc0cdecc2ed7ec60c002c8ae881d6873222e31',
         id=-1,
         lineno=1,
         tokens=9,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /scripts/text/bfs.sh\n')

Fragment(document_cs='1147c5c0bd61d59ce7320bb11dd2b897f56cf19e1dade865bf4649f63173169d',
         id=-1,
         lineno=1,
         tokens=27,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: '
              '/logs/game24/gpt-4_0.7_naive_standard_sample_100_start900_end1000.json\n')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=1,
         tokens=76,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='# 5-shot\n'
              "standard_prompt = '''Use numbers and basic arithmetic "
              'operations (+ - * /) to obtain 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Input: 2 9 10 12\n'
              'Answer: 2 * 12 * (10')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=1,
         tokens=28,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='Python: /prompts/game24.py\n'
              '  Variables and usages: cot_prompt propose_prompt '
              'standard_prompt value_last_step_prompt value_prompt\n')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=2,
         tokens=71,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Use numbers and basic arithmetic operations (+ - * /) to obtain '
              '24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Input: 2 9 10 12\n'
              'Answer: 2 * 12 * (10 - 9)')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=6,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body=' - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Input: 1 4 8 8\n'
              'Answer: (8 / 4 + 1) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Answer: 5 + 5 + 5 + 9 = 24\n'
              'Input: {input}\n'
              "'''\n"
              '\n'
              '# 5-shot\n'
              'cot_p')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=6,
         tokens=96,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body=' = 24\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Input: 1 4 8 8\n'
              'Answer: (8 / 4 + 1) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Answer: 5 + 5 + 5 + 9 = 24\n'
              'Input: {input}\n')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=17,
         tokens=42,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="rompt = '''Use numbers and basic arithmetic operations (+ - * "
              '/) to obtain 24. Each step, you are only allowed to choose two '
              'of the remaining numbers to obtain a new number.\n'
              'Input: ')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=17,
         tokens=59,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Use numbers and basic arithmetic operations (+ - * /) to obtain '
              '24. Each step, you are only allowed to choose two of the '
              'remaining numbers to obtain a new number.\n'
              'Input: 4 4 6 8\n'
              'Steps:\n'
              '4 + 8 = 12 (left:')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=18,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='4 4 6 8\n'
              'Steps:\n'
              '4 + 8 = 12 (left: 4 6 12)\n'
              '6 - 4 = 2 (left: 2 12)\n'
              '2 * 12 = 24 (left: 24)\n'
              'Answer: (6 - 4) * (4 + 8) = 24\n'
              'Input: 2 9 10 12\n'
              'Steps:\n'
              '12 * 2 = 24 (left: 9 10 24)\n'
              '10 - 9 = 1 (')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=20,
         tokens=121,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body=' 4 6 12)\n'
              '6 - 4 = 2 (left: 2 12)\n'
              '2 * 12 = 24 (left: 24)\n'
              'Answer: (6 - 4) * (4 + 8) = 24\n'
              'Input: 2 9 10 12\n'
              'Steps:\n'
              '12 * 2 = 24 (left: 9 10 24)\n'
              '10 - 9 = 1 (left: 1 24)\n'
              '24 * 1 = 24 (left: 24)\n'
              'Answer: (12 * 2) ')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=27,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='left: 1 24)\n'
              '24 * 1 = 24 (left: 24)\n'
              'Answer: (12 * 2) * (10 - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Steps:\n'
              '13 - 10 = 3 (left: 3 4 9)\n'
              '9 - 3 = 6 (left: 4 6)\n'
              '4 * 6 = 24 (left: 24)\n'
              'Answer: 4 * (9 - (1')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=29,
         tokens=126,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='* (10 - 9) = 24\n'
              'Input: 4 9 10 13\n'
              'Steps:\n'
              '13 - 10 = 3 (left: 3 4 9)\n'
              '9 - 3 = 6 (left: 4 6)\n'
              '4 * 6 = 24 (left: 24)\n'
              'Answer: 4 * (9 - (13 - 10)) = 24\n'
              'Input: 1 4 8 8\n'
              'Steps:\n'
              '8 / 4 = 2 (left: 1 2 8)\n'
              '1 + 2 = 3 (le')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=35,
         tokens=116,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='3 - 10)) = 24\n'
              'Input: 1 4 8 8\n'
              'Steps:\n'
              '8 / 4 = 2 (left: 1 2 8)\n'
              '1 + 2 = 3 (left: 3 8)\n'
              '3 * 8 = 24 (left: 24)\n'
              'Answer: (1 + 8 / 4) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Steps:\n'
              '5 + 5 = 10 (left: 5 9 10)\n'
              '1')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=39,
         tokens=120,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='ft: 3 8)\n'
              '3 * 8 = 24 (left: 24)\n'
              'Answer: (1 + 8 / 4) * 8 = 24\n'
              'Input: 5 5 5 9\n'
              'Steps:\n'
              '5 + 5 = 10 (left: 5 9 10)\n'
              '10 + 5 = 15 (left: 9 15)\n'
              '15 + 9 = 24 (left: 24)\n'
              'Answer: ((5 + 5) + 5) + 9 = 24\n'
              'Input: {input}\n')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=45,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='0 + 5 = 15 (left: 9 15)\n'
              '15 + 9 = 24 (left: 24)\n'
              'Answer: ((5 + 5) + 5) + 9 = 24\n'
              'Input: {input}\n'
              "'''\n"
              '\n'
              '# 1-shot\n'
              "propose_prompt = '''Input: 2 8 8 14\n"
              'Possible next steps:\n'
              '2 + 8 = 10 (left:')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=52,
         tokens=82,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Input: 2 8 8 14\n'
              'Possible next steps:\n'
              '2 + 8 = 10 (left: 8 10 14)\n'
              '8 / 2 = 4 (left: 4 8 14)\n'
              '14 + 2 = 16 (left: 8 8 16)\n'
              '2 * 8 = 16 (left: 8 14 16')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=54,
         tokens=119,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body=' 8 10 14)\n'
              '8 / 2 = 4 (left: 4 8 14)\n'
              '14 + 2 = 16 (left: 8 8 16)\n'
              '2 * 8 = 16 (left: 8 14 16)\n'
              '8 - 2 = 6 (left: 6 8 14)\n'
              '14 - 8 = 6 (left: 2 6 8)\n'
              '14 /  2 = 7 (left: 7 8 8)\n'
              '14 - 2 = 12 (left')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=57,
         tokens=79,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body=')\n'
              '8 - 2 = 6 (left: 6 8 14)\n'
              '14 - 8 = 6 (left: 2 6 8)\n'
              '14 /  2 = 7 (left: 7 8 8)\n'
              '14 - 2 = 12 (left: 8 8 12)\n'
              'Input: {input}\n'
              'Possible next steps:\n')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=61,
         tokens=66,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body=': 8 8 12)\n'
              'Input: {input}\n'
              'Possible next steps:\n'
              "'''\n"
              '\n'
              "value_prompt = '''Evaluate if given numbers can reach 24 "
              '(sure/likely/impossible)\n'
              '10 14\n'
              '10 + 14 = 24\n'
              'sure\n'
              '11 12\n'
              '11 + 12 = 23\n'
              '12 - ')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=66,
         tokens=81,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Evaluate if given numbers can reach 24 '
              '(sure/likely/impossible)\n'
              '10 14\n'
              '10 + 14 = 24\n'
              'sure\n'
              '11 12\n'
              '11 + 12 = 23\n'
              '12 - 11 = 1\n'
              '11 * 12 = 132\n'
              '11 / 12 = 0.91\n'
              'impossible\n'
              '4 4 10\n'
              '4 + 4 +')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=72,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='11 = 1\n'
              '11 * 12 = 132\n'
              '11 / 12 = 0.91\n'
              'impossible\n'
              '4 4 10\n'
              '4 + 4 + 10 = 8 + 10 = 18\n'
              '4 * 10 - 4 = 40 - 4 = 36\n'
              '(10 - 4) * 4 = 6 * 4 = 24\n'
              'sure\n'
              '4 9 11\n'
              '9 + 11 + 4 = 20 + 4 = 24\n'
              'sure\n'
              '5 7 8\n'
              '5 + ')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=77,
         tokens=120,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body=' 10 = 8 + 10 = 18\n'
              '4 * 10 - 4 = 40 - 4 = 36\n'
              '(10 - 4) * 4 = 6 * 4 = 24\n'
              'sure\n'
              '4 9 11\n'
              '9 + 11 + 4 = 20 + 4 = 24\n'
              'sure\n'
              '5 7 8\n'
              '5 + 7 + 8 = 12 + 8 = 20\n'
              '(8 - 5) * 7 = 3 * 7 = 21\n'
              'I canno')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=85,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='7 + 8 = 12 + 8 = 20\n'
              '(8 - 5) * 7 = 3 * 7 = 21\n'
              'I cannot obtain 24 now, but numbers are within a reasonable '
              'range\n'
              'likely\n'
              '5 6 6\n'
              '5 + 6 + 6 = 17\n'
              '(6 - 5) * 6 = 1 * 6 = 6\n'
              'I cannot obtain 24')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=87,
         tokens=66,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='t obtain 24 now, but numbers are within a reasonable range\n'
              'likely\n'
              '5 6 6\n'
              '5 + 6 + 6 = 17\n'
              '(6 - 5) * 6 = 1 * 6 = 6\n'
              'I cannot obtain 24 now, but numbers are within a reasonable ra')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=92,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body=' now, but numbers are within a reasonable range\n'
              'likely\n'
              '10 10 11\n'
              '10 + 10 + 11 = 31\n'
              '(11 - 10) * 10 = 10\n'
              '10 10 10 are all too big\n'
              'impossible\n'
              '1 3 3\n'
              '1 * 3 * 3 = 9\n'
              '(1 + 3) * 3 = 12\n'
              '1 3 3 a')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=92,
         tokens=93,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='nge\n'
              'likely\n'
              '10 10 11\n'
              '10 + 10 + 11 = 31\n'
              '(11 - 10) * 10 = 10\n'
              '10 10 10 are all too big\n'
              'impossible\n'
              '1 3 3\n'
              '1 * 3 * 3 = 9\n'
              '(1 + 3) * 3 = 12\n'
              '1 3 3 are all too small\n'
              'impossible\n'
              '{input}\n')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=102,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='re all too small\n'
              'impossible\n'
              '{input}\n'
              "'''\n"
              '\n'
              "value_last_step_prompt = '''Use numbers and basic arithmetic "
              'operations (+ - * /) to obtain 24. Given an input and an '
              'answer, give a judgement (sure/impossible) if the answer is '
              'correct, i.e. it uses each input exactly once and no other '
              'numbers, and reach 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Inp')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=107,
         tokens=112,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Use numbers and basic arithmetic operations (+ - * /) to obtain '
              '24. Given an input and an answer, give a judgement '
              '(sure/impossible) if the answer is correct, i.e. it uses each '
              'input exactly once and no other numbers, and reach 24.\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 2 9 10 12\n'
              'Answer: 2 * 12 * (1')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=112,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='ut: 2 9 10 12\n'
              'Answer: 2 * 12 * (10 - 9) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) + 1 = 25\n'
              'Judge: \n'
              'im')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=113,
         tokens=90,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='0 - 9) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 9) * (10 - 4) = 24\n'
              'Judge: \n'
              'sure\n'
              'Input: 4 4 6 8\n'
              'Answer: (4 + 8) * (6 - 4) + 1 = 25\n'
              'Judge: \n'
              'impossible\n'
              'Input:')

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=123,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='possible\n'
              'Input: 2 9 10 12\n'
              'Answer: 2 * (12 - 10) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 4) * (10 - 9) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: {input}\n'
              'Answer: {answer}\n'
              "Judge:'''")

Fragment(document_cs='27ad57c3ac066ad242babfb113125dac3adf91a58c2bb8ad23ab19e28e82dfeb',
         id=-1,
         lineno=124,
         tokens=78,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body=' 2 9 10 12\n'
              'Answer: 2 * (12 - 10) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: 4 9 10 13\n'
              'Answer: (13 - 4) * (10 - 9) = 24\n'
              'Judge: \n'
              'impossible\n'
              'Input: {input}\n'
              'Answer: {answer}\n'
              'Judge:')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=1,
         tokens=26,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='import os\n'
              'import re\n'
              'from tasks.base import Task, DATA_PATH\n'
              'from prompts.text import *\n'
              'from models import gpt\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=1,
         tokens=116,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='Python: /tasks/text.py\n'
              '  Classes: TextTask\n'
              '  Methods: __init__ __len__ compare_output_unwrap '
              'compare_prompt_wrap cot_prompt_wrap get_input '
              'standard_prompt_wrap test_output vote_outputs_unwrap '
              'vote_prompt_wrap\n'
              '  Variables and usages: DATA_PATH DOTALL Task append base '
              'compare_output compare_prompt cot_prompt data enumerate file '
              'format groups info input join match model models n_candidates '
              'open output path pattern print prompt prompts range readlines '
              'score score_output score_outputs score_prompt scores split '
              'standard_prompt staticmethod steps stops tasks text vote '
              'vote_output vote_outputs vote_prompt vote_results\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=6,
         tokens=52,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '\n'
              'class TextTask(Task):\n'
              '    """\n'
              '    Input (x)   : a text instruction\n'
              '    Output (y)  : a text generation\n'
              '    Reward (r)  : # TODO\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=8,
         tokens=51,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body='class TextTask(Task):\n'
              '    """\n'
              '    Input (x)   : a text instruction\n'
              '    Output (y)  : a text generation\n'
              '    Reward (r)  : # TODO\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=9,
         tokens=44,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '    Input (x)   : a text instruction\n'
              '    Output (y)  : a text generation\n'
              '    Reward (r)  : # TODO\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    ')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=16,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="    def __init__(self, file='data_100_random_text.txt'):\n"
              '        """\n'
              '        file: a text file, each line is some sentences\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, 'text', file)\n"
              '        self.data = open(path).readlines()\n'
              '        self.steps = 2\n'
              "        self.stops = ['\\nPassage:\\n', None]\n")

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=16,
         tokens=84,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body="    def __init__(self, file='data_100_random_text.txt'):\n"
              '        """\n'
              '        file: a text file, each line is some sentences\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, 'text', file)\n"
              '        self.data = open(path).readlines()\n'
              '        self.steps = 2\n'
              "        self.stops = ['\\nPassage:\\n', None]\n")

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=16,
         tokens=83,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='__init__',
         body="def __init__(self, file='data_100_random_text.txt'):\n"
              '        """\n'
              '        file: a text file, each line is some sentences\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, 'text', file)\n"
              '        self.data = open(path).readlines()\n'
              '        self.steps = 2\n'
              "        self.stops = ['\\nPassage:\\n', None]")

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=16,
         tokens=6,
         depth=6,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='data_100_random_text.txt')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=17,
         tokens=15,
         depth=6,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '        file: a text file, each line is some sentences\n'
              '        ')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=25,
         tokens=17,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=25,
         tokens=17,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=26,
         tokens=15,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='__len__',
         body='def __len__(self) -> int:\n        return len(self.data)')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=28,
         tokens=20,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=28,
         tokens=20,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=29,
         tokens=18,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_input',
         body='def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=31,
         tokens=60,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              "        output = output.split('Passage:\\n')[-1]\n"
              '        prompt = score_prompt + output\n'
              "        score_outputs = gpt(prompt, n=5, model='gpt-4')\n"
              '        scores = []\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=31,
         tokens=60,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              "        output = output.split('Passage:\\n')[-1]\n"
              '        prompt = score_prompt + output\n'
              "        score_outputs = gpt(prompt, n=5, model='gpt-4')\n"
              '        scores = []\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=32,
         tokens=58,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='test_output',
         body='def test_output(self, idx: int, output: str):\n'
              "        output = output.split('Passage:\\n')[-1]\n"
              '        prompt = score_prompt + output\n'
              "        score_outputs = gpt(prompt, n=5, model='gpt-4')\n"
              '        scores = []\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=37,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        for score_output in score_outputs:\n'
              '            # print(score_output)\n'
              '            pattern = r".*coherency score is (\\d+).*"\n'
              '            match = re.match(pattern, score_output, re.DOTALL)\n'
              '            if match:\n'
              '                score = int(match.groups()[0])\n'
              '                scores.append(score)\n'
              '            else:\n'
              "                print(f'------------------score no match: "
              "{[score_output]}')\n"
              '        print(scores)\n'
              "        # print('------------')\n"
              "        info = {'rs': scores, 'r': sum(scores) / len(scores) if "
              'scores else 0}\n'
              '        return info\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=37,
         tokens=123,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body='        for score_output in score_outputs:\n'
              '            # print(score_output)\n'
              '            pattern = r".*coherency score is (\\d+).*"\n'
              '            match = re.match(pattern, score_output, re.DOTALL)\n'
              '            if match:\n'
              '                score = int(match.groups()[0])\n'
              '                scores.append(score)\n'
              '            else:\n'
              "                print(f'------------------score no match: "
              "{[score_output]}')\n"
              '        print(scores)\n'
              "        # print('------------')\n"
              "        info = {'rs': scores, 'r': sum(scores) / len(scores) if "
              'scores else 0}\n'
              '        return info\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=37,
         tokens=118,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='test_output',
         body='        for score_output in score_outputs:\n'
              '            # print(score_output)\n'
              '            pattern = r".*coherency score is (\\d+).*"\n'
              '            match = re.match(pattern, score_output, re.DOTALL)\n'
              '            if match:\n'
              '                score = int(match.groups()[0])\n'
              '                scores.append(score)\n'
              '            else:\n'
              "                print(f'------------------score no match: "
              "{[score_output]}')\n"
              '        print(scores)\n'
              "        # print('------------')\n"
              "        info = {'rs': scores, 'r': sum(scores) / len(scores) if "
              'scores else 0}\n'
              '        return info')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=38,
         tokens=5,
         depth=5,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# print(score_output)')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=39,
         tokens=10,
         depth=9,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='.*coherency score is (\\d+).*')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=45,
         tokens=7,
         depth=13,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='------------------score no match: ')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=47,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="# print('------------')")

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=52,
         tokens=30,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=52,
         tokens=30,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=52,
         tokens=24,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='standard_prompt_wrap',
         body="def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=56,
         tokens=30,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=56,
         tokens=30,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=56,
         tokens=24,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='cot_prompt_wrap',
         body="def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=60,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    def vote_prompt_wrap(x: str, ys: list) -> str:\n'
              '        prompt = vote_prompt\n'
              '        for i, y in enumerate(ys, 1):\n'
              "            # y = y.replace('Plan:\\n', '')\n"
              '            # TODO: truncate the plan part?\n'
              "            prompt += f'Choice {i}:\\n{y}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=60,
         tokens=80,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body='    def vote_prompt_wrap(x: str, ys: list) -> str:\n'
              '        prompt = vote_prompt\n'
              '        for i, y in enumerate(ys, 1):\n'
              "            # y = y.replace('Plan:\\n', '')\n"
              '            # TODO: truncate the plan part?\n'
              "            prompt += f'Choice {i}:\\n{y}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=60,
         tokens=74,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='vote_prompt_wrap',
         body='def vote_prompt_wrap(x: str, ys: list) -> str:\n'
              '        prompt = vote_prompt\n'
              '        for i, y in enumerate(ys, 1):\n'
              "            # y = y.replace('Plan:\\n', '')\n"
              '            # TODO: truncate the plan part?\n'
              "            prompt += f'Choice {i}:\\n{y}\\n'\n"
              '        return prompt')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=63,
         tokens=11,
         depth=6,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="# y = y.replace('Plan:\\n', '')")

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=64,
         tokens=8,
         depth=6,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# TODO: truncate the plan part?')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=69,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    def vote_outputs_unwrap(vote_outputs: list, n_candidates: '
              'int) -> list:\n'
              '        vote_results = [0] * n_candidates\n'
              '        for vote_output in vote_outputs:\n'
              '            pattern = r".*best choice is .*(\\d+).*"\n'
              '            match = re.match(pattern, vote_output, re.DOTALL)\n'
              '            if match:\n'
              '                vote = int(match.groups()[0]) - 1\n'
              '                if vote in range(n_candidates):\n'
              '                    vote_results[vote] += 1\n'
              '            else:\n'
              "                print(f'vote no match: {[vote_output]}')\n"
              '        return vote_results\n'
              '\n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=69,
         tokens=130,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body='    def vote_outputs_unwrap(vote_outputs: list, n_candidates: '
              'int) -> list:\n'
              '        vote_results = [0] * n_candidates\n'
              '        for vote_output in vote_outputs:\n'
              '            pattern = r".*best choice is .*(\\d+).*"\n'
              '            match = re.match(pattern, vote_output, re.DOTALL)\n'
              '            if match:\n'
              '                vote = int(match.groups()[0]) - 1\n'
              '                if vote in range(n_candidates):\n'
              '                    vote_results[vote] += 1\n'
              '            else:\n'
              "                print(f'vote no match: {[vote_output]}')\n"
              '        return vote_results\n'
              '\n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=69,
         tokens=124,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='vote_outputs_unwrap',
         body='def vote_outputs_unwrap(vote_outputs: list, n_candidates: int) '
              '-> list:\n'
              '        vote_results = [0] * n_candidates\n'
              '        for vote_output in vote_outputs:\n'
              '            pattern = r".*best choice is .*(\\d+).*"\n'
              '            match = re.match(pattern, vote_output, re.DOTALL)\n'
              '            if match:\n'
              '                vote = int(match.groups()[0]) - 1\n'
              '                if vote in range(n_candidates):\n'
              '                    vote_results[vote] += 1\n'
              '            else:\n'
              "                print(f'vote no match: {[vote_output]}')\n"
              '        return vote_results')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=72,
         tokens=10,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='.*best choice is .*(\\d+).*')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=83,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    def compare_prompt_wrap(x: str, ys: list) -> str:\n'
              "        assert len(ys) == 2, 'compare prompt only supports 2 "
              "candidates'\n"
              "        ys = [y.split('Passage:\\n')[-1] for y in ys]\n"
              "        prompt = compare_prompt + f'Passage "
              "1:\\n{ys[0]}\\n\\nPassage 2:\\n{ys[1]}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=83,
         tokens=99,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body='    def compare_prompt_wrap(x: str, ys: list) -> str:\n'
              "        assert len(ys) == 2, 'compare prompt only supports 2 "
              "candidates'\n"
              "        ys = [y.split('Passage:\\n')[-1] for y in ys]\n"
              "        prompt = compare_prompt + f'Passage "
              "1:\\n{ys[0]}\\n\\nPassage 2:\\n{ys[1]}\\n'\n"
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=83,
         tokens=93,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='compare_prompt_wrap',
         body='def compare_prompt_wrap(x: str, ys: list) -> str:\n'
              "        assert len(ys) == 2, 'compare prompt only supports 2 "
              "candidates'\n"
              "        ys = [y.split('Passage:\\n')[-1] for y in ys]\n"
              "        prompt = compare_prompt + f'Passage "
              "1:\\n{ys[0]}\\n\\nPassage 2:\\n{ys[1]}\\n'\n"
              '        return prompt')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=84,
         tokens=7,
         depth=7,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='compare prompt only supports 2 candidates')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=90,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    def compare_output_unwrap(compare_output: str):\n'
              "        if 'more coherent passage is 1' in compare_output:\n"
              '            return 0\n'
              "        elif 'more coherent passage is 2' in compare_output:\n"
              '            return 1\n'
              "        elif 'two passages are similarly coherent' in "
              'compare_output:\n'
              '            return 0.5\n'
              '        else:\n'
              "            print(f'-----------------compare no match: "
              "{[compare_output]}')\n"
              '            return -1')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=90,
         tokens=91,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='TextTask',
         body='    def compare_output_unwrap(compare_output: str):\n'
              "        if 'more coherent passage is 1' in compare_output:\n"
              '            return 0\n'
              "        elif 'more coherent passage is 2' in compare_output:\n"
              '            return 1\n'
              "        elif 'two passages are similarly coherent' in "
              'compare_output:\n'
              '            return 0.5\n'
              '        else:\n'
              "            print(f'-----------------compare no match: "
              "{[compare_output]}')\n"
              '            return -1')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=90,
         tokens=90,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='compare_output_unwrap',
         body='def compare_output_unwrap(compare_output: str):\n'
              "        if 'more coherent passage is 1' in compare_output:\n"
              '            return 0\n'
              "        elif 'more coherent passage is 2' in compare_output:\n"
              '            return 1\n'
              "        elif 'two passages are similarly coherent' in "
              'compare_output:\n'
              '            return 0.5\n'
              '        else:\n'
              "            print(f'-----------------compare no match: "
              "{[compare_output]}')\n"
              '            return -1')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=91,
         tokens=6,
         depth=8,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='more coherent passage is 1')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=93,
         tokens=6,
         depth=9,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='more coherent passage is 2')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=95,
         tokens=5,
         depth=9,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='two passages are similarly coherent')

Fragment(document_cs='2d9d66d19de4993366f64e8fcab9962ceb5e6f8c4d1cdd11c36026a16c9d2302',
         id=-1,
         lineno=98,
         tokens=7,
         depth=12,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='-----------------compare no match: ')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=1,
         tokens=31,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='import re\n'
              'import json\n'
              'import os\n'
              'from tasks.base import Task, DATA_PATH\n'
              'from prompts.crosswords import * \n'
              'from models import gpt\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=1,
         tokens=176,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='Python: /tasks/crosswords.py\n'
              '  Classes: MiniCrosswordsEnv MiniCrosswordsTask\n'
              '  Methods: __init__ __len__ cot_prompt_wrap evaluate get_ans '
              'get_input prompt_status propose_outputs_unwrap '
              'propose_prompt_wrap render render_ans render_board render_clues '
              'render_gt_ans render_gt_board reset set_status '
              'standard_prompt_wrap step test_output\n'
              '  Variables and usages: DATA_PATH Task action ans_gt append '
              'base board board_gt cache cache_proposals confidence_to_value '
              'cot_prompt count crosswords data enumerate file format group '
              'index info input items join json letter letters line lines load '
              'lower match models n_evaluate_sample n_max_propose new_ans '
              'new_letter open output outputs parts pattern print prompt '
              'prompt_status_cache prompts proposal proposals '
              'proposals_to_scores propose_prompt r_all r_letter r_word range '
              'reverse score sorted split standard_prompt startswith '
              'staticmethod status steps strip tasks times upper value_prompt '
              'word\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=6,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=6,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=7,
         tokens=7,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\nclass MiniCrosswordsEnv:\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=8,
         tokens=6,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='class MiniCrosswordsEnv:\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=9,
         tokens=70,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="    def __init__(self, file='mini0505.json'):\n"
              "        self.file = f'data/crosswords/{file}'\n"
              '        self.file = json.load(open(self.file))\n'
              '        self.n = len(self.file)\n'
              '        self.cache = {}\n'
              '        self.idx = None\n'
              '        self.times = 0\n'
              '        self.prompt_status_cache = {}\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=9,
         tokens=70,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body="    def __init__(self, file='mini0505.json'):\n"
              "        self.file = f'data/crosswords/{file}'\n"
              '        self.file = json.load(open(self.file))\n'
              '        self.n = len(self.file)\n'
              '        self.cache = {}\n'
              '        self.idx = None\n'
              '        self.times = 0\n'
              '        self.prompt_status_cache = {}\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=9,
         tokens=69,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='__init__',
         body="def __init__(self, file='mini0505.json'):\n"
              "        self.file = f'data/crosswords/{file}'\n"
              '        self.file = json.load(open(self.file))\n'
              '        self.n = len(self.file)\n'
              '        self.cache = {}\n'
              '        self.idx = None\n'
              '        self.times = 0\n'
              '        self.prompt_status_cache = {}')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=17,
         tokens=13,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n    def __len__(self):\n        return self.n\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=17,
         tokens=13,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='\n    def __len__(self):\n        return self.n\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=18,
         tokens=10,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='__len__',
         body='def __len__(self):\n        return self.n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=20,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def reset(self, idx, board=None, status=None, steps=None):\n'
              '        self.idx = idx\n'
              '        self.data, self.board_gt = self.file[idx]\n'
              "        self.board = ['_'] * 25\n"
              "        self.ans = ['_____'] * 10\n"
              '        self.ans_gt = self.get_ans(self.board_gt)\n'
              '        self.steps = 0\n'
              '        self.status = [0] * 10  # 0: unfilled; 1: filled; 2: '
              'filled then changed\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=20,
         tokens=108,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='    \n'
              '    def reset(self, idx, board=None, status=None, steps=None):\n'
              '        self.idx = idx\n'
              '        self.data, self.board_gt = self.file[idx]\n'
              "        self.board = ['_'] * 25\n"
              "        self.ans = ['_____'] * 10\n"
              '        self.ans_gt = self.get_ans(self.board_gt)\n'
              '        self.steps = 0\n'
              '        self.status = [0] * 10  # 0: unfilled; 1: filled; 2: '
              'filled then changed\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=21,
         tokens=106,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='reset',
         body='def reset(self, idx, board=None, status=None, steps=None):\n'
              '        self.idx = idx\n'
              '        self.data, self.board_gt = self.file[idx]\n'
              "        self.board = ['_'] * 25\n"
              "        self.ans = ['_____'] * 10\n"
              '        self.ans_gt = self.get_ans(self.board_gt)\n'
              '        self.steps = 0\n'
              '        self.status = [0] * 10  # 0: unfilled; 1: filled; 2: '
              'filled then changed\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=28,
         tokens=18,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# 0: unfilled; 1: filled; 2: filled then changed')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=29,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        if board is not None:\n'
              '            self.board = board\n'
              '            self.ans = self.get_ans(self.board)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=29,
         tokens=24,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='        if board is not None:\n'
              '            self.board = board\n'
              '            self.ans = self.get_ans(self.board)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=29,
         tokens=24,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='reset',
         body='        if board is not None:\n'
              '            self.board = board\n'
              '            self.ans = self.get_ans(self.board)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=32,
         tokens=13,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        if status is not None:\n'
              '            self.status = status\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=32,
         tokens=13,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='        if status is not None:\n'
              '            self.status = status\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=32,
         tokens=13,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='reset',
         body='        if status is not None:\n'
              '            self.status = status\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=34,
         tokens=18,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        if steps is not None:\n'
              '            self.steps = steps\n'
              '        return self.render()\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=34,
         tokens=18,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='        if steps is not None:\n'
              '            self.steps = steps\n'
              '        return self.render()\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=34,
         tokens=18,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='reset',
         body='        if steps is not None:\n'
              '            self.steps = steps\n'
              '        return self.render()')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=37,
         tokens=29,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '\n'
              '    def prompt_status(self):\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=37,
         tokens=29,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='    \n'
              '\n'
              '    def prompt_status(self):\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=39,
         tokens=27,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='prompt_status',
         body='def prompt_status(self):\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=41,
         tokens=29,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        for ans, data, status in zip(self.ans, self.data, '
              'self.status):\n'
              '            # if status != 0: continue\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=41,
         tokens=29,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='        for ans, data, status in zip(self.ans, self.data, '
              'self.status):\n'
              '            # if status != 0: continue\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=41,
         tokens=29,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='prompt_status',
         body='        for ans, data, status in zip(self.ans, self.data, '
              'self.status):\n'
              '            # if status != 0: continue\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=42,
         tokens=8,
         depth=5,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# if status != 0: continue')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=43,
         tokens=40,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=43,
         tokens=40,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body="            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=43,
         tokens=40,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='prompt_status',
         body="            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=47,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='            if prompt in self.prompt_status_cache:\n'
              '                res = self.prompt_status_cache[prompt]\n'
              '            else:\n'
              '                res = gpt(prompt)[0]\n'
              '                self.prompt_status_cache[prompt] = res\n'
              '            # print(line)\n'
              '            # print(res)\n'
              '            # print()\n'
              "            res = res.split('\\n')[-1].strip()\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=47,
         tokens=69,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='            if prompt in self.prompt_status_cache:\n'
              '                res = self.prompt_status_cache[prompt]\n'
              '            else:\n'
              '                res = gpt(prompt)[0]\n'
              '                self.prompt_status_cache[prompt] = res\n'
              '            # print(line)\n'
              '            # print(res)\n'
              '            # print()\n'
              "            res = res.split('\\n')[-1].strip()\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=47,
         tokens=69,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='prompt_status',
         body='            if prompt in self.prompt_status_cache:\n'
              '                res = self.prompt_status_cache[prompt]\n'
              '            else:\n'
              '                res = gpt(prompt)[0]\n'
              '                self.prompt_status_cache[prompt] = res\n'
              '            # print(line)\n'
              '            # print(res)\n'
              '            # print()\n'
              "            res = res.split('\\n')[-1].strip()\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=56,
         tokens=22,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='            if res in count: count[res] += 1\n'
              '        # print(count)\n'
              '        return count\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=56,
         tokens=22,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='            if res in count: count[res] += 1\n'
              '        # print(count)\n'
              '        return count\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=56,
         tokens=21,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='prompt_status',
         body='            if res in count: count[res] += 1\n'
              '        # print(count)\n'
              '        return count')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=59,
         tokens=52,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def render_gt_board(self):\n'
              '        s = "GT Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ' '.join(self.board_gt[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=59,
         tokens=52,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='    \n'
              '    def render_gt_board(self):\n'
              '        s = "GT Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ' '.join(self.board_gt[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=60,
         tokens=49,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='render_gt_board',
         body='def render_gt_board(self):\n'
              '        s = "GT Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ' '.join(self.board_gt[i*5:(i+1)*5]) + '\\n'\n"
              '        return s')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=65,
         tokens=49,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def render_board(self):\n'
              '        s = "Current Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ''.join(self.board[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=65,
         tokens=49,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='    \n'
              '    def render_board(self):\n'
              '        s = "Current Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ''.join(self.board[i*5:(i+1)*5]) + '\\n'\n"
              '        return s\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=66,
         tokens=46,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='render_board',
         body='def render_board(self):\n'
              '        s = "Current Board:\\n"\n'
              '        for i in range(5):\n'
              "            s += ''.join(self.board[i*5:(i+1)*5]) + '\\n'\n"
              '        return s')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=71,
         tokens=132,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '    def render_clues(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        return s\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=71,
         tokens=132,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='\n'
              '    def render_clues(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        return s\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=72,
         tokens=129,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='render_clues',
         body='def render_clues(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "'\\n'\n"
              '        return s')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=74,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# s += "Horizontal:\\n"')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=78,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# s += "Vertical:\\n"')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=83,
         tokens=149,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def render_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans[i] + '\\n'\n"
              '        return s\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=83,
         tokens=149,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='    \n'
              '    def render_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans[i] + '\\n'\n"
              '        return s\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=84,
         tokens=146,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='render_ans',
         body='def render_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans[i] + '\\n'\n"
              '        return s')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=86,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# s += "Horizontal:\\n"')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=90,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# s += "Vertical:\\n"')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=95,
         tokens=24,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def render_gt_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=95,
         tokens=24,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='    \n'
              '    def render_gt_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=96,
         tokens=149,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='render_gt_ans',
         body='def render_gt_ans(self, status=None):\n'
              '        s = ""\n'
              '        # s += "Horizontal:\\n"\n'
              '        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans_gt[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n'
              '        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans_gt[i] + '\\n'\n"
              '        return s')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=98,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# s += "Horizontal:\\n"')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=99,
         tokens=64,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans_gt[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=99,
         tokens=64,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='        for i in range(5):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'h' + str(i+1) + '. ' + self.data[i] + ': "
              "' + self.ans_gt[i] + '\\n'\n"
              '        # s += "Vertical:\\n"\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=102,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# s += "Vertical:\\n"')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=103,
         tokens=64,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans_gt[i] + '\\n'\n"
              '        return s\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=103,
         tokens=64,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='        for i in range(5, 10):\n'
              '            if status is None or self.status[i] == status:\n'
              "                s += 'v' + str(i-5+1) + '. ' + self.data[i] + "
              "': ' + self.ans_gt[i] + '\\n'\n"
              '        return s\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=107,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '    def render(self, status=True):\n'
              '        if status:\n'
              "            return self.render_board() + '\\nUnfilled:\\n' + "
              "self.render_ans(status=0) + '\\nFilled:\\n' + "
              "self.render_ans(status=1) + '\\nChanged:\\n' + "
              'self.render_ans(status=2)\n'
              '        else:\n'
              "            return self.render_board() + '\\n' + "
              'self.render_ans()\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=107,
         tokens=83,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='\n'
              '    def render(self, status=True):\n'
              '        if status:\n'
              "            return self.render_board() + '\\nUnfilled:\\n' + "
              "self.render_ans(status=0) + '\\nFilled:\\n' + "
              "self.render_ans(status=1) + '\\nChanged:\\n' + "
              'self.render_ans(status=2)\n'
              '        else:\n'
              "            return self.render_board() + '\\n' + "
              'self.render_ans()\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=108,
         tokens=81,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='render',
         body='def render(self, status=True):\n'
              '        if status:\n'
              "            return self.render_board() + '\\nUnfilled:\\n' + "
              "self.render_ans(status=0) + '\\nFilled:\\n' + "
              "self.render_ans(status=1) + '\\nChanged:\\n' + "
              'self.render_ans(status=2)\n'
              '        else:\n'
              "            return self.render_board() + '\\n' + "
              'self.render_ans()')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=113,
         tokens=70,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def get_ans(self, board):\n'
              "        ans = [''] * 10\n"
              '        for i in range(5):\n'
              "            ans[i] = ''.join(board[i*5:(i+1)*5])\n"
              '        for i in range(5):\n'
              "            ans[i+5] = ''.join(board[i::5])\n"
              '        return ans\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=113,
         tokens=70,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='    \n'
              '    def get_ans(self, board):\n'
              "        ans = [''] * 10\n"
              '        for i in range(5):\n'
              "            ans[i] = ''.join(board[i*5:(i+1)*5])\n"
              '        for i in range(5):\n'
              "            ans[i+5] = ''.join(board[i::5])\n"
              '        return ans\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=114,
         tokens=67,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_ans',
         body='def get_ans(self, board):\n'
              "        ans = [''] * 10\n"
              '        for i in range(5):\n'
              "            ans[i] = ''.join(board[i*5:(i+1)*5])\n"
              '        for i in range(5):\n'
              "            ans[i+5] = ''.join(board[i::5])\n"
              '        return ans')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=121,
         tokens=33,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def step(self, action):\n'
              '        self.steps += 1\n'
              "        action = action.split('\\n')[-1]\n"
              "        action = action.split('. ')\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=121,
         tokens=33,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='    \n'
              '    def step(self, action):\n'
              '        self.steps += 1\n'
              "        action = action.split('\\n')[-1]\n"
              "        action = action.split('. ')\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=122,
         tokens=31,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='step',
         body='def step(self, action):\n'
              '        self.steps += 1\n'
              "        action = action.split('\\n')[-1]\n"
              "        action = action.split('. ')\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=126,
         tokens=37,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        if len(action) != 2:\n'
              '            return \'Invalid! Format should be like "h1. '
              'apple"\', 0, False, {}\n'
              '        pos, word = action\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=126,
         tokens=37,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='        if len(action) != 2:\n'
              '            return \'Invalid! Format should be like "h1. '
              'apple"\', 0, False, {}\n'
              '        pos, word = action\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=126,
         tokens=37,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='step',
         body='        if len(action) != 2:\n'
              '            return \'Invalid! Format should be like "h1. '
              'apple"\', 0, False, {}\n'
              '        pos, word = action\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=127,
         tokens=12,
         depth=9,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Invalid! Format should be like "h1. apple"')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=129,
         tokens=28,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '        if len(word) != 5:\n'
              "            return 'Invalid! Word should have 5 letters.', 0, "
              'False, {}\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=129,
         tokens=28,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='\n'
              '        if len(word) != 5:\n'
              "            return 'Invalid! Word should have 5 letters.', 0, "
              'False, {}\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=129,
         tokens=28,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='step',
         body='\n'
              '        if len(word) != 5:\n'
              "            return 'Invalid! Word should have 5 letters.', 0, "
              'False, {}\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=131,
         tokens=9,
         depth=9,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Invalid! Word should have 5 letters.')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=132,
         tokens=37,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="        if pos.startswith('h'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx*5:(idx+1)*5] = list(word.upper())\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=132,
         tokens=37,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body="        if pos.startswith('h'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx*5:(idx+1)*5] = list(word.upper())\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=132,
         tokens=37,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='step',
         body="        if pos.startswith('h'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx*5:(idx+1)*5] = list(word.upper())\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=135,
         tokens=137,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="        elif pos.startswith('v'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx::5] = list(word.upper())\n'
              '            idx += 5  # for later status update\n'
              '        else:\n'
              "            return 'Invalid! Position should be h1-h5 or "
              "v1-v5', 0, False, {}\n"
              '        \n'
              '        self.new_ans = self.get_ans(self.board)\n'
              '        # self.status = [2 if (status == 1 and ans != new_ans) '
              'else status for status, ans, new_ans in zip(self.status, '
              'self.ans, self.new_ans)]\n'
              '        self.status = [2 if any(letter != new_letter and le')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=135,
         tokens=137,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body="        elif pos.startswith('v'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx::5] = list(word.upper())\n'
              '            idx += 5  # for later status update\n'
              '        else:\n'
              "            return 'Invalid! Position should be h1-h5 or "
              "v1-v5', 0, False, {}\n"
              '        \n'
              '        self.new_ans = self.get_ans(self.board)\n'
              '        # self.status = [2 if (status == 1 and ans != new_ans) '
              'else status for status, ans, new_ans in zip(self.status, '
              'self.ans, self.new_ans)]\n'
              '        self.status = [2 if any(letter != new_letter and l')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=135,
         tokens=137,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='step',
         body="        elif pos.startswith('v'):\n"
              '            idx = int(pos[1:]) - 1\n'
              '            self.board[idx::5] = list(word.upper())\n'
              '            idx += 5  # for later status update\n'
              '        else:\n'
              "            return 'Invalid! Position should be h1-h5 or "
              "v1-v5', 0, False, {}\n"
              '        \n'
              '        self.new_ans = self.get_ans(self.board)\n'
              '        # self.status = [2 if (status == 1 and ans != new_ans) '
              'else status for status, ans, new_ans in zip(self.status, '
              'self.ans, self.new_ans)]\n'
              '        self.status = [2 if any(letter != new_letter and l')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=138,
         tokens=5,
         depth=7,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# for later status update')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=140,
         tokens=14,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Invalid! Position should be h1-h5 or v1-v5')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=143,
         tokens=40,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# self.status = [2 if (status == 1 and ans != new_ans) else '
              'status for status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=144,
         tokens=72,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="tter != '_' for letter, new_letter in zip(ans, new_ans)) else "
              'status for status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]\n'
              '        self.status[idx] = 1\n'
              '        self.ans = self.new_ans\n'
              '        r_all = (self.board == self.board_gt)\n'
              '        r_lette')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=144,
         tokens=71,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body="etter != '_' for letter, new_letter in zip(ans, new_ans)) else "
              'status for status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]\n'
              '        self.status[idx] = 1\n'
              '        self.ans = self.new_ans\n'
              '        r_all = (self.board == self.board_gt)\n'
              '        r_lett')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=144,
         tokens=71,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='step',
         body="etter != '_' for letter, new_letter in zip(ans, new_ans)) else "
              'status for status, ans, new_ans in zip(self.status, self.ans, '
              'self.new_ans)]\n'
              '        self.status[idx] = 1\n'
              '        self.ans = self.new_ans\n'
              '        r_all = (self.board == self.board_gt)\n'
              '        r_lett')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=148,
         tokens=89,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='r = sum(a == b for a, b in zip(self.board, self.board_gt)) / '
              '25\n'
              '        r_word = sum(a == b for a, b in zip(self.ans, '
              'self.ans_gt)) / 10\n'
              '        return self.render(), r_all, (r_all or self.steps >= '
              "20), {'r_letter': r_letter, 'r_word': r_word, 'r_game': r_all}\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=148,
         tokens=89,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsEnv',
         body='er = sum(a == b for a, b in zip(self.board, self.board_gt)) / '
              '25\n'
              '        r_word = sum(a == b for a, b in zip(self.ans, '
              'self.ans_gt)) / 10\n'
              '        return self.render(), r_all, (r_all or self.steps >= '
              "20), {'r_letter': r_letter, 'r_word': r_word, 'r_game': r_all}")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=148,
         tokens=89,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='step',
         body='er = sum(a == b for a, b in zip(self.board, self.board_gt)) / '
              '25\n'
              '        r_word = sum(a == b for a, b in zip(self.ans, '
              'self.ans_gt)) / 10\n'
              '        return self.render(), r_all, (r_all or self.steps >= '
              "20), {'r_letter': r_letter, 'r_word': r_word, 'r_game': r_all}")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=151,
         tokens=71,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '\n'
              'class MiniCrosswordsTask(Task):\n'
              '    """\n'
              '    Input (x)   : Decription of a 5x5 mini crossword\n'
              '    Output (y)  : List of 10 words to fill in the crossword\n'
              '    Reward (r)  : word level and game level\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=153,
         tokens=70,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='class MiniCrosswordsTask(Task):\n'
              '    """\n'
              '    Input (x)   : Decription of a 5x5 mini crossword\n'
              '    Output (y)  : List of 10 words to fill in the crossword\n'
              '    Reward (r)  : word level and game level\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    """\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=154,
         tokens=61,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '    Input (x)   : Decription of a 5x5 mini crossword\n'
              '    Output (y)  : List of 10 words to fill in the crossword\n'
              '    Reward (r)  : word level and game level\n'
              '    Input Example: \n'
              '    Output Example: \n'
              '    ')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=161,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    def __init__(self, file):\n'
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              '        self.env = MiniCrosswordsEnv(file)  # use it as a '
              'stateless tool\n'
              '        self.xs = []\n'
              '        for idx in range(len(self.env)):\n'
              '            self.env.reset(idx)\n'
              '            self.xs.append(self.env.render_clues())\n'
              '        self.steps = 10  # TODO: variable steps??\n'
              '        self.cache_proposals = {}\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=161,
         tokens=100,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='    def __init__(self, file):\n'
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              '        self.env = MiniCrosswordsEnv(file)  # use it as a '
              'stateless tool\n'
              '        self.xs = []\n'
              '        for idx in range(len(self.env)):\n'
              '            self.env.reset(idx)\n'
              '            self.xs.append(self.env.render_clues())\n'
              '        self.steps = 10  # TODO: variable steps??\n'
              '        self.cache_proposals = {}\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=161,
         tokens=99,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='__init__',
         body='def __init__(self, file):\n'
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              '        self.env = MiniCrosswordsEnv(file)  # use it as a '
              'stateless tool\n'
              '        self.xs = []\n'
              '        for idx in range(len(self.env)):\n'
              '            self.env.reset(idx)\n'
              '            self.xs.append(self.env.render_clues())\n'
              '        self.steps = 10  # TODO: variable steps??\n'
              '        self.cache_proposals = {}')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=162,
         tokens=11,
         depth=6,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n        file: a csv file (fixed)\n        ')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=166,
         tokens=8,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# use it as a stateless tool')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=171,
         tokens=6,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# TODO: variable steps??')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=173,
         tokens=17,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n    def __len__(self) -> int:\n        return len(self.env)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=173,
         tokens=17,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='\n    def __len__(self) -> int:\n        return len(self.env)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=174,
         tokens=15,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='__len__',
         body='def __len__(self) -> int:\n        return len(self.env)')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=176,
         tokens=121,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        self.env.reset(idx)\n'
              '        return self.env.render_clues()\n'
              '    \n'
              '    # def test_output(self, idx: int, output: str):  # TODO: '
              'r_word for now\n'
              '    #     self.env.reset(idx)\n'
              "    #     info = {'r_word': 0}\n"
              "    #     for line in output.split('\\n'):\n"
              "    #         if line.startswith('h') or line.startswith('v'):\n"
              '    #             _, _, _, info = self.env.step(line)\n'
              "    #     return info['r_word']\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=176,
         tokens=121,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        self.env.reset(idx)\n'
              '        return self.env.render_clues()\n'
              '    \n'
              '    # def test_output(self, idx: int, output: str):  # TODO: '
              'r_word for now\n'
              '    #     self.env.reset(idx)\n'
              "    #     info = {'r_word': 0}\n"
              "    #     for line in output.split('\\n'):\n"
              "    #         if line.startswith('h') or line.startswith('v'):\n"
              '    #             _, _, _, info = self.env.step(line)\n'
              "    #     return info['r_word']\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=177,
         tokens=26,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_input',
         body='def get_input(self, idx: int) -> str:\n'
              '        self.env.reset(idx)\n'
              '        return self.env.render_clues()')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=181,
         tokens=22,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# def test_output(self, idx: int, output: str):  # TODO: r_word '
              'for now')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=182,
         tokens=7,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='#     self.env.reset(idx)')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=183,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="#     info = {'r_word': 0}")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=184,
         tokens=10,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="#     for line in output.split('\\n'):")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=185,
         tokens=14,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="#         if line.startswith('h') or line.startswith('v'):")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=186,
         tokens=12,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='#             _, _, _, info = self.env.step(line)')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=187,
         tokens=8,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="#     return info['r_word']")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=188,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              '        self.env.reset(idx)\n'
              "        output = output.split('Output:\\n')[-1]\n"
              "        info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}\n"
              '        for i, line in '
              "enumerate(output.strip().split('\\n')[-5:], 1):\n"
              "            letters = line.split(' ')[:5]\n"
              "            word = ''.join(letters)\n"
              "            word = word + '_' * (5 - len(word))\n"
              "            action = f'h{i}. {word}'\n"
              '            # print(action)\n'
              '            _, _, _, info = self.env.step(action)\n'
              "        info['r'] = info['r_word']\n"
              '        return info\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=188,
         tokens=150,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='    \n'
              '    def test_output(self, idx: int, output: str):\n'
              '        self.env.reset(idx)\n'
              "        output = output.split('Output:\\n')[-1]\n"
              "        info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}\n"
              '        for i, line in '
              "enumerate(output.strip().split('\\n')[-5:], 1):\n"
              "            letters = line.split(' ')[:5]\n"
              "            word = ''.join(letters)\n"
              "            word = word + '_' * (5 - len(word))\n"
              "            action = f'h{i}. {word}'\n"
              '            # print(action)\n'
              '            _, _, _, info = self.env.step(action)\n'
              "        info['r'] = info['r_word']\n"
              '        return info\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=189,
         tokens=147,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='test_output',
         body='def test_output(self, idx: int, output: str):\n'
              '        self.env.reset(idx)\n'
              "        output = output.split('Output:\\n')[-1]\n"
              "        info = {'r_word': 0, 'r_letter': 0, 'r_game': 0}\n"
              '        for i, line in '
              "enumerate(output.strip().split('\\n')[-5:], 1):\n"
              "            letters = line.split(' ')[:5]\n"
              "            word = ''.join(letters)\n"
              "            word = word + '_' * (5 - len(word))\n"
              "            action = f'h{i}. {word}'\n"
              '            # print(action)\n'
              '            _, _, _, info = self.env.step(action)\n'
              "        info['r'] = info['r_word']\n"
              '        return info')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=202,
         tokens=42,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '    def set_status(self, x: str, y: str):\n'
              '        idx = self.xs.index(x)\n'
              '        self.test_output(idx, y)  # update self.env\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=202,
         tokens=42,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='\n'
              '    def set_status(self, x: str, y: str):\n'
              '        idx = self.xs.index(x)\n'
              '        self.test_output(idx, y)  # update self.env\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=203,
         tokens=30,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='set_status',
         body='def set_status(self, x: str, y: str):\n'
              '        idx = self.xs.index(x)\n'
              '        self.test_output(idx, y)')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=208,
         tokens=30,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=208,
         tokens=30,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=208,
         tokens=24,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='standard_prompt_wrap',
         body="def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=212,
         tokens=26,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=212,
         tokens=26,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=212,
         tokens=24,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='cot_prompt_wrap',
         body="def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=214,
         tokens=37,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              "    def propose_prompt_wrap(self, x: str, y: str='') -> str:\n"
              '        self.set_status(x, y)\n'
              '        return propose_prompt.format(input=self.env.render())\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=214,
         tokens=37,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='    \n'
              "    def propose_prompt_wrap(self, x: str, y: str='') -> str:\n"
              '        self.set_status(x, y)\n'
              '        return propose_prompt.format(input=self.env.render())\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=215,
         tokens=35,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_prompt_wrap',
         body="def propose_prompt_wrap(self, x: str, y: str='') -> str:\n"
              '        self.set_status(x, y)\n'
              '        return propose_prompt.format(input=self.env.render())')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=218,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def propose_outputs_unwrap(self, x: str, y: str, outputs: '
              'list, n_max_propose: int) -> list:\n'
              "        confidence_to_value = {'certain': 1, 'high': 0.5, "
              "'medium': 0.2, 'low': 0.1}  # TODO: ad hoc\n"
              '        proposals_to_scores = {}\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=218,
         tokens=80,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='    \n'
              '    def propose_outputs_unwrap(self, x: str, y: str, outputs: '
              'list, n_max_propose: int) -> list:\n'
              "        confidence_to_value = {'certain': 1, 'high': 0.5, "
              "'medium': 0.2, 'low': 0.1}  # TODO: ad hoc\n"
              '        proposals_to_scores = {}\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=219,
         tokens=78,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_outputs_unwrap',
         body='def propose_outputs_unwrap(self, x: str, y: str, outputs: list, '
              'n_max_propose: int) -> list:\n'
              "        confidence_to_value = {'certain': 1, 'high': 0.5, "
              "'medium': 0.2, 'low': 0.1}  # TODO: ad hoc\n"
              '        proposals_to_scores = {}\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=222,
         tokens=50,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        for output in outputs:\n'
              "            lines = output.split('\\n')\n"
              "            pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=222,
         tokens=50,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='        for output in outputs:\n'
              "            lines = output.split('\\n')\n"
              "            pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=222,
         tokens=50,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_outputs_unwrap',
         body='        for output in outputs:\n'
              "            lines = output.split('\\n')\n"
              "            pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=224,
         tokens=31,
         depth=9,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='^([hv][1-5])\\. ([a-zA-Z]{5,5}) '
              '\\((certain|high|medium|low)\\).*$')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=225,
         tokens=15,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='            for line in lines:\n'
              '                match = re.match(pattern, line)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=225,
         tokens=15,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='            for line in lines:\n'
              '                match = re.match(pattern, line)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=225,
         tokens=15,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_outputs_unwrap',
         body='            for line in lines:\n'
              '                match = re.match(pattern, line)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=227,
         tokens=99,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='                if match:\n'
              '                    parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              "                    proposal = parts[0].lower() + '. ' + "
              'parts[1].lower()\n'
              '                    score = confidence_to_value.get(parts[2], '
              '0)\n'
              '                    proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score\n'
              '        \n'
              '        proposals = sorted(proposals_to_scores.items(), '
              'key=lambda x: x[1], reverse=True)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=227,
         tokens=99,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='                if match:\n'
              '                    parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              "                    proposal = parts[0].lower() + '. ' + "
              'parts[1].lower()\n'
              '                    score = confidence_to_value.get(parts[2], '
              '0)\n'
              '                    proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score\n'
              '        \n'
              '        proposals = sorted(proposals_to_scores.items(), '
              'key=lambda x: x[1], reverse=True)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=227,
         tokens=99,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_outputs_unwrap',
         body='                if match:\n'
              '                    parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              "                    proposal = parts[0].lower() + '. ' + "
              'parts[1].lower()\n'
              '                    score = confidence_to_value.get(parts[2], '
              '0)\n'
              '                    proposals_to_scores[proposal] = '
              'proposals_to_scores.get(proposal, 0) + score\n'
              '        \n'
              '        proposals = sorted(proposals_to_scores.items(), '
              'key=lambda x: x[1], reverse=True)\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=234,
         tokens=61,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        if n_max_propose != -1:\n'
              '            proposals = proposals[:n_max_propose]\n'
              "        proposals = [y + proposal[0] + '\\n' for proposal in "
              'proposals]\n'
              '        self.cache_proposals[(x, y, n_max_propose)] = '
              'proposals\n'
              '        return proposals\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=234,
         tokens=61,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='        if n_max_propose != -1:\n'
              '            proposals = proposals[:n_max_propose]\n'
              "        proposals = [y + proposal[0] + '\\n' for proposal in "
              'proposals]\n'
              '        self.cache_proposals[(x, y, n_max_propose)] = '
              'proposals\n'
              '        return proposals\n')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=234,
         tokens=60,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_outputs_unwrap',
         body='        if n_max_propose != -1:\n'
              '            proposals = proposals[:n_max_propose]\n'
              "        proposals = [y + proposal[0] + '\\n' for proposal in "
              'proposals]\n'
              '        self.cache_proposals[(x, y, n_max_propose)] = '
              'proposals\n'
              '        return proposals')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=239,
         tokens=69,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def evaluate(self, x: str, y: str, n_evaluate_sample: int) '
              '-> int:\n'
              '        self.set_status(x, y)\n'
              '        assert n_evaluate_sample == 1 # TODO: ad hoc\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=239,
         tokens=69,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='    \n'
              '    def evaluate(self, x: str, y: str, n_evaluate_sample: int) '
              '-> int:\n'
              '        self.set_status(x, y)\n'
              '        assert n_evaluate_sample == 1 # TODO: ad hoc\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=240,
         tokens=67,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='evaluate',
         body='def evaluate(self, x: str, y: str, n_evaluate_sample: int) -> '
              'int:\n'
              '        self.set_status(x, y)\n'
              '        assert n_evaluate_sample == 1 # TODO: ad hoc\n'
              "        count = {'sure': 0, 'maybe': 0, 'impossible': 0}\n")

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=244,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        for ans, data, status in zip(self.env.ans, '
              'self.env.data, self.env.status):\n'
              "            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n'
              '            res = gpt(prompt)[0]\n'
              '            print(line)\n'
              '            print(res)\n'
              '            print()\n'
              "            res = res.split('\\n')[-1].strip()\n"
              '            if res in count: count[res] += 1\n'
              '        print(count)\n'
              '        return count')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=244,
         tokens=115,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='MiniCrosswordsTask',
         body='        for ans, data, status in zip(self.env.ans, '
              'self.env.data, self.env.status):\n'
              "            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n'
              '            res = gpt(prompt)[0]\n'
              '            print(line)\n'
              '            print(res)\n'
              '            print()\n'
              "            res = res.split('\\n')[-1].strip()\n"
              '            if res in count: count[res] += 1\n'
              '        print(count)\n'
              '        return count')

Fragment(document_cs='2e5ddd138b5ed464896cfd0c21a9cd1cbe57872a74516b019b4da6f85f26524e',
         id=-1,
         lineno=244,
         tokens=115,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='evaluate',
         body='        for ans, data, status in zip(self.env.ans, '
              'self.env.data, self.env.status):\n'
              "            if ans.count('_') >= 4: continue\n"
              "            ans = ' '.join(ans.lower())\n"
              "            line = f'{data}: {ans}'\n"
              '            prompt = value_prompt.format(input=line)\n'
              '            res = gpt(prompt)[0]\n'
              '            print(line)\n'
              '            print(res)\n'
              '            print()\n'
              "            res = res.split('\\n')[-1].strip()\n"
              '            if res in count: count[res] += 1\n'
              '        print(count)\n'
              '        return count')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=1,
         tokens=12,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# Offical Repo of Tree of Thoughts (ToT)\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=1,
         tokens=26,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='# Offical Repo of Tree of Thoughts (ToT)\n'
              '## Setup\n'
              '## Experiments\n'
              '## Trajectories\n'
              '## Questions\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=2,
         tokens=9,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n![teaser](teaser.png)\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=4,
         tokens=76,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Offical implementation for paper [Tree of Thoughts: Deliberate '
              'Problem Solving with Large Language '
              'Models](https://arxiv.org/abs/2305.10601) with code, prompts, '
              'model outputs.\n'
              'Also check [its tweet '
              'thread](https://twitter.com/ShunyuYao12/status/1659357547474681857) '
              'in 1min.\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=7,
         tokens=53,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '**Note: https://github.com/kyegomez/tree-of-thoughts is not the '
              'offical/correct implementation for the results in the paper. '
              'Please check '
              'https://github.com/ysymyth/tree-of-thought-llm/issues/17**\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=9,
         tokens=23,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Please cite the paper and star this repo if you use ToT and '
              'find it interesting/useful. Thanks!\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=11,
         tokens=108,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '```bibtex\n'
              '@misc{yao2023tree,\n'
              '      title={{Tree of Thoughts}: Deliberate Problem Solving '
              'with Large Language Models}, \n'
              '      author={Shunyu Yao and Dian Yu and Jeffrey Zhao and Izhak '
              'Shafran and Thomas L. Griffiths and Yuan Cao and Karthik '
              'Narasimhan},\n'
              '      year={2023},\n'
              '      eprint={2305.10601},\n'
              '      archivePrefix={arXiv},\n'
              '      primaryClass={cs.CL}\n'
              '}\n'
              '```\n'
              '\n'
              '\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=24,
         tokens=98,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='## Setup\n'
              'You need to first have an OpenAI API key and store it in the '
              'environment variable ``OPENAI_API_KEY`` (see '
              '[here](https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety)). '
              'If you use custom base url, set it by environment variable '
              '``OPENAI_API_BASE`` (e.g. https://api.openai.com/v1).\n'
              '\n'
              'Package requirement: ``pip install openai backoff sympy '
              'numpy``\n'
              '\n'
              '\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=30,
         tokens=4,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='## Experiments\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=31,
         tokens=59,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Run experiments via ``sh scripts/{game24, text, '
              'crosswords}/{standard_sampling, cot_sampling, bfs}.sh``, except '
              'in crosswords we use a DFS algorithm for ToT, which can be run '
              'via ``scripts/crosswords/search_crosswords-dfs.ipynb``.\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=33,
         tokens=31,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The very simple ``run.py`` implements the ToT + BFS algorithm, '
              'as well as the naive IO/CoT sampling. Some key arguments:\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=35,
         tokens=26,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '- ``--naive_run``: if True, run naive IO/CoT sampling instead '
              'of ToT + BFS.')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=36,
         tokens=20,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '-  ``--prompt_sample`` (choices=[``standard``, ``cot``]): '
              'sampling prompt')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=37,
         tokens=44,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '- ``--method_generate`` (choices=[``sample``, ``propose``]): '
              'thought generator, whether to sample independent thoughts (used '
              'in Creative Writing) or propose sequential thoughts (used in '
              'Game of 24)')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=38,
         tokens=47,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '- ``--method_evaluate`` (choices=[``value``, ``vote``]): state '
              'evaluator, whether to use the value states independently (used '
              'in Game of 24) or vote on states together (used in Creative '
              'Writing)')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=39,
         tokens=17,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '- ``--n_generate_sample``: number of times to prompt for '
              'thought generation')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=40,
         tokens=18,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '- ``--n_evaluate_sample``: number of times to prompt for state '
              'evaluation')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=41,
         tokens=34,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '- ``--n_select_sample``: number of states to keep from each '
              "step (i.e. ``b`` in the paper's ToT + BFS algorithm)")

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=42,
         tokens=1,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=43,
         tokens=1,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=44,
         tokens=1,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=45,
         tokens=1,
         depth=11,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=46,
         tokens=121,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='## Trajectories\n'
              "``logs/`` contains all the trajectories from the paper's "
              'experiments, except for '
              '``logs/game24/gpt-4_0.7_propose1_value3_greedy5_start900_end1000.json`` '
              'which was reproduced after the paper (as the original '
              'experiment was done in a notebook) and achieved a 69\\% score '
              'instead of the original 74\\% score due to randomness in GPT '
              'decoding. We hope to aggregate multiple runs in the future to '
              'account for sampling randomness and update the paper, but this '
              "shouldn't affect the main conclusions of the paper.\n"
              '\n'
              '\n'
              '\n')

Fragment(document_cs='334fb72d2b30576a824845db75665cd394c36ec1c5710d356faa1829e26ad65b',
         id=-1,
         lineno=51,
         tokens=25,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='## Questions\n'
              'Feel free to contact shunyuyao.cs@gmail.com or open an issue if '
              'you have any questions.\n'
              '\n'
              '\n'
              '\n')

Fragment(document_cs='357bb084ec32bd6d7bc74b7161d91ba25f74c85bb2fb9e57247ae0d04cdf6db3',
         id=-1,
         lineno=1,
         tokens=87,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='python run.py \\\n'
              '    --task text \\\n'
              '    --task_file_path data_100_random_text.txt \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 1 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample cot \\\n'
              '    --n_generate_sample 10 \\\n'
              '    --temperature 1.0 \\\n'
              '    ${@}\n'
              '\n'
              '# 0.03 dollars per line ->  3 dollars for 100 lines?')

Fragment(document_cs='357bb084ec32bd6d7bc74b7161d91ba25f74c85bb2fb9e57247ae0d04cdf6db3',
         id=-1,
         lineno=1,
         tokens=10,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /scripts/text/cot_sampling.sh\n')

Fragment(document_cs='38ed34c90fad47e0b47569206df5f92afee1cdca9e029228e73dade732457a11',
         id=-1,
         lineno=1,
         tokens=27,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: '
              '/logs/crosswords/gpt-4_0.7_naive_standard_sample_10_start0_end20.json\n')

Fragment(document_cs='392b9809099f3a288012fce1f2680b58ad121d09584d0403250f4e0aa8d84501',
         id=-1,
         lineno=1,
         tokens=10,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /data/24/24.csv\n')

Fragment(document_cs='3d28935f1f79f77db7958087f5581ae2ba108ab0a2b7e1cd7a2d28843aed8e1d',
         id=-1,
         lineno=1,
         tokens=60,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='python run.py \\\n'
              '    --task game24 \\\n'
              '    --task_file_path 24.csv \\\n'
              '    --task_start_index 900 \\\n'
              '    --task_end_index 1000 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample standard \\\n'
              '    --n_generate_sample 100 \\\n'
              '    ${@}')

Fragment(document_cs='3d28935f1f79f77db7958087f5581ae2ba108ab0a2b7e1cd7a2d28843aed8e1d',
         id=-1,
         lineno=1,
         tokens=11,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /scripts/game24/standard_sampling.sh\n')

Fragment(document_cs='50590d5886fac5e0971f483df93668a8f3c638d8312a490655b869a93d569154',
         id=-1,
         lineno=1,
         tokens=13,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /data/crosswords/mini0505.json\n')

Fragment(document_cs='6ce5873a97aa366b7437d1140093ac5f7109baaee600c2ece54ba72e3d1d1eef',
         id=-1,
         lineno=1,
         tokens=62,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='python run.py \\\n'
              '    --task crosswords \\\n'
              '    --task_file_path mini0505_0_100_5.json \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 20 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample standard \\\n'
              '    --n_generate_sample 10 ')

Fragment(document_cs='6ce5873a97aa366b7437d1140093ac5f7109baaee600c2ece54ba72e3d1d1eef',
         id=-1,
         lineno=1,
         tokens=12,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /scripts/crosswords/standard_sampling.sh\n')

Fragment(document_cs='72e8590e730454eb76e0c07673c568ababd669e40200cdf3478718fcd708e50e',
         id=-1,
         lineno=1,
         tokens=16,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /logs/crosswords/infoss_dfs_prune.json\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=1,
         tokens=74,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='import re\n'
              'import os\n'
              'import sympy\n'
              'import pandas as pd\n'
              'from tasks.base import Task, DATA_PATH\n'
              'from prompts.game24 import * \n'
              '\n'
              '\n'
              'def get_current_numbers(y: str) -> str:\n'
              "    last_line = y.strip().split('\\n')[-1]\n"
              "    return last_line.split('left: ')[-1].split(')')[0]\n")

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=1,
         tokens=126,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='Python: /tasks/game24.py\n'
              '  Functions: get_current_numbers\n'
              '  Classes: Game24Task\n'
              '  Methods: __init__ __len__ cot_prompt_wrap get_input '
              'propose_prompt_wrap standard_prompt_wrap test_output '
              'value_outputs_unwrap value_prompt_wrap\n'
              '  Variables and usages: DATA_PATH Exception Task answer base '
              'cot_prompt count current_numbers data expression file findall '
              'format game24 input items join last_line lower name numbers '
              'output pandas path problem_numbers prompt prompts '
              'propose_prompt read_csv replace simplify sorted split '
              'standard_prompt staticmethod steps stops strip sympy tasks '
              'value value_cache value_last_step_prompt value_map value_names '
              'value_outputs value_prompt\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=6,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=6,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=9,
         tokens=43,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_current_numbers',
         body='def get_current_numbers(y: str) -> str:\n'
              "    last_line = y.strip().split('\\n')[-1]\n"
              "    return last_line.split('left: ')[-1].split(')')[0]")

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=12,
         tokens=61,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '\n'
              'class Game24Task(Task):\n'
              '    """\n'
              '    Input (x)   : a string of 4 numbers\n'
              '    Output (y)  : a trajectory of 3 steps to reach 24\n'
              '    Reward (r)  : 0 or 1, depending on whether the trajectory '
              'is ')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=14,
         tokens=60,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body='class Game24Task(Task):\n'
              '    """\n'
              '    Input (x)   : a string of 4 numbers\n'
              '    Output (y)  : a trajectory of 3 steps to reach 24\n'
              '    Reward (r)  : 0 or 1, depending on whether the trajectory '
              'is c')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=15,
         tokens=143,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '    Input (x)   : a string of 4 numbers\n'
              '    Output (y)  : a trajectory of 3 steps to reach 24\n'
              '    Reward (r)  : 0 or 1, depending on whether the trajectory '
              'is correct\n'
              '    Input Example: \n'
              '        1 2 3 4\n'
              '    Output Example: \n'
              '        1 + 2 = 3 (left: 3 3 4)\n'
              '        3 + 3 = 6 (left: 4 6)\n'
              '        6 * 4 = 24 (left: 24)\n'
              '        (1 + 2 + 3) * 4 = 24\n'
              '    ')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=18,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='correct\n'
              '    Input Example: \n'
              '        1 2 3 4\n'
              '    Output Example: \n'
              '        1 + 2 = 3 (left: 3 3 4)\n'
              '        3 + 3 = 6 (left: 4 6)\n'
              '        6 * 4 = 24 (left: 24)\n'
              '        (1 + 2 + 3) * 4 = 24\n'
              '    """\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=18,
         tokens=92,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body='orrect\n'
              '    Input Example: \n'
              '        1 2 3 4\n'
              '    Output Example: \n'
              '        1 + 2 = 3 (left: 3 3 4)\n'
              '        3 + 3 = 6 (left: 4 6)\n'
              '        6 * 4 = 24 (left: 24)\n'
              '        (1 + 2 + 3) * 4 = 24\n'
              '    """\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=27,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="    def __init__(self, file='24.csv'):\n"
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, '24', file)\n"
              "        self.data = list(pd.read_csv(path)['Puzzles'])\n"
              '        self.value_cache = {}\n'
              '        self.steps = 4\n'
              "        self.stops = ['\\n'] * 4\n")

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=27,
         tokens=84,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body="    def __init__(self, file='24.csv'):\n"
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, '24', file)\n"
              "        self.data = list(pd.read_csv(path)['Puzzles'])\n"
              '        self.value_cache = {}\n'
              '        self.steps = 4\n'
              "        self.stops = ['\\n'] * 4\n")

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=27,
         tokens=82,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='__init__',
         body="def __init__(self, file='24.csv'):\n"
              '        """\n'
              '        file: a csv file (fixed)\n'
              '        """\n'
              '        super().__init__()\n'
              "        path = os.path.join(DATA_PATH, '24', file)\n"
              "        self.data = list(pd.read_csv(path)['Puzzles'])\n"
              '        self.value_cache = {}\n'
              '        self.steps = 4\n'
              "        self.stops = ['\\n'] * 4")

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=28,
         tokens=11,
         depth=6,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n        file: a csv file (fixed)\n        ')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=37,
         tokens=17,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=37,
         tokens=17,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body='\n    def __len__(self) -> int:\n        return len(self.data)\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=38,
         tokens=15,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='__len__',
         body='def __len__(self) -> int:\n        return len(self.data)')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=40,
         tokens=20,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=40,
         tokens=20,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body='    \n'
              '    def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=41,
         tokens=18,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_input',
         body='def get_input(self, idx: int) -> str:\n'
              '        return self.data[idx]')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=43,
         tokens=140,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]\n"
              "        numbers = re.findall(r'\\d+', expression)\n"
              "        problem_numbers = re.findall(r'\\d+', self.data[idx])\n"
              '        if sorted(numbers) != sorted(problem_numbers):\n'
              "            return {'r': 0}\n"
              '        try:\n'
              '            # print(sympy.simplify(expression))\n'
              "            return {'r': int(sympy.simplify(expression) == "
              '24)}\n'
              '        except Exception as e:\n'
              '            # print(e)\n'
              "            return {'r': 0}\n"
              '            \n'
              '    @staticmethod\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=43,
         tokens=140,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body='\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]\n"
              "        numbers = re.findall(r'\\d+', expression)\n"
              "        problem_numbers = re.findall(r'\\d+', self.data[idx])\n"
              '        if sorted(numbers) != sorted(problem_numbers):\n'
              "            return {'r': 0}\n"
              '        try:\n'
              '            # print(sympy.simplify(expression))\n'
              "            return {'r': int(sympy.simplify(expression) == "
              '24)}\n'
              '        except Exception as e:\n'
              '            # print(e)\n'
              "            return {'r': 0}\n"
              '            \n'
              '    @staticmethod\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=44,
         tokens=133,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='test_output',
         body='def test_output(self, idx: int, output: str):\n'
              '        expression = '
              "output.strip().split('\\n')[-1].lower().replace('answer: ', "
              "'').split('=')[0]\n"
              "        numbers = re.findall(r'\\d+', expression)\n"
              "        problem_numbers = re.findall(r'\\d+', self.data[idx])\n"
              '        if sorted(numbers) != sorted(problem_numbers):\n'
              "            return {'r': 0}\n"
              '        try:\n'
              '            # print(sympy.simplify(expression))\n'
              "            return {'r': int(sympy.simplify(expression) == "
              '24)}\n'
              '        except Exception as e:\n'
              '            # print(e)\n'
              "            return {'r': 0}")

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=51,
         tokens=10,
         depth=5,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# print(sympy.simplify(expression))')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=58,
         tokens=30,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=58,
         tokens=30,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body="    def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y\n'
              '\n'
              '    @staticmethod\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=58,
         tokens=24,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='standard_prompt_wrap',
         body="def standard_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return standard_prompt.format(input=x) + y')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=62,
         tokens=30,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=62,
         tokens=30,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body="    def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=62,
         tokens=24,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='cot_prompt_wrap',
         body="def cot_prompt_wrap(x: str, y:str='') -> str:\n"
              '        return cot_prompt.format(input=x) + y')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=66,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="    def propose_prompt_wrap(x: str, y: str='') -> str:\n"
              '        current_numbers = get_current_numbers(y if y else x)\n'
              "        if current_numbers == '24':\n"
              "            prompt = cot_prompt.format(input=x) + 'Steps:' + y\n"
              '            # print([prompt])\n'
              '        else:\n'
              '            prompt = '
              'propose_prompt.format(input=current_numbers)\n'
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=66,
         tokens=80,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body="    def propose_prompt_wrap(x: str, y: str='') -> str:\n"
              '        current_numbers = get_current_numbers(y if y else x)\n'
              "        if current_numbers == '24':\n"
              "            prompt = cot_prompt.format(input=x) + 'Steps:' + y\n"
              '            # print([prompt])\n'
              '        else:\n'
              '            prompt = '
              'propose_prompt.format(input=current_numbers)\n'
              '        return prompt\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=66,
         tokens=74,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_prompt_wrap',
         body="def propose_prompt_wrap(x: str, y: str='') -> str:\n"
              '        current_numbers = get_current_numbers(y if y else x)\n'
              "        if current_numbers == '24':\n"
              "            prompt = cot_prompt.format(input=x) + 'Steps:' + y\n"
              '            # print([prompt])\n'
              '        else:\n'
              '            prompt = '
              'propose_prompt.format(input=current_numbers)\n'
              '        return prompt')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=76,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    def value_prompt_wrap(x: str, y: str) -> str:\n'
              "        last_line = y.strip().split('\\n')[-1]\n"
              "        if 'left: ' not in last_line:  # last step\n"
              "            ans = last_line.lower().replace('answer: ', '')\n"
              '            # print([value_last_step_prompt.format(input=x, '
              'answer=ans)])\n'
              '            return value_last_step_prompt.format(input=x, '
              'answer=ans)\n'
              '        current_numbers = get_current_numbers(y)\n'
              '        return value_prompt.format(input=current_numbers)\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=76,
         tokens=112,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body='    def value_prompt_wrap(x: str, y: str) -> str:\n'
              "        last_line = y.strip().split('\\n')[-1]\n"
              "        if 'left: ' not in last_line:  # last step\n"
              "            ans = last_line.lower().replace('answer: ', '')\n"
              '            # print([value_last_step_prompt.format(input=x, '
              'answer=ans)])\n'
              '            return value_last_step_prompt.format(input=x, '
              'answer=ans)\n'
              '        current_numbers = get_current_numbers(y)\n'
              '        return value_prompt.format(input=current_numbers)\n'
              '    \n'
              '    @staticmethod\n')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=76,
         tokens=106,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='value_prompt_wrap',
         body='def value_prompt_wrap(x: str, y: str) -> str:\n'
              "        last_line = y.strip().split('\\n')[-1]\n"
              "        if 'left: ' not in last_line:  # last step\n"
              "            ans = last_line.lower().replace('answer: ', '')\n"
              '            # print([value_last_step_prompt.format(input=x, '
              'answer=ans)])\n'
              '            return value_last_step_prompt.format(input=x, '
              'answer=ans)\n'
              '        current_numbers = get_current_numbers(y)\n'
              '        return value_prompt.format(input=current_numbers)')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=80,
         tokens=15,
         depth=7,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# print([value_last_step_prompt.format(input=x, answer=ans)])')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=86,
         tokens=123,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    def value_outputs_unwrap(x: str, y: str, value_outputs: '
              'list) -> float:\n'
              "        if len(y.strip().split('\\n')) == 4 and 'answer' not in "
              'y.lower():\n'
              '            return 0\n'
              "        value_names = [_.split('\\n')[-1] for _ in "
              'value_outputs]\n'
              "        value_map = {'impossible': 0.001, 'likely': 1, 'sure': "
              '20}  # TODO: ad hoc\n'
              '        value = sum(value * value_names.count(name) for name, '
              'value in value_map.items())\n'
              '        return value')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=86,
         tokens=123,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Game24Task',
         body='    def value_outputs_unwrap(x: str, y: str, value_outputs: '
              'list) -> float:\n'
              "        if len(y.strip().split('\\n')) == 4 and 'answer' not in "
              'y.lower():\n'
              '            return 0\n'
              "        value_names = [_.split('\\n')[-1] for _ in "
              'value_outputs]\n'
              "        value_map = {'impossible': 0.001, 'likely': 1, 'sure': "
              '20}  # TODO: ad hoc\n'
              '        value = sum(value * value_names.count(name) for name, '
              'value in value_map.items())\n'
              '        return value')

Fragment(document_cs='7853507f89cad760b51f6bac21ce27812a6946e2f62ae4023ba74eb8baf701b4',
         id=-1,
         lineno=86,
         tokens=122,
         depth=4,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='value_outputs_unwrap',
         body='def value_outputs_unwrap(x: str, y: str, value_outputs: list) '
              '-> float:\n'
              "        if len(y.strip().split('\\n')) == 4 and 'answer' not in "
              'y.lower():\n'
              '            return 0\n'
              "        value_names = [_.split('\\n')[-1] for _ in "
              'value_outputs]\n'
              "        value_map = {'impossible': 0.001, 'likely': 1, 'sure': "
              '20}  # TODO: ad hoc\n'
              '        value = sum(value * value_names.count(name) for name, '
              'value in value_map.items())\n'
              '        return value')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=1,
         tokens=65,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="It isn't difficult to do a handstand if you just stand on your "
              'hands. It caught him off guard that space smelled of seared '
              'steak. When she didn’t like a guy who was trying to pick her '
              'up, she started using sign language. Each person who knows you '
              'has a different perception of who you are.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=1,
         tokens=61,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The hawk didn’t understand why the ground squirrels didn’t want '
              'to be his friend. If I don’t like something, I’ll stay away '
              'from it. People keep telling me "orange" but I still prefer '
              '"pink". He dreamed of leaving his law firm to open a portable '
              'dog wash.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=1,
         tokens=12,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /data/text/data_100_random_text.txt\n')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=2,
         tokens=73,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'My biggest joy is roasting almonds while stalking prey. You '
              "realize you're not alone as you sit in your bedroom massaging "
              'your calves after a long day of playing tug-of-war with Grandpa '
              'Joe in the hospital. The ants enjoyed the barbecue more than '
              'the family. The hawk didn’t understand why the ground squirrels '
              'didn’t want to be his friend.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=3,
         tokens=62,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'The overpass went under the highway and into a secret world. He '
              'found his art never progressed when he literally used his sweat '
              'and tears. It was always dangerous to drive with him since he '
              'insisted the safety cones were a slalom course.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=4,
         tokens=77,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              "You realize you're not alone as you sit in your bedroom "
              'massaging your calves after a long day of playing tug-of-war '
              'with Grandpa Joe in the hospital. I was starting to worry that '
              "my pet turtle could tell what I was thinking. He's in a boy "
              "band which doesn't make much sense for a snake.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=5,
         tokens=69,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He was surprised that his immense laziness was inspirational to '
              "others. Instead of a bachelorette party You realize you're not "
              'alone as you sit in your bedroom massaging your calves after a '
              'long day of playing tug-of-war with Grandpa Joe in the '
              'hospital. If I don’t like something, I’ll stay away from it.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=6,
         tokens=75,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "For some unfathomable reason, the response team didn't consider "
              'a lack of milk for my cereal as a proper emergency. You realize '
              "you're not alone as you sit in your bedroom massaging your "
              'calves after a long day of playing tug-of-war with Grandpa Joe '
              'in the hospital. He poured rocks in the dungeon of his mind. '
              'I’m a living furnace.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=7,
         tokens=89,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "You realize you're not alone as you sit in your bedroom "
              'massaging your calves after a long day of playing tug-of-war '
              'with Grandpa Joe in the hospital. Today arrived with a crash of '
              'my car through the garage door. I had a friend in high school '
              'named Rick Shaw, but he was fairly useless as a mode of '
              'transport. It was always dangerous to drive with him since he '
              'insisted the safety cones were a slalom course.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=8,
         tokens=48,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He decided to fake his disappearance to avoid jail. He was all '
              'business when he wore his clown suit. We have a lot of rain in '
              'June. The snow-covered path was no help in finding his way out '
              'of the back-country.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=9,
         tokens=57,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The fence was confused about whether it was supposed to keep '
              'things in or keep things out. He quietly entered the museum as '
              'the super bowl started. When confronted with a rotary dial '
              'phone the teenager was perplexed. She discovered van life is '
              'difficult with 2 cats and a dog.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=10,
         tokens=60,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He dreamed of eating green apples with worms. Homesickness '
              "became contagious in the young campers' cabin. She couldn't "
              'understand why nobody else could see that the sky is full of '
              'cotton candy. There was no ice cream in the freezer, nor did '
              'they have money to go to the store.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=11,
         tokens=60,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "A glittering gem is not enough. It's much more difficult to "
              'play tennis with a bowling ball than it is to bowl with a '
              'tennis ball. When confronted with a rotary dial phone the '
              'teenager was perplexed. There should have been a time and a '
              "place, but this wasn't it.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=12,
         tokens=53,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The blue parrot drove by the hitchhiking mongoose. The ants '
              'enjoyed the barbecue more than the family. The Great Dane '
              'looked more like a horse than a dog. Various sea birds are '
              'elegant, but nothing is as elegant as a gliding pelican.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=13,
         tokens=61,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The murder hornet was disappointed by the preconceived ideas '
              'people had of him. She wondered what his eyes were saying '
              'beneath his mirrored sunglasses. The fox in the tophat '
              "whispered into the ear of the rabbit. He's in a boy band which "
              "doesn't make much sense for a snake.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=14,
         tokens=56,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "There's probably enough glass in my cupboard to build an "
              'undersea aquarium. He was disappointed when he found the beach '
              'to be so sandy and the sun so sunny. She looked into the mirror '
              'and saw another person. The sudden rainstorm washed crocodiles '
              'into the ocean.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=15,
         tokens=77,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'It caught him off guard that space smelled of seared steak. The '
              'busker hoped that the people passing by would throw money, but '
              'they threw tomatoes instead, so he exchanged his hat for a '
              "juicer. Honestly, I didn't care much for the first season, so I "
              "didn't bother with the second. Today arrived with a crash of my "
              'car through the garage door.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=16,
         tokens=76,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'There was no ice cream in the freezer, nor did they have money '
              'to go to the store. The waves were crashing on the shore; it '
              'was a lovely sight. He knew it was going to be a bad day when '
              "he saw mountain lions roaming the streets. It's much more "
              'difficult to play tennis with a bowling ball than it is to bowl '
              'with a tennis ball.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=17,
         tokens=44,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              'I’m a living furnace. The near-death experience brought new '
              'ideas to light. I was starting to worry that my pet turtle '
              'could tell what I was thinking.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=18,
         tokens=85,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Written warnings in instruction manuals are worthless since '
              "rabbits can't read. You're unsure whether or not to trust him, "
              'but very thankful that you wore a turtle neck. You realize '
              "you're not alone as you sit in your bedroom massaging your "
              'calves after a long day of playing tug-of-war with Grandpa Joe '
              "in the hospital. Strawberries must be the one food that doesn't "
              'go well with this brand of paint.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=19,
         tokens=57,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "Strawberries must be the one food that doesn't go well with "
              'this brand of paint. Joe discovered that traffic cones make '
              "excellent megaphones. There's a reason that roses have thorns. "
              'She traveled because it cost the same as therapy and was a lot '
              'more enjoyable.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=20,
         tokens=67,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Her hair was windswept as she rode in the black convertible. '
              'She traveled because it cost the same as therapy and was a lot '
              "more enjoyable. It's always a good idea to seek shelter from "
              'the evil gaze of the sun. He turned in the research paper on '
              'Friday; otherwise, he would have not passed the class.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=21,
         tokens=60,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Today arrived with a crash of my car through the garage door. '
              "It's never comforting to know that your fate depends on "
              'something as unpredictable as the popping of corn. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny. Courage and stupidity were all he had.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=22,
         tokens=68,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'She had some amazing news to share but nobody to share it with. '
              "She couldn't understand why nobody else could see that the sky "
              'is full of cotton candy. Each person who knows you has a '
              'different perception of who you are. He decided that the time '
              "had come to be stronger than any of the excuses he'd used until "
              'then.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=23,
         tokens=67,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The blue parrot drove by the hitchhiking mongoose. His get rich '
              'quick scheme was to grow a cactus farm. For some unfathomable '
              "reason, the response team didn't consider a lack of milk for my "
              'cereal as a proper emergency. He picked up trash in his spare '
              "time to dump in his neighbor's yard.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=24,
         tokens=66,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Her hair was windswept as she rode in the black convertible. '
              'The ants enjoyed the barbecue more than the family. '
              "Homesickness became contagious in the young campers' cabin. The "
              'busker hoped that the people passing by would throw money, but '
              'they threw tomatoes instead, so he exchanged his hat for a '
              'juicer.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=25,
         tokens=50,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'I’m a living furnace. The near-death experience brought new '
              'ideas to light. He was surprised that his immense laziness was '
              'inspirational to others. There was no ice cream in the freezer, '
              'nor did they have money to go to the store.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=26,
         tokens=56,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "It isn't difficult to do a handstand if you just stand on your "
              "hands. I'd rather be a bird than a fish. Homesickness became "
              "contagious in the young campers' cabin. He picked up trash in "
              "his spare time to dump in his neighbor's yard.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=27,
         tokens=64,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "He poured rocks in the dungeon of his mind. It isn't difficult "
              "to do a handstand if you just stand on your hands. It's never "
              'comforting to know that your fate depends on something as '
              "unpredictable as the popping of corn. He's in a boy band which "
              "doesn't make much sense for a snake.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=28,
         tokens=55,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. The heat He picked up trash '
              "in his spare time to dump in his neighbor's yard. The anaconda "
              'was the greatest criminal mastermind in this part of the '
              'neighborhood.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=29,
         tokens=53,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'I’m a living furnace. The book is in front of the table. He '
              'walked into the basement with the horror movie from the night '
              'before playing in his head. He turned in the research paper on '
              'Friday; otherwise, he would have not passed the class.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=30,
         tokens=73,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "For some unfathomable reason, the response team didn't consider "
              'a lack of milk for my cereal as a proper emergency. He turned '
              'in the research paper on Friday; otherwise, he would have not '
              'passed the class. Her hair was windswept as she rode in the '
              'black convertible. Karen realized the only way she was getting '
              'into heaven was to cheat.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=31,
         tokens=60,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. I covered my friend in baby '
              'oil. Today arrived with a crash of my car through the garage '
              "door. She couldn't understand why nobody else could see that "
              'the sky is full of cotton candy.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=32,
         tokens=48,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The book is in front of the table. There should have been a '
              "time and a place, but this wasn't it. I'd rather be a bird than "
              'a fish. The blue parrot drove by the hitchhiking mongoose.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=33,
         tokens=47,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Karen realized the only way she was getting into heaven was to '
              'cheat. Two seats were vacant. Just because the water is red '
              "doesn't mean you can't drink it. She wondered what his eyes "
              'were saying beneath his mirrored sunglasses.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=34,
         tokens=60,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "Strawberries must be the one food that doesn't go well with "
              'this brand of paint. It caught him off guard that space smelled '
              'of seared steak. The book is in front of the table. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=35,
         tokens=75,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The team members were hard to tell apart since they all wore '
              'their hair in a ponytail. He found his art never progressed '
              'when he literally used his sweat and tears. There was no ice '
              'cream in the freezer, nor did they have money to go to the '
              "store. You're unsure whether or not to trust him, but very "
              'thankful that you wore a turtle neck.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=36,
         tokens=77,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The team members were hard to tell apart since they all wore '
              'their hair in a ponytail. It was the scarcity that fueled his '
              'creativity. He turned in the research paper on Friday; '
              'otherwise, he would have not passed the class. The busker hoped '
              'that the people passing by would throw money, but they threw '
              'tomatoes instead, so he exchanged his hat for a juicer.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=37,
         tokens=58,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Each person who knows you has a different perception of who you '
              'are. The team members were hard to tell apart since they all '
              'wore their hair in a ponytail. Just because the water is red '
              "doesn't mean you can't drink it. We have a lot of rain in June.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=38,
         tokens=58,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He found his art never progressed when he literally used his '
              'sweat and tears. Karen realized the only way she was getting '
              'into heaven was to cheat. The green tea and avocado smoothie '
              'turned out exactly as would be expected. It caught him off '
              'guard that space smelled of seared steak.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=39,
         tokens=61,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'She looked into the mirror and saw another person. The team '
              'members were hard to tell apart since they all wore their hair '
              'in a ponytail. There should have been a time and a place, but '
              "this wasn't it. Just because the water is red doesn't mean you "
              "can't drink it.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=40,
         tokens=64,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'She finally understood that grief was her love with no place '
              'for it to go. The ants enjoyed the barbecue more than the '
              'family. The snow-covered path was no help in finding his way '
              "out of the back-country. It's never comforting to know that "
              'your fate depends on something as unpredictable as the popping '
              'of corn.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=41,
         tokens=61,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'She traveled because it cost the same as therapy and was a lot '
              'more enjoyable. He decided to fake his disappearance to avoid '
              'jail. The green tea and avocado smoothie turned out exactly as '
              'would be expected. He knew it was going to be a bad day when he '
              'saw mountain lions roaming the streets.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=42,
         tokens=65,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The sudden rainstorm washed crocodiles into the ocean. She '
              'wondered what his eyes were saying beneath his mirrored '
              'sunglasses. If eating three-egg omelets causes weight-gain, '
              'budgie eggs are a good substitute. He knew it was going to be a '
              'bad day when he saw mountain lions roaming the streets.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=43,
         tokens=50,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The blue parrot drove by the hitchhiking mongoose. He dreamed '
              'of eating green apples with worms. He was all business when he '
              'wore his clown suit. The snow-covered path was no help in '
              'finding his way out of the back-country.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=44,
         tokens=48,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Just go ahead and press that button. Karen realized the only '
              'way she was getting into heaven was to cheat. My biggest joy is '
              'roasting almonds while stalking prey. The waves were crashing '
              'on the shore; it was a lovely sight.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=45,
         tokens=59,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Gwen had her best sleep ever on her new bed of nails. He '
              'learned the important lesson that a picnic at the beach on a '
              'windy day is a bad idea. It caught him off guard that space '
              'smelled of seared steak. My biggest joy is roasting almonds '
              'while stalking prey.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=46,
         tokens=60,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              'Written warnings in instruction manuals are worthless since '
              "rabbits can't read. If I don’t like something, I’ll stay away "
              'from it. He used to get confused between soldiers and '
              'shoulders, but as a military man, he now soldiers '
              'responsibility.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=47,
         tokens=67,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He learned the important lesson that a picnic at the beach on a '
              'windy day is a bad idea. The Great Dane looked more like a '
              'horse than a dog. Written warnings in instruction manuals are '
              "worthless since rabbits can't read. He decided that the time "
              "had come to be stronger than any of the excuses he'd used until "
              'then.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=48,
         tokens=48,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'My biggest joy is roasting almonds while stalking prey. When '
              'confronted with a rotary dial phone the teenager was perplexed. '
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'The near-death experience brought new ideas to light.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=49,
         tokens=43,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'My secretary is the only person who truly understands my '
              'stamp-collecting obsession. Instead of a bachelorette party '
              'Just go ahead and press that button. The ants enjoyed the '
              'barbecue more than the family.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=50,
         tokens=60,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'It caught him off guard that space smelled of seared steak. The '
              'Great Dane looked more like a horse than a dog. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny. There should have been a time and a place, but this '
              "wasn't it.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=51,
         tokens=61,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He turned in the research paper on Friday; otherwise, he would '
              'have not passed the class. Tomatoes make great weapons when '
              'water balloons aren’t available. He picked up trash in his '
              "spare time to dump in his neighbor's yard. It caught him off "
              'guard that space smelled of seared steak.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=52,
         tokens=56,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'He dreamed of leaving his law firm to open a portable dog wash. '
              'When confronted with a rotary dial phone the teenager was '
              "perplexed. There's probably enough glass in my cupboard to "
              'build an undersea aquarium.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=53,
         tokens=82,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "He's in a boy band which doesn't make much sense for a snake. I "
              'was starting to worry that my pet turtle could tell what I was '
              "thinking. You realize you're not alone as you sit in your "
              'bedroom massaging your calves after a long day of playing '
              'tug-of-war with Grandpa Joe in the hospital. He picked up trash '
              "in his spare time to dump in his neighbor's yard.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=54,
         tokens=47,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'A glittering gem is not enough. The green tea and avocado '
              'smoothie turned out exactly as would be expected. The '
              'near-death experience brought new ideas to light. Today arrived '
              'with a crash of my car through the garage door.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=55,
         tokens=57,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Her hair was windswept as she rode in the black convertible. '
              'His get rich quick scheme was to grow a cactus farm. He quietly '
              'entered the museum as the super bowl started. He was '
              'disappointed when he found the beach to be so sandy and the sun '
              'so sunny.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=56,
         tokens=59,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "He's in a boy band which doesn't make much sense for a snake. "
              'He was all business when he wore his clown suit. The hawk '
              'didn’t understand why the ground squirrels didn’t want to be '
              'his friend. When confronted with a rotary dial phone the '
              'teenager was perplexed.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=57,
         tokens=52,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'It was the scarcity that fueled his creativity. Strawberries '
              "must be the one food that doesn't go well with this brand of "
              'paint. He was all business when he wore his clown suit. The '
              'overpass went under the highway and into a secret world.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=58,
         tokens=50,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Various sea birds are elegant, but nothing is as elegant as a '
              "gliding pelican. Courage and stupidity were all he had. There's "
              'a reason that roses have thorns. He was surprised that his '
              'immense laziness was inspirational to others.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=59,
         tokens=52,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Instead of a bachelorette party The hawk didn’t understand why '
              'the ground squirrels didn’t want to be his friend. My secretary '
              'is the only person who truly understands my stamp-collecting '
              'obsession. It was the scarcity that fueled his creativity.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=60,
         tokens=63,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'For the 216th time, he said he would quit drinking soda after '
              'this last Coke. Today arrived with a crash of my car through '
              'the garage door. It was the scarcity that fueled his '
              'creativity. When she didn’t like a guy who was trying to pick '
              'her up, she started using sign language.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=61,
         tokens=51,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'If eating three-egg omelets causes weight-gain, budgie eggs are '
              'a good substitute. Just go ahead and press that button. Written '
              'warnings in instruction manuals are worthless since rabbits '
              "can't read. I covered my friend in baby oil.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=62,
         tokens=48,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'A glittering gem is not enough. Gwen had her best sleep ever on '
              'her new bed of nails. The near-death experience brought new '
              'ideas to light. She finally understood that grief was her love '
              'with no place for it to go.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=63,
         tokens=67,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He had unknowingly taken up sleepwalking as a nighttime hobby. '
              'The anaconda was the greatest criminal mastermind in this part '
              'of the neighborhood. The sudden rainstorm washed crocodiles '
              'into the ocean. For some unfathomable reason, the response team '
              "didn't consider a lack of milk for my cereal as a proper "
              'emergency.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=64,
         tokens=58,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He walked into the basement with the horror movie from the '
              'night before playing in his head. There should have been a time '
              "and a place, but this wasn't it. It caught him off guard that "
              'space smelled of seared steak. He poured rocks in the dungeon '
              'of his mind.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=65,
         tokens=60,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "You're unsure whether or not to trust him, but very thankful "
              'that you wore a turtle neck. The book is in front of the table. '
              'It caught him off guard that space smelled of seared steak. It '
              "isn't difficult to do a handstand if you just stand on your "
              'hands.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=66,
         tokens=61,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "She couldn't understand why nobody else could see that the sky "
              'is full of cotton candy. The sudden rainstorm washed crocodiles '
              'into the ocean. Various sea birds are elegant, but nothing is '
              'as elegant as a gliding pelican. Homesickness became contagious '
              "in the young campers' cabin.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=67,
         tokens=54,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The sudden rainstorm washed crocodiles into the ocean. '
              "Strawberries must be the one food that doesn't go well with "
              'this brand of paint. The ants enjoyed the barbecue more than '
              'the family. Gwen had her best sleep ever on her new bed of '
              'nails.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=68,
         tokens=56,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The Great Dane looked more like a horse than a dog. The '
              'anaconda was the greatest criminal mastermind in this part of '
              'the neighborhood. Courage and stupidity were all he had. For '
              'the 216th time, he said he would quit drinking soda after this '
              'last Coke.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=69,
         tokens=65,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "Honestly, I didn't care much for the first season, so I didn't "
              'bother with the second. My biggest joy is roasting almonds '
              'while stalking prey. It caught him off guard that space smelled '
              'of seared steak. The team members were hard to tell apart since '
              'they all wore their hair in a ponytail.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=70,
         tokens=50,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He dreamed of leaving his law firm to open a portable dog wash. '
              'I’m a living furnace. He dreamed of eating green apples with '
              "worms. It's never comforting to know that your fate depends on "
              'something as unpredictable as the popping of corn.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=71,
         tokens=53,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. Gwen had her best sleep ever '
              'on her new bed of nails. He poured rocks in the dungeon of his '
              'mind. It was the scarcity that fueled his creativity.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=72,
         tokens=62,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He poured rocks in the dungeon of his mind. Tomatoes make great '
              'weapons when water balloons aren’t available. He learned the '
              'important lesson that a picnic at the beach on a windy day is a '
              'bad idea. The team members were hard to tell apart since they '
              'all wore their hair in a ponytail.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=73,
         tokens=65,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'My secretary is the only person who truly understands my '
              'stamp-collecting obsession. She discovered van life is '
              "difficult with 2 cats and a dog. It isn't difficult to do a "
              'handstand if you just stand on your hands. The snow-covered '
              'path was no help in finding his way out of the back-country.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=74,
         tokens=65,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'His thought process was on so many levels that he gave himself '
              'a phobia of heights. When confronted with a rotary dial phone '
              'the teenager was perplexed. The fence was confused about '
              'whether it was supposed to keep things in or keep things out. '
              'There can never be too many cherries on an ice cream sundae.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=75,
         tokens=58,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He was disappointed when he found the beach to be so sandy and '
              'the sun so sunny. Just go ahead and press that button. It '
              'caught him off guard that space smelled of seared steak. '
              'Various sea birds are elegant, but nothing is as elegant as a '
              'gliding pelican.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=76,
         tokens=80,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'His thought process was on so many levels that he gave himself '
              'a phobia of heights. I had a friend in high school named Rick '
              'Shaw, but he was fairly useless as a mode of transport. He '
              'decided that the time had come to be stronger than any of the '
              "excuses he'd used until then. The fence was confused about "
              'whether it was supposed to keep things in or keep things out.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=77,
         tokens=51,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He was disappointed when he found the beach to be so sandy and '
              'the sun so sunny. He decided to fake his disappearance to avoid '
              'jail. Courage and stupidity were all he had. Each person who '
              'knows you has a different perception of who you are.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=78,
         tokens=71,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "Strawberries must be the one food that doesn't go well with "
              "this brand of paint. She couldn't understand why nobody else "
              'could see that the sky is full of cotton candy. The overpass '
              'went under the highway and into a secret world. It was always '
              'dangerous to drive with him since he insisted the safety cones '
              'were a slalom course.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=79,
         tokens=50,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'She wondered what his eyes were saying beneath his mirrored '
              "sunglasses. You're unsure whether or not to trust him, but very "
              'thankful that you wore a turtle neck. Two seats were vacant. '
              'Tomatoes make great weapons when water balloons aren’t '
              'available.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=80,
         tokens=53,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The near-death experience brought new ideas to light. His '
              'thought process was on so many levels that he gave himself a '
              "phobia of heights. I'd rather be a bird than a fish. Her hair "
              'was windswept as she rode in the black convertible.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=81,
         tokens=52,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The ants enjoyed the barbecue more than the family. Written '
              'warnings in instruction manuals are worthless since rabbits '
              "can't read. Instead of a bachelorette party There was no ice "
              'cream in the freezer, nor did they have money to go to the '
              'store.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=82,
         tokens=58,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He found his art never progressed when he literally used his '
              'sweat and tears. She finally understood that grief was her love '
              'with no place for it to go. He was surprised that his immense '
              'laziness was inspirational to others. Written warnings in '
              "instruction manuals are worthless since rabbits can't read.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=83,
         tokens=49,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The blue parrot drove by the hitchhiking mongoose. Joe '
              'discovered that traffic cones make excellent megaphones. '
              'Tomatoes make great weapons when water balloons aren’t '
              'available. When confronted with a rotary dial phone the '
              'teenager was perplexed.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=84,
         tokens=49,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He was disappointed when he found the beach to be so sandy and '
              'the sun so sunny. Two seats were vacant. Homesickness became '
              "contagious in the young campers' cabin. The overpass went under "
              'the highway and into a secret world.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=85,
         tokens=65,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'She had some amazing news to share but nobody to share it with. '
              "He picked up trash in his spare time to dump in his neighbor's "
              'yard. There can never be too many cherries on an ice cream '
              'sundae. The team members were hard to tell apart since they all '
              'wore their hair in a ponytail.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=86,
         tokens=73,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'When she didn’t like a guy who was trying to pick her up, she '
              'started using sign language. He turned in the research paper on '
              'Friday; otherwise, he would have not passed the class. If I '
              'don’t like something, I’ll stay away from it. Various sea birds '
              'are elegant, but nothing is as elegant as a gliding pelican.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=87,
         tokens=46,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'I covered my friend in baby oil. Written warnings in '
              "instruction manuals are worthless since rabbits can't read. "
              'There was coal in his stocking and he was thrilled. He had '
              'unknowingly taken up sleepwalking as a nighttime hobby.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=88,
         tokens=63,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'I was starting to worry that my pet turtle could tell what I '
              'was thinking. He learned the important lesson that a picnic at '
              'the beach on a windy day is a bad idea. The small white buoys '
              'marked the location of hundreds of crab pots. He was all '
              'business when he wore his clown suit.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=89,
         tokens=53,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "Just because the water is red doesn't mean you can't drink it. "
              'The book is in front of the table. The near-death experience '
              'brought new ideas to light. He was disappointed when he found '
              'the beach to be so sandy and the sun so sunny.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=90,
         tokens=64,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'If eating three-egg omelets causes weight-gain, budgie eggs are '
              'a good substitute. She wondered what his eyes were saying '
              'beneath his mirrored sunglasses. She looked into the mirror and '
              'saw another person. There was no ice cream in the freezer, nor '
              'did they have money to go to the store.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=91,
         tokens=61,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The hawk didn’t understand why the ground squirrels didn’t want '
              'to be his friend. He turned in the research paper on Friday; '
              'otherwise, he would have not passed the class. The blue parrot '
              'drove by the hitchhiking mongoose. My biggest joy is roasting '
              'almonds while stalking prey.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=92,
         tokens=76,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Joe discovered that traffic cones make excellent megaphones. '
              "Honestly, I didn't care much for the first season, so I didn't "
              "bother with the second. You realize you're not alone as you sit "
              'in your bedroom massaging your calves after a long day of '
              "playing tug-of-war with Grandpa Joe in the hospital. I'd rather "
              'be a bird than a fish.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=93,
         tokens=69,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "A glittering gem is not enough. Honestly, I didn't care much "
              "for the first season, so I didn't bother with the second. He "
              'decided that the time had come to be stronger than any of the '
              "excuses he'd used until then. She couldn't understand why "
              'nobody else could see that the sky is full of cotton candy.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=94,
         tokens=62,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "Honestly, I didn't care much for the first season, so I didn't "
              'bother with the second. Her hair was windswept as she rode in '
              'the black convertible. She wondered what his eyes were saying '
              'beneath his mirrored sunglasses. If I don’t like something, '
              'I’ll stay away from it.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=95,
         tokens=57,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'It was always dangerous to drive with him since he insisted the '
              'safety cones were a slalom course. He is no James Bond; his '
              'name is Roger Moore. Courage and stupidity were all he had. '
              "He's in a boy band which doesn't make much sense for a snake.")

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=96,
         tokens=77,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Today arrived with a crash of my car through the garage door. '
              'The busker hoped that the people passing by would throw money, '
              'but they threw tomatoes instead, so he exchanged his hat for a '
              "juicer. For some unfathomable reason, the response team didn't "
              'consider a lack of milk for my cereal as a proper emergency. We '
              'have a lot of rain in June.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=97,
         tokens=63,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'He turned in the research paper on Friday; otherwise, he would '
              "have not passed the class. It's never comforting to know that "
              'your fate depends on something as unpredictable as the popping '
              'of corn. The book is in front of the table. The waves were '
              'crashing on the shore; it was a lovely sight.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=98,
         tokens=65,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'I was starting to worry that my pet turtle could tell what I '
              "was thinking. Just because the water is red doesn't mean you "
              "can't drink it. It isn't difficult to do a handstand if you "
              'just stand on your hands. She traveled because it cost the same '
              'as therapy and was a lot more enjoyable.')

Fragment(document_cs='830b2fce4b217c13e9211e9ccf698ea5fa65a7980168180c9b2dfa661bdc4098',
         id=-1,
         lineno=99,
         tokens=43,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              "I’m a living furnace. There's a reason that roses have thorns. "
              'He is no James Bond; his name is Roger Moore. Her hair was '
              'windswept as she rode in the black convertible.')

Fragment(document_cs='8385a72c51468f8a0c6215336dff98f09befb28c7a6b73283b946cdc7286352d',
         id=-1,
         lineno=1,
         tokens=76,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='python run.py \\\n'
              '    --task game24 \\\n'
              '    --task_file_path 24.csv \\\n'
              '    --task_start_index 900 \\\n'
              '    --task_end_index 1000 \\\n'
              '    --method_generate propose \\\n'
              '    --method_evaluate value \\\n'
              '    --method_select greedy \\\n'
              '    --n_evaluate_sample 3 \\\n'
              '    --n_select_sample 5 \\\n'
              '    ${@}\n')

Fragment(document_cs='8385a72c51468f8a0c6215336dff98f09befb28c7a6b73283b946cdc7286352d',
         id=-1,
         lineno=1,
         tokens=10,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /scripts/game24/bfs.sh\n')

Fragment(document_cs='8647d48590873f0dae1e1439ff6a85bca4b4b5f041a3577e21138358f8045c75',
         id=-1,
         lineno=1,
         tokens=64,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="DATA_PATH = './data'\n"
              '\n'
              'class Task:\n'
              '    def __init__(self):\n'
              '        pass\n'
              '\n'
              '    def __len__(self) -> int:\n'
              '        pass\n'
              '\n'
              '    def get_input(self, idx: int) -> str:\n'
              '        pass\n'
              '\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        pass')

Fragment(document_cs='8647d48590873f0dae1e1439ff6a85bca4b4b5f041a3577e21138358f8045c75',
         id=-1,
         lineno=1,
         tokens=36,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='Python: /tasks/base.py\n'
              '  Classes: Task\n'
              '  Methods: __init__ __len__ get_input test_output\n'
              '  Variables and usages: DATA_PATH output\n')

Fragment(document_cs='8647d48590873f0dae1e1439ff6a85bca4b4b5f041a3577e21138358f8045c75',
         id=-1,
         lineno=3,
         tokens=58,
         depth=1,
         parent_id=None,
         category='class',
         definition=True,
         summary=False,
         name='Task',
         body='class Task:\n'
              '    def __init__(self):\n'
              '        pass\n'
              '\n'
              '    def __len__(self) -> int:\n'
              '        pass\n'
              '\n'
              '    def get_input(self, idx: int) -> str:\n'
              '        pass\n'
              '\n'
              '    def test_output(self, idx: int, output: str):\n'
              '        pass')

Fragment(document_cs='8647d48590873f0dae1e1439ff6a85bca4b4b5f041a3577e21138358f8045c75',
         id=-1,
         lineno=4,
         tokens=8,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='__init__',
         body='def __init__(self):\n        pass')

Fragment(document_cs='8647d48590873f0dae1e1439ff6a85bca4b4b5f041a3577e21138358f8045c75',
         id=-1,
         lineno=7,
         tokens=11,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='__len__',
         body='def __len__(self) -> int:\n        pass')

Fragment(document_cs='8647d48590873f0dae1e1439ff6a85bca4b4b5f041a3577e21138358f8045c75',
         id=-1,
         lineno=10,
         tokens=14,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_input',
         body='def get_input(self, idx: int) -> str:\n        pass')

Fragment(document_cs='8647d48590873f0dae1e1439ff6a85bca4b4b5f041a3577e21138358f8045c75',
         id=-1,
         lineno=13,
         tokens=15,
         depth=3,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='test_output',
         body='def test_output(self, idx: int, output: str):\n        pass')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=1,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='# 5 shot\n'
              "standard_prompt = '''\n"
              'Solve 5x5 mini crosswords. Given an input of 5 horizontal clues '
              'and 5 vertical clues, generate an output of 5 rows, where each '
              'row is 5 letter separated by space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To entice\n'
              'h4. To lo')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=1,
         tokens=25,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='Python: /prompts/crosswords.py\n'
              '  Variables and usages: cot_prompt propose_prompt '
              'standard_prompt value_prompt\n')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=2,
         tokens=73,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Solve 5x5 mini crosswords. Given an input of 5 horizontal clues '
              'and 5 vertical clues, generate an output of 5 rows, where each '
              'row is 5 letter separated by space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To entice\n'
              'h4. To lower;')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=9,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='wer; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a European lake\n'
              'v4. To lisp\n'
              'v5. To come in\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n'
              '\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=9,
         tokens=93,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body=' to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a European lake\n'
              'v4. To lisp\n'
              'v5. To come in\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n'
              '\n'
              'Input:\n'
              'h1. One')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=25,
         tokens=84,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body=' who saws\n'
              'h2. A fungus genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the ear\n'
              'v1. To swell; to increase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; roscid\n'
              '\n'
              'Outpu')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=26,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body=' genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the ear\n'
              'v1. To swell; to increase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; roscid\n'
              '\n'
              'Output:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=36,
         tokens=94,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='t:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permission for a pr")

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=41,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body=' A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permission for a priest to leave a diocese\n"
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primi')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=48,
         tokens=84,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='iest to leave a diocese\n'
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primitive three-sided grass)\n'
              'v3. Grape jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E T I T')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=50,
         tokens=91,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='tive three-sided grass)\n'
              'v3. Grape jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E T I T\n'
              'E X E A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=59,
         tokens=86,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'E X E A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v4. To indite; to scribble')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=65,
         tokens=107,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v4. To indite; to scribble\n'
              'v5. An insecticide\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=71,
         tokens=90,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'v5. An insecticide\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard\n'
              'h2. H2O; to irrigate\n'
              'h3. The companion to an "intro", a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=82,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'h2. H2O; to irrigate\n'
              'h3. The companion to an "intro", a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; humming\n'
              '\n')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=86,
         tokens=89,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; humming\n'
              '\n'
              'Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              '\n'
              'Output:\n')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=93,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              '\n'
              'Output:\n'
              "'''\n"
              '\n'
              '\n'
              '\n'
              "cot_prompt = '''Solve 5x5 mini crosswords. Given an input of 5 "
              'horizontal clues and 5 vertical clues, generate thoughts about '
              'which 5-letter word fits each clue, then an o')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=108,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='utput of 5 rows, where each row is 5 letter separated by '
              'space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To entice\n'
              'h4. To lower; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a Europe')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=108,
         tokens=142,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Solve 5x5 mini crosswords. Given an input of 5 horizontal clues '
              'and 5 vertical clues, generate thoughts about which 5-letter '
              'word fits each clue, then an output of 5 rows, where each row '
              'is 5 letter separated by space.\n'
              '\n'
              'Input:\n'
              'h1. A lunar valley\n'
              'h2. A fatty oil\n'
              'h3. To entice\n'
              'h4. To lower; to reduce\n'
              'h5. A solitary person\n'
              'v1. According to the roster\n'
              'v2. Another name for Port-Francqui\n'
              'v3. An illicit lover; a European lake\n'
              'v4. To lisp\n'
              'v5. To come in\n'
              '\n'
              'Thoughts:')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=118,
         tokens=106,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='an lake\n'
              'v4. To lisp\n'
              'v5. To come in\n'
              '\n'
              'Thoughts:\n'
              'h1. A lunar valley: RILLE\n'
              'h2. A fatty oil: OLEIN\n'
              'h3. To entice: TEMPT\n'
              'h4. To lower; to reduce: ABASE\n'
              'h5. A solitary person: LONER\n'
              'v1. According to the roster: ROTAL\n'
              'v2. Another name for Port-Francqui: ILEBO\n'
              'v3. An i')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=122,
         tokens=90,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'h1. A lunar valley: RILLE\n'
              'h2. A fatty oil: OLEIN\n'
              'h3. To entice: TEMPT\n'
              'h4. To lower; to reduce: ABASE\n'
              'h5. A solitary person: LONER\n'
              'v1. According to the roster: ROTAL\n'
              'v2. Another name for Port-Francqui: ILEBO\n'
              'v3. An illicit lover; ')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=130,
         tokens=112,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='llicit lover; a European lake: LEMAN\n'
              'v4. To lisp: LIPSE\n'
              'v5. To come in: ENTER\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n'
              '\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the ear\n'
              'v1. To swell; to incre')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=130,
         tokens=104,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='a European lake: LEMAN\n'
              'v4. To lisp: LIPSE\n'
              'v5. To come in: ENTER\n'
              '\n'
              'Output:\n'
              'R I L L E\n'
              'O L E I N\n'
              'T E M P T\n'
              'A B A S E\n'
              'L O N E R\n'
              '\n'
              'Input:\n'
              'h1. One who saws\n'
              'h2. A fungus genus\n'
              'h3. An assessor\n'
              'h4. Pasture land\n'
              'h5. Receiving by the ear\n'
              'v1. To')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=147,
         tokens=100,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='ase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; roscid\n'
              '\n'
              'Thoughts:\n'
              'h1. One who saws: SAWER\n'
              'h2. A fungus genus: UREDO\n'
              'h3. An assessor: RATER\n'
              'h4. Pasture land: GRAMA\n'
              'h5. Receiving by the ear: EARAL\n'
              'v')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=147,
         tokens=85,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body=' swell; to increase\n'
              'v2. The Brazilian macaw; an Australian bird\n'
              'v3. A Timorese island\n'
              'v4. Excessive fluid accumulation\n'
              'v5. Dewy; roscid\n'
              '\n'
              'Thoughts:\n'
              'h1. One who saws: SAWER\n'
              'h2. A fungus genus: UREDO\n'
              'h3. An assessor: RATER\n'
              'h4. Pastur')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=157,
         tokens=85,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='e land: GRAMA\n'
              'h5. Receiving by the ear: EARAL\n'
              'v1. To swell; to increase: SURGE\n'
              'v2. The Brazilian macaw; an Australian bird: ARARA\n'
              'v3. A Timorese island: WETAR\n'
              'v4. Excessive fluid accumulation: EDEMA\n'
              'v5. Dewy; roscid: RORAL\n'
              '\n'
              'Output')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=159,
         tokens=108,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='1. To swell; to increase: SURGE\n'
              'v2. The Brazilian macaw; an Australian bird: ARARA\n'
              'v3. A Timorese island: WETAR\n'
              'v4. Excessive fluid accumulation: EDEMA\n'
              'v5. Dewy; roscid: RORAL\n'
              '\n'
              'Output:\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=165,
         tokens=92,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body=':\n'
              'S A W E R\n'
              'U R E D O\n'
              'R A T E R\n'
              'G R A M A\n'
              'E A R A L\n'
              '\n'
              'Input:\n'
              'h1. Dandruff; scum; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permission for ")

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=173,
         tokens=84,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='; the bull-trout\n'
              'h2. One who greets; to vacillate; a British river\n'
              'h3. A Turkish written decree\n'
              'h4. Mignon; petty; little\n'
              "h5. A bishop's permission for a priest to leave a diocese\n"
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primitive three-sided grass)\n'
              'v3. Gra')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=177,
         tokens=76,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='a priest to leave a diocese\n'
              'v1. To steal; to brush across\n'
              'v2. A sedge (a primitive three-sided grass)\n'
              'v3. Grape jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Thoughts:\n'
              'h1. Dandruff; scum; the bull-')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=180,
         tokens=92,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='pe jam\n'
              'v4. A flatworm larva\n'
              'v5. Ore refuse; to prepare material for glass by heat\n'
              '\n'
              'Thoughts:\n'
              'h1. Dandruff; scum; the bull-trout: SCURF\n'
              'h2. One who greets; to vacillate; a British river: WAVER\n'
              'h3. A Turkish written decree: IRADE\n'
              'h4. Mignon; petty; little: PETIT\n')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=185,
         tokens=81,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='trout: SCURF\n'
              'h2. One who greets; to vacillate; a British river: WAVER\n'
              'h3. A Turkish written decree: IRADE\n'
              'h4. Mignon; petty; little: PETIT\n'
              "h5. A bishop's permission for a priest to leave a diocese: "
              'EXEAT\n'
              'v1. To steal; to brush acr')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=189,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="h5. A bishop's permission for a priest to leave a diocese: "
              'EXEAT\n'
              'v1. To steal; to brush across: SWIPE\n'
              'v2. A sedge (a primitive three-sided grass): CAREX\n'
              'v3. Grape jam: UVATE\n'
              'v4. A flatworm larva: REDIA\n'
              'v5. Ore refuse; to prepare material for glass by heat: FRET')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=190,
         tokens=91,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='oss: SWIPE\n'
              'v2. A sedge (a primitive three-sided grass): CAREX\n'
              'v3. Grape jam: UVATE\n'
              'v4. A flatworm larva: REDIA\n'
              'v5. Ore refuse; to prepare material for glass by heat: FRETT\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E T I T\n'
              'E X E A T')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=194,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='T\n'
              '\n'
              'Output:\n'
              'S C U R F\n'
              'W A V E R\n'
              'I R A D E\n'
              'P E T I T\n'
              'E X E A T\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=201,
         tokens=85,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '\n'
              'Input:\n'
              'h1. Presented; revealed\n'
              'h2. An interjection expressing sorrow\n'
              'h3. Benefit; result\n'
              'h4. A cigarette\n'
              'h5. Chased up a tree\n'
              'v1. Swarthy; tawny\n'
              'v2. An apiarist or bee keeper\n'
              'v3. To speak formally\n'
              'v4. To indite; to scribble\n'
              'v5. ')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=212,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='4. To indite; to scribble\n'
              'v5. An insecticide\n'
              '\n'
              'Thoughts:\n'
              'h1. Presented; revealed: SHOWN\n'
              'h2. An interjection expressing sorrow: WIRRA\n'
              'h3. Benefit; result: AVAIL\n'
              'h4. A cigarette: RETTE\n'
              'h5. Chased up a tree: TREED\n'
              'v1. Swarthy; tawny: SWART\n'
              'v2. An apiarist or bee ke')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=213,
         tokens=85,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='An insecticide\n'
              '\n'
              'Thoughts:\n'
              'h1. Presented; revealed: SHOWN\n'
              'h2. An interjection expressing sorrow: WIRRA\n'
              'h3. Benefit; result: AVAIL\n'
              'h4. A cigarette: RETTE\n'
              'h5. Chased up a tree: TREED\n'
              'v1. Swarthy; tawny: SWART\n'
              'v2. An apiarist or bee ke')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=222,
         tokens=104,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='eper: HIVER\n'
              'v3. To speak formally: ORATE\n'
              'v4. To indite; to scribble: WRITE\n'
              'v5. An insecticide: NALED\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard\n'
              'h2. H2O; to irrigate\n'
              'h3. The companion to an "intro",')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=222,
         tokens=95,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='eper: HIVER\n'
              'v3. To speak formally: ORATE\n'
              'v4. To indite; to scribble: WRITE\n'
              'v5. An insecticide: NALED\n'
              '\n'
              'Output:\n'
              'S H O W N\n'
              'W I R R A\n'
              'A V A I L\n'
              'R E T T E\n'
              'T R E E D\n'
              '\n'
              'Input:\n'
              'h1. Scald; an ancient Scandinavian bard\n'
              'h2. H2O; to irrigate\n'
              'h')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=237,
         tokens=82,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body=' a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; humming\n'
              '\n'
              'Thoughts:\n'
              'h1. Scald; an ancient Scandinavian bard: SKA')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=237,
         tokens=74,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='3. The companion to an "intro", a postscript or exit piece\n'
              'h4. An artificial fabric\n'
              'h5. Deep religious feeling\n'
              'v1. To rush; to stoop; a descent\n'
              'v2. A New Zealand fir tree\n'
              'v3. Mine refuse\n'
              'v4. The garden dormouse\n'
              'v5. Like a drone; hu')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=244,
         tokens=79,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='mming\n'
              '\n'
              'Thoughts:\n'
              'h1. Scald; an ancient Scandinavian bard: SKALD\n'
              'h2. H2O; to irrigate: WATER\n'
              'h3. The companion to an "intro", a postscript or exit piece: '
              'OUTRO\n'
              'h4. An artificial fabric: ORLON\n'
              'h5. Deep religious feeling: PIETY\n'
              'v1. T')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=247,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='LD\n'
              'h2. H2O; to irrigate: WATER\n'
              'h3. The companion to an "intro", a postscript or exit piece: '
              'OUTRO\n'
              'h4. An artificial fabric: ORLON\n'
              'h5. Deep religious feeling: PIETY\n'
              'v1. To rush; to stoop; a descent: SWOOP\n'
              'v2. A New Zealand fir tree: KAURI\n'
              'v3. Mine refuse: ATTLE\n')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=252,
         tokens=96,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='o rush; to stoop; a descent: SWOOP\n'
              'v2. A New Zealand fir tree: KAURI\n'
              'v3. Mine refuse: ATTLE\n'
              'v4. The garden dormouse: LEROT\n'
              'v5. Like a drone; humming: DRONY\n'
              '\n'
              'Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=255,
         tokens=94,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='v4. The garden dormouse: LEROT\n'
              'v5. Like a drone; humming: DRONY\n'
              '\n'
              'Output:\n'
              'S K A L D\n'
              'W A T E R\n'
              'O U T R O\n'
              'O R L O N\n'
              'P I E T Y\n'
              '\n'
              'Input:\n'
              '{input}\n'
              "'''\n"
              '\n'
              '\n'
              "propose_prompt = '''Let's play a 5 x 5 mini crossword, where "
              'each word should have exactly 5 letters.\n'
              '\n'
              '{input}\n'
              '\n'
              'Give')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=270,
         tokens=98,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="Let's play a 5 x 5 mini crossword, where each word should have "
              'exactly 5 letters.\n'
              '\n'
              '{input}\n'
              '\n'
              'Given the current status, list all possible answers for '
              'unfilled or changed words, and your confidence levels '
              '(certain/high/medium/low), using the format "h1. apple '
              '(medium)". Use "certain" cautiously and only when you are 100% '
              'sure this is the correct word. You can list more then one '
              'possible answer for each word.\n')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=274,
         tokens=122,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='n the current status, list all possible answers for unfilled or '
              'changed words, and your confidence levels '
              '(certain/high/medium/low), using the format "h1. apple '
              '(medium)". Use "certain" cautiously and only when you are 100% '
              'sure this is the correct word. You can list more then one '
              'possible answer for each word.\n'
              "'''\n"
              '\n'
              '\n'
              "value_prompt = '''Evaluate if there exists a five letter word "
              'of some meaning that fit some letter constraints '
              '(sure/maybe/impossible).\n'
              '\n'
              'Incorrect; to injure: w _ o _ g\n'
              'The letter constraint is: 5 letter')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=278,
         tokens=73,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Evaluate if there exists a five letter word of some meaning '
              'that fit some letter constraints (sure/maybe/impossible).\n'
              '\n'
              'Incorrect; to injure: w _ o _ g\n'
              'The letter constraint is: 5 letters, letter 1 is w, letter 3 is '
              'o, letter 5 is g.\n'
              'Some possible words that mean "Incorrect; to injur')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=281,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='s, letter 1 is w, letter 3 is o, letter 5 is g.\n'
              'Some possible words that mean "Incorrect; to injure":\n'
              'wrong (w r o n g): 5 letters, letter 1 is w, letter 3 is o, '
              'letter 5 is g. fit!\n'
              'sure\n'
              '\n'
              'A person with an all-consuming enthusiasm, such as for '
              'computers or anim')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=282,
         tokens=85,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='e":\n'
              'wrong (w r o n g): 5 letters, letter 1 is w, letter 3 is o, '
              'letter 5 is g. fit!\n'
              'sure\n'
              '\n'
              'A person with an all-consuming enthusiasm, such as for '
              'computers or anime: _ _ _ _ u\n'
              'The letter constraint is: 5 letters, letter 5 is u.\n'
              'Some possible words that mean "A person with an all-consu')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=286,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='e: _ _ _ _ u\n'
              'The letter constraint is: 5 letters, letter 5 is u.\n'
              'Some possible words that mean "A person with an all-consuming '
              'enthusiasm, such as for computers or anime":\n'
              'geek (g e e k): 4 letters, not 5\n'
              'otaku (o t a k u): 5 letters, letter 5 is u\n'
              'sure\n'
              '\n'
              'Dewy; ')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=288,
         tokens=103,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='ming enthusiasm, such as for computers or anime":\n'
              'geek (g e e k): 4 letters, not 5\n'
              'otaku (o t a k u): 5 letters, letter 5 is u\n'
              'sure\n'
              '\n'
              'Dewy; roscid: r _ _ _ l\n'
              'The letter constraint is: 5 letters, letter 1 is r, letter 5 is '
              'l.\n'
              'Some possible words that mean "Dewy; roscid":\n'
              'moist (m o i ')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=293,
         tokens=96,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='roscid: r _ _ _ l\n'
              'The letter constraint is: 5 letters, letter 1 is r, letter 5 is '
              'l.\n'
              'Some possible words that mean "Dewy; roscid":\n'
              'moist (m o i s t): 5 letters, letter 1 is m, not r\n'
              'humid (h u m i d): 5 letters, letter 1 is h, not r\n'
              'I cannot think of any words ')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=296,
         tokens=96,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='s t): 5 letters, letter 1 is m, not r\n'
              'humid (h u m i d): 5 letters, letter 1 is h, not r\n'
              'I cannot think of any words now. Only 2 letters are '
              'constrained, it is still likely\n'
              'maybe\n'
              '\n'
              'A woodland: _ l _ d e\n'
              'The letter constraint is: 5 letters, letter 2 is l, letter 4 is '
              'd, letter 5 is e.\n')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=298,
         tokens=83,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='now. Only 2 letters are constrained, it is still likely\n'
              'maybe\n'
              '\n'
              'A woodland: _ l _ d e\n'
              'The letter constraint is: 5 letters, letter 2 is l, letter 4 is '
              'd, letter 5 is e.\n'
              'Some possible words that mean "A woodland":\n'
              'forest (f o r e s t): 6 letters, not 5\n'
              'woods (w o ')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=303,
         tokens=95,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Some possible words that mean "A woodland":\n'
              'forest (f o r e s t): 6 letters, not 5\n'
              'woods (w o o d s): 5 letters, letter 2 is o, not l\n'
              'grove (g r o v e): 5 letters, letter 2 is r, not l\n'
              'I cannot think of any words now. 3 letters are constrained, and '
              '_ l _ d e seems a common pattern\n'
              'm')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=305,
         tokens=88,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='o d s): 5 letters, letter 2 is o, not l\n'
              'grove (g r o v e): 5 letters, letter 2 is r, not l\n'
              'I cannot think of any words now. 3 letters are constrained, and '
              '_ l _ d e seems a common pattern\n'
              'maybe\n'
              '\n'
              'An inn: _ d _ w f\n'
              'The letter constraint is: 5 letters, letter 2 is')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=308,
         tokens=101,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='aybe\n'
              '\n'
              'An inn: _ d _ w f\n'
              'The letter constraint is: 5 letters, letter 2 is d, letter 4 is '
              'w, letter 5 is f.\n'
              'Some possible words that mean "An inn":\n'
              'hotel (h o t e l): 5 letters, letter 2 is o, not d\n'
              'lodge (l o d g e): 5 letters, letter 2 is o, not d\n'
              'I cannot think of any words now. 3 l')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=311,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body=' d, letter 4 is w, letter 5 is f.\n'
              'Some possible words that mean "An inn":\n'
              'hotel (h o t e l): 5 letters, letter 2 is o, not d\n'
              'lodge (l o d g e): 5 letters, letter 2 is o, not d\n'
              'I cannot think of any words now. 3 letters are constrained, and '
              'it is extremely unlik')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=315,
         tokens=80,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='ely to have a word with pattern _ d _ w f to mean "An inn"\n'
              'impossible\n'
              '\n'
              'Chance; a parasitic worm; a fish: w r a k _\n'
              'The letter constraint is: 5 letters, letter 1 is w, letter 2 is '
              'r, letter 3 is a, letter 4 is k.\n'
              'Some possible words that mean "Chance; a parasiti')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=315,
         tokens=82,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='etters are constrained, and it is extremely unlikely to have a '
              'word with pattern _ d _ w f to mean "An inn"\n'
              'impossible\n'
              '\n'
              'Chance; a parasitic worm; a fish: w r a k _\n'
              'The letter constraint is: 5 letters, letter 1 is w, letter 2 is '
              'r, letter 3 is a, letter 4 is k.\n'
              'Some possible words tha')

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=320,
         tokens=78,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='c worm; a fish":\n'
              'fluke (f l u k e): 5 letters, letter 1 is f, not w\n'
              'I cannot think of any words now. 4 letters are constrained, and '
              'it is extremely unlikely to have a word with pattern w r a k _ '
              'to mean "Chance; a parasitic worm; a fish"\n'
              'impossible\n'
              '\n'
              '{input}\n'
              "'''")

Fragment(document_cs='899e26ea42dff19a3037c963611b6e8be16cfb449a6e975a2876a9dad2d776ba',
         id=-1,
         lineno=320,
         tokens=84,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='t mean "Chance; a parasitic worm; a fish":\n'
              'fluke (f l u k e): 5 letters, letter 1 is f, not w\n'
              'I cannot think of any words now. 4 letters are constrained, and '
              'it is extremely unlikely to have a word with pattern w r a k _ '
              'to mean "Chance; a parasitic worm; a fish"\n'
              'impossible\n'
              '\n'
              '{input}\n')

Fragment(document_cs='9016a26527aa8e1206596c6aca20ef958a14705354f6fcbe9fd19955190ed044',
         id=-1,
         lineno=1,
         tokens=11,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /logs/crosswords/env_cache.json\n')

Fragment(document_cs='9943c4c33177b8e755304aa238fcfa516e6a3f300097fb3480958b0f060ea432',
         id=-1,
         lineno=1,
         tokens=60,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='python run.py \\\n'
              '    --task game24 \\\n'
              '    --task_file_path 24.csv \\\n'
              '    --task_start_index 900 \\\n'
              '    --task_end_index 1000 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample cot \\\n'
              '    --n_generate_sample 100 \\\n'
              '    ${@}')

Fragment(document_cs='9943c4c33177b8e755304aa238fcfa516e6a3f300097fb3480958b0f060ea432',
         id=-1,
         lineno=1,
         tokens=11,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /scripts/game24/cot_sampling.sh\n')

Fragment(document_cs='a5b7591c6e494029d683778b80429a1afcb6e65da1e3362efd7bdf78dbd9ab01',
         id=-1,
         lineno=1,
         tokens=87,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='python run.py \\\n'
              '    --task text \\\n'
              '    --task_file_path data_100_random_text.txt \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 1 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample standard \\\n'
              '    --n_generate_sample 10 \\\n'
              '    --temperature 1.0 \\\n'
              '    ${@}\n'
              '\n'
              '\n'
              '# 0.03 dollars per line ->  3 dollars for 100 lines?')

Fragment(document_cs='a5b7591c6e494029d683778b80429a1afcb6e65da1e3362efd7bdf78dbd9ab01',
         id=-1,
         lineno=1,
         tokens=10,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /scripts/text/standard_sampling.sh\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=1,
         tokens=84,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='{\n'
              ' "cells": [\n'
              '  {\n'
              '   "attachments": {},\n'
              '   "cell_type": "markdown",\n'
              '   "metadata": {},\n'
              '   "source": [\n'
              '    "# Env"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": [\n'
              '    "cd ../.."\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=1,
         tokens=40,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='cd ../..\n'
              '\n'
              'import json\n'
              'from prompts.crosswords import propose_prompt, value_prompt\n'
              'from models import gpt\n'
              'from tasks.crosswords import MiniCrosswordsEnv\n'
              '\n'
              'env = MiniCrosswordsEnv()\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=1,
         tokens=8,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# Env\n\n# Prompt\n\n# DFS')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=1,
         tokens=127,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='PythonNotebook: '
              '/scripts/crosswords/search_crosswords-dfs.ipynb\n'
              '  Functions: dfs get_candidates_to_scores parse_line '
              'parse_response prompt_wrap propose_score\n'
              '  Variables and usages: MiniCrosswordsEnv action actions append '
              'best board cache candidate candidates candidates_to_scores '
              'cnt_per_state confidence_to_value copy count crosswords '
              'deepcopy done dump env_ format fout group import info infos '
              'infoss input input_str items json line lines lower match '
              'max_per_state model models open parsed_lines parsed_response '
              'parts pattern print prompt_status prompts propose_prompt prune '
              'range render render_board reset response responses reverse '
              'score sorted split status step steps tasks time_limit '
              'value_prompt\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=6,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=6,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=9,
         tokens=54,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def prompt_wrap(obs):\n'
              '    return propose_prompt.format(input=obs)\n'
              '\n'
              'print(prompt_wrap(env.reset(0)))\n'
              "# print('---------')\n"
              "# print(prompt_wrap(env.step('h2. value')[0]))\n"
              '\n'
              'import re\n'
              'import copy\n'
              'from models import gpt\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=10,
         tokens=14,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='prompt_wrap',
         body='def prompt_wrap(obs):\n'
              '    return propose_prompt.format(input=obs)')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=14,
         tokens=5,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="# print('---------')")

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=15,
         tokens=14,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="# print(prompt_wrap(env.step('h2. value')[0]))")

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=17,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=18,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=19,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=19,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=20,
         tokens=78,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def parse_line(input_str):\n'
              '    # regular expression pattern to match the input string '
              'format\n'
              "    pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n"
              '\n'
              '    # use regex to extract the parts of the input string\n'
              '    match = re.match(pattern, input_str)\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=21,
         tokens=67,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": [\n'
              '    "import json\\n",\n'
              '    "from prompts.crosswords import propose_prompt, '
              'value_prompt\\n",\n'
              '    "from models import gpt\\n",\n'
              '    "from tasks.crosswords import MiniCrossw')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=21,
         tokens=117,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='parse_line',
         body='def parse_line(input_str):\n'
              '    # regular expression pattern to match the input string '
              'format\n'
              "    pattern = r'^([hv][1-5])\\. ([a-zA-Z]{5,5}) "
              "\\((certain|high|medium|low)\\).*$'\n"
              '\n'
              '    # use regex to extract the parts of the input string\n'
              '    match = re.match(pattern, input_str)\n'
              '\n'
              '    if match:\n'
              '        # extract the matched groups\n'
              '        parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              '        return parts\n'
              '    else:\n'
              '        return None')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=22,
         tokens=10,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# regular expression pattern to match the input string format')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=23,
         tokens=31,
         depth=5,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='^([hv][1-5])\\. ([a-zA-Z]{5,5}) '
              '\\((certain|high|medium|low)\\).*$')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=25,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# use regex to extract the parts of the input string')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=27,
         tokens=84,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '    if match:\n'
              '        # extract the matched groups\n'
              '        parts = [match.group(1), match.group(2), '
              'match.group(3)]\n'
              '        return parts\n'
              '    else:\n'
              '        return None\n'
              '\n'
              "confidence_to_value = {'certain': 1, 'high': 0.5, 'medium': "
              "0.2, 'low': 0.1}  # TODO: ad hoc\n")

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=29,
         tokens=81,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='ordsEnv\\n",\n'
              '    "\\n",\n'
              '    "env = MiniCrosswordsEnv()"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "attachments": {},\n'
              '   "cell_type": "markdown",\n'
              '   "metadata": {},\n'
              '   "source": [\n'
              '    "# Prompt"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": ')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=29,
         tokens=5,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# extract the matched groups')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=36,
         tokens=113,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def parse_response(response):\n'
              '    # split the response into lines\n'
              "    lines = response.split('\\n')\n"
              '\n'
              '    # parse each line\n'
              '    parsed_lines = [parse_line(line) for line in lines]\n'
              '\n'
              "    # filter out the lines that didn't match the format\n"
              "    parsed_lines = [(line[0].lower() + '. ' + line[1].lower(), "
              'confidence_to_value.get(line[2], 0)) for line in parsed_lines '
              'if line is not None]\n'
              '\n'
              '    return parsed_lines if len(parsed_lines) >= 1 else None\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=37,
         tokens=111,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='parse_response',
         body='def parse_response(response):\n'
              '    # split the response into lines\n'
              "    lines = response.split('\\n')\n"
              '\n'
              '    # parse each line\n'
              '    parsed_lines = [parse_line(line) for line in lines]\n'
              '\n'
              "    # filter out the lines that didn't match the format\n"
              "    parsed_lines = [(line[0].lower() + '. ' + line[1].lower(), "
              'confidence_to_value.get(line[2], 0)) for line in parsed_lines '
              'if line is not None]\n'
              '\n'
              '    return parsed_lines if len(parsed_lines) >= 1 else None')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=38,
         tokens=6,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# split the response into lines')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=44,
         tokens=11,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body="# filter out the lines that didn't match the format")

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=46,
         tokens=81,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='[],\n'
              '   "source": [\n'
              '    "def prompt_wrap(obs):\\n",\n'
              '    "    return propose_prompt.format(input=obs)\\n",\n'
              '    "\\n",\n'
              '    "print(prompt_wrap(env.reset(0)))\\n",\n'
              '    "# print(\'---------\')\\n",\n'
              '    "# print(prompt_wrap(env.step(\'h2. value\')[0]))"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type"')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=48,
         tokens=68,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '\n'
              'def get_candidates_to_scores(env):\n'
              '    obs = env.render()\n'
              '    if obs in env.cache: \n'
              "        print('cache hit')\n"
              '        return env.cache[obs]\n'
              "    print('call gpt')\n"
              "    responses = gpt(prompt_wrap(obs), model='gpt-4', n=8)\n"
              '    candidates_to_scores = {}\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=50,
         tokens=67,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_candidates_to_scores',
         body='def get_candidates_to_scores(env):\n'
              '    obs = env.render()\n'
              '    if obs in env.cache: \n'
              "        print('cache hit')\n"
              '        return env.cache[obs]\n'
              "    print('call gpt')\n"
              "    responses = gpt(prompt_wrap(obs), model='gpt-4', n=8)\n"
              '    candidates_to_scores = {}\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=57,
         tokens=73,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body=': "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": [\n'
              '    "import re\\n",\n'
              '    "import copy\\n",\n'
              '    "from models import gpt\\n",\n'
              '    "\\n",\n'
              '    "def parse_line(input_str):\\n",\n'
              '    "    # regular expression pattern to match the input ')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=58,
         tokens=19,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='    for response in responses:\n'
              '        parsed_response = parse_response(response)\n'
              '        if parsed_response:\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=58,
         tokens=19,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_candidates_to_scores',
         body='    for response in responses:\n'
              '        parsed_response = parse_response(response)\n'
              '        if parsed_response:\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=61,
         tokens=76,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='            for candidate, score in parsed_response:\n'
              '                candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '    # print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '    env.cache[obs] = candidates_to_scores\n'
              '    return candidates_to_scores\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=61,
         tokens=75,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_candidates_to_scores',
         body='            for candidate, score in parsed_response:\n'
              '                candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '    # print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '    env.cache[obs] = candidates_to_scores\n'
              '    return candidates_to_scores')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=63,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# choose candiate with highest score')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=64,
         tokens=20,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=67,
         tokens=89,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='string format\\n",\n'
              '    "    pattern = r\'^([hv][1-5])\\\\. ([a-zA-Z]{5,5}) '
              '\\\\((certain|high|medium|low)\\\\).*$\'\\n",\n'
              '    "\\n",\n'
              '    "    # use regex to extract the parts of the input '
              'string\\n",\n'
              '    "    match = re.match(pattern, input_str)\\n",\n'
              '    "\\n",\n'
              '    "    if match:\\')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=67,
         tokens=24,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def propose_score(env, idx):\n'
              '    obs = env.reset(idx)\n'
              '    done = False\n'
              '    infos = []\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=68,
         tokens=23,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_score',
         body='def propose_score(env, idx):\n'
              '    obs = env.reset(idx)\n'
              '    done = False\n'
              '    infos = []\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=72,
         tokens=31,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='    while not done:\n'
              "        responses = gpt(prompt_wrap(obs), model='gpt-4', n=5)\n"
              '        candidates_to_scores = {}\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=72,
         tokens=31,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_score',
         body='    while not done:\n'
              "        responses = gpt(prompt_wrap(obs), model='gpt-4', n=5)\n"
              '        candidates_to_scores = {}\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=73,
         tokens=82,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='n",\n'
              '    "        # extract the matched groups\\n",\n'
              '    "        parts = [match.group(1), match.group(2), '
              'match.group(3)]\\n",\n'
              '    "        return parts\\n",\n'
              '    "    else:\\n",\n'
              '    "        return None\\n",\n'
              '    "\\n",\n'
              '    "confidence_to_value = {\'certain\': 1, \'high\': 0.5,')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=75,
         tokens=19,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='        for response in responses:\n'
              '            parsed_response = parse_response(response)\n'
              '            if parsed_response:\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=75,
         tokens=19,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_score',
         body='        for response in responses:\n'
              '            parsed_response = parse_response(response)\n'
              '            if parsed_response:\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=78,
         tokens=93,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='                for candidate, score in parsed_response:\n'
              '                    candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '        print(sorted(candidates_to_scores.items(), key=lambda '
              'x: x[1], reverse=True))\n'
              '        if len(candidates_to_scores) == 0:\n'
              '            break\n'
              '        candidates =  sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True)\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=78,
         tokens=93,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_score',
         body='                for candidate, score in parsed_response:\n'
              '                    candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\n'
              '        # choose candiate with highest score\n'
              '        print(sorted(candidates_to_scores.items(), key=lambda '
              'x: x[1], reverse=True))\n'
              '        if len(candidates_to_scores) == 0:\n'
              '            break\n'
              '        candidates =  sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True)\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=80,
         tokens=84,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body=' \'medium\': 0.2, \'low\': 0.1}  # TODO: ad hoc\\n",\n'
              '    "\\n",\n'
              '    "def parse_response(response):\\n",\n'
              '    "    # split the response into lines\\n",\n'
              '    "    lines = response.split(\'\\\\n\')\\n",\n'
              '    "\\n",\n'
              '    "    # parse each line\\n",\n'
              '    "    parsed_lines = [parse_line(line')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=80,
         tokens=7,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# choose candiate with highest score')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=85,
         tokens=91,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='        for candidate in candidates:\n'
              '            env_ = copy.deepcopy(env)\n'
              '            env_.step(candidate)\n'
              '            if not any(_ == 2 for _ in env_.status):\n'
              '                break\n'
              '        print(candidate)\n'
              '        # candidate = input()\n'
              '        obs, r, done, info = env.step(candidate)\n'
              '        print(obs)\n'
              '        print(env.steps, info)\n'
              "        print('-------------------\\n\\n\\n')\n"
              '        infos.append(info)\n'
              '    return infos\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=85,
         tokens=90,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='propose_score',
         body='        for candidate in candidates:\n'
              '            env_ = copy.deepcopy(env)\n'
              '            env_.step(candidate)\n'
              '            if not any(_ == 2 for _ in env_.status):\n'
              '                break\n'
              '        print(candidate)\n'
              '        # candidate = input()\n'
              '        obs, r, done, info = env.step(candidate)\n'
              '        print(obs)\n'
              '        print(env.steps, info)\n'
              "        print('-------------------\\n\\n\\n')\n"
              '        infos.append(info)\n'
              '    return infos')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=87,
         tokens=79,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body=') for line in lines]\\n",\n'
              '    "\\n",\n'
              '    "    # filter out the lines that didn\'t match the '
              'format\\n",\n'
              '    "    parsed_lines = [(line[0].lower() + \'. \' + '
              'line[1].lower(), confidence_to_value.get(line[2], 0)) for line '
              'in parsed_lines if line is not None]\\n",\n'
              '    "\\n",\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=91,
         tokens=5,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# candidate = input()')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=92,
         tokens=77,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='    "    return parsed_lines if len(parsed_lines) >= 1 else '
              'None\\n",\n'
              '    "\\n",\n'
              '    "\\n",\n'
              '    "def get_candidates_to_scores(env):\\n",\n'
              '    "    obs = env.render()\\n",\n'
              '    "    if obs in env.cache: \\n",\n'
              '    "        print(\'cache hit\')\\n",\n'
              '    "        return env.cache[')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=95,
         tokens=6,
         depth=8,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='-------------------\\n\\n\\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=98,
         tokens=112,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def dfs(env, actions, infos, time_limit, prune, '
              'max_per_state):\n'
              '    # get candidate thoughts\n'
              '    candidates_to_scores = get_candidates_to_scores(env)\n'
              '    if len(candidates_to_scores) == 0: return 0, [], []\n'
              '    print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '\n'
              '    # back up current state\n'
              '    board, status, steps = env.board.copy(), env.status.copy(), '
              'env.steps\n'
              '\n'
              '    # try each candidate\n'
              '    cnt_per_state = 0\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=99,
         tokens=136,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='obs]\\n",\n'
              '    "    print(\'call gpt\')\\n",\n'
              '    "    responses = gpt(prompt_wrap(obs), model=\'gpt-4\', '
              'n=8)\\n",\n'
              '    "    candidates_to_scores = {}\\n",\n'
              '    "    for response in responses:\\n",\n'
              '    "        parsed_response = parse_response(response)\\n",\n'
              '    "        if parsed_response:\\n",\n'
              '    "            for candidate, score in parsed_response:\\n",\n'
              '    "                candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\\n",\n'
              '    "        # choose candiate with highest score\\n",\n'
              '    "    # print(sorted(can')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=99,
         tokens=111,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='dfs',
         body='def dfs(env, actions, infos, time_limit, prune, '
              'max_per_state):\n'
              '    # get candidate thoughts\n'
              '    candidates_to_scores = get_candidates_to_scores(env)\n'
              '    if len(candidates_to_scores) == 0: return 0, [], []\n'
              '    print(sorted(candidates_to_scores.items(), key=lambda x: '
              'x[1], reverse=True))\n'
              '\n'
              '    # back up current state\n'
              '    board, status, steps = env.board.copy(), env.status.copy(), '
              'env.steps\n'
              '\n'
              '    # try each candidate\n'
              '    cnt_per_state = 0\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=100,
         tokens=4,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# get candidate thoughts')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=105,
         tokens=5,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# back up current state')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=108,
         tokens=4,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# try each candidate')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=109,
         tokens=148,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='didates_to_scores.items(), key=lambda x: x[1], '
              'reverse=True))\\n",\n'
              '    "    env.cache[obs] = candidates_to_scores\\n",\n'
              '    "    return candidates_to_scores\\n",\n'
              '    "\\n",\n'
              '    "def propose_score(env, idx):\\n",\n'
              '    "    obs = env.reset(idx)\\n",\n'
              '    "    done = False\\n",\n'
              '    "    infos = []\\n",\n'
              '    "    while not done:\\n",\n'
              '    "        responses = gpt(prompt_wrap(obs), model=\'gpt-4\', '
              'n=5)\\n",\n'
              '    "        candidates_to_scores = {}\\n",\n'
              '    "        for response in responses:\\n",\n'
              '    "            parsed_response = parse_response(resp')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=110,
         tokens=41,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='    for action in sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True):\n'
              '        obs, r, done, info = env.step(action)\n'
              "        r = info['r_word']\n")

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=110,
         tokens=41,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='dfs',
         body='    for action in sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True):\n'
              '        obs, r, done, info = env.step(action)\n'
              "        r = info['r_word']\n")

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=113,
         tokens=44,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='        if len(infos) < time_limit and env.steps < 10 and not '
              'any(_ == 2 for _ in env.status):  # not violating any existing '
              'constraints\n'
              '            cnt_per_state += 1\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=113,
         tokens=44,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='dfs',
         body='        if len(infos) < time_limit and env.steps < 10 and not '
              'any(_ == 2 for _ in env.status):  # not violating any existing '
              'constraints\n'
              '            cnt_per_state += 1\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=113,
         tokens=6,
         depth=5,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# not violating any existing constraints')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=115,
         tokens=50,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='            if cnt_per_state > max_per_state: break\n'
              '            count = env.prompt_status()       \n'
              '            actions.append(action)  \n'
              '\n'
              '            print(len(infos))\n'
              '            print(actions)\n'
              '            print(env.render_board())\n'
              '            print(info)\n'
              '            print(count)\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=115,
         tokens=50,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='dfs',
         body='            if cnt_per_state > max_per_state: break\n'
              '            count = env.prompt_status()       \n'
              '            actions.append(action)  \n'
              '\n'
              '            print(len(infos))\n'
              '            print(actions)\n'
              '            print(env.render_board())\n'
              '            print(info)\n'
              '            print(count)\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=121,
         tokens=127,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='onse)\\n",\n'
              '    "            if parsed_response:\\n",\n'
              '    "                for candidate, score in '
              'parsed_response:\\n",\n'
              '    "                    candidates_to_scores[candidate] = '
              'candidates_to_scores.get(candidate, 0) + score\\n",\n'
              '    "        # choose candiate with highest score\\n",\n'
              '    "        print(sorted(candidates_to_scores.items(), '
              'key=lambda x: x[1], reverse=True))\\n",\n'
              '    "        if len(candidates_to_scores) == 0:\\n",\n'
              '    "            break\\n",\n'
              '    "        candidates =  sorted(candidates_to_scores, '
              'key=candidates_to_sco')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=124,
         tokens=76,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body='            if infos:\n'
              '                best = max(infos, key=lambda x: '
              "x['info']['r_word'])\n"
              "                print('best', best)\n"
              "            print('--------------')\n"
              '            print()\n'
              '\n'
              "            info = {'total_step': len(infos), 'env_step': "
              "env.steps, 'actions': actions.copy(), 'info': info, 'count': "
              'count}\n'
              '            infos.append(info)\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=124,
         tokens=76,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='dfs',
         body='            if infos:\n'
              '                best = max(infos, key=lambda x: '
              "x['info']['r_word'])\n"
              "                print('best', best)\n"
              "            print('--------------')\n"
              '            print()\n'
              '\n'
              "            info = {'total_step': len(infos), 'env_step': "
              "env.steps, 'actions': actions.copy(), 'info': info, 'count': "
              'count}\n'
              '            infos.append(info)\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=129,
         tokens=141,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='res.get, reverse=True)\\n",\n'
              '    "        for candidate in candidates:\\n",\n'
              '    "            env_ = copy.deepcopy(env)\\n",\n'
              '    "            env_.step(candidate)\\n",\n'
              '    "            if not any(_ == 2 for _ in env_.status):\\n",\n'
              '    "                break\\n",\n'
              '    "        print(candidate)\\n",\n'
              '    "        # candidate = input()\\n",\n'
              '    "        obs, r, done, info = env.step(candidate)\\n",\n'
              '    "        print(obs)\\n",\n'
              '    "        print(env.steps, info)\\n",\n'
              '    "        '
              'print(\'-------------------\\\\n\\\\n\\\\n\')\\n",\n'
              '    "        infos.app')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=132,
         tokens=127,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body="            if not prune or count['impossible'] < 1:  # only "
              'continue if the current status is possible\n'
              '                dfs(env, actions, infos, time_limit, prune, '
              'max_per_state)\n'
              '            actions.pop()\n'
              '        env.reset(env.idx, board=board.copy(), '
              'status=status.copy(), steps=steps)\n'
              '\n'
              '# dfs with pruning\n'
              'infoss = []\n'
              'for i in range(0, 100, 5):\n'
              '    env.reset(i)\n'
              '    infos = []\n'
              '    actions = []\n'
              '    dfs(env, actions, infos, 100, prune=True, max_per_state=3)\n'
              '    infoss.append(infos)\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=132,
         tokens=65,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='dfs',
         body="            if not prune or count['impossible'] < 1:  # only "
              'continue if the current status is possible\n'
              '                dfs(env, actions, infos, time_limit, prune, '
              'max_per_state)\n'
              '            actions.pop()\n'
              '        env.reset(env.idx, board=board.copy(), '
              'status=status.copy(), steps=steps)')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=132,
         tokens=9,
         depth=7,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# only continue if the current status is possible')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=141,
         tokens=81,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='end(info)\\n",\n'
              '    "    return infos"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "attachments": {},\n'
              '   "cell_type": "markdown",\n'
              '   "metadata": {},\n'
              '   "source": [\n'
              '    "# DFS"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": [\n'
              ' ')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=145,
         tokens=94,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body="    with open('logs/crosswords/infoss_dfs_prune.json', 'w') as "
              'fout:\n'
              '        json.dump(infoss, fout)\n'
              '\n'
              '# dfs without pruning\n'
              'infoss = []\n'
              'for i in range(0, 100, 5):\n'
              '    env.reset(i)\n'
              '    infos = []\n'
              '    actions = []\n'
              '    dfs(env, actions, infos, 100, prune=False, '
              'max_per_state=3)\n'
              '    infoss.append(infos)\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=145,
         tokens=12,
         depth=9,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='logs/crosswords/infoss_dfs_prune.json')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=148,
         tokens=4,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# dfs without pruning')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=156,
         tokens=33,
         depth=0,
         parent_id=None,
         category='python',
         definition=True,
         summary=False,
         name='',
         body="    with open('logs/crosswords/infoss_dfs_no_prune.json', 'w') "
              'as fout:\n'
              '        json.dump(infoss, fout)')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=156,
         tokens=13,
         depth=9,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='logs/crosswords/infoss_dfs_no_prune.json')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=159,
         tokens=74,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='   "def dfs(env, actions, infos, time_limit, prune, '
              'max_per_state):\\n",\n'
              '    "    # get candidate thoughts\\n",\n'
              '    "    candidates_to_scores = '
              'get_candidates_to_scores(env)\\n",\n'
              '    "    if len(candidates_to_scores) == 0: return 0, [], '
              '[]\\n",\n'
              '    "    print(sorted(can')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=163,
         tokens=76,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='didates_to_scores.items(), key=lambda x: x[1], '
              'reverse=True))\\n",\n'
              '    "\\n",\n'
              '    "    # back up current state\\n",\n'
              '    "    board, status, steps = env.board.copy(), '
              'env.status.copy(), env.steps\\n",\n'
              '    "\\n",\n'
              '    "    # try each candidate\\n",\n'
              '    "    cnt_per_state = ')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=169,
         tokens=77,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='0\\n",\n'
              '    "    for action in sorted(candidates_to_scores, '
              'key=candidates_to_scores.get, reverse=True):\\n",\n'
              '    "        obs, r, done, info = env.step(action)\\n",\n'
              '    "        r = info[\'r_word\']\\n",\n'
              '    "        if len(infos) < time_limit and env.steps < 10 and '
              'not a')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=173,
         tokens=131,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='ny(_ == 2 for _ in env.status):  # not violating any existing '
              'constraints\\n",\n'
              '    "            cnt_per_state += 1\\n",\n'
              '    "            if cnt_per_state > max_per_state: break\\n",\n'
              '    "            count = env.prompt_status()       \\n",\n'
              '    "            actions.append(action)  \\n",\n'
              '    "\\n",\n'
              '    "            print(len(infos))\\n",\n'
              '    "            print(actions)\\n",\n'
              '    "            print(env.render_board())\\n",\n'
              '    "            print(info)\\n",\n'
              '    "            print(count)\\n",\n'
              '    "            if infos:\\n",\n'
              '    "                ')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=185,
         tokens=140,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='best = max(infos, key=lambda x: x[\'info\'][\'r_word\'])\\n",\n'
              '    "                print(\'best\', best)\\n",\n'
              '    "            print(\'--------------\')\\n",\n'
              '    "            print()\\n",\n'
              '    "\\n",\n'
              '    "            info = {\'total_step\': len(infos), '
              "'env_step': env.steps, 'actions': actions.copy(), 'info': info, "
              '\'count\': count}\\n",\n'
              '    "            infos.append(info)\\n",\n'
              '    "            if not prune or count[\'impossible\'] < 1:  # '
              'only continue if the current status is possible\\n",\n'
              '    "                dfs(env, actions, infos, time_limit,')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=193,
         tokens=73,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body=' prune, max_per_state)\\n",\n'
              '    "            actions.pop()\\n",\n'
              '    "        env.reset(env.idx, board=board.copy(), '
              'status=status.copy(), steps=steps)"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": ')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=203,
         tokens=95,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='[\n'
              '    "# dfs with pruning\\n",\n'
              '    "infoss = []\\n",\n'
              '    "for i in range(0, 100, 5):\\n",\n'
              '    "    env.reset(i)\\n",\n'
              '    "    infos = []\\n",\n'
              '    "    actions = []\\n",\n'
              '    "    dfs(env, actions, infos, 100, prune=True, '
              'max_per_state=3)\\n",\n'
              '    "    infoss.append(infos)\\n')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=211,
         tokens=82,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='",\n'
              '    "    with open(\'logs/crosswords/infoss_dfs_prune.json\', '
              '\'w\') as fout:\\n",\n'
              '    "        json.dump(infoss, fout)"\n'
              '   ]\n'
              '  },\n'
              '  {\n'
              '   "cell_type": "code",\n'
              '   "execution_count": null,\n'
              '   "metadata": {},\n'
              '   "outputs": [],\n'
              '   "source": [\n'
              '    "# dfs without pruning\\n"')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=222,
         tokens=96,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body=',\n'
              '    "infoss = []\\n",\n'
              '    "for i in range(0, 100, 5):\\n",\n'
              '    "    env.reset(i)\\n",\n'
              '    "    infos = []\\n",\n'
              '    "    actions = []\\n",\n'
              '    "    dfs(env, actions, infos, 100, prune=False, '
              'max_per_state=3)\\n",\n'
              '    "    infoss.append(infos)\\n",\n'
              '    "    with open(\'logs')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=230,
         tokens=89,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='/crosswords/infoss_dfs_no_prune.json\', \'w\') as fout:\\n",\n'
              '    "        json.dump(infoss, fout)"\n'
              '   ]\n'
              '  }\n'
              ' ],\n'
              ' "metadata": {\n'
              '  "kernelspec": {\n'
              '   "display_name": "Python 3",\n'
              '   "language": "python",\n'
              '   "name": "python3"\n'
              '  },\n'
              '  "language_info": {\n'
              '   "codemirror_mode": ')

Fragment(document_cs='a86f2c11e45ea6b83a4875c8a0d51d2b1cac94673cb345c2d320741ddc40cde0',
         id=-1,
         lineno=242,
         tokens=95,
         depth=0,
         parent_id=None,
         category='notebook',
         definition=True,
         summary=False,
         name='',
         body='{\n'
              '    "name": "ipython",\n'
              '    "version": 3\n'
              '   },\n'
              '   "file_extension": ".py",\n'
              '   "mimetype": "text/x-python",\n'
              '   "name": "python",\n'
              '   "nbconvert_exporter": "python",\n'
              '   "pygments_lexer": "ipython3",\n'
              '   "version": "3.7.4"\n'
              '  }\n'
              ' },\n'
              ' "nbformat": 4,\n'
              ' "nbformat_minor": 2\n'
              '}\n')

Fragment(document_cs='a88bc18eb0cf0f68c610ac7c5681607763fc33a306263537f2578033e7080bac',
         id=-1,
         lineno=1,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="standard_prompt = '''\n"
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              "'''\n"
              '\n'
              "cot_prompt = '''\n"
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              '\n'
              'Make a plan then write. Your output should be of the following '
              'format:\n'
              '\n'
              'Plan:\n'
              'Your plan here.\n'
              '\n'
              'Passage:\n'
              'Your passage here.\n'
              "'''\n"
              '\n'
              '\n'
              "vote_prompt = '''Given an instruction and several choices, "
              'decide which choice is most promising. Analyze each choice')

Fragment(document_cs='a88bc18eb0cf0f68c610ac7c5681607763fc33a306263537f2578033e7080bac',
         id=-1,
         lineno=1,
         tokens=23,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n')

Fragment(document_cs='a88bc18eb0cf0f68c610ac7c5681607763fc33a306263537f2578033e7080bac',
         id=-1,
         lineno=1,
         tokens=25,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='Python: /prompts/text.py\n'
              '  Variables and usages: compare_prompt cot_prompt score_prompt '
              'standard_prompt vote_prompt\n')

Fragment(document_cs='a88bc18eb0cf0f68c610ac7c5681607763fc33a306263537f2578033e7080bac',
         id=-1,
         lineno=5,
         tokens=51,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Write a coherent passage of 4 short paragraphs. The end '
              'sentence of each paragraph must be: {input}\n'
              '\n'
              'Make a plan then write. Your output should be of the following '
              'format:\n'
              '\n'
              'Plan:\n'
              'Your plan here.\n'
              '\n'
              'Passage:\n'
              'Your passage here.\n')

Fragment(document_cs='a88bc18eb0cf0f68c610ac7c5681607763fc33a306263537f2578033e7080bac',
         id=-1,
         lineno=18,
         tokens=118,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body=' in detail, then conclude in the last line "The best choice is '
              '{s}", where s the integer id of the choice.\n'
              "'''\n"
              '\n'
              "compare_prompt = '''Briefly analyze the coherency of the "
              'following two passages. Conclude in the last line "The more '
              'coherent passage is 1", "The more coherent passage is 2", or '
              '"The two passages are similarly coherent".\n'
              "'''\n"
              '\n'
              "score_prompt = '''Analyze the following passage, then at the "
              'last line conclude "Thus the coherency score is {s}", where s '
              'is an integer from 1 to 10.\n'
              "'''")

Fragment(document_cs='a88bc18eb0cf0f68c610ac7c5681607763fc33a306263537f2578033e7080bac',
         id=-1,
         lineno=18,
         tokens=44,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Given an instruction and several choices, decide which choice '
              'is most promising. Analyze each choice in detail, then conclude '
              'in the last line "The best choice is {s}", where s the integer '
              'id of the choice.\n')

Fragment(document_cs='a88bc18eb0cf0f68c610ac7c5681607763fc33a306263537f2578033e7080bac',
         id=-1,
         lineno=21,
         tokens=46,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Briefly analyze the coherency of the following two passages. '
              'Conclude in the last line "The more coherent passage is 1", '
              '"The more coherent passage is 2", or "The two passages are '
              'similarly coherent".\n')

Fragment(document_cs='a88bc18eb0cf0f68c610ac7c5681607763fc33a306263537f2578033e7080bac',
         id=-1,
         lineno=24,
         tokens=35,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Analyze the following passage, then at the last line conclude '
              '"Thus the coherency score is {s}", where s is an integer from 1 '
              'to 10.\n')

Fragment(document_cs='b4456270c7784e24a6e54262387d94634f98b42931732753ab645d522e8985d9',
         id=-1,
         lineno=1,
         tokens=62,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='python run.py \\\n'
              '    --task crosswords \\\n'
              '    --task_file_path mini0505_0_100_5.json \\\n'
              '    --task_start_index 0 \\\n'
              '    --task_end_index 20 \\\n'
              '    --naive_run \\\n'
              '    --prompt_sample cot \\\n'
              '    --n_generate_sample 10 ')

Fragment(document_cs='b4456270c7784e24a6e54262387d94634f98b42931732753ab645d522e8985d9',
         id=-1,
         lineno=1,
         tokens=12,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /scripts/crosswords/cot_sampling.sh\n')

Fragment(document_cs='bb64617a60acfd9712610bbd6151d951682a3f99c72dd459856e1b85166596bc',
         id=-1,
         lineno=1,
         tokens=87,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='def get_task(name, file=None):\n'
              "    if name == 'game24':\n"
              '        from .game24 import Game24Task\n'
              '        return Game24Task(file)\n'
              "    elif name == 'text':\n"
              '        from .text import TextTask\n'
              '        return TextTask(file)\n'
              "    elif name == 'crosswords':\n"
              '        from .crosswords import MiniCrosswordsTask\n'
              '        return MiniCrosswordsTask(file)\n'
              '    else:\n'
              '        raise NotImplementedError')

Fragment(document_cs='bb64617a60acfd9712610bbd6151d951682a3f99c72dd459856e1b85166596bc',
         id=-1,
         lineno=1,
         tokens=87,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_task',
         body='def get_task(name, file=None):\n'
              "    if name == 'game24':\n"
              '        from .game24 import Game24Task\n'
              '        return Game24Task(file)\n'
              "    elif name == 'text':\n"
              '        from .text import TextTask\n'
              '        return TextTask(file)\n'
              "    elif name == 'crosswords':\n"
              '        from .crosswords import MiniCrosswordsTask\n'
              '        return MiniCrosswordsTask(file)\n'
              '    else:\n'
              '        raise NotImplementedError')

Fragment(document_cs='bb64617a60acfd9712610bbd6151d951682a3f99c72dd459856e1b85166596bc',
         id=-1,
         lineno=1,
         tokens=39,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='Python: /tasks/__init__.py\n'
              '  Functions: get_task\n'
              '  Variables and usages: Game24Task MiniCrosswordsTask '
              'NotImplementedError TextTask crosswords file game24 name text\n')

Fragment(document_cs='bb64617a60acfd9712610bbd6151d951682a3f99c72dd459856e1b85166596bc',
         id=-1,
         lineno=3,
         tokens=1,
         depth=5,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='bb64617a60acfd9712610bbd6151d951682a3f99c72dd459856e1b85166596bc',
         id=-1,
         lineno=3,
         tokens=1,
         depth=5,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='bb64617a60acfd9712610bbd6151d951682a3f99c72dd459856e1b85166596bc',
         id=-1,
         lineno=6,
         tokens=1,
         depth=6,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='bb64617a60acfd9712610bbd6151d951682a3f99c72dd459856e1b85166596bc',
         id=-1,
         lineno=6,
         tokens=1,
         depth=6,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='bb64617a60acfd9712610bbd6151d951682a3f99c72dd459856e1b85166596bc',
         id=-1,
         lineno=9,
         tokens=1,
         depth=6,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='bb64617a60acfd9712610bbd6151d951682a3f99c72dd459856e1b85166596bc',
         id=-1,
         lineno=9,
         tokens=1,
         depth=6,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='cd2d341de1d3781e993e9859b1a36e8bfe12c84507c0a52f21c0220743af475b',
         id=-1,
         lineno=1,
         tokens=3,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='MIT License\n')

Fragment(document_cs='cd2d341de1d3781e993e9859b1a36e8bfe12c84507c0a52f21c0220743af475b',
         id=-1,
         lineno=1,
         tokens=5,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /LICENSE\n')

Fragment(document_cs='cd2d341de1d3781e993e9859b1a36e8bfe12c84507c0a52f21c0220743af475b',
         id=-1,
         lineno=2,
         tokens=13,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\nCopyright (c) 2023 Shunyu Yao\n')

Fragment(document_cs='cd2d341de1d3781e993e9859b1a36e8bfe12c84507c0a52f21c0220743af475b',
         id=-1,
         lineno=4,
         tokens=90,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'Permission is hereby granted, free of charge, to any person '
              'obtaining a copy\n'
              'of this software and associated documentation files (the '
              '"Software"), to deal\n'
              'in the Software without restriction, including without '
              'limitation the rights\n'
              'to use, copy, modify, merge, publish, distribute, sublicense, '
              'and/or sell\n'
              'copies of the Software, and to permit persons to whom the '
              'Software is\n'
              'furnished to do so, subject to the following conditions:\n')

Fragment(document_cs='cd2d341de1d3781e993e9859b1a36e8bfe12c84507c0a52f21c0220743af475b',
         id=-1,
         lineno=11,
         tokens=23,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'The above copyright notice and this permission notice shall be '
              'included in all\n'
              'copies or substantial portions of the Software.\n')

Fragment(document_cs='cd2d341de1d3781e993e9859b1a36e8bfe12c84507c0a52f21c0220743af475b',
         id=-1,
         lineno=14,
         tokens=96,
         depth=1,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, '
              'EXPRESS OR\n'
              'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF '
              'MERCHANTABILITY,\n'
              'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO '
              'EVENT SHALL THE\n'
              'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES '
              'OR OTHER\n'
              'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, '
              'ARISING FROM,\n'
              'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER '
              'DEALINGS IN THE\n'
              'SOFTWARE.\n')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=1,
         tokens=141,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='import os\n'
              'import openai\n'
              'import backoff \n'
              '\n'
              'completion_tokens = prompt_tokens = 0\n'
              '\n'
              'api_key = os.getenv("OPENAI_API_KEY", "")\n'
              'if api_key != "":\n'
              '    openai.api_key = api_key\n'
              'else:\n'
              '    print("Warning: OPENAI_API_KEY is not set")\n'
              '    \n'
              'api_base = os.getenv("OPENAI_API_BASE", "")\n'
              'if api_base != "":\n'
              '    print("Warning: OPENAI_API_BASE is set to '
              '{}".format(api_base))\n'
              '    openai.api_base = api_base\n'
              '\n'
              '@backoff.on_exception(backoff.expo, openai.error.OpenAIError)\n'
              'def completions_with_backoff(**kwargs):\n'
              '    return openai.ChatCompletion.create(**kwargs)\n')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=1,
         tokens=72,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='Python: /models.py\n'
              '  Functions: chatgpt gpt gpt_usage\n'
              '  Methods: completions_with_backoff\n'
              '  Variables and usages: ChatCompletion OpenAIError api_base '
              'api_key backend backoff choice completion_tokens cost create '
              'error expo extend format getenv kwargs max_tokens messages '
              'model on_exception openai outputs print prompt prompt_tokens '
              'stop temperature\n')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=11,
         tokens=9,
         depth=7,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Warning: OPENAI_API_KEY is not set')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=15,
         tokens=10,
         depth=8,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='Warning: OPENAI_API_BASE is set to {}')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=19,
         tokens=19,
         depth=2,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='completions_with_backoff',
         body='def completions_with_backoff(**kwargs):\n'
              '    return openai.ChatCompletion.create(**kwargs)')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=21,
         tokens=75,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def gpt(prompt, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    messages = [{"role": "user", "content": prompt}]\n'
              '    return chatgpt(messages, model=model, '
              'temperature=temperature, max_tokens=max_tokens, n=n, '
              'stop=stop)\n')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=22,
         tokens=74,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='gpt',
         body='def gpt(prompt, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    messages = [{"role": "user", "content": prompt}]\n'
              '    return chatgpt(messages, model=model, '
              'temperature=temperature, max_tokens=max_tokens, n=n, stop=stop)')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=25,
         tokens=48,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              'def chatgpt(messages, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    global completion_tokens, prompt_tokens\n'
              '    outputs = []\n')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=26,
         tokens=149,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='chatgpt',
         body='def chatgpt(messages, model="gpt-4", temperature=0.7, '
              'max_tokens=1000, n=1, stop=None) -> list:\n'
              '    global completion_tokens, prompt_tokens\n'
              '    outputs = []\n'
              '    while n > 0:\n'
              '        cnt = min(n, 20)\n'
              '        n -= cnt\n'
              '        res = completions_with_backoff(model=model, '
              'messages=messages, temperature=temperature, '
              'max_tokens=max_tokens, n=cnt, stop=stop)\n'
              '        outputs.extend([choice["message"]["content"] for choice '
              'in res["choices"]])\n'
              '        # log completion tokens\n'
              '        completion_tokens += res["usage"]["completion_tokens"]\n'
              '        prompt_tokens += res["usage"]["prompt_tokens"]\n'
              '    return outputs')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=29,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    while n > 0:\n'
              '        cnt = min(n, 20)\n'
              '        n -= cnt\n'
              '        res = completions_with_backoff(model=model, '
              'messages=messages, temperature=temperature, '
              'max_tokens=max_tokens, n=cnt, stop=stop)\n'
              '        outputs.extend([choice["message"]["content"] for choice '
              'in res["choices"]])\n'
              '        # log completion tokens\n'
              '        completion_tokens += res["usage"]["completion_tokens"]\n'
              '        prompt_tokens += res["usage"]["prompt_tokens"]\n'
              '    return outputs\n')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=34,
         tokens=4,
         depth=4,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# log completion tokens')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=38,
         tokens=115,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              'def gpt_usage(backend="gpt-4"):\n'
              '    global completion_tokens, prompt_tokens\n'
              '    if backend == "gpt-4":\n'
              '        cost = completion_tokens / 1000 * 0.06 + prompt_tokens '
              '/ 1000 * 0.03\n'
              '    elif backend == "gpt-3.5-turbo":\n'
              '        cost = (completion_tokens + prompt_tokens) / 1000 * '
              '0.0002\n'
              '    return {"completion_tokens": completion_tokens, '
              '"prompt_tokens": prompt_tokens, "cost": cost}')

Fragment(document_cs='e680cbc63f82651b2b45e2364872d31462355fff4f78957ce6265dcb16b3b208',
         id=-1,
         lineno=39,
         tokens=114,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='gpt_usage',
         body='def gpt_usage(backend="gpt-4"):\n'
              '    global completion_tokens, prompt_tokens\n'
              '    if backend == "gpt-4":\n'
              '        cost = completion_tokens / 1000 * 0.06 + prompt_tokens '
              '/ 1000 * 0.03\n'
              '    elif backend == "gpt-3.5-turbo":\n'
              '        cost = (completion_tokens + prompt_tokens) / 1000 * '
              '0.0002\n'
              '    return {"completion_tokens": completion_tokens, '
              '"prompt_tokens": prompt_tokens, "cost": cost}')

Fragment(document_cs='ed0d5c5110b8864a2b8629a615762d0068150ea29a82f6c2e455c9676e01b0c6',
         id=-1,
         lineno=1,
         tokens=19,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /data/crosswords/mini0505_0_100_5.json\n')

Fragment(document_cs='f9a4c20120d744b69fca6efcd348b337be63545e82fb0502fa72e2f26e5977c9',
         id=-1,
         lineno=1,
         tokens=14,
         depth=0,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='/*__pycache__/\n*.pyc\n*.DS_Store\n')

Fragment(document_cs='f9a4c20120d744b69fca6efcd348b337be63545e82fb0502fa72e2f26e5977c9',
         id=-1,
         lineno=1,
         tokens=6,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='File: /.gitignore\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=1,
         tokens=38,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='import os\n'
              'import json\n'
              'import itertools\n'
              'import argparse\n'
              'import numpy as np\n'
              'from functools import partial\n'
              'from models import gpt, gpt_usage\n'
              'from tasks import get_task\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=1,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=1,
         tokens=197,
         depth=0,
         parent_id=None,
         category='summary',
         definition=True,
         summary=True,
         name='',
         body='Python: /run.py\n'
              '  Functions: get_proposals get_samples get_value get_values '
              'get_votes naive_solve parse_args run solve\n'
              '  Variables and usages: ArgumentParser ValueError accs action '
              'add_argument append argparse args array backend cache_value '
              'chain choice choices cnt_any cnt_avg cot_prompt_wrap default '
              'dirname dump exist_ok file functools get_input get_task '
              'gpt_usage indent info infos itertools json local_value_cache '
              'logs makedirs method_evaluate method_generate method_select '
              'model models n_evaluate_sample n_generate_sample '
              'n_select_sample naive_run new_ys numpy open partial path print '
              'prompt prompt_sample proposals propose_prompt '
              'propose_prompt_wrap random range required reverse samples '
              'select_id select_ids select_new_ys size sorted sorted_new_ys '
              'sorted_values split standard_prompt_wrap step steps stop stops '
              'task task_end_index task_file_path task_start_index tasks '
              'temperature test_output to_print tolist type update value '
              'value_cache value_outputs value_outputs_unwrap value_prompt '
              'value_prompt_wrap values vote_outputs vote_outputs_unwrap '
              'vote_prompt vote_prompt_wrap\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=2,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=3,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=4,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=5,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=6,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=6,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=7,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=7,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=8,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='from')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=8,
         tokens=1,
         depth=1,
         parent_id=None,
         category='dependency',
         definition=True,
         summary=False,
         name='',
         body='import')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=9,
         tokens=103,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def get_value(task, x, y, n_evaluate_sample, '
              'cache_value=True):\n'
              '    value_prompt = task.value_prompt_wrap(x, y)\n'
              '    if cache_value and value_prompt in task.value_cache:\n'
              '        return task.value_cache[value_prompt]\n'
              '    value_outputs = gpt(value_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    value = task.value_outputs_unwrap(x, y, value_outputs)\n'
              '    if cache_value:\n'
              '        task.value_cache[value_prompt] = value\n'
              '    return value\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=10,
         tokens=101,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_value',
         body='def get_value(task, x, y, n_evaluate_sample, '
              'cache_value=True):\n'
              '    value_prompt = task.value_prompt_wrap(x, y)\n'
              '    if cache_value and value_prompt in task.value_cache:\n'
              '        return task.value_cache[value_prompt]\n'
              '    value_outputs = gpt(value_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    value = task.value_outputs_unwrap(x, y, value_outputs)\n'
              '    if cache_value:\n'
              '        task.value_cache[value_prompt] = value\n'
              '    return value')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=19,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def get_values(task, x, ys, n_evaluate_sample, '
              'cache_value=True):\n'
              '    values = []\n'
              '    local_value_cache = {}\n'
              '    for y in ys:  # each partial output\n'
              '        if y in local_value_cache:  # avoid duplicate '
              'candidates\n'
              '            value = 0\n'
              '        else:    \n'
              '            value = get_value(task, x, y, n_evaluate_sample, '
              'cache_value=cache_value)\n'
              '            local_value_cache[y] = value\n'
              '        values.append(value)\n'
              '    return values\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=20,
         tokens=103,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_values',
         body='def get_values(task, x, ys, n_evaluate_sample, '
              'cache_value=True):\n'
              '    values = []\n'
              '    local_value_cache = {}\n'
              '    for y in ys:  # each partial output\n'
              '        if y in local_value_cache:  # avoid duplicate '
              'candidates\n'
              '            value = 0\n'
              '        else:    \n'
              '            value = get_value(task, x, y, n_evaluate_sample, '
              'cache_value=cache_value)\n'
              '            local_value_cache[y] = value\n'
              '        values.append(value)\n'
              '    return values')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=23,
         tokens=4,
         depth=3,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# each partial output')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=24,
         tokens=4,
         depth=5,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# avoid duplicate candidates')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=31,
         tokens=66,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def get_votes(task, x, ys, n_evaluate_sample):\n'
              '    vote_prompt = task.vote_prompt_wrap(x, ys)\n'
              '    vote_outputs = gpt(vote_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    values = task.vote_outputs_unwrap(vote_outputs, len(ys))\n'
              '    return values\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=32,
         tokens=64,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_votes',
         body='def get_votes(task, x, ys, n_evaluate_sample):\n'
              '    vote_prompt = task.vote_prompt_wrap(x, ys)\n'
              '    vote_outputs = gpt(vote_prompt, n=n_evaluate_sample, '
              'stop=None)\n'
              '    values = task.vote_outputs_unwrap(vote_outputs, len(ys))\n'
              '    return values')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=37,
         tokens=62,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def get_proposals(task, x, y): \n'
              '    propose_prompt = task.propose_prompt_wrap(x, y)\n'
              '    proposals = gpt(propose_prompt, n=1, '
              "stop=None)[0].split('\\n')\n"
              "    return [y + _ + '\\n' for _ in proposals]\n")

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=38,
         tokens=61,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_proposals',
         body='def get_proposals(task, x, y): \n'
              '    propose_prompt = task.propose_prompt_wrap(x, y)\n'
              '    proposals = gpt(propose_prompt, n=1, '
              "stop=None)[0].split('\\n')\n"
              "    return [y + _ + '\\n' for _ in proposals]")

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=42,
         tokens=102,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def get_samples(task, x, y, n_generate_sample, prompt_sample, '
              'stop):\n'
              "    if prompt_sample == 'standard':\n"
              '        prompt = task.standard_prompt_wrap(x, y)\n'
              "    elif prompt_sample == 'cot':\n"
              '        prompt = task.cot_prompt_wrap(x, y)\n'
              '    else:\n'
              "        raise ValueError(f'prompt_sample {prompt_sample} not "
              "recognized')\n"
              '    samples = gpt(prompt, n=n_generate_sample, stop=stop)\n'
              '    return [y + _ for _ in samples]\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=43,
         tokens=101,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='get_samples',
         body='def get_samples(task, x, y, n_generate_sample, prompt_sample, '
              'stop):\n'
              "    if prompt_sample == 'standard':\n"
              '        prompt = task.standard_prompt_wrap(x, y)\n'
              "    elif prompt_sample == 'cot':\n"
              '        prompt = task.cot_prompt_wrap(x, y)\n'
              '    else:\n'
              "        raise ValueError(f'prompt_sample {prompt_sample} not "
              "recognized')\n"
              '    samples = gpt(prompt, n=n_generate_sample, stop=stop)\n'
              '    return [y + _ for _ in samples]')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=52,
         tokens=45,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def solve(args, task, idx, to_print=True):\n'
              '    print(gpt)\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = ['']  # current output candidates\n"
              '    infos = []\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=53,
         tokens=44,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='solve',
         body='def solve(args, task, idx, to_print=True):\n'
              '    print(gpt)\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = ['']  # current output candidates\n"
              '    infos = []\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=56,
         tokens=4,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# current output candidates')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=58,
         tokens=12,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    for step in range(task.steps):\n        # generation\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=58,
         tokens=12,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='solve',
         body='    for step in range(task.steps):\n        # generation\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=60,
         tokens=105,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="        if args.method_generate == 'sample':\n"
              '            new_ys = [get_samples(task, x, y, '
              'args.n_generate_sample, prompt_sample=args.prompt_sample, '
              'stop=task.stops[step]) for y in ys]\n'
              "        elif args.method_generate == 'propose':\n"
              '            new_ys = [get_proposals(task, x, y) for y in ys]\n'
              '        new_ys = list(itertools.chain(*new_ys))\n'
              '        ids = list(range(len(new_ys)))\n'
              '        # evaluation\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=60,
         tokens=105,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='solve',
         body="        if args.method_generate == 'sample':\n"
              '            new_ys = [get_samples(task, x, y, '
              'args.n_generate_sample, prompt_sample=args.prompt_sample, '
              'stop=task.stops[step]) for y in ys]\n'
              "        elif args.method_generate == 'propose':\n"
              '            new_ys = [get_proposals(task, x, y) for y in ys]\n'
              '        new_ys = list(itertools.chain(*new_ys))\n'
              '        ids = list(range(len(new_ys)))\n'
              '        # evaluation\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=67,
         tokens=62,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="        if args.method_evaluate == 'vote':\n"
              '            values = get_votes(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              "        elif args.method_evaluate == 'value':\n"
              '            values = get_values(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              '\n'
              '        # selection\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=67,
         tokens=62,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='solve',
         body="        if args.method_evaluate == 'vote':\n"
              '            values = get_votes(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              "        elif args.method_evaluate == 'value':\n"
              '            values = get_values(task, x, new_ys, '
              'args.n_evaluate_sample)\n'
              '\n'
              '        # selection\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=73,
         tokens=98,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="        if args.method_select == 'sample':\n"
              '            ps = np.array(values) / sum(values)\n'
              '            select_ids = np.random.choice(ids, '
              'size=args.n_select_sample, p=ps).tolist()\n'
              "        elif args.method_select == 'greedy':\n"
              '            select_ids = sorted(ids, key=lambda x: values[x], '
              'reverse=True)[:args.n_select_sample]\n'
              '        select_new_ys = [new_ys[select_id] for select_id in '
              'select_ids]\n'
              '\n'
              '        # log\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=73,
         tokens=98,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='solve',
         body="        if args.method_select == 'sample':\n"
              '            ps = np.array(values) / sum(values)\n'
              '            select_ids = np.random.choice(ids, '
              'size=args.n_select_sample, p=ps).tolist()\n'
              "        elif args.method_select == 'greedy':\n"
              '            select_ids = sorted(ids, key=lambda x: values[x], '
              'reverse=True)[:args.n_select_sample]\n'
              '        select_new_ys = [new_ys[select_id] for select_id in '
              'select_ids]\n'
              '\n'
              '        # log\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=81,
         tokens=127,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='        if to_print: \n'
              '            sorted_new_ys, sorted_values = '
              'zip(*sorted(zip(new_ys, values), key=lambda x: x[1], '
              'reverse=True))\n'
              "            print(f'-- new_ys --: {sorted_new_ys}\\n-- sol "
              'values --: {sorted_values}\\n-- choices --: '
              "{select_new_ys}\\n')\n"
              '        \n'
              "        infos.append({'step': step, 'x': x, 'ys': ys, 'new_ys': "
              "new_ys, 'values': values, 'select_new_ys': select_new_ys})\n"
              '        ys = select_new_ys\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=81,
         tokens=127,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='solve',
         body='        if to_print: \n'
              '            sorted_new_ys, sorted_values = '
              'zip(*sorted(zip(new_ys, values), key=lambda x: x[1], '
              'reverse=True))\n'
              "            print(f'-- new_ys --: {sorted_new_ys}\\n-- sol "
              'values --: {sorted_values}\\n-- choices --: '
              "{select_new_ys}\\n')\n"
              '        \n'
              "        infos.append({'step': step, 'x': x, 'ys': ys, 'new_ys': "
              "new_ys, 'values': values, 'select_new_ys': select_new_ys})\n"
              '        ys = select_new_ys\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=83,
         tokens=7,
         depth=10,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='\\n-- sol values --: ')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=87,
         tokens=21,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    \n'
              '    if to_print: \n'
              '        print(ys)\n'
              "    return ys, {'steps': infos}\n")

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=87,
         tokens=21,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='solve',
         body='    \n'
              '    if to_print: \n'
              '        print(ys)\n'
              "    return ys, {'steps': infos}")

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=91,
         tokens=53,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def naive_solve(args, task, idx, to_print=True):\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = get_samples(task, x, '', args.n_generate_sample, "
              'args.prompt_sample, stop=None)\n'
              '    return ys, {}\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=92,
         tokens=52,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='naive_solve',
         body='def naive_solve(args, task, idx, to_print=True):\n'
              '    x = task.get_input(idx)  # input\n'
              "    ys = get_samples(task, x, '', args.n_generate_sample, "
              'args.prompt_sample, stop=None)\n'
              '    return ys, {}')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=96,
         tokens=55,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              'def run(args):\n'
              '    task = get_task(args.task, args.task_file_path)\n'
              '    logs, cnt_avg, cnt_any = [], 0, 0\n'
              '    global gpt\n'
              '    gpt = partial(gpt, model=args.backend, '
              'temperature=args.temperature)\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=97,
         tokens=54,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='run',
         body='def run(args):\n'
              '    task = get_task(args.task, args.task_file_path)\n'
              '    logs, cnt_avg, cnt_any = [], 0, 0\n'
              '    global gpt\n'
              '    gpt = partial(gpt, model=args.backend, '
              'temperature=args.temperature)\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=102,
         tokens=130,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='    if args.naive_run:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_naive_{args.prompt_sample}_sample_{args.n_generate_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    else:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_{args.method_generate}{args.n_generate_sample}_{args.method_evaluate}{args.n_evaluate_sample}_{args.method_select}{args.n_select_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    os.makedirs(os.path.dirname(file), exist_ok=True)\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=102,
         tokens=130,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='run',
         body='    if args.naive_run:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_naive_{args.prompt_sample}_sample_{args.n_generate_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    else:\n'
              '        file = '
              "f'logs/{args.task}/{args.backend}_{args.temperature}_{args.method_generate}{args.n_generate_sample}_{args.method_evaluate}{args.n_evaluate_sample}_{args.method_select}{args.n_select_sample}_start{args.task_start_index}_end{args.task_end_index}.json'\n"
              '    os.makedirs(os.path.dirname(file), exist_ok=True)\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=107,
         tokens=111,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '    for i in range(args.task_start_index, '
              'args.task_end_index):\n'
              '        # solve\n'
              '        if args.naive_run:\n'
              '            ys, info = naive_solve(args, task, i) \n'
              '        else:\n'
              '            ys, info = solve(args, task, i)\n'
              '\n'
              '        # log\n'
              '        infos = [task.test_output(i, y) for y in ys]\n'
              "        info.update({'idx': i, 'ys': ys, 'infos': infos, "
              "'usage_so_far': gpt_usage(args.backend)})\n"
              '        logs.append(info)\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=107,
         tokens=111,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='run',
         body='\n'
              '    for i in range(args.task_start_index, '
              'args.task_end_index):\n'
              '        # solve\n'
              '        if args.naive_run:\n'
              '            ys, info = naive_solve(args, task, i) \n'
              '        else:\n'
              '            ys, info = solve(args, task, i)\n'
              '\n'
              '        # log\n'
              '        infos = [task.test_output(i, y) for y in ys]\n'
              "        info.update({'idx': i, 'ys': ys, 'infos': infos, "
              "'usage_so_far': gpt_usage(args.backend)})\n"
              '        logs.append(info)\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=119,
         tokens=134,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="        with open(file, 'w') as f:\n"
              '            json.dump(logs, f, indent=4)\n'
              '        \n'
              '        # log main metric\n'
              "        accs = [info['r'] for info in infos]\n"
              '        cnt_avg += sum(accs) / len(accs)\n'
              '        cnt_any += any(accs)\n'
              "        print(i, 'sum(accs)', sum(accs), 'cnt_avg', cnt_avg, "
              "'cnt_any', cnt_any, '\\n')\n"
              '    \n'
              '    n = args.task_end_index - args.task_start_index\n'
              '    print(cnt_avg / n, cnt_any / n)\n'
              "    print('usage_so_far', gpt_usage(args.backend))\n")

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=119,
         tokens=134,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='run',
         body="        with open(file, 'w') as f:\n"
              '            json.dump(logs, f, indent=4)\n'
              '        \n'
              '        # log main metric\n'
              "        accs = [info['r'] for info in infos]\n"
              '        cnt_avg += sum(accs) / len(accs)\n'
              '        cnt_any += any(accs)\n'
              "        print(i, 'sum(accs)', sum(accs), 'cnt_avg', cnt_avg, "
              "'cnt_any', cnt_any, '\\n')\n"
              '    \n'
              '    n = args.task_end_index - args.task_start_index\n'
              '    print(cnt_avg / n, cnt_any / n)\n'
              "    print('usage_so_far', gpt_usage(args.backend))")

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=131,
         tokens=86,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '\n'
              'def parse_args():\n'
              '    args = argparse.ArgumentParser()\n'
              "    args.add_argument('--backend', type=str, choices=['gpt-4', "
              "'gpt-3.5-turbo'], default='gpt-4')\n"
              "    args.add_argument('--temperature', type=float, "
              'default=0.7)\n'
              '\n'
              "    args.add_argument('--task', type=str, required=True, "
              "choices=['game24', 'text', 'cros")

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=133,
         tokens=84,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='parse_args',
         body='def parse_args():\n'
              '    args = argparse.ArgumentParser()\n'
              "    args.add_argument('--backend', type=str, choices=['gpt-4', "
              "'gpt-3.5-turbo'], default='gpt-4')\n"
              "    args.add_argument('--temperature', type=float, "
              'default=0.7)\n'
              '\n'
              "    args.add_argument('--task', type=str, required=True, "
              "choices=['game24', 'text', 'cross")

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=138,
         tokens=73,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body="swords'])\n"
              "    args.add_argument('--task_file_path', type=str, "
              'required=True)\n'
              "    args.add_argument('--task_start_index', type=int, "
              'default=900)\n'
              "    args.add_argument('--task_end_index', type=int, "
              'default=1000)\n'
              '\n'
              "    args.add_argument('--naive_run', action='store_true')\n"
              "    args.add_argument('--prompt_sample',")

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=138,
         tokens=73,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='parse_args',
         body="words'])\n"
              "    args.add_argument('--task_file_path', type=str, "
              'required=True)\n'
              "    args.add_argument('--task_start_index', type=int, "
              'default=900)\n'
              "    args.add_argument('--task_end_index', type=int, "
              'default=1000)\n'
              '\n'
              "    args.add_argument('--naive_run', action='store_true')\n"
              "    args.add_argument('--prompt_sample', ")

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=144,
         tokens=150,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body=" type=str, choices=['standard', 'cot'])  # only used when "
              'method_generate = sample, or naive_run\n'
              '\n'
              "    args.add_argument('--method_generate', type=str, "
              "choices=['sample', 'propose'])\n"
              "    args.add_argument('--method_evaluate', type=str, "
              "choices=['value', 'vote'])\n"
              "    args.add_argument('--method_select', type=str, "
              "choices=['sample', 'greedy'])\n"
              "    args.add_argument('--n_generate_sample', type=int, "
              'default=1)  # only thing needed if naive_run\n'
              "    args.add_argument('--n_evaluate_sample', type=int, "
              'default=1)\n'
              "    args.add_argument('--n_select_sample', type=int, "
              'default=1)\n'
              '\n'
              '    args = args.parse_args()\n'
              '    return args\n')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=144,
         tokens=149,
         depth=1,
         parent_id=None,
         category='function',
         definition=True,
         summary=False,
         name='parse_args',
         body="type=str, choices=['standard', 'cot'])  # only used when "
              'method_generate = sample, or naive_run\n'
              '\n'
              "    args.add_argument('--method_generate', type=str, "
              "choices=['sample', 'propose'])\n"
              "    args.add_argument('--method_evaluate', type=str, "
              "choices=['value', 'vote'])\n"
              "    args.add_argument('--method_select', type=str, "
              "choices=['sample', 'greedy'])\n"
              "    args.add_argument('--n_generate_sample', type=int, "
              'default=1)  # only thing needed if naive_run\n'
              "    args.add_argument('--n_evaluate_sample', type=int, "
              'default=1)\n'
              "    args.add_argument('--n_select_sample', type=int, "
              'default=1)\n'
              '\n'
              '    args = args.parse_args()\n'
              '    return args')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=144,
         tokens=12,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# only used when method_generate = sample, or naive_run')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=149,
         tokens=7,
         depth=2,
         parent_id=None,
         category='documentation',
         definition=True,
         summary=False,
         name='',
         body='# only thing needed if naive_run')

Fragment(document_cs='ff5e97a42090976ccfcb3dae487aae487441615d08df7c832b19a386edc29d7d',
         id=-1,
         lineno=155,
         tokens=23,
         depth=0,
         parent_id=None,
         category='module',
         definition=True,
         summary=False,
         name='',
         body='\n'
              '\n'
              "if __name__ == '__main__':\n"
              '    args = parse_args()\n'
              '    print(args)\n'
              '    run(args)')